[{
  "history_id" : "vrja7zwe2td",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564597,
  "history_end_time" : 1737327564597,
  "history_notes" : null,
  "history_process" : "78vedq",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "mkeoozuyoo7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564609,
  "history_end_time" : 1737327564609,
  "history_notes" : null,
  "history_process" : "mxpyqt",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "2jzucynzqow",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564646,
  "history_end_time" : 1737327564646,
  "history_notes" : null,
  "history_process" : "rauqsh",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "o8kq6xkmxqw",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564659,
  "history_end_time" : 1737327564659,
  "history_notes" : null,
  "history_process" : "u7xh2p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ca01j3limyc",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564667,
  "history_end_time" : 1737327564667,
  "history_notes" : null,
  "history_process" : "e8k4wq",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "dv9ih4mwp5e",
  "history_input" : "import joblib\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler\nimport numpy as np\nfrom snowcast_utils import homedir, work_dir, model_dir, plot_dir, output_dir, month_to_season, test_start_date, test_end_date, process_dates_in_range\nimport os\nimport random\nimport string\nimport shutil\nfrom model_creation_et import selected_columns\nfrom datetime import datetime, timedelta\n# from interpret_model_results import explain_predictions\n\nimport shap\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport traceback\n\nCOLUMN_NAME_MAPPER = {'Latitude': 'lat', \n                         'Longitude': 'lon',\n                         'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n#                          'Elevation': 'elevation',\n#                          'Slope': 'Slope',\n#                          'Aspect': 'Aspect',\n#                          'Curvature': 'Curvature',\n#                          'Northness': 'Northness',\n#                          'Eastness': 'Eastness',\n                         'cumulative_AMSR_SWE': 'cumulative_SWE',\n                         'cumulative_AMSR_Flag': 'cumulative_Flag',\n                         'cumulative_tmmn':'cumulative_air_temperature_tmmn',\n                         'cumulative_etr': 'cumulative_potential_evapotranspiration',\n                         'cumulative_vpd': 'cumulative_mean_vapor_pressure_deficit',\n                         'cumulative_rmax': 'cumulative_relative_humidity_rmax', \n                         'cumulative_rmin': 'cumulative_relative_humidity_rmin',\n                         'cumulative_pr': 'cumulative_precipitation_amount',\n                         'cumulative_tmmx': 'cumulative_air_temperature_tmmx',\n                         'cumulative_vs': 'cumulative_wind_speed',\n                         'AMSR_SWE': 'SWE',\n                         'AMSR_Flag': 'Flag',\n#                          'relative_humidity_rmin': '',\n#                          'cumulative_rmin',\n#                          'mean_vapor_pressure_deficit', \n#                          'cumulative_vpd', \n#                          'wind_speed',\n#                          'cumulative_vs', \n#                          'relative_humidity_rmax', 'cumulative_rmax',\n\n# 'precipitation_amount', 'cumulative_pr', 'air_temperature_tmmx',\n\n# 'cumulative_tmmx', 'potential_evapotranspiration', 'cumulative_etr',\n\n# 'air_temperature_tmmn', 'cumulative_tmmn', 'x', 'y', 'elevation',\n\n# 'slope', 'aspect', 'curvature', 'northness', 'eastness', 'AMSR_SWE',\n\n# 'cumulative_AMSR_SWE', 'AMSR_Flag', 'cumulative_AMSR_Flag',\n}\n\nCOLUMN_LOOK_BACK = [\n    'mean_vapor_pressure_deficit',\n    'wind_speed', \n    'precipitation_amount', \n    'potential_evapotranspiration',\n    'air_temperature_tmmn',\n    'air_temperature_tmmx',\n    'relative_humidity_rmin',\n    'relative_humidity_rmax',\n    'SWE',\n    'fsca',\n]\n\nCOLUMN_UNCHANGED = [\n    'Aspect', \n    'Elevation', \n    'Curvature', \n    'Northness', \n    'Flag', \n    'x', \n    'Eastness', \n    'water_year', \n    'Slope', \n    'lc_prop3', \n    'y'\n]\n\ndef generate_random_string(length):\n    # Define the characters that can be used in the random string\n    characters = string.ascii_letters + string.digits  # You can customize this to include other characters if needed\n\n    # Generate a random string of the specified length\n    random_string = ''.join(random.choice(characters) for _ in range(length))\n\n    return random_string\n  \n\ndef load_model(model_path):\n    \"\"\"\n    Load a machine learning model from a file.\n\n    Args:\n        model_path (str): Path to the saved model file.\n\n    Returns:\n        model: The loaded machine learning model.\n    \"\"\"\n    return joblib.load(model_path)\n\ndef load_data(file_path):\n    \"\"\"\n    Load data from a CSV file.\n\n    Args:\n        file_path (str): Path to the CSV file containing the data.\n\n    Returns:\n        pd.DataFrame: A pandas DataFrame containing the loaded data.\n    \"\"\"\n    return pd.read_csv(file_path)\n\n\n# 'SWE', 'relative_humidity_rmin', 'potential_evapotranspiration',\n#     'air_temperature_tmmx', 'relative_humidity_rmax',\n#     'mean_vapor_pressure_deficit', 'air_temperature_tmmn', 'wind_speed',\n#     'Elevation', 'Aspect', 'Curvature', 'Northness', 'Eastness', 'fsca',\n#     'Slope', 'SWE_1', 'air_temperature_tmmn_1',\n#     'potential_evapotranspiration_1', 'mean_vapor_pressure_deficit_1',\n#     'relative_humidity_rmax_1', 'relative_humidity_rmin_1',\n#     'air_temperature_tmmx_1', 'wind_speed_1', 'fsca_1', 'SWE_2',\n#     'air_temperature_tmmn_2', 'potential_evapotranspiration_2',\n#     'mean_vapor_pressure_deficit_2', 'relative_humidity_rmax_2',\n#     'relative_humidity_rmin_2', 'air_temperature_tmmx_2', 'wind_speed_2',\n#     'fsca_2', 'SWE_3', 'air_temperature_tmmn_3',\n#     'potential_evapotranspiration_3', 'mean_vapor_pressure_deficit_3',\n#     'relative_humidity_rmax_3', 'relative_humidity_rmin_3',\n#     'air_temperature_tmmx_3', 'wind_speed_3', 'fsca_3', 'SWE_4',\n#     'air_temperature_tmmn_4', 'potential_evapotranspiration_4',\n#     'mean_vapor_pressure_deficit_4', 'relative_humidity_rmax_4',\n#     'relative_humidity_rmin_4', 'air_temperature_tmmx_4', 'wind_speed_4',\n#     'fsca_4', 'SWE_5', 'air_temperature_tmmn_5',\n#     'potential_evapotranspiration_5', 'mean_vapor_pressure_deficit_5',\n#     'relative_humidity_rmax_5', 'relative_humidity_rmin_5',\n#     'air_temperature_tmmx_5', 'wind_speed_5', 'fsca_5', 'SWE_6',\n#     'air_temperature_tmmn_6', 'potential_evapotranspiration_6',\n#     'mean_vapor_pressure_deficit_6', 'relative_humidity_rmax_6',\n#     'relative_humidity_rmin_6', 'air_temperature_tmmx_6', 'wind_speed_6',\n#     'fsca_6', 'SWE_7', 'air_temperature_tmmn_7',\n#     'potential_evapotranspiration_7', 'mean_vapor_pressure_deficit_7',\n#     'relative_humidity_rmax_7', 'relative_humidity_rmin_7',\n#     'air_temperature_tmmx_7', 'wind_speed_7', 'fsca_7', 'water_year'\n\ndef preprocess_data_with_history():\n    pass\n\ndef preprocess_chunk(chunk, day_offset):\n    \"\"\"\n    Load, clean, and rename columns for a specific day.\n\n    Args:\n        file_path (str): Path to the CSV file.\n        day_offset (int): Day offset (0 for current day, 1 for one day ago, etc.).\n\n    Returns:\n        pd.DataFrame: Processed DataFrame for the specific day.\n    \"\"\"\n    if \"date.1\" in chunk.columns:\n        chunk = chunk.drop([\"date.1\"], axis=1)\n    chunk.replace('--', pd.NA, inplace=True)\n    chunk.rename(columns=COLUMN_NAME_MAPPER, inplace=True)\n    chunk['date'] = pd.to_datetime(chunk['date'])\n\n    # print(\"Before drop: \", chunk.columns)\n    if day_offset != 0:\n        chunk.drop(COLUMN_UNCHANGED+[\"date\"], axis=1, inplace=True)\n        for col in COLUMN_LOOK_BACK:\n            chunk.rename(\n                columns={col: f\"{col}_{day_offset}\"}, inplace=True\n            )\n\n    # print(\"After drop: \", chunk.columns)\n    return chunk\n\ndef preprocess_data(target_date, is_model_input: bool = True):\n    \"\"\"\n    Preprocess the input data for model prediction.\n\n    Args:\n        target_date (str): Target date in the format 'YYYY-MM-DD'.\n        is_model_input (bool): Flag to specify if the data is for model input.\n\n    Returns:\n        pd.DataFrame: Preprocessed data ready for prediction.\n    \"\"\"\n    \n    # Initialize a list to store all data including past 7 days\n    all_data = []\n\n    # Process the current day\n    # current_day_path = f'{work_dir}/testing_all_ready_{target_date}.csv'\n    # current_day_data = process_day_data(current_day_path, 0)\n    # all_data.append(current_day_data)\n\n    # Process the past 7 days\n    target_date_dt = pd.to_datetime(target_date)\n    for i in range(0, 7):\n        past_date = (target_date_dt - pd.Timedelta(days=i)).strftime('%Y-%m-%d')\n        past_data_path = f'{work_dir}/testing_all_ready_{past_date}.csv'\n        past_day_data = process_day_data(past_data_path, i)\n        all_data.append(past_day_data)\n\n    # Merge all data on 'date', 'lat', and 'lon'\n    merged_data = all_data[0]\n    for additional_data in all_data[1:]:\n        merged_data = merged_data.merge(additional_data, on=['date', 'lat', 'lon'], how='outer')\n\n    if is_model_input:\n        if \"swe_value\" in selected_columns:\n            selected_columns.remove(\"swe_value\")\n        desired_order = selected_columns + ['lat', 'lon']\n\n        merged_data = merged_data[desired_order]\n        merged_data = merged_data.reindex(columns=desired_order)\n\n        # print(\"Reorganized columns: \", merged_data.columns)\n\n    # print(merged_data.head())\n\n    return merged_data\n\ndef predict_swe(model, data):\n    \"\"\"\n    Predict Snow Water Equivalent (SWE) values using a pre-trained model.\n\n    This function takes in a machine learning model and a DataFrame containing \n    meteorological and geospatial data, preprocesses the data by handling missing \n    values and dropping unnecessary columns, and applies the model to predict SWE values. \n    The predicted SWE values are then added to the original DataFrame as a new column \n    called 'predicted_swe'.\n\n    Args:\n        model (object): A pre-trained machine learning model with a `predict` method.\n        data (pd.DataFrame): A pandas DataFrame containing input data for prediction.\n            It is expected to have columns including 'lat', 'lon', and other relevant \n            features for the model.\n\n    Returns:\n        pd.DataFrame: The original DataFrame with an additional column 'predicted_swe' \n        containing the predicted SWE values.\n    \"\"\"\n    data = data.fillna(-1)\n    input_data = data\n    input_data = data.drop([\"lat\", \"lon\"], axis=1)\n\n    print(\"Assign -1 to fsca column..\")\n    # original_input_data = input_data.copy()\n    # input_data.loc[input_data['fsca'] > 100, 'fsca'] = -1 \n    for column in input_data.columns:\n        if 'fsca' in column.lower() or 'swe' in column.lower():  # Adjust to case-insensitive match\n            input_data.loc[input_data[column] > 100, column] = -1\n\n    #input_data = data.drop(['date', 'SWE', 'Flag', 'mean_vapor_pressure_deficit', 'potential_evapotranspiration', 'air_temperature_tmmx', 'relative_humidity_rmax', 'relative_humidity_rmin',], axis=1)\n    #scaler = StandardScaler()\n\n    # Fit the scaler on the training data and transform both training and testing data\n    #input_data_scaled = scaler.fit_transform(input_data)\n    print(\"Start to predict\", input_data.shape)\n    predictions = model.predict(input_data)\n    input_data['predicted_swe'] = predictions\n    input_data['lat'] = data['lat']\n    input_data['lon'] = data['lon']\n\n    # print(\"Explain the prediction: \")\n    # explain_predictions(model, input_data, input_data.columns, f\"{output_dir}/explain_ai.csv\", f\"{plot_dir}\")\n    return input_data\n\ndef merge_data(original_data, predicted_data):\n    \"\"\"\n    Merge predicted SWE data with the original data.\n\n    Args:\n        original_data (pd.DataFrame): Original input data.\n        predicted_data (pd.DataFrame): Dataframe with predicted SWE values.\n\n    Returns:\n        pd.DataFrame: Merged dataframe.\n    \"\"\"\n    #new_data_extracted = predicted_data[[\"date\", \"lat\", \"lon\", \"predicted_swe\"]]\n    if \"date\" not in predicted_data:\n    \tpredicted_data[\"date\"] = test_start_date\n    # new_data_extracted = predicted_data[[\"date\", \"lat\", \"lon\", \"predicted_swe\"]]\n    # print(\"original_data.columns: \", original_data.columns)\n    # print(\"predicted_data.columns: \", predicted_data.columns)\n    # print(\"new prediction statistics: \", predicted_data[\"predicted_swe\"].describe())\n    #merged_df = original_data.merge(new_data_extracted, on=[\"date\", 'lat', 'lon'], how='left')\n    merged_df = original_data.merge(predicted_data, on=['lat', 'lon'], how='left')\n    # print(\"first merged df: \", merged_df.columns)\n\n    merged_df.loc[merged_df['fsca'] == -1, 'predicted_swe'] = 0\n    # merged_df.loc[merged_df['fsca'] == 239, 'predicted_swe'] = 0\n    # merged_df.loc[merged_df['fsca'] == 225, 'predicted_swe'] = 0\n    #merged_df.loc[merged_df['cumulative_fsca'] == 0, 'predicted_swe'] = 0\n    merged_df.loc[merged_df['fsca'] == 0, 'predicted_swe'] = 0\n    \n    merged_df.loc[merged_df['air_temperature_tmmx'].isnull(), \n                  'predicted_swe'] = 0\n\n    merged_df.loc[merged_df['lc_prop3'] == 3, 'predicted_swe'] = 0\n    merged_df.loc[merged_df['lc_prop3'] == 255, 'predicted_swe'] = 0\n    merged_df.loc[merged_df['lc_prop3'] == 27, 'predicted_swe'] = 0\n\n    return merged_df\n\n\ndef predict_in_batches(\n    target_date: str, \n    output_path: str = None, \n    batch_size: int = 100000\n):\n    \"\"\"\n    Predict snow water equivalent (SWE) in batches by processing 7 days' data chunk by chunk.\n\n    Args:\n        target_date (str): Target date in the format 'YYYY-MM-DD'.\n        output_path (str): Path to save the prediction results.\n        batch_size (int): Size of each chunk to process.\n\n    Returns:\n        None\n    \"\"\"\n    # height = 666\n    # width = 694\n    model_path = f'{model_dir}/wormhole_ETHole_latest.joblib'\n    print(f\"Using model: {model_path}\")\n\n    if output_path is None:\n        output_path = f'{output_dir}/test_data_predicted_latest_{target_date}.csv'\n\n    if os.path.exists(output_path):\n        os.remove(output_path)\n        print(f\"File '{output_path}' has been removed.\")\n\n    # Load the model\n    model = load_model(model_path)\n\n    # Initialize file readers for each of the 7 days\n    target_date_dt = pd.to_datetime(target_date)\n    day_file_iters = []\n\n    for day_offset in range(8):\n        day_date = (target_date_dt - pd.Timedelta(days=day_offset)).strftime('%Y-%m-%d')\n        day_file_path = f'{work_dir}/testing_all_ready_{day_date}.csv'\n\n        try:\n            print(\"Loading batches from \", day_file_path)\n            day_file_iters.append(pd.read_csv(day_file_path, chunksize=batch_size))\n        except FileNotFoundError:\n            print(f\"File not found: {day_file_path}. Skipping this day.\")\n            day_file_iters.append(None)\n\n    # Process chunks\n    chunk_idx = 0\n    while True:\n        chunk_list = []\n        for day_idx, file_iter in enumerate(day_file_iters):\n            if file_iter is None:\n                continue\n            try:\n                chunk = next(file_iter)\n                print(f\"Read chunk {chunk_idx + 1} from day {day_idx + 1}\")\n                preprocessed_chunk = preprocess_chunk(chunk, day_offset=day_idx)\n                chunk_list.append(preprocessed_chunk)\n            except StopIteration:\n                print(f\"No more chunks for day {day_idx + 1}\")\n                continue\n\n        # If no more chunks for all days, break\n        if not chunk_list:\n            print(\"All chunks are processed\")\n            break\n\n        # Merge all chunks on 'date', 'lat', and 'lon'\n        merged_input = chunk_list[0]\n        for additional_chunk in chunk_list[1:]:\n            merged_input = merged_input.merge(additional_chunk, on=['lat', 'lon'], how='outer')\n\n        if len(merged_input) != len(chunk_list[0]):\n            raise ValueError(\n                f\"Row number mismatch: merged_input has {len(merged_input)} rows, \"\n                f\"but chunk_list[0] has {len(chunk_list[0])} rows. Ensure data alignment.\"\n            )\n\n        print(\"merged_input.columns = \", merged_input.columns)\n\n        # Reorganize columns for model input\n        if \"swe_value\" in selected_columns:\n            selected_columns.remove(\"swe_value\")\n        desired_order = selected_columns + ['lat', 'lon']\n        used_input = merged_input[desired_order].reindex(columns=desired_order)\n        unused_input = merged_input[[\"lc_prop3\", \"lat\", \"lon\", \"date\"]]\n\n        # Predict on the merged input\n        predictions = predict_swe(model, used_input)\n        print(f\"Predicted {len(predictions)} rows for chunk {chunk_idx + 1}\")\n\n        # Merge predictions with input\n        predictions_merged = merge_data(unused_input, predictions)\n\n        # Save predictions to output file incrementally\n        if chunk_idx == 0:\n            predictions_merged.to_csv(output_path, index=False, mode='w')\n        else:\n            predictions_merged.to_csv(output_path, index=False, mode='a', header=False)\n\n        chunk_idx += 1\n\n    print(f\"Prediction completed. Results saved to {output_path}\")\n\ndef predict_for_date(current_date, force: bool = False):\n    \"\"\"\n    Example callback function to predict SWE for a specific date.\n\n    Args:\n        current_date (datetime): The date to process.\n        force (bool): Whether to force processing even if conditions aren't met.\n    \"\"\"\n    current_date_str = current_date.strftime(\"%Y-%m-%d\")\n    print(f\">>>>>\\nPredicting SWE for day {current_date_str}\")\n    # Replace this with actual prediction logic\n    predict_in_batches(target_date=current_date_str,)\n\nif __name__ == \"__main__\":\n\tprocess_dates_in_range(\n        # start_date=test_start_date,\n        # end_date=test_end_date,\n        start_date=\"2025-01-14\",\n        end_date=\"2025-01-14\",\n        callback=predict_for_date,\n        force = True\n    )\n",
  "history_output" : "/home/chetana\ntoday date = 2025-01-19\nStart day: 2025-01-12, End day: 2025-01-16\ntest start date:  2025-01-12\ntest end date:  2025-01-16\nProcessing date: 2025-01-14\n>>>>>\nPredicting SWE for day 2025-01-14\nUsing model: /home/chetana/models//wormhole_ETHole_latest.joblib\nFile '/home/chetana/data/output/test_data_predicted_latest_2025-01-14.csv' has been removed.\nLoading batches from  /home/chetana/data/gridmet_test_run/testing_all_ready_2025-01-14.csv\nLoading batches from  /home/chetana/data/gridmet_test_run/testing_all_ready_2025-01-13.csv\nLoading batches from  /home/chetana/data/gridmet_test_run/testing_all_ready_2025-01-12.csv\nLoading batches from  /home/chetana/data/gridmet_test_run/testing_all_ready_2025-01-11.csv\nLoading batches from  /home/chetana/data/gridmet_test_run/testing_all_ready_2025-01-10.csv\nLoading batches from  /home/chetana/data/gridmet_test_run/testing_all_ready_2025-01-09.csv\nLoading batches from  /home/chetana/data/gridmet_test_run/testing_all_ready_2025-01-08.csv\nLoading batches from  /home/chetana/data/gridmet_test_run/testing_all_ready_2025-01-07.csv\nRead chunk 1 from day 1\nRead chunk 1 from day 2\nRead chunk 1 from day 3\nRead chunk 1 from day 4\nRead chunk 1 from day 5\nRead chunk 1 from day 6\nRead chunk 1 from day 7\nRead chunk 1 from day 8\nmerged_input.columns =  Index(['lat', 'lon', 'air_temperature_tmmn', 'mean_vapor_pressure_deficit',\n       'wind_speed', 'precipitation_amount', 'relative_humidity_rmax',\n       'potential_evapotranspiration', 'relative_humidity_rmin',\n       'air_temperature_tmmx', 'x', 'y', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'SWE', 'Flag', 'date', 'fsca',\n       'lc_prop3', 'water_year', 'relative_humidity_rmax_1',\n       'relative_humidity_rmin_1', 'potential_evapotranspiration_1',\n       'mean_vapor_pressure_deficit_1', 'precipitation_amount_1',\n       'wind_speed_1', 'air_temperature_tmmx_1', 'air_temperature_tmmn_1',\n       'SWE_1', 'fsca_1', 'wind_speed_2', 'air_temperature_tmmn_2',\n       'potential_evapotranspiration_2', 'relative_humidity_rmax_2',\n       'relative_humidity_rmin_2', 'mean_vapor_pressure_deficit_2',\n       'air_temperature_tmmx_2', 'precipitation_amount_2', 'SWE_2', 'fsca_2',\n       'relative_humidity_rmax_3', 'precipitation_amount_3',\n       'relative_humidity_rmin_3', 'mean_vapor_pressure_deficit_3',\n       'potential_evapotranspiration_3', 'wind_speed_3',\n       'air_temperature_tmmn_3', 'air_temperature_tmmx_3', 'SWE_3', 'fsca_3',\n       'air_temperature_tmmx_4', 'relative_humidity_rmax_4',\n       'precipitation_amount_4', 'wind_speed_4',\n       'mean_vapor_pressure_deficit_4', 'relative_humidity_rmin_4',\n       'air_temperature_tmmn_4', 'potential_evapotranspiration_4', 'SWE_4',\n       'fsca_4', 'air_temperature_tmmx_5', 'relative_humidity_rmin_5',\n       'mean_vapor_pressure_deficit_5', 'air_temperature_tmmn_5',\n       'wind_speed_5', 'potential_evapotranspiration_5',\n       'relative_humidity_rmax_5', 'precipitation_amount_5', 'SWE_5', 'fsca_5',\n       'air_temperature_tmmx_6', 'relative_humidity_rmin_6',\n       'air_temperature_tmmn_6', 'mean_vapor_pressure_deficit_6',\n       'wind_speed_6', 'precipitation_amount_6',\n       'potential_evapotranspiration_6', 'relative_humidity_rmax_6', 'SWE_6',\n       'fsca_6', 'wind_speed_7', 'precipitation_amount_7',\n       'air_temperature_tmmx_7', 'air_temperature_tmmn_7',\n       'potential_evapotranspiration_7', 'relative_humidity_rmax_7',\n       'relative_humidity_rmin_7', 'mean_vapor_pressure_deficit_7', 'SWE_7',\n       'fsca_7'],\n      dtype='object')\nAssign -1 to fsca column..\nStart to predict (100000, 79)\nPredicted 100000 rows for chunk 1\nRead chunk 2 from day 1\nRead chunk 2 from day 2\nRead chunk 2 from day 3\nRead chunk 2 from day 4\nRead chunk 2 from day 5\nRead chunk 2 from day 6\nRead chunk 2 from day 7\nRead chunk 2 from day 8\nmerged_input.columns =  Index(['lat', 'lon', 'air_temperature_tmmn', 'mean_vapor_pressure_deficit',\n       'wind_speed', 'precipitation_amount', 'relative_humidity_rmax',\n       'potential_evapotranspiration', 'relative_humidity_rmin',\n       'air_temperature_tmmx', 'x', 'y', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'SWE', 'Flag', 'date', 'fsca',\n       'lc_prop3', 'water_year', 'relative_humidity_rmax_1',\n       'relative_humidity_rmin_1', 'potential_evapotranspiration_1',\n       'mean_vapor_pressure_deficit_1', 'precipitation_amount_1',\n       'wind_speed_1', 'air_temperature_tmmx_1', 'air_temperature_tmmn_1',\n       'SWE_1', 'fsca_1', 'wind_speed_2', 'air_temperature_tmmn_2',\n       'potential_evapotranspiration_2', 'relative_humidity_rmax_2',\n       'relative_humidity_rmin_2', 'mean_vapor_pressure_deficit_2',\n       'air_temperature_tmmx_2', 'precipitation_amount_2', 'SWE_2', 'fsca_2',\n       'relative_humidity_rmax_3', 'precipitation_amount_3',\n       'relative_humidity_rmin_3', 'mean_vapor_pressure_deficit_3',\n       'potential_evapotranspiration_3', 'wind_speed_3',\n       'air_temperature_tmmn_3', 'air_temperature_tmmx_3', 'SWE_3', 'fsca_3',\n       'air_temperature_tmmx_4', 'relative_humidity_rmax_4',\n       'precipitation_amount_4', 'wind_speed_4',\n       'mean_vapor_pressure_deficit_4', 'relative_humidity_rmin_4',\n       'air_temperature_tmmn_4', 'potential_evapotranspiration_4', 'SWE_4',\n       'fsca_4', 'air_temperature_tmmx_5', 'relative_humidity_rmin_5',\n       'mean_vapor_pressure_deficit_5', 'air_temperature_tmmn_5',\n       'wind_speed_5', 'potential_evapotranspiration_5',\n       'relative_humidity_rmax_5', 'precipitation_amount_5', 'SWE_5', 'fsca_5',\n       'air_temperature_tmmx_6', 'relative_humidity_rmin_6',\n       'air_temperature_tmmn_6', 'mean_vapor_pressure_deficit_6',\n       'wind_speed_6', 'precipitation_amount_6',\n       'potential_evapotranspiration_6', 'relative_humidity_rmax_6', 'SWE_6',\n       'fsca_6', 'wind_speed_7', 'precipitation_amount_7',\n       'air_temperature_tmmx_7', 'air_temperature_tmmn_7',\n       'potential_evapotranspiration_7', 'relative_humidity_rmax_7',\n       'relative_humidity_rmin_7', 'mean_vapor_pressure_deficit_7', 'SWE_7',\n       'fsca_7'],\n      dtype='object')\nAssign -1 to fsca column..\nStart to predict (100000, 79)\nPredicted 100000 rows for chunk 2\nRead chunk 3 from day 1\nRead chunk 3 from day 2\nRead chunk 3 from day 3\nRead chunk 3 from day 4\nRead chunk 3 from day 5\nRead chunk 3 from day 6\nRead chunk 3 from day 7\nRead chunk 3 from day 8\nmerged_input.columns =  Index(['lat', 'lon', 'air_temperature_tmmn', 'mean_vapor_pressure_deficit',\n       'wind_speed', 'precipitation_amount', 'relative_humidity_rmax',\n       'potential_evapotranspiration', 'relative_humidity_rmin',\n       'air_temperature_tmmx', 'x', 'y', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'SWE', 'Flag', 'date', 'fsca',\n       'lc_prop3', 'water_year', 'relative_humidity_rmax_1',\n       'relative_humidity_rmin_1', 'potential_evapotranspiration_1',\n       'mean_vapor_pressure_deficit_1', 'precipitation_amount_1',\n       'wind_speed_1', 'air_temperature_tmmx_1', 'air_temperature_tmmn_1',\n       'SWE_1', 'fsca_1', 'wind_speed_2', 'air_temperature_tmmn_2',\n       'potential_evapotranspiration_2', 'relative_humidity_rmax_2',\n       'relative_humidity_rmin_2', 'mean_vapor_pressure_deficit_2',\n       'air_temperature_tmmx_2', 'precipitation_amount_2', 'SWE_2', 'fsca_2',\n       'relative_humidity_rmax_3', 'precipitation_amount_3',\n       'relative_humidity_rmin_3', 'mean_vapor_pressure_deficit_3',\n       'potential_evapotranspiration_3', 'wind_speed_3',\n       'air_temperature_tmmn_3', 'air_temperature_tmmx_3', 'SWE_3', 'fsca_3',\n       'air_temperature_tmmx_4', 'relative_humidity_rmax_4',\n       'precipitation_amount_4', 'wind_speed_4',\n       'mean_vapor_pressure_deficit_4', 'relative_humidity_rmin_4',\n       'air_temperature_tmmn_4', 'potential_evapotranspiration_4', 'SWE_4',\n       'fsca_4', 'air_temperature_tmmx_5', 'relative_humidity_rmin_5',\n       'mean_vapor_pressure_deficit_5', 'air_temperature_tmmn_5',\n       'wind_speed_5', 'potential_evapotranspiration_5',\n       'relative_humidity_rmax_5', 'precipitation_amount_5', 'SWE_5', 'fsca_5',\n       'air_temperature_tmmx_6', 'relative_humidity_rmin_6',\n       'air_temperature_tmmn_6', 'mean_vapor_pressure_deficit_6',\n       'wind_speed_6', 'precipitation_amount_6',\n       'potential_evapotranspiration_6', 'relative_humidity_rmax_6', 'SWE_6',\n       'fsca_6', 'wind_speed_7', 'precipitation_amount_7',\n       'air_temperature_tmmx_7', 'air_temperature_tmmn_7',\n       'potential_evapotranspiration_7', 'relative_humidity_rmax_7',\n       'relative_humidity_rmin_7', 'mean_vapor_pressure_deficit_7', 'SWE_7',\n       'fsca_7'],\n      dtype='object')\nAssign -1 to fsca column..\nStart to predict (100000, 79)\nPredicted 100000 rows for chunk 3\nRead chunk 4 from day 1\nRead chunk 4 from day 2\nRead chunk 4 from day 3\nRead chunk 4 from day 4\nRead chunk 4 from day 5\nRead chunk 4 from day 6\nRead chunk 4 from day 7\nRead chunk 4 from day 8\nmerged_input.columns =  Index(['lat', 'lon', 'air_temperature_tmmn', 'mean_vapor_pressure_deficit',\n       'wind_speed', 'precipitation_amount', 'relative_humidity_rmax',\n       'potential_evapotranspiration', 'relative_humidity_rmin',\n       'air_temperature_tmmx', 'x', 'y', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'SWE', 'Flag', 'date', 'fsca',\n       'lc_prop3', 'water_year', 'relative_humidity_rmax_1',\n       'relative_humidity_rmin_1', 'potential_evapotranspiration_1',\n       'mean_vapor_pressure_deficit_1', 'precipitation_amount_1',\n       'wind_speed_1', 'air_temperature_tmmx_1', 'air_temperature_tmmn_1',\n       'SWE_1', 'fsca_1', 'wind_speed_2', 'air_temperature_tmmn_2',\n       'potential_evapotranspiration_2', 'relative_humidity_rmax_2',\n       'relative_humidity_rmin_2', 'mean_vapor_pressure_deficit_2',\n       'air_temperature_tmmx_2', 'precipitation_amount_2', 'SWE_2', 'fsca_2',\n       'relative_humidity_rmax_3', 'precipitation_amount_3',\n       'relative_humidity_rmin_3', 'mean_vapor_pressure_deficit_3',\n       'potential_evapotranspiration_3', 'wind_speed_3',\n       'air_temperature_tmmn_3', 'air_temperature_tmmx_3', 'SWE_3', 'fsca_3',\n       'air_temperature_tmmx_4', 'relative_humidity_rmax_4',\n       'precipitation_amount_4', 'wind_speed_4',\n       'mean_vapor_pressure_deficit_4', 'relative_humidity_rmin_4',\n       'air_temperature_tmmn_4', 'potential_evapotranspiration_4', 'SWE_4',\n       'fsca_4', 'air_temperature_tmmx_5', 'relative_humidity_rmin_5',\n       'mean_vapor_pressure_deficit_5', 'air_temperature_tmmn_5',\n       'wind_speed_5', 'potential_evapotranspiration_5',\n       'relative_humidity_rmax_5', 'precipitation_amount_5', 'SWE_5', 'fsca_5',\n       'air_temperature_tmmx_6', 'relative_humidity_rmin_6',\n       'air_temperature_tmmn_6', 'mean_vapor_pressure_deficit_6',\n       'wind_speed_6', 'precipitation_amount_6',\n       'potential_evapotranspiration_6', 'relative_humidity_rmax_6', 'SWE_6',\n       'fsca_6', 'wind_speed_7', 'precipitation_amount_7',\n       'air_temperature_tmmx_7', 'air_temperature_tmmn_7',\n       'potential_evapotranspiration_7', 'relative_humidity_rmax_7',\n       'relative_humidity_rmin_7', 'mean_vapor_pressure_deficit_7', 'SWE_7',\n       'fsca_7'],\n      dtype='object')\nAssign -1 to fsca column..\nStart to predict (100000, 79)\nPredicted 100000 rows for chunk 4\nRead chunk 5 from day 1\nRead chunk 5 from day 2\nRead chunk 5 from day 3\nRead chunk 5 from day 4\nRead chunk 5 from day 5\nRead chunk 5 from day 6\nRead chunk 5 from day 7\nRead chunk 5 from day 8\nmerged_input.columns =  Index(['lat', 'lon', 'air_temperature_tmmn', 'mean_vapor_pressure_deficit',\n       'wind_speed', 'precipitation_amount', 'relative_humidity_rmax',\n       'potential_evapotranspiration', 'relative_humidity_rmin',\n       'air_temperature_tmmx', 'x', 'y', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'SWE', 'Flag', 'date', 'fsca',\n       'lc_prop3', 'water_year', 'relative_humidity_rmax_1',\n       'relative_humidity_rmin_1', 'potential_evapotranspiration_1',\n       'mean_vapor_pressure_deficit_1', 'precipitation_amount_1',\n       'wind_speed_1', 'air_temperature_tmmx_1', 'air_temperature_tmmn_1',\n       'SWE_1', 'fsca_1', 'wind_speed_2', 'air_temperature_tmmn_2',\n       'potential_evapotranspiration_2', 'relative_humidity_rmax_2',\n       'relative_humidity_rmin_2', 'mean_vapor_pressure_deficit_2',\n       'air_temperature_tmmx_2', 'precipitation_amount_2', 'SWE_2', 'fsca_2',\n       'relative_humidity_rmax_3', 'precipitation_amount_3',\n       'relative_humidity_rmin_3', 'mean_vapor_pressure_deficit_3',\n       'potential_evapotranspiration_3', 'wind_speed_3',\n       'air_temperature_tmmn_3', 'air_temperature_tmmx_3', 'SWE_3', 'fsca_3',\n       'air_temperature_tmmx_4', 'relative_humidity_rmax_4',\n       'precipitation_amount_4', 'wind_speed_4',\n       'mean_vapor_pressure_deficit_4', 'relative_humidity_rmin_4',\n       'air_temperature_tmmn_4', 'potential_evapotranspiration_4', 'SWE_4',\n       'fsca_4', 'air_temperature_tmmx_5', 'relative_humidity_rmin_5',\n       'mean_vapor_pressure_deficit_5', 'air_temperature_tmmn_5',\n       'wind_speed_5', 'potential_evapotranspiration_5',\n       'relative_humidity_rmax_5', 'precipitation_amount_5', 'SWE_5', 'fsca_5',\n       'air_temperature_tmmx_6', 'relative_humidity_rmin_6',\n       'air_temperature_tmmn_6', 'mean_vapor_pressure_deficit_6',\n       'wind_speed_6', 'precipitation_amount_6',\n       'potential_evapotranspiration_6', 'relative_humidity_rmax_6', 'SWE_6',\n       'fsca_6', 'wind_speed_7', 'precipitation_amount_7',\n       'air_temperature_tmmx_7', 'air_temperature_tmmn_7',\n       'potential_evapotranspiration_7', 'relative_humidity_rmax_7',\n       'relative_humidity_rmin_7', 'mean_vapor_pressure_deficit_7', 'SWE_7',\n       'fsca_7'],\n      dtype='object')\nAssign -1 to fsca column..\nStart to predict (62204, 79)\nPredicted 62204 rows for chunk 5\nNo more chunks for day 1\nNo more chunks for day 2\nNo more chunks for day 3\nNo more chunks for day 4\nNo more chunks for day 5\nNo more chunks for day 6\nNo more chunks for day 7\nNo more chunks for day 8\nAll chunks are processed\nPrediction completed. Results saved to /home/chetana/data/output/test_data_predicted_latest_2025-01-14.csv\n",
  "history_begin_time" : 1737327565626,
  "history_end_time" : 1737327662262,
  "history_notes" : null,
  "history_process" : "h1qp9v",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "qd42v5wjx5u",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564679,
  "history_end_time" : 1737327564679,
  "history_notes" : null,
  "history_process" : "urd0nk",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "x3q0sx80m6c",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564682,
  "history_end_time" : 1737327564682,
  "history_notes" : null,
  "history_process" : "525l8q",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "mt2973qvj0a",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564684,
  "history_end_time" : 1737327564684,
  "history_notes" : null,
  "history_process" : "7temiv",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ho50l2fk6yh",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564686,
  "history_end_time" : 1737327564686,
  "history_notes" : null,
  "history_process" : "rmxece",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "zot6s6ooivd",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564687,
  "history_end_time" : 1737327564687,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "xea439wvd2k",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564688,
  "history_end_time" : 1737327564688,
  "history_notes" : null,
  "history_process" : "sjs5by",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "hc33knuf8rh",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564690,
  "history_end_time" : 1737327564690,
  "history_notes" : null,
  "history_process" : "y7nb46",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "olwrva52c4u",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564691,
  "history_end_time" : 1737327564691,
  "history_notes" : null,
  "history_process" : "a8p3n7",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "iycf7xepbyb",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564692,
  "history_end_time" : 1737327564692,
  "history_notes" : null,
  "history_process" : "smsdr0",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "clp9fc9faih",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564694,
  "history_end_time" : 1737327564694,
  "history_notes" : null,
  "history_process" : "4i0sop",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "uwhxmv4j2ao",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564695,
  "history_end_time" : 1737327564695,
  "history_notes" : null,
  "history_process" : "b63prf",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "rjy3xp566ly",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564696,
  "history_end_time" : 1737327564696,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "0z4b5v4m7mc",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564698,
  "history_end_time" : 1737327564698,
  "history_notes" : null,
  "history_process" : "wdh394",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "9uroztzy27z",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564699,
  "history_end_time" : 1737327564699,
  "history_notes" : null,
  "history_process" : "p87wh1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "06pkhwrtlyi",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564707,
  "history_end_time" : 1737327564707,
  "history_notes" : null,
  "history_process" : "ilbqzg",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "876bdvbb6j5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564709,
  "history_end_time" : 1737327564709,
  "history_notes" : null,
  "history_process" : "do86ae",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "mhciaq8i4js",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564710,
  "history_end_time" : 1737327564710,
  "history_notes" : null,
  "history_process" : "gkhtc0",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "5svuef3viqt",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564723,
  "history_end_time" : 1737327564723,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ot71vsuk401",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564724,
  "history_end_time" : 1737327564724,
  "history_notes" : null,
  "history_process" : "br9etb",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "gdin6ymllze",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564725,
  "history_end_time" : 1737327564725,
  "history_notes" : null,
  "history_process" : "c2xkhz",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "cx3eovym1q5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564727,
  "history_end_time" : 1737327564727,
  "history_notes" : null,
  "history_process" : "doinnd",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "nrnzc0fssg8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564728,
  "history_end_time" : 1737327564728,
  "history_notes" : null,
  "history_process" : "b7a4fu",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "gj9numkl84i",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564730,
  "history_end_time" : 1737327564730,
  "history_notes" : null,
  "history_process" : "gnpbdq",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "36gt15czz81",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564731,
  "history_end_time" : 1737327564731,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "5j6ug6mk50t",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564733,
  "history_end_time" : 1737327564733,
  "history_notes" : null,
  "history_process" : "fa7e4u",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "apjzo0cnosu",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564734,
  "history_end_time" : 1737327564734,
  "history_notes" : null,
  "history_process" : "drwmbo",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "dmrrdypljwg",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564736,
  "history_end_time" : 1737327564736,
  "history_notes" : null,
  "history_process" : "2n7b06",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "fzokmqky8ad",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564737,
  "history_end_time" : 1737327564737,
  "history_notes" : null,
  "history_process" : "bwdy3s",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "n8na17qotgr",
  "history_input" : "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom datetime import timedelta, datetime\nimport numpy as np\nimport uuid\nimport matplotlib.colors as mcolors\nimport geopandas as gpd\nimport rasterio\nfrom rasterio.transform import from_origin\nfrom rasterio.enums import Resampling\nfrom rasterio import warp\nfrom shapely.geometry import Point\nfrom rasterio.crs import CRS\nimport rasterio.features\nfrom rasterio.features import rasterize\nimport os\nimport math\nfrom datetime import datetime, timedelta\n\nfrom scipy.interpolate import griddata\n\n# Import utility functions and variables from 'snowcast_utils'\nfrom snowcast_utils import data_dir, work_dir, plot_dir, output_dir, test_start_date, test_end_date,process_dates_in_range\n\n# Define a custom colormap with specified colors and ranges\ncolors = [\n    (0.8627, 0.8627, 0.8627),  # #DCDCDC - 0 - 1\n    (0.8627, 1.0000, 1.0000),  # #DCFFFF - 1 - 2\n    (0.6000, 1.0000, 1.0000),  # #99FFFF - 2 - 4\n    (0.5569, 0.8235, 1.0000),  # #8ED2FF - 4 - 6\n    (0.4509, 0.6196, 0.8745),  # #739EDF - 6 - 8\n    (0.4157, 0.4706, 1.0000),  # #6A78FF - 8 - 10\n    (0.4235, 0.2784, 1.0000),  # #6C47FF - 10 - 12\n    (0.5529, 0.0980, 1.0000),  # #8D19FF - 12 - 14\n    (0.7333, 0.0000, 0.9176),  # #BB00EA - 14 - 16\n    (0.8392, 0.0000, 0.7490),  # #D600BF - 16 - 18\n    (0.7569, 0.0039, 0.4549),  # #C10074 - 18 - 20\n    (0.6784, 0.0000, 0.1961),  # #AD0032 - 20 - 30\n    (0.5020, 0.0000, 0.0000)   # #800000 - > 30\n]\n\ncmap_name = 'custom_snow_colormap'\ncustom_cmap = mcolors.ListedColormap(colors)\n\nlon_min, lon_max = -125, -100\nlat_min, lat_max = 25, 49.5\n\n# Define value ranges for color mapping\nfixed_value_ranges = [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 30]\n\nimport os\nimport requests\nimport zipfile\n\ndef download_and_unzip_shapefile(url, output_dir):\n    \"\"\"\n    Download and unzip a shapefile from the given URL.\n\n    Args:\n        url (str): URL of the zip file containing the shapefile.\n        output_dir (str): Directory to save the downloaded file and its contents.\n\n    Returns:\n        str: Path to the extracted shapefile directory.\n    \"\"\"\n    # Ensure the output directory exists\n    os.makedirs(output_dir, exist_ok=True)\n\n    # Define the file paths\n    zip_file_path = os.path.join(output_dir, \"tl_2023_us_state.zip\")\n\n    print(f\"Step 1: Downloading shapefile from {url}...\")\n    # Download the zip file\n    response = requests.get(url, stream=True)\n    response.raise_for_status()  # Raise an error if the download fails\n    with open(zip_file_path, \"wb\") as file:\n        for chunk in response.iter_content(chunk_size=8192):\n            file.write(chunk)\n\n    print(f\"Step 2: Download complete. Saved to {zip_file_path}\")\n\n    # Extract the zip file\n    print(f\"Step 3: Extracting files to {output_dir}...\")\n    with zipfile.ZipFile(zip_file_path, \"r\") as zip_ref:\n        zip_ref.extractall(output_dir)\n\n    print(\"Step 4: Extraction complete.\")\n    return output_dir\n\ndef retrieve_state_boundary():\n    \"\"\"\n    Retrieve the state boundary shapefile.\n    Downloads and extracts the file only if it doesn't already exist.\n\n    Returns:\n        str: Absolute path to the main shapefile.\n    \"\"\"\n    # URL of the shapefile zip\n    shapefile_url = \"https://www2.census.gov/geo/tiger/TIGER2023/STATE/tl_2023_us_state.zip\"\n\n    # Output directory for the downloaded and extracted files\n    output_directory = os.path.join(data_dir, \"shapefiles\", \"tl_2023_us_state\")\n    os.makedirs(output_directory, exist_ok=True)\n\n    # Path to the main shapefile\n    shapefile_path = os.path.join(output_directory, \"tl_2023_us_state.shp\")\n\n    # Check if the shapefile already exists\n    if os.path.exists(shapefile_path):\n        print(f\"Shapefile already exists at: {shapefile_path}. Skipping download.\")\n    else:\n        print(\"Shapefile not found. Downloading...\")\n        # Download and unzip the shapefile\n        extracted_dir = download_and_unzip_shapefile(shapefile_url, output_directory)\n        print(f\"Shapefile extracted to: {extracted_dir}\")\n    \n    return os.path.abspath(shapefile_path)\n\n# Define the lat_lon_to_map_coordinates function\ndef lat_lon_to_map_coordinates(lon, lat, m):\n    \"\"\"\n    Convert latitude and longitude coordinates to map coordinates.\n\n    Args:\n        lon (float or array-like): Longitude coordinate(s).\n        lat (float or array-like): Latitude coordinate(s).\n        m (Basemap): Basemap object representing the map projection.\n\n    Returns:\n        tuple: Tuple containing the converted map coordinates (x, y).\n    \"\"\"\n    x, y = m(lon, lat)\n    return x, y\n\n\n\ndef create_color_maps_with_value_range(df_col, value_ranges=None):\n    \"\"\"\n    Create a colormap for value ranges and map data values to colors.\n\n    Args:\n        df_col (pd.Series): A Pandas Series containing data values.\n        value_ranges (list, optional): A list of value ranges for color mapping.\n            If not provided, the ranges will be determined automatically.\n\n    Returns:\n        tuple: Tuple containing the color mapping and the updated value ranges.\n    \"\"\"\n    new_value_ranges = value_ranges\n    if value_ranges is None:\n        max_value = df_col.max()\n        min_value = df_col.min()\n        if min_value < 0:\n            min_value = 0\n        step_size = (max_value - min_value) / 12\n\n        # Create 10 periods\n        new_value_ranges = [min_value + i * step_size for i in range(12)]\n    \n    #print(\"new_value_ranges: \", new_value_ranges)\n  \n    # Define a custom function to map data values to colors\n    def map_value_to_color(value):\n        # Iterate through the value ranges to find the appropriate color index\n        for i, range_max in enumerate(new_value_ranges):\n            if value <= range_max:\n                return colors[i]\n\n        # If the value is greater than the largest range, return the last color\n        return colors[-1]\n\n    # Map predicted_swe values to colors using the custom function\n    color_mapping = [map_value_to_color(value) for value in df_col.values]\n    return color_mapping, new_value_ranges\n\ndef convert_csvs_to_images(input_csv: str = None, new_plot_path: str = None):\n    \"\"\"\n    Convert CSV data to images with color-coded SWE predictions.\n\n    Returns:\n        None\n    \"\"\"\n    global fixed_value_ranges\n    if input_csv is None:\n        input_csv = f\"{work_dir}/test_data_predicted_n97KJ.csv\"\n    \n    data = pd.read_csv(input_csv)\n    print(\"statistic of predicted_swe: \", data['predicted_swe'].describe())\n    data['predicted_swe'].fillna(0, inplace=True)\n    \n    for column in data.columns:\n        column_data = data[column]\n        print(column_data.describe())\n    \n    # Create a figure with a white background\n    fig = plt.figure(facecolor='white')\n\n    \n\n    m = Basemap(llcrnrlon=lon_min, llcrnrlat=lat_min, urcrnrlon=lon_max, urcrnrlat=lat_max,\n                projection='merc', resolution='i')\n\n    if \"Latitude\" in data.columns and \"Longitude\" in data.columns:\n        data.rename(columns={\"Latitude\": \"lat\", \"Longitude\": \"lon\"}, inplace=True)\n\n    x, y = m(data['lon'].values, data['lat'].values)\n    print(data.columns)\n\n    color_mapping, value_ranges = create_color_maps_with_value_range(data[\"predicted_swe\"], fixed_value_ranges)\n    \n    # Plot the data using the custom colormap\n    plt.scatter(x, y, c=color_mapping, cmap=custom_cmap, s=30, edgecolors='none', alpha=0.7)\n    \n    # Draw coastlines and other map features\n    m.drawcoastlines()\n    m.drawcountries()\n    m.drawstates()\n\n    reference_date = datetime(1900, 1, 1)\n    day_value = day_index\n    \n    result_date = reference_date + timedelta(days=day_value)\n    today = result_date.strftime(\"%Y-%m-%d\")\n    timestamp_string = result_date.strftime(\"%Y-%m-%d\")\n    \n    # Add a title\n    plt.title(f'Predicted SWE in the Western US - {today}', pad=20)\n\n    # Add labels for latitude and longitude on x and y axes with smaller font size\n    plt.xlabel('Longitude', fontsize=6)\n    plt.ylabel('Latitude', fontsize=6)\n\n    # Add longitude values to the x-axis and adjust font size\n    x_ticks_labels = np.arange(lon_min, lon_max + 5, 5)\n    x_tick_labels_str = [f\"{lon:.1f}??W\" if lon < 0 else f\"{lon:.1f}??E\" for lon in x_ticks_labels]\n    plt.xticks(*m(x_ticks_labels, [lat_min] * len(x_ticks_labels)), fontsize=6)\n    plt.gca().set_xticklabels(x_tick_labels_str)\n\n    # Add latitude values to the y-axis and adjust font size\n    y_ticks_labels = np.arange(lat_min, lat_max + 5, 5)\n    y_tick_labels_str = [f\"{lat:.1f}??N\" if lat >= 0 else f\"{abs(lat):.1f}??S\" for lat in y_ticks_labels]\n    plt.yticks(*m([lon_min] * len(y_ticks_labels), y_ticks_labels), fontsize=6)\n    plt.gca().set_yticklabels(y_tick_labels_str)\n\n    # Convert map coordinates to latitude and longitude for y-axis labels\n    y_tick_positions = np.linspace(lat_min, lat_max, len(y_ticks_labels))\n    y_tick_positions_map_x, y_tick_positions_map_y = lat_lon_to_map_coordinates([lon_min] * len(y_ticks_labels), y_tick_positions, m)\n    y_tick_positions_lat, _ = m(y_tick_positions_map_x, y_tick_positions_map_y, inverse=True)\n    y_tick_positions_lat_str = [f\"{lat:.1f}??N\" if lat >= 0 else f\"{abs(lat):.1f}??S\" for lat in y_tick_positions_lat]\n    plt.yticks(y_tick_positions_map_y, y_tick_positions_lat_str, fontsize=6)\n\n    # Create custom legend elements using the same colormap\n    legend_elements = [Patch(color=colors[i], label=f\"{value_ranges[i]} - {value_ranges[i+1]-1}\" if i < len(value_ranges) - 1 else f\"> {value_ranges[-1]}\") for i in range(len(value_ranges))]\n\n    # Create the legend outside the map\n    legend = plt.legend(handles=legend_elements, loc='upper left', title='Legend', fontsize=8)\n    legend.set_bbox_to_anchor((1.01, 1)) \n\n    # Remove the color bar\n    #plt.colorbar().remove()\n\n    plt.text(0.98, 0.02, 'Copyright ?? SWE Wormhole Team',\n             horizontalalignment='right', verticalalignment='bottom',\n             transform=plt.gcf().transFigure, fontsize=6, color='black')\n\n    # Set the aspect ratio to 'equal' to keep the plot at the center\n    plt.gca().set_aspect('equal', adjustable='box')\n\n    # Adjust the bottom and top margins to create more white space between the title and the plot\n    plt.subplots_adjust(bottom=0.15, right=0.80)  # Adjust right margin to accommodate the legend\n    # Show the plot or save it to a file\n    if new_plot_path is None:\n        new_plot_path = f'{work_dir}/predicted_swe-{test_start_date}.png'\n    \n    print(f\"The new plot is saved to {new_plot_path}\")\n    plt.savefig(new_plot_path)\n    # plt.show()  # Uncomment this line if you want to display the plot directly instead of saving it to a file\n\ndef plot_all_variables_in_one_csv(csv_path, res_png_path, target_date = test_start_date):\n    result_var_df = pd.read_csv(csv_path)\n    # Convert the 'date' column to datetime\n    result_var_df['date'] = pd.to_datetime(result_var_df['date'])\n    result_var_df.rename(\n      columns={\n        'Latitude': 'lat', \n        'Longitude': 'lon',\n        'gridmet_lat': 'lat',\n        'gridmet_lon': 'lon',\n      }, \n      inplace=True)\n    \n  \t# Create subplots with a number of rows based on the number of columns in the DataFrame\n    \n    us_boundary = gpd.read_file(retrieve_state_boundary())\n    us_boundary_clipped = us_boundary.cx[lon_min:lon_max, lat_min:lat_max]\n\t\n    lat_col = result_var_df[[\"lat\"]]\n    lon_col = result_var_df[[\"lon\"]]\n    print(\"lat_col.values = \", lat_col[\"lat\"].values)\n#     if \"lat\" == column_name or \"lon\" == column_name or \"date\" == column_name:\n    columns_to_remove = [ \"date\", \"Latitude\", \"Longitude\", \"gridmet_lat\", \"gridmet_lon\", \"lat\", \"lon\"]\n\n    # Check if each column exists before removing it\n    for col in columns_to_remove:\n        if col in result_var_df.columns:\n            result_var_df = result_var_df.drop(columns=col)\n        else:\n            print(f\"Column '{col}' not found in DataFrame.\")\n    \n    print(\"result_var_df.shape: \", result_var_df.shape)\n    print(\"result_var_df.head: \", result_var_df.head())\n    \n    \n    num_columns = len(result_var_df.columns)  # don't plot lat and lon\n    fig_width = 7 * num_columns  # You can adjust this multiplier based on your preference\n    num_variables = len(result_var_df.columns)\n    num_cols = int(math.sqrt(num_variables))\n    num_rows = math.ceil(num_variables / num_cols)\n    fig, axes = plt.subplots(nrows=num_rows, ncols=num_cols, figsize=(num_cols*7, num_rows*6))\n    \n    \n    # Flatten the axes array to simplify indexing\n    axes = axes.flatten()\n    \n  \t# Plot each variable in a separate subplot\n    for i, column_name in enumerate(result_var_df.columns):\n  \t    print(f\"Plot {column_name}\")\n  \t    if column_name in [\"lat\", \"lon\"]:\n  \t        continue\n        \n        # Filter the DataFrame based on the target date\n  \t    result_var_df[column_name] = pd.to_numeric(result_var_df[column_name], errors='coerce')\n  \t    \n  \t    colormaplist, value_ranges = create_color_maps_with_value_range(result_var_df[column_name], fixed_value_ranges)\n  \t    scatter_plot = axes[i].scatter(\n            lon_col[\"lon\"].values, \n  \t        lat_col[\"lat\"].values, \n            label=column_name, \n            c=result_var_df[column_name], \n            cmap='viridis', \n              #s=200, \n            s=10, \n            marker='s',\n            edgecolor='none',\n        )\n        \n        # Add a colorbar\n  \t    cbar = plt.colorbar(scatter_plot, ax=axes[i])\n  \t    cbar.set_label(column_name)  # Label for the colorbar\n        \n        # Add boundary over the figure\n  \t    us_boundary_clipped.plot(ax=axes[i], color='none', edgecolor='black', linewidth=1)\n\n        # Add labels and a legend\n  \t    axes[i].set_xlabel('Longitude')\n  \t    axes[i].set_ylabel('Latitude')\n  \t    axes[i].set_title(column_name+\" - \"+target_date)  # You can include target_date if needed\n  \t    axes[i].legend(loc='lower left')\n    \n    # Remove any empty subplots\n    for i in range(num_variables, len(axes)):\n        fig.delaxes(axes[i])\n    \n    plt.tight_layout()\n    plt.savefig(res_png_path)\n    print(f\"test image is saved at {res_png_path}\")\n    plt.close()\n    \n    \ndef plot_all_variables_in_one_figure_for_date(target_date=test_start_date):\n  \tselected_date = datetime.strptime(target_date, \"%Y-%m-%d\")\n  \ttest_csv = f\"{output_dir}/test_data_predicted_latest.csv\"\n  \tres_png_path = f\"{plot_dir}/{str(selected_date.year)}_all_variables_{target_date}.png\"\n  \tplot_all_variables_in_one_csv(test_csv, res_png_path, target_date)\n    \ndef convert_csvs_to_images_simple(\n    target_date=test_start_date, \n    column_name = \"predicted_swe\", \n    test_csv: str = None,\n    res_png_path: str = None,\n):\n    \"\"\"\n    Convert CSV data to simple scatter plot images for predicted SWE.\n\n    Returns:\n        None\n    \"\"\"\n    \n    selected_date = datetime.strptime(target_date, \"%Y-%m-%d\")\n    var_name = column_name\n    if test_csv is None:\n        test_csv = f\"{output_dir}/test_data_predicted_latest_{target_date}.csv\"\n\n    # Extract the directory from the target path\n    target_plot_dir = os.path.dirname(test_csv)\n\n    # Create all layers of directories if they don't exist\n    os.makedirs(target_plot_dir, exist_ok=True)\n\n    if res_png_path is None:\n        res_png_path = f\"{plot_dir}/{str(selected_date.year)}_{var_name}_{target_date}.png\"\n    \n    result_var_df = pd.read_csv(test_csv)\n    # Convert the 'date' column to datetime\n    if 'date_x' in result_var_df.columns and 'date_y' in result_var_df.columns:\n        # Drop one of the date columns (let's drop 'date_y')\n        result_var_df.drop(columns=['date_y'], inplace=True)\n        \n        # Rename 'date_x' to 'date'\n        result_var_df.rename(columns={'date_x': 'date'}, inplace=True)\n    \n    if 'date' in result_var_df.columns:\n        result_var_df['date'] = pd.to_datetime(result_var_df['date'])\n\n    # Filter the DataFrame based on the target date\n    result_var_df[var_name] = pd.to_numeric(result_var_df[var_name], errors='coerce')\n    \n    colormaplist, value_ranges = create_color_maps_with_value_range(result_var_df[var_name], fixed_value_ranges)\n\n    if \"Latitude\" in result_var_df.columns and \"Longitude\" in result_var_df.columns:\n        result_var_df.rename(columns={\"Latitude\": \"lat\", \"Longitude\": \"lon\"}, inplace=True)\n\n    # Create a scatter plot\n    plt.scatter(result_var_df[\"lon\"].values, \n                result_var_df[\"lat\"].values, \n                label=column_name, \n                c=result_var_df[column_name], \n                cmap='viridis', \n                #s=200, \n                s=10, \n                marker='s',\n                edgecolor='none',\n               )\n\n    # Add a colorbar\n    cbar = plt.colorbar()\n    cbar.set_label(column_name)  # Label for the colorbar\n    \n    # Add labels and a legend\n    plt.xlabel('Longitude')\n    plt.ylabel('Latitude')\n    plt.title(f'{column_name} - {target_date}')\n    plt.legend(loc='lower left')\n    \n    us_boundary = gpd.read_file(retrieve_state_boundary())\n    us_boundary_clipped = us_boundary.cx[lon_min:lon_max, lat_min:lat_max]\n\n    us_boundary_clipped.plot(ax=plt.gca(), color='none', edgecolor='black', linewidth=1)\n\n    \n    plt.savefig(res_png_path)\n    print(f\"test image is saved at {res_png_path}\")\n    plt.close()\n\n\n# def convert_csv_to_geotiff(\n#     target_date = test_start_date, \n#     test_csv: str = None, \n#     target_geotiff_file: str = None\n# ):\n#     # Load your CSV file\n#     if test_csv is None:\n#         test_csv = f\"{output_dir}/test_data_predicted_latest_{target_date}.csv\"\n    \n#     result_var_df = pd.read_csv(test_csv)\n#     result_var_df.rename(\n#       columns={\n#         'Latitude': 'lat', \n#         'Longitude': 'lon',\n#         'gridmet_lat': 'lat',\n#         'gridmet_lon': 'lon',\n#       }, \n#       inplace=True)\n\n#     # Specify the output GeoTIFF file\n#     if target_geotiff_file is None:\n#         target_geotiff_file = f\"{output_dir}/swe_predicted_{target_date}.tif\"\n\n#     target_plot_dir = os.path.dirname(target_geotiff_file)\n\n#     # Create all layers of directories if they don't exist\n#     os.makedirs(target_plot_dir, exist_ok=True)\n\n#     df = result_var_df[[\"lat\", \"lon\", \"predicted_swe\"]]\n    \n#     # Extract latitude, longitude, and snow columns\n#     latitude = df['lat'].values\n#     longitude = df['lon'].values\n    \n#     swe = df['predicted_swe'].values\n    \n#     dem_file = f\"{data_dir}/srtm/dem_file.tif\"\n#     with rasterio.open(dem_file) as dataset:\n#         # Read the DEM data as a numpy array\n#         dem_data = dataset.read(1)\n#         # Print the shape of the raster data\n#         print(\"Shape of the raster data:\", dem_data.shape)\n\n#         # Print information about the raster dataset\n#         print(\"Raster Dataset Information:\")\n#         print(\"Driver:\", dataset.driver)\n#         print(\"CRS (Coordinate Reference System):\", dataset.crs)\n#         print(\"Transform (Affine Matrix):\", dataset.transform)\n#         print(\"Number of Bands:\", dataset.count)\n#         print(\"Data Type:\", dataset.dtypes[0])  # Assuming a single band, use [0]\n#         print(\"Nodata Value:\", dataset.nodatavals[0])  # Assuming a single band, use [0]\n#         # Read metadata from the original file\n#         meta = dataset.meta\n\n#         # Update metadata for the new data\n#         meta.update(dtype='float32', count=1)\n#         new_data = swe.reshape((666, 694))\n\n#         # Create a new GeoTIFF file for writing\n#         with rasterio.open(target_geotiff_file, 'w', **meta) as dst:\n#             # Write the new 2D array to the new GeoTIFF file\n#             dst.write(new_data, 1)\n        \n#     print(\"df['predicted_swe'].shape: \", df.shape)\n#     print(f\"GeoTIFF file '{target_geotiff_file}' created successfully.\")\n\ndef convert_csv_to_geotiff(\n    target_date,\n    test_csv: str = None,\n    target_geotiff_file: str = None,\n    output_dir: str = \".\",\n    resolution: float = 0.01,  # Define the grid resolution\n):\n    # Load your CSV file\n    if test_csv is None:\n        test_csv = f\"{output_dir}/test_data_predicted_latest_{target_date}.csv\"\n    \n    result_var_df = pd.read_csv(test_csv)\n    result_var_df.rename(\n        columns={\n            'Latitude': 'lat',\n            'Longitude': 'lon',\n            'gridmet_lat': 'lat',\n            'gridmet_lon': 'lon',\n        },\n        inplace=True\n    )\n\n    # Specify the output GeoTIFF file\n    if target_geotiff_file is None:\n        target_geotiff_file = f\"{output_dir}/swe_predicted_{target_date}.tif\"\n\n    target_plot_dir = os.path.dirname(target_geotiff_file)\n    os.makedirs(target_plot_dir, exist_ok=True)\n\n    # Extract latitude, longitude, and variable of interest\n    df = result_var_df[[\"lat\", \"lon\", \"predicted_swe\"]]\n    latitude = df['lat'].values\n    longitude = df['lon'].values\n    swe = df['predicted_swe'].values\n\n    # Define raster grid bounds and resolution\n    lat_min, lat_max = latitude.min(), latitude.max()\n    lon_min, lon_max = longitude.min(), longitude.max()\n\n    # Create the raster grid\n    lon_grid, lat_grid = np.meshgrid(\n        np.arange(lon_min, lon_max, resolution),\n        np.arange(lat_min, lat_max, resolution)\n    )\n\n    # Interpolate data to the grid\n    grid_swe = griddata(\n        (longitude, latitude),  # Input coordinates\n        swe,                   # Input values\n        (lon_grid, lat_grid),  # Grid coordinates\n        method='linear'        # Interpolation method: 'linear', 'nearest', 'cubic'\n    )\n\n    # Flip the grid vertically to align with raster conventions\n    grid_swe = np.flipud(grid_swe)\n\n    # Define transform for the raster\n    transform = from_origin(\n        lon_min, lat_max,  # Upper-left corner\n        resolution, resolution  # Pixel size\n    )\n\n    # Save the GeoTIFF\n    with rasterio.open(\n        target_geotiff_file,\n        'w',\n        driver='GTiff',\n        height=grid_swe.shape[0],\n        width=grid_swe.shape[1],\n        count=1,  # Number of bands\n        dtype=grid_swe.dtype,\n        crs=\"EPSG:4326\",  # WGS84 Latitude/Longitude\n        transform=transform\n    ) as dst:\n        dst.write(grid_swe, 1)  # Write the raster data to the first band\n\n    print(f\"GeoTIFF saved to {target_geotiff_file}\")\n\ndef process_swe_prediction(current_date):\n    \"\"\"\n    Example callback function to process SWE prediction for a specific date.\n\n    Args:\n        current_date (datetime): The date to process.\n        output_dir (str): Directory for output files.\n        plot_dir (str): Directory for plot files.\n    \"\"\"\n    current_date_str = current_date.strftime(\"%Y-%m-%d\")\n    test_csv = f\"{output_dir}/test_data_predicted_latest_{current_date_str}.csv\"\n\n    if not os.path.exists(test_csv):\n        print(f\"Warning: CSV for {current_date_str} is missing. Skipping this day.\")\n        return\n\n    # Example processing steps\n    convert_csvs_to_images_simple(current_date_str, test_csv=test_csv)\n    convert_csv_to_geotiff(\n        current_date_str,\n        test_csv=test_csv,\n        target_geotiff_file=f\"{output_dir}/swe_predicted_{current_date_str}.tif\",\n    )\n\n\nif __name__ == \"__main__\":\n    # Uncomment the function call you want to use:\n    #convert_csvs_to_images()\n    \n    #test_start_date = \"2022-10-09\"\n    process_dates_in_range(\n        start_date=\"2025-01-14\",\n        end_date=\"2025-01-14\",\n        # start_date=test_start_date,\n        # end_date=test_end_date,\n        callback=process_swe_prediction,\n    )\n\n",
  "history_output" : "/home/chetana\ntoday date = 2025-01-19\nStart day: 2025-01-12, End day: 2025-01-16\ntest start date:  2025-01-12\ntest end date:  2025-01-16\nProcessing date: 2025-01-14\nShapefile already exists at: /home/chetana/data/shapefiles/tl_2023_us_state/tl_2023_us_state.shp. Skipping download.\ntest image is saved at /home/chetana/plots//2025_predicted_swe_2025-01-14.png\nGeoTIFF saved to /home/chetana/data/output/swe_predicted_2025-01-14.tif\n",
  "history_begin_time" : 1737327663039,
  "history_end_time" : 1737327711905,
  "history_notes" : null,
  "history_process" : "2wkl6e",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "06rmvw073lb",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir, output_dir, plot_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\nimport time\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # # Append a new row to the DataFrame\n    # df = df.append({\n    #   \"date\": date, \n    #   \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    # }, ignore_index=True)\n    # Create a new DataFrame with the new row data\n    new_row = pd.DataFrame([{\n        \"date\": date, \n        \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }])\n\n    # Use pd.concat to append the new row\n    df = pd.concat([df, new_row], ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n  print(\"directly write into the server file which might be used at the time might not be a good idea. \")\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{output_dir}/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n\n\nif __name__ == \"__main__\":\n  \n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  \n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file, force=True)\n  print(\"Finished creation of all mapserver files.\")\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n  print(\"All done\")\n  time.sleep(10)\n",
  "history_output" : "/home/chetana\ntoday date = 2025-01-19\nStart day: 2025-01-12, End day: 2025-01-16\ntest start date:  2025-01-12\ntest end date:  2025-01-16\nmove the plots and the results into the http folder\nFolder '/home/chetana/data/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/data/output/swe_predicted_2025-01-14.tif\nCopied: /home/chetana/data/output/swe_predicted_2025-01-14.tif\nDate: 2024-09-12\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-12.tif.map\nDate: 2024-06-15\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-15.tif.map\nDate: 2024-11-02\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-02.tif.map\nDate: 2023-11-15\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-15.tif.map\nDate: 2024-09-29\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-29.tif.map\nDate: 2024-06-19\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-19.tif.map\nDate: 2024-04-22\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-22.tif.map\nDate: 2025-01-09\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2025-01-09.tif.map\nDate: 2024-04-03\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-03.tif.map\nDate: 2024-05-15\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-15.tif.map\nDate: 2024-04-18\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-18.tif.map\nDate: 2024-02-10\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-10.tif.map\nDate: 2024-05-16\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-16.tif.map\nDate: 2024-06-07\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-07.tif.map\nDate: 2024-06-25\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-25.tif.map\nDate: 2024-07-17\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-17.tif.map\nDate: 2024-08-19\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-19.tif.map\nDate: 2024-11-17\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-17.tif.map\nDate: 2024-10-21\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-21.tif.map\nDate: 2024-04-13\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-13.tif.map\nDate: 2023-12-21\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-21.tif.map\nDate: 2023-10-06\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-06.tif.map\nDate: 2024-01-16\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-16.tif.map\nDate: 2023-12-11\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-11.tif.map\nDate: 2024-02-06\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-06.tif.map\nDate: 2024-05-01\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-01.tif.map\nDate: 2022-10-11\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map\nDate: 2024-03-08\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-08.tif.map\nDate: 2024-09-10\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-10.tif.map\nDate: 2024-08-22\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-22.tif.map\nDate: 2024-04-28\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-28.tif.map\nDate: 2024-06-13\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-13.tif.map\nDate: 2024-02-15\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-15.tif.map\nDate: 2023-11-09\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-09.tif.map\nDate: 2024-04-26\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-26.tif.map\nDate: 2024-03-14\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-14.tif.map\nDate: 2024-05-04\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-04.tif.map\nDate: 2024-08-06\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-06.tif.map\nDate: 2024-02-24\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-24.tif.map\nDate: 2024-07-24\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-24.tif.map\nDate: 2024-11-07\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-07.tif.map\nDate: 2024-02-02\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-02.tif.map\nDate: 2024-11-20\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-20.tif.map\nDate: 2024-11-08\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-08.tif.map\nDate: 2024-11-01\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-01.tif.map\nDate: 2024-11-16\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-16.tif.map\nDate: 2024-05-21\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-21.tif.map\nDate: 2024-09-08\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-08.tif.map\nDate: 2024-07-02\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-02.tif.map\nDate: 2023-12-27\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-27.tif.map\nDate: 2023-10-30\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-30.tif.map\nDate: 2023-11-06\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-06.tif.map\nDate: 2024-10-03\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-03.tif.map\nDate: 2024-09-02\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-02.tif.map\nDate: 2024-10-27\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-27.tif.map\nDate: 2024-11-27\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-27.tif.map\nDate: 2024-02-05\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-05.tif.map\nDate: 2024-07-10\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-10.tif.map\nDate: 2023-10-26\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-26.tif.map\nDate: 2023-12-24\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map\nDate: 2024-08-10\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-10.tif.map\nDate: 2024-06-30\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-30.tif.map\nDate: 2023-11-23\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-23.tif.map\nDate: 2023-12-13\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-13.tif.map\nDate: 2024-01-14\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-14.tif.map\nDate: 2024-04-21\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-21.tif.map\nDate: 2024-10-15\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-15.tif.map\nDate: 2024-04-27\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-27.tif.map\nDate: 2024-07-25\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-25.tif.map\nDate: 2024-12-24\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-12-24.tif.map\nDate: 2024-11-19\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-19.tif.map\nDate: 2025-01-14\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2025-01-14.tif.map\nDate: 2024-07-26\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-26.tif.map\nDate: 2024-01-11\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-11.tif.map\nDate: 2024-07-29\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-29.tif.map\nDate: 2024-08-25\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-25.tif.map\nDate: 2024-01-13\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-13.tif.map\nDate: 2024-07-14\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-14.tif.map\nDate: 2024-01-05\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-05.tif.map\nDate: 2023-12-31\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-31.tif.map\nDate: 2024-06-01\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-01.tif.map\nDate: 2023-11-12\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-12.tif.map\nDate: 2023-11-19\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-19.tif.map\nDate: 2023-10-05\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-05.tif.map\nDate: 2023-12-18\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-18.tif.map\nDate: 2024-12-20\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-12-20.tif.map\nDate: 2023-11-16\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-16.tif.map\nDate: 2024-09-05\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-05.tif.map\nDate: 2024-10-26\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-26.tif.map\nDate: 2023-12-17\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-17.tif.map\nDate: 2024-05-27\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-27.tif.map\nDate: 2024-12-18\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-12-18.tif.map\nDate: 2024-10-30\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-30.tif.map\nDate: 2024-06-28\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-28.tif.map\nDate: 2023-11-25\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-25.tif.map\nDate: 2024-06-06\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-06.tif.map\nDate: 2024-04-19\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-19.tif.map\nDate: 2024-10-29\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-29.tif.map\nDate: 2024-10-28\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-28.tif.map\nDate: 2023-10-01\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-01.tif.map\nDate: 2024-11-03\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-03.tif.map\nDate: 2024-10-24\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-24.tif.map\nDate: 2024-03-20\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-20.tif.map\nDate: 2024-12-15\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-12-15.tif.map\nDate: 2025-01-08\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2025-01-08.tif.map\nDate: 2024-09-16\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-16.tif.map\nDate: 2024-01-25\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-25.tif.map\nDate: 2024-07-27\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-27.tif.map\nDate: 2024-09-18\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-18.tif.map\nDate: 2024-01-30\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-30.tif.map\nDate: 2023-10-13\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-13.tif.map\nDate: 2024-03-12\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-12.tif.map\nDate: 2023-11-29\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-29.tif.map\nDate: 2024-03-24\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-24.tif.map\nDate: 2023-10-17\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-17.tif.map\nDate: 2024-08-26\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-26.tif.map\nDate: 2024-09-03\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-03.tif.map\nDate: 2024-02-13\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-13.tif.map\nDate: 2024-12-03\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-12-03.tif.map\nDate: 2024-07-11\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-11.tif.map\nDate: 2024-11-23\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-23.tif.map\nDate: 2023-10-10\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-10.tif.map\nDate: 2024-08-01\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-01.tif.map\nDate: 2024-07-31\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-31.tif.map\nDate: 2024-06-17\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-17.tif.map\nDate: 2024-09-13\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-13.tif.map\nDate: 2024-08-27\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-27.tif.map\nDate: 2024-08-04\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-04.tif.map\nDate: 2024-08-03\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-03.tif.map\nDate: 2024-10-05\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-05.tif.map\nDate: 2024-10-20\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-20.tif.map\nDate: 2024-03-11\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-11.tif.map\nDate: 2024-05-26\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-26.tif.map\nDate: 2024-06-08\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-08.tif.map\nDate: 2024-09-23\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-23.tif.map\nDate: 2024-03-02\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-02.tif.map\nDate: 2023-10-11\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-11.tif.map\nDate: 2022-12-07\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2022-12-07.tif.map\nDate: 2024-07-18\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-18.tif.map\nDate: 2024-08-17\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-17.tif.map\nDate: 2024-09-28\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-28.tif.map\nDate: 2024-07-16\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-16.tif.map\nDate: 2024-06-24\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-24.tif.map\nDate: 2024-04-14\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-14.tif.map\nDate: 2020-07-01\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2020-07-01.tif.map\nDate: 2023-11-22\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-22.tif.map\nDate: 2024-01-17\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-17.tif.map\nDate: 2024-06-18\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-18.tif.map\nDate: 2024-05-03\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-03.tif.map\nDate: 2024-09-15\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-15.tif.map\nDate: 2024-04-29\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-29.tif.map\nDate: 2024-04-15\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-15.tif.map\nDate: 2024-09-07\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-07.tif.map\nDate: 2024-02-04\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-04.tif.map\nDate: 2024-08-07\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-07.tif.map\nDate: 2024-05-25\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-25.tif.map\nDate: 2023-10-25\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-25.tif.map\nDate: 2024-01-20\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-20.tif.map\nDate: 2024-01-15\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-15.tif.map\nDate: 2024-06-09\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-09.tif.map\nDate: 2023-10-09\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-09.tif.map\nDate: 2024-05-08\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-08.tif.map\nDate: 2024-11-05\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-05.tif.map\nDate: 2023-10-31\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-31.tif.map\nDate: 2024-06-22\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-22.tif.map\nDate: 2024-07-30\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-30.tif.map\nDate: 2024-04-01\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-01.tif.map\nDate: 2023-10-19\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-19.tif.map\nDate: 2024-10-09\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-09.tif.map\nDate: 2023-11-01\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-01.tif.map\nDate: 2023-10-28\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-28.tif.map\nDate: 2024-02-23\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-23.tif.map\nDate: 2024-09-26\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-26.tif.map\nDate: 2024-07-07\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-07.tif.map\nDate: 2024-06-20\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-20.tif.map\nDate: 2024-04-10\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-10.tif.map\nDate: 2024-05-18\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-18.tif.map\nDate: 2024-12-05\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-12-05.tif.map\nDate: 2024-01-19\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-19.tif.map\nDate: 2023-12-20\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-20.tif.map\nDate: 2024-11-14\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-14.tif.map\nDate: 2025-01-05\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2025-01-05.tif.map\nDate: 2023-10-23\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-23.tif.map\nDate: 2023-10-29\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-29.tif.map\nDate: 2024-02-19\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-19.tif.map\nDate: 2024-11-06\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-06.tif.map\nDate: 2024-12-14\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-12-14.tif.map\nDate: 2024-03-27\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-27.tif.map\nDate: 2023-11-13\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-13.tif.map\nDate: 2024-10-10\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-10.tif.map\nDate: 2024-01-09\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-09.tif.map\nDate: 2024-02-07\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-07.tif.map\nDate: 2024-01-12\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-12.tif.map\nDate: 2024-11-30\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-30.tif.map\nDate: 2024-12-06\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-12-06.tif.map\nDate: 2022-12-23\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map\nDate: 2024-12-01\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-12-01.tif.map\nDate: 2024-02-11\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-11.tif.map\nDate: 2023-10-16\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-16.tif.map\nDate: 2024-06-16\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-16.tif.map\nDate: 2024-05-13\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-13.tif.map\nDate: 2024-08-29\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-29.tif.map\nDate: 2023-12-08\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-08.tif.map\nDate: 2023-10-07\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-07.tif.map\nDate: 2023-10-22\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-22.tif.map\nDate: 2023-11-04\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-04.tif.map\nDate: 2024-06-11\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-11.tif.map\nDate: 2023-10-27\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-27.tif.map\nDate: 2024-05-05\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-05.tif.map\nDate: 2025-01-06\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2025-01-06.tif.map\nDate: 2024-01-31\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-31.tif.map\nDate: 2023-12-12\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map\nDate: 2024-02-21\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-21.tif.map\nDate: 2023-12-26\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map\nDate: 2024-01-18\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-18.tif.map\nDate: 2024-01-23\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-23.tif.map\nDate: 2024-04-09\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-09.tif.map\nDate: 2024-10-25\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-25.tif.map\nDate: 2024-10-16\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-16.tif.map\nDate: 2022-11-11\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map\nDate: 2025-01-10\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2025-01-10.tif.map\nDate: 2023-12-29\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-29.tif.map\nDate: 2024-03-05\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-05.tif.map\nDate: 2023-12-22\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-22.tif.map\nDate: 2024-08-23\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-23.tif.map\nDate: 2024-12-04\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-12-04.tif.map\nDate: 2023-11-02\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-02.tif.map\nDate: 2024-05-10\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-10.tif.map\nDate: 2024-11-21\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-21.tif.map\nDate: 2024-10-13\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-13.tif.map\nDate: 2024-03-22\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-22.tif.map\nDate: 2024-11-04\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-04.tif.map\nDate: 2023-12-30\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-30.tif.map\nDate: 2023-01-20\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map\nDate: 2024-11-09\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-09.tif.map\nDate: 2024-01-21\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-21.tif.map\nDate: 2023-12-01\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-01.tif.map\nDate: 2023-12-07\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-07.tif.map\nDate: 2024-03-03\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-03.tif.map\nDate: 2024-11-24\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-24.tif.map\nDate: 2024-09-09\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-09.tif.map\nDate: 2024-12-22\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-12-22.tif.map\nDate: 2024-07-01\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-01.tif.map\nDate: 2024-01-08\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-08.tif.map\nDate: 2024-08-21\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-21.tif.map\nDate: 2023-11-17\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-17.tif.map\nDate: 2024-10-23\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-23.tif.map\nDate: 2024-04-06\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-06.tif.map\nDate: 2024-07-21\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-21.tif.map\nDate: 2024-03-09\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-09.tif.map\nDate: 2024-09-06\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-06.tif.map\nDate: 2024-07-04\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-04.tif.map\nDate: 2023-05-10\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map\nDate: 2024-09-04\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-04.tif.map\nDate: 2024-01-02\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-02.tif.map\nDate: 2024-03-25\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-25.tif.map\nDate: 2024-06-14\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-14.tif.map\nDate: 2024-02-17\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-17.tif.map\nDate: 2024-01-10\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-10.tif.map\nDate: 2023-12-28\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-28.tif.map\nDate: 2024-03-04\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-04.tif.map\nDate: 2023-10-08\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-08.tif.map\nDate: 2023-12-15\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-15.tif.map\nDate: 2024-01-29\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-29.tif.map\nDate: 2024-10-18\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-18.tif.map\nDate: 2024-07-19\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-19.tif.map\nDate: 2024-05-24\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-24.tif.map\nDate: 2024-05-30\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-30.tif.map\nDate: 2024-01-26\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-26.tif.map\nDate: 2024-07-09\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-09.tif.map\nDate: 2024-09-22\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-22.tif.map\nDate: 2024-09-25\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-25.tif.map\nDate: 2024-04-30\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-30.tif.map\nDate: 2024-09-30\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-30.tif.map\nDate: 2023-10-24\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-24.tif.map\nDate: 2024-09-01\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-01.tif.map\nDate: 2024-06-26\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-26.tif.map\nDate: 2024-06-21\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-21.tif.map\nDate: 2024-03-18\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-18.tif.map\nDate: 2024-07-06\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-06.tif.map\nDate: 2024-01-07\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-07.tif.map\nDate: 2023-12-16\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-16.tif.map\nDate: 2024-10-14\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-14.tif.map\nDate: 2024-03-01\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-01.tif.map\nDate: 2022-11-25\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map\nDate: 2024-10-17\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-17.tif.map\nDate: 2024-05-14\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-14.tif.map\nDate: 2024-06-27\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-27.tif.map\nDate: 2024-06-04\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-04.tif.map\nDate: 2023-06-11\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map\nDate: 2024-08-15\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-15.tif.map\nDate: 2024-07-13\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-13.tif.map\nDate: 2024-11-22\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-22.tif.map\nDate: 2024-07-28\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-28.tif.map\nDate: 2024-09-27\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-27.tif.map\nDate: 2022-10-10\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map\nDate: 2024-08-13\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-13.tif.map\nDate: 2024-08-09\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-09.tif.map\nDate: 2023-10-04\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-04.tif.map\nDate: 2024-08-20\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-20.tif.map\nDate: 2023-10-14\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-14.tif.map\nDate: 2023-10-21\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-21.tif.map\nDate: 2024-03-17\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-17.tif.map\nDate: 2024-02-03\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-03.tif.map\nDate: 2024-07-05\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-05.tif.map\nDate: 2024-04-20\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-20.tif.map\nDate: 2024-05-28\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-28.tif.map\nDate: 2024-05-23\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-23.tif.map\nDate: 2024-10-12\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-12.tif.map\nDate: 2024-03-30\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-30.tif.map\nDate: 2023-12-14\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-14.tif.map\nDate: 2024-05-09\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-09.tif.map\nDate: 2024-04-17\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-17.tif.map\nDate: 2024-04-08\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-08.tif.map\nDate: 2024-08-02\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-02.tif.map\nDate: 2024-05-20\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-20.tif.map\nDate: 2024-03-16\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-16.tif.map\nDate: 2024-01-24\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-24.tif.map\nDate: 2023-11-08\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-08.tif.map\nDate: 2024-09-21\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-21.tif.map\nDate: 2024-07-08\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-08.tif.map\nDate: 2024-05-11\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-11.tif.map\nDate: 2024-04-23\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-23.tif.map\nDate: 2024-03-29\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-29.tif.map\nDate: 2024-07-23\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-23.tif.map\nDate: 2024-12-16\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-12-16.tif.map\nDate: 2024-11-18\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-18.tif.map\nDate: 2023-10-18\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-18.tif.map\nDate: 2024-09-19\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-19.tif.map\nDate: 2024-06-05\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-05.tif.map\nDate: 2024-01-27\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-27.tif.map\nDate: 2023-12-06\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-06.tif.map\nDate: 2024-08-18\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-18.tif.map\nDate: 2024-02-08\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-08.tif.map\nDate: 2024-12-08\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-12-08.tif.map\nDate: 2024-11-25\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-25.tif.map\nDate: 2024-03-10\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-10.tif.map\nDate: 2024-08-08\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-08.tif.map\nDate: 2024-02-12\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-12.tif.map\nDate: 2024-08-05\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-05.tif.map\nDate: 2024-10-11\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-11.tif.map\nDate: 2024-03-23\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-23.tif.map\nDate: 2023-12-25\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map\nDate: 2024-02-09\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-09.tif.map\nDate: 2025-01-11\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2025-01-11.tif.map\nDate: 2024-10-06\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-06.tif.map\nDate: 2024-09-20\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-20.tif.map\nDate: 2023-11-24\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-24.tif.map\nDate: 2024-08-28\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-28.tif.map\nDate: 2024-03-31\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-31.tif.map\nDate: 2024-09-17\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-17.tif.map\nDate: 2024-12-17\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-12-17.tif.map\nDate: 2023-11-21\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-21.tif.map\nDate: 2024-11-11\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-11.tif.map\nDate: 2024-02-28\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-28.tif.map\nDate: 2024-06-02\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-02.tif.map\nDate: 2024-08-31\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-31.tif.map\nDate: 2023-11-14\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-14.tif.map\nDate: 2025-01-13\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2025-01-13.tif.map\nDate: 2023-12-23\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-23.tif.map\nDate: 2024-05-31\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-31.tif.map\nDate: 2024-04-25\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-25.tif.map\nDate: 2022-10-20\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map\nDate: 2024-07-15\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-15.tif.map\nDate: 2024-02-01\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-01.tif.map\nDate: 2024-08-30\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-30.tif.map\nDate: 2024-02-26\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-26.tif.map\nDate: 2023-12-04\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-04.tif.map\nDate: 2023-12-02\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-02.tif.map\nDate: 2024-05-06\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-06.tif.map\nDate: 2024-07-12\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-12.tif.map\nDate: 2024-03-06\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-06.tif.map\nDate: 2023-11-03\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-03.tif.map\nDate: 2024-08-14\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-14.tif.map\nDate: 2024-11-10\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-10.tif.map\nDate: 2023-11-05\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-05.tif.map\nDate: 2023-11-20\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-20.tif.map\nDate: 2024-04-12\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-12.tif.map\nDate: 2024-04-24\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-24.tif.map\nDate: 2024-02-16\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-16.tif.map\nDate: 2023-10-20\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-20.tif.map\nDate: 2024-02-22\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-22.tif.map\nDate: 2024-03-15\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-15.tif.map\nDate: 2024-03-19\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-19.tif.map\nDate: 2023-12-10\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map\nDate: 2024-11-28\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-28.tif.map\nDate: 2023-05-11\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map\nDate: 2024-02-18\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-18.tif.map\nDate: 2024-01-01\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-01.tif.map\nDate: 2023-10-03\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map\nDate: 2024-04-16\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-16.tif.map\nDate: 2023-11-30\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-30.tif.map\nDate: 2024-06-29\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-29.tif.map\nDate: 2024-04-05\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-05.tif.map\nDate: 2024-03-21\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-21.tif.map\nDate: 2024-11-26\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-26.tif.map\nDate: 2023-12-19\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-19.tif.map\nDate: 2024-06-10\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-10.tif.map\nDate: 2023-11-07\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-07.tif.map\nDate: 2024-08-24\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-24.tif.map\nDate: 2024-07-20\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-20.tif.map\nDate: 2024-01-06\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-06.tif.map\nDate: 2024-07-22\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-22.tif.map\nDate: 2024-12-19\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-12-19.tif.map\nDate: 2023-11-28\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-28.tif.map\nDate: 2024-06-03\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-03.tif.map\nDate: 2024-03-13\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-13.tif.map\nDate: 2024-08-12\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-12.tif.map\nDate: 2024-01-28\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-28.tif.map\nDate: 2025-01-15\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2025-01-15.tif.map\nDate: 2024-01-22\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-22.tif.map\nDate: 2024-04-02\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-02.tif.map\nDate: 2024-01-04\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-04.tif.map\nDate: 2024-07-03\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-03.tif.map\nDate: 2024-10-19\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-19.tif.map\nDate: 2024-03-26\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-26.tif.map\nDate: 2024-02-20\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-20.tif.map\nDate: 2024-02-14\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-14.tif.map\nDate: 2024-05-02\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-02.tif.map\nDate: 2024-08-16\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-16.tif.map\nDate: 2024-10-31\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-31.tif.map\nDate: 2024-03-07\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-07.tif.map\nDate: 2024-05-17\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-17.tif.map\nDate: 2024-02-27\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-27.tif.map\nDate: 2024-01-03\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-03.tif.map\nDate: 2024-10-22\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-22.tif.map\nDate: 2024-05-19\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-19.tif.map\nDate: 2023-10-15\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-15.tif.map\nDate: 2023-12-03\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-03.tif.map\nDate: 2023-11-18\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-18.tif.map\nDate: 2023-10-02\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-02.tif.map\nDate: 2024-04-04\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-04.tif.map\nDate: 2024-09-11\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-11.tif.map\nDate: 2024-02-29\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-29.tif.map\nDate: 2023-11-26\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-26.tif.map\nDate: 2024-05-07\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-07.tif.map\nDate: 2024-04-07\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-07.tif.map\nDate: 2024-04-11\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-11.tif.map\nDate: 2023-10-12\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-12.tif.map\nDate: 2024-11-29\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-29.tif.map\nDate: 2023-11-27\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-27.tif.map\nDate: 2024-10-01\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-01.tif.map\nDate: 2024-06-12\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-12.tif.map\nDate: 2024-06-23\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-23.tif.map\nDate: 2023-12-09\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-09.tif.map\nDate: 2024-03-28\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-28.tif.map\nDate: 2024-05-22\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-22.tif.map\nDate: 2024-02-25\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-25.tif.map\nDate: 2024-12-21\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-12-21.tif.map\nDate: 2024-10-02\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-02.tif.map\nDate: 2024-10-08\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-08.tif.map\nDate: 2024-09-24\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-24.tif.map\nDate: 2024-05-12\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-12.tif.map\nDate: 2023-11-10\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-10.tif.map\nDate: 2024-05-29\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-29.tif.map\nDate: 2024-11-12\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-12.tif.map\nDate: 2025-01-07\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2025-01-07.tif.map\nDate: 2024-08-11\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-11.tif.map\nDate: 2025-01-16\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2025-01-16.tif.map\nDate: 2023-12-05\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-05.tif.map\nDate: 2024-11-13\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-13.tif.map\nDate: 2024-12-23\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-12-23.tif.map\nDate: 2024-09-14\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-14.tif.map\nDate: 2024-11-15\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-15.tif.map\nDate: 2024-10-04\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-04.tif.map\nDate: 2023-11-11\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-11.tif.map\nDate: 2025-01-12\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2025-01-12.tif.map\nFinished creation of all mapserver files.\n/home/chetana/gw-workspace/06rmvw073lb/deploy_images_to_website.py:131: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.\n  df = pd.concat([df, new_row], ignore_index=True)\ndirectly write into the server file which might be used at the time might not be a good idea. \n          date                           predicted_swe_url_prefix\n0   2024-09-12  ../swe_forecasting/output/swe_predicted_2024-0...\n1   2024-06-15  ../swe_forecasting/output/swe_predicted_2024-0...\n2   2024-11-02  ../swe_forecasting/output/swe_predicted_2024-1...\n3   2023-11-15  ../swe_forecasting/output/swe_predicted_2023-1...\n4   2024-09-29  ../swe_forecasting/output/swe_predicted_2024-0...\n..         ...                                                ...\n462 2024-09-14  ../swe_forecasting/output/swe_predicted_2024-0...\n463 2024-11-15  ../swe_forecasting/output/swe_predicted_2024-1...\n464 2024-10-04  ../swe_forecasting/output/swe_predicted_2024-1...\n465 2023-11-11  ../swe_forecasting/output/swe_predicted_2023-1...\n466 2025-01-12  ../swe_forecasting/output/swe_predicted_2025-0...\n[467 rows x 2 columns]\nAll done\n",
  "history_begin_time" : 1737327712780,
  "history_end_time" : 1737327725143,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "q4oeh13u216",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564741,
  "history_end_time" : 1737327564741,
  "history_notes" : null,
  "history_process" : "2o6cp8",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "020ljf1c8pq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564742,
  "history_end_time" : 1737327564742,
  "history_notes" : null,
  "history_process" : "0n26v2",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "xn42p4euaq7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564744,
  "history_end_time" : 1737327564744,
  "history_notes" : null,
  "history_process" : "rvqv35",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "bb90ggjj1fj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564745,
  "history_end_time" : 1737327564745,
  "history_notes" : null,
  "history_process" : "vo8bc9",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "hlzgu9sgzv3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564746,
  "history_end_time" : 1737327564746,
  "history_notes" : null,
  "history_process" : "6evkh4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "t3g11wexigj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564748,
  "history_end_time" : 1737327564748,
  "history_notes" : null,
  "history_process" : "76ewp5",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "sezhe4ikx8z",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564749,
  "history_end_time" : 1737327564749,
  "history_notes" : null,
  "history_process" : "5wzgx5",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "t4w34hpkr4k",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564751,
  "history_end_time" : 1737327564751,
  "history_notes" : null,
  "history_process" : "d4zcq6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "0d6mmonjiyz",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564752,
  "history_end_time" : 1737327564752,
  "history_notes" : null,
  "history_process" : "6x6myw",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "bfmxr7o45at",
  "history_input" : "# do real interpretation for the model results and find real reasons for bad predictions\n# prevent aimless and headless attempts that are just wasting time.\n# this is an essential step in the loop\n\nimport joblib\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nimport numpy as np\nfrom snowcast_utils import work_dir, test_start_date, month_to_season, output_dir, plot_dir, model_dir\nimport os\nfrom sklearn.inspection import partial_dependence,PartialDependenceDisplay\nimport shap\nimport matplotlib.pyplot as plt\nfrom model_creation_et import selected_columns\nimport traceback\n\nimport shap\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfeature_names = None\n\ndef load_model(model_path):\n    \"\"\"\n    Load a trained machine learning model from a given path.\n\n    Args:\n        model_path (str): The path to the model file.\n\n    Returns:\n        object: The loaded machine learning model.\n    \"\"\"\n    return joblib.load(model_path)\n\ndef load_data(file_path):\n    \"\"\"\n    Load data from a CSV file and return it as a DataFrame.\n\n    Args:\n        file_path (str): The path to the CSV file.\n\n    Returns:\n        pd.DataFrame: The loaded data as a DataFrame.\n    \"\"\"\n    return pd.read_csv(file_path)\n\ndef preprocess_data(data):\n    \"\"\"\n    Preprocess the input data by converting date columns, handling missing values,\n    renaming columns, and reordering columns.\n\n    Args:\n        data (pd.DataFrame): The input data to be preprocessed.\n\n    Returns:\n        pd.DataFrame: Preprocessed data.\n    \"\"\"\n    data['date'] = pd.to_datetime(data['date'])\n    #reference_date = pd.to_datetime('1900-01-01')\n    #data['date'] = (data['date'] - reference_date).dt.days\n    data['date'] = data['date'].dt.month.apply(month_to_season)\n    data.replace('--', pd.NA, inplace=True)\n    \n    data = data.apply(pd.to_numeric, errors='coerce')\n    data.rename(columns={'Latitude': 'lat', \n                         'Longitude': 'lon',\n                         'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                         'Elevation': 'elevation',\n                         'Slope': 'slope',\n                         'Aspect': 'aspect',\n                         'Curvature': 'curvature',\n                         'Northness': 'northness',\n                         'Eastness': 'eastness',\n                         'cumulative_AMSR_SWE': 'cumulative_SWE',\n                         'cumulative_AMSR_Flag': 'cumulative_Flag',\n                         'cumulative_tmmn':'cumulative_air_temperature_tmmn',\n                         'cumulative_etr': 'cumulative_potential_evapotranspiration',\n                         'cumulative_vpd': 'cumulative_mean_vapor_pressure_deficit',\n                         'cumulative_rmax': 'cumulative_relative_humidity_rmax', \n                         'cumulative_rmin': 'cumulative_relative_humidity_rmin',\n                         'cumulative_pr': 'cumulative_precipitation_amount',\n                         'cumulative_tmmx': 'cumulative_air_temperature_tmmx',\n                         'cumulative_vs': 'cumulative_wind_speed',\n                         'AMSR_SWE': 'SWE',\n                         'AMSR_Flag': 'Flag',\n                        }, inplace=True)\n\n    desired_order = ['lat', 'lon', 'SWE', 'Flag', 'air_temperature_tmmn', 'potential_evapotranspiration',\n'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n'relative_humidity_rmin', 'precipitation_amount',\n'air_temperature_tmmx', 'wind_speed', 'elevation', 'slope', 'curvature',\n'aspect', 'eastness', 'northness', 'cumulative_SWE',\n'cumulative_Flag', 'cumulative_air_temperature_tmmn',\n'cumulative_potential_evapotranspiration',\n'cumulative_mean_vapor_pressure_deficit',\n'cumulative_relative_humidity_rmax',\n'cumulative_relative_humidity_rmin', 'cumulative_precipitation_amount',\n'cumulative_air_temperature_tmmx', 'cumulative_wind_speed']\n    \n    feature_names = desired_order\n    \n    data = data[desired_order]\n    data = data.reindex(columns=desired_order)\n    \n    data.to_csv(f'{work_dir}/testing_all_ready_for_check.csv', index=False)\n    \n    data = data.fillna(-999)\n    print(\"how many rows are left?\", len(data))\n    print('data.shape: ', data.shape)\n    \n    #data = data.drop(['date', 'SWE', 'Flag', 'mean_vapor_pressure_deficit', 'potential_evapotranspiration', 'air_temperature_tmmx', 'relative_humidity_rmax', 'relative_humidity_rmin', ], axis=1)\n    data = data.drop(['lat', 'lon',], axis=1)\n    \n    return data\n\ndef predict_swe(model, data):\n    \"\"\"\n    Use a trained model to predict SWE values for the input data.\n\n    Args:\n        model (object): The trained machine learning model.\n        data (pd.DataFrame): The input data for prediction.\n\n    Returns:\n        pd.DataFrame: Input data with predicted SWE values.\n    \"\"\"\n    print(data.head())\n    print(\"how many rows are there?\", len(data))\n    \n    predictions = model.predict(data)\n    data['predicted_swe'] = predictions\n    print(\"predicted swe: \", data['predicted_swe'].describe())\n    \n    return data, model\n\ndef merge_data(original_data, predicted_data):\n    \"\"\"\n    Merge the original data with predicted SWE values.\n\n    Args:\n        original_data (pd.DataFrame): The original data.\n        predicted_data (pd.DataFrame): Data with predicted SWE values.\n\n    Returns:\n        pd.DataFrame: Merged data.\n    \"\"\"\n    #new_data_extracted = predicted_data[[\"date\", \"lat\", \"lon\", \"predicted_swe\"]]\n    new_data_extracted = predicted_data[[ \"lat\", \"lon\", \"predicted_swe\"]]\n    # merged_df = original_data.merge(new_data_extracted, on=[\"date\", 'lat', 'lon'], how='left')\n    merged_df = original_data.merge(new_data_extracted, on=['lat', 'lon'], how='left')\n    print(\"Columns after merge:\", merged_df.columns)\n    \n    return merged_df\n  \ndef plot_feature_importance():\n    model_path = f'{model_dir}/wormhole_ETHole_latest.joblib'\n    model = load_model(model_path)\n    \n    training_data_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n    print(\"preparing training data from csv: \", training_data_path)\n    data = pd.read_csv(training_data_path)\n    data = data.drop('swe_value', axis=1) \n    data = data.drop('Unnamed: 0', axis=1)\n    \n    \n    # Step 1: Feature Importance\n    analysis_plot_output_folder = f'{work_dir}/testing_output/'\n    feature_importances = model.feature_importances_\n    feature_names = data.columns\n\n    # Create a bar plot of feature importances\n    plt.figure(figsize=(10, 6))\n    print(feature_names.shape)\n    print(feature_importances.shape)\n    plt.barh(feature_names, feature_importances)\n    plt.xlabel('Feature Importance')\n    plt.ylabel('Features')\n    plt.title('Feature Importance Plot')\n    plt.savefig(f'{analysis_plot_output_folder}/importance_summary_plot_latest_model.png')\n  \ndef interpret_prediction():\n    \"\"\"\n    Interpret the model results and find real reasons for bad predictions.\n\n    Returns:\n        None\n    \"\"\"\n    height = 666\n    width = 694\n    model_path = f'/home/chetana/Documents/GitHub/SnowCast/model/wormhole_ETHole_latest.joblib'\n    print(f\"using model : {model_path}\")\n    \n    new_data_path = f'{work_dir}/testing_all_ready.csv'\n    output_path = f'{work_dir}/test_data_predicted.csv'\n    \n    if os.path.exists(output_path):\n        # If the file exists, remove it\n        os.remove(output_path)\n        print(f\"File '{output_path}' has been removed.\")\n\n    model = load_model(model_path)\n    new_data = load_data(new_data_path)\n    print(\"new_data shape: \", new_data.shape)\n\n    preprocessed_data = preprocess_data(new_data)\n    print('data preprocessing completed.')\n    print(f'model used: {model_path}')\n    predicted_data, current_model = predict_swe(model, preprocessed_data)\n    \n    \n\n    # Step 2: Partial Dependence Plots\n    # Select features for partial dependence plots (e.g., the first two features)\n    features_to_plot = feature_names\n    \n#     partial_dependence_display = PartialDependenceDisplay.from_estimator(\n#       current_model, \n#       preprocessed_data.drop('predicted_swe', axis=1), \n#       features=features_to_plot, grid_resolution=50\n# )\n#     partial_dependence_display.figure_.suptitle('Partial Dependence Plots')\n#     partial_dependence_display.figure_.subplots_adjust(top=0.9)\n#     partial_dependence_display.figure_.savefig(f'{analysis_plot_output_folder}/partial_dependence_summary_plot_{test_start_date}.png')\n\n    # Step 3: SHAP Values\n#     explainer = shap.Explainer(current_model)\n#     shap_values = explainer.shap_values(\n#       preprocessed_data.drop('predicted_swe', axis=1))\n\n#     # Summary plot of SHAP values\n#     shap.summary_plot(shap_values, preprocessed_data)\n#     plt.title('Summary Plot of SHAP Values')\n#     plt.savefig(f'{analysis_plot_output_folder}/shap_summary_plot_{test_start_date}.png')\n    \n    # Additional code for SHAP interpretation can be added here\n    # Select a single data point for which you want to explain the prediction\n    # Create a SHAP explainer and calculate SHAP values\n    # Visualize the SHAP values as needed\n    \n#   predicted_data = merge_data(preprocessed_data, predicted_data)\n#   print('data prediction completed.')\n    \n#   predicted_data.to_csv(output_path, index=False)\n#   print(\"Prediction successfully done \", output_path)\n\n#   if len(predicted_data) == height * width:\n#     print(f\"The image width, height match with the number of rows in the csv. {len(predicted_data)} rows\")\n#   else:\n#     raise Exception(\"The total number of rows do not match\")\n\ndef plot_model():\n    from sklearn.tree import plot_tree\n\n    # Plot one of the trees in the Extra Trees model\n    model_path = f'{homedir}/../model/wormhole_ETHole_latest.joblib'\n    model = load_model(model_path)\n    plt.figure(figsize=(8, 8))\n    plot_tree(model.estimators_[0], feature_names=feature_names, filled=True, max_depth=3)\n    plt.title(\"Simplified Decision Tree from Extra Trees Regressor\", fontsize=14)\n    plt.tight_layout()\n    plt.savefig(\"{homedir}/../plots/et_model_visual.png\", dpi=300)\n\n\ndef explain_predictions(\n    model, input_data, feature_names, output_csv, plot_path\n):\n    \"\"\"\n    Explains predictions using SHAP, saves the explanations into a CSV file,\n    and generates SHAP plots for each row.\n\n    Parameters:\n    - model: Trained tree-based model (e.g., RandomForest, LightGBM, XGBoost)\n    - input_data: Input data as a numpy array or pandas DataFrame\n    - feature_names: List of feature names\n    - output_csv: Path to save the explanation report as a CSV\n    - plot_path: Directory to save the SHAP plots\n    \"\"\"\n    print(\"Starting the explanation process...\")\n\n    # Ensure input_data is a DataFrame\n    if not isinstance(input_data, pd.DataFrame):\n        print(\"Converting input data to a DataFrame...\")\n        input_data = pd.DataFrame(input_data, columns=feature_names)\n\n    input_data = input_data.apply(pd.to_numeric, errors='coerce')\n    # Identify non-numeric columns\n    print(\"input_data = \", input_data)\n    non_numeric_columns = [\n        col for col in input_data.columns if not pd.api.types.is_numeric_dtype(input_data[col])\n    ]\n\n    if non_numeric_columns:\n        print(\"Non-numeric data found in the following columns:\")\n        for col in non_numeric_columns:\n            print(f\"  - {col}\")\n\n        # Attempt to convert non-numeric columns to numeric\n        for col in non_numeric_columns:\n            try:\n                print(f\"Converting column '{col}' to numeric...\")\n                input_data[col] = pd.to_numeric(input_data[col], errors='coerce')\n                if input_data[col].isna().any():\n                    print(f\"Replacing NaN values in column '{col}' with 0.\")\n                    input_data[col].fillna(0, inplace=True)\n            except Exception as e:\n                raise ValueError(f\"Failed to convert column '{col}' to numeric: {e}\")\n\n    print(\"Double check .. \")\n    non_numeric_columns = [\n        col for col in input_data.columns if not pd.api.types.is_numeric_dtype(input_data[col])\n    ]\n    if non_numeric_columns:\n        raise ValueError(\"WTF\")\n\n    print(\"Initializing SHAP explainer...\")\n    explainer = shap.TreeExplainer(model)\n\n    # Calculate SHAP values for the data\n    print(f\"Calculating SHAP values for {len(input_data)} samples...\")\n    shap_values = explainer.shap_values(input_data)\n\n    # Handle single-output vs multi-output models\n    if isinstance(shap_values, list):\n        print(\"Multi-output model detected. Using the first output for SHAP values.\")\n        shap_values = shap_values[0]\n\n    # Store explanations\n    explanations = []\n\n    \n\n    print(f\"Processing {len(input_data)} rows...\")\n    for i in range(len(input_data)):\n        print(f\"Explaining row {i + 1}/{len(input_data)}...\")\n\n        try:\n            # Get SHAP values for the current row\n            shap_row = shap_values[i]\n            prediction = model.predict(input_data.iloc[[i]])[0]\n\n            # Collect all feature contributions for the row\n            feature_contributions = {\n                feature_names[j]: shap_row[j] for j in range(len(feature_names))\n            }\n\n            # Append explanation to the list\n            explanations.append({\n                \"Row\": i,\n                \"Prediction\": prediction,\n                **feature_contributions\n            })\n\n            # Generate and save SHAP waterfall plot\n            print(\"Checking for non-numeric columns in input_data...\")\n\n            # Generate and save SHAP waterfall plot\n            data_row = input_data.iloc[i].values.astype(float)\n\n            # Ensure shap_row is 1D\n            shap_row = np.ravel(shap_row)  # Flatten it if necessary\n\n            # Ensure data_row is also 1D\n            data_row = np.ravel(data_row)\n\n            # Ensure base_values is a scalar (for single-output models)\n            base_value = explainer.expected_value\n\n            print(f\"Shape of shap_row: {shap_row.shape}\")  # Should be (n_features,)\n            print(f\"Shape of data_row: {data_row.shape}\")  # Should be (n_features,)\n            print(f\"Number of features: {len(feature_names)}\")  # Should match the previous two\n            # Check if base_value is a scalar (single-output model) or array (multi-output model)\n            if isinstance(base_value, np.ndarray):\n                # For multi-output models, select the correct base value (e.g., base_value[0] for the first output)\n                base_value = base_value[0]  # Adjust index if necessary for your model\n                print(f\"Using base_value from multi-output model: {base_value}\")\n            else:\n                print(f\"Using base_value for single-output model: {base_value}\")\n\n            \n            shap_results = shap.Explanation(\n                values=shap_row,\n                base_values=base_value,\n                data=data_row,\n                feature_names=feature_names\n            )\n\n            print(\"shap_results = \", shap_results)\n            print(\"SHAP Explanation object created successfully.\")\n            plot_file = f\"{plot_path}_row_{i + 1}.png\"\n            shap.waterfall_plot(shap_results, max_display=len(feature_names))\n            plt.title(f\"SHAP Explanation for Row {i}\")\n            plt.savefig(plot_file, bbox_inches=\"tight\")\n            plt.close()\n            print(f\"Plot saved: {plot_file}\")\n\n        except Exception as e:\n            print(\"Detailed traceback:\")\n            traceback.print_exc()\n            print(f\"Failed to generate plot for row {i + 1}: {e}\")\n            continue\n\n    # Save explanations to a CSV file\n    explanations_df = pd.DataFrame(explanations)\n    try:\n        print(f\"Saving explanations to {output_csv}...\")\n        explanations_df.to_csv(output_csv, index=False)\n        print(f\"Explanations successfully saved to {output_csv}\")\n    except Exception as e:\n        print(f\"Failed to save explanations CSV: {e}\")\n\n    print(f\"Process completed. Explanations saved to {output_csv}. Plots saved in {plot_path}.\")\n\n\n\ndef explain_predictions_for_latlon(\n    lat, lon, target_date,\n    model_path: str = f'{model_dir}/wormhole_ETHole_latest.joblib'\n):\n    \"\"\"\n    Explains predictions for a specific location using SHAP, saves the explanation report,\n    and generates a SHAP plot.\n\n    Parameters:\n    - lat (float): Latitude of the target location.\n    - lon (float): Longitude of the target location.\n    - target_date (str): Target date in the format 'YYYY-MM-DD'.\n    - predicted_csv (str): Path to the CSV file with predictions.\n    - model: Trained tree-based model (e.g., RandomForest, LightGBM, XGBoost).\n    - feature_names: List of feature names.\n    - output_csv (str): Path to save the explanation report as a CSV.\n    - output_plots_dir (str): Directory to save the SHAP plot.\n    \"\"\"\n    print(f\"Starting explanation for location (lat: {lat}, lon: {lon}) on {target_date}...\")\n\n    #  predicted_csv, model, feature_names, output_csv,\n    \n    # Load the predictions CSV\n    predicted_csv = f\"{output_dir}/test_data_predicted_latest_{target_date}.csv\"\n    try:\n        print(f\"Loading predictions from {predicted_csv}...\")\n        predictions_df = pd.read_csv(predicted_csv)\n    except FileNotFoundError:\n        print(f\"Error: Predicted CSV file not found at {predicted_csv}.\")\n        return\n    \n    # Find the closest row to the specified latitude and longitude\n    print(f\"Finding closest row to (lat: {lat}, lon: {lon})...\")\n\n    # Calculate the squared distance\n    predictions_df['distance'] = ((predictions_df['lat'] - lat) ** 2 + (predictions_df['lon'] - lon) ** 2)\n\n    # Find the row with the minimum distance\n    closest_row_index = predictions_df['distance'].idxmin()\n    closest_row = predictions_df.loc[closest_row_index]\n\n    # Print the index and the row details\n    print(f\"Closest row index: {closest_row_index}\")\n    print(f\"Closest row details: {closest_row.to_dict()}\")\n\n    # Get the right feature names, minus the target column\n    feature_names = [col for col in selected_columns if col != \"swe_value\"]\n\n    # Extract the input features for SHAP\n    input_data = closest_row[feature_names].to_frame().T\n    print(\"input data columns: \", input_data.columns)\n    print(\"feature names: \", feature_names)\n\n    # Load model\n    model = load_model(model_path)\n\n    output_csv = f\"{output_dir}/eai_et_model_{lat}_{lon}_{target_date}.csv\"\n\n    # Explain the prediction for this specific row\n    explain_predictions(\n        model=model,\n        input_data=input_data,\n        feature_names=feature_names,\n        output_csv=output_csv,\n        plot_path=f\"{plot_dir}/eai_plot_{lat}_{lon}_{target_date}.png\",\n    )\n\n    print(f\"Explanation completed for location (lat: {lat}, lon: {lon}) on {target_date}.\")\n\n\nif __name__ == \"__main__\":\n    #plot_feature_importance()  # no need, this step is already done in the model post processing step. \n    # interpret_prediction()\n    # plot_model()\n\n    explain_predictions_for_latlon(\n        lat = 47.383474, \n        lon = -105.205078,\n        target_date = \"2025-01-14\",\n    )\n\n",
  "history_output" : "/home/chetana\ntoday date = 2025-01-19\nStart day: 2025-01-12, End day: 2025-01-16\ntest start date:  2025-01-12\ntest end date:  2025-01-16\nStarting explanation for location (lat: 47.383474, lon: -105.205078) on 2025-01-14...\nLoading predictions from /home/chetana/data/output/test_data_predicted_latest_2025-01-14.csv...\nFinding closest row to (lat: 47.383474, lon: -105.205078)...\nClosest row index: 68626\nClosest row details: {'lc_prop3': 30, 'lat': 47.38, 'lon': -105.2, 'date_x': '2025-01-14', 'SWE': 51, 'relative_humidity_rmin': 50.8, 'potential_evapotranspiration': 1.1, 'air_temperature_tmmx': 273.7, 'relative_humidity_rmax': 86.7, 'mean_vapor_pressure_deficit': 0.17, 'air_temperature_tmmn': 263.8, 'wind_speed': 3.6, 'Elevation': 879.2621, 'Aspect': 115.57032, 'Curvature': -681.18396, 'Northness': -0.4074632, 'Eastness': -0.73395, 'fsca': -1, 'Slope': 2.176094, 'SWE_1': 46, 'air_temperature_tmmn_1': 262.9, 'potential_evapotranspiration_1': 0.9, 'mean_vapor_pressure_deficit_1': 0.14, 'relative_humidity_rmax_1': 81.2, 'relative_humidity_rmin_1': 55.7, 'air_temperature_tmmx_1': 270.6, 'wind_speed_1': 3.3000000000000003, 'fsca_1': -1, 'SWE_2': 54, 'air_temperature_tmmn_2': 256.6, 'potential_evapotranspiration_2': 1.1, 'mean_vapor_pressure_deficit_2': 0.15, 'relative_humidity_rmax_2': 57.8, 'relative_humidity_rmin_2': 35.7, 'air_temperature_tmmx_2': 265.7, 'wind_speed_2': 3.9, 'fsca_2': -1, 'SWE_3': 0, 'air_temperature_tmmn_3': 257.4, 'potential_evapotranspiration_3': 1.0, 'mean_vapor_pressure_deficit_3': 0.1, 'relative_humidity_rmax_3': 100.0, 'relative_humidity_rmin_3': 53.400000000000006, 'air_temperature_tmmx_3': 274.6, 'wind_speed_3': 8.0, 'fsca_3': 75, 'SWE_4': 44, 'air_temperature_tmmn_4': 264.2, 'potential_evapotranspiration_4': 1.4, 'mean_vapor_pressure_deficit_4': 0.2, 'relative_humidity_rmax_4': 100.0, 'relative_humidity_rmin_4': 48.400000000000006, 'air_temperature_tmmx_4': 276.8, 'wind_speed_4': 4.5, 'fsca_4': -1, 'SWE_5': 46, 'air_temperature_tmmn_5': 264.6, 'potential_evapotranspiration_5': 0.5, 'mean_vapor_pressure_deficit_5': 0.06, 'relative_humidity_rmax_5': 100.0, 'relative_humidity_rmin_5': 72.0, 'air_temperature_tmmx_5': 273.2, 'wind_speed_5': 6.5, 'fsca_5': 75, 'SWE_6': 15, 'air_temperature_tmmn_6': 266.4, 'potential_evapotranspiration_6': 1.5, 'mean_vapor_pressure_deficit_6': 0.16, 'relative_humidity_rmax_6': 97.5, 'relative_humidity_rmin_6': 57.1, 'air_temperature_tmmx_6': 276.4, 'wind_speed_6': 7.1000000000000005, 'fsca_6': -1, 'SWE_7': 0, 'air_temperature_tmmn_7': 258.1, 'potential_evapotranspiration_7': 0.4, 'mean_vapor_pressure_deficit_7': 0.05, 'relative_humidity_rmax_7': 100.0, 'relative_humidity_rmin_7': 66.10000000000001, 'air_temperature_tmmx_7': 267.1, 'wind_speed_7': 3.5, 'fsca_7': -1, 'water_year': 2025, 'predicted_swe': 0.0, 'date_y': '2025-01-12', 'distance': 3.7854759999954124e-05}\ninput data columns:  Index(['SWE', 'relative_humidity_rmin', 'potential_evapotranspiration',\n       'air_temperature_tmmx', 'relative_humidity_rmax',\n       'mean_vapor_pressure_deficit', 'air_temperature_tmmn', 'wind_speed',\n       'Elevation', 'Aspect', 'Curvature', 'Northness', 'Eastness', 'fsca',\n       'Slope', 'SWE_1', 'air_temperature_tmmn_1',\n       'potential_evapotranspiration_1', 'mean_vapor_pressure_deficit_1',\n       'relative_humidity_rmax_1', 'relative_humidity_rmin_1',\n       'air_temperature_tmmx_1', 'wind_speed_1', 'fsca_1', 'SWE_2',\n       'air_temperature_tmmn_2', 'potential_evapotranspiration_2',\n       'mean_vapor_pressure_deficit_2', 'relative_humidity_rmax_2',\n       'relative_humidity_rmin_2', 'air_temperature_tmmx_2', 'wind_speed_2',\n       'fsca_2', 'SWE_3', 'air_temperature_tmmn_3',\n       'potential_evapotranspiration_3', 'mean_vapor_pressure_deficit_3',\n       'relative_humidity_rmax_3', 'relative_humidity_rmin_3',\n       'air_temperature_tmmx_3', 'wind_speed_3', 'fsca_3', 'SWE_4',\n       'air_temperature_tmmn_4', 'potential_evapotranspiration_4',\n       'mean_vapor_pressure_deficit_4', 'relative_humidity_rmax_4',\n       'relative_humidity_rmin_4', 'air_temperature_tmmx_4', 'wind_speed_4',\n       'fsca_4', 'SWE_5', 'air_temperature_tmmn_5',\n       'potential_evapotranspiration_5', 'mean_vapor_pressure_deficit_5',\n       'relative_humidity_rmax_5', 'relative_humidity_rmin_5',\n       'air_temperature_tmmx_5', 'wind_speed_5', 'fsca_5', 'SWE_6',\n       'air_temperature_tmmn_6', 'potential_evapotranspiration_6',\n       'mean_vapor_pressure_deficit_6', 'relative_humidity_rmax_6',\n       'relative_humidity_rmin_6', 'air_temperature_tmmx_6', 'wind_speed_6',\n       'fsca_6', 'SWE_7', 'air_temperature_tmmn_7',\n       'potential_evapotranspiration_7', 'mean_vapor_pressure_deficit_7',\n       'relative_humidity_rmax_7', 'relative_humidity_rmin_7',\n       'air_temperature_tmmx_7', 'wind_speed_7', 'fsca_7', 'water_year'],\n      dtype='object')\nfeature names:  ['SWE', 'relative_humidity_rmin', 'potential_evapotranspiration', 'air_temperature_tmmx', 'relative_humidity_rmax', 'mean_vapor_pressure_deficit', 'air_temperature_tmmn', 'wind_speed', 'Elevation', 'Aspect', 'Curvature', 'Northness', 'Eastness', 'fsca', 'Slope', 'SWE_1', 'air_temperature_tmmn_1', 'potential_evapotranspiration_1', 'mean_vapor_pressure_deficit_1', 'relative_humidity_rmax_1', 'relative_humidity_rmin_1', 'air_temperature_tmmx_1', 'wind_speed_1', 'fsca_1', 'SWE_2', 'air_temperature_tmmn_2', 'potential_evapotranspiration_2', 'mean_vapor_pressure_deficit_2', 'relative_humidity_rmax_2', 'relative_humidity_rmin_2', 'air_temperature_tmmx_2', 'wind_speed_2', 'fsca_2', 'SWE_3', 'air_temperature_tmmn_3', 'potential_evapotranspiration_3', 'mean_vapor_pressure_deficit_3', 'relative_humidity_rmax_3', 'relative_humidity_rmin_3', 'air_temperature_tmmx_3', 'wind_speed_3', 'fsca_3', 'SWE_4', 'air_temperature_tmmn_4', 'potential_evapotranspiration_4', 'mean_vapor_pressure_deficit_4', 'relative_humidity_rmax_4', 'relative_humidity_rmin_4', 'air_temperature_tmmx_4', 'wind_speed_4', 'fsca_4', 'SWE_5', 'air_temperature_tmmn_5', 'potential_evapotranspiration_5', 'mean_vapor_pressure_deficit_5', 'relative_humidity_rmax_5', 'relative_humidity_rmin_5', 'air_temperature_tmmx_5', 'wind_speed_5', 'fsca_5', 'SWE_6', 'air_temperature_tmmn_6', 'potential_evapotranspiration_6', 'mean_vapor_pressure_deficit_6', 'relative_humidity_rmax_6', 'relative_humidity_rmin_6', 'air_temperature_tmmx_6', 'wind_speed_6', 'fsca_6', 'SWE_7', 'air_temperature_tmmn_7', 'potential_evapotranspiration_7', 'mean_vapor_pressure_deficit_7', 'relative_humidity_rmax_7', 'relative_humidity_rmin_7', 'air_temperature_tmmx_7', 'wind_speed_7', 'fsca_7', 'water_year']\nStarting the explanation process...\ninput_data =         SWE  relative_humidity_rmin  ...  fsca_7  water_year\n68626   51                    50.8  ...      -1        2025\n[1 rows x 79 columns]\nDouble check .. \nInitializing SHAP explainer...\nCalculating SHAP values for 1 samples...\nProcessing 1 rows...\nExplaining row 1/1...\nChecking for non-numeric columns in input_data...\nShape of shap_row: (79,)\nShape of data_row: (79,)\nNumber of features: 79\nUsing base_value from multi-output model: -320.60124465140177\nshap_results =  .values =\narray([ 4.79711079e+01,  5.90733426e-01,  1.03954964e-02, -1.03003039e+01,\n       -4.25571747e+00, -1.37574656e-02,  2.66835725e+00,  3.12897644e-01,\n       -6.07628771e+00,  2.96952005e+00, -3.06523113e+00,  6.96172834e-01,\n        3.70617736e+00, -4.00332148e+00, -6.60844566e+01,  3.79434898e+01,\n        9.23633177e-01, -6.27168405e-01,  6.21837012e-02,  8.57286359e-01,\n        2.12516445e-01, -8.34827662e-01,  4.81195710e-01, -2.85351656e+00,\n        2.51259093e+01,  1.31003785e+00, -3.55495163e-01,  6.10972477e-02,\n        1.19071926e+00,  4.60801362e-01, -5.70616973e+00,  2.50288007e-01,\n       -2.99818195e+00, -7.41059403e-01,  2.46148193e+00, -4.06357930e-01,\n       -7.96344544e-02, -4.82336918e-01,  5.81287952e-01, -2.11694474e+00,\n       -1.07035064e+00,  3.19069316e+01,  2.74378929e+01, -3.91584342e-01,\n        3.49005869e-02, -1.00131856e+00, -4.36669874e-01,  7.50275827e-01,\n        9.19206808e-01,  5.56575127e-01, -2.06127191e+00,  2.24898725e+01,\n        3.35156288e+00,  1.18345688e-01,  9.26900191e-02, -5.63653981e-01,\n       -1.30963598e-01, -3.52834542e+00,  6.91640045e-02,  2.29149575e+01,\n        2.96943129e+01,  3.01508286e+01,  5.64800403e-01, -5.57354075e-02,\n        2.55876352e+00,  1.59991755e-01,  3.00410309e+00, -4.01370479e-01,\n       -2.87627960e+00, -4.46913013e-01,  1.13903738e+02, -1.83633403e+00,\n       -1.58351736e-01,  1.50699655e-01,  8.87364286e-01, -7.04193291e+00,\n        1.24743027e+00, -2.93141884e+00,  8.06226835e+00])\n.base_values =\n-320.60124465140177\n.data =\narray([ 5.1000000e+01,  5.0800000e+01,  1.1000000e+00,  2.7370000e+02,\n        8.6700000e+01,  1.7000000e-01,  2.6380000e+02,  3.6000000e+00,\n        8.7926210e+02,  1.1557032e+02, -6.8118396e+02, -4.0746320e-01,\n       -7.3395000e-01, -1.0000000e+00,  2.1760940e+00,  4.6000000e+01,\n        2.6290000e+02,  9.0000000e-01,  1.4000000e-01,  8.1200000e+01,\n        5.5700000e+01,  2.7060000e+02,  3.3000000e+00, -1.0000000e+00,\n        5.4000000e+01,  2.5660000e+02,  1.1000000e+00,  1.5000000e-01,\n        5.7800000e+01,  3.5700000e+01,  2.6570000e+02,  3.9000000e+00,\n       -1.0000000e+00,  0.0000000e+00,  2.5740000e+02,  1.0000000e+00,\n        1.0000000e-01,  1.0000000e+02,  5.3400000e+01,  2.7460000e+02,\n        8.0000000e+00,  7.5000000e+01,  4.4000000e+01,  2.6420000e+02,\n        1.4000000e+00,  2.0000000e-01,  1.0000000e+02,  4.8400000e+01,\n        2.7680000e+02,  4.5000000e+00, -1.0000000e+00,  4.6000000e+01,\n        2.6460000e+02,  5.0000000e-01,  6.0000000e-02,  1.0000000e+02,\n        7.2000000e+01,  2.7320000e+02,  6.5000000e+00,  7.5000000e+01,\n        1.5000000e+01,  2.6640000e+02,  1.5000000e+00,  1.6000000e-01,\n        9.7500000e+01,  5.7100000e+01,  2.7640000e+02,  7.1000000e+00,\n       -1.0000000e+00,  0.0000000e+00,  2.5810000e+02,  4.0000000e-01,\n        5.0000000e-02,  1.0000000e+02,  6.6100000e+01,  2.6710000e+02,\n        3.5000000e+00, -1.0000000e+00,  2.0250000e+03])\nSHAP Explanation object created successfully.\nPlot saved: /home/chetana/plots//eai_plot_47.383474_-105.205078_2025-01-14.png_row_1.png\nSaving explanations to /home/chetana/data/output/eai_et_model_47.383474_-105.205078_2025-01-14.csv...\nExplanations successfully saved to /home/chetana/data/output/eai_et_model_47.383474_-105.205078_2025-01-14.csv\nProcess completed. Explanations saved to /home/chetana/data/output/eai_et_model_47.383474_-105.205078_2025-01-14.csv. Plots saved in /home/chetana/plots//eai_plot_47.383474_-105.205078_2025-01-14.png.\nExplanation completed for location (lat: 47.383474, lon: -105.205078) on 2025-01-14.\n",
  "history_begin_time" : 1737327663105,
  "history_end_time" : 1737327859797,
  "history_notes" : null,
  "history_process" : "r4knm9",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "mryvaobmwpg",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564755,
  "history_end_time" : 1737327564755,
  "history_notes" : null,
  "history_process" : "9c573m",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "p9phyoz1p7u",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564756,
  "history_end_time" : 1737327564756,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "bcvpzipnb43",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564758,
  "history_end_time" : 1737327564758,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "2i7ya28yiku",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564788,
  "history_end_time" : 1737327564788,
  "history_notes" : null,
  "history_process" : "83d2yv",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "8kcr0stqgy9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564790,
  "history_end_time" : 1737327564790,
  "history_notes" : null,
  "history_process" : "j8swco",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "8a5k79mdes5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564800,
  "history_end_time" : 1737327564800,
  "history_notes" : null,
  "history_process" : "pnr64x",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "rav5z83d7zh",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564802,
  "history_end_time" : 1737327564802,
  "history_notes" : null,
  "history_process" : "qg80lj",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "eppt7ujyvsj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564804,
  "history_end_time" : 1737327564804,
  "history_notes" : null,
  "history_process" : "ggy7gf",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "m6j43x0wa1c",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564817,
  "history_end_time" : 1737327564817,
  "history_notes" : null,
  "history_process" : "c2qa9u",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "oa3tlckvcrh",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564819,
  "history_end_time" : 1737327564819,
  "history_notes" : null,
  "history_process" : "lnrsop",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "206c7i3118h",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564821,
  "history_end_time" : 1737327564821,
  "history_notes" : null,
  "history_process" : "c8isgf",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "bzhnv4nf053",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564823,
  "history_end_time" : 1737327564823,
  "history_notes" : null,
  "history_process" : "16qpco",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "wn6jl8u0b9v",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564825,
  "history_end_time" : 1737327564825,
  "history_notes" : null,
  "history_process" : "1xdwd6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "1d0yf9bpnd8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564827,
  "history_end_time" : 1737327564827,
  "history_notes" : null,
  "history_process" : "uw1w1u",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "6ld9611x8v3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564828,
  "history_end_time" : 1737327564828,
  "history_notes" : null,
  "history_process" : "14bhpn",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "r5qr64jqhjv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564849,
  "history_end_time" : 1737327564849,
  "history_notes" : null,
  "history_process" : "pyn9xn",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "klmiv5ns8e4",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564850,
  "history_end_time" : 1737327564850,
  "history_notes" : null,
  "history_process" : "h1952i",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "y3uiurbwp9t",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564852,
  "history_end_time" : 1737327564852,
  "history_notes" : null,
  "history_process" : "k1aoz3",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "zh0vgq5t6n6",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564854,
  "history_end_time" : 1737327564854,
  "history_notes" : null,
  "history_process" : "i66nk8",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "mmmvn4pcdfa",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564856,
  "history_end_time" : 1737327564856,
  "history_notes" : null,
  "history_process" : "sacl4k",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "mfql96re1jz",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564863,
  "history_end_time" : 1737327564863,
  "history_notes" : null,
  "history_process" : "f86ae7",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "6a2dlm4astu",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564865,
  "history_end_time" : 1737327564865,
  "history_notes" : null,
  "history_process" : "7ktwm9",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "kx63rq80fv0",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564866,
  "history_end_time" : 1737327564866,
  "history_notes" : null,
  "history_process" : "04fgyq",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "botolg2pec5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564872,
  "history_end_time" : 1737327564872,
  "history_notes" : null,
  "history_process" : "dwa3fy",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "3k3924v3s23",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737327564873,
  "history_end_time" : 1737327564873,
  "history_notes" : null,
  "history_process" : "gz5syq",
  "host_id" : "100001",
  "indicator" : "Skipped"
}]
