[{
  "history_id" : "17kqlu54575",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714977336239,
  "history_end_time" : 1714977336239,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "do2tqu0u0p7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714968024321,
  "history_end_time" : 1714968024321,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "gkn2rlycy8h",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714956083595,
  "history_end_time" : 1714956344017,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "vbx6zc",
  "indicator" : "Stopped"
},{
  "history_id" : "h53ybcn2z3a",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714944537031,
  "history_end_time" : 1714944767580,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "vbx6zc",
  "indicator" : "Stopped"
},{
  "history_id" : "vohotogw16n",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714943546226,
  "history_end_time" : 1714943546226,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "l6gofdxa1n9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714897025214,
  "history_end_time" : 1714897025214,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "l5dt03pzx6b",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714894044196,
  "history_end_time" : 1714895139380,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "8vyahvwicvy",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714881609891,
  "history_end_time" : 1714881609891,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "9UsRgN6Sz9JL",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nfrom scipy.spatial import KDTree\nimport dask.dataframe as dd\nfrom dask.distributed import Client\n\nready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted.csv'\ndem_slope_csv_path = f\"{work_dir}/slope_file.tif.csv\"\nprint(f\"ready_csv_path = {ready_csv_path}\")\n\n\n\n\n\ndef replace_slope(row, tree, dem_df):\n    '''\n    Replace the 'slope' column in the input DataFrame row with the closest slope value from the DEM data.\n\n    Args:\n        row (pandas.Series): A row of data containing 'lat' and 'lon' columns.\n        tree (scipy.spatial.KDTree): KDTree built from DEM data.\n        dem_df (pandas.DataFrame): DataFrame containing DEM data.\n\n    Returns:\n        float: The closest slope value from the DEM data for the given latitude and longitude.\n    '''\n    # print(\"row = \", row)\n    target_lat = row[\"lat\"]\n    target_lon = row[\"lon\"]\n    _, idx = tree.query([(target_lat, target_lon)])\n    closest_row = dem_df.iloc[idx[0]]\n    return closest_row[\"Slope\"]\n\ndef parallelize_slope_correction():\n    # Start Dask client\n#     client = Client()\n\n    # Scatter DEM data\n#     dem_future = client.scatter(dem_slope_df)\n    # Read the cleaned ready CSV and DEM slope CSV\n    train_ready_df = pd.read_csv(ready_csv_path)\n    dem_slope_df = pd.read_csv(dem_slope_csv_path)\n\n    print(train_ready_df.head())\n    print(dem_slope_df.head())\n\n    print(\"all train.csv columns: \", train_ready_df.columns)\n    print(\"all dem slope columns: \", dem_slope_df.columns)\n    \n    # Build KDTree for DEM data\n    tree = KDTree(dem_slope_df[['Latitude', 'Longitude']].values)\n    \n    print(\"deduplicate the training point lat/lon\")\n    lat_lon_df = train_ready_df[['lat', 'lon']].drop_duplicates()\n\n    print(\"lat_lon_df.shape\", lat_lon_df.shape)\n    # Apply the 'replace_slope' function to calculate and replace slope values in the DataFrame\n    print(\"start to correct slope\")\n    #train_ready_df['corrected_slope'] = train_ready_df.apply(replace_slope, args=(tree, dem_slope_df), axis=1)\n    \n    # Apply the function with scattered data and log progress\n#     train_ready_ddf['corrected_slope'] = train_ready_ddf.map_partitions(\n#         lambda df: df.apply(replace_slope, args=(tree, dem_future)), \n#         meta=('slope', 'float64')\n#     )\n#     train_ready_ddf['corrected_slope'].compute(progress_callback=progress)\n\n    lat_lon_df['corrected_slope'] = lat_lon_df.apply(replace_slope, args=(tree, dem_slope_df), axis=1)\n  \n    train_ready_df = train_ready_df.merge(lat_lon_df, on=['lat', 'lon'], how='left')\n    \n\n    print(\"finished correcting slope\")\n    print(train_ready_df.head())\n    print(train_ready_df.columns)\n\n    new_result_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv'\n    print(f\"saving the correct data into {new_result_csv_path}\")\n    # Save the modified DataFrame to a new CSV file\n    train_ready_df.to_csv(new_result_csv_path, index=False)\n    print(f\"The new slope corrected dataframe is saved to {new_result_csv_path}\")\n    \n  \n  \nif __name__ == \"__main__\":\n    parallelize_slope_correction()\n",
  "history_output" : "today date = 2024-05-04\n2024-05-01\ntest start date:  2024-05-01\ntest end date:  2023-10-11\n/home/chetana\nready_csv_path = /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted.csv\n/home/chetana/gw-workspace/9UsRgN6Sz9JL/correct_slope.py:42: DtypeWarning: Columns (4) have mixed types. Specify dtype option on import or set low_memory=False.\n  train_ready_df = pd.read_csv(ready_csv_path)\n         date        lat         lon  ...  Northness  Eastness  fsca\n0  2018-01-01  25.030476 -107.762452  ...  -0.353829 -0.748759   NaN\n1  2018-01-01  25.046597 -105.686771  ...  -0.266138  0.766098   NaN\n2  2018-01-01  25.054371 -105.621360  ...   0.620411 -0.610461   NaN\n3  2018-01-01  25.063428 -105.671338  ...  -0.537485  0.676551   NaN\n4  2018-01-01  25.069645 -102.272098  ...   0.772309  0.222141   NaN\n[5 rows x 24 columns]\n   Latitude  Longitude  x  y   Slope\n0      49.0   -125.000  0  0 -9999.0\n1      49.0   -124.964  1  0 -9999.0\n2      49.0   -124.928  2  0 -9999.0\n3      49.0   -124.892  3  0 -9999.0\n4      49.0   -124.856  4  0 -9999.0\nall train.csv columns:  Index(['date', 'lat', 'lon', 'AMSR_SWE', 'station_name', 'swe_value',\n       'change_in_swe_inch', 'snow_depth', 'air_temperature_observed_f',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'fsca'],\n      dtype='object')\nall dem slope columns:  Index(['Latitude', 'Longitude', 'x', 'y', 'Slope'], dtype='object')\ndeduplicate the training point lat/lon\nlat_lon_df.shape (7640, 2)\nstart to correct slope\nfinished correcting slope\n         date        lat         lon  ...  Eastness fsca  corrected_slope\n0  2018-01-01  25.030476 -107.762452  ... -0.748759  NaN          -9999.0\n1  2018-01-01  25.046597 -105.686771  ...  0.766098  NaN          -9999.0\n2  2018-01-01  25.054371 -105.621360  ... -0.610461  NaN          -9999.0\n3  2018-01-01  25.063428 -105.671338  ...  0.676551  NaN          -9999.0\n4  2018-01-01  25.069645 -102.272098  ...  0.222141  NaN          -9999.0\n[5 rows x 25 columns]\nIndex(['date', 'lat', 'lon', 'AMSR_SWE', 'station_name', 'swe_value',\n       'change_in_swe_inch', 'snow_depth', 'air_temperature_observed_f',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'fsca', 'corrected_slope'],\n      dtype='object')\nsaving the correct data into /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv\nThe new slope corrected dataframe is saved to /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv\n",
  "history_begin_time" : 1714852300041,
  "history_end_time" : 1714852848265,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "FCN5COGCEXwi",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nfrom scipy.spatial import KDTree\nimport dask.dataframe as dd\nfrom dask.distributed import Client\n\nready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted.csv'\ndem_slope_csv_path = f\"{work_dir}/slope_file.tif.csv\"\nprint(f\"ready_csv_path = {ready_csv_path}\")\n\n\n\n\n\ndef replace_slope(row, tree, dem_df):\n    '''\n    Replace the 'slope' column in the input DataFrame row with the closest slope value from the DEM data.\n\n    Args:\n        row (pandas.Series): A row of data containing 'lat' and 'lon' columns.\n        tree (scipy.spatial.KDTree): KDTree built from DEM data.\n        dem_df (pandas.DataFrame): DataFrame containing DEM data.\n\n    Returns:\n        float: The closest slope value from the DEM data for the given latitude and longitude.\n    '''\n    # print(\"row = \", row)\n    target_lat = row[\"lat\"]\n    target_lon = row[\"lon\"]\n    _, idx = tree.query([(target_lat, target_lon)])\n    closest_row = dem_df.iloc[idx[0]]\n    return closest_row[\"Slope\"]\n\ndef parallelize_slope_correction():\n    # Start Dask client\n#     client = Client()\n\n    # Scatter DEM data\n#     dem_future = client.scatter(dem_slope_df)\n    # Read the cleaned ready CSV and DEM slope CSV\n    train_ready_df = pd.read_csv(ready_csv_path)\n    dem_slope_df = pd.read_csv(dem_slope_csv_path)\n\n    print(train_ready_df.head())\n    print(dem_slope_df.head())\n\n    print(\"all train.csv columns: \", train_ready_df.columns)\n    print(\"all dem slope columns: \", dem_slope_df.columns)\n    \n    # Build KDTree for DEM data\n    tree = KDTree(dem_slope_df[['Latitude', 'Longitude']].values)\n    \n    print(\"deduplicate the training point lat/lon\")\n    lat_lon_df = train_ready_df[['lat', 'lon']].drop_duplicates()\n\n    print(\"lat_lon_df.shape\", lat_lon_df.shape)\n    # Apply the 'replace_slope' function to calculate and replace slope values in the DataFrame\n    print(\"start to correct slope\")\n    #train_ready_df['corrected_slope'] = train_ready_df.apply(replace_slope, args=(tree, dem_slope_df), axis=1)\n    \n    # Apply the function with scattered data and log progress\n#     train_ready_ddf['corrected_slope'] = train_ready_ddf.map_partitions(\n#         lambda df: df.apply(replace_slope, args=(tree, dem_future)), \n#         meta=('slope', 'float64')\n#     )\n#     train_ready_ddf['corrected_slope'].compute(progress_callback=progress)\n\n    lat_lon_df['corrected_slope'] = lat_lon_df.apply(replace_slope, args=(tree, dem_slope_df), axis=1)\n  \n    train_ready_df = train_ready_df.merge(lat_lon_ddf, on=['lat', 'lon'], how='left')\n    \n\n    print(\"finished correcting slope\")\n    print(train_ready_df.head())\n    print(train_ready_df.columns)\n\n    new_result_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv'\n    print(f\"saving the correct data into {new_result_csv_path}\")\n    # Save the modified DataFrame to a new CSV file\n    train_ready_df.to_csv(new_result_csv_path, index=False)\n    print(f\"The new slope corrected dataframe is saved to {new_result_csv_path}\")\n    \n  \n  \nif __name__ == \"__main__\":\n    parallelize_slope_correction()\n",
  "history_output" : "today date = 2024-05-04\n2024-05-01\ntest start date:  2024-05-01\ntest end date:  2023-10-11\n/home/chetana\nready_csv_path = /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted.csv\n/home/chetana/gw-workspace/FCN5COGCEXwi/correct_slope.py:42: DtypeWarning: Columns (4) have mixed types. Specify dtype option on import or set low_memory=False.\n  train_ready_df = pd.read_csv(ready_csv_path)\n         date        lat         lon  ...  Northness  Eastness  fsca\n0  2018-01-01  25.030476 -107.762452  ...  -0.353829 -0.748759   NaN\n1  2018-01-01  25.046597 -105.686771  ...  -0.266138  0.766098   NaN\n2  2018-01-01  25.054371 -105.621360  ...   0.620411 -0.610461   NaN\n3  2018-01-01  25.063428 -105.671338  ...  -0.537485  0.676551   NaN\n4  2018-01-01  25.069645 -102.272098  ...   0.772309  0.222141   NaN\n[5 rows x 24 columns]\n   Latitude  Longitude  x  y   Slope\n0      49.0   -125.000  0  0 -9999.0\n1      49.0   -124.964  1  0 -9999.0\n2      49.0   -124.928  2  0 -9999.0\n3      49.0   -124.892  3  0 -9999.0\n4      49.0   -124.856  4  0 -9999.0\nall train.csv columns:  Index(['date', 'lat', 'lon', 'AMSR_SWE', 'station_name', 'swe_value',\n       'change_in_swe_inch', 'snow_depth', 'air_temperature_observed_f',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'fsca'],\n      dtype='object')\nall dem slope columns:  Index(['Latitude', 'Longitude', 'x', 'y', 'Slope'], dtype='object')\ndeduplicate the training point lat/lon\nlat_lon_df.shape (7640, 2)\nstart to correct slope\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/FCN5COGCEXwi/correct_slope.py\", line 87, in <module>\n    parallelize_slope_correction()\n  File \"/home/chetana/gw-workspace/FCN5COGCEXwi/correct_slope.py\", line 71, in parallelize_slope_correction\n    train_ready_df = train_ready_df.merge(lat_lon_ddf, on=['lat', 'lon'], how='left')\nNameError: name 'lat_lon_ddf' is not defined\n",
  "history_begin_time" : 1714852209552,
  "history_end_time" : 1714852278660,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "6LmaSrXIg7Ul",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nfrom scipy.spatial import KDTree\nimport dask.dataframe as dd\nfrom dask.distributed import Client\n\nready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted.csv'\ndem_slope_csv_path = f\"{work_dir}/slope_file.tif.csv\"\nprint(f\"ready_csv_path = {ready_csv_path}\")\n\n# Read the cleaned ready CSV and DEM slope CSV\ntrain_ready_df = pd.read_csv(ready_csv_path)\ndem_slope_df = pd.read_csv(dem_slope_csv_path)\n\nprint(train_ready_df.head())\nprint(dem_slope_df.head())\n\nprint(\"all train.csv columns: \", train_ready_df.columns)\nprint(\"all dem slope columns: \", dem_slope_df.columns)\n\n\n\ndef replace_slope(row, tree, dem_df):\n    '''\n    Replace the 'slope' column in the input DataFrame row with the closest slope value from the DEM data.\n\n    Args:\n        row (pandas.Series): A row of data containing 'lat' and 'lon' columns.\n        tree (scipy.spatial.KDTree): KDTree built from DEM data.\n        dem_df (pandas.DataFrame): DataFrame containing DEM data.\n\n    Returns:\n        float: The closest slope value from the DEM data for the given latitude and longitude.\n    '''\n    # print(\"row = \", row)\n    target_lat = row[\"lat\"]\n    target_lon = row[\"lon\"]\n    _, idx = tree.query([(target_lat, target_lon)])\n    closest_row = dem_df.iloc[idx[0]]\n    return closest_row[\"Slope\"]\n\ndef parallelize_slope_correction():\n    # Start Dask client\n#     client = Client()\n\n    # Scatter DEM data\n#     dem_future = client.scatter(dem_slope_df)\n    \n    # Build KDTree for DEM data\n    tree = KDTree(dem_slope_df[['Latitude', 'Longitude']].values)\n    \n    print(\"deduplicate the training point lat/lon\")\n    lat_lon_df = train_ready_df[['lat', 'lon']].drop_duplicates()\n\n    print(\"lat_lon_df.shape\", lat_lon_df.shape)\n    # Apply the 'replace_slope' function to calculate and replace slope values in the DataFrame\n    print(\"start to correct slope\")\n    #train_ready_df['corrected_slope'] = train_ready_df.apply(replace_slope, args=(tree, dem_slope_df), axis=1)\n    \n    # Apply the function with scattered data and log progress\n#     train_ready_ddf['corrected_slope'] = train_ready_ddf.map_partitions(\n#         lambda df: df.apply(replace_slope, args=(tree, dem_future)), \n#         meta=('slope', 'float64')\n#     )\n#     train_ready_ddf['corrected_slope'].compute(progress_callback=progress)\n\n    lat_lon_df['corrected_slope'] = lat_lon_df.apply(replace_slope, args=(tree, dem_slope_df), axis=1)\n  \n    train_ready_df = train_ready_df.merge(lat_lon_ddf, on=['lat', 'lon'], how='left')\n    \n\n    print(\"finished correcting slope\")\n    print(train_ready_df.head())\n    print(train_ready_df.columns)\n\n    new_result_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv'\n    print(f\"saving the correct data into {new_result_csv_path}\")\n    # Save the modified DataFrame to a new CSV file\n    train_ready_df.to_csv(new_result_csv_path, index=False)\n    print(f\"The new slope corrected dataframe is saved to {new_result_csv_path}\")\n    \n  \n  \nif __name__ == \"__main__\":\n    parallelize_slope_correction()\n",
  "history_output" : "today date = 2024-05-04\n2024-05-01\ntest start date:  2024-05-01\ntest end date:  2023-10-11\n/home/chetana\nready_csv_path = /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted.csv\n/home/chetana/gw-workspace/6LmaSrXIg7Ul/correct_slope.py:13: DtypeWarning: Columns (4) have mixed types. Specify dtype option on import or set low_memory=False.\n  train_ready_df = pd.read_csv(ready_csv_path)\n         date        lat         lon  ...  Northness  Eastness  fsca\n0  2018-01-01  25.030476 -107.762452  ...  -0.353829 -0.748759   NaN\n1  2018-01-01  25.046597 -105.686771  ...  -0.266138  0.766098   NaN\n2  2018-01-01  25.054371 -105.621360  ...   0.620411 -0.610461   NaN\n3  2018-01-01  25.063428 -105.671338  ...  -0.537485  0.676551   NaN\n4  2018-01-01  25.069645 -102.272098  ...   0.772309  0.222141   NaN\n[5 rows x 24 columns]\n   Latitude  Longitude  x  y   Slope\n0      49.0   -125.000  0  0 -9999.0\n1      49.0   -124.964  1  0 -9999.0\n2      49.0   -124.928  2  0 -9999.0\n3      49.0   -124.892  3  0 -9999.0\n4      49.0   -124.856  4  0 -9999.0\nall train.csv columns:  Index(['date', 'lat', 'lon', 'AMSR_SWE', 'station_name', 'swe_value',\n       'change_in_swe_inch', 'snow_depth', 'air_temperature_observed_f',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'fsca'],\n      dtype='object')\nall dem slope columns:  Index(['Latitude', 'Longitude', 'x', 'y', 'Slope'], dtype='object')\ndeduplicate the training point lat/lon\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/6LmaSrXIg7Ul/correct_slope.py\", line 86, in <module>\n    parallelize_slope_correction()\n  File \"/home/chetana/gw-workspace/6LmaSrXIg7Ul/correct_slope.py\", line 54, in parallelize_slope_correction\n    lat_lon_df = train_ready_df[['lat', 'lon']].drop_duplicates()\nUnboundLocalError: local variable 'train_ready_df' referenced before assignment\n",
  "history_begin_time" : 1714852109992,
  "history_end_time" : 1714852175660,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "uMbiTKYVCrav",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nfrom scipy.spatial import KDTree\nimport dask.dataframe as dd\nfrom dask.distributed import Client\n\nready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted.csv'\ndem_slope_csv_path = f\"{work_dir}/slope_file.tif.csv\"\nprint(f\"ready_csv_path = {ready_csv_path}\")\n\n# Read the cleaned ready CSV and DEM slope CSV\ntrain_ready_df = pd.read_csv(ready_csv_path)\ndem_slope_df = pd.read_csv(dem_slope_csv_path)\n\nprint(train_ready_df.head())\nprint(dem_slope_df.head())\n\nprint(\"all train.csv columns: \", train_ready_df.columns)\nprint(\"all dem slope columns: \", dem_slope_df.columns)\n\n\n\ndef replace_slope(row, tree, dem_df):\n    '''\n    Replace the 'slope' column in the input DataFrame row with the closest slope value from the DEM data.\n\n    Args:\n        row (pandas.Series): A row of data containing 'lat' and 'lon' columns.\n        tree (scipy.spatial.KDTree): KDTree built from DEM data.\n        dem_df (pandas.DataFrame): DataFrame containing DEM data.\n\n    Returns:\n        float: The closest slope value from the DEM data for the given latitude and longitude.\n    '''\n    print(\"row = \", row)\n    target_lat = row[\"lat\"]\n    target_lon = row[\"lon\"]\n    _, idx = tree.query([(target_lat, target_lon)])\n    closest_row = dem_df.iloc[idx[0]]\n    return closest_row[\"Slope\"]\n\ndef parallelize_slope_correction():\n    # Start Dask client\n#     client = Client()\n\n    # Scatter DEM data\n#     dem_future = client.scatter(dem_slope_df)\n    \n    # Build KDTree for DEM data\n    tree = KDTree(dem_slope_df[['Latitude', 'Longitude']].values)\n\n    # Apply the 'replace_slope' function to calculate and replace slope values in the DataFrame\n    print(\"start to correct slope\")\n    train_ready_df['corrected_slope'] = train_ready_df.apply(replace_slope, args=(tree, dem_slope_df))\n    \n    # Apply the function with scattered data and log progress\n#     train_ready_ddf['corrected_slope'] = train_ready_ddf.map_partitions(\n#         lambda df: df.apply(replace_slope, args=(tree, dem_future)), \n#         meta=('slope', 'float64')\n#     )\n#     train_ready_ddf['corrected_slope'].compute(progress_callback=progress)\n\n    print(\"finished correcting slope\")\n    print(train_ready_df.head())\n    print(train_ready_df.columns)\n\n    new_result_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv'\n    print(f\"saving the correct data into {new_result_csv_path}\")\n    # Save the modified DataFrame to a new CSV file\n    train_ready_df.to_csv(new_result_csv_path, index=False)\n    print(f\"The new slope corrected dataframe is saved to {new_result_csv_path}\")\n    \n  \n  \nif __name__ == \"__main__\":\n    parallelize_slope_correction()\n",
  "history_output" : "today date = 2024-05-04\n2024-05-01\ntest start date:  2024-05-01\ntest end date:  2023-10-11\n/home/chetana\nready_csv_path = /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted.csv\n/home/chetana/gw-workspace/uMbiTKYVCrav/correct_slope.py:13: DtypeWarning: Columns (4) have mixed types. Specify dtype option on import or set low_memory=False.\n  train_ready_df = pd.read_csv(ready_csv_path)\n         date        lat         lon  ...  Northness  Eastness  fsca\n0  2018-01-01  25.030476 -107.762452  ...  -0.353829 -0.748759   NaN\n1  2018-01-01  25.046597 -105.686771  ...  -0.266138  0.766098   NaN\n2  2018-01-01  25.054371 -105.621360  ...   0.620411 -0.610461   NaN\n3  2018-01-01  25.063428 -105.671338  ...  -0.537485  0.676551   NaN\n4  2018-01-01  25.069645 -102.272098  ...   0.772309  0.222141   NaN\n[5 rows x 24 columns]\n   Latitude  Longitude  x  y   Slope\n0      49.0   -125.000  0  0 -9999.0\n1      49.0   -124.964  1  0 -9999.0\n2      49.0   -124.928  2  0 -9999.0\n3      49.0   -124.892  3  0 -9999.0\n4      49.0   -124.856  4  0 -9999.0\nall train.csv columns:  Index(['date', 'lat', 'lon', 'AMSR_SWE', 'station_name', 'swe_value',\n       'change_in_swe_inch', 'snow_depth', 'air_temperature_observed_f',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'fsca'],\n      dtype='object')\nall dem slope columns:  Index(['Latitude', 'Longitude', 'x', 'y', 'Slope'], dtype='object')\nstart to correct slope\nrow =  0           2018-01-01\n1           2018-01-01\n2           2018-01-01\n3           2018-01-01\n4           2018-01-01\n               ...    \n15075355    2024-04-26\n15075356    2024-04-26\n15075357    2024-04-26\n15075358    2024-04-26\n15075359    2024-04-26\nName: date, Length: 15075360, dtype: object\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/uMbiTKYVCrav/correct_slope.py\", line 77, in <module>\n    parallelize_slope_correction()\n  File \"/home/chetana/gw-workspace/uMbiTKYVCrav/correct_slope.py\", line 55, in parallelize_slope_correction\n    train_ready_df['corrected_slope'] = train_ready_df.apply(replace_slope, args=(tree, dem_slope_df))\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/frame.py\", line 9568, in apply\n    return op.apply().__finalize__(self, method=\"apply\")\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/apply.py\", line 764, in apply\n    return self.apply_standard()\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/apply.py\", line 891, in apply_standard\n    results, res_index = self.apply_series_generator()\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/apply.py\", line 907, in apply_series_generator\n    results[i] = self.f(v)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/apply.py\", line 142, in f\n    return func(x, *args, **kwargs)\n  File \"/home/chetana/gw-workspace/uMbiTKYVCrav/correct_slope.py\", line 37, in replace_slope\n    target_lat = row[\"lat\"]\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/series.py\", line 981, in __getitem__\n    return self._get_value(key)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/series.py\", line 1089, in _get_value\n    loc = self.index.get_loc(label)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/range.py\", line 395, in get_loc\n    raise KeyError(key)\nKeyError: 'lat'\n",
  "history_begin_time" : 1714851611979,
  "history_end_time" : 1714851680489,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "hUj9QABI88UB",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nfrom scipy.spatial import KDTree\nimport dask.dataframe as dd\nfrom dask.distributed import Client\n\nready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted.csv'\ndem_slope_csv_path = f\"{work_dir}/slope_file.tif.csv\"\nprint(f\"ready_csv_path = {ready_csv_path}\")\n\n# Read the cleaned ready CSV and DEM slope CSV\ntrain_ready_df = pd.read_csv(ready_csv_path)\ndem_slope_df = pd.read_csv(dem_slope_csv_path)\n\nprint(train_ready_df.head())\nprint(dem_slope_df.head())\n\nprint(\"all train.csv columns: \", train_ready_df.columns)\nprint(\"all dem slope columns: \", dem_slope_df.columns)\n\n\n\ndef replace_slope(row, tree, dem_df):\n    '''\n    Replace the 'slope' column in the input DataFrame row with the closest slope value from the DEM data.\n\n    Args:\n        row (pandas.Series): A row of data containing 'lat' and 'lon' columns.\n        tree (scipy.spatial.KDTree): KDTree built from DEM data.\n        dem_df (pandas.DataFrame): DataFrame containing DEM data.\n\n    Returns:\n        float: The closest slope value from the DEM data for the given latitude and longitude.\n    '''\n    target_lat = row[\"lat\"]\n    target_lon = row[\"lon\"]\n    _, idx = tree.query([(target_lat, target_lon)])\n    closest_row = dem_df.iloc[idx[0]]\n    return closest_row[\"Slope\"]\n\ndef parallelize_slope_correction():\n    # Start Dask client\n#     client = Client()\n\n    # Scatter DEM data\n#     dem_future = client.scatter(dem_slope_df)\n    \n    # Build KDTree for DEM data\n    tree = KDTree(dem_slope_df[['Latitude', 'Longitude']].values)\n\n    # Apply the 'replace_slope' function to calculate and replace slope values in the DataFrame\n    print(\"start to correct slope\")\n    train_ready_df['corrected_slope'] = train_ready_df.apply(replace_slope, args=(tree, dem_slope_df))\n    \n    # Apply the function with scattered data and log progress\n#     train_ready_ddf['corrected_slope'] = train_ready_ddf.map_partitions(\n#         lambda df: df.apply(replace_slope, args=(tree, dem_future)), \n#         meta=('slope', 'float64')\n#     )\n#     train_ready_ddf['corrected_slope'].compute(progress_callback=progress)\n\n    print(\"finished correcting slope\")\n    print(train_ready_df.head())\n    print(train_ready_df.columns)\n\n    new_result_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv'\n    print(f\"saving the correct data into {new_result_csv_path}\")\n    # Save the modified DataFrame to a new CSV file\n    train_ready_df.to_csv(new_result_csv_path, index=False)\n    print(f\"The new slope corrected dataframe is saved to {new_result_csv_path}\")\n    \n  \n  \nif __name__ == \"__main__\":\n    parallelize_slope_correction()\n",
  "history_output" : "today date = 2024-05-04\n2024-05-01\ntest start date:  2024-05-01\ntest end date:  2023-10-11\n/home/chetana\nready_csv_path = /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted.csv\n/home/chetana/gw-workspace/hUj9QABI88UB/correct_slope.py:13: DtypeWarning: Columns (4) have mixed types. Specify dtype option on import or set low_memory=False.\n  train_ready_df = pd.read_csv(ready_csv_path)\n         date        lat         lon  ...  Northness  Eastness  fsca\n0  2018-01-01  25.030476 -107.762452  ...  -0.353829 -0.748759   NaN\n1  2018-01-01  25.046597 -105.686771  ...  -0.266138  0.766098   NaN\n2  2018-01-01  25.054371 -105.621360  ...   0.620411 -0.610461   NaN\n3  2018-01-01  25.063428 -105.671338  ...  -0.537485  0.676551   NaN\n4  2018-01-01  25.069645 -102.272098  ...   0.772309  0.222141   NaN\n[5 rows x 24 columns]\n   Latitude  Longitude  x  y   Slope\n0      49.0   -125.000  0  0 -9999.0\n1      49.0   -124.964  1  0 -9999.0\n2      49.0   -124.928  2  0 -9999.0\n3      49.0   -124.892  3  0 -9999.0\n4      49.0   -124.856  4  0 -9999.0\nall train.csv columns:  Index(['date', 'lat', 'lon', 'AMSR_SWE', 'station_name', 'swe_value',\n       'change_in_swe_inch', 'snow_depth', 'air_temperature_observed_f',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'fsca'],\n      dtype='object')\nall dem slope columns:  Index(['Latitude', 'Longitude', 'x', 'y', 'Slope'], dtype='object')\nstart to correct slope\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/hUj9QABI88UB/correct_slope.py\", line 76, in <module>\n    parallelize_slope_correction()\n  File \"/home/chetana/gw-workspace/hUj9QABI88UB/correct_slope.py\", line 54, in parallelize_slope_correction\n    train_ready_df['corrected_slope'] = train_ready_df.apply(replace_slope, args=(tree, dem_slope_df))\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/frame.py\", line 9568, in apply\n    return op.apply().__finalize__(self, method=\"apply\")\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/apply.py\", line 764, in apply\n    return self.apply_standard()\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/apply.py\", line 891, in apply_standard\n    results, res_index = self.apply_series_generator()\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/apply.py\", line 907, in apply_series_generator\n    results[i] = self.f(v)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/apply.py\", line 142, in f\n    return func(x, *args, **kwargs)\n  File \"/home/chetana/gw-workspace/hUj9QABI88UB/correct_slope.py\", line 36, in replace_slope\n    target_lat = row[\"lat\"]\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/series.py\", line 981, in __getitem__\n    return self._get_value(key)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/series.py\", line 1089, in _get_value\n    loc = self.index.get_loc(label)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/range.py\", line 395, in get_loc\n    raise KeyError(key)\nKeyError: 'lat'\n",
  "history_begin_time" : 1714846317532,
  "history_end_time" : 1714846386295,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "N8RaZmawLEDp",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nfrom scipy.spatial import KDTree\nimport dask.dataframe as dd\nfrom dask.distributed import Client\n\nready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted.csv'\ndem_slope_csv_path = f\"{work_dir}/slope_file.tif.csv\"\nprint(f\"ready_csv_path = {ready_csv_path}\")\n\n# Read the cleaned ready CSV and DEM slope CSV\ntrain_ready_df = pd.read_csv(ready_csv_path)\ndem_slope_df = pd.read_csv(dem_slope_csv_path)\n\nprint(train_ready_df.head())\nprint(dem_slope_df.head())\n\nprint(\"all train.csv columns: \", train_ready_df.columns)\nprint(\"all dem slope columns: \", dem_slope_df.columns)\n\n\n\ndef replace_slope(row, tree, dem_df):\n    '''\n    Replace the 'slope' column in the input DataFrame row with the closest slope value from the DEM data.\n\n    Args:\n        row (pandas.Series): A row of data containing 'lat' and 'lon' columns.\n        tree (scipy.spatial.KDTree): KDTree built from DEM data.\n        dem_df (pandas.DataFrame): DataFrame containing DEM data.\n\n    Returns:\n        float: The closest slope value from the DEM data for the given latitude and longitude.\n    '''\n    target_lat = row[\"lat\"]\n    target_lon = row[\"lon\"]\n    _, idx = tree.query([(target_lat, target_lon)])\n    closest_row = dem_df.iloc[idx[0]]\n    return closest_row[\"Slope\"]\n\ndef parallelize_slope_correction():\n    # Start Dask client\n#     client = Client()\n\n    # Scatter DEM data\n#     dem_future = client.scatter(dem_slope_df)\n    \n    # Build KDTree for DEM data\n    tree = KDTree(dem_slope_df[['Latitude', 'Longitude']].values)\n\n    # Apply the 'replace_slope' function to calculate and replace slope values in the DataFrame\n    print(\"start to correct slope\")\n    train_ready_df['corrected_slope'] = train_ready_df.apply(replace_slope, args=(tree, dem_slope_df)), meta=('slope', 'float64')\n    \n    # Apply the function with scattered data and log progress\n#     train_ready_ddf['corrected_slope'] = train_ready_ddf.map_partitions(\n#         lambda df: df.apply(replace_slope, args=(tree, dem_future)), \n#         meta=('slope', 'float64')\n#     )\n#     train_ready_ddf['corrected_slope'].compute(progress_callback=progress)\n\n    print(\"finished correcting slope\")\n    print(train_ready_df.head())\n    print(train_ready_df.columns)\n\n    new_result_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv'\n    print(f\"saving the correct data into {new_result_csv_path}\")\n    # Save the modified DataFrame to a new CSV file\n    train_ready_df.to_csv(new_result_csv_path, index=False)\n    print(f\"The new slope corrected dataframe is saved to {new_result_csv_path}\")\n    \n  \n  \nif __name__ == \"__main__\":\n    parallelize_slope_correction()\n",
  "history_output" : "  File \"/home/chetana/gw-workspace/N8RaZmawLEDp/correct_slope.py\", line 54\n    train_ready_df['corrected_slope'] = train_ready_df.apply(replace_slope, args=(tree, dem_slope_df)), meta=('slope', 'float64')\n                                        ^\nSyntaxError: cannot assign to function call\n",
  "history_begin_time" : 1714846278973,
  "history_end_time" : 1714846279054,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "YXXuuZrQtOOH",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nfrom scipy.spatial import KDTree\nimport dask.dataframe as dd\nfrom dask.distributed import Client\n\nready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted.csv'\ndem_slope_csv_path = f\"{work_dir}/slope_file.tif.csv\"\nprint(f\"ready_csv_path = {ready_csv_path}\")\n\n# Read the cleaned ready CSV and DEM slope CSV\ntrain_ready_df = pd.read_csv(ready_csv_path)\ndem_slope_df = pd.read_csv(dem_slope_csv_path)\n\nprint(train_ready_df.head())\nprint(dem_slope_df.head())\n\nprint(\"all train.csv columns: \", train_ready_df.columns)\nprint(\"all dem slope columns: \", dem_slope_df.columns)\n\n\n\ndef replace_slope(row, tree, dem_df):\n    '''\n    Replace the 'slope' column in the input DataFrame row with the closest slope value from the DEM data.\n\n    Args:\n        row (pandas.Series): A row of data containing 'lat' and 'lon' columns.\n        tree (scipy.spatial.KDTree): KDTree built from DEM data.\n        dem_df (pandas.DataFrame): DataFrame containing DEM data.\n\n    Returns:\n        float: The closest slope value from the DEM data for the given latitude and longitude.\n    '''\n    target_lat = row[\"lat\"]\n    target_lon = row[\"lon\"]\n    _, idx = tree.query([(target_lat, target_lon)])\n    closest_row = dem_df.iloc[idx[0]]\n    return closest_row[\"Slope\"]\n\ndef parallelize_slope_correction():\n    # Start Dask client\n    client = Client()\n\n    # Scatter DEM data\n    dem_future = client.scatter(dem_slope_df)\n    \n    # Build KDTree for DEM data\n    tree = KDTree(dem_slope_df[['Latitude', 'Longitude']].values)\n\n    # Apply the 'replace_slope' function to calculate and replace slope values in the DataFrame\n    print(\"start to correct slope\")\n    # train_ready_df['corrected_slope'] = train_ready_df.apply(replace_slope, args=(tree, dem_slope_df)), meta=('slope', 'float64')\n    \n    # Apply the function with scattered data and log progress\n    train_ready_ddf['corrected_slope'] = train_ready_ddf.map_partitions(\n        lambda df: df.apply(replace_slope, args=(tree, dem_future)), \n        meta=('slope', 'float64')\n    )\n    train_ready_ddf['corrected_slope'].compute(progress_callback=progress)\n\n    print(\"finished correcting slope\")\n    print(train_ready_ddf.head())\n    print(train_ready_ddf.columns)\n\n    new_result_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv'\n    print(f\"saving the correct data into {new_result_csv_path}\")\n    # Save the modified DataFrame to a new CSV file\n    train_ready_ddf.to_csv(new_result_csv_path, index=False)\n    print(f\"The new slope corrected dataframe is saved to {new_result_csv_path}\")\n    \n  \n  \nif __name__ == \"__main__\":\n    parallelize_slope_correction()\n",
  "history_output" : "today date = 2024-05-04\n2024-05-01\ntest start date:  2024-05-01\ntest end date:  2023-10-11\n/home/chetana\nready_csv_path = /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted.csv\n/home/chetana/gw-workspace/YXXuuZrQtOOH/correct_slope.py:13: DtypeWarning: Columns (4) have mixed types. Specify dtype option on import or set low_memory=False.\n  train_ready_df = pd.read_csv(ready_csv_path)\n         date        lat         lon  ...  Northness  Eastness  fsca\n0  2018-01-01  25.030476 -107.762452  ...  -0.353829 -0.748759   NaN\n1  2018-01-01  25.046597 -105.686771  ...  -0.266138  0.766098   NaN\n2  2018-01-01  25.054371 -105.621360  ...   0.620411 -0.610461   NaN\n3  2018-01-01  25.063428 -105.671338  ...  -0.537485  0.676551   NaN\n4  2018-01-01  25.069645 -102.272098  ...   0.772309  0.222141   NaN\n[5 rows x 24 columns]\n   Latitude  Longitude  x  y   Slope\n0      49.0   -125.000  0  0 -9999.0\n1      49.0   -124.964  1  0 -9999.0\n2      49.0   -124.928  2  0 -9999.0\n3      49.0   -124.892  3  0 -9999.0\n4      49.0   -124.856  4  0 -9999.0\nall train.csv columns:  Index(['date', 'lat', 'lon', 'AMSR_SWE', 'station_name', 'swe_value',\n       'change_in_swe_inch', 'snow_depth', 'air_temperature_observed_f',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'fsca'],\n      dtype='object')\nall dem slope columns:  Index(['Latitude', 'Longitude', 'x', 'y', 'Slope'], dtype='object')\n/home/chetana/gw-workspace/YXXuuZrQtOOH/correct_slope.py:13: DtypeWarning: Columns (4) have mixed types. Specify dtype option on import or set low_memory=False.\n  train_ready_df = pd.read_csv(ready_csv_path)\n/home/chetana/gw-workspace/YXXuuZrQtOOH/correct_slope.py:13: DtypeWarning: Columns (4) have mixed types. Specify dtype option on import or set low_memory=False.\n  train_ready_df = pd.read_csv(ready_csv_path)\n/home/chetana/gw-workspace/YXXuuZrQtOOH/correct_slope.py:13: DtypeWarning: Columns (4) have mixed types. Specify dtype option on import or set low_memory=False.\n  train_ready_df = pd.read_csv(ready_csv_path)\n/home/chetana/gw-workspace/YXXuuZrQtOOH/correct_slope.py:13: DtypeWarning: Columns (4) have mixed types. Specify dtype option on import or set low_memory=False.\n  train_ready_df = pd.read_csv(ready_csv_path)\n/home/chetana/gw-workspace/YXXuuZrQtOOH/correct_slope.py:13: DtypeWarning: Columns (4) have mixed types. Specify dtype option on import or set low_memory=False.\n  train_ready_df = pd.read_csv(ready_csv_path)\n/home/chetana/gw-workspace/YXXuuZrQtOOH/correct_slope.py:13: DtypeWarning: Columns (4) have mixed types. Specify dtype option on import or set low_memory=False.\n  train_ready_df = pd.read_csv(ready_csv_path)\n/home/chetana/gw-workspace/YXXuuZrQtOOH/correct_slope.py:13: DtypeWarning: Columns (4) have mixed types. Specify dtype option on import or set low_memory=False.\n  train_ready_df = pd.read_csv(ready_csv_path)\n/home/chetana/gw-workspace/YXXuuZrQtOOH/correct_slope.py:13: DtypeWarning: Columns (4) have mixed types. Specify dtype option on import or set low_memory=False.\n  train_ready_df = pd.read_csv(ready_csv_path)\nstart to correct slope\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/YXXuuZrQtOOH/correct_slope.py\", line 76, in <module>\n    parallelize_slope_correction()\n  File \"/home/chetana/gw-workspace/YXXuuZrQtOOH/correct_slope.py\", line 57, in parallelize_slope_correction\n    train_ready_ddf['corrected_slope'] = train_ready_ddf.map_partitions(\nNameError: name 'train_ready_ddf' is not defined\ntoday date = 2024-05-04\n2024-05-01\ntest start date:  2024-05-01\ntest end date:  2023-10-11\n/home/chetana\nready_csv_path = /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted.csv\n         date        lat         lon  ...  Northness  Eastness  fsca\n0  2018-01-01  25.030476 -107.762452  ...  -0.353829 -0.748759   NaN\n1  2018-01-01  25.046597 -105.686771  ...  -0.266138  0.766098   NaN\n2  2018-01-01  25.054371 -105.621360  ...   0.620411 -0.610461   NaN\n3  2018-01-01  25.063428 -105.671338  ...  -0.537485  0.676551   NaN\n4  2018-01-01  25.069645 -102.272098  ...   0.772309  0.222141   NaN\n[5 rows x 24 columns]\n   Latitude  Longitude  x  y   Slope\n0      49.0   -125.000  0  0 -9999.0\n1      49.0   -124.964  1  0 -9999.0\n2      49.0   -124.928  2  0 -9999.0\n3      49.0   -124.892  3  0 -9999.0\n4      49.0   -124.856  4  0 -9999.0\nall train.csv columns:  Index(['date', 'lat', 'lon', 'AMSR_SWE', 'station_name', 'swe_value',\n       'change_in_swe_inch', 'snow_depth', 'air_temperature_observed_f',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'fsca'],\n      dtype='object')\nall dem slope columns:  Index(['Latitude', 'Longitude', 'x', 'y', 'Slope'], dtype='object')\ntoday date = 2024-05-04\n2024-05-01\ntest start date:  2024-05-01\ntest end date:  2023-10-11\n/home/chetana\nready_csv_path = /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted.csv\n         date        lat         lon  ...  Northness  Eastness  fsca\n0  2018-01-01  25.030476 -107.762452  ...  -0.353829 -0.748759   NaN\n1  2018-01-01  25.046597 -105.686771  ...  -0.266138  0.766098   NaN\n2  2018-01-01  25.054371 -105.621360  ...   0.620411 -0.610461   NaN\n3  2018-01-01  25.063428 -105.671338  ...  -0.537485  0.676551   NaN\n4  2018-01-01  25.069645 -102.272098  ...   0.772309  0.222141   NaN\n[5 rows x 24 columns]\n   Latitude  Longitude  x  y   Slope\n0      49.0   -125.000  0  0 -9999.0\n1      49.0   -124.964  1  0 -9999.0\n2      49.0   -124.928  2  0 -9999.0\n3      49.0   -124.892  3  0 -9999.0\n4      49.0   -124.856  4  0 -9999.0\nall train.csv columns:  Index(['date', 'lat', 'lon', 'AMSR_SWE', 'station_name', 'swe_value',\n       'change_in_swe_inch', 'snow_depth', 'air_temperature_observed_f',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'fsca'],\n      dtype='object')\nall dem slope columns:  Index(['Latitude', 'Longitude', 'x', 'y', 'Slope'], dtype='object')\ntoday date = 2024-05-04\n2024-05-01\ntest start date:  2024-05-01\ntest end date:  2023-10-11\n/home/chetana\nready_csv_path = /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted.csv\n         date        lat         lon  ...  Northness  Eastness  fsca\n0  2018-01-01  25.030476 -107.762452  ...  -0.353829 -0.748759   NaN\n1  2018-01-01  25.046597 -105.686771  ...  -0.266138  0.766098   NaN\n2  2018-01-01  25.054371 -105.621360  ...   0.620411 -0.610461   NaN\n3  2018-01-01  25.063428 -105.671338  ...  -0.537485  0.676551   NaN\n4  2018-01-01  25.069645 -102.272098  ...   0.772309  0.222141   NaN\n[5 rows x 24 columns]\n   Latitude  Longitude  x  y   Slope\n0      49.0   -125.000  0  0 -9999.0\n1      49.0   -124.964  1  0 -9999.0\n2      49.0   -124.928  2  0 -9999.0\n3      49.0   -124.892  3  0 -9999.0\n4      49.0   -124.856  4  0 -9999.0\nall train.csv columns:  Index(['date', 'lat', 'lon', 'AMSR_SWE', 'station_name', 'swe_value',\n       'change_in_swe_inch', 'snow_depth', 'air_temperature_observed_f',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'fsca'],\n      dtype='object')\nall dem slope columns:  Index(['Latitude', 'Longitude', 'x', 'y', 'Slope'], dtype='object')\ntoday date = 2024-05-04\n2024-05-01\ntest start date:  2024-05-01\ntest end date:  2023-10-11\n/home/chetana\nready_csv_path = /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted.csv\n         date        lat         lon  ...  Northness  Eastness  fsca\n0  2018-01-01  25.030476 -107.762452  ...  -0.353829 -0.748759   NaN\n1  2018-01-01  25.046597 -105.686771  ...  -0.266138  0.766098   NaN\n2  2018-01-01  25.054371 -105.621360  ...   0.620411 -0.610461   NaN\n3  2018-01-01  25.063428 -105.671338  ...  -0.537485  0.676551   NaN\n4  2018-01-01  25.069645 -102.272098  ...   0.772309  0.222141   NaN\n[5 rows x 24 columns]\n   Latitude  Longitude  x  y   Slope\n0      49.0   -125.000  0  0 -9999.0\n1      49.0   -124.964  1  0 -9999.0\n2      49.0   -124.928  2  0 -9999.0\n3      49.0   -124.892  3  0 -9999.0\n4      49.0   -124.856  4  0 -9999.0\nall train.csv columns:  Index(['date', 'lat', 'lon', 'AMSR_SWE', 'station_name', 'swe_value',\n       'change_in_swe_inch', 'snow_depth', 'air_temperature_observed_f',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'fsca'],\n      dtype='object')\nall dem slope columns:  Index(['Latitude', 'Longitude', 'x', 'y', 'Slope'], dtype='object')\ntoday date = 2024-05-04\n2024-05-01\ntest start date:  2024-05-01\ntest end date:  2023-10-11\n/home/chetana\nready_csv_path = /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted.csv\n         date        lat         lon  ...  Northness  Eastness  fsca\n0  2018-01-01  25.030476 -107.762452  ...  -0.353829 -0.748759   NaN\n1  2018-01-01  25.046597 -105.686771  ...  -0.266138  0.766098   NaN\n2  2018-01-01  25.054371 -105.621360  ...   0.620411 -0.610461   NaN\n3  2018-01-01  25.063428 -105.671338  ...  -0.537485  0.676551   NaN\n4  2018-01-01  25.069645 -102.272098  ...   0.772309  0.222141   NaN\n[5 rows x 24 columns]\n   Latitude  Longitude  x  y   Slope\n0      49.0   -125.000  0  0 -9999.0\n1      49.0   -124.964  1  0 -9999.0\n2      49.0   -124.928  2  0 -9999.0\n3      49.0   -124.892  3  0 -9999.0\n4      49.0   -124.856  4  0 -9999.0\nall train.csv columns:  Index(['date', 'lat', 'lon', 'AMSR_SWE', 'station_name', 'swe_value',\n       'change_in_swe_inch', 'snow_depth', 'air_temperature_observed_f',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'fsca'],\n      dtype='object')\nall dem slope columns:  Index(['Latitude', 'Longitude', 'x', 'y', 'Slope'], dtype='object')\ntoday date = 2024-05-04\n2024-05-01\ntest start date:  2024-05-01\ntest end date:  2023-10-11\n/home/chetana\nready_csv_path = /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted.csv\n         date        lat         lon  ...  Northness  Eastness  fsca\n0  2018-01-01  25.030476 -107.762452  ...  -0.353829 -0.748759   NaN\n1  2018-01-01  25.046597 -105.686771  ...  -0.266138  0.766098   NaN\n2  2018-01-01  25.054371 -105.621360  ...   0.620411 -0.610461   NaN\n3  2018-01-01  25.063428 -105.671338  ...  -0.537485  0.676551   NaN\n4  2018-01-01  25.069645 -102.272098  ...   0.772309  0.222141   NaN\n[5 rows x 24 columns]\n   Latitude  Longitude  x  y   Slope\n0      49.0   -125.000  0  0 -9999.0\n1      49.0   -124.964  1  0 -9999.0\n2      49.0   -124.928  2  0 -9999.0\n3      49.0   -124.892  3  0 -9999.0\n4      49.0   -124.856  4  0 -9999.0\nall train.csv columns:  Index(['date', 'lat', 'lon', 'AMSR_SWE', 'station_name', 'swe_value',\n       'change_in_swe_inch', 'snow_depth', 'air_temperature_observed_f',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'fsca'],\n      dtype='object')\nall dem slope columns:  Index(['Latitude', 'Longitude', 'x', 'y', 'Slope'], dtype='object')\ntoday date = 2024-05-04\n2024-05-01\ntest start date:  2024-05-01\ntest end date:  2023-10-11\n/home/chetana\nready_csv_path = /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted.csv\n         date        lat         lon  ...  Northness  Eastness  fsca\n0  2018-01-01  25.030476 -107.762452  ...  -0.353829 -0.748759   NaN\n1  2018-01-01  25.046597 -105.686771  ...  -0.266138  0.766098   NaN\n2  2018-01-01  25.054371 -105.621360  ...   0.620411 -0.610461   NaN\n3  2018-01-01  25.063428 -105.671338  ...  -0.537485  0.676551   NaN\n4  2018-01-01  25.069645 -102.272098  ...   0.772309  0.222141   NaN\n[5 rows x 24 columns]\n   Latitude  Longitude  x  y   Slope\n0      49.0   -125.000  0  0 -9999.0\n1      49.0   -124.964  1  0 -9999.0\n2      49.0   -124.928  2  0 -9999.0\n3      49.0   -124.892  3  0 -9999.0\n4      49.0   -124.856  4  0 -9999.0\nall train.csv columns:  Index(['date', 'lat', 'lon', 'AMSR_SWE', 'station_name', 'swe_value',\n       'change_in_swe_inch', 'snow_depth', 'air_temperature_observed_f',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'fsca'],\n      dtype='object')\nall dem slope columns:  Index(['Latitude', 'Longitude', 'x', 'y', 'Slope'], dtype='object')\ntoday date = 2024-05-04\n2024-05-01\ntest start date:  2024-05-01\ntest end date:  2023-10-11\n/home/chetana\nready_csv_path = /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted.csv\n         date        lat         lon  ...  Northness  Eastness  fsca\n0  2018-01-01  25.030476 -107.762452  ...  -0.353829 -0.748759   NaN\n1  2018-01-01  25.046597 -105.686771  ...  -0.266138  0.766098   NaN\n2  2018-01-01  25.054371 -105.621360  ...   0.620411 -0.610461   NaN\n3  2018-01-01  25.063428 -105.671338  ...  -0.537485  0.676551   NaN\n4  2018-01-01  25.069645 -102.272098  ...   0.772309  0.222141   NaN\n[5 rows x 24 columns]\n   Latitude  Longitude  x  y   Slope\n0      49.0   -125.000  0  0 -9999.0\n1      49.0   -124.964  1  0 -9999.0\n2      49.0   -124.928  2  0 -9999.0\n3      49.0   -124.892  3  0 -9999.0\n4      49.0   -124.856  4  0 -9999.0\nall train.csv columns:  Index(['date', 'lat', 'lon', 'AMSR_SWE', 'station_name', 'swe_value',\n       'change_in_swe_inch', 'snow_depth', 'air_temperature_observed_f',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'fsca'],\n      dtype='object')\nall dem slope columns:  Index(['Latitude', 'Longitude', 'x', 'y', 'Slope'], dtype='object')\n",
  "history_begin_time" : 1714845844249,
  "history_end_time" : 1714845993831,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "9ltZT38ljjNI",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nfrom scipy.spatial import KDTree\nimport dask.dataframe as dd\nfrom dask.distributed import Client\n\nready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted.csv'\ndem_slope_csv_path = f\"{work_dir}/slope_file.tif.csv\"\nprint(f\"ready_csv_path = {ready_csv_path}\")\n\n\n\ndef replace_slope(row, tree, dem_df):\n    '''\n    Replace the 'slope' column in the input DataFrame row with the closest slope value from the DEM data.\n\n    Args:\n        row (pandas.Series): A row of data containing 'lat' and 'lon' columns.\n        tree (scipy.spatial.KDTree): KDTree built from DEM data.\n        dem_df (pandas.DataFrame): DataFrame containing DEM data.\n\n    Returns:\n        float: The closest slope value from the DEM data for the given latitude and longitude.\n    '''\n    target_lat = row[\"lat\"]\n    target_lon = row[\"lon\"]\n    _, idx = tree.query([(target_lat, target_lon)])\n    closest_row = dem_df.iloc[idx[0]]\n    return closest_row[\"Slope\"]\n\ndef parallelize_slope_correction():\n    # Read the cleaned ready CSV and DEM slope CSV\n    train_ready_df = pd.read_csv(ready_csv_path)\n    dem_slope_df = pd.read_csv(dem_slope_csv_path)\n\n    print(train_ready_df.head())\n    print(dem_slope_df.head())\n\n    print(\"all train.csv columns: \", train_ready_df.columns)\n    print(\"all dem slope columns: \", dem_slope_df.columns)\n    \n    # Build KDTree for DEM data\n    tree = KDTree(dem_slope_df[['Latitude', 'Longitude']].values)\n\n    # Start Dask client for parallel processing\n    client = Client()\n\n    # Convert pandas DataFrames to Dask DataFrames\n    train_ready_ddf = dd.from_pandas(train_ready_df, npartitions=4)\n\n    # Apply the 'replace_slope' function to calculate and replace slope values in the DataFrame\n    print(\"start to correct slope\")\n    train_ready_ddf['slope'] = train_ready_ddf.map_partitions(lambda df: df.apply(replace_slope, args=(tree, dem_slope_df)), meta=('slope', 'float64')).compute(scheduler='distributed')\n\n    print(\"finished correcting slope\")\n    print(train_ready_ddf.head())\n    print(train_ready_ddf.columns)\n\n    new_result_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv'\n    print(f\"saving the correct data into {new_result_csv_path}\")\n    # Save the modified DataFrame to a new CSV file\n    train_ready_ddf.to_csv(new_result_csv_path, index=False)\n    print(f\"The new slope corrected dataframe is saved to {new_result_csv_path}\")\n\n    # Close the Dask client\n    client.close()\n    \n  \n  \nif __name__ == \"__main__\":\n    parallelize_slope_correction()\n",
  "history_output" : "today date = 2024-05-04\n2024-05-01\ntest start date:  2024-05-01\ntest end date:  2023-10-11\n/home/chetana\nready_csv_path = /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted.csv\n/home/chetana/gw-workspace/9ltZT38ljjNI/correct_slope.py:34: DtypeWarning: Columns (4) have mixed types. Specify dtype option on import or set low_memory=False.\n  train_ready_df = pd.read_csv(ready_csv_path)\n         date        lat         lon  ...  Northness  Eastness  fsca\n0  2018-01-01  25.030476 -107.762452  ...  -0.353829 -0.748759   NaN\n1  2018-01-01  25.046597 -105.686771  ...  -0.266138  0.766098   NaN\n2  2018-01-01  25.054371 -105.621360  ...   0.620411 -0.610461   NaN\n3  2018-01-01  25.063428 -105.671338  ...  -0.537485  0.676551   NaN\n4  2018-01-01  25.069645 -102.272098  ...   0.772309  0.222141   NaN\n[5 rows x 24 columns]\n   Latitude  Longitude  x  y   Slope\n0      49.0   -125.000  0  0 -9999.0\n1      49.0   -124.964  1  0 -9999.0\n2      49.0   -124.928  2  0 -9999.0\n3      49.0   -124.892  3  0 -9999.0\n4      49.0   -124.856  4  0 -9999.0\nall train.csv columns:  Index(['date', 'lat', 'lon', 'AMSR_SWE', 'station_name', 'swe_value',\n       'change_in_swe_inch', 'snow_depth', 'air_temperature_observed_f',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'fsca'],\n      dtype='object')\nall dem slope columns:  Index(['Latitude', 'Longitude', 'x', 'y', 'Slope'], dtype='object')\nstart to correct slope\n/home/chetana/anaconda3/lib/python3.9/site-packages/distributed/client.py:3149: UserWarning: Sending large graph of size 2.67 GiB.\nThis may cause some slowdown.\nConsider scattering data ahead of time and using futures.\n  warnings.warn(\n2024-05-04 07:48:40,381 - distributed.protocol.core - CRITICAL - Failed to deserialize\nTraceback (most recent call last):\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/distributed/protocol/core.py\", line 158, in loads\n    return msgpack.loads(\n  File \"msgpack/_unpacker.pyx\", line 194, in msgpack._cmsgpack.unpackb\nValueError: 2861556847 exceeds max_bin_len(2147483647)\n2024-05-04 07:48:40,411 - distributed.core - ERROR - Exception while handling op register-client\nTraceback (most recent call last):\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/distributed/core.py\", line 921, in _handle_comm\n    result = await result\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/distributed/scheduler.py\", line 5490, in add_client\n    await self.handle_stream(comm=comm, extra={\"client\": client})\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/distributed/core.py\", line 974, in handle_stream\n    msgs = await comm.read()\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/distributed/comm/tcp.py\", line 253, in read\n    msg = await from_frames(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/distributed/comm/utils.py\", line 100, in from_frames\n    res = _from_frames()\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/distributed/comm/utils.py\", line 83, in _from_frames\n    return protocol.loads(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/distributed/protocol/core.py\", line 158, in loads\n    return msgpack.loads(\n  File \"msgpack/_unpacker.pyx\", line 194, in msgpack._cmsgpack.unpackb\nValueError: 2861556847 exceeds max_bin_len(2147483647)\nTask exception was never retrieved\nfuture: <Task finished name='Task-418' coro=<Server._handle_comm() done, defined at /home/chetana/anaconda3/lib/python3.9/site-packages/distributed/core.py:827> exception=ValueError('2861556847 exceeds max_bin_len(2147483647)')>\nTraceback (most recent call last):\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/distributed/core.py\", line 921, in _handle_comm\n    result = await result\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/distributed/scheduler.py\", line 5490, in add_client\n    await self.handle_stream(comm=comm, extra={\"client\": client})\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/distributed/core.py\", line 974, in handle_stream\n    msgs = await comm.read()\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/distributed/comm/tcp.py\", line 253, in read\n    msg = await from_frames(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/distributed/comm/utils.py\", line 100, in from_frames\n    res = _from_frames()\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/distributed/comm/utils.py\", line 83, in _from_frames\n    return protocol.loads(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/distributed/protocol/core.py\", line 158, in loads\n    return msgpack.loads(\n  File \"msgpack/_unpacker.pyx\", line 194, in msgpack._cmsgpack.unpackb\nValueError: 2861556847 exceeds max_bin_len(2147483647)\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/9ltZT38ljjNI/correct_slope.py\", line 72, in <module>\n    parallelize_slope_correction()\n  File \"/home/chetana/gw-workspace/9ltZT38ljjNI/correct_slope.py\", line 54, in parallelize_slope_correction\n    train_ready_ddf['slope'] = train_ready_ddf.map_partitions(lambda df: df.apply(replace_slope, args=(tree, dem_slope_df)), meta=('slope', 'float64')).compute(scheduler='distributed')\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/dask/base.py\", line 342, in compute\n    (result,) = compute(self, traverse=False, **kwargs)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/dask/base.py\", line 628, in compute\n    results = schedule(dsk, keys, **kwargs)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/distributed/client.py\", line 2254, in _gather\n    raise exc\nconcurrent.futures._base.CancelledError: ('lambda-32e6e105d586bb17c6a392d5991805b8', 3)\ntoday date = 2024-05-04\n2024-05-01\ntest start date:  2024-05-01\ntest end date:  2023-10-11\n/home/chetana\nready_csv_path = /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted.csv\ntoday date = 2024-05-04\n2024-05-01\ntest start date:  2024-05-01\ntest end date:  2023-10-11\n/home/chetana\nready_csv_path = /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted.csv\ntoday date = 2024-05-04\n2024-05-01\ntest start date:  2024-05-01\ntest end date:  2023-10-11\n/home/chetana\nready_csv_path = /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted.csv\ntoday date = 2024-05-04\n2024-05-01\ntest start date:  2024-05-01\ntest end date:  2023-10-11\n/home/chetana\nready_csv_path = /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted.csv\ntoday date = 2024-05-04\n2024-05-01\ntest start date:  2024-05-01\ntest end date:  2023-10-11\n/home/chetana\nready_csv_path = /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted.csv\ntoday date = 2024-05-04\n2024-05-01\ntest start date:  2024-05-01\ntest end date:  2023-10-11\n/home/chetana\nready_csv_path = /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted.csv\ntoday date = 2024-05-04\n2024-05-01\ntest start date:  2024-05-01\ntest end date:  2023-10-11\n/home/chetana\nready_csv_path = /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted.csv\ntoday date = 2024-05-04\n2024-05-01\ntest start date:  2024-05-01\ntest end date:  2023-10-11\n/home/chetana\nready_csv_path = /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted.csv\n",
  "history_begin_time" : 1714808782931,
  "history_end_time" : 1714808921865,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "cDLzl1mt0NwA",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nfrom scipy.spatial import KDTree\nimport dask.dataframe as dd\nfrom dask.distributed import Client\n\nready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted.csv'\ndem_slope_csv_path = f\"{work_dir}/slope_file.tif.csv\"\n\n# Read the cleaned ready CSV and DEM slope CSV\ntrain_ready_df = pd.read_csv(ready_csv_path)\ndem_slope_df = pd.read_csv(dem_slope_csv_path)\n\nprint(train_ready_df.head())\nprint(dem_slope_df.head())\n\nprint(\"all train.csv columns: \", train_ready_df.columns)\nprint(\"all dem slope columns: \", dem_slope_df.columns)\n\ndef replace_slope(row, tree, dem_df):\n    '''\n    Replace the 'slope' column in the input DataFrame row with the closest slope value from the DEM data.\n\n    Args:\n        row (pandas.Series): A row of data containing 'lat' and 'lon' columns.\n        tree (scipy.spatial.KDTree): KDTree built from DEM data.\n        dem_df (pandas.DataFrame): DataFrame containing DEM data.\n\n    Returns:\n        float: The closest slope value from the DEM data for the given latitude and longitude.\n    '''\n    target_lat = row[\"lat\"]\n    target_lon = row[\"lon\"]\n    _, idx = tree.query([(target_lat, target_lon)])\n    closest_row = dem_df.iloc[idx[0]]\n    return closest_row[\"Slope\"]\n\nif __name__ == \"__main__\":\n    # Build KDTree for DEM data\n    tree = KDTree(dem_slope_df[['Latitude', 'Longitude']].values)\n\n    # Start Dask client for parallel processing\n    client = Client()\n\n    # Convert pandas DataFrames to Dask DataFrames\n    train_ready_ddf = dd.from_pandas(train_ready_df, npartitions=4)\n\n    # Apply the 'replace_slope' function to calculate and replace slope values in the DataFrame\n    print(\"start to correct slope\")\n    train_ready_ddf['slope'] = train_ready_ddf.map_partitions(lambda df: df.apply(replace_slope, args=(tree, dem_slope_df)), meta=('slope', 'float64')).compute(scheduler='distributed')\n\n    print(\"finished correcting slope\")\n    print(train_ready_ddf.head())\n    print(train_ready_ddf.columns)\n\n    new_result_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv'\n    print(f\"saving the correct data into {new_result_csv_path}\")\n    # Save the modified DataFrame to a new CSV file\n    train_ready_ddf.to_csv(new_result_csv_path, index=False)\n    print(f\"The new slope corrected dataframe is saved to {new_result_csv_path}\")\n\n    # Close the Dask client\n    client.close()\n",
  "history_output" : "today date = 2024-05-04\n2024-05-01\ntest start date:  2024-05-01\ntest end date:  2023-10-11\n/home/chetana\n/home/chetana/gw-workspace/cDLzl1mt0NwA/correct_slope.py:12: DtypeWarning: Columns (4) have mixed types. Specify dtype option on import or set low_memory=False.\n  train_ready_df = pd.read_csv(ready_csv_path)\n         date        lat         lon  ...  Northness  Eastness  fsca\n0  2018-01-01  25.030476 -107.762452  ...  -0.353829 -0.748759   NaN\n1  2018-01-01  25.046597 -105.686771  ...  -0.266138  0.766098   NaN\n2  2018-01-01  25.054371 -105.621360  ...   0.620411 -0.610461   NaN\n3  2018-01-01  25.063428 -105.671338  ...  -0.537485  0.676551   NaN\n4  2018-01-01  25.069645 -102.272098  ...   0.772309  0.222141   NaN\n[5 rows x 24 columns]\n   Latitude  Longitude  x  y   Slope\n0      49.0   -125.000  0  0 -9999.0\n1      49.0   -124.964  1  0 -9999.0\n2      49.0   -124.928  2  0 -9999.0\n3      49.0   -124.892  3  0 -9999.0\n4      49.0   -124.856  4  0 -9999.0\nall train.csv columns:  Index(['date', 'lat', 'lon', 'AMSR_SWE', 'station_name', 'swe_value',\n       'change_in_swe_inch', 'snow_depth', 'air_temperature_observed_f',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'fsca'],\n      dtype='object')\nall dem slope columns:  Index(['Latitude', 'Longitude', 'x', 'y', 'Slope'], dtype='object')\n/home/chetana/gw-workspace/cDLzl1mt0NwA/correct_slope.py:12: DtypeWarning: Columns (4) have mixed types. Specify dtype option on import or set low_memory=False.\n  train_ready_df = pd.read_csv(ready_csv_path)\n/home/chetana/gw-workspace/cDLzl1mt0NwA/correct_slope.py:12: DtypeWarning: Columns (4) have mixed types. Specify dtype option on import or set low_memory=False.\n  train_ready_df = pd.read_csv(ready_csv_path)\n/home/chetana/gw-workspace/cDLzl1mt0NwA/correct_slope.py:12: DtypeWarning: Columns (4) have mixed types. Specify dtype option on import or set low_memory=False.\n  train_ready_df = pd.read_csv(ready_csv_path)\n/home/chetana/gw-workspace/cDLzl1mt0NwA/correct_slope.py:12: DtypeWarning: Columns (4) have mixed types. Specify dtype option on import or set low_memory=False.\n  train_ready_df = pd.read_csv(ready_csv_path)\n/home/chetana/gw-workspace/cDLzl1mt0NwA/correct_slope.py:12: DtypeWarning: Columns (4) have mixed types. Specify dtype option on import or set low_memory=False.\n  train_ready_df = pd.read_csv(ready_csv_path)\n/home/chetana/gw-workspace/cDLzl1mt0NwA/correct_slope.py:12: DtypeWarning: Columns (4) have mixed types. Specify dtype option on import or set low_memory=False.\n  train_ready_df = pd.read_csv(ready_csv_path)\n/home/chetana/gw-workspace/cDLzl1mt0NwA/correct_slope.py:12: DtypeWarning: Columns (4) have mixed types. Specify dtype option on import or set low_memory=False.\n  train_ready_df = pd.read_csv(ready_csv_path)\n/home/chetana/gw-workspace/cDLzl1mt0NwA/correct_slope.py:12: DtypeWarning: Columns (4) have mixed types. Specify dtype option on import or set low_memory=False.\n  train_ready_df = pd.read_csv(ready_csv_path)\nstart to correct slope\n/home/chetana/anaconda3/lib/python3.9/site-packages/distributed/client.py:3149: UserWarning: Sending large graph of size 2.67 GiB.\nThis may cause some slowdown.\nConsider scattering data ahead of time and using futures.\n  warnings.warn(\n2024-05-04 07:32:10,767 - distributed.protocol.core - CRITICAL - Failed to deserialize\nTraceback (most recent call last):\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/distributed/protocol/core.py\", line 158, in loads\n    return msgpack.loads(\n  File \"msgpack/_unpacker.pyx\", line 194, in msgpack._cmsgpack.unpackb\nValueError: 2861556745 exceeds max_bin_len(2147483647)\n2024-05-04 07:32:11,282 - distributed.core - ERROR - Exception while handling op register-client\nTraceback (most recent call last):\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/distributed/core.py\", line 921, in _handle_comm\n    result = await result\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/distributed/scheduler.py\", line 5490, in add_client\n    await self.handle_stream(comm=comm, extra={\"client\": client})\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/distributed/core.py\", line 974, in handle_stream\n    msgs = await comm.read()\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/distributed/comm/tcp.py\", line 253, in read\n    msg = await from_frames(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/distributed/comm/utils.py\", line 100, in from_frames\n    res = _from_frames()\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/distributed/comm/utils.py\", line 83, in _from_frames\n    return protocol.loads(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/distributed/protocol/core.py\", line 158, in loads\n    return msgpack.loads(\n  File \"msgpack/_unpacker.pyx\", line 194, in msgpack._cmsgpack.unpackb\nValueError: 2861556745 exceeds max_bin_len(2147483647)\nTask exception was never retrieved\nfuture: <Task finished name='Task-84866' coro=<Server._handle_comm() done, defined at /home/chetana/anaconda3/lib/python3.9/site-packages/distributed/core.py:827> exception=ValueError('2861556745 exceeds max_bin_len(2147483647)')>\nTraceback (most recent call last):\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/distributed/core.py\", line 921, in _handle_comm\n    result = await result\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/distributed/scheduler.py\", line 5490, in add_client\n    await self.handle_stream(comm=comm, extra={\"client\": client})\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/distributed/core.py\", line 974, in handle_stream\n    msgs = await comm.read()\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/distributed/comm/tcp.py\", line 253, in read\n    msg = await from_frames(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/distributed/comm/utils.py\", line 100, in from_frames\n    res = _from_frames()\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/distributed/comm/utils.py\", line 83, in _from_frames\n    return protocol.loads(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/distributed/protocol/core.py\", line 158, in loads\n    return msgpack.loads(\n  File \"msgpack/_unpacker.pyx\", line 194, in msgpack._cmsgpack.unpackb\nValueError: 2861556745 exceeds max_bin_len(2147483647)\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/cDLzl1mt0NwA/correct_slope.py\", line 51, in <module>\n    train_ready_ddf['slope'] = train_ready_ddf.map_partitions(lambda df: df.apply(replace_slope, args=(tree, dem_slope_df)), meta=('slope', 'float64')).compute(scheduler='distributed')\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/dask/base.py\", line 342, in compute\n    (result,) = compute(self, traverse=False, **kwargs)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/dask/base.py\", line 628, in compute\n    results = schedule(dsk, keys, **kwargs)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/distributed/client.py\", line 2254, in _gather\n    raise exc\nconcurrent.futures._base.CancelledError: ('lambda-b93cf1612b27ed85243970cbc5511bb8', 0)\ntoday date = 2024-05-04\n2024-05-01\ntest start date:  2024-05-01\ntest end date:  2023-10-11\n/home/chetana\n         date        lat         lon  ...  Northness  Eastness  fsca\n0  2018-01-01  25.030476 -107.762452  ...  -0.353829 -0.748759   NaN\n1  2018-01-01  25.046597 -105.686771  ...  -0.266138  0.766098   NaN\n2  2018-01-01  25.054371 -105.621360  ...   0.620411 -0.610461   NaN\n3  2018-01-01  25.063428 -105.671338  ...  -0.537485  0.676551   NaN\n4  2018-01-01  25.069645 -102.272098  ...   0.772309  0.222141   NaN\n[5 rows x 24 columns]\n   Latitude  Longitude  x  y   Slope\n0      49.0   -125.000  0  0 -9999.0\n1      49.0   -124.964  1  0 -9999.0\n2      49.0   -124.928  2  0 -9999.0\n3      49.0   -124.892  3  0 -9999.0\n4      49.0   -124.856  4  0 -9999.0\nall train.csv columns:  Index(['date', 'lat', 'lon', 'AMSR_SWE', 'station_name', 'swe_value',\n       'change_in_swe_inch', 'snow_depth', 'air_temperature_observed_f',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'fsca'],\n      dtype='object')\nall dem slope columns:  Index(['Latitude', 'Longitude', 'x', 'y', 'Slope'], dtype='object')\ntoday date = 2024-05-04\n2024-05-01\ntest start date:  2024-05-01\ntest end date:  2023-10-11\n/home/chetana\n         date        lat         lon  ...  Northness  Eastness  fsca\n0  2018-01-01  25.030476 -107.762452  ...  -0.353829 -0.748759   NaN\n1  2018-01-01  25.046597 -105.686771  ...  -0.266138  0.766098   NaN\n2  2018-01-01  25.054371 -105.621360  ...   0.620411 -0.610461   NaN\n3  2018-01-01  25.063428 -105.671338  ...  -0.537485  0.676551   NaN\n4  2018-01-01  25.069645 -102.272098  ...   0.772309  0.222141   NaN\n[5 rows x 24 columns]\n   Latitude  Longitude  x  y   Slope\n0      49.0   -125.000  0  0 -9999.0\n1      49.0   -124.964  1  0 -9999.0\n2      49.0   -124.928  2  0 -9999.0\n3      49.0   -124.892  3  0 -9999.0\n4      49.0   -124.856  4  0 -9999.0\nall train.csv columns:  Index(['date', 'lat', 'lon', 'AMSR_SWE', 'station_name', 'swe_value',\n       'change_in_swe_inch', 'snow_depth', 'air_temperature_observed_f',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'fsca'],\n      dtype='object')\nall dem slope columns:  Index(['Latitude', 'Longitude', 'x', 'y', 'Slope'], dtype='object')\ntoday date = 2024-05-04\n2024-05-01\ntest start date:  2024-05-01\ntest end date:  2023-10-11\n/home/chetana\n         date        lat         lon  ...  Northness  Eastness  fsca\n0  2018-01-01  25.030476 -107.762452  ...  -0.353829 -0.748759   NaN\n1  2018-01-01  25.046597 -105.686771  ...  -0.266138  0.766098   NaN\n2  2018-01-01  25.054371 -105.621360  ...   0.620411 -0.610461   NaN\n3  2018-01-01  25.063428 -105.671338  ...  -0.537485  0.676551   NaN\n4  2018-01-01  25.069645 -102.272098  ...   0.772309  0.222141   NaN\n[5 rows x 24 columns]\n   Latitude  Longitude  x  y   Slope\n0      49.0   -125.000  0  0 -9999.0\n1      49.0   -124.964  1  0 -9999.0\n2      49.0   -124.928  2  0 -9999.0\n3      49.0   -124.892  3  0 -9999.0\n4      49.0   -124.856  4  0 -9999.0\nall train.csv columns:  Index(['date', 'lat', 'lon', 'AMSR_SWE', 'station_name', 'swe_value',\n       'change_in_swe_inch', 'snow_depth', 'air_temperature_observed_f',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'fsca'],\n      dtype='object')\nall dem slope columns:  Index(['Latitude', 'Longitude', 'x', 'y', 'Slope'], dtype='object')\ntoday date = 2024-05-04\n2024-05-01\ntest start date:  2024-05-01\ntest end date:  2023-10-11\n/home/chetana\n         date        lat         lon  ...  Northness  Eastness  fsca\n0  2018-01-01  25.030476 -107.762452  ...  -0.353829 -0.748759   NaN\n1  2018-01-01  25.046597 -105.686771  ...  -0.266138  0.766098   NaN\n2  2018-01-01  25.054371 -105.621360  ...   0.620411 -0.610461   NaN\n3  2018-01-01  25.063428 -105.671338  ...  -0.537485  0.676551   NaN\n4  2018-01-01  25.069645 -102.272098  ...   0.772309  0.222141   NaN\n[5 rows x 24 columns]\n   Latitude  Longitude  x  y   Slope\n0      49.0   -125.000  0  0 -9999.0\n1      49.0   -124.964  1  0 -9999.0\n2      49.0   -124.928  2  0 -9999.0\n3      49.0   -124.892  3  0 -9999.0\n4      49.0   -124.856  4  0 -9999.0\nall train.csv columns:  Index(['date', 'lat', 'lon', 'AMSR_SWE', 'station_name', 'swe_value',\n       'change_in_swe_inch', 'snow_depth', 'air_temperature_observed_f',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'fsca'],\n      dtype='object')\nall dem slope columns:  Index(['Latitude', 'Longitude', 'x', 'y', 'Slope'], dtype='object')\ntoday date = 2024-05-04\n2024-05-01\ntest start date:  2024-05-01\ntest end date:  2023-10-11\n/home/chetana\n         date        lat         lon  ...  Northness  Eastness  fsca\n0  2018-01-01  25.030476 -107.762452  ...  -0.353829 -0.748759   NaN\n1  2018-01-01  25.046597 -105.686771  ...  -0.266138  0.766098   NaN\n2  2018-01-01  25.054371 -105.621360  ...   0.620411 -0.610461   NaN\n3  2018-01-01  25.063428 -105.671338  ...  -0.537485  0.676551   NaN\n4  2018-01-01  25.069645 -102.272098  ...   0.772309  0.222141   NaN\n[5 rows x 24 columns]\n   Latitude  Longitude  x  y   Slope\n0      49.0   -125.000  0  0 -9999.0\n1      49.0   -124.964  1  0 -9999.0\n2      49.0   -124.928  2  0 -9999.0\n3      49.0   -124.892  3  0 -9999.0\n4      49.0   -124.856  4  0 -9999.0\nall train.csv columns:  Index(['date', 'lat', 'lon', 'AMSR_SWE', 'station_name', 'swe_value',\n       'change_in_swe_inch', 'snow_depth', 'air_temperature_observed_f',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'fsca'],\n      dtype='object')\nall dem slope columns:  Index(['Latitude', 'Longitude', 'x', 'y', 'Slope'], dtype='object')\ntoday date = 2024-05-04\n2024-05-01\ntest start date:  2024-05-01\ntest end date:  2023-10-11\n/home/chetana\n         date        lat         lon  ...  Northness  Eastness  fsca\n0  2018-01-01  25.030476 -107.762452  ...  -0.353829 -0.748759   NaN\n1  2018-01-01  25.046597 -105.686771  ...  -0.266138  0.766098   NaN\n2  2018-01-01  25.054371 -105.621360  ...   0.620411 -0.610461   NaN\n3  2018-01-01  25.063428 -105.671338  ...  -0.537485  0.676551   NaN\n4  2018-01-01  25.069645 -102.272098  ...   0.772309  0.222141   NaN\n[5 rows x 24 columns]\n   Latitude  Longitude  x  y   Slope\n0      49.0   -125.000  0  0 -9999.0\n1      49.0   -124.964  1  0 -9999.0\n2      49.0   -124.928  2  0 -9999.0\n3      49.0   -124.892  3  0 -9999.0\n4      49.0   -124.856  4  0 -9999.0\nall train.csv columns:  Index(['date', 'lat', 'lon', 'AMSR_SWE', 'station_name', 'swe_value',\n       'change_in_swe_inch', 'snow_depth', 'air_temperature_observed_f',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'fsca'],\n      dtype='object')\nall dem slope columns:  Index(['Latitude', 'Longitude', 'x', 'y', 'Slope'], dtype='object')\ntoday date = 2024-05-04\n2024-05-01\ntest start date:  2024-05-01\ntest end date:  2023-10-11\n/home/chetana\n         date        lat         lon  ...  Northness  Eastness  fsca\n0  2018-01-01  25.030476 -107.762452  ...  -0.353829 -0.748759   NaN\n1  2018-01-01  25.046597 -105.686771  ...  -0.266138  0.766098   NaN\n2  2018-01-01  25.054371 -105.621360  ...   0.620411 -0.610461   NaN\n3  2018-01-01  25.063428 -105.671338  ...  -0.537485  0.676551   NaN\n4  2018-01-01  25.069645 -102.272098  ...   0.772309  0.222141   NaN\n[5 rows x 24 columns]\n   Latitude  Longitude  x  y   Slope\n0      49.0   -125.000  0  0 -9999.0\n1      49.0   -124.964  1  0 -9999.0\n2      49.0   -124.928  2  0 -9999.0\n3      49.0   -124.892  3  0 -9999.0\n4      49.0   -124.856  4  0 -9999.0\nall train.csv columns:  Index(['date', 'lat', 'lon', 'AMSR_SWE', 'station_name', 'swe_value',\n       'change_in_swe_inch', 'snow_depth', 'air_temperature_observed_f',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'fsca'],\n      dtype='object')\nall dem slope columns:  Index(['Latitude', 'Longitude', 'x', 'y', 'Slope'], dtype='object')\ntoday date = 2024-05-04\n2024-05-01\ntest start date:  2024-05-01\ntest end date:  2023-10-11\n/home/chetana\n         date        lat         lon  ...  Northness  Eastness  fsca\n0  2018-01-01  25.030476 -107.762452  ...  -0.353829 -0.748759   NaN\n1  2018-01-01  25.046597 -105.686771  ...  -0.266138  0.766098   NaN\n2  2018-01-01  25.054371 -105.621360  ...   0.620411 -0.610461   NaN\n3  2018-01-01  25.063428 -105.671338  ...  -0.537485  0.676551   NaN\n4  2018-01-01  25.069645 -102.272098  ...   0.772309  0.222141   NaN\n[5 rows x 24 columns]\n   Latitude  Longitude  x  y   Slope\n0      49.0   -125.000  0  0 -9999.0\n1      49.0   -124.964  1  0 -9999.0\n2      49.0   -124.928  2  0 -9999.0\n3      49.0   -124.892  3  0 -9999.0\n4      49.0   -124.856  4  0 -9999.0\nall train.csv columns:  Index(['date', 'lat', 'lon', 'AMSR_SWE', 'station_name', 'swe_value',\n       'change_in_swe_inch', 'snow_depth', 'air_temperature_observed_f',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'fsca'],\n      dtype='object')\nall dem slope columns:  Index(['Latitude', 'Longitude', 'x', 'y', 'Slope'], dtype='object')\n2024-05-04 07:32:15,052 - distributed.nanny - WARNING - Worker process still alive after 3.1999995422363288 seconds, killing\n2024-05-04 07:32:15,183 - distributed.nanny - WARNING - Worker process still alive after 3.1999995422363288 seconds, killing\n",
  "history_begin_time" : 1714805795339,
  "history_end_time" : 1714807955840,
  "history_notes" : "use kdtree and dask together",
  "history_process" : "ee5ur4",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "m2f9xMu05kkZ",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\n\nready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted.csv'\ndem_slope_csv_path = f\"{work_dir}/slope_file.tif.csv\"\n\n# Read the cleaned ready CSV and DEM slope CSV\ntrain_ready_df = pd.read_csv(ready_csv_path)\ndem_slope_df = pd.read_csv(dem_slope_csv_path)\n\nprint(train_ready_df.head())\nprint(dem_slope_df.head())\n\nprint(\"all train.csv columns: \", train_ready_df.columns)\nprint(\"all dem slope columns: \", dem_slope_df.columns)\n\ndef replace_slope(row):\n    '''\n    Replace the 'slope' column in the input DataFrame row with the closest slope value from the DEM data.\n\n    Args:\n        row (pandas.Series): A row of data containing 'lat' and 'lon' columns.\n\n    Returns:\n        float: The closest slope value from the DEM data for the given latitude and longitude.\n    '''\n    target_lat = row[\"lat\"]\n    target_lon = row[\"lon\"]\n    # Calculate the squared distance to find the closest DEM point\n    dem_slope_df['Distance'] = (dem_slope_df['Latitude'] - target_lat) ** 2 + (dem_slope_df['Longitude'] - target_lon) ** 2\n    closest_row = dem_slope_df.loc[dem_slope_df['Distance'].idxmin()]\n    return closest_row[\"Slope\"]\n\n\nif __name__ == \"__main__\":\n    # Apply the 'replace_slope' function to calculate and replace slope values in the DataFrame\n    print(\"start to correct slope\")\n    train_ready_df['slope'] = train_ready_df.apply(lambda row: replace_slope(row), axis=1)\n\n    print(\"finished correcting slope\")\n    print(train_ready_df.head())\n    print(train_ready_df.columns)\n\n    new_result_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv'\n    print(f\"saving the correct data into {new_result_csv_path}\")\n    # Save the modified DataFrame to a new CSV file\n    train_ready_df.to_csv(new_result_csv_path, index=False)\n    print(f\"The new slope corrected dataframe is saved to {new_result_csv_path}\")\n",
  "history_output" : "today date = 2024-05-02\n2024-04-29\ntest start date:  2024-04-29\ntest end date:  2023-10-11\n/home/chetana\n/home/chetana/gw-workspace/m2f9xMu05kkZ/correct_slope.py:9: DtypeWarning: Columns (4) have mixed types. Specify dtype option on import or set low_memory=False.\n  train_ready_df = pd.read_csv(ready_csv_path)\n         date        lat         lon  ...  Northness  Eastness  fsca\n0  2018-01-01  25.030476 -107.762452  ...  -0.353829 -0.748759   NaN\n1  2018-01-01  25.046597 -105.686771  ...  -0.266138  0.766098   NaN\n2  2018-01-01  25.054371 -105.621360  ...   0.620411 -0.610461   NaN\n3  2018-01-01  25.063428 -105.671338  ...  -0.537485  0.676551   NaN\n4  2018-01-01  25.069645 -102.272098  ...   0.772309  0.222141   NaN\n[5 rows x 24 columns]\n   Latitude  Longitude  x  y   Slope\n0      49.0   -125.000  0  0 -9999.0\n1      49.0   -124.964  1  0 -9999.0\n2      49.0   -124.928  2  0 -9999.0\n3      49.0   -124.892  3  0 -9999.0\n4      49.0   -124.856  4  0 -9999.0\nall train.csv columns:  Index(['date', 'lat', 'lon', 'AMSR_SWE', 'station_name', 'swe_value',\n       'change_in_swe_inch', 'snow_depth', 'air_temperature_observed_f',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'fsca'],\n      dtype='object')\nall dem slope columns:  Index(['Latitude', 'Longitude', 'x', 'y', 'Slope'], dtype='object')\nstart to correct slope\n",
  "history_begin_time" : 1714687137573,
  "history_end_time" : 1714805882809,
  "history_notes" : "this is extremely slow. try to find ways to accelerate",
  "history_process" : "ee5ur4",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "C6caC0QWq0rZ",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\n\nready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted.csv'\ndem_slope_csv_path = f\"{work_dir}/slope_file.tif.csv\"\n\n# Read the cleaned ready CSV and DEM slope CSV\ntrain_ready_df = pd.read_csv(ready_csv_path)\ndem_slope_df = pd.read_csv(dem_slope_csv_path)\n\nprint(train_ready_df.head())\nprint(dem_slope_df.head())\n\nprint(\"all train.csv columns: \", train_ready_df.columns)\nprint(\"all dem slope columns: \", dem_slope_df.columns)\n\ndef replace_slope(row):\n    '''\n    Replace the 'slope' column in the input DataFrame row with the closest slope value from the DEM data.\n\n    Args:\n        row (pandas.Series): A row of data containing 'lat' and 'lon' columns.\n\n    Returns:\n        float: The closest slope value from the DEM data for the given latitude and longitude.\n    '''\n    target_lat = row[\"lat\"]\n    target_lon = row[\"lon\"]\n    # Calculate the squared distance to find the closest DEM point\n    dem_slope_df['Distance'] = (dem_slope_df['Latitude'] - target_lat) ** 2 + (dem_slope_df['Longitude'] - target_lon) ** 2\n    closest_row = dem_slope_df.loc[dem_slope_df['Distance'].idxmin()]\n    return closest_row[\"Slope\"]\n\n\nif __name__ == \"__main__\":\n    # Apply the 'replace_slope' function to calculate and replace slope values in the DataFrame\n    print(\"start to correct slope\")\n    train_ready_df['slope'] = train_ready_df.apply(lambda row: replace_slope(row), axis=1)\n\n    print(\"finished correcting slope\")\n    print(train_ready_df.head())\n    print(train_ready_df.columns)\n\n    new_result_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv'\n\tprint(f\"saving the correct data into {new_result_csv_path}\")\n    # Save the modified DataFrame to a new CSV file\n    train_ready_df.to_csv(new_result_csv_path, index=False)\n    print(f\"The new slope corrected dataframe is saved to {new_result_csv_path}\")\n",
  "history_output" : "  File \"/home/chetana/gw-workspace/C6caC0QWq0rZ/correct_slope.py\", line 46\n    print(f\"saving the correct data into {new_result_csv_path}\")\nTabError: inconsistent use of tabs and spaces in indentation\n",
  "history_begin_time" : 1714681440635,
  "history_end_time" : 1714681441116,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "t9UluUSfjtSj",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\n\nready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted.csv'\ndem_slope_csv_path = f\"{work_dir}/slope_file.tif.csv\"\n\n# Read the cleaned ready CSV and DEM slope CSV\ntrain_ready_df = pd.read_csv(ready_csv_path)\ndem_slope_df = pd.read_csv(dem_slope_csv_path)\n\nprint(train_ready_df.head())\nprint(dem_slope_df.head())\n\nprint(\"all train.csv columns: \", train_ready_df.columns)\nprint(\"all dem slope columns: \", dem_slope_df.columns)\n\ndef replace_slope(row):\n    '''\n    Replace the 'slope' column in the input DataFrame row with the closest slope value from the DEM data.\n\n    Args:\n        row (pandas.Series): A row of data containing 'lat' and 'lon' columns.\n\n    Returns:\n        float: The closest slope value from the DEM data for the given latitude and longitude.\n    '''\n    target_lat = row[\"lat\"]\n    target_lon = row[\"lon\"]\n    # Calculate the squared distance to find the closest DEM point\n    dem_slope_df['Distance'] = (dem_slope_df['Latitude'] - target_lat) ** 2 + (dem_slope_df['Longitude'] - target_lon) ** 2\n    closest_row = dem_slope_df.loc[dem_slope_df['Distance'].idxmin()]\n    return closest_row[\"Slope\"]\n\n\nif __name__ == \"__main__\":\n    # Apply the 'replace_slope' function to calculate and replace slope values in the DataFrame\n    train_ready_df['slope'] = train_ready_df.apply(lambda row: replace_slope(row), axis=1)\n\n    print(train_ready_df.head())\n    print(train_ready_df.columns)\n\n    new_result_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv'\n\n    # Save the modified DataFrame to a new CSV file\n    train_ready_df.to_csv(new_result_csv_path, index=False)\n    print(f\"The new slope corrected dataframe is saved to {new_result_csv_path}\")\n",
  "history_output" : "today date = 2024-05-02\n2024-04-29\ntest start date:  2024-04-29\ntest end date:  2023-10-11\n/home/chetana\n/home/chetana/gw-workspace/t9UluUSfjtSj/correct_slope.py:9: DtypeWarning: Columns (4) have mixed types. Specify dtype option on import or set low_memory=False.\n  train_ready_df = pd.read_csv(ready_csv_path)\n         date        lat         lon  ...  Northness  Eastness  fsca\n0  2018-01-01  25.030476 -107.762452  ...  -0.353829 -0.748759   NaN\n1  2018-01-01  25.046597 -105.686771  ...  -0.266138  0.766098   NaN\n2  2018-01-01  25.054371 -105.621360  ...   0.620411 -0.610461   NaN\n3  2018-01-01  25.063428 -105.671338  ...  -0.537485  0.676551   NaN\n4  2018-01-01  25.069645 -102.272098  ...   0.772309  0.222141   NaN\n[5 rows x 24 columns]\n   Latitude  Longitude  x  y   Slope\n0      49.0   -125.000  0  0 -9999.0\n1      49.0   -124.964  1  0 -9999.0\n2      49.0   -124.928  2  0 -9999.0\n3      49.0   -124.892  3  0 -9999.0\n4      49.0   -124.856  4  0 -9999.0\nall train.csv columns:  Index(['date', 'lat', 'lon', 'AMSR_SWE', 'station_name', 'swe_value',\n       'change_in_swe_inch', 'snow_depth', 'air_temperature_observed_f',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'fsca'],\n      dtype='object')\nall dem slope columns:  Index(['Latitude', 'Longitude', 'x', 'y', 'Slope'], dtype='object')\n",
  "history_begin_time" : 1714667605452,
  "history_end_time" : 1714681363583,
  "history_notes" : "corrected slope is so slow",
  "history_process" : "ee5ur4",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "tfhn0kgngu7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714409076792,
  "history_end_time" : 1714409076792,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "tr2ug2jq0pq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714407283850,
  "history_end_time" : 1714407283850,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "3x4eh8r8umw",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714404800134,
  "history_end_time" : 1714404800134,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ct942qgt51b",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714363210288,
  "history_end_time" : 1714363210288,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "8nyu6q6xsab",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714362032721,
  "history_end_time" : 1714362032721,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "s7u96bjjf9s",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714355595258,
  "history_end_time" : 1714355595258,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "tftrij55u8l",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714351396913,
  "history_end_time" : 1714351396913,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "f915hhy63m2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714348539316,
  "history_end_time" : 1714348539316,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "rkxpzs35maz",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714345973287,
  "history_end_time" : 1714345973287,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "dvo42kjvgt5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714343583906,
  "history_end_time" : 1714343583906,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "zs78tq51bz3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714340841829,
  "history_end_time" : 1714340841829,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "zn69zb39tne",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714332798198,
  "history_end_time" : 1714332798198,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "yx9yhi1bx52",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714328816237,
  "history_end_time" : 1714328816237,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "rmzbqjodggy",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714323529113,
  "history_end_time" : 1714323529113,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "klpkcubx0z9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714320354976,
  "history_end_time" : 1714320354976,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "n22emuog82s",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714315863139,
  "history_end_time" : 1714315863139,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "fazm2ti62q1",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714283543377,
  "history_end_time" : 1714315862069,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "se1rd5b7bp1",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714281870996,
  "history_end_time" : 1714283515040,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "6mvlknk1yes",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714276838475,
  "history_end_time" : 1714315876917,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "ycep06ub21u",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714274662765,
  "history_end_time" : 1714281869552,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "cxiy9urt5iw",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714272894755,
  "history_end_time" : 1714274352452,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "5z21rmcz6p8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714265253462,
  "history_end_time" : 1714272892784,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "kn49nt1yp61",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714265112671,
  "history_end_time" : 1714265250945,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "ildw49zpb87",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714192736420,
  "history_end_time" : 1714265111667,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "2b71m2s7j4h",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714190418435,
  "history_end_time" : 1714274351055,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "a8aqd0pw1u5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714104009598,
  "history_end_time" : 1714274350453,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "dw5c128ik36",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714017609931,
  "history_end_time" : 1714274349939,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "4stxcglj7tp",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1713931210236,
  "history_end_time" : 1714274349396,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "wiujwv8nme8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1713844809914,
  "history_end_time" : 1714274348794,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "m9qzoioh3br",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1713758409491,
  "history_end_time" : 1714274347360,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "ji7lvyld124",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1713672009938,
  "history_end_time" : 1714274346368,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "xo2tjhtfjd3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1713585609756,
  "history_end_time" : 1714274345855,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "hvzdtbv2bvm",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1713499209954,
  "history_end_time" : 1714274345301,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "qyet7tf0g4r",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1713412809188,
  "history_end_time" : 1714274344728,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "hmem5wpkpfx",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1713326409318,
  "history_end_time" : 1714274343305,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "qbekb5quns0",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1713283461356,
  "history_end_time" : 1713283461356,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "uhs2phdg3b2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1713240009281,
  "history_end_time" : 1714274342601,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "6po7prw571j",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1711771209915,
  "history_end_time" : 1711771209915,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "20uvz0mkofn",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1711684813938,
  "history_end_time" : 1714282476123,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "zpr2aka0y1a",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1711598415361,
  "history_end_time" : 1714282474715,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "ynnzv18k33o",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1711592280535,
  "history_end_time" : 1711592280535,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "nz456r1zxzf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1711592081949,
  "history_end_time" : 1711592081949,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "ev9x28jkfal",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1711512016666,
  "history_end_time" : 1711512016666,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "yv218oijjh7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1711425614430,
  "history_end_time" : 1714282483205,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "8zgzoeg79k5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1711339212968,
  "history_end_time" : 1714282483870,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "ri8v5zwoa08",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1711252813750,
  "history_end_time" : 1711252813750,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "7fr30cuyt08",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1711166414354,
  "history_end_time" : 1711166414354,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "923xvnyxqeb",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1711080009335,
  "history_end_time" : 1711080009335,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "2mbk2m0u0wa",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710993609982,
  "history_end_time" : 1714282484656,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "1j9uj48y4la",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710907209416,
  "history_end_time" : 1714282485303,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "n19ed1gmc6s",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710820809084,
  "history_end_time" : 1714282486310,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "2vcsfml0t0l",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710734409807,
  "history_end_time" : 1714282486976,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "njisqnj1pjg",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710690214213,
  "history_end_time" : 1710690214213,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "n2r7xa262pr",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710648009504,
  "history_end_time" : 1714282488983,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "g7gtdatbl4l",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710561608973,
  "history_end_time" : 1714282489556,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "47ls2bbjfnw",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710475209581,
  "history_end_time" : 1714282490330,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "2urq157m22e",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710388809567,
  "history_end_time" : 1714282490852,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "nz7z2gqma1j",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710302409655,
  "history_end_time" : 1714282491525,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "jyq3nze9iy5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710216009732,
  "history_end_time" : 1714282492143,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "tqgkc8hezfp",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710172046542,
  "history_end_time" : 1710172046542,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "yfjpaewy8qo",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710129609399,
  "history_end_time" : 1714282493755,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "nvqou32w28i",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710080234078,
  "history_end_time" : 1710080234078,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "zv9rh6k8enp",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710043209039,
  "history_end_time" : 1714282495098,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "allghe9ymsl",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709998716300,
  "history_end_time" : 1709998716300,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "6nn9zj3ijgl",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709956809320,
  "history_end_time" : 1714282495739,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "z9fd3amnr3x",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709924987606,
  "history_end_time" : 1709924987606,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "kd3efxwqqvp",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709870410325,
  "history_end_time" : 1714282496861,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "mmghuemd4bv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709845595333,
  "history_end_time" : 1709845595333,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "joso5t3px9j",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709844621982,
  "history_end_time" : 1709844621982,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "xsasqd2q9t6",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709842923407,
  "history_end_time" : 1709842923407,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "4x7vkyf2ros",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709827652626,
  "history_end_time" : 1709844621187,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "mht6u8bwia6",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709826138719,
  "history_end_time" : 1709826138719,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "adrsxeq3wkr",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709797240858,
  "history_end_time" : 1709797240858,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "t1f2yoegxee",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709791538006,
  "history_end_time" : 1709791538006,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "7auxzj8f83a",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709784009795,
  "history_end_time" : 1714282504746,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "3lkipud7yjn",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709778056678,
  "history_end_time" : 1709778056678,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "2dvobok9pbh",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709774843631,
  "history_end_time" : 1709774843631,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "xzwhxchujcf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709765244690,
  "history_end_time" : 1709774842951,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "ufuwg2mbuqf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709763117643,
  "history_end_time" : 1709765243450,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "ant705jnqw5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709751527397,
  "history_end_time" : 1709751527397,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "kbtoooecl9v",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709751443202,
  "history_end_time" : 1709751495340,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "py6jjoo72s7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709697609618,
  "history_end_time" : 1714282506692,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "f1mub6fxwhv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709611209031,
  "history_end_time" : 1714282507225,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "3hxap642auu",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709524809221,
  "history_end_time" : 1714282507737,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "q1hqugh43rg",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709438409005,
  "history_end_time" : 1709438409005,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "99y7f1q3cau",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709352009391,
  "history_end_time" : 1709352009391,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "gyd2xsgy2dq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709265609764,
  "history_end_time" : 1709265609764,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "bq4ctxiihom",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709179209722,
  "history_end_time" : 1709179209722,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "xzkm68h4hqx",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709137312991,
  "history_end_time" : 1709137312991,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "571oitmm14o",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709092809327,
  "history_end_time" : 1709092809327,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "zeo76h6rt2j",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709085684227,
  "history_end_time" : 1709085684227,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "30yfffb27c0",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709078942168,
  "history_end_time" : 1709085672814,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "8drjlv",
  "indicator" : "Stopped"
},{
  "history_id" : "pro1r6stvwh",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709038894875,
  "history_end_time" : 1709038894875,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "ldr4e1mn0x1",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709038872999,
  "history_end_time" : 1709038879074,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "8drjlv",
  "indicator" : "Stopped"
},{
  "history_id" : "xc7ol5o5jy7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709006408930,
  "history_end_time" : 1709006408930,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "81busz590ym",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708971826228,
  "history_end_time" : 1708971826228,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "77eulobwy3c",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708958410899,
  "history_end_time" : 1708958410899,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "l7qo0ocyn4o",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708954624230,
  "history_end_time" : 1708954624230,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "c3enwz0mt3n",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708920009750,
  "history_end_time" : 1708920009750,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "a5q6ceoacx5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708833609438,
  "history_end_time" : 1708833609438,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "jhja9t0y636",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708747209190,
  "history_end_time" : 1708747209190,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "vz5x9o0hy7t",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708660809313,
  "history_end_time" : 1708660809313,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "pziqrc7idec",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708574409987,
  "history_end_time" : 1708574409987,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "1udw74b52ob",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708488010492,
  "history_end_time" : 1708488010492,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "gs2dpw8dpa2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708401609221,
  "history_end_time" : 1708401609221,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "oa4z2de6zby",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708352215566,
  "history_end_time" : 1708352215566,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "5nj4euijp9m",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708348193306,
  "history_end_time" : 1708352214877,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "8drjlv",
  "indicator" : "Stopped"
},{
  "history_id" : "1thkq2uhbo7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708315209372,
  "history_end_time" : 1708315209372,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "scavqzmvsc4",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708312689980,
  "history_end_time" : 1708312689980,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "rk3r1krcin1",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708305309947,
  "history_end_time" : 1708312689140,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "8drjlv",
  "indicator" : "Stopped"
},{
  "history_id" : "p2i85erqaw8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708242679330,
  "history_end_time" : 1708242679330,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "jxp3teaa0me",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708240733542,
  "history_end_time" : 1708240733542,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "jljz0ectpfx",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708238770022,
  "history_end_time" : 1708238770022,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "yb830vu0nbe",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708237144905,
  "history_end_time" : 1708237144905,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "uib89spn8as",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708235187256,
  "history_end_time" : 1708235187256,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "bbadsnc2o4a",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708233874705,
  "history_end_time" : 1708233874705,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "s6ud42609fk",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708228809490,
  "history_end_time" : 1708228809490,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "9o23jpa7t0e",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708227613833,
  "history_end_time" : 1708227613833,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "855cbskvf4i",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708142409698,
  "history_end_time" : 1708142409698,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "7p5b772iqkv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708056009511,
  "history_end_time" : 1708056009511,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "vqskp03jsf2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707969609330,
  "history_end_time" : 1707969609330,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "rpht3ap5bbd",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707883209111,
  "history_end_time" : 1707883209111,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "qy3b923wgp7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707796809620,
  "history_end_time" : 1707796809620,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "m166fld68xl",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707750669783,
  "history_end_time" : 1707750669783,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "k6ps9w24mku",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707710409670,
  "history_end_time" : 1707710409670,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "jtcum85rda9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707624009733,
  "history_end_time" : 1707624009733,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "fats2a65fkp",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707537608897,
  "history_end_time" : 1707537608897,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "1ybflx04cqc",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707491746727,
  "history_end_time" : 1707491746727,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "omiikuxqz98",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707484657962,
  "history_end_time" : 1707484657962,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "y59qkhy6fqg",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707451209956,
  "history_end_time" : 1707451209956,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ducb48nglhc",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707434644208,
  "history_end_time" : 1707434644208,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "32ri2pq0l8w",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707432571826,
  "history_end_time" : 1707432571826,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "olvo9y0rbk6",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707431129264,
  "history_end_time" : 1707432053960,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "8drjlv",
  "indicator" : "Stopped"
},{
  "history_id" : "rghi2utzqz8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707418188663,
  "history_end_time" : 1707418188663,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "mahjd7",
  "indicator" : "Skipped"
},{
  "history_id" : "hxm3xaki76v",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707413610366,
  "history_end_time" : 1707413610366,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "mahjd7",
  "indicator" : "Skipped"
},{
  "history_id" : "jrpkbynlonl",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707364808982,
  "history_end_time" : 1707364808982,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "i3lu3lidmpp",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707278409209,
  "history_end_time" : 1707278409209,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "epey4sb3dko",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707192718899,
  "history_end_time" : 1707192718899,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "cn4d299p9uk",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707192009398,
  "history_end_time" : 1707448888656,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "sswirh76ibc",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707189399142,
  "history_end_time" : 1707189399142,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "fgg8mh1d8ox",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707105609426,
  "history_end_time" : 1707750639196,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "iq8p76mdfxe",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707019209440,
  "history_end_time" : 1707750639666,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "ovnvelvfqik",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706932809321,
  "history_end_time" : 1707750640209,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "w6g8p9odeqy",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706846409796,
  "history_end_time" : 1707750640643,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "lj4q37klxvn",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706760010066,
  "history_end_time" : 1707750643300,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "hkof8gz87g7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706673609593,
  "history_end_time" : 1707750643805,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "5b1cw328e9s",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706587209517,
  "history_end_time" : 1707750644989,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "z12napueznb",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706500809106,
  "history_end_time" : 1707750645665,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "moor3xjo163",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706414409435,
  "history_end_time" : 1707750646110,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "ui4z1ocqyld",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706366105917,
  "history_end_time" : 1706366105917,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "jbmrtt6xnui",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706364888471,
  "history_end_time" : 1706364888471,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "p851q8zzq31",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706328009630,
  "history_end_time" : 1707750646909,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "6ur1mvlyyxv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706280497980,
  "history_end_time" : 1706280497980,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "m22e1p75d5r",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706244881247,
  "history_end_time" : 1706244881247,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "gaoyoz169l8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706241609847,
  "history_end_time" : 1706244810658,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "oqc33ld01rx",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706155209715,
  "history_end_time" : 1706244801319,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "7kenhsksxky",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706068809223,
  "history_end_time" : 1706244800346,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "tknvjf3xj9o",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705982409113,
  "history_end_time" : 1706244799979,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "xr46hp63cm1",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705896759310,
  "history_end_time" : 1706244799015,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "s90kw599rtk",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705896009911,
  "history_end_time" : 1706244798535,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "bqmtza0559b",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705849064159,
  "history_end_time" : 1706244798022,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "dh5fj5uaeod",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705809609053,
  "history_end_time" : 1705849649606,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "17z306cl5si",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705793527212,
  "history_end_time" : 1705849647064,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "wx3lqj1ygmr",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705790835107,
  "history_end_time" : 1705790835107,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "6ygbmk8kjzb",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705770628221,
  "history_end_time" : 1705849642251,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "53v8sfwr21m",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705762761001,
  "history_end_time" : 1705849640895,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "ytsh3ffdu7j",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705723209633,
  "history_end_time" : 1705789738454,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "9iphyp39zqq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705636808940,
  "history_end_time" : 1705770636238,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "u0hphxw9j3c",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705550409419,
  "history_end_time" : 1705770635554,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "bp8hu0zdwve",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705464008996,
  "history_end_time" : 1705770635065,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "bhf4di44ok7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705422422535,
  "history_end_time" : 1705422422535,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "48t5xbq3xqr",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705377609572,
  "history_end_time" : 1705770633060,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "bdc4im0kkbv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705291209198,
  "history_end_time" : 1705770632180,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "tkjf6r3qmhj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705278850595,
  "history_end_time" : 1705278850595,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "apoxox62rkm",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705270952803,
  "history_end_time" : 1705270952803,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "u57cukh0ub2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705204809649,
  "history_end_time" : 1705789662011,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "x32yxxkgvqy",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705169057235,
  "history_end_time" : 1705169057235,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "o2xetwa8ar3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705118409777,
  "history_end_time" : 1705789660779,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "pukiaszjji1",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705072448178,
  "history_end_time" : 1705072448178,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "hcqbgsyv5f0",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705032009636,
  "history_end_time" : 1705789659551,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "lmu4d5b2732",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704979918383,
  "history_end_time" : 1704979918383,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "jivrptjvmgf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704945609773,
  "history_end_time" : 1705789658821,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "ngwqn2sz5nm",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704918977822,
  "history_end_time" : 1704918977822,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "0dcox4z7tvf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704908919849,
  "history_end_time" : 1704908919849,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "wi5ioqb9eb1",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704859207717,
  "history_end_time" : 1705789668265,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "o69dmhp7e1z",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704775840762,
  "history_end_time" : 1704775840762,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "d82wkpxd0i2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704772806930,
  "history_end_time" : 1705789667294,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "3jpfncd2pw5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704726161285,
  "history_end_time" : 1704727049033,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "2scn4igoj6b",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704686408511,
  "history_end_time" : 1705789666652,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "fqqmj51b073",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704644803737,
  "history_end_time" : 1704644803737,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "f1ziib7irph",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704600008348,
  "history_end_time" : 1705789665925,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "5sjy4v457rv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704566156636,
  "history_end_time" : 1704566156636,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "8y6dzifbfvc",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704565587393,
  "history_end_time" : 1704565587393,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "gongf6kb5wm",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704564424169,
  "history_end_time" : 1704564424169,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "5exxdumg982",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704562992190,
  "history_end_time" : 1704562992190,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "bdzs5epn0pc",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704561889808,
  "history_end_time" : 1704561889808,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "1jw412i3kxf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704561861182,
  "history_end_time" : 1704561887042,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "wq6iwr65jwe",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704555479218,
  "history_end_time" : 1704555479218,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "farjqdrqlfg",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704555028209,
  "history_end_time" : 1704555028209,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "eg0ro425h64",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704553241779,
  "history_end_time" : 1704553241779,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "jn2m5o6bwka",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704552254644,
  "history_end_time" : 1704552254644,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "kne9rwujwtb",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704513607497,
  "history_end_time" : 1705789671134,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "41j7sbo3otd",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704427207659,
  "history_end_time" : 1705789671875,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "cjd6byw67v9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704340807684,
  "history_end_time" : 1705789673118,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "rpyvd15iv02",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704330109328,
  "history_end_time" : 1704330109328,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "o2b86ahpi9s",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704329364879,
  "history_end_time" : 1704329364879,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "joaigq0q90c",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704254407667,
  "history_end_time" : 1705789675686,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "2ku91932uj5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704208947967,
  "history_end_time" : 1704208947967,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "kyfwaju91vl",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704207352029,
  "history_end_time" : 1704207352029,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "bhbhh5sx75g",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704205859385,
  "history_end_time" : 1704205859385,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "oge6f3lzi7e",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704168007517,
  "history_end_time" : 1705789676832,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "eju08sijflw",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704081607624,
  "history_end_time" : 1705789677625,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "wfq4lg0iarw",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703995208562,
  "history_end_time" : 1705789678819,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "c23m7l64k7k",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703962871415,
  "history_end_time" : 1703962871415,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "dmw77jvpe87",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703960265454,
  "history_end_time" : 1703960265454,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "w6te3n33kyd",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703959737857,
  "history_end_time" : 1703959737857,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "70vewtaiijz",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703958611601,
  "history_end_time" : 1703958611601,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "4trreebr7gh",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703955838237,
  "history_end_time" : 1703955838237,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "8lbkcj152gh",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703954150389,
  "history_end_time" : 1703954150389,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ukf343p9qv2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703915768082,
  "history_end_time" : 1703915768082,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "bfwb932s1su",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703915283498,
  "history_end_time" : 1703915283498,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "gxg5h13owr6",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703914476654,
  "history_end_time" : 1703914476654,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "49xogtrbtlv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703912302187,
  "history_end_time" : 1703912302187,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "rlh7vt55wsr",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703908807281,
  "history_end_time" : 1705789681238,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "w2tjj3hg2v9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703906215391,
  "history_end_time" : 1703906215391,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "dvnh93ohan3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703900919155,
  "history_end_time" : 1703900919155,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "kxjq0yrj78j",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703899837778,
  "history_end_time" : 1703899837778,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "nq7mefnsaxt",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703897422962,
  "history_end_time" : 1703897422962,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "60yd7wx50mk",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703896125595,
  "history_end_time" : 1703896125595,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "wcqnxanu3nd",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703890276002,
  "history_end_time" : 1703890276002,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "vaj9yg49cr0",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703886800820,
  "history_end_time" : 1703886800820,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "m1b88rqqrf9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703885997778,
  "history_end_time" : 1703885997778,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "9826ou6qbsb",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703880194727,
  "history_end_time" : 1703880194727,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "rz1codhkpkw",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703872753045,
  "history_end_time" : 1703872753045,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "4zkrk4q7n57",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703869828246,
  "history_end_time" : 1703869828246,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "55pik6ih1hl",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703868616943,
  "history_end_time" : 1703868616943,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "6ag9zt62wzq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703867114058,
  "history_end_time" : 1703867114058,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "2xuufxg7xh5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703864885458,
  "history_end_time" : 1703864885458,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "c4wv4lylikp",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703862637381,
  "history_end_time" : 1703862637381,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "4zu0dor9g4l",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703827227360,
  "history_end_time" : 1703827227360,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "s8ql119pco6",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703822411610,
  "history_end_time" : 1703822411610,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "gq6nv9bnj81",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703786924645,
  "history_end_time" : 1703789718830,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "ol3inbbd8zn",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703786053498,
  "history_end_time" : 1703786917618,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "qeai1z6qlf6",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703778395405,
  "history_end_time" : 1703778395405,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "pgw3urbni8l",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703739034578,
  "history_end_time" : 1703739034578,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "d54z8pziub4",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703738754625,
  "history_end_time" : 1703792459280,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "0i5j7c1snv3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703736166919,
  "history_end_time" : 1703737316889,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "63cd9ukmvd9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703694763590,
  "history_end_time" : 1703694763590,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "lajszogpiiy",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703659541210,
  "history_end_time" : 1703659541210,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "kgkjtn1b7ku",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703658144716,
  "history_end_time" : 1703658144716,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "1zdx6es3s06",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703650855783,
  "history_end_time" : 1703650855783,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "x0s603izzvr",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703646751545,
  "history_end_time" : 1703650812448,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "ca6429h95vk",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703642120904,
  "history_end_time" : 1703646749629,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "dtbldfwvcnn",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703641988956,
  "history_end_time" : 1703642074637,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "ua531fshzl0",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703629665516,
  "history_end_time" : 1703629665516,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "c953pqrp86z",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703626687997,
  "history_end_time" : 1703627783061,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "wdez3b51x58",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703625782111,
  "history_end_time" : 1703625782111,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "nt36vyaehyg",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703624784032,
  "history_end_time" : 1703624784032,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "psvz8684k8m",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702875592854,
  "history_end_time" : 1702875592854,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "hufl30dyh08",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702871264386,
  "history_end_time" : 1702871264386,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "66adqrewoy7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702867996405,
  "history_end_time" : 1702867996405,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "6jpz29fv6pd",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702866593403,
  "history_end_time" : 1702866593403,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "h4cnklyfr11",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702866137646,
  "history_end_time" : 1702866137646,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ie8e6q4tkho",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702657305644,
  "history_end_time" : 1702657305644,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "r3trsnm00vt",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702633223056,
  "history_end_time" : 1702633223056,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "s5uavpykpdf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702633156940,
  "history_end_time" : 1702633163904,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "6xc3pb1c3z8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702274520894,
  "history_end_time" : 1702274520894,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "abtrk9i6ir5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702257109211,
  "history_end_time" : 1702257109211,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "0u1vnxdseyl",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702253506552,
  "history_end_time" : 1702253506552,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "bpkmcz3w8xe",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702047800952,
  "history_end_time" : 1702047800952,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "51rl9tuq75e",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702046671885,
  "history_end_time" : 1702047789489,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "e2c1b098ldb",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701838624081,
  "history_end_time" : 1701838624081,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "07pd52ov5xm",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701272631489,
  "history_end_time" : 1701272875116,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "6eva99lq2a8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701272152711,
  "history_end_time" : 1701272363360,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "e08drgzamxb",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701269761356,
  "history_end_time" : 1701269761356,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "1rkfoee0s4w",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701245472030,
  "history_end_time" : 1701245472030,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ynthhd2olv3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701234300627,
  "history_end_time" : 1701234300627,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "rkprnut9l2x",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701232375290,
  "history_end_time" : 1701234158047,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "cv3ifkj44qv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701231048678,
  "history_end_time" : 1701231048678,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "27xmtv8d2cy",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701230933474,
  "history_end_time" : 1701230952353,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "36t1mwvptd8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701230796352,
  "history_end_time" : 1701230932260,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "px69p049xf8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701230384898,
  "history_end_time" : 1701230384898,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "0i782c5nfqy",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701229983518,
  "history_end_time" : 1701229983518,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "jhy96lth85v",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701228899381,
  "history_end_time" : 1701228899381,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "xecaosm67gy",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701228374814,
  "history_end_time" : 1701228374814,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "wpjndv5n44g",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701228236352,
  "history_end_time" : 1701228236352,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "punqsa0sx5d",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701228118519,
  "history_end_time" : 1701228118519,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "dgaxhkwtca7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701228056541,
  "history_end_time" : 1701228056541,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "glp5almgemj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701227912541,
  "history_end_time" : 1701227912541,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "a1eoP7bTAQ2f",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\n\nready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4.csv'\ndem_slope_csv_path = f\"{work_dir}/slope_file.tif.csv\"\n\n# Read the cleaned ready CSV and DEM slope CSV\ntrain_ready_df = pd.read_csv(ready_csv_path)\ndem_slope_df = pd.read_csv(dem_slope_csv_path)\n\nprint(train_ready_df.head())\nprint(dem_slope_df.head())\n\nprint(\"all train.csv columns: \", train_ready_df.columns)\nprint(\"all dem slope columns: \", dem_slope_df.columns)\n\ndef replace_slope(row):\n    '''\n    Replace the 'slope' column in the input DataFrame row with the closest slope value from the DEM data.\n\n    Args:\n        row (pandas.Series): A row of data containing 'lat' and 'lon' columns.\n\n    Returns:\n        float: The closest slope value from the DEM data for the given latitude and longitude.\n    '''\n    target_lat = row[\"lat\"]\n    target_lon = row[\"lon\"]\n    # Calculate the squared distance to find the closest DEM point\n    dem_slope_df['Distance'] = (dem_slope_df['Latitude'] - target_lat) ** 2 + (dem_slope_df['Longitude'] - target_lon) ** 2\n    closest_row = dem_slope_df.loc[dem_slope_df['Distance'].idxmin()]\n    return closest_row[\"Slope\"]\n\n# Apply the 'replace_slope' function to calculate and replace slope values in the DataFrame\ntrain_ready_df['slope'] = train_ready_df.apply(lambda row: replace_slope(row), axis=1)\n\nprint(train_ready_df.head())\nprint(train_ready_df.columns)\n\nnew_result_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected.csv'\n\n# Save the modified DataFrame to a new CSV file\ntrain_ready_df.to_csv(new_result_csv_path, index=False)\nprint(f\"The new slope corrected dataframe is saved to {new_result_csv_path}\")\n",
  "history_output" : "today date = 2023-11-28\ntest start date:  2022-11-15\ntest end date:  2023-10-07\n/home/chetana\n2022275\n/home/chetana/gw-workspace/a1eoP7bTAQ2f/correct_slope.py:9: DtypeWarning: Columns (6,7) have mixed types. Specify dtype option on import or set low_memory=False.\n  train_ready_df = pd.read_csv(ready_csv_path)\n         date        lat         lon  ...  eastness  northness  fsca\n0  2021-11-25  36.002412 -106.551272  ...  0.268998  -0.765643   0.0\n1  2021-11-25  36.002412 -106.551272  ...  0.268998  -0.765643   0.0\n2  2021-11-25  36.002412 -106.551272  ...  0.268998  -0.765643   0.0\n3  2020-02-03  36.002412 -106.551272  ...  0.268998  -0.765643  40.0\n4  2020-02-03  36.002412 -106.551272  ...  0.268998  -0.765643  40.0\n[5 rows x 23 columns]\n   Latitude  Longitude  x  y   Slope\n0      49.0   -125.000  0  0 -9999.0\n1      49.0   -124.964  1  0 -9999.0\n2      49.0   -124.928  2  0 -9999.0\n3      49.0   -124.892  3  0 -9999.0\n4      49.0   -124.856  4  0 -9999.0\nall train.csv columns:  Index(['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n       'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n       'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n       'fsca'],\n      dtype='object')\nall dem slope columns:  Index(['Latitude', 'Longitude', 'x', 'y', 'Slope'], dtype='object')\n         date        lat         lon  ...  eastness  northness  fsca\n0  2021-11-25  36.002412 -106.551272  ...  0.268998  -0.765643   0.0\n1  2021-11-25  36.002412 -106.551272  ...  0.268998  -0.765643   0.0\n2  2021-11-25  36.002412 -106.551272  ...  0.268998  -0.765643   0.0\n3  2020-02-03  36.002412 -106.551272  ...  0.268998  -0.765643  40.0\n4  2020-02-03  36.002412 -106.551272  ...  0.268998  -0.765643  40.0\n[5 rows x 23 columns]\nIndex(['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n       'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n       'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n       'fsca'],\n      dtype='object')\nThe new slope corrected dataframe is saved to /home/chetana/gridmet_test_run/final_merged_data_3yrs_cleaned_v4_slope_corrected.csv\n",
  "history_begin_time" : 1701190503901,
  "history_end_time" : 1701207846090,
  "history_notes" : "another 4 hours run. great :(",
  "history_process" : "ee5ur4",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "l0GdFoVJI1mO",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\n\nready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4.csv'\ndem_slope_csv_path = f\"{work_dir}/slope_file.tif.csv\"\n\n# Read the cleaned ready CSV and DEM slope CSV\ntrain_ready_df = pd.read_csv(ready_csv_path)\ndem_slope_df = pd.read_csv(dem_slope_csv_path)\n\nprint(train_ready_df.head())\nprint(dem_slope_df.head())\n\nprint(\"all train.csv columns: \", train_ready_df.columns)\nprint(\"all dem slope columns: \", dem_slope_df.columns)\n\ndef replace_slope(row):\n    '''\n    Replace the 'slope' column in the input DataFrame row with the closest slope value from the DEM data.\n\n    Args:\n        row (pandas.Series): A row of data containing 'lat' and 'lon' columns.\n\n    Returns:\n        float: The closest slope value from the DEM data for the given latitude and longitude.\n    '''\n    target_lat = row[\"lat\"]\n    target_lon = row[\"lon\"]\n    # Calculate the squared distance to find the closest DEM point\n    dem_slope_df['Distance'] = (dem_slope_df['Latitude'] - target_lat) ** 2 + (dem_slope_df['Longitude'] - target_lon) ** 2\n    closest_row = dem_slope_df.loc[dem_slope_df['Distance'].idxmin()]\n    return closest_row[\"Slope\"]\n\n# Apply the 'replace_slope' function to calculate and replace slope values in the DataFrame\ntrain_ready_df['slope'] = train_ready_df.apply(lambda row: replace_slope(row), axis=1)\n\nprint(train_ready_df.head())\nprint(train_ready_df.columns)\n\nnew_result_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected.csv'\n\n# Save the modified DataFrame to a new CSV file\ntrain_ready_df.to_csv(new_result_csv_path, index=False)\nprint(f\"The new slope corrected dataframe is saved to {new_result_csv_path}\")\n",
  "history_output" : "today date = 2023-11-28\ntest start date:  2022-11-15\ntest end date:  2023-10-07\n/home/chetana\n2022275\n/home/chetana/gw-workspace/l0GdFoVJI1mO/correct_slope.py:9: DtypeWarning: Columns (6,7) have mixed types. Specify dtype option on import or set low_memory=False.\n  train_ready_df = pd.read_csv(ready_csv_path)\n         date        lat         lon  ...  eastness  northness  fsca\n0  2021-11-25  36.002412 -106.551272  ...  0.268998  -0.765643   0.0\n1  2021-11-25  36.002412 -106.551272  ...  0.268998  -0.765643   0.0\n2  2021-11-25  36.002412 -106.551272  ...  0.268998  -0.765643   0.0\n3  2020-02-03  36.002412 -106.551272  ...  0.268998  -0.765643  40.0\n4  2020-02-03  36.002412 -106.551272  ...  0.268998  -0.765643  40.0\n[5 rows x 23 columns]\n   Latitude  Longitude  x  y   Slope\n0      49.0   -125.000  0  0 -9999.0\n1      49.0   -124.964  1  0 -9999.0\n2      49.0   -124.928  2  0 -9999.0\n3      49.0   -124.892  3  0 -9999.0\n4      49.0   -124.856  4  0 -9999.0\nall train.csv columns:  Index(['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n       'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n       'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n       'fsca'],\n      dtype='object')\nall dem slope columns:  Index(['Latitude', 'Longitude', 'x', 'y', 'Slope'], dtype='object')\n",
  "history_begin_time" : 1701187467013,
  "history_end_time" : 1701190391192,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "b5KNNg4855bZ",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\n\nready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4.csv'\ndem_slope_csv_path = f\"{work_dir}/slope_file.tif.csv\"\n\n# Read the cleaned ready CSV and DEM slope CSV\ntrain_ready_df = pd.read_csv(ready_csv_path)\ndem_slope_df = pd.read_csv(dem_slope_csv_path)\n\nprint(train_ready_df.head())\nprint(dem_slope_df.head())\n\nprint(\"all train.csv columns: \", train_ready_df.columns)\nprint(\"all dem slope columns: \", dem_slope_df.columns)\n\ndef replace_slope(row):\n    '''\n    Replace the 'slope' column in the input DataFrame row with the closest slope value from the DEM data.\n\n    Args:\n        row (pandas.Series): A row of data containing 'lat' and 'lon' columns.\n\n    Returns:\n        float: The closest slope value from the DEM data for the given latitude and longitude.\n    '''\n    target_lat = row[\"lat\"]\n    target_lon = row[\"lon\"]\n    # Calculate the squared distance to find the closest DEM point\n    dem_slope_df['Distance'] = (dem_slope_df['Latitude'] - target_lat) ** 2 + (dem_slope_df['Longitude'] - target_lon) ** 2\n    closest_row = dem_slope_df.loc[dem_slope_df['Distance'].idxmin()]\n    return closest_row[\"Slope\"]\n\n# Apply the 'replace_slope' function to calculate and replace slope values in the DataFrame\ntrain_ready_df['slope'] = train_ready_df.apply(lambda row: replace_slope(row), axis=1)\n\nprint(train_ready_df.head())\nprint(train_ready_df.columns)\n\nnew_result_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected.csv'\n\n# Save the modified DataFrame to a new CSV file\ntrain_ready_df.to_csv(new_result_csv_path, index=False)\n",
  "history_output" : "today date = 2023-11-28\ntest start date:  2022-11-15\ntest end date:  2023-10-07\n/home/chetana\n2022275\n/home/chetana/gw-workspace/b5KNNg4855bZ/correct_slope.py:9: DtypeWarning: Columns (6,7) have mixed types. Specify dtype option on import or set low_memory=False.\n  train_ready_df = pd.read_csv(ready_csv_path)\n         date        lat         lon  ...  eastness  northness  fsca\n0  2021-11-25  36.002412 -106.551272  ...  0.268998  -0.765643   0.0\n1  2021-11-25  36.002412 -106.551272  ...  0.268998  -0.765643   0.0\n2  2021-11-25  36.002412 -106.551272  ...  0.268998  -0.765643   0.0\n3  2020-02-03  36.002412 -106.551272  ...  0.268998  -0.765643  40.0\n4  2020-02-03  36.002412 -106.551272  ...  0.268998  -0.765643  40.0\n[5 rows x 23 columns]\n   Latitude  Longitude  x  y   Slope\n0      49.0   -125.000  0  0 -9999.0\n1      49.0   -124.964  1  0 -9999.0\n2      49.0   -124.928  2  0 -9999.0\n3      49.0   -124.892  3  0 -9999.0\n4      49.0   -124.856  4  0 -9999.0\nall train.csv columns:  Index(['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n       'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n       'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n       'fsca'],\n      dtype='object')\nall dem slope columns:  Index(['Latitude', 'Longitude', 'x', 'y', 'Slope'], dtype='object')\n",
  "history_begin_time" : 1701187395678,
  "history_end_time" : 1701190391109,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "vlbz2p1gyke",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701013937420,
  "history_end_time" : 1701015920043,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "ydhq2h8cm45",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700974688737,
  "history_end_time" : 1700974688737,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "sekl6twqyys",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700885116851,
  "history_end_time" : 1700885116851,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ym4t6gss9y9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700471590211,
  "history_end_time" : 1700471590211,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "waywmsdyqm7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700468936450,
  "history_end_time" : 1700468936450,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "gma18giand3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700461923048,
  "history_end_time" : 1700462913700,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "fk0d4rgmeyr",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700448500150,
  "history_end_time" : 1700448500150,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "m02v3yph4zi",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700447319857,
  "history_end_time" : 1700447319857,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "izpjlfrinh5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700230067257,
  "history_end_time" : 1700230067257,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "06v8vlxu7b8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700229012380,
  "history_end_time" : 1700229012380,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "dcu13l981jh",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700210213823,
  "history_end_time" : 1700210213823,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "vlveojmkip7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700209780175,
  "history_end_time" : 1700209780175,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "9x0e0zh7oqm",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700209729260,
  "history_end_time" : 1700209729260,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "rxvwawvx73a",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700203478692,
  "history_end_time" : 1700204245690,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "t1bqa6gqbph",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700201828279,
  "history_end_time" : 1700201828279,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "srrs6zkadqy",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700200332869,
  "history_end_time" : 1700200332869,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "7aixivmcuzv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700145667881,
  "history_end_time" : 1700145667881,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "oez3ugpxxre",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700143295319,
  "history_end_time" : 1700143295319,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "jyzudphdkhc",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700141615824,
  "history_end_time" : 1700141615824,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "7ocxm9loofw",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700134126851,
  "history_end_time" : 1700134126851,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "myl1uhi7wrd",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700133783719,
  "history_end_time" : 1700133783719,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "hhigp98lwya",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1699992839773,
  "history_end_time" : 1699992839773,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "dkemkhyk8wc",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1699982145469,
  "history_end_time" : 1699982145469,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "fptmqfpjqao",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1699941614814,
  "history_end_time" : 1699941614814,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "vb6fhy6oly1",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1699939440621,
  "history_end_time" : 1699939440621,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "at9jxfxm3u2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1699937910476,
  "history_end_time" : 1699937910476,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ht0gn32lm3j",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1699805634679,
  "history_end_time" : 1699806085203,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "rz5b7xeba0y",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1699684154077,
  "history_end_time" : 1705789690247,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "2dua0qxiiqi",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1699681071377,
  "history_end_time" : 1699681071377,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "7t3jr1v2wc8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698762678710,
  "history_end_time" : 1698762678710,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "64jaojmf78f",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698762637995,
  "history_end_time" : 1698762637995,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "8o8mpy6pcx0",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698276496969,
  "history_end_time" : 1698276496969,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "eh42xjmw218",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698252277370,
  "history_end_time" : 1698252277370,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "jz9anowmxe9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698251392475,
  "history_end_time" : 1698251392475,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "vcgbtmbx84p",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698228211025,
  "history_end_time" : 1698228211025,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "mgtfd8qm5vg",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698227897148,
  "history_end_time" : 1698227897148,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "i2o1xqngbtz",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698163737298,
  "history_end_time" : 1698163737298,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "uz7xeori608",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698163445836,
  "history_end_time" : 1698163445836,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "eun5j4r7dq5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698163121548,
  "history_end_time" : 1698163121548,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "2u9n5x8vnuu",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698160809416,
  "history_end_time" : 1698160809416,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "1e7bh9onau2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698157805197,
  "history_end_time" : 1698157805197,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "g0rhdddp2ov",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698152099759,
  "history_end_time" : 1698152099759,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "s9qg7hrt3lh",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698095495801,
  "history_end_time" : 1698095495801,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "4twx61kucjl",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698075453650,
  "history_end_time" : 1698075453650,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "zd5561r5407",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1697349530028,
  "history_end_time" : 1697349530028,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "gc6crdbkp8y",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1697348852416,
  "history_end_time" : 1697348852416,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "t1ltlw11rk9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1697189923599,
  "history_end_time" : 1697189923599,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "vnf3jtg0mil",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1697188523336,
  "history_end_time" : 1697188523336,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "epqqc1tre43",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1697187892309,
  "history_end_time" : 1697187892309,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "k5tv5b8aniw",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1697187368033,
  "history_end_time" : 1697187368033,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "q1wqvjxnp60",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1696863953357,
  "history_end_time" : 1696863953357,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "l9dubj8xjn0",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1696862402994,
  "history_end_time" : 1696862402994,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "nyuw3ryhcu6",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1696832263736,
  "history_end_time" : 1696832263736,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "emyqo1rie41",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1696831867424,
  "history_end_time" : 1696831867424,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "3nxw7yvgats",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1696830174461,
  "history_end_time" : 1696830174461,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "pz5svobvii3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1696787542028,
  "history_end_time" : 1696787542028,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "6qtr0abp6kp",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1696786838357,
  "history_end_time" : 1696786838357,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "jbllp6xv8or",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1696771780963,
  "history_end_time" : 1696771780963,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "56ijorjyid6",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1696602943975,
  "history_end_time" : 1696602943975,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "GjuIkNxEalvs",
  "history_input" : "# slope is wrong, correct it\n\nimport pandas as pd\nimport os\nfrom snowcast_utils import work_dir\n\n\nready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned.csv'\ndem_slope_csv_path = f\"{work_dir}/slope_file.tif.csv\"\n\ntrain_ready_df = pd.read_csv(ready_csv_path)\ndem_slope_df = pd.read_csv(dem_slope_csv_path)\n\nprint(train_ready_df.head())\nprint(dem_slope_df.head())\n\nprint(\"all train.csv columns: \", train_ready_df.columns)\nprint(\"all dem slope columns: \", dem_slope_df.columns)\n\ndef replace_slope(row):\n  target_lat = row[\"lat\"]\n  target_lon = row[\"lon\"]\n  # get the calculated slope from the DEM csv\n  dem_slope_df['Distance'] = (dem_slope_df['Latitude'] - target_lat) ** 2 + (dem_slope_df['Longitude'] - target_lon) ** 2\n  closest_row = dem_slope_df.loc[dem_slope_df['Distance'].idxmin()]\n  \n  return closest_row[\"Slope\"]\n\ntrain_ready_df['slope'] = train_ready_df.apply(lambda row: replace_slope(row), axis=1)\n\nprint(train_ready_df.head())\nprint(train_ready_df.columns)\n\nnew_result_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n\ntrain_ready_df.to_csv(new_result_csv_path, index=False)\n\n",
  "history_output" : "today date = 2023-10-06\ntest start date:  2023-01-18\ntest end date:  2023-10-06\n/home/chetana\n         date       lat         lon  ...     aspect  eastness  northness\n0  2020-11-25  37.19236 -118.939041  ...  24.605782  0.394541   0.737872\n1  2020-10-18  37.19236 -118.939041  ...  24.605782  0.394541   0.737872\n2  2020-09-21  37.19236 -118.939041  ...  24.605782  0.394541   0.737872\n3  2022-09-01  37.19236 -118.939041  ...  24.605782  0.394541   0.737872\n4  2019-10-03  37.19236 -118.939041  ...  24.605782  0.394541   0.737872\n[5 rows x 21 columns]\n   Latitude  Longitude  x  y  Slope\n0      49.0   -125.000  0  0    NaN\n1      49.0   -124.964  1  0    NaN\n2      49.0   -124.928  2  0    NaN\n3      49.0   -124.892  3  0    NaN\n4      49.0   -124.856  4  0    NaN\nall train.csv columns:  Index(['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'Unnamed: 0',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'elevation', 'slope', 'curvature',\n       'aspect', 'eastness', 'northness'],\n      dtype='object')\nall dem slope columns:  Index(['Latitude', 'Longitude', 'x', 'y', 'Slope'], dtype='object')\n         date       lat         lon  ...     aspect  eastness  northness\n0  2020-11-25  37.19236 -118.939041  ...  24.605782  0.394541   0.737872\n1  2020-10-18  37.19236 -118.939041  ...  24.605782  0.394541   0.737872\n2  2020-09-21  37.19236 -118.939041  ...  24.605782  0.394541   0.737872\n3  2022-09-01  37.19236 -118.939041  ...  24.605782  0.394541   0.737872\n4  2019-10-03  37.19236 -118.939041  ...  24.605782  0.394541   0.737872\n[5 rows x 21 columns]\nIndex(['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'Unnamed: 0',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'elevation', 'slope', 'curvature',\n       'aspect', 'eastness', 'northness'],\n      dtype='object')\n",
  "history_begin_time" : 1696572265173,
  "history_end_time" : 1696587685042,
  "history_notes" : "this takes 4 hours, wow",
  "history_process" : "ee5ur4",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "uU405LGYfLxc",
  "history_input" : "# slope is wrong, correct it\n\nimport pandas as pd\nimport os\nfrom snowcast_utils import work_dir\n\n\nready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned.csv'\ndem_slope_csv_path = f\"{work_dir}/slope_file.tif.csv\"\n\ntrain_ready_df = pd.read_csv(ready_csv_path)\ndem_slope_df = pd.read_csv(dem_slope_csv_path)\n\nprint(train_ready_df.head())\nprint(dem_slope_df.head())\n\nprint(\"all train.csv columns: \", train_ready_df.columns)\nprint(\"all dem slope columns: \", dem_slope_df.columns)\n\ndef find_closest_index(target_latitude, target_longitude, lat_grid, lon_grid):\n    \"\"\"\n    Find the closest grid point indices for a target latitude and longitude.\n\n    Parameters:\n        target_latitude (float): Target latitude.\n        target_longitude (float): Target longitude.\n        lat_grid (numpy.ndarray): Array of latitude values.\n        lon_grid (numpy.ndarray): Array of longitude values.\n\n    Returns:\n        int: Latitude index.\n        int: Longitude index.\n        float: Closest latitude value.\n        float: Closest longitude value.\n    \"\"\"\n    lat_diff = np.float64(np.abs(lat_grid - target_latitude))\n    lon_diff = np.float64(np.abs(lon_grid - target_longitude))\n\n    # Find the indices corresponding to the minimum differences\n    lat_idx, lon_idx = np.unravel_index(np.argmin(lat_diff + lon_diff), lat_grid.shape)\n\n    return lat_idx, lon_idx, lat_grid[lat_idx, lon_idx], lon_grid[lat_idx, lon_idx]\n\ndef replace_slope(row):\n  lat = row[\"lat\"]\n  lon = row[\"lon\"]\n  # get the calculated slope from the DEM csv\n  \n  return \n\ndf['slope'] = df.apply(lambda row: replace_slope(row), axis=1)\n\n\n",
  "history_output" : "today date = 2023-10-06\ntest start date:  2023-01-18\ntest end date:  2023-10-06\n/home/chetana\n         date       lat         lon  ...     aspect  eastness  northness\n0  2020-11-25  37.19236 -118.939041  ...  24.605782  0.394541   0.737872\n1  2020-10-18  37.19236 -118.939041  ...  24.605782  0.394541   0.737872\n2  2020-09-21  37.19236 -118.939041  ...  24.605782  0.394541   0.737872\n3  2022-09-01  37.19236 -118.939041  ...  24.605782  0.394541   0.737872\n4  2019-10-03  37.19236 -118.939041  ...  24.605782  0.394541   0.737872\n[5 rows x 21 columns]\n   Latitude  Longitude  x  y  Slope\n0      49.0   -125.000  0  0    NaN\n1      49.0   -124.964  1  0    NaN\n2      49.0   -124.928  2  0    NaN\n3      49.0   -124.892  3  0    NaN\n4      49.0   -124.856  4  0    NaN\nall train.csv columns:  Index(['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'Unnamed: 0',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'elevation', 'slope', 'curvature',\n       'aspect', 'eastness', 'northness'],\n      dtype='object')\nall dem slope columns:  Index(['Latitude', 'Longitude', 'x', 'y', 'Slope'], dtype='object')\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/uU405LGYfLxc/correct_slope.py\", line 51, in <module>\n    df['slope'] = df.apply(lambda row: replace_slope(row), axis=1)\nNameError: name 'df' is not defined\n",
  "history_begin_time" : 1696571523278,
  "history_end_time" : 1696571526250,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "3UimfO7aDbAQ",
  "history_input" : "# slope is wrong, correct it\n\nimport pandas as pd\nimport os\nfrom snowcast_utils import work_dir\n\n\nready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned.csv'\n\ntrain_ready_df = pd.read_csv(ready_csv_path)\n\nprint(train_ready_df.head())\n\nprint(\"all columns: \", train_ready_df.columns)\n\n\n\n\n",
  "history_output" : "today date = 2023-10-06\ntest start date:  2023-01-18\ntest end date:  2023-10-06\n/home/chetana\n         date       lat         lon  ...     aspect  eastness  northness\n0  2020-11-25  37.19236 -118.939041  ...  24.605782  0.394541   0.737872\n1  2020-10-18  37.19236 -118.939041  ...  24.605782  0.394541   0.737872\n2  2020-09-21  37.19236 -118.939041  ...  24.605782  0.394541   0.737872\n3  2022-09-01  37.19236 -118.939041  ...  24.605782  0.394541   0.737872\n4  2019-10-03  37.19236 -118.939041  ...  24.605782  0.394541   0.737872\n[5 rows x 21 columns]\nall columns:  Index(['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'Unnamed: 0',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'elevation', 'slope', 'curvature',\n       'aspect', 'eastness', 'northness'],\n      dtype='object')\n",
  "history_begin_time" : 1696570507221,
  "history_end_time" : 1696570509980,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "5UsVE4DqVPDi",
  "history_input" : "# slope is wrong, correct it\n\nimport pandas as pd\nimport os\nfrom snowcast_utils import work_dir\n\n\nready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned.csv'\n\ntrain_ready_df = pd.read_csv(ready_csv_path)\n\nprint(train_ready_df.head())\n\n\n\n\n",
  "history_output" : "today date = 2023-10-06\ntest start date:  2023-01-18\ntest end date:  2023-10-06\n/home/chetana\n         date       lat         lon  ...     aspect  eastness  northness\n0  2020-11-25  37.19236 -118.939041  ...  24.605782  0.394541   0.737872\n1  2020-10-18  37.19236 -118.939041  ...  24.605782  0.394541   0.737872\n2  2020-09-21  37.19236 -118.939041  ...  24.605782  0.394541   0.737872\n3  2022-09-01  37.19236 -118.939041  ...  24.605782  0.394541   0.737872\n4  2019-10-03  37.19236 -118.939041  ...  24.605782  0.394541   0.737872\n[5 rows x 21 columns]\n",
  "history_begin_time" : 1696569709087,
  "history_end_time" : 1696569712112,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "Pkwiz6lznmo3",
  "history_input" : "# slope is wrong, correct it\n\nimport pandas as pd\nimport os\nfrom snowcast_utils import work_dir\n\n\nready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v2.csv'\n\ntrain_ready_df = pd.read_csv(ready_csv_path)\n\nprint(train_ready_df.head())\n\n",
  "history_output" : "today date = 2023-10-06\ntest start date:  2023-01-18\ntest end date:  2023-10-06\n/home/chetana\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/Pkwiz6lznmo3/correct_slope.py\", line 10, in <module>\n    train_ready_df = pd.read_csv(ready_csv_path)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/util/_decorators.py\", line 211, in wrapper\n    return func(*args, **kwargs)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/util/_decorators.py\", line 331, in wrapper\n    return func(*args, **kwargs)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/io/parsers/readers.py\", line 950, in read_csv\n    return _read(filepath_or_buffer, kwds)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/io/parsers/readers.py\", line 605, in _read\n    parser = TextFileReader(filepath_or_buffer, **kwds)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/io/parsers/readers.py\", line 1442, in __init__\n    self._engine = self._make_engine(f, self.engine)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/io/parsers/readers.py\", line 1735, in _make_engine\n    self.handles = get_handle(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/io/common.py\", line 856, in get_handle\n    handle = open(\nFileNotFoundError: [Errno 2] No such file or directory: '/home/chetana/gridmet_test_run/final_merged_data_3yrs_cleaned_v2.csv'\n",
  "history_begin_time" : 1696569569994,
  "history_end_time" : 1696569570818,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "LZtyjJTyPKl4",
  "history_input" : "# slope is wrong, correct it\n\nimport pandas as pd\n\nready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v2.csv'\n\ntrain_ready_df = pd.read_csv(ready_csv_path)\n\nprint(train_ready_df.head())\n\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/LZtyjJTyPKl4/correct_slope.py\", line 5, in <module>\n    ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v2.csv'\nNameError: name 'work_dir' is not defined\n",
  "history_begin_time" : 1696569416856,
  "history_end_time" : 1696569417309,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : null,
  "indicator" : "Failed"
},]
