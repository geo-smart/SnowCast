[{
  "history_id" : "iq8xvisrn99",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714977336241,
  "history_end_time" : 1714977336241,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "tpj3rejeugb",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714968024369,
  "history_end_time" : 1714968024369,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "z80jUn1CDVIs",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\nimport dask.dataframe as dd\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    if column_name == \"SWE\":\n      mask = (y > 240) | y.isnull()\n    elif column_name == \"fsca\":\n      y = y.replace([225, 237, 239], 0)\n      y[y < 0] = 0\n      mask = (y > 100) | y.isnull()\n    else:\n      mask = y.isnull()\n\n    # Check if all elements in the mask array are True\n    all_true = np.all(mask)\n\n    if all_true:\n      df[column_name] = 0\n    else:\n      # Perform interpolation\n      new_y = np.interp(x, x[~mask], y[~mask])\n      # Replace missing values with interpolated values\n      df[column_name] = new_y\n\n    if np.any(df[column_name].isnull()):\n      raise ValueError(\"Single group: shouldn't have null values here\")\n        \n    return df\n\ndef convert_to_time_series(input_csv, output_csv, force=False):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                         'AMSR_SWE': 'SWE',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv) and not force:\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['SWE'] > 240):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        filled_data.to_csv(filled_csv, index=False)\n        \n        print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv) and not force:\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n        result.fillna(0, inplace=True)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv, force=False):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_cumulated = [\n      \"SWE\",\n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2018-10-01')\n    end_date = pd.to_datetime('2021-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df[\"cumulative_fsca\"].describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n\n    \ndef assign_zero_swe_value_to_all_fsca_zero_rows(na_filled_csv, non_station_zero_csv, force=False):\n    \n    # Define the conditions\n    condition_column = 'fsca'\n    target_column = 'swe_value'\n    values_to_check = [0, 225, 237, 239]\n    \n    \n    df = pd.read_csv(na_filled_csv, dtype={'station_name': 'object'})\n    empty_count = df[target_column].isnull().values.ravel().sum()\n    \n    print(f\"The empty number of rows are {empty_count} before filling in\")\n    print(\"double check the swe_value statistics before filling in:\", df[\"swe_value\"].describe())\n    \n    rows_less_than_zero = (df[target_column] < 0).sum()\n    print(\"Number of rows where '{}' is less than 0: {}\".format(target_column, rows_less_than_zero))\n    \n\n    # Mask the target column where the condition is met\n    df[target_column] = df[target_column].mask(\n        (df[target_column].isna()) & df[condition_column].isin(values_to_check),\n        0\n    )\n    \n    empty_count = df[target_column].isnull().values.ravel().sum()\n    \n    print(f\"The empty number of rows are {empty_count} after filling in\")\n    \n    print(\"total dataframe row number : \", len(df))\n    \n    df.to_csv(non_station_zero_csv, index=False)\n    \n    print(f\"The rows without snotel but fsca is zero or land or water or ocean are set to 0! {non_station_zero_csv}\")\n    print(\"double check the swe_value statistics after filling in:\", df[\"swe_value\"].describe())\n    \n    \ndef clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path, force=False):\n    # Read Dask DataFrame from CSV\n    dask_df = dd.read_csv(current_ready_csv_path, dtype={'station_name': 'object'})\n\n    # Remove rows where 'swe_value' is empty\n    dask_df_filtered = dask_df.dropna(subset=['swe_value'])\n\n    # Save the result to a new CSV file\n    dask_df_filtered.to_csv(cleaned_csv_path, index=False, single_file=True)\n    print(\"dask_df_filtered.shape = \", dask_df_filtered.shape)\n    print(f\"The filtered csv with no swe values is saved to {cleaned_csv_path}\")\n\ndef rename_corrected_slope(corrected_slope_path, renamed_slope_path, force=False):\n    df = pd.read_csv(corrected_slope_path, dtype={'station_name': 'object'})\n    df.drop(columns=['Slope'], inplace=True)\n\t# Rename 'column_to_rename' to 'old_column'\n    df.rename(columns={'corrected_slope': 'Slope'}, inplace=True)\n    df.to_csv(renamed_slope_path, index=False)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {renamed_slope_path}\")\n    \ndef log10_all_fields(cleaned_csv_path, logged_csv_path, force=False):\n    print(\"convert all cumulative columns into log10\")\n    # Read Dask DataFrame from CSV\n    df = pd.read_csv(cleaned_csv_path, dtype={'station_name': 'object'})\n    \n    # Get columns with \"cumulative\" in their names\n    for col in df.columns:\n        print(\"Checking \", col)\n        if \"cumulative\" in col:\n\t        # Apply log10 transformation to selected columns\n            df[col] = np.log10(df[col] + 0.1)  # Adding 1 to avoid log(0)\n            print(f\"converted {col} to log10\")\n\n    df.to_csv(logged_csv_path, index=False)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {logged_csv_path}\")\n\n    \n    \nif __name__ == \"__main__\":\n    # Define file paths for various CSV files\n    # current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n    current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv'\n    non_station_counted_csv_path = f'{work_dir}/new_stations_3yrs_fill_empty_snotel.csv'\n    cleaned_csv_path = f\"{work_dir}/new_stations_3yrs_cleaned.csv\"\n    target_time_series_csv_path = f'{work_dir}/new_stations_3yrs_time_series.csv'\n    backup_time_series_csv_path = f'{work_dir}/new_stations_3yrs_time_series_backup.csv'\n    # target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n    target_time_series_cumulative_csv_path = f'{work_dir}/new_stations_3yrs_cumulative.csv'\n    slope_renamed_path = f'{work_dir}/new_stations_3yrs_slope_renamed.csv'\n    logged_csv_path = f'{work_dir}/new_stations_3yrs_all_cols_log10.csv'\n    \n    # filling the non station rows with fsca indicating no snow\n    assign_zero_swe_value_to_all_fsca_zero_rows(current_ready_csv_path, non_station_counted_csv_path, force=True)\n    \n    # remove the empty swe_value rows first\n    clean_non_swe_rows(non_station_counted_csv_path, cleaned_csv_path, force=True)\n  \n    # Uncomment this line to execute the 'convert_to_time_series' function\n    convert_to_time_series(cleaned_csv_path, target_time_series_csv_path, force=True)\n\n    # Uncomment this line to execute the 'add_cumulative_columns' function\n    add_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path, force=True)\n    \n    # Rename the corrected slope to slope\n    rename_corrected_slope(target_time_series_cumulative_csv_path, slope_renamed_path, force=True)\n    \n    # convert all cumulative columns to log10\n    log10_all_fields(slope_renamed_path, logged_csv_path, force=True)\n    \n    df = pd.read_csv(logged_csv_path, dtype={'station_name': 'object'})\n    print(\"the number of the total rows: \", len(df))\n    \n    deduplicated_df = df.drop_duplicates(subset=['lat', 'lon'])\n    # Export the deduplicated DataFrame to a CSV file\n    deduplicated_df.to_csv(f'{work_dir}/deduplicated_training_points_final.csv', index=False)\n    print(\"deduplicated_df.to_csv('deduplicated_training_points_final.csv', index=False)\")\n    \n",
  "history_output" : "today date = 2024-05-06\ntest start date:  2023-10-07\ntest end date:  2023-10-11\n/home/chetana\nThe empty number of rows are 13750843 before filling in\ndouble check the swe_value statistics before filling in: count    1.324517e+06\nmean     5.606424e+00\nstd      9.727693e+00\nmin     -8.000000e+00\n25%      0.000000e+00\n50%      4.000000e-01\n75%      7.800000e+00\nmax      1.066000e+02\nName: swe_value, dtype: float64\nNumber of rows where 'swe_value' is less than 0: 19\nThe empty number of rows are 11864286 after filling in\ntotal dataframe row number :  15075360\nThe rows without snotel but fsca is zero or land or water or ocean are set to 0! /home/chetana/gridmet_test_run/new_stations_3yrs_fill_empty_snotel.csv\ndouble check the swe_value statistics after filling in: count    3.211074e+06\nmean     2.312561e+00\nstd      6.830066e+00\nmin     -8.000000e+00\n25%      0.000000e+00\n50%      0.000000e+00\n75%      0.000000e+00\nmax      1.066000e+02\nName: swe_value, dtype: float64\ndask_df_filtered.shape =  (Delayed('int-3646a24f-8c65-4156-abbb-29fa39f8fd87'), 25)\nThe filtered csv with no swe values is saved to /home/chetana/gridmet_test_run/new_stations_3yrs_cleaned.csv\nAll current columns:  Index(['date', 'lat', 'lon', 'AMSR_SWE', 'station_name', 'swe_value',\n       'change_in_swe_inch', 'snow_depth', 'air_temperature_observed_f',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'fsca', 'corrected_slope'],\n      dtype='object')\nStart to fill in the missing values\nNew filled values csv is saved to /home/chetana/gridmet_test_run/new_stations_3yrs_time_series.csv_gap_filled.csv\nStart to create the training csv with previous 7 days columns\nNew data is saved to /home/chetana/gridmet_test_run/new_stations_3yrs_time_series.csv\nFile is backed up to /home/chetana/gridmet_test_run/new_stations_3yrs_time_series_backup.csv\nthe column statistics from time series before cumulative:                  lat           lon           SWE     swe_value  \\\ncount  3.211074e+06  3.211074e+06  3.211074e+06  3.211074e+06   \nmean   4.156352e+01 -1.136765e+02  5.914814e+00  2.312561e+00   \nstd    3.850046e+00  5.696848e+00  1.580655e+01  6.830066e+00   \nmin    3.141666e+01 -1.245500e+02  0.000000e+00 -8.000000e+00   \n25%    3.855000e+01 -1.192220e+02  0.000000e+00  0.000000e+00   \n50%    4.118467e+01 -1.128238e+02  0.000000e+00  0.000000e+00   \n75%    4.457462e+01 -1.090667e+02  0.000000e+00  0.000000e+00   \nmax    4.900000e+01 -1.005075e+02  2.340000e+02  1.066000e+02   \n       change_in_swe_inch    snow_depth  air_temperature_observed_f  \\\ncount        3.211074e+06  3.211074e+06                3.211074e+06   \nmean         3.557065e-03  6.133463e+00                1.468743e+01   \nstd          1.198090e+00  1.723942e+01                2.040158e+01   \nmin         -1.370000e+02  0.000000e+00               -8.660000e+01   \n25%          0.000000e+00  0.000000e+00                0.000000e+00   \n50%          0.000000e+00  0.000000e+00                0.000000e+00   \n75%          0.000000e+00  0.000000e+00                3.180000e+01   \nmax          1.370000e+02  2.290000e+02                6.710000e+02   \n       air_temperature_tmmn  potential_evapotranspiration  \\\ncount          3.211074e+06                  3.211074e+06   \nmean           2.754783e+02                  4.968408e+00   \nstd            9.883147e+00                  3.213294e+00   \nmin            0.000000e+00                  0.000000e+00   \n25%            2.701000e+02                  2.200000e+00   \n50%            2.762000e+02                  4.600000e+00   \n75%            2.817000e+02                  7.200000e+00   \nmax            3.085000e+02                  2.380000e+01   \n       mean_vapor_pressure_deficit  relative_humidity_rmax  \\\ncount                 3.211074e+06            3.211074e+06   \nmean                  8.788692e-01            7.125555e+01   \nstd                   8.027297e-01            2.059016e+01   \nmin                   0.000000e+00            0.000000e+00   \n25%                   2.700000e-01            5.560000e+01   \n50%                   6.300000e-01            7.250000e+01   \n75%                   1.270000e+00            8.860000e+01   \nmax                   7.920000e+00            1.000000e+02   \n       relative_humidity_rmin  precipitation_amount  air_temperature_tmmx  \\\ncount            3.211074e+06          3.211074e+06          3.211074e+06   \nmean             2.879124e+01          1.602402e+00          2.884101e+02   \nstd              1.675204e+01          5.366858e+00          1.402561e+01   \nmin              0.000000e+00          0.000000e+00          0.000000e+00   \n25%              1.680000e+01          0.000000e+00          2.791000e+02   \n50%              2.480000e+01          0.000000e+00          2.886000e+02   \n75%              3.660000e+01          7.000000e-01          2.981000e+02   \nmax              1.000000e+02          5.042000e+02          3.254000e+02   \n         wind_speed     Elevation         Slope        Aspect     Curvature  \\\ncount  3.211074e+06  3.211074e+06  3.211074e+06  3.211074e+06  3.211074e+06   \nmean   3.772103e+00  1.953251e+03  9.195949e-01  1.845197e+02 -9.614543e+02   \nstd    1.737611e+00  7.932325e+02  2.524931e+00  1.047163e+02  5.081542e+03   \nmin    0.000000e+00 -1.207950e+00  6.327820e-02 -0.000000e+00 -2.198460e+04   \n25%    2.600000e+00  1.402141e+03  2.445297e-01  9.258768e+01 -3.988808e+03   \n50%    3.400000e+00  2.001734e+03  4.136047e-01  1.880594e+02 -2.000815e+01   \n75%    4.600000e+00  2.551543e+03  8.278580e-01  2.758316e+02  2.282732e+03   \nmax    1.960000e+01  3.978188e+03  9.000000e+01  3.599130e+02  1.757020e+04   \n          Northness      Eastness          fsca  corrected_slope  \\\ncount  3.211074e+06  3.211074e+06  3.211074e+06     3.211074e+06   \nmean   1.180370e-02  2.834155e-02  9.775639e+00     6.625122e+01   \nstd    5.884916e-01  5.823986e-01  2.118556e+01     4.885372e+02   \nmin   -7.853982e-01 -7.853979e-01  0.000000e+00    -9.999000e+03   \n25%   -6.284770e-01 -5.789484e-01  0.000000e+00     8.996606e+01   \n50%    2.564631e-02  6.505793e-02  0.000000e+00     8.998275e+01   \n75%    6.187943e-01  6.341513e-01  0.000000e+00     8.998937e+01   \nmax    7.853978e-01  7.853982e-01  9.600000e+01     8.999759e+01   \n              SWE_1  air_temperature_tmmn_1  potential_evapotranspiration_1  \\\ncount  3.211074e+06            3.211074e+06                    3.211074e+06   \nmean   5.912666e+00            2.751788e+02                    4.965036e+00   \nstd    1.580632e+01            1.354239e+01                    3.216475e+00   \nmin    0.000000e+00            0.000000e+00                    0.000000e+00   \n25%    0.000000e+00            2.700000e+02                    2.200000e+00   \n50%    0.000000e+00            2.762000e+02                    4.600000e+00   \n75%    0.000000e+00            2.817000e+02                    7.200000e+00   \nmax    2.340000e+02            3.085000e+02                    2.380000e+01   \n       mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\ncount                   3.211074e+06              3.211074e+06   \nmean                    8.778043e-01              7.115879e+01   \nstd                     8.027140e-01              2.071607e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.700000e-01              5.550000e+01   \n50%                     6.300000e-01              7.250000e+01   \n75%                     1.270000e+00              8.850000e+01   \nmax                     7.920000e+00              1.000000e+02   \n       relative_humidity_rmin_1  precipitation_amount_1  \\\ncount              3.211074e+06            3.211074e+06   \nmean               2.873147e+01            1.599346e+00   \nstd                1.674886e+01            5.359386e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.680000e+01            0.000000e+00   \n50%                2.480000e+01            0.000000e+00   \n75%                3.650000e+01            7.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_1  wind_speed_1        fsca_1         SWE_2  \\\ncount            3.211074e+06  3.211074e+06  3.211074e+06  3.211074e+06   \nmean             2.880967e+02  3.766843e+00  9.761928e+00  5.910524e+00   \nstd              1.704810e+01  1.740410e+00  2.117376e+01  1.580611e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.790000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.886000e+02  3.400000e+00  0.000000e+00  0.000000e+00   \n75%              2.981000e+02  4.600000e+00  0.000000e+00  0.000000e+00   \nmax              3.254000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_2  potential_evapotranspiration_2  \\\ncount            3.211074e+06                    3.211074e+06   \nmean             2.748774e+02                    4.961526e+00   \nstd              1.640089e+01                    3.219742e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.700000e+02                    2.200000e+00   \n50%              2.762000e+02                    4.600000e+00   \n75%              2.817000e+02                    7.200000e+00   \nmax              3.085000e+02                    2.380000e+01   \n       mean_vapor_pressure_deficit_2  relative_humidity_rmax_2  \\\ncount                   3.211074e+06              3.211074e+06   \nmean                    8.767467e-01              7.106159e+01   \nstd                     8.027024e-01              2.084015e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.700000e-01              5.550000e+01   \n50%                     6.300000e-01              7.240000e+01   \n75%                     1.270000e+00              8.850000e+01   \nmax                     7.920000e+00              1.000000e+02   \n       relative_humidity_rmin_2  precipitation_amount_2  \\\ncount              3.211074e+06            3.211074e+06   \nmean               2.867329e+01            1.596229e+00   \nstd                1.674974e+01            5.353499e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.680000e+01            0.000000e+00   \n50%                2.470000e+01            0.000000e+00   \n75%                3.650000e+01            7.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_2  wind_speed_2        fsca_2         SWE_3  \\\ncount            3.211074e+06  3.211074e+06  3.211074e+06  3.211074e+06   \nmean             2.877840e+02  3.760861e+00  9.748230e+00  5.908328e+00   \nstd              1.960479e+01  1.742164e+00  2.116197e+01  1.580584e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.790000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.886000e+02  3.400000e+00  0.000000e+00  0.000000e+00   \n75%              2.981000e+02  4.600000e+00  0.000000e+00  0.000000e+00   \nmax              3.254000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_3  potential_evapotranspiration_3  \\\ncount            3.211074e+06                    3.211074e+06   \nmean             2.745755e+02                    4.957972e+00   \nstd              1.882549e+01                    3.223020e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.700000e+02                    2.200000e+00   \n50%              2.762000e+02                    4.600000e+00   \n75%              2.817000e+02                    7.200000e+00   \nmax              3.085000e+02                    2.380000e+01   \n       mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\ncount                   3.211074e+06              3.211074e+06   \nmean                    8.756875e-01              7.096146e+01   \nstd                     8.026856e-01              2.096297e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.600000e-01              5.540000e+01   \n50%                     6.300000e-01              7.240000e+01   \n75%                     1.270000e+00              8.840000e+01   \nmax                     7.920000e+00              1.000000e+02   \n       relative_humidity_rmin_3  precipitation_amount_3  \\\ncount              3.211074e+06            3.211074e+06   \nmean               2.861654e+01            1.593149e+00   \nstd                1.675190e+01            5.349529e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.670000e+01            0.000000e+00   \n50%                2.470000e+01            0.000000e+00   \n75%                3.640000e+01            7.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_3  wind_speed_3        fsca_3         SWE_4  \\\ncount            3.211074e+06  3.211074e+06  3.211074e+06  3.211074e+06   \nmean             2.874718e+02  3.755791e+00  9.734520e+00  5.906114e+00   \nstd              2.185971e+01  1.745100e+00  2.115014e+01  1.580556e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.790000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.886000e+02  3.400000e+00  0.000000e+00  0.000000e+00   \n75%              2.981000e+02  4.600000e+00  0.000000e+00  0.000000e+00   \nmax              3.254000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_4  potential_evapotranspiration_4  \\\ncount            3.211074e+06                    3.211074e+06   \nmean             2.742726e+02                    4.954449e+00   \nstd              2.096762e+01                    3.226200e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.700000e+02                    2.200000e+00   \n50%              2.762000e+02                    4.600000e+00   \n75%              2.817000e+02                    7.200000e+00   \nmax              3.085000e+02                    2.380000e+01   \n       mean_vapor_pressure_deficit_4  relative_humidity_rmax_4  \\\ncount                   3.211074e+06              3.211074e+06   \nmean                    8.746293e-01              7.086099e+01   \nstd                     8.026588e-01              2.108449e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.600000e-01              5.530000e+01   \n50%                     6.300000e-01              7.230000e+01   \n75%                     1.270000e+00              8.840000e+01   \nmax                     7.920000e+00              1.000000e+02   \n       relative_humidity_rmin_4  precipitation_amount_4  \\\ncount              3.211074e+06            3.211074e+06   \nmean               2.856438e+01            1.590732e+00   \nstd                1.675809e+01            5.345869e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.670000e+01            0.000000e+00   \n50%                2.470000e+01            0.000000e+00   \n75%                3.640000e+01            7.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_4  wind_speed_4        fsca_4         SWE_5  \\\ncount            3.211074e+06  3.211074e+06  3.211074e+06  3.211074e+06   \nmean             2.871593e+02  3.750750e+00  9.720847e+00  5.904152e+00   \nstd              2.389898e+01  1.747776e+00  2.113837e+01  1.580535e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.790000e+02  2.500000e+00  0.000000e+00  0.000000e+00   \n50%              2.886000e+02  3.400000e+00  0.000000e+00  0.000000e+00   \n75%              2.981000e+02  4.600000e+00  0.000000e+00  0.000000e+00   \nmax              3.254000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_5  potential_evapotranspiration_5  \\\ncount            3.211074e+06                    3.211074e+06   \nmean             2.739686e+02                    4.950782e+00   \nstd              2.290657e+01                    3.229421e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.700000e+02                    2.200000e+00   \n50%              2.762000e+02                    4.600000e+00   \n75%              2.817000e+02                    7.200000e+00   \nmax              3.085000e+02                    2.380000e+01   \n       mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\ncount                   3.211074e+06              3.211074e+06   \nmean                    8.735743e-01              7.076048e+01   \nstd                     8.026335e-01              2.120527e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.600000e-01              5.520000e+01   \n50%                     6.200000e-01              7.230000e+01   \n75%                     1.270000e+00              8.830000e+01   \nmax                     7.920000e+00              1.000000e+02   \n       relative_humidity_rmin_5  precipitation_amount_5  \\\ncount              3.211074e+06            3.211074e+06   \nmean               2.851507e+01            1.588183e+00   \nstd                1.676650e+01            5.343368e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.670000e+01            0.000000e+00   \n50%                2.460000e+01            0.000000e+00   \n75%                3.630000e+01            7.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_5  wind_speed_5        fsca_5         SWE_6  \\\ncount            3.211074e+06  3.211074e+06  3.211074e+06  3.211074e+06   \nmean             2.868453e+02  3.745403e+00  9.707143e+00  5.902941e+00   \nstd              2.577429e+01  1.749853e+00  2.112650e+01  1.580518e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.790000e+02  2.500000e+00  0.000000e+00  0.000000e+00   \n50%              2.886000e+02  3.400000e+00  0.000000e+00  0.000000e+00   \n75%              2.981000e+02  4.600000e+00  0.000000e+00  0.000000e+00   \nmax              3.254000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_6  potential_evapotranspiration_6  \\\ncount            3.211074e+06                    3.211074e+06   \nmean             2.736636e+02                    4.947033e+00   \nstd              2.469024e+01                    3.232708e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.700000e+02                    2.200000e+00   \n50%              2.762000e+02                    4.600000e+00   \n75%              2.817000e+02                    7.200000e+00   \nmax              3.085000e+02                    2.380000e+01   \n       mean_vapor_pressure_deficit_6  relative_humidity_rmax_6  \\\ncount                   3.211074e+06              3.211074e+06   \nmean                    8.725189e-01              7.065909e+01   \nstd                     8.025997e-01              2.132392e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.600000e-01              5.510000e+01   \n50%                     6.200000e-01              7.220001e+01   \n75%                     1.270000e+00              8.830000e+01   \nmax                     7.920000e+00              1.000000e+02   \n       relative_humidity_rmin_6  precipitation_amount_6  \\\ncount              3.211074e+06            3.211074e+06   \nmean               2.846746e+01            1.585877e+00   \nstd                1.677555e+01            5.340453e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.660000e+01            0.000000e+00   \n50%                2.460000e+01            0.000000e+00   \n75%                3.630000e+01            7.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_6  wind_speed_6        fsca_6         SWE_7  \\\ncount            3.211074e+06  3.211074e+06  3.211074e+06  3.211074e+06   \nmean             2.865309e+02  3.739675e+00  9.693603e+00  5.902085e+00   \nstd              2.751862e+01  1.750838e+00  2.111489e+01  1.580511e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.790000e+02  2.500000e+00  0.000000e+00  0.000000e+00   \n50%              2.886000e+02  3.400000e+00  0.000000e+00  0.000000e+00   \n75%              2.981000e+02  4.600000e+00  0.000000e+00  0.000000e+00   \nmax              3.254000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_7  potential_evapotranspiration_7  \\\ncount            3.211074e+06                    3.211074e+06   \nmean             2.733573e+02                    4.943259e+00   \nstd              2.635032e+01                    3.235903e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.700000e+02                    2.200000e+00   \n50%              2.761000e+02                    4.600000e+00   \n75%              2.817000e+02                    7.200000e+00   \nmax              3.085000e+02                    2.380000e+01   \n       mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\ncount                   3.211074e+06              3.211074e+06   \nmean                    8.714657e-01              7.055774e+01   \nstd                     8.025681e-01              2.144141e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.600000e-01              5.500000e+01   \n50%                     6.200000e-01              7.210000e+01   \n75%                     1.270000e+00              8.820001e+01   \nmax                     7.920000e+00              1.000000e+02   \n       relative_humidity_rmin_7  precipitation_amount_7  \\\ncount              3.211074e+06            3.211074e+06   \nmean               2.842077e+01            1.583692e+00   \nstd                1.678494e+01            5.336799e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.660000e+01            0.000000e+00   \n50%                2.460000e+01            0.000000e+00   \n75%                3.620000e+01            7.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_7  wind_speed_7        fsca_7  \ncount            3.211074e+06  3.211074e+06  3.211074e+06  \nmean             2.862166e+02  3.734451e+00  9.680205e+00  \nstd              2.915542e+01  1.753039e+00  2.110338e+01  \nmin              0.000000e+00  0.000000e+00  0.000000e+00  \n25%              2.790000e+02  2.500000e+00  0.000000e+00  \n50%              2.886000e+02  3.400000e+00  0.000000e+00  \n75%              2.981000e+02  4.600000e+00  0.000000e+00  \nmax              3.254000e+02  1.960000e+01  9.600000e+01  \nThis is our unique years [2018 2019 2020 2021]\nhow many rows are left in the three water years?                 lat           lon           SWE     swe_value  \\\ncount  2.391441e+06  2.391441e+06  2.391441e+06  2.391441e+06   \nmean   4.158887e+01 -1.137162e+02  4.341821e+00  2.458014e+00   \nstd    3.850395e+00  5.697857e+00  1.417716e+01  7.005064e+00   \nmin    3.141666e+01 -1.245500e+02  0.000000e+00 -8.000000e+00   \n25%    3.863000e+01 -1.192539e+02  0.000000e+00  0.000000e+00   \n50%    4.122500e+01 -1.128593e+02  0.000000e+00  0.000000e+00   \n75%    4.459397e+01 -1.091000e+02  0.000000e+00  0.000000e+00   \nmax    4.900000e+01 -1.005075e+02  2.340000e+02  1.021000e+02   \n       change_in_swe_inch    snow_depth  air_temperature_observed_f  \\\ncount        2.391441e+06  2.391441e+06                2.391441e+06   \nmean        -4.537013e-04  6.432507e+00                1.464136e+01   \nstd          1.216162e+00  1.744774e+01                2.035171e+01   \nmin         -1.370000e+02  0.000000e+00               -8.660000e+01   \n25%          0.000000e+00  0.000000e+00                0.000000e+00   \n50%          0.000000e+00  0.000000e+00                0.000000e+00   \n75%          0.000000e+00  0.000000e+00                3.150000e+01   \nmax          1.200000e+02  2.290000e+02                6.710000e+02   \n       air_temperature_tmmn  potential_evapotranspiration  \\\ncount          2.391441e+06                  2.391441e+06   \nmean           2.753547e+02                  5.010496e+00   \nstd            1.003197e+01                  3.215854e+00   \nmin            0.000000e+00                  0.000000e+00   \n25%            2.697000e+02                  2.275881e+00   \n50%            2.760000e+02                  4.700000e+00   \n75%            2.818000e+02                  7.300000e+00   \nmax            3.085000e+02                  2.380000e+01   \n       mean_vapor_pressure_deficit  relative_humidity_rmax  \\\ncount                 2.391441e+06            2.391441e+06   \nmean                  8.058697e-01            6.997290e+01   \nstd                   7.560035e-01            2.106099e+01   \nmin                   0.000000e+00            0.000000e+00   \n25%                   2.400000e-01            5.360000e+01   \n50%                   5.600000e-01            7.110000e+01   \n75%                   1.160000e+00            8.770001e+01   \nmax                   7.660000e+00            1.000000e+02   \n       relative_humidity_rmin  precipitation_amount  air_temperature_tmmx  \\\ncount            2.391441e+06          2.391441e+06          2.391441e+06   \nmean             2.884618e+01          1.664149e+00          2.884690e+02   \nstd              1.676406e+01          5.520286e+00          1.393679e+01   \nmin              0.000000e+00          0.000000e+00          0.000000e+00   \n25%              1.700000e+01          0.000000e+00          2.791000e+02   \n50%              2.480000e+01          0.000000e+00          2.886000e+02   \n75%              3.660000e+01          8.000000e-01          2.980000e+02   \nmax              1.000000e+02          5.042000e+02          3.254000e+02   \n         wind_speed     Elevation         Slope        Aspect     Curvature  \\\ncount  2.391441e+06  2.391441e+06  2.391441e+06  2.391441e+06  2.391441e+06   \nmean   3.747760e+00  1.948288e+03  9.197840e-01  1.845691e+02 -9.690169e+02   \nstd    1.713472e+00  7.950956e+02  2.520140e+00  1.047452e+02  5.081637e+03   \nmin    0.000000e+00 -1.207950e+00  6.327820e-02 -0.000000e+00 -2.198460e+04   \n25%    2.600000e+00  1.394696e+03  2.445297e-01  9.263547e+01 -3.992808e+03   \n50%    3.400000e+00  1.988180e+03  4.136047e-01  1.880594e+02 -2.811145e+01   \n75%    4.600000e+00  2.547068e+03  8.297043e-01  2.760791e+02  2.280909e+03   \nmax    1.960000e+01  3.978188e+03  9.000000e+01  3.599130e+02  1.757020e+04   \n          Northness      Eastness          fsca  corrected_slope  \\\ncount  2.391441e+06  2.391441e+06  2.391441e+06     2.391441e+06   \nmean   1.212411e-02  2.819455e-02  1.027221e+01     6.585723e+01   \nstd    5.886406e-01  5.822671e-01  2.170014e+01     4.925694e+02   \nmin   -7.853982e-01 -7.853979e-01  0.000000e+00    -9.999000e+03   \n25%   -6.284770e-01 -5.789484e-01  0.000000e+00     8.996606e+01   \n50%    2.564631e-02  6.505793e-02  0.000000e+00     8.998275e+01   \n75%    6.196246e-01  6.337889e-01  0.000000e+00     8.998937e+01   \nmax    7.853978e-01  7.853982e-01  9.600000e+01     8.999759e+01   \n              SWE_1  air_temperature_tmmn_1  potential_evapotranspiration_1  \\\ncount  2.391441e+06            2.391441e+06                    2.391441e+06   \nmean   4.359613e+00            2.753589e+02                    5.007176e+00   \nstd    1.420398e+01            1.003240e+01                    3.216413e+00   \nmin    0.000000e+00            0.000000e+00                    0.000000e+00   \n25%    0.000000e+00            2.697000e+02                    2.230330e+00   \n50%    0.000000e+00            2.760000e+02                    4.700000e+00   \n75%    0.000000e+00            2.818000e+02                    7.300000e+00   \nmax    2.340000e+02            3.085000e+02                    2.380000e+01   \n       mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\ncount                   2.391441e+06              2.391441e+06   \nmean                    8.051771e-01              6.998976e+01   \nstd                     7.554440e-01              2.106144e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.400000e-01              5.360000e+01   \n50%                     5.600000e-01              7.110000e+01   \n75%                     1.160000e+00              8.770001e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_1  precipitation_amount_1  \\\ncount              2.391441e+06            2.391441e+06   \nmean               2.883912e+01            1.663696e+00   \nstd                1.675800e+01            5.518988e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.700000e+01            0.000000e+00   \n50%                2.480000e+01            0.000000e+00   \n75%                3.660000e+01            8.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_1  wind_speed_1        fsca_1         SWE_2  \\\ncount            2.391441e+06  2.391441e+06  2.391441e+06  2.391441e+06   \nmean             2.884699e+02  3.749438e+00  1.027227e+01  4.377509e+00   \nstd              1.393728e+01  1.714124e+00  2.170010e+01  1.423092e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.791000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.886000e+02  3.400000e+00  0.000000e+00  0.000000e+00   \n75%              2.980372e+02  4.600000e+00  0.000000e+00  0.000000e+00   \nmax              3.254000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_2  potential_evapotranspiration_2  \\\ncount            2.391441e+06                    2.391441e+06   \nmean             2.753617e+02                    5.003512e+00   \nstd              1.003263e+01                    3.216509e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.697000e+02                    2.200000e+00   \n50%              2.761000e+02                    4.620804e+00   \n75%              2.818000e+02                    7.300000e+00   \nmax              3.085000e+02                    2.380000e+01   \n       mean_vapor_pressure_deficit_2  relative_humidity_rmax_2  \\\ncount                   2.391441e+06              2.391441e+06   \nmean                    8.045691e-01              7.001623e+01   \nstd                     7.548363e-01              2.105772e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.400000e-01              5.360000e+01   \n50%                     5.600000e-01              7.110000e+01   \n75%                     1.160000e+00              8.770001e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_2  precipitation_amount_2  \\\ncount              2.391441e+06            2.391441e+06   \nmean               2.882335e+01            1.662874e+00   \nstd                1.675549e+01            5.515035e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.700000e+01            0.000000e+00   \n50%                2.480000e+01            0.000000e+00   \n75%                3.660000e+01            8.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_2  wind_speed_2        fsca_2         SWE_3  \\\ncount            2.391441e+06  2.391441e+06  2.391441e+06  2.391441e+06   \nmean             2.884697e+02  3.749883e+00  1.027253e+01  4.395421e+00   \nstd              1.393800e+01  1.714229e+00  2.170024e+01  1.425780e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.791000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.886000e+02  3.400000e+00  0.000000e+00  0.000000e+00   \n75%              2.980988e+02  4.600000e+00  0.000000e+00  0.000000e+00   \nmax              3.254000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_3  potential_evapotranspiration_3  \\\ncount            2.391441e+06                    2.391441e+06   \nmean             2.753606e+02                    4.999427e+00   \nstd              1.003260e+01                    3.216145e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.697000e+02                    2.200000e+00   \n50%              2.761000e+02                    4.600000e+00   \n75%              2.818000e+02                    7.300000e+00   \nmax              3.085000e+02                    2.380000e+01   \n       mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\ncount                   2.391441e+06              2.391441e+06   \nmean                    8.039791e-01              7.005113e+01   \nstd                     7.542158e-01              2.104858e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.400000e-01              5.370000e+01   \n50%                     5.600000e-01              7.120001e+01   \n75%                     1.160000e+00              8.770001e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_3  precipitation_amount_3  \\\ncount              2.391441e+06            2.391441e+06   \nmean               2.880960e+01            1.660582e+00   \nstd                1.675462e+01            5.506569e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.690000e+01            0.000000e+00   \n50%                2.480000e+01            0.000000e+00   \n75%                3.650000e+01            8.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_3  wind_speed_3        fsca_3         SWE_4  \\\ncount            2.391441e+06  2.391441e+06  2.391441e+06  2.391441e+06   \nmean             2.884687e+02  3.748919e+00  1.027282e+01  4.413285e+00   \nstd              1.393917e+01  1.714122e+00  2.170033e+01  1.428456e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.791000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.886000e+02  3.400000e+00  0.000000e+00  0.000000e+00   \n75%              2.981000e+02  4.600000e+00  0.000000e+00  0.000000e+00   \nmax              3.254000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_4  potential_evapotranspiration_4  \\\ncount            2.391441e+06                    2.391441e+06   \nmean             2.753565e+02                    4.995004e+00   \nstd              1.003206e+01                    3.215274e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.697000e+02                    2.200000e+00   \n50%              2.760000e+02                    4.600000e+00   \n75%              2.818000e+02                    7.200090e+00   \nmax              3.085000e+02                    2.380000e+01   \n       mean_vapor_pressure_deficit_4  relative_humidity_rmax_4  \\\ncount                   2.391441e+06              2.391441e+06   \nmean                    8.033356e-01              7.008050e+01   \nstd                     7.536027e-01              2.103613e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.400000e-01              5.370000e+01   \n50%                     5.600000e-01              7.120001e+01   \n75%                     1.150000e+00              8.780000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_4  precipitation_amount_4  \\\ncount              2.391441e+06            2.391441e+06   \nmean               2.880406e+01            1.658081e+00   \nstd                1.675452e+01            5.496392e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.690000e+01            0.000000e+00   \n50%                2.480000e+01            0.000000e+00   \n75%                3.650000e+01            8.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_4  wind_speed_4        fsca_4         SWE_5  \\\ncount            2.391441e+06  2.391441e+06  2.391441e+06  2.391441e+06   \nmean             2.884674e+02  3.748322e+00  1.027297e+01  4.431173e+00   \nstd              1.394066e+01  1.714042e+00  2.170037e+01  1.431127e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.791000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.886000e+02  3.400000e+00  0.000000e+00  0.000000e+00   \n75%              2.981000e+02  4.600000e+00  0.000000e+00  0.000000e+00   \nmax              3.254000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_5  potential_evapotranspiration_5  \\\ncount            2.391441e+06                    2.391441e+06   \nmean             2.753513e+02                    4.990389e+00   \nstd              1.003124e+01                    3.214335e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.697000e+02                    2.200000e+00   \n50%              2.760000e+02                    4.600000e+00   \n75%              2.818000e+02                    7.200000e+00   \nmax              3.085000e+02                    2.380000e+01   \n       mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\ncount                   2.391441e+06              2.391441e+06   \nmean                    8.026368e-01              7.010052e+01   \nstd                     7.530570e-01              2.102722e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.400000e-01              5.380000e+01   \n50%                     5.600000e-01              7.120001e+01   \n75%                     1.150000e+00              8.780000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_5  precipitation_amount_5  \\\ncount              2.391441e+06            2.391441e+06   \nmean               2.880143e+01            1.655614e+00   \nstd                1.675499e+01            5.490040e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.690000e+01            0.000000e+00   \n50%                2.480000e+01            0.000000e+00   \n75%                3.650000e+01            8.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_5  wind_speed_5        fsca_5         SWE_6  \\\ncount            2.391441e+06  2.391441e+06  2.391441e+06  2.391441e+06   \nmean             2.884656e+02  3.748079e+00  1.027297e+01  4.449006e+00   \nstd              1.394311e+01  1.714002e+00  2.170037e+01  1.433786e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.791000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.886000e+02  3.400000e+00  0.000000e+00  0.000000e+00   \n75%              2.981000e+02  4.600000e+00  0.000000e+00  0.000000e+00   \nmax              3.254000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_6  potential_evapotranspiration_6  \\\ncount            2.391441e+06                    2.391441e+06   \nmean             2.753479e+02                    4.985748e+00   \nstd              1.003094e+01                    3.213453e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.697000e+02                    2.200000e+00   \n50%              2.760000e+02                    4.600000e+00   \n75%              2.818000e+02                    7.200000e+00   \nmax              3.085000e+02                    2.380000e+01   \n       mean_vapor_pressure_deficit_6  relative_humidity_rmax_6  \\\ncount                   2.391441e+06              2.391441e+06   \nmean                    8.019089e-01              7.011324e+01   \nstd                     7.525462e-01              2.102099e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.400000e-01              5.380000e+01   \n50%                     5.600000e-01              7.120001e+01   \n75%                     1.150000e+00              8.780000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_6  precipitation_amount_6  \\\ncount              2.391441e+06            2.391441e+06   \nmean               2.880084e+01            1.652197e+00   \nstd                1.675545e+01            5.480193e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.690000e+01            0.000000e+00   \n50%                2.480000e+01            0.000000e+00   \n75%                3.650000e+01            8.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_6  wind_speed_6        fsca_6         SWE_7  \\\ncount            2.391441e+06  2.391441e+06  2.391441e+06  2.391441e+06   \nmean             2.884648e+02  3.748349e+00  1.027307e+01  4.466843e+00   \nstd              1.394534e+01  1.713849e+00  2.170036e+01  1.436438e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.791000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.886000e+02  3.400000e+00  0.000000e+00  0.000000e+00   \n75%              2.981000e+02  4.600000e+00  0.000000e+00  0.000000e+00   \nmax              3.254000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_7  potential_evapotranspiration_7  \\\ncount            2.391441e+06                    2.391441e+06   \nmean             2.753463e+02                    4.981193e+00   \nstd              1.003072e+01                    3.212689e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.697000e+02                    2.200000e+00   \n50%              2.760000e+02                    4.600000e+00   \n75%              2.818000e+02                    7.200000e+00   \nmax              3.085000e+02                    2.380000e+01   \n       mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\ncount                   2.391441e+06              2.391441e+06   \nmean                    8.011821e-01              7.012587e+01   \nstd                     7.519948e-01              2.101740e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.400000e-01              5.380000e+01   \n50%                     5.600000e-01              7.120001e+01   \n75%                     1.150000e+00              8.780000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_7  precipitation_amount_7  \\\ncount              2.391441e+06            2.391441e+06   \nmean               2.879952e+01            1.649103e+00   \nstd                1.675603e+01            5.469411e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.690000e+01            0.000000e+00   \n50%                2.480000e+01            0.000000e+00   \n75%                3.650000e+01            8.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_7  wind_speed_7        fsca_7  \ncount            2.391441e+06  2.391441e+06  2.391441e+06  \nmean             2.884653e+02  3.748932e+00  1.027309e+01  \nstd              1.394772e+01  1.713692e+00  2.170033e+01  \nmin              0.000000e+00  0.000000e+00  0.000000e+00  \n25%              2.791000e+02  2.600000e+00  0.000000e+00  \n50%              2.886000e+02  3.400000e+00  0.000000e+00  \n75%              2.981000e+02  4.600000e+00  0.000000e+00  \nmax              3.254000e+02  1.960000e+01  9.600000e+01  \nhow many groups?  <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7f26eccdd220>\nThis is the dataframe after cumulative columns are added\ncount    2.391441e+06\nmean     2.585618e+03\nstd      4.382011e+03\nmin      0.000000e+00\n25%      0.000000e+00\n50%      0.000000e+00\n75%      4.293335e+03\nmax      3.490531e+04\nName: cumulative_fsca, dtype: float64\nAll the cumulative variables are added successfully! /home/chetana/gridmet_test_run/new_stations_3yrs_cumulative.csv\ndouble check the swe_value statistics: count    2.391441e+06\nmean     2.458014e+00\nstd      7.005064e+00\nmin     -8.000000e+00\n25%      0.000000e+00\n50%      0.000000e+00\n75%      0.000000e+00\nmax      1.021000e+02\nName: swe_value, dtype: float64\ndask_df.shape =  (2391441, 105)\nThe log10 file is saved to /home/chetana/gridmet_test_run/new_stations_3yrs_slope_renamed.csv\nconvert all cumulative columns into log10\nChecking  date\nChecking  lat\nChecking  lon\nChecking  SWE\nChecking  station_name\nChecking  swe_value\nChecking  change_in_swe_inch\nChecking  snow_depth\nChecking  air_temperature_observed_f\nChecking  air_temperature_tmmn\nChecking  potential_evapotranspiration\nChecking  mean_vapor_pressure_deficit\nChecking  relative_humidity_rmax\nChecking  relative_humidity_rmin\nChecking  precipitation_amount\nChecking  air_temperature_tmmx\nChecking  wind_speed\nChecking  Elevation\nChecking  Aspect\nChecking  Curvature\nChecking  Northness\nChecking  Eastness\nChecking  fsca\nChecking  Slope\nChecking  SWE_1\nChecking  air_temperature_tmmn_1\nChecking  potential_evapotranspiration_1\nChecking  mean_vapor_pressure_deficit_1\nChecking  relative_humidity_rmax_1\nChecking  relative_humidity_rmin_1\nChecking  precipitation_amount_1\nChecking  air_temperature_tmmx_1\nChecking  wind_speed_1\nChecking  fsca_1\nChecking  SWE_2\nChecking  air_temperature_tmmn_2\nChecking  potential_evapotranspiration_2\nChecking  mean_vapor_pressure_deficit_2\nChecking  relative_humidity_rmax_2\nChecking  relative_humidity_rmin_2\nChecking  precipitation_amount_2\nChecking  air_temperature_tmmx_2\nChecking  wind_speed_2\nChecking  fsca_2\nChecking  SWE_3\nChecking  air_temperature_tmmn_3\nChecking  potential_evapotranspiration_3\nChecking  mean_vapor_pressure_deficit_3\nChecking  relative_humidity_rmax_3\nChecking  relative_humidity_rmin_3\nChecking  precipitation_amount_3\nChecking  air_temperature_tmmx_3\nChecking  wind_speed_3\nChecking  fsca_3\nChecking  SWE_4\nChecking  air_temperature_tmmn_4\nChecking  potential_evapotranspiration_4\nChecking  mean_vapor_pressure_deficit_4\nChecking  relative_humidity_rmax_4\nChecking  relative_humidity_rmin_4\nChecking  precipitation_amount_4\nChecking  air_temperature_tmmx_4\nChecking  wind_speed_4\nChecking  fsca_4\nChecking  SWE_5\nChecking  air_temperature_tmmn_5\nChecking  potential_evapotranspiration_5\nChecking  mean_vapor_pressure_deficit_5\nChecking  relative_humidity_rmax_5\nChecking  relative_humidity_rmin_5\nChecking  precipitation_amount_5\nChecking  air_temperature_tmmx_5\nChecking  wind_speed_5\nChecking  fsca_5\nChecking  SWE_6\nChecking  air_temperature_tmmn_6\nChecking  potential_evapotranspiration_6\nChecking  mean_vapor_pressure_deficit_6\nChecking  relative_humidity_rmax_6\nChecking  relative_humidity_rmin_6\nChecking  precipitation_amount_6\nChecking  air_temperature_tmmx_6\nChecking  wind_speed_6\nChecking  fsca_6\nChecking  SWE_7\nChecking  air_temperature_tmmn_7\nChecking  potential_evapotranspiration_7\nChecking  mean_vapor_pressure_deficit_7\nChecking  relative_humidity_rmax_7\nChecking  relative_humidity_rmin_7\nChecking  precipitation_amount_7\nChecking  air_temperature_tmmx_7\nChecking  wind_speed_7\nChecking  fsca_7\nChecking  water_year\nChecking  cumulative_SWE\nconverted cumulative_SWE to log10\nChecking  cumulative_air_temperature_tmmn\nconverted cumulative_air_temperature_tmmn to log10\nChecking  cumulative_potential_evapotranspiration\nconverted cumulative_potential_evapotranspiration to log10\nChecking  cumulative_mean_vapor_pressure_deficit\nconverted cumulative_mean_vapor_pressure_deficit to log10\nChecking  cumulative_relative_humidity_rmax\nconverted cumulative_relative_humidity_rmax to log10\nChecking  cumulative_relative_humidity_rmin\nconverted cumulative_relative_humidity_rmin to log10\nChecking  cumulative_precipitation_amount\nconverted cumulative_precipitation_amount to log10\nChecking  cumulative_air_temperature_tmmx\nconverted cumulative_air_temperature_tmmx to log10\nChecking  cumulative_wind_speed\nconverted cumulative_wind_speed to log10\nChecking  cumulative_fsca\nconverted cumulative_fsca to log10\ndask_df.shape =  (2391441, 105)\nThe log10 file is saved to /home/chetana/gridmet_test_run/new_stations_3yrs_all_cols_log10.csv\nthe number of the total rows:  2391441\ndeduplicated_df.to_csv('deduplicated_training_points_final.csv', index=False)\n",
  "history_begin_time" : 1714963792833,
  "history_end_time" : 1714970134260,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "21x3xvix41c",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714956083697,
  "history_end_time" : 1714956344017,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "vbx6zc",
  "indicator" : "Stopped"
},{
  "history_id" : "80ZPsNyBk5ca",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\nimport dask.dataframe as dd\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    if column_name == \"SWE\":\n      mask = (y > 240) | y.isnull()\n    elif column_name == \"fsca\":\n      y = y.replace([225, 237, 239], 0)\n      y[y < 0] = 0\n      mask = (y > 100) | y.isnull()\n    else:\n      mask = y.isnull()\n\n    # Check if all elements in the mask array are True\n    all_true = np.all(mask)\n\n    if all_true:\n      df[column_name] = 0\n    else:\n      # Perform interpolation\n      new_y = np.interp(x, x[~mask], y[~mask])\n      # Replace missing values with interpolated values\n      df[column_name] = new_y\n\n    if np.any(df[column_name].isnull()):\n      raise ValueError(\"Single group: shouldn't have null values here\")\n        \n    return df\n\ndef convert_to_time_series(input_csv, output_csv, force=False):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                         'AMSR_SWE': 'SWE',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv) and not force:\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['SWE'] > 240):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        filled_data.to_csv(filled_csv, index=False)\n        \n        print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv) and not force:\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n        result.fillna(0, inplace=True)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv, force=False):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_cumulated = [\n      \"SWE\",\n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2018-10-01')\n    end_date = pd.to_datetime('2021-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df[\"cumulative_fsca\"].describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n\n    \ndef assign_zero_swe_value_to_all_fsca_zero_rows(na_filled_csv, non_station_zero_csv, force=False):\n    \n    # Define the conditions\n    condition_column = 'fsca'\n    target_column = 'swe_value'\n    values_to_check = [0, 225, 237, 239]\n    \n    \n    df = pd.read_csv(na_filled_csv, dtype={'station_name': 'object'})\n    empty_count = df[target_column].isnull().values.ravel().sum()\n    \n    print(f\"The empty number of rows are {empty_count} before filling in\")\n    print(\"double check the swe_value statistics before filling in:\", df[\"swe_value\"].describe())\n    \n    rows_less_than_zero = (df[target_column] < 0).sum()\n    print(\"Number of rows where '{}' is less than 0: {}\".format(target_column, rows_less_than_zero))\n    \n\n    # Mask the target column where the condition is met\n    df[target_column] = df[target_column].mask(\n        (df[target_column].isna()) & df[condition_column].isin(values_to_check),\n        0\n    )\n    \n    empty_count = df[target_column].isnull().values.ravel().sum()\n    \n    print(f\"The empty number of rows are {empty_count} after filling in\")\n    \n    print(\"total dataframe row number : \", len(df))\n    \n    df.to_csv(non_station_zero_csv, index=False)\n    \n    print(f\"The rows without snotel but fsca is zero or land or water or ocean are set to 0! {non_station_zero_csv}\")\n    print(\"double check the swe_value statistics after filling in:\", df[\"swe_value\"].describe())\n    \n    \ndef clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path, force=False):\n    # Read Dask DataFrame from CSV\n    dask_df = dd.read_csv(current_ready_csv_path, dtype={'station_name': 'object'})\n\n    # Remove rows where 'swe_value' is empty\n    dask_df_filtered = dask_df.dropna(subset=['swe_value'])\n\n    # Save the result to a new CSV file\n    dask_df_filtered.to_csv(cleaned_csv_path, index=False, single_file=True)\n    print(\"dask_df_filtered.shape = \", dask_df_filtered.shape)\n    print(f\"The filtered csv with no swe values is saved to {cleaned_csv_path}\")\n\ndef rename_corrected_slope(corrected_slope_path, renamed_slope_path, force=False):\n    df = pd.read_csv(corrected_slope_path, dtype={'station_name': 'object'})\n    df.drop(columns=['Slope'], inplace=True)\n\t# Rename 'column_to_rename' to 'old_column'\n    df.rename(columns={'corrected_slope': 'Slope'}, inplace=True)\n    df.to_csv(renamed_slope_path, index=False)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {renamed_slope_path}\")\n    \ndef log10_all_fields(cleaned_csv_path, logged_csv_path, force=False):\n    print(\"convert all cumulative columns into log10\")\n    # Read Dask DataFrame from CSV\n    df = pd.read_csv(cleaned_csv_path, dtype={'station_name': 'object'})\n    \n    # Get columns with \"cumulative\" in their names\n    for col in df.columns:\n        print(\"Checking \", col)\n        if \"cumulative\" in col:\n\t        # Apply log10 transformation to selected columns\n            df[col] = np.log10(df[col] + 0.1)  # Adding 1 to avoid log(0)\n            print(f\"converted {col} to log10\")\n\n    df.to_csv(logged_csv_path, index=False)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {logged_csv_path}\")\n\n    \n    \nif __name__ == \"__main__\":\n    # Define file paths for various CSV files\n    # current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n    current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv'\n    non_station_counted_csv_path = f'{work_dir}/new_stations_3yrs_fill_empty_snotel.csv'\n    cleaned_csv_path = f\"{work_dir}/new_stations_3yrs_cleaned.csv\"\n    target_time_series_csv_path = f'{work_dir}/new_stations_3yrs_time_series.csv'\n    backup_time_series_csv_path = f'{work_dir}/new_stations_3yrs_time_series_backup.csv'\n    # target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n    target_time_series_cumulative_csv_path = f'{work_dir}/new_stations_3yrs_cumulative.csv'\n    slope_renamed_path = f'{work_dir}/new_stations_3yrs_slope_renamed.csv'\n    logged_csv_path = f'{work_dir}/new_stations_3yrs_all_cols_log10.csv'\n    \n    # filling the non station rows with fsca indicating no snow\n    assign_zero_swe_value_to_all_fsca_zero_rows(current_ready_csv_path, non_station_counted_csv_path, force=True)\n    \n    # remove the empty swe_value rows first\n    clean_non_swe_rows(non_station_counted_csv_path, cleaned_csv_path, force=True)\n  \n    # Uncomment this line to execute the 'convert_to_time_series' function\n    convert_to_time_series(cleaned_csv_path, target_time_series_csv_path, force=True)\n\n    # Uncomment this line to execute the 'add_cumulative_columns' function\n    add_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path, force=True)\n    \n    # Rename the corrected slope to slope\n    rename_corrected_slope(target_time_series_cumulative_csv_path, slope_renamed_path, force=True)\n    \n    # convert all cumulative columns to log10\n    log10_all_fields(slope_renamed_path, logged_csv_path, force=True)\n    \n    df = pd.read_csv(logged_csv_path, dtype={'station_name': 'object'})\n    print(\"the number of the total rows: \", len(df))\n    \n    deduplicated_df = df.drop_duplicates(subset=['lat', 'lon'])\n    # Export the deduplicated DataFrame to a CSV file\n    deduplicated_df.to_csv(f'{work_dir}/deduplicated_training_points_final.csv', index=False)\n    print(\"deduplicated_df.to_csv('deduplicated_training_points_final.csv', index=False)\")\n    \n",
  "history_output" : "today date = 2024-05-06\ntest start date:  2024-05-01\ntest end date:  2023-10-11\n/home/zsun\nThe empty number of rows are 13750843 before filling in\ndouble check the swe_value statistics before filling in: count    1.324517e+06\nmean     5.606424e+00\nstd      9.727693e+00\nmin     -8.000000e+00\n25%      0.000000e+00\n50%      4.000000e-01\n75%      7.800000e+00\nmax      1.066000e+02\nName: swe_value, dtype: float64\nNumber of rows where 'swe_value' is less than 0: 19\nThe empty number of rows are 11864286 after filling in\ntotal dataframe row number :  15075360\nThe rows without snotel but fsca is zero or land or water or ocean are set to 0! /home/zsun/gridmet_test_run/new_stations_3yrs_fill_empty_snotel.csv\ndouble check the swe_value statistics after filling in: count    3.211074e+06\nmean     2.312561e+00\nstd      6.830066e+00\nmin     -8.000000e+00\n25%      0.000000e+00\n50%      0.000000e+00\n75%      0.000000e+00\nmax      1.066000e+02\nName: swe_value, dtype: float64\ndask_df_filtered.shape =  (Delayed('int-2f047e3e-ad45-4235-b3a2-8fe407323715'), 25)\nThe filtered csv with no swe values is saved to /home/zsun/gridmet_test_run/new_stations_3yrs_cleaned.csv\nAll current columns:  Index(['date', 'lat', 'lon', 'AMSR_SWE', 'station_name', 'swe_value',\n       'change_in_swe_inch', 'snow_depth', 'air_temperature_observed_f',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'fsca', 'corrected_slope'],\n      dtype='object')\nStart to fill in the missing values\nNew filled values csv is saved to /home/zsun/gridmet_test_run/new_stations_3yrs_time_series.csv_gap_filled.csv\nStart to create the training csv with previous 7 days columns\nNew data is saved to /home/zsun/gridmet_test_run/new_stations_3yrs_time_series.csv\nFile is backed up to /home/zsun/gridmet_test_run/new_stations_3yrs_time_series_backup.csv\nthe column statistics from time series before cumulative:                  lat           lon           SWE     swe_value  \\\ncount  3.211074e+06  3.211074e+06  3.211074e+06  3.211074e+06   \nmean   4.156352e+01 -1.136765e+02  5.914814e+00  2.312561e+00   \nstd    3.850046e+00  5.696848e+00  1.580655e+01  6.830066e+00   \nmin    3.141666e+01 -1.245500e+02  0.000000e+00 -8.000000e+00   \n25%    3.855000e+01 -1.192220e+02  0.000000e+00  0.000000e+00   \n50%    4.118467e+01 -1.128238e+02  0.000000e+00  0.000000e+00   \n75%    4.457462e+01 -1.090667e+02  0.000000e+00  0.000000e+00   \n",
  "history_begin_time" : 1714954122043,
  "history_end_time" : 1714954866713,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "yXOCOjTdNLZi",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\nimport dask.dataframe as dd\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    if column_name == \"SWE\":\n      mask = (y > 240) | y.isnull()\n    elif column_name == \"fsca\":\n      y = y.replace([225, 237, 239], 0)\n      y[y < 0] = 0\n      mask = (y > 100) | y.isnull()\n    else:\n      mask = y.isnull()\n\n    # Check if all elements in the mask array are True\n    all_true = np.all(mask)\n\n    if all_true:\n      df[column_name] = 0\n    else:\n      # Perform interpolation\n      new_y = np.interp(x, x[~mask], y[~mask])\n      # Replace missing values with interpolated values\n      df[column_name] = new_y\n\n    if np.any(df[column_name].isnull()):\n      raise ValueError(\"Single group: shouldn't have null values here\")\n        \n    return df\n\ndef convert_to_time_series(input_csv, output_csv, force=False):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                         'AMSR_SWE': 'SWE',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv) and not force:\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['SWE'] > 240):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        filled_data.to_csv(filled_csv, index=False)\n        \n        print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv) and not force:\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n        result.fillna(0, inplace=True)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv, force=False):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_cumulated = [\n      \"SWE\",\n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2018-10-01')\n    end_date = pd.to_datetime('2021-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df[\"cumulative_fsca\"].describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n\n    \ndef assign_zero_swe_value_to_all_fsca_zero_rows(na_filled_csv, non_station_zero_csv, force=False):\n    \n    # Define the conditions\n    condition_column = 'fsca'\n    target_column = 'swe_value'\n    values_to_check = [0, 225, 237, 239]\n    \n    \n    df = pd.read_csv(na_filled_csv, dtype={'station_name': 'object'})\n    empty_count = df[target_column].isnull().values.ravel().sum()\n    \n    print(f\"The empty number of rows are {empty_count} before filling in\")\n    print(\"double check the swe_value statistics before filling in:\", df[\"swe_value\"].describe())\n    \n    rows_less_than_zero = (df[target_column] < 0).sum()\n    print(\"Number of rows where '{}' is less than 0: {}\".format(target_column, rows_less_than_zero))\n    \n\n    # Mask the target column where the condition is met\n    df[target_column] = df[target_column].mask(\n        (df[target_column].isna()) & df[condition_column].isin(values_to_check),\n        0\n    )\n    \n    empty_count = df[target_column].isnull().values.ravel().sum()\n    \n    print(f\"The empty number of rows are {empty_count} after filling in\")\n    \n    print(\"total dataframe row number : \", len(df))\n    \n    df.to_csv(non_station_zero_csv, index=False)\n    \n    print(f\"The rows without snotel but fsca is zero or land or water or ocean are set to 0! {non_station_zero_csv}\")\n    print(\"double check the swe_value statistics after filling in:\", df[\"swe_value\"].describe())\n    \n    \ndef clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path, force=False):\n    # Read Dask DataFrame from CSV\n    dask_df = dd.read_csv(current_ready_csv_path, dtype={'station_name': 'object'})\n\n    # Remove rows where 'swe_value' is empty\n    dask_df_filtered = dask_df.dropna(subset=['swe_value'])\n\n    # Save the result to a new CSV file\n    dask_df_filtered.to_csv(cleaned_csv_path, index=False, single_file=True)\n    print(\"dask_df_filtered.shape = \", dask_df_filtered.shape)\n    print(f\"The filtered csv with no swe values is saved to {cleaned_csv_path}\")\n\ndef rename_corrected_slope(corrected_slope_path, renamed_slope_path, force=False):\n    df = pd.read_csv(corrected_slope_path, dtype={'station_name': 'object'})\n    df.drop(columns=['Slope'], inplace=True)\n\t# Rename 'column_to_rename' to 'old_column'\n    df.rename(columns={'corrected_slope': 'Slope'}, inplace=True)\n    df.to_csv(renamed_slope_path, index=False)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {renamed_slope_path}\")\n    \ndef log10_all_fields(cleaned_csv_path, logged_csv_path, force=False):\n    print(\"convert all cumulative columns into log10\")\n    # Read Dask DataFrame from CSV\n    df = pd.read_csv(cleaned_csv_path, dtype={'station_name': 'object'})\n    \n    # Get columns with \"cumulative\" in their names\n    for col in df.columns:\n        print(\"Checking \", col)\n        if \"cumulative\" in col:\n\t        # Apply log10 transformation to selected columns\n            df[col] = np.log10(df[col] + 0.1)  # Adding 1 to avoid log(0)\n            print(f\"converted {col} to log10\")\n\n    df.to_csv(logged_csv_path, index=False)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {logged_csv_path}\")\n\n    \n    \nif __name__ == \"__main__\":\n    # Define file paths for various CSV files\n    # current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n    current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv'\n    non_station_counted_csv_path = f'{work_dir}/new_stations_3yrs_fill_empty_snotel.csv'\n    cleaned_csv_path = f\"{work_dir}/new_stations_3yrs_cleaned.csv\"\n    target_time_series_csv_path = f'{work_dir}/new_stations_3yrs_time_series.csv'\n    backup_time_series_csv_path = f'{work_dir}/new_stations_3yrs_time_series_backup.csv'\n    # target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n    target_time_series_cumulative_csv_path = f'{work_dir}/new_stations_3yrs_cumulative.csv'\n    slope_renamed_path = f'{work_dir}/new_stations_3yrs_slope_renamed.csv'\n    logged_csv_path = f'{work_dir}/new_stations_3yrs_all_cols_log10.csv'\n    \n    # filling the non station rows with fsca indicating no snow\n    assign_zero_swe_value_to_all_fsca_zero_rows(current_ready_csv_path, non_station_counted_csv_path, force=True)\n    \n    # remove the empty swe_value rows first\n    clean_non_swe_rows(non_station_counted_csv_path, cleaned_csv_path, force=True)\n  \n    # Uncomment this line to execute the 'convert_to_time_series' function\n    convert_to_time_series(cleaned_csv_path, target_time_series_csv_path, force=True)\n\n    # Uncomment this line to execute the 'add_cumulative_columns' function\n    add_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path, force=True)\n    \n    # Rename the corrected slope to slope\n    rename_corrected_slope(target_time_series_cumulative_csv_path, slope_renamed_path, force=True)\n    \n    # convert all cumulative columns to log10\n    log10_all_fields(slope_renamed_path, logged_csv_path, force=True)\n    \n    df = pd.read_csv(logged_csv_path, dtype={'station_name': 'object'})\n    print(\"the number of the total rows: \", len(df))\n    \n    deduplicated_df = df.drop_duplicates(subset=['lat', 'lon'])\n    # Export the deduplicated DataFrame to a CSV file\n    deduplicated_df.to_csv(f'{work_dir}/deduplicated_training_points_final.csv', index=False)\n    print(\"deduplicated_df.to_csv('deduplicated_training_points_final.csv', index=False)\")\n    \n",
  "history_output" : "today date = 2024-05-06\ntest start date:  2024-05-01\ntest end date:  2023-10-11\n/home/zsun\nTraceback (most recent call last):\n  File \"convert_to_time_series.py\", line 6, in <module>\n    import dask.dataframe as dd\nModuleNotFoundError: No module named 'dask'\nbash: line 0: exit: $: numeric argument required\n",
  "history_begin_time" : 1714954072386,
  "history_end_time" : 1714954076752,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "8wMAZXYVS6z1",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\nimport dask.dataframe as dd\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    if column_name == \"SWE\":\n      mask = (y > 240) | y.isnull()\n    elif column_name == \"fsca\":\n      y = y.replace([225, 237, 239], 0)\n      y[y < 0] = 0\n      mask = (y > 100) | y.isnull()\n    else:\n      mask = y.isnull()\n\n    # Check if all elements in the mask array are True\n    all_true = np.all(mask)\n\n    if all_true:\n      df[column_name] = 0\n    else:\n      # Perform interpolation\n      new_y = np.interp(x, x[~mask], y[~mask])\n      # Replace missing values with interpolated values\n      df[column_name] = new_y\n\n    if np.any(df[column_name].isnull()):\n      raise ValueError(\"Single group: shouldn't have null values here\")\n        \n    return df\n\ndef convert_to_time_series(input_csv, output_csv, force=False):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                         'AMSR_SWE': 'SWE',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv) and not force:\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['SWE'] > 240):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        filled_data.to_csv(filled_csv, index=False)\n        \n        print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv) and not force:\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n        result.fillna(0, inplace=True)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv, force=False):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_cumulated = [\n      \"SWE\",\n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2018-10-01')\n    end_date = pd.to_datetime('2021-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df[\"cumulative_fsca\"].describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n\n    \ndef assign_zero_swe_value_to_all_fsca_zero_rows(na_filled_csv, non_station_zero_csv, force=False):\n    \n    # Define the conditions\n    condition_column = 'fsca'\n    target_column = 'swe_value'\n    values_to_check = [0, 225, 237, 239]\n    \n    \n    df = pd.read_csv(na_filled_csv, dtype={'station_name': 'object'})\n    empty_count = df[target_column].isnull().values.ravel().sum()\n    \n    print(f\"The empty number of rows are {empty_count} before filling in\")\n    print(\"double check the swe_value statistics before filling in:\", df[\"swe_value\"].describe())\n    \n    rows_less_than_zero = (df[target_column] < 0).sum()\n    print(\"Number of rows where '{}' is less than 0: {}\".format(target_column, rows_less_than_zero))\n    \n\n    # Mask the target column where the condition is met\n    df[target_column] = df[target_column].mask(\n        (df[target_column].isna()) & df[condition_column].isin(values_to_check),\n        0\n    )\n    \n    empty_count = df[target_column].isnull().values.ravel().sum()\n    \n    print(f\"The empty number of rows are {empty_count} after filling in\")\n    \n    print(\"total dataframe row number : \", len(df))\n    \n    df.to_csv(non_station_zero_csv, index=False)\n    \n    print(f\"The rows without snotel but fsca is zero or land or water or ocean are set to 0! {non_station_zero_csv}\")\n    print(\"double check the swe_value statistics after filling in:\", df[\"swe_value\"].describe())\n    \n    \ndef clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path, force=False):\n    # Read Dask DataFrame from CSV\n    dask_df = dd.read_csv(current_ready_csv_path, dtype={'station_name': 'object'})\n\n    # Remove rows where 'swe_value' is empty\n    dask_df_filtered = dask_df.dropna(subset=['swe_value'])\n\n    # Save the result to a new CSV file\n    dask_df_filtered.to_csv(cleaned_csv_path, index=False, single_file=True)\n    print(\"dask_df_filtered.shape = \", dask_df_filtered.shape)\n    print(f\"The filtered csv with no swe values is saved to {cleaned_csv_path}\")\n\ndef rename_corrected_slope(corrected_slope_path, renamed_slope_path, force=False):\n    df = pd.read_csv(corrected_slope_path, dtype={'station_name': 'object'})\n    df.drop(columns=['Slope'], inplace=True)\n\t# Rename 'column_to_rename' to 'old_column'\n    df.rename(columns={'corrected_slope': 'Slope'}, inplace=True)\n    df.to_csv(renamed_slope_path, index=False)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {renamed_slope_path}\")\n    \ndef log10_all_fields(cleaned_csv_path, logged_csv_path, force=False):\n    print(\"convert all cumulative columns into log10\")\n    # Read Dask DataFrame from CSV\n    df = pd.read_csv(cleaned_csv_path, dtype={'station_name': 'object'})\n    \n    # Get columns with \"cumulative\" in their names\n    for col in df.columns:\n        print(\"Checking \", col)\n        if \"cumulative\" in col:\n\t        # Apply log10 transformation to selected columns\n            df[col] = np.log10(df[col] + 0.1)  # Adding 1 to avoid log(0)\n            print(f\"converted {col} to log10\")\n\n    df.to_csv(logged_csv_path, index=False)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {logged_csv_path}\")\n\n    \n    \nif __name__ == \"__main__\":\n    # Define file paths for various CSV files\n    # current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n    current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv'\n    non_station_counted_csv_path = f'{work_dir}/new_stations_3yrs_fill_empty_snotel.csv'\n    cleaned_csv_path = f\"{work_dir}/new_stations_3yrs_cleaned.csv\"\n    target_time_series_csv_path = f'{work_dir}/new_stations_3yrs_time_series.csv'\n    backup_time_series_csv_path = f'{work_dir}/new_stations_3yrs_time_series_backup.csv'\n    # target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n    target_time_series_cumulative_csv_path = f'{work_dir}/new_stations_3yrs_cumulative.csv'\n    slope_renamed_path = f'{work_dir}/new_stations_3yrs_slope_renamed.csv'\n    logged_csv_path = f'{work_dir}/new_stations_3yrs_all_cols_log10.csv'\n    \n    # filling the non station rows with fsca indicating no snow\n    assign_zero_swe_value_to_all_fsca_zero_rows(current_ready_csv_path, non_station_counted_csv_path, force=True)\n    \n    # remove the empty swe_value rows first\n    clean_non_swe_rows(non_station_counted_csv_path, cleaned_csv_path, force=True)\n  \n    # Uncomment this line to execute the 'convert_to_time_series' function\n    convert_to_time_series(cleaned_csv_path, target_time_series_csv_path, force=True)\n\n    # Uncomment this line to execute the 'add_cumulative_columns' function\n    add_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path, force=True)\n    \n    # Rename the corrected slope to slope\n    rename_corrected_slope(target_time_series_cumulative_csv_path, slope_renamed_path, force=True)\n    \n    # convert all cumulative columns to log10\n    log10_all_fields(slope_renamed_path, logged_csv_path, force=True)\n    \n    df = pd.read_csv(logged_csv_path, dtype={'station_name': 'object'})\n    print(\"the number of the total rows: \", len(df))\n    \n    deduplicated_df = df.drop_duplicates(subset=['lat', 'lon'])\n    # Export the deduplicated DataFrame to a CSV file\n    deduplicated_df.to_csv(f'{work_dir}/deduplicated_training_points_final.csv', index=False)\n    print(\"deduplicated_df.to_csv('deduplicated_training_points_final.csv', index=False)\")\n    \n",
  "history_output" : "Traceback (most recent call last):\n  File \"convert_to_time_series.py\", line 3, in <module>\n    from snowcast_utils import work_dir\n  File \"/home/zsun/gw-workspace/8wMAZXYVS6z1/snowcast_utils.py\", line 7, in <module>\n    import matplotlib.pyplot as plt\nModuleNotFoundError: No module named 'matplotlib'\nbash: line 0: exit: $: numeric argument required\n",
  "history_begin_time" : 1714954046718,
  "history_end_time" : 1714954049503,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "Y61nOIzlUIMy",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\nimport dask.dataframe as dd\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    if column_name == \"SWE\":\n      mask = (y > 240) | y.isnull()\n    elif column_name == \"fsca\":\n      y = y.replace([225, 237, 239], 0)\n      y[y < 0] = 0\n      mask = (y > 100) | y.isnull()\n    else:\n      mask = y.isnull()\n\n    # Check if all elements in the mask array are True\n    all_true = np.all(mask)\n\n    if all_true:\n      df[column_name] = 0\n    else:\n      # Perform interpolation\n      new_y = np.interp(x, x[~mask], y[~mask])\n      # Replace missing values with interpolated values\n      df[column_name] = new_y\n\n    if np.any(df[column_name].isnull()):\n      raise ValueError(\"Single group: shouldn't have null values here\")\n        \n    return df\n\ndef convert_to_time_series(input_csv, output_csv, force=False):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                         'AMSR_SWE': 'SWE',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv) and not force:\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['SWE'] > 240):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        filled_data.to_csv(filled_csv, index=False)\n        \n        print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv) and not force:\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n        result.fillna(0, inplace=True)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv, force=False):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_cumulated = [\n      \"SWE\",\n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2018-10-01')\n    end_date = pd.to_datetime('2021-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df[\"cumulative_fsca\"].describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n\n    \ndef assign_zero_swe_value_to_all_fsca_zero_rows(na_filled_csv, non_station_zero_csv, force=False):\n    \n    # Define the conditions\n    condition_column = 'fsca'\n    target_column = 'swe_value'\n    values_to_check = [0, 225, 237, 239]\n    \n    \n    df = pd.read_csv(na_filled_csv, dtype={'station_name': 'object'})\n    empty_count = df[target_column].isnull().values.ravel().sum()\n    \n    print(f\"The empty number of rows are {empty_count} before filling in\")\n    print(\"double check the swe_value statistics before filling in:\", df[\"swe_value\"].describe())\n    \n    rows_less_than_zero = (df[target_column] < 0).sum()\n    print(\"Number of rows where '{}' is less than 0: {}\".format(target_column, rows_less_than_zero))\n    \n\n    # Mask the target column where the condition is met\n    df[target_column] = df[target_column].mask(\n        (df[target_column].isna()) & df[condition_column].isin(values_to_check),\n        0\n    )\n    \n    empty_count = df[target_column].isnull().values.ravel().sum()\n    \n    print(f\"The empty number of rows are {empty_count} after filling in\")\n    \n    print(\"total dataframe row number : \", len(df))\n    \n    df.to_csv(non_station_zero_csv, index=False)\n    \n    print(f\"The rows without snotel but fsca is zero or land or water or ocean are set to 0! {non_station_zero_csv}\")\n    print(\"double check the swe_value statistics after filling in:\", df[\"swe_value\"].describe())\n    \n    \ndef clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path, force=False):\n    # Read Dask DataFrame from CSV\n    dask_df = dd.read_csv(current_ready_csv_path, dtype={'station_name': 'object'})\n\n    # Remove rows where 'swe_value' is empty\n    dask_df_filtered = dask_df.dropna(subset=['swe_value'])\n\n    # Save the result to a new CSV file\n    dask_df_filtered.to_csv(cleaned_csv_path, index=False, single_file=True)\n    print(\"dask_df_filtered.shape = \", dask_df_filtered.shape)\n    print(f\"The filtered csv with no swe values is saved to {cleaned_csv_path}\")\n\ndef rename_corrected_slope(corrected_slope_path, renamed_slope_path, force=False):\n    df = pd.read_csv(corrected_slope_path, dtype={'station_name': 'object'})\n    df.drop(columns=['Slope'], inplace=True)\n\t# Rename 'column_to_rename' to 'old_column'\n    df.rename(columns={'corrected_slope': 'Slope'}, inplace=True)\n    df.to_csv(renamed_slope_path, index=False)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {renamed_slope_path}\")\n    \ndef log10_all_fields(cleaned_csv_path, logged_csv_path, force=False):\n    print(\"convert all cumulative columns into log10\")\n    # Read Dask DataFrame from CSV\n    df = pd.read_csv(cleaned_csv_path, dtype={'station_name': 'object'})\n    \n    # Get columns with \"cumulative\" in their names\n    for col in df.columns:\n        print(\"Checking \", col)\n        if \"cumulative\" in col:\n\t        # Apply log10 transformation to selected columns\n            df[col] = np.log10(df[col] + 0.1)  # Adding 1 to avoid log(0)\n            print(f\"converted {col} to log10\")\n\n    df.to_csv(logged_csv_path, index=False)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {logged_csv_path}\")\n\n    \n    \nif __name__ == \"__main__\":\n    # Define file paths for various CSV files\n    # current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n    current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv'\n    non_station_counted_csv_path = f'{work_dir}/new_stations_3yrs_fill_empty_snotel.csv'\n    cleaned_csv_path = f\"{work_dir}/new_stations_3yrs_cleaned.csv\"\n    target_time_series_csv_path = f'{work_dir}/new_stations_3yrs_time_series.csv'\n    backup_time_series_csv_path = f'{work_dir}/new_stations_3yrs_time_series_backup.csv'\n    # target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n    target_time_series_cumulative_csv_path = f'{work_dir}/new_stations_3yrs_cumulative.csv'\n    slope_renamed_path = f'{work_dir}/new_stations_3yrs_slope_renamed.csv'\n    logged_csv_path = f'{work_dir}/new_stations_3yrs_all_cols_log10.csv'\n    \n    # filling the non station rows with fsca indicating no snow\n    assign_zero_swe_value_to_all_fsca_zero_rows(current_ready_csv_path, non_station_counted_csv_path, force=True)\n    \n    # remove the empty swe_value rows first\n    clean_non_swe_rows(non_station_counted_csv_path, cleaned_csv_path, force=True)\n  \n    # Uncomment this line to execute the 'convert_to_time_series' function\n    convert_to_time_series(cleaned_csv_path, target_time_series_csv_path, force=True)\n\n    # Uncomment this line to execute the 'add_cumulative_columns' function\n    add_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path, force=True)\n    \n    # Rename the corrected slope to slope\n    rename_corrected_slope(target_time_series_cumulative_csv_path, slope_renamed_path, force=True)\n    \n    # convert all cumulative columns to log10\n    log10_all_fields(slope_renamed_path, logged_csv_path, force=True)\n    \n    df = pd.read_csv(logged_csv_path, dtype={'station_name': 'object'})\n    print(\"the number of the total rows: \", len(df))\n    \n    deduplicated_df = df.drop_duplicates(subset=['lat', 'lon'])\n    # Export the deduplicated DataFrame to a CSV file\n    deduplicated_df.to_csv(f'{work_dir}/deduplicated_training_points_final.csv', index=False)\n    print(\"deduplicated_df.to_csv('deduplicated_training_points_final.csv', index=False)\")\n    \n",
  "history_output" : "Traceback (most recent call last):\n  File \"convert_to_time_series.py\", line 1, in <module>\n    import pandas as pd\nModuleNotFoundError: No module named 'pandas'\nbash: line 0: exit: $: numeric argument required\n",
  "history_begin_time" : 1714953892013,
  "history_end_time" : 1714953893900,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "duavkuhwpyv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714944537331,
  "history_end_time" : 1714944767580,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "vbx6zc",
  "indicator" : "Stopped"
},{
  "history_id" : "jc2myastubw",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714943546227,
  "history_end_time" : 1714943546227,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "KinRVBJf4JDN",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\nimport dask.dataframe as dd\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    if column_name == \"SWE\":\n      mask = (y > 240) | y.isnull()\n    elif column_name == \"fsca\":\n      y = y.replace([225, 237, 239], 0)\n      y[y < 0] = 0\n      mask = (y > 100) | y.isnull()\n    else:\n      mask = y.isnull()\n\n    # Check if all elements in the mask array are True\n    all_true = np.all(mask)\n\n    if all_true:\n      df[column_name] = 0\n    else:\n      # Perform interpolation\n      new_y = np.interp(x, x[~mask], y[~mask])\n      # Replace missing values with interpolated values\n      df[column_name] = new_y\n\n    if np.any(df[column_name].isnull()):\n      raise ValueError(\"Single group: shouldn't have null values here\")\n        \n    return df\n\ndef convert_to_time_series(input_csv, output_csv, force=False):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                         'AMSR_SWE': 'SWE',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv) and not force:\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['SWE'] > 240):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        filled_data.to_csv(filled_csv, index=False)\n        \n        print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv) and not force:\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n        result.fillna(0, inplace=True)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv, force=False):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_cumulated = [\n      \"SWE\",\n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2018-10-01')\n    end_date = pd.to_datetime('2021-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df[\"cumulative_fsca\"].describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n\n    \ndef assign_zero_swe_value_to_all_fsca_zero_rows(na_filled_csv, non_station_zero_csv, force=False):\n    \n    # Define the conditions\n    condition_column = 'fsca'\n    target_column = 'swe_value'\n    values_to_check = [0, 225, 237, 239]\n    \n    \n    df = pd.read_csv(na_filled_csv, dtype={'station_name': 'object'})\n    empty_count = df[target_column].isnull().values.ravel().sum()\n    \n    print(f\"The empty number of rows are {empty_count} before filling in\")\n    print(\"double check the swe_value statistics before filling in:\", df[\"swe_value\"].describe())\n    \n    rows_less_than_zero = (df[target_column] < 0).sum()\n    print(\"Number of rows where '{}' is less than 0: {}\".format(target_column, rows_less_than_zero))\n    \n\n    # Mask the target column where the condition is met\n    df[target_column] = df[target_column].mask(\n        (df[target_column].isna()) & df[condition_column].isin(values_to_check),\n        0\n    )\n    \n    empty_count = df[target_column].isnull().values.ravel().sum()\n    \n    print(f\"The empty number of rows are {empty_count} after filling in\")\n    \n    print(\"total dataframe row number : \", len(df))\n    \n    df.to_csv(non_station_zero_csv, index=False)\n    \n    print(f\"The rows without snotel but fsca is zero or land or water or ocean are set to 0! {non_station_zero_csv}\")\n    print(\"double check the swe_value statistics after filling in:\", df[\"swe_value\"].describe())\n    \n    \ndef clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path, force=False):\n    # Read Dask DataFrame from CSV\n    dask_df = dd.read_csv(current_ready_csv_path, dtype={'station_name': 'object'})\n\n    # Remove rows where 'swe_value' is empty\n    dask_df_filtered = dask_df.dropna(subset=['swe_value'])\n\n    # Save the result to a new CSV file\n    dask_df_filtered.to_csv(cleaned_csv_path, index=False, single_file=True)\n    print(\"dask_df_filtered.shape = \", dask_df_filtered.shape)\n    print(f\"The filtered csv with no swe values is saved to {cleaned_csv_path}\")\n\ndef rename_corrected_slope(corrected_slope_path, renamed_slope_path, force=False):\n    df = pd.read_csv(corrected_slope_path, dtype={'station_name': 'object'})\n    df.drop(columns=['Slope'], inplace=True)\n\t# Rename 'column_to_rename' to 'old_column'\n    df.rename(columns={'corrected_slope': 'Slope'}, inplace=True)\n    df.to_csv(renamed_slope_path, index=False)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {renamed_slope_path}\")\n    \ndef log10_all_fields(cleaned_csv_path, logged_csv_path, force=False):\n    print(\"convert all cumulative columns into log10\")\n    # Read Dask DataFrame from CSV\n    df = pd.read_csv(cleaned_csv_path, dtype={'station_name': 'object'})\n    \n    # Get columns with \"cumulative\" in their names\n    for col in df.columns:\n        print(\"Checking \", col)\n        if \"cumulative\" in col:\n\t        # Apply log10 transformation to selected columns\n            df[col] = np.log10(df[col] + 0.1)  # Adding 1 to avoid log(0)\n            print(f\"converted {col} to log10\")\n\n    df.to_csv(logged_csv_path, index=False)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {logged_csv_path}\")\n\n    \n    \nif __name__ == \"__main__\":\n    # Define file paths for various CSV files\n    # current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n    current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv'\n    non_station_counted_csv_path = f'{work_dir}/new_stations_3yrs_fill_empty_snotel.csv'\n    cleaned_csv_path = f\"{work_dir}/new_stations_3yrs_cleaned.csv\"\n    target_time_series_csv_path = f'{work_dir}/new_stations_3yrs_time_series.csv'\n    backup_time_series_csv_path = f'{work_dir}/new_stations_3yrs_time_series_backup.csv'\n    # target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n    target_time_series_cumulative_csv_path = f'{work_dir}/new_stations_3yrs_cumulative.csv'\n    slope_renamed_path = f'{work_dir}/new_stations_3yrs_slope_renamed.csv'\n    logged_csv_path = f'{work_dir}/new_stations_3yrs_all_cols_log10.csv'\n    \n    # filling the non station rows with fsca indicating no snow\n    assign_zero_swe_value_to_all_fsca_zero_rows(current_ready_csv_path, non_station_counted_csv_path, force=True)\n    \n    # remove the empty swe_value rows first\n    clean_non_swe_rows(non_station_counted_csv_path, cleaned_csv_path, force=True)\n  \n    # Uncomment this line to execute the 'convert_to_time_series' function\n    convert_to_time_series(cleaned_csv_path, target_time_series_csv_path, force=True)\n\n    # Uncomment this line to execute the 'add_cumulative_columns' function\n    add_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path, force=True)\n    \n    # Rename the corrected slope to slope\n    rename_corrected_slope(target_time_series_cumulative_csv_path, slope_renamed_path, force=True)\n    \n    # convert all cumulative columns to log10\n    log10_all_fields(slope_renamed_path, logged_csv_path, force=True)\n    \n    df = pd.read_csv(logged_csv_path, dtype={'station_name': 'object'})\n    print(\"the number of the total rows: \", len(df))\n    \n    deduplicated_df = df.drop_duplicates(subset=['lat', 'lon'])\n    # Export the deduplicated DataFrame to a CSV file\n    deduplicated_df.to_csv(f'{work_dir}/deduplicated_training_points_final.csv', index=False)\n    print(\"deduplicated_df.to_csv('deduplicated_training_points_final.csv', index=False)\")\n    \n",
  "history_output" : "today date = 2024-05-05\ntest start date:  2024-05-01\ntest end date:  2023-10-11\n/home/zsun\nThe empty number of rows are 13750843 before filling in\ndouble check the swe_value statistics before filling in: count    1.324517e+06\nmean     5.606424e+00\nstd      9.727693e+00\nmin     -8.000000e+00\n25%      0.000000e+00\n50%      4.000000e-01\n75%      7.800000e+00\nmax      1.066000e+02\nName: swe_value, dtype: float64\nNumber of rows where 'swe_value' is less than 0: 19\nThe empty number of rows are 11864286 after filling in\ntotal dataframe row number :  15075360\nThe rows without snotel but fsca is zero or land or water or ocean are set to 0! /home/zsun/gridmet_test_run/new_stations_3yrs_fill_empty_snotel.csv\ndouble check the swe_value statistics after filling in: count    3.211074e+06\nmean     2.312561e+00\nstd      6.830066e+00\nmin     -8.000000e+00\n25%      0.000000e+00\n50%      0.000000e+00\n75%      0.000000e+00\nmax      1.066000e+02\nName: swe_value, dtype: float64\ndask_df_filtered.shape =  (Delayed('int-ba8c561c-0d2a-45ea-800b-069922a7358f'), 25)\nThe filtered csv with no swe values is saved to /home/zsun/gridmet_test_run/new_stations_3yrs_cleaned.csv\nAll current columns:  Index(['date', 'lat', 'lon', 'AMSR_SWE', 'station_name', 'swe_value',\n       'change_in_swe_inch', 'snow_depth', 'air_temperature_observed_f',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'fsca', 'corrected_slope'],\n      dtype='object')\nStart to fill in the missing values\nNew filled values csv is saved to /home/zsun/gridmet_test_run/new_stations_3yrs_time_series.csv_gap_filled.csv\nStart to create the training csv with previous 7 days columns\nNew data is saved to /home/zsun/gridmet_test_run/new_stations_3yrs_time_series.csv\nFile is backed up to /home/zsun/gridmet_test_run/new_stations_3yrs_time_series_backup.csv\nthe column statistics from time series before cumulative:                  lat           lon           SWE     swe_value  \\\ncount  3.211074e+06  3.211074e+06  3.211074e+06  3.211074e+06   \nmean   4.156352e+01 -1.136765e+02  5.914814e+00  2.312561e+00   \nstd    3.850046e+00  5.696848e+00  1.580655e+01  6.830066e+00   \nmin    3.141666e+01 -1.245500e+02  0.000000e+00 -8.000000e+00   \n25%    3.855000e+01 -1.192220e+02  0.000000e+00  0.000000e+00   \n50%    4.118467e+01 -1.128238e+02  0.000000e+00  0.000000e+00   \n75%    4.457462e+01 -1.090667e+02  0.000000e+00  0.000000e+00   \nmax    4.900000e+01 -1.005075e+02  2.340000e+02  1.066000e+02   \n\n       change_in_swe_inch    snow_depth  air_temperature_observed_f  \\\ncount        3.211074e+06  3.211074e+06                3.211074e+06   \nmean         3.557065e-03  6.133463e+00                1.468743e+01   \nstd          1.198090e+00  1.723942e+01                2.040158e+01   \nmin         -1.370000e+02  0.000000e+00               -8.660000e+01   \n25%          0.000000e+00  0.000000e+00                0.000000e+00   \n50%          0.000000e+00  0.000000e+00                0.000000e+00   \n75%          0.000000e+00  0.000000e+00                3.180000e+01   \nmax          1.370000e+02  2.290000e+02                6.710000e+02   \n\n       air_temperature_tmmn  potential_evapotranspiration  \\\ncount          3.211074e+06                  3.211074e+06   \nmean           2.754783e+02                  4.968408e+00   \nstd            9.883147e+00                  3.213294e+00   \nmin            0.000000e+00                  0.000000e+00   \n25%            2.701000e+02                  2.200000e+00   \n50%            2.762000e+02                  4.600000e+00   \n75%            2.817000e+02                  7.200000e+00   \nmax            3.085000e+02                  2.380000e+01   \n\n       mean_vapor_pressure_deficit  relative_humidity_rmax  \\\ncount                 3.211074e+06            3.211074e+06   \nmean                  8.788692e-01            7.125555e+01   \nstd                   8.027297e-01            2.059016e+01   \nmin                   0.000000e+00            0.000000e+00   \n25%                   2.700000e-01            5.560000e+01   \n50%                   6.300000e-01            7.250000e+01   \n75%                   1.270000e+00            8.860000e+01   \nmax                   7.920000e+00            1.000000e+02   \n\n       relative_humidity_rmin  precipitation_amount  air_temperature_tmmx  \\\ncount            3.211074e+06          3.211074e+06          3.211074e+06   \nmean             2.879124e+01          1.602402e+00          2.884101e+02   \nstd              1.675204e+01          5.366858e+00          1.402561e+01   \nmin              0.000000e+00          0.000000e+00          0.000000e+00   \n25%              1.680000e+01          0.000000e+00          2.791000e+02   \n50%              2.480000e+01          0.000000e+00          2.886000e+02   \n75%              3.660000e+01          7.000000e-01          2.981000e+02   \nmax              1.000000e+02          5.042000e+02          3.254000e+02   \n\n         wind_speed     Elevation         Slope        Aspect     Curvature  \\\ncount  3.211074e+06  3.211074e+06  3.211074e+06  3.211074e+06  3.211074e+06   \nmean   3.772103e+00  1.953251e+03  9.195949e-01  1.845197e+02 -9.614543e+02   \nstd    1.737611e+00  7.932325e+02  2.524931e+00  1.047163e+02  5.081542e+03   \nmin    0.000000e+00 -1.207950e+00  6.327820e-02 -0.000000e+00 -2.198460e+04   \n25%    2.600000e+00  1.402141e+03  2.445297e-01  9.258768e+01 -3.988808e+03   \n50%    3.400000e+00  2.001734e+03  4.136047e-01  1.880594e+02 -2.000815e+01   \n75%    4.600000e+00  2.551543e+03  8.278580e-01  2.758316e+02  2.282732e+03   \nmax    1.960000e+01  3.978188e+03  9.000000e+01  3.599130e+02  1.757020e+04   \n\n          Northness      Eastness          fsca  corrected_slope  \\\ncount  3.211074e+06  3.211074e+06  3.211074e+06     3.211074e+06   \nmean   1.180370e-02  2.834155e-02  9.775639e+00     6.625122e+01   \nstd    5.884916e-01  5.823986e-01  2.118556e+01     4.885372e+02   \nmin   -7.853982e-01 -7.853979e-01  0.000000e+00    -9.999000e+03   \n25%   -6.284770e-01 -5.789484e-01  0.000000e+00     8.996606e+01   \n50%    2.564631e-02  6.505793e-02  0.000000e+00     8.998275e+01   \n75%    6.187943e-01  6.341513e-01  0.000000e+00     8.998937e+01   \nmax    7.853978e-01  7.853982e-01  9.600000e+01     8.999759e+01   \n\n              SWE_1  air_temperature_tmmn_1  potential_evapotranspiration_1  \\\ncount  3.211074e+06            3.211074e+06                    3.211074e+06   \nmean   5.912666e+00            2.751788e+02                    4.965036e+00   \nstd    1.580632e+01            1.354239e+01                    3.216475e+00   \nmin    0.000000e+00            0.000000e+00                    0.000000e+00   \n25%    0.000000e+00            2.700000e+02                    2.200000e+00   \n50%    0.000000e+00            2.762000e+02                    4.600000e+00   \n75%    0.000000e+00            2.817000e+02                    7.200000e+00   \nmax    2.340000e+02            3.085000e+02                    2.380000e+01   \n\n       mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\ncount                   3.211074e+06              3.211074e+06   \nmean                    8.778043e-01              7.115879e+01   \nstd                     8.027140e-01              2.071607e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.700000e-01              5.550000e+01   \n50%                     6.300000e-01              7.250000e+01   \n75%                     1.270000e+00              8.850000e+01   \nmax                     7.920000e+00              1.000000e+02   \n\n       relative_humidity_rmin_1  precipitation_amount_1  \\\ncount              3.211074e+06            3.211074e+06   \nmean               2.873147e+01            1.599346e+00   \nstd                1.674886e+01            5.359386e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.680000e+01            0.000000e+00   \n50%                2.480000e+01            0.000000e+00   \n75%                3.650000e+01            7.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n\n       air_temperature_tmmx_1  wind_speed_1        fsca_1         SWE_2  \\\ncount            3.211074e+06  3.211074e+06  3.211074e+06  3.211074e+06   \nmean             2.880967e+02  3.766843e+00  9.761928e+00  5.910524e+00   \nstd              1.704810e+01  1.740410e+00  2.117376e+01  1.580611e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.790000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.886000e+02  3.400000e+00  0.000000e+00  0.000000e+00   \n75%              2.981000e+02  4.600000e+00  0.000000e+00  0.000000e+00   \nmax              3.254000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n\n       air_temperature_tmmn_2  potential_evapotranspiration_2  \\\ncount            3.211074e+06                    3.211074e+06   \nmean             2.748774e+02                    4.961526e+00   \nstd              1.640089e+01                    3.219742e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.700000e+02                    2.200000e+00   \n50%              2.762000e+02                    4.600000e+00   \n75%              2.817000e+02                    7.200000e+00   \nmax              3.085000e+02                    2.380000e+01   \n\n       mean_vapor_pressure_deficit_2  relative_humidity_rmax_2  \\\ncount                   3.211074e+06              3.211074e+06   \nmean                    8.767467e-01              7.106159e+01   \nstd                     8.027024e-01              2.084015e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.700000e-01              5.550000e+01   \n50%                     6.300000e-01              7.240000e+01   \n75%                     1.270000e+00              8.850000e+01   \nmax                     7.920000e+00              1.000000e+02   \n\n       relative_humidity_rmin_2  precipitation_amount_2  \\\ncount              3.211074e+06            3.211074e+06   \nmean               2.867329e+01            1.596229e+00   \nstd                1.674974e+01            5.353499e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.680000e+01            0.000000e+00   \n50%                2.470000e+01            0.000000e+00   \n75%                3.650000e+01            7.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n\n       air_temperature_tmmx_2  wind_speed_2        fsca_2         SWE_3  \\\ncount            3.211074e+06  3.211074e+06  3.211074e+06  3.211074e+06   \nmean             2.877840e+02  3.760861e+00  9.748230e+00  5.908328e+00   \nstd              1.960479e+01  1.742164e+00  2.116197e+01  1.580584e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.790000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.886000e+02  3.400000e+00  0.000000e+00  0.000000e+00   \n75%              2.981000e+02  4.600000e+00  0.000000e+00  0.000000e+00   \nmax              3.254000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n\n       air_temperature_tmmn_3  potential_evapotranspiration_3  \\\ncount            3.211074e+06                    3.211074e+06   \nmean             2.745755e+02                    4.957972e+00   \nstd              1.882549e+01                    3.223020e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.700000e+02                    2.200000e+00   \n50%              2.762000e+02                    4.600000e+00   \n75%              2.817000e+02                    7.200000e+00   \nmax              3.085000e+02                    2.380000e+01   \n\n       mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\ncount                   3.211074e+06              3.211074e+06   \nmean                    8.756875e-01              7.096146e+01   \nstd                     8.026856e-01              2.096297e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.600000e-01              5.540000e+01   \n50%                     6.300000e-01              7.240000e+01   \n75%                     1.270000e+00              8.840000e+01   \nmax                     7.920000e+00              1.000000e+02   \n\n       relative_humidity_rmin_3  precipitation_amount_3  \\\ncount              3.211074e+06            3.211074e+06   \nmean               2.861654e+01            1.593149e+00   \nstd                1.675190e+01            5.349529e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.670000e+01            0.000000e+00   \n50%                2.470000e+01            0.000000e+00   \n75%                3.640000e+01            7.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n\n       air_temperature_tmmx_3  wind_speed_3        fsca_3         SWE_4  \\\ncount            3.211074e+06  3.211074e+06  3.211074e+06  3.211074e+06   \nmean             2.874718e+02  3.755791e+00  9.734520e+00  5.906114e+00   \nstd              2.185971e+01  1.745100e+00  2.115014e+01  1.580556e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.790000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.886000e+02  3.400000e+00  0.000000e+00  0.000000e+00   \n75%              2.981000e+02  4.600000e+00  0.000000e+00  0.000000e+00   \nmax              3.254000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n\n       air_temperature_tmmn_4  potential_evapotranspiration_4  \\\ncount            3.211074e+06                    3.211074e+06   \nmean             2.742726e+02                    4.954449e+00   \nstd              2.096762e+01                    3.226200e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.700000e+02                    2.200000e+00   \n50%              2.762000e+02                    4.600000e+00   \n75%              2.817000e+02                    7.200000e+00   \nmax              3.085000e+02                    2.380000e+01   \n\n       mean_vapor_pressure_deficit_4  relative_humidity_rmax_4  \\\ncount                   3.211074e+06              3.211074e+06   \nmean                    8.746293e-01              7.086099e+01   \nstd                     8.026588e-01              2.108449e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.600000e-01              5.530000e+01   \n50%                     6.300000e-01              7.230000e+01   \n75%                     1.270000e+00              8.840000e+01   \nmax                     7.920000e+00              1.000000e+02   \n\n       relative_humidity_rmin_4  precipitation_amount_4  \\\ncount              3.211074e+06            3.211074e+06   \nmean               2.856438e+01            1.590732e+00   \nstd                1.675809e+01            5.345869e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.670000e+01            0.000000e+00   \n50%                2.470000e+01            0.000000e+00   \n75%                3.640000e+01            7.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n\n       air_temperature_tmmx_4  wind_speed_4        fsca_4         SWE_5  \\\ncount            3.211074e+06  3.211074e+06  3.211074e+06  3.211074e+06   \nmean             2.871593e+02  3.750750e+00  9.720847e+00  5.904152e+00   \nstd              2.389898e+01  1.747776e+00  2.113837e+01  1.580535e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.790000e+02  2.500000e+00  0.000000e+00  0.000000e+00   \n50%              2.886000e+02  3.400000e+00  0.000000e+00  0.000000e+00   \n75%              2.981000e+02  4.600000e+00  0.000000e+00  0.000000e+00   \nmax              3.254000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n\n       air_temperature_tmmn_5  potential_evapotranspiration_5  \\\ncount            3.211074e+06                    3.211074e+06   \nmean             2.739686e+02                    4.950782e+00   \nstd              2.290657e+01                    3.229421e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.700000e+02                    2.200000e+00   \n50%              2.762000e+02                    4.600000e+00   \n75%              2.817000e+02                    7.200000e+00   \nmax              3.085000e+02                    2.380000e+01   \n\n       mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\ncount                   3.211074e+06              3.211074e+06   \nmean                    8.735743e-01              7.076048e+01   \nstd                     8.026335e-01              2.120527e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.600000e-01              5.520000e+01   \n50%                     6.200000e-01              7.230000e+01   \n75%                     1.270000e+00              8.830000e+01   \nmax                     7.920000e+00              1.000000e+02   \n\n       relative_humidity_rmin_5  precipitation_amount_5  \\\ncount              3.211074e+06            3.211074e+06   \nmean               2.851507e+01            1.588183e+00   \nstd                1.676650e+01            5.343368e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.670000e+01            0.000000e+00   \n50%                2.460000e+01            0.000000e+00   \n75%                3.630000e+01            7.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n\n       air_temperature_tmmx_5  wind_speed_5        fsca_5         SWE_6  \\\ncount            3.211074e+06  3.211074e+06  3.211074e+06  3.211074e+06   \nmean             2.868453e+02  3.745403e+00  9.707143e+00  5.902941e+00   \nstd              2.577429e+01  1.749853e+00  2.112650e+01  1.580518e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.790000e+02  2.500000e+00  0.000000e+00  0.000000e+00   \n50%              2.886000e+02  3.400000e+00  0.000000e+00  0.000000e+00   \n75%              2.981000e+02  4.600000e+00  0.000000e+00  0.000000e+00   \nmax              3.254000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n\n       air_temperature_tmmn_6  potential_evapotranspiration_6  \\\ncount            3.211074e+06                    3.211074e+06   \nmean             2.736636e+02                    4.947033e+00   \nstd              2.469024e+01                    3.232708e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.700000e+02                    2.200000e+00   \n50%              2.762000e+02                    4.600000e+00   \n75%              2.817000e+02                    7.200000e+00   \nmax              3.085000e+02                    2.380000e+01   \n\n       mean_vapor_pressure_deficit_6  relative_humidity_rmax_6  \\\ncount                   3.211074e+06              3.211074e+06   \nmean                    8.725189e-01              7.065909e+01   \nstd                     8.025997e-01              2.132392e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.600000e-01              5.510000e+01   \n50%                     6.200000e-01              7.220001e+01   \n75%                     1.270000e+00              8.830000e+01   \nmax                     7.920000e+00              1.000000e+02   \n\n       relative_humidity_rmin_6  precipitation_amount_6  \\\ncount              3.211074e+06            3.211074e+06   \nmean               2.846746e+01            1.585877e+00   \nstd                1.677555e+01            5.340453e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.660000e+01            0.000000e+00   \n50%                2.460000e+01            0.000000e+00   \n75%                3.630000e+01            7.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n\n       air_temperature_tmmx_6  wind_speed_6        fsca_6         SWE_7  \\\ncount            3.211074e+06  3.211074e+06  3.211074e+06  3.211074e+06   \nmean             2.865309e+02  3.739675e+00  9.693603e+00  5.902085e+00   \nstd              2.751862e+01  1.750838e+00  2.111489e+01  1.580511e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.790000e+02  2.500000e+00  0.000000e+00  0.000000e+00   \n50%              2.886000e+02  3.400000e+00  0.000000e+00  0.000000e+00   \n75%              2.981000e+02  4.600000e+00  0.000000e+00  0.000000e+00   \nmax              3.254000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n\n       air_temperature_tmmn_7  potential_evapotranspiration_7  \\\ncount            3.211074e+06                    3.211074e+06   \nmean             2.733573e+02                    4.943259e+00   \nstd              2.635032e+01                    3.235903e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.700000e+02                    2.200000e+00   \n50%              2.761000e+02                    4.600000e+00   \n75%              2.817000e+02                    7.200000e+00   \nmax              3.085000e+02                    2.380000e+01   \n\n       mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\ncount                   3.211074e+06              3.211074e+06   \nmean                    8.714657e-01              7.055774e+01   \nstd                     8.025681e-01              2.144141e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.600000e-01              5.500000e+01   \n50%                     6.200000e-01              7.210000e+01   \n75%                     1.270000e+00              8.820001e+01   \nmax                     7.920000e+00              1.000000e+02   \n\n       relative_humidity_rmin_7  precipitation_amount_7  \\\ncount              3.211074e+06            3.211074e+06   \nmean               2.842077e+01            1.583692e+00   \nstd                1.678494e+01            5.336799e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.660000e+01            0.000000e+00   \n50%                2.460000e+01            0.000000e+00   \n75%                3.620000e+01            7.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n\n       air_temperature_tmmx_7  wind_speed_7        fsca_7  \ncount            3.211074e+06  3.211074e+06  3.211074e+06  \nmean             2.862166e+02  3.734451e+00  9.680205e+00  \nstd              2.915542e+01  1.753039e+00  2.110338e+01  \nmin              0.000000e+00  0.000000e+00  0.000000e+00  \n25%              2.790000e+02  2.500000e+00  0.000000e+00  \n50%              2.886000e+02  3.400000e+00  0.000000e+00  \n75%              2.981000e+02  4.600000e+00  0.000000e+00  \nmax              3.254000e+02  1.960000e+01  9.600000e+01  \nThis is our unique years [2018 2019 2020 2021]\nhow many rows are left in the three water years?                 lat           lon           SWE     swe_value  \\\ncount  2.391441e+06  2.391441e+06  2.391441e+06  2.391441e+06   \nmean   4.158887e+01 -1.137162e+02  4.341821e+00  2.458014e+00   \nstd    3.850395e+00  5.697857e+00  1.417716e+01  7.005064e+00   \nmin    3.141666e+01 -1.245500e+02  0.000000e+00 -8.000000e+00   \n25%    3.863000e+01 -1.192539e+02  0.000000e+00  0.000000e+00   \n50%    4.122500e+01 -1.128593e+02  0.000000e+00  0.000000e+00   \n75%    4.459397e+01 -1.091000e+02  0.000000e+00  0.000000e+00   \nmax    4.900000e+01 -1.005075e+02  2.340000e+02  1.021000e+02   \n\n       change_in_swe_inch    snow_depth  air_temperature_observed_f  \\\ncount        2.391441e+06  2.391441e+06                2.391441e+06   \nmean        -4.537013e-04  6.432507e+00                1.464136e+01   \nstd          1.216162e+00  1.744774e+01                2.035171e+01   \nmin         -1.370000e+02  0.000000e+00               -8.660000e+01   \n25%          0.000000e+00  0.000000e+00                0.000000e+00   \n50%          0.000000e+00  0.000000e+00                0.000000e+00   \n75%          0.000000e+00  0.000000e+00                3.150000e+01   \nmax          1.200000e+02  2.290000e+02                6.710000e+02   \n\n       air_temperature_tmmn  potential_evapotranspiration  \\\ncount          2.391441e+06                  2.391441e+06   \nmean           2.753547e+02                  5.010496e+00   \nstd            1.003197e+01                  3.215854e+00   \nmin            0.000000e+00                  0.000000e+00   \n25%            2.697000e+02                  2.275881e+00   \n50%            2.760000e+02                  4.700000e+00   \n75%            2.818000e+02                  7.300000e+00   \nmax            3.085000e+02                  2.380000e+01   \n\n       mean_vapor_pressure_deficit  relative_humidity_rmax  \\\ncount                 2.391441e+06            2.391441e+06   \nmean                  8.058697e-01            6.997290e+01   \nstd                   7.560035e-01            2.106099e+01   \nmin                   0.000000e+00            0.000000e+00   \n25%                   2.400000e-01            5.360000e+01   \n50%                   5.600000e-01            7.110000e+01   \n75%                   1.160000e+00            8.770001e+01   \nmax                   7.660000e+00            1.000000e+02   \n\n       relative_humidity_rmin  precipitation_amount  air_temperature_tmmx  \\\ncount            2.391441e+06          2.391441e+06          2.391441e+06   \nmean             2.884618e+01          1.664149e+00          2.884690e+02   \nstd              1.676406e+01          5.520286e+00          1.393679e+01   \nmin              0.000000e+00          0.000000e+00          0.000000e+00   \n25%              1.700000e+01          0.000000e+00          2.791000e+02   \n50%              2.480000e+01          0.000000e+00          2.886000e+02   \n75%              3.660000e+01          8.000000e-01          2.980000e+02   \nmax              1.000000e+02          5.042000e+02          3.254000e+02   \n\n         wind_speed     Elevation         Slope        Aspect     Curvature  \\\ncount  2.391441e+06  2.391441e+06  2.391441e+06  2.391441e+06  2.391441e+06   \nmean   3.747760e+00  1.948288e+03  9.197840e-01  1.845691e+02 -9.690169e+02   \nstd    1.713472e+00  7.950956e+02  2.520140e+00  1.047452e+02  5.081637e+03   \nmin    0.000000e+00 -1.207950e+00  6.327820e-02 -0.000000e+00 -2.198460e+04   \n25%    2.600000e+00  1.394696e+03  2.445297e-01  9.263547e+01 -3.992808e+03   \n50%    3.400000e+00  1.988180e+03  4.136047e-01  1.880594e+02 -2.811145e+01   \n75%    4.600000e+00  2.547068e+03  8.297043e-01  2.760791e+02  2.280909e+03   \nmax    1.960000e+01  3.978188e+03  9.000000e+01  3.599130e+02  1.757020e+04   \n\n          Northness      Eastness          fsca  corrected_slope  \\\ncount  2.391441e+06  2.391441e+06  2.391441e+06     2.391441e+06   \nmean   1.212411e-02  2.819455e-02  1.027221e+01     6.585723e+01   \nstd    5.886406e-01  5.822671e-01  2.170014e+01     4.925694e+02   \nmin   -7.853982e-01 -7.853979e-01  0.000000e+00    -9.999000e+03   \n25%   -6.284770e-01 -5.789484e-01  0.000000e+00     8.996606e+01   \n50%    2.564631e-02  6.505793e-02  0.000000e+00     8.998275e+01   \n75%    6.196246e-01  6.337889e-01  0.000000e+00     8.998937e+01   \nmax    7.853978e-01  7.853982e-01  9.600000e+01     8.999759e+01   \n\n              SWE_1  air_temperature_tmmn_1  potential_evapotranspiration_1  \\\ncount  2.391441e+06            2.391441e+06                    2.391441e+06   \nmean   4.359613e+00            2.753589e+02                    5.007176e+00   \nstd    1.420398e+01            1.003240e+01                    3.216413e+00   \nmin    0.000000e+00            0.000000e+00                    0.000000e+00   \n25%    0.000000e+00            2.697000e+02                    2.230330e+00   \n50%    0.000000e+00            2.760000e+02                    4.700000e+00   \n75%    0.000000e+00            2.818000e+02                    7.300000e+00   \nmax    2.340000e+02            3.085000e+02                    2.380000e+01   \n\n       mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\ncount                   2.391441e+06              2.391441e+06   \nmean                    8.051771e-01              6.998976e+01   \nstd                     7.554440e-01              2.106144e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.400000e-01              5.360000e+01   \n50%                     5.600000e-01              7.110000e+01   \n75%                     1.160000e+00              8.770001e+01   \nmax                     7.660000e+00              1.000000e+02   \n\n       relative_humidity_rmin_1  precipitation_amount_1  \\\ncount              2.391441e+06            2.391441e+06   \nmean               2.883912e+01            1.663696e+00   \nstd                1.675800e+01            5.518988e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.700000e+01            0.000000e+00   \n50%                2.480000e+01            0.000000e+00   \n75%                3.660000e+01            8.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n\n       air_temperature_tmmx_1  wind_speed_1        fsca_1         SWE_2  \\\ncount            2.391441e+06  2.391441e+06  2.391441e+06  2.391441e+06   \nmean             2.884699e+02  3.749438e+00  1.027227e+01  4.377509e+00   \nstd              1.393728e+01  1.714124e+00  2.170010e+01  1.423092e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.791000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.886000e+02  3.400000e+00  0.000000e+00  0.000000e+00   \n75%              2.980372e+02  4.600000e+00  0.000000e+00  0.000000e+00   \nmax              3.254000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n\n       air_temperature_tmmn_2  potential_evapotranspiration_2  \\\ncount            2.391441e+06                    2.391441e+06   \nmean             2.753617e+02                    5.003512e+00   \nstd              1.003263e+01                    3.216509e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.697000e+02                    2.200000e+00   \n50%              2.761000e+02                    4.620804e+00   \n75%              2.818000e+02                    7.300000e+00   \nmax              3.085000e+02                    2.380000e+01   \n\n       mean_vapor_pressure_deficit_2  relative_humidity_rmax_2  \\\ncount                   2.391441e+06              2.391441e+06   \nmean                    8.045691e-01              7.001623e+01   \nstd                     7.548363e-01              2.105772e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.400000e-01              5.360000e+01   \n50%                     5.600000e-01              7.110000e+01   \n75%                     1.160000e+00              8.770001e+01   \nmax                     7.660000e+00              1.000000e+02   \n\n       relative_humidity_rmin_2  precipitation_amount_2  \\\ncount              2.391441e+06            2.391441e+06   \nmean               2.882335e+01            1.662874e+00   \nstd                1.675549e+01            5.515035e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.700000e+01            0.000000e+00   \n50%                2.480000e+01            0.000000e+00   \n75%                3.660000e+01            8.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n\n       air_temperature_tmmx_2  wind_speed_2        fsca_2         SWE_3  \\\ncount            2.391441e+06  2.391441e+06  2.391441e+06  2.391441e+06   \nmean             2.884697e+02  3.749883e+00  1.027253e+01  4.395421e+00   \nstd              1.393800e+01  1.714229e+00  2.170024e+01  1.425780e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.791000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.886000e+02  3.400000e+00  0.000000e+00  0.000000e+00   \n75%              2.980988e+02  4.600000e+00  0.000000e+00  0.000000e+00   \nmax              3.254000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n\n       air_temperature_tmmn_3  potential_evapotranspiration_3  \\\ncount            2.391441e+06                    2.391441e+06   \nmean             2.753606e+02                    4.999427e+00   \nstd              1.003260e+01                    3.216145e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.697000e+02                    2.200000e+00   \n50%              2.761000e+02                    4.600000e+00   \n75%              2.818000e+02                    7.300000e+00   \nmax              3.085000e+02                    2.380000e+01   \n\n       mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\ncount                   2.391441e+06              2.391441e+06   \nmean                    8.039791e-01              7.005113e+01   \nstd                     7.542158e-01              2.104858e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.400000e-01              5.370000e+01   \n50%                     5.600000e-01              7.120001e+01   \n75%                     1.160000e+00              8.770001e+01   \nmax                     7.660000e+00              1.000000e+02   \n\n       relative_humidity_rmin_3  precipitation_amount_3  \\\ncount              2.391441e+06            2.391441e+06   \nmean               2.880960e+01            1.660582e+00   \nstd                1.675462e+01            5.506569e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.690000e+01            0.000000e+00   \n50%                2.480000e+01            0.000000e+00   \n75%                3.650000e+01            8.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n\n       air_temperature_tmmx_3  wind_speed_3        fsca_3         SWE_4  \\\ncount            2.391441e+06  2.391441e+06  2.391441e+06  2.391441e+06   \nmean             2.884687e+02  3.748919e+00  1.027282e+01  4.413285e+00   \nstd              1.393917e+01  1.714122e+00  2.170033e+01  1.428456e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.791000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.886000e+02  3.400000e+00  0.000000e+00  0.000000e+00   \n75%              2.981000e+02  4.600000e+00  0.000000e+00  0.000000e+00   \nmax              3.254000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n\n       air_temperature_tmmn_4  potential_evapotranspiration_4  \\\ncount            2.391441e+06                    2.391441e+06   \nmean             2.753565e+02                    4.995004e+00   \nstd              1.003206e+01                    3.215274e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.697000e+02                    2.200000e+00   \n50%              2.760000e+02                    4.600000e+00   \n75%              2.818000e+02                    7.200090e+00   \nmax              3.085000e+02                    2.380000e+01   \n\n       mean_vapor_pressure_deficit_4  relative_humidity_rmax_4  \\\ncount                   2.391441e+06              2.391441e+06   \nmean                    8.033356e-01              7.008050e+01   \nstd                     7.536027e-01              2.103613e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.400000e-01              5.370000e+01   \n50%                     5.600000e-01              7.120001e+01   \n75%                     1.150000e+00              8.780000e+01   \nmax                     7.660000e+00              1.000000e+02   \n\n       relative_humidity_rmin_4  precipitation_amount_4  \\\ncount              2.391441e+06            2.391441e+06   \nmean               2.880406e+01            1.658081e+00   \nstd                1.675452e+01            5.496392e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.690000e+01            0.000000e+00   \n50%                2.480000e+01            0.000000e+00   \n75%                3.650000e+01            8.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n\n       air_temperature_tmmx_4  wind_speed_4        fsca_4         SWE_5  \\\ncount            2.391441e+06  2.391441e+06  2.391441e+06  2.391441e+06   \nmean             2.884674e+02  3.748322e+00  1.027297e+01  4.431173e+00   \nstd              1.394066e+01  1.714042e+00  2.170037e+01  1.431127e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.791000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.886000e+02  3.400000e+00  0.000000e+00  0.000000e+00   \n75%              2.981000e+02  4.600000e+00  0.000000e+00  0.000000e+00   \nmax              3.254000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n\n       air_temperature_tmmn_5  potential_evapotranspiration_5  \\\ncount            2.391441e+06                    2.391441e+06   \nmean             2.753513e+02                    4.990389e+00   \nstd              1.003124e+01                    3.214335e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.697000e+02                    2.200000e+00   \n50%              2.760000e+02                    4.600000e+00   \n75%              2.818000e+02                    7.200000e+00   \nmax              3.085000e+02                    2.380000e+01   \n\n       mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\ncount                   2.391441e+06              2.391441e+06   \nmean                    8.026368e-01              7.010052e+01   \nstd                     7.530570e-01              2.102722e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.400000e-01              5.380000e+01   \n50%                     5.600000e-01              7.120001e+01   \n75%                     1.150000e+00              8.780000e+01   \nmax                     7.660000e+00              1.000000e+02   \n\n       relative_humidity_rmin_5  precipitation_amount_5  \\\ncount              2.391441e+06            2.391441e+06   \nmean               2.880143e+01            1.655614e+00   \nstd                1.675499e+01            5.490040e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.690000e+01            0.000000e+00   \n50%                2.480000e+01            0.000000e+00   \n75%                3.650000e+01            8.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n\n       air_temperature_tmmx_5  wind_speed_5        fsca_5         SWE_6  \\\ncount            2.391441e+06  2.391441e+06  2.391441e+06  2.391441e+06   \nmean             2.884656e+02  3.748079e+00  1.027297e+01  4.449006e+00   \nstd              1.394311e+01  1.714002e+00  2.170037e+01  1.433786e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.791000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.886000e+02  3.400000e+00  0.000000e+00  0.000000e+00   \n75%              2.981000e+02  4.600000e+00  0.000000e+00  0.000000e+00   \nmax              3.254000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n\n       air_temperature_tmmn_6  potential_evapotranspiration_6  \\\ncount            2.391441e+06                    2.391441e+06   \nmean             2.753479e+02                    4.985748e+00   \nstd              1.003094e+01                    3.213453e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.697000e+02                    2.200000e+00   \n50%              2.760000e+02                    4.600000e+00   \n75%              2.818000e+02                    7.200000e+00   \nmax              3.085000e+02                    2.380000e+01   \n\n       mean_vapor_pressure_deficit_6  relative_humidity_rmax_6  \\\ncount                   2.391441e+06              2.391441e+06   \nmean                    8.019089e-01              7.011324e+01   \nstd                     7.525462e-01              2.102099e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.400000e-01              5.380000e+01   \n50%                     5.600000e-01              7.120001e+01   \n75%                     1.150000e+00              8.780000e+01   \nmax                     7.660000e+00              1.000000e+02   \n\n       relative_humidity_rmin_6  precipitation_amount_6  \\\ncount              2.391441e+06            2.391441e+06   \nmean               2.880084e+01            1.652197e+00   \nstd                1.675545e+01            5.480193e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.690000e+01            0.000000e+00   \n50%                2.480000e+01            0.000000e+00   \n75%                3.650000e+01            8.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n\n       air_temperature_tmmx_6  wind_speed_6        fsca_6         SWE_7  \\\ncount            2.391441e+06  2.391441e+06  2.391441e+06  2.391441e+06   \nmean             2.884648e+02  3.748349e+00  1.027307e+01  4.466843e+00   \nstd              1.394534e+01  1.713849e+00  2.170036e+01  1.436438e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.791000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.886000e+02  3.400000e+00  0.000000e+00  0.000000e+00   \n75%              2.981000e+02  4.600000e+00  0.000000e+00  0.000000e+00   \nmax              3.254000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n\n       air_temperature_tmmn_7  potential_evapotranspiration_7  \\\ncount            2.391441e+06                    2.391441e+06   \nmean             2.753463e+02                    4.981193e+00   \nstd              1.003072e+01                    3.212689e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.697000e+02                    2.200000e+00   \n50%              2.760000e+02                    4.600000e+00   \n75%              2.818000e+02                    7.200000e+00   \nmax              3.085000e+02                    2.380000e+01   \n\n       mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\ncount                   2.391441e+06              2.391441e+06   \nmean                    8.011821e-01              7.012587e+01   \nstd                     7.519948e-01              2.101740e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.400000e-01              5.380000e+01   \n50%                     5.600000e-01              7.120001e+01   \n75%                     1.150000e+00              8.780000e+01   \nmax                     7.660000e+00              1.000000e+02   \n\n       relative_humidity_rmin_7  precipitation_amount_7  \\\ncount              2.391441e+06            2.391441e+06   \nmean               2.879952e+01            1.649103e+00   \nstd                1.675603e+01            5.469411e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.690000e+01            0.000000e+00   \n50%                2.480000e+01            0.000000e+00   \n75%                3.650000e+01            8.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n\n       air_temperature_tmmx_7  wind_speed_7        fsca_7  \ncount            2.391441e+06  2.391441e+06  2.391441e+06  \nmean             2.884653e+02  3.748932e+00  1.027309e+01  \nstd              1.394772e+01  1.713692e+00  2.170033e+01  \nmin              0.000000e+00  0.000000e+00  0.000000e+00  \n25%              2.791000e+02  2.600000e+00  0.000000e+00  \n50%              2.886000e+02  3.400000e+00  0.000000e+00  \n75%              2.981000e+02  4.600000e+00  0.000000e+00  \nmax              3.254000e+02  1.960000e+01  9.600000e+01  \nhow many groups?  <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7f9a3af28e50>\nThis is the dataframe after cumulative columns are added\ncount    2.391441e+06\nmean     2.585618e+03\nstd      4.382011e+03\nmin      0.000000e+00\n25%      0.000000e+00\n50%      0.000000e+00\n75%      4.293335e+03\nmax      3.490531e+04\nName: cumulative_fsca, dtype: float64\nAll the cumulative variables are added successfully! /home/zsun/gridmet_test_run/new_stations_3yrs_cumulative.csv\ndouble check the swe_value statistics: count    2.391441e+06\nmean     2.458014e+00\nstd      7.005064e+00\nmin     -8.000000e+00\n25%      0.000000e+00\n50%      0.000000e+00\n75%      0.000000e+00\nmax      1.021000e+02\nName: swe_value, dtype: float64\ndask_df.shape =  (2391441, 105)\nThe log10 file is saved to /home/zsun/gridmet_test_run/new_stations_3yrs_slope_renamed.csv\nconvert all cumulative columns into log10\nChecking  date\nChecking  lat\nChecking  lon\nChecking  SWE\nChecking  station_name\nChecking  swe_value\nChecking  change_in_swe_inch\nChecking  snow_depth\nChecking  air_temperature_observed_f\nChecking  air_temperature_tmmn\nChecking  potential_evapotranspiration\nChecking  mean_vapor_pressure_deficit\nChecking  relative_humidity_rmax\nChecking  relative_humidity_rmin\nChecking  precipitation_amount\nChecking  air_temperature_tmmx\nChecking  wind_speed\nChecking  Elevation\nChecking  Aspect\nChecking  Curvature\nChecking  Northness\nChecking  Eastness\nChecking  fsca\nChecking  Slope\nChecking  SWE_1\nChecking  air_temperature_tmmn_1\nChecking  potential_evapotranspiration_1\nChecking  mean_vapor_pressure_deficit_1\nChecking  relative_humidity_rmax_1\nChecking  relative_humidity_rmin_1\nChecking  precipitation_amount_1\nChecking  air_temperature_tmmx_1\nChecking  wind_speed_1\nChecking  fsca_1\nChecking  SWE_2\nChecking  air_temperature_tmmn_2\nChecking  potential_evapotranspiration_2\nChecking  mean_vapor_pressure_deficit_2\nChecking  relative_humidity_rmax_2\nChecking  relative_humidity_rmin_2\nChecking  precipitation_amount_2\nChecking  air_temperature_tmmx_2\nChecking  wind_speed_2\nChecking  fsca_2\nChecking  SWE_3\nChecking  air_temperature_tmmn_3\nChecking  potential_evapotranspiration_3\nChecking  mean_vapor_pressure_deficit_3\nChecking  relative_humidity_rmax_3\nChecking  relative_humidity_rmin_3\nChecking  precipitation_amount_3\nChecking  air_temperature_tmmx_3\nChecking  wind_speed_3\nChecking  fsca_3\nChecking  SWE_4\nChecking  air_temperature_tmmn_4\nChecking  potential_evapotranspiration_4\nChecking  mean_vapor_pressure_deficit_4\nChecking  relative_humidity_rmax_4\nChecking  relative_humidity_rmin_4\nChecking  precipitation_amount_4\nChecking  air_temperature_tmmx_4\nChecking  wind_speed_4\nChecking  fsca_4\nChecking  SWE_5\nChecking  air_temperature_tmmn_5\nChecking  potential_evapotranspiration_5\nChecking  mean_vapor_pressure_deficit_5\nChecking  relative_humidity_rmax_5\nChecking  relative_humidity_rmin_5\nChecking  precipitation_amount_5\nChecking  air_temperature_tmmx_5\nChecking  wind_speed_5\nChecking  fsca_5\nChecking  SWE_6\nChecking  air_temperature_tmmn_6\nChecking  potential_evapotranspiration_6\nChecking  mean_vapor_pressure_deficit_6\nChecking  relative_humidity_rmax_6\nChecking  relative_humidity_rmin_6\nChecking  precipitation_amount_6\nChecking  air_temperature_tmmx_6\nChecking  wind_speed_6\nChecking  fsca_6\nChecking  SWE_7\nChecking  air_temperature_tmmn_7\nChecking  potential_evapotranspiration_7\nChecking  mean_vapor_pressure_deficit_7\nChecking  relative_humidity_rmax_7\nChecking  relative_humidity_rmin_7\nChecking  precipitation_amount_7\nChecking  air_temperature_tmmx_7\nChecking  wind_speed_7\nChecking  fsca_7\nChecking  water_year\nChecking  cumulative_SWE\nconverted cumulative_SWE to log10\nChecking  cumulative_air_temperature_tmmn\nconverted cumulative_air_temperature_tmmn to log10\nChecking  cumulative_potential_evapotranspiration\nconverted cumulative_potential_evapotranspiration to log10\nChecking  cumulative_mean_vapor_pressure_deficit\nconverted cumulative_mean_vapor_pressure_deficit to log10\nChecking  cumulative_relative_humidity_rmax\nconverted cumulative_relative_humidity_rmax to log10\nChecking  cumulative_relative_humidity_rmin\nconverted cumulative_relative_humidity_rmin to log10\nChecking  cumulative_precipitation_amount\nconverted cumulative_precipitation_amount to log10\nChecking  cumulative_air_temperature_tmmx\nconverted cumulative_air_temperature_tmmx to log10\nChecking  cumulative_wind_speed\nconverted cumulative_wind_speed to log10\nChecking  cumulative_fsca\nconverted cumulative_fsca to log10\ndask_df.shape =  (2391441, 105)\nThe log10 file is saved to /home/zsun/gridmet_test_run/new_stations_3yrs_all_cols_log10.csv\nthe number of the total rows:  2391441\ndeduplicated_df.to_csv('deduplicated_training_points_final.csv', index=False)\nbash: line 0: exit: $: numeric argument required\n",
  "history_begin_time" : 1714940441053,
  "history_end_time" : 1714942541324,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "HkgUIS3UNJIQ",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\nimport dask.dataframe as dd\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    if column_name == \"SWE\":\n      mask = (y > 240) | y.isnull()\n    elif column_name == \"fsca\":\n      y = y.replace([225, 237, 239], 0)\n      y[y < 0] = 0\n      mask = (y > 100) | y.isnull()\n    else:\n      mask = y.isnull()\n\n    # Check if all elements in the mask array are True\n    all_true = np.all(mask)\n\n    if all_true:\n      df[column_name] = 0\n    else:\n      # Perform interpolation\n      new_y = np.interp(x, x[~mask], y[~mask])\n      # Replace missing values with interpolated values\n      df[column_name] = new_y\n\n    if np.any(df[column_name].isnull()):\n      raise ValueError(\"Single group: shouldn't have null values here\")\n        \n    return df\n\ndef convert_to_time_series(input_csv, output_csv, force=False):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                         'AMSR_SWE': 'SWE',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv) and not force:\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['SWE'] > 240):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        filled_data.to_csv(filled_csv, index=False)\n        \n        print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv) and not force:\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n        result.fillna(0, inplace=True)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv, force=False):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_cumulated = [\n      \"SWE\",\n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2018-10-01')\n    end_date = pd.to_datetime('2021-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df[\"cumulative_fsca\"].describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n\n    \ndef assign_zero_swe_value_to_all_fsca_zero_rows(na_filled_csv, non_station_zero_csv, force=False):\n    \n    # Define the conditions\n    condition_column = 'fsca'\n    target_column = 'swe_value'\n    values_to_check = [0, 225, 237, 239]\n    \n    \n    df = pd.read_csv(na_filled_csv, dtype={'station_name': 'object'})\n    empty_count = df[target_column].isnull().values.ravel().sum()\n    \n    print(f\"The empty number of rows are {empty_count} before filling in\")\n    print(\"double check the swe_value statistics before filling in:\", df[\"swe_value\"].describe())\n    \n    rows_less_than_zero = (df[target_column] < 0).sum()\n    print(\"Number of rows where '{}' is less than 0: {}\".format(target_column, rows_less_than_zero))\n    \n\n    # Mask the target column where the condition is met\n    df[target_column] = df[target_column].mask(\n        (df[target_column].isna()) & df[condition_column].isin(values_to_check),\n        0\n    )\n    \n    empty_count = df[target_column].isnull().values.ravel().sum()\n    \n    print(f\"The empty number of rows are {empty_count} after filling in\")\n    \n    print(\"total dataframe row number : \", len(df))\n    \n    df.to_csv(non_station_zero_csv, index=False)\n    \n    print(f\"The rows without snotel but fsca is zero or land or water or ocean are set to 0! {non_station_zero_csv}\")\n    print(\"double check the swe_value statistics after filling in:\", df[\"swe_value\"].describe())\n    \n    \ndef clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path, force=False):\n    # Read Dask DataFrame from CSV\n    dask_df = dd.read_csv(current_ready_csv_path, dtype={'station_name': 'object'})\n\n    # Remove rows where 'swe_value' is empty\n    dask_df_filtered = dask_df.dropna(subset=['swe_value'])\n\n    # Save the result to a new CSV file\n    dask_df_filtered.to_csv(cleaned_csv_path, index=False, single_file=True)\n    print(\"dask_df_filtered.shape = \", dask_df_filtered.shape)\n    print(f\"The filtered csv with no swe values is saved to {cleaned_csv_path}\")\n\ndef rename_corrected_slope(corrected_slope_path, renamed_slope_path, force=False):\n    df = pd.read_csv(corrected_slope_path, dtype={'station_name': 'object'})\n    df.drop(columns=['Slope'], inplace=True)\n\t# Rename 'column_to_rename' to 'old_column'\n    df.rename(columns={'corrected_slope': 'Slope'}, inplace=True)\n    df.to_csv(renamed_slope_path, index=False)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {renamed_slope_path}\")\n    \ndef log10_all_fields(cleaned_csv_path, logged_csv_path, force=False):\n    print(\"convert all cumulative columns into log10\")\n    # Read Dask DataFrame from CSV\n    df = pd.read_csv(cleaned_csv_path, dtype={'station_name': 'object'})\n    \n    # Get columns with \"cumulative\" in their names\n    for col in df.columns:\n        print(\"Checking \", col)\n        if \"cumulative\" in col:\n\t        # Apply log10 transformation to selected columns\n            df[col] = np.log10(df[col] + 0.1)  # Adding 1 to avoid log(0)\n            print(f\"converted {col} to log10\")\n\n    df.to_csv(logged_csv_path, index=False)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {logged_csv_path}\")\n\n    \n    \nif __name__ == \"__main__\":\n    # Define file paths for various CSV files\n    # current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n    current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv'\n    non_station_counted_csv_path = f'{work_dir}/new_stations_3yrs_fill_empty_snotel.csv'\n    cleaned_csv_path = f\"{work_dir}/new_stations_3yrs_cleaned.csv\"\n    target_time_series_csv_path = f'{work_dir}/new_stations_3yrs_time_series.csv'\n    backup_time_series_csv_path = f'{work_dir}/new_stations_3yrs_time_series_backup.csv'\n    # target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n    target_time_series_cumulative_csv_path = f'{work_dir}/new_stations_3yrs_cumulative.csv'\n    slope_renamed_path = f'{work_dir}/new_stations_3yrs_slope_renamed.csv'\n    logged_csv_path = f'{work_dir}/new_stations_3yrs_all_cols_log10.csv'\n    \n    # filling the non station rows with fsca indicating no snow\n    # assign_zero_swe_value_to_all_fsca_zero_rows(current_ready_csv_path, non_station_counted_csv_path, force=True)\n    \n    # remove the empty swe_value rows first\n    # clean_non_swe_rows(non_station_counted_csv_path, cleaned_csv_path, force=True)\n  \n    # Uncomment this line to execute the 'convert_to_time_series' function\n    # convert_to_time_series(cleaned_csv_path, target_time_series_csv_path, force=True)\n\n    # Uncomment this line to execute the 'add_cumulative_columns' function\n    # add_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path, force=True)\n    \n    # Rename the corrected slope to slope\n    # rename_corrected_slope(target_time_series_cumulative_csv_path, slope_renamed_path, force=True)\n    \n    # convert all cumulative columns to log10\n    # log10_all_fields(slope_renamed_path, logged_csv_path, force=True)\n    \n    df = pd.read_csv(logged_csv_path, dtype={'station_name': 'object'})\n    print(\"the number of the total rows: \", len(df))\n    \n    deduplicated_df = df.drop_duplicates(subset=['lat', 'lon'])\n    # Export the deduplicated DataFrame to a CSV file\n    deduplicated_df.to_csv(f'{work_dir}/deduplicated_training_points_final.csv', index=False)\n    print(\"deduplicated_df.to_csv('deduplicated_training_points_final.csv', index=False)\")\n    \n",
  "history_output" : "today date = 2024-05-05\ntest start date:  2024-05-01\ntest end date:  2023-10-11\n/home/zsun\nthe number of the total rows:  2391441\ndeduplicated_df.to_csv('deduplicated_training_points_final.csv', index=False)\nbash: line 0: exit: $: numeric argument required\n",
  "history_begin_time" : 1714940172901,
  "history_end_time" : 1714940203648,
  "history_notes" : "now should be right. The land, ocean, water should be set to 0 in fsca",
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "JI1kDGCLs50B",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\nimport dask.dataframe as dd\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    if column_name == \"SWE\":\n      mask = (y > 240) | y.isnull()\n    elif column_name == \"fsca\":\n      mask = ((y < 0) & (y > 100) & (y != 225) & (y != 237) & (y != 239)) | y.isnull()\n    else:\n      mask = y.isnull()\n\n    # Check if all elements in the mask array are True\n    all_true = np.all(mask)\n\n    if all_true:\n      df[column_name] = 0\n    else:\n      # Perform interpolation\n      new_y = np.interp(x, x[~mask], y[~mask])\n      # Replace missing values with interpolated values\n      df[column_name] = new_y\n\n    if np.any(df[column_name].isnull()):\n      raise ValueError(\"Single group: shouldn't have null values here\")\n        \n    return df\n\ndef convert_to_time_series(input_csv, output_csv, force=False):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                         'AMSR_SWE': 'SWE',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv) and not force:\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['SWE'] > 240):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        filled_data.to_csv(filled_csv, index=False)\n        \n        print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv) and not force:\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n        result.fillna(0, inplace=True)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv, force=False):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_cumulated = [\n      \"SWE\",\n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2018-10-01')\n    end_date = pd.to_datetime('2021-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df[\"cumulative_fsca\"].describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n\n    \ndef assign_zero_swe_value_to_all_fsca_zero_rows(na_filled_csv, non_station_zero_csv, force=False):\n    \n    # Define the conditions\n    condition_column = 'fsca'\n    target_column = 'swe_value'\n    values_to_check = [0, 225, 237, 239]\n    \n    \n    df = pd.read_csv(na_filled_csv, dtype={'station_name': 'object'})\n    empty_count = df[target_column].isnull().values.ravel().sum()\n    \n    print(f\"The empty number of rows are {empty_count} before filling in\")\n    print(\"double check the swe_value statistics before filling in:\", df[\"swe_value\"].describe())\n    \n    rows_less_than_zero = (df[target_column] < 0).sum()\n    print(\"Number of rows where '{}' is less than 0: {}\".format(target_column, rows_less_than_zero))\n    \n\n    # Mask the target column where the condition is met\n    df[target_column] = df[target_column].mask(\n        (df[target_column].isna()) & df[condition_column].isin(values_to_check),\n        0\n    )\n    \n    empty_count = df[target_column].isnull().values.ravel().sum()\n    \n    print(f\"The empty number of rows are {empty_count} after filling in\")\n    \n    print(\"total dataframe row number : \", len(df))\n    \n    df.to_csv(non_station_zero_csv, index=False)\n    \n    print(f\"The rows without snotel but fsca is zero or land or water or ocean are set to 0! {non_station_zero_csv}\")\n    print(\"double check the swe_value statistics after filling in:\", df[\"swe_value\"].describe())\n    \n    \ndef clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path, force=False):\n    # Read Dask DataFrame from CSV\n    dask_df = dd.read_csv(current_ready_csv_path, dtype={'station_name': 'object'})\n\n    # Remove rows where 'swe_value' is empty\n    dask_df_filtered = dask_df.dropna(subset=['swe_value'])\n\n    # Save the result to a new CSV file\n    dask_df_filtered.to_csv(cleaned_csv_path, index=False, single_file=True)\n    print(\"dask_df_filtered.shape = \", dask_df_filtered.shape)\n    print(f\"The filtered csv with no swe values is saved to {cleaned_csv_path}\")\n\ndef rename_corrected_slope(corrected_slope_path, renamed_slope_path, force=False):\n    df = pd.read_csv(corrected_slope_path, dtype={'station_name': 'object'})\n    df.drop(columns=['Slope'], inplace=True)\n\t# Rename 'column_to_rename' to 'old_column'\n    df.rename(columns={'corrected_slope': 'Slope'}, inplace=True)\n    df.to_csv(renamed_slope_path, index=False)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {renamed_slope_path}\")\n    \ndef log10_all_fields(cleaned_csv_path, logged_csv_path, force=False):\n    print(\"convert all cumulative columns into log10\")\n    # Read Dask DataFrame from CSV\n    df = pd.read_csv(cleaned_csv_path, dtype={'station_name': 'object'})\n    \n    # Get columns with \"cumulative\" in their names\n    for col in df.columns:\n        print(\"Checking \", col)\n        if \"cumulative\" in col:\n\t        # Apply log10 transformation to selected columns\n            df[col] = np.log10(df[col] + 0.1)  # Adding 1 to avoid log(0)\n            print(f\"converted {col} to log10\")\n\n    df.to_csv(logged_csv_path, index=False)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {logged_csv_path}\")\n\n    \n    \nif __name__ == \"__main__\":\n    # Define file paths for various CSV files\n    # current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n    current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv'\n    non_station_counted_csv_path = f'{work_dir}/new_stations_3yrs_fill_empty_snotel.csv'\n    cleaned_csv_path = f\"{work_dir}/new_stations_3yrs_cleaned.csv\"\n    target_time_series_csv_path = f'{work_dir}/new_stations_3yrs_time_series.csv'\n    backup_time_series_csv_path = f'{work_dir}/new_stations_3yrs_time_series_backup.csv'\n    # target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n    target_time_series_cumulative_csv_path = f'{work_dir}/new_stations_3yrs_cumulative.csv'\n    slope_renamed_path = f'{work_dir}/new_stations_3yrs_slope_renamed.csv'\n    logged_csv_path = f'{work_dir}/new_stations_3yrs_all_cols_log10.csv'\n    \n    # filling the non station rows with fsca indicating no snow\n    # assign_zero_swe_value_to_all_fsca_zero_rows(current_ready_csv_path, non_station_counted_csv_path, force=True)\n    \n    # remove the empty swe_value rows first\n    # clean_non_swe_rows(non_station_counted_csv_path, cleaned_csv_path, force=True)\n  \n    # Uncomment this line to execute the 'convert_to_time_series' function\n    # convert_to_time_series(cleaned_csv_path, target_time_series_csv_path, force=True)\n\n    # Uncomment this line to execute the 'add_cumulative_columns' function\n    # add_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path, force=True)\n    \n    # Rename the corrected slope to slope\n    # rename_corrected_slope(target_time_series_cumulative_csv_path, slope_renamed_path, force=True)\n    \n    # convert all cumulative columns to log10\n    # log10_all_fields(slope_renamed_path, logged_csv_path, force=True)\n    \n    df = pd.read_csv(logged_csv_path, dtype={'station_name': 'object'})\n    print(\"the number of the total rows: \", len(df))\n    \n    deduplicated_df = df.drop_duplicates(subset=['lat', 'lon'])\n    # Export the deduplicated DataFrame to a CSV file\n    deduplicated_df.to_csv(f'{work_dir}/deduplicated_training_points_final.csv', index=False)\n    print(\"deduplicated_df.to_csv('deduplicated_training_points_final.csv', index=False)\")\n    \n",
  "history_output" : "today date = 2024-05-05\ntest start date:  2024-05-01\ntest end date:  2023-10-11\n/home/chetana\nthe number of the total rows:  2391441\ndeduplicated_df.to_csv('deduplicated_training_points_final.csv', index=False)\n",
  "history_begin_time" : 1714934835508,
  "history_end_time" : 1714934888894,
  "history_notes" : "check on deduplicated points",
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "USTDOv4R7Th3",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\nimport dask.dataframe as dd\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    if column_name == \"SWE\":\n      mask = (y > 240) | y.isnull()\n    elif column_name == \"fsca\":\n      mask = ((y < 0) & (y > 100) & (y != 225) & (y != 237) & (y != 239)) | y.isnull()\n    else:\n      mask = y.isnull()\n\n    # Check if all elements in the mask array are True\n    all_true = np.all(mask)\n\n    if all_true:\n      df[column_name] = 0\n    else:\n      # Perform interpolation\n      new_y = np.interp(x, x[~mask], y[~mask])\n      # Replace missing values with interpolated values\n      df[column_name] = new_y\n\n    if np.any(df[column_name].isnull()):\n      raise ValueError(\"Single group: shouldn't have null values here\")\n        \n    return df\n\ndef convert_to_time_series(input_csv, output_csv, force=False):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                         'AMSR_SWE': 'SWE',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv) and not force:\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['SWE'] > 240):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        filled_data.to_csv(filled_csv, index=False)\n        \n        print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv) and not force:\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n        result.fillna(0, inplace=True)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv, force=False):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_cumulated = [\n      \"SWE\",\n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2018-10-01')\n    end_date = pd.to_datetime('2021-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df[\"cumulative_fsca\"].describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n\n    \ndef assign_zero_swe_value_to_all_fsca_zero_rows(na_filled_csv, non_station_zero_csv, force=False):\n    \n    # Define the conditions\n    condition_column = 'fsca'\n    target_column = 'swe_value'\n    values_to_check = [0, 225, 237, 239]\n    \n    \n    df = pd.read_csv(na_filled_csv, dtype={'station_name': 'object'})\n    empty_count = df[target_column].isnull().values.ravel().sum()\n    \n    print(f\"The empty number of rows are {empty_count} before filling in\")\n    print(\"double check the swe_value statistics before filling in:\", df[\"swe_value\"].describe())\n    \n    rows_less_than_zero = (df[target_column] < 0).sum()\n    print(\"Number of rows where '{}' is less than 0: {}\".format(target_column, rows_less_than_zero))\n    \n\n    # Mask the target column where the condition is met\n    df[target_column] = df[target_column].mask(\n        (df[target_column].isna()) & df[condition_column].isin(values_to_check),\n        0\n    )\n    \n    empty_count = df[target_column].isnull().values.ravel().sum()\n    \n    print(f\"The empty number of rows are {empty_count} after filling in\")\n    \n    print(\"total dataframe row number : \", len(df))\n    \n    df.to_csv(non_station_zero_csv, index=False)\n    \n    print(f\"The rows without snotel but fsca is zero or land or water or ocean are set to 0! {non_station_zero_csv}\")\n    print(\"double check the swe_value statistics after filling in:\", df[\"swe_value\"].describe())\n    \n    \ndef clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path, force=False):\n    # Read Dask DataFrame from CSV\n    dask_df = dd.read_csv(current_ready_csv_path, dtype={'station_name': 'object'})\n\n    # Remove rows where 'swe_value' is empty\n    dask_df_filtered = dask_df.dropna(subset=['swe_value'])\n\n    # Save the result to a new CSV file\n    dask_df_filtered.to_csv(cleaned_csv_path, index=False, single_file=True)\n    print(\"dask_df_filtered.shape = \", dask_df_filtered.shape)\n    print(f\"The filtered csv with no swe values is saved to {cleaned_csv_path}\")\n\ndef rename_corrected_slope(corrected_slope_path, renamed_slope_path, force=False):\n    df = pd.read_csv(corrected_slope_path, dtype={'station_name': 'object'})\n    df.drop(columns=['Slope'], inplace=True)\n\t# Rename 'column_to_rename' to 'old_column'\n    df.rename(columns={'corrected_slope': 'Slope'}, inplace=True)\n    df.to_csv(renamed_slope_path, index=False)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {renamed_slope_path}\")\n    \ndef log10_all_fields(cleaned_csv_path, logged_csv_path, force=False):\n    print(\"convert all cumulative columns into log10\")\n    # Read Dask DataFrame from CSV\n    df = pd.read_csv(cleaned_csv_path, dtype={'station_name': 'object'})\n    \n    # Get columns with \"cumulative\" in their names\n    for col in df.columns:\n        print(\"Checking \", col)\n        if \"cumulative\" in col:\n\t        # Apply log10 transformation to selected columns\n            df[col] = np.log10(df[col] + 0.1)  # Adding 1 to avoid log(0)\n            print(f\"converted {col} to log10\")\n\n    df.to_csv(logged_csv_path, index=False)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {logged_csv_path}\")\n\n    \n    \nif __name__ == \"__main__\":\n    # Define file paths for various CSV files\n    # current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n    current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv'\n    non_station_counted_csv_path = f'{work_dir}/new_stations_3yrs_fill_empty_snotel.csv'\n    cleaned_csv_path = f\"{work_dir}/new_stations_3yrs_cleaned.csv\"\n    target_time_series_csv_path = f'{work_dir}/new_stations_3yrs_time_series.csv'\n    backup_time_series_csv_path = f'{work_dir}/new_stations_3yrs_time_series_backup.csv'\n    # target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n    target_time_series_cumulative_csv_path = f'{work_dir}/new_stations_3yrs_cumulative.csv'\n    slope_renamed_path = f'{work_dir}/new_stations_3yrs_slope_renamed.csv'\n    logged_csv_path = f'{work_dir}/new_stations_3yrs_all_cols_log10.csv'\n    \n    # filling the non station rows with fsca indicating no snow\n    assign_zero_swe_value_to_all_fsca_zero_rows(current_ready_csv_path, non_station_counted_csv_path, force=True)\n    \n    # remove the empty swe_value rows first\n    clean_non_swe_rows(non_station_counted_csv_path, cleaned_csv_path, force=True)\n  \n    # Uncomment this line to execute the 'convert_to_time_series' function\n    convert_to_time_series(cleaned_csv_path, target_time_series_csv_path, force=True)\n\n    # Uncomment this line to execute the 'add_cumulative_columns' function\n    add_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path, force=True)\n    \n    # Rename the corrected slope to slope\n    rename_corrected_slope(target_time_series_cumulative_csv_path, slope_renamed_path, force=True)\n    \n    # convert all cumulative columns to log10\n    log10_all_fields(slope_renamed_path, logged_csv_path, force=True)\n    \n    df = pd.read_csv(logged_csv_path, dtype={'station_name': 'object'})\n    print(\"the number of the total rows: \", len(df))\n    \n    deduplicated_df = df.drop_duplicates(subset=['lat', 'lon'])\n    # Export the deduplicated DataFrame to a CSV file\n    deduplicated_df.to_csv('deduplicated_training_points_final.csv', index=False)\n    print(\"deduplicated_df.to_csv('deduplicated_training_points_final.csv', index=False)\")\n    \n",
  "history_output" : "today date = 2024-05-05\ntest start date:  2024-05-01\ntest end date:  2023-10-11\n/home/zsun\nThe empty number of rows are 13750843 before filling in\ndouble check the swe_value statistics before filling in: count    1.324517e+06\nmean     5.606424e+00\nstd      9.727693e+00\nmin     -8.000000e+00\n25%      0.000000e+00\n50%      4.000000e-01\n75%      7.800000e+00\nmax      1.066000e+02\nName: swe_value, dtype: float64\nNumber of rows where 'swe_value' is less than 0: 19\nThe empty number of rows are 11864286 after filling in\ntotal dataframe row number :  15075360\nThe rows without snotel but fsca is zero or land or water or ocean are set to 0! /home/zsun/gridmet_test_run/new_stations_3yrs_fill_empty_snotel.csv\ndouble check the swe_value statistics after filling in: count    3.211074e+06\nmean     2.312561e+00\nstd      6.830066e+00\nmin     -8.000000e+00\n25%      0.000000e+00\n50%      0.000000e+00\n75%      0.000000e+00\nmax      1.066000e+02\nName: swe_value, dtype: float64\ndask_df_filtered.shape =  (Delayed('int-c66cd74e-8f88-4544-9c49-7f5851fe80a6'), 25)\nThe filtered csv with no swe values is saved to /home/zsun/gridmet_test_run/new_stations_3yrs_cleaned.csv\nAll current columns:  Index(['date', 'lat', 'lon', 'AMSR_SWE', 'station_name', 'swe_value',\n       'change_in_swe_inch', 'snow_depth', 'air_temperature_observed_f',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'fsca', 'corrected_slope'],\n      dtype='object')\nStart to fill in the missing values\nNew filled values csv is saved to /home/zsun/gridmet_test_run/new_stations_3yrs_time_series.csv_gap_filled.csv\nStart to create the training csv with previous 7 days columns\nNew data is saved to /home/zsun/gridmet_test_run/new_stations_3yrs_time_series.csv\nFile is backed up to /home/zsun/gridmet_test_run/new_stations_3yrs_time_series_backup.csv\nthe column statistics from time series before cumulative:                  lat           lon           SWE     swe_value  \\\ncount  3.211074e+06  3.211074e+06  3.211074e+06  3.211074e+06   \nmean   4.156352e+01 -1.136765e+02  5.914814e+00  2.312561e+00   \nstd    3.850046e+00  5.696848e+00  1.580655e+01  6.830066e+00   \nmin    3.141666e+01 -1.245500e+02  0.000000e+00 -8.000000e+00   \n25%    3.855000e+01 -1.192220e+02  0.000000e+00  0.000000e+00   \n50%    4.118467e+01 -1.128238e+02  0.000000e+00  0.000000e+00   \n75%    4.457462e+01 -1.090667e+02  0.000000e+00  0.000000e+00   \nmax    4.900000e+01 -1.005075e+02  2.340000e+02  1.066000e+02   \n\n       change_in_swe_inch    snow_depth  air_temperature_observed_f  \\\ncount        3.211074e+06  3.211074e+06                3.211074e+06   \nmean         3.557065e-03  6.133463e+00                1.468743e+01   \nstd          1.198090e+00  1.723942e+01                2.040158e+01   \nmin         -1.370000e+02  0.000000e+00               -8.660000e+01   \n25%          0.000000e+00  0.000000e+00                0.000000e+00   \n50%          0.000000e+00  0.000000e+00                0.000000e+00   \n75%          0.000000e+00  0.000000e+00                3.180000e+01   \nmax          1.370000e+02  2.290000e+02                6.710000e+02   \n\n       air_temperature_tmmn  potential_evapotranspiration  \\\ncount          3.211074e+06                  3.211074e+06   \nmean           2.754783e+02                  4.968408e+00   \nstd            9.883147e+00                  3.213294e+00   \nmin            0.000000e+00                  0.000000e+00   \n25%            2.701000e+02                  2.200000e+00   \n50%            2.762000e+02                  4.600000e+00   \n75%            2.817000e+02                  7.200000e+00   \nmax            3.085000e+02                  2.380000e+01   \n\n       mean_vapor_pressure_deficit  relative_humidity_rmax  \\\ncount                 3.211074e+06            3.211074e+06   \nmean                  8.788692e-01            7.125555e+01   \nstd                   8.027297e-01            2.059016e+01   \nmin                   0.000000e+00            0.000000e+00   \n25%                   2.700000e-01            5.560000e+01   \n50%                   6.300000e-01            7.250000e+01   \n75%                   1.270000e+00            8.860000e+01   \nmax                   7.920000e+00            1.000000e+02   \n\n       relative_humidity_rmin  precipitation_amount  air_temperature_tmmx  \\\ncount            3.211074e+06          3.211074e+06          3.211074e+06   \nmean             2.879124e+01          1.602402e+00          2.884101e+02   \nstd              1.675204e+01          5.366858e+00          1.402561e+01   \nmin              0.000000e+00          0.000000e+00          0.000000e+00   \n25%              1.680000e+01          0.000000e+00          2.791000e+02   \n50%              2.480000e+01          0.000000e+00          2.886000e+02   \n75%              3.660000e+01          7.000000e-01          2.981000e+02   \nmax              1.000000e+02          5.042000e+02          3.254000e+02   \n\n         wind_speed     Elevation         Slope        Aspect     Curvature  \\\ncount  3.211074e+06  3.211074e+06  3.211074e+06  3.211074e+06  3.211074e+06   \nmean   3.772103e+00  1.953251e+03  9.195949e-01  1.845197e+02 -9.614543e+02   \nstd    1.737611e+00  7.932325e+02  2.524931e+00  1.047163e+02  5.081542e+03   \nmin    0.000000e+00 -1.207950e+00  6.327820e-02 -0.000000e+00 -2.198460e+04   \n25%    2.600000e+00  1.402141e+03  2.445297e-01  9.258768e+01 -3.988808e+03   \n50%    3.400000e+00  2.001734e+03  4.136047e-01  1.880594e+02 -2.000815e+01   \n75%    4.600000e+00  2.551543e+03  8.278580e-01  2.758316e+02  2.282732e+03   \nmax    1.960000e+01  3.978188e+03  9.000000e+01  3.599130e+02  1.757020e+04   \n\n          Northness      Eastness          fsca  corrected_slope  \\\ncount  3.211074e+06  3.211074e+06  3.211074e+06     3.211074e+06   \nmean   1.180370e-02  2.834155e-02  5.669580e+01     6.625122e+01   \nstd    5.884916e-01  5.823986e-01  1.010189e+02     4.885372e+02   \nmin   -7.853982e-01 -7.853979e-01  0.000000e+00    -9.999000e+03   \n25%   -6.284770e-01 -5.789484e-01  0.000000e+00     8.996606e+01   \n50%    2.564631e-02  6.505793e-02  0.000000e+00     8.998275e+01   \n75%    6.187943e-01  6.341513e-01  5.100000e+01     8.998937e+01   \nmax    7.853978e-01  7.853982e-01  2.550000e+02     8.999759e+01   \n\n              SWE_1  air_temperature_tmmn_1  potential_evapotranspiration_1  \\\ncount  3.211074e+06            3.211074e+06                    3.211074e+06   \nmean   5.912666e+00            2.751788e+02                    4.965036e+00   \nstd    1.580632e+01            1.354239e+01                    3.216475e+00   \nmin    0.000000e+00            0.000000e+00                    0.000000e+00   \n25%    0.000000e+00            2.700000e+02                    2.200000e+00   \n50%    0.000000e+00            2.762000e+02                    4.600000e+00   \n75%    0.000000e+00            2.817000e+02                    7.200000e+00   \nmax    2.340000e+02            3.085000e+02                    2.380000e+01   \n\n       mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\ncount                   3.211074e+06              3.211074e+06   \nmean                    8.778043e-01              7.115879e+01   \nstd                     8.027140e-01              2.071607e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.700000e-01              5.550000e+01   \n50%                     6.300000e-01              7.250000e+01   \n75%                     1.270000e+00              8.850000e+01   \nmax                     7.920000e+00              1.000000e+02   \n\n       relative_humidity_rmin_1  precipitation_amount_1  \\\ncount              3.211074e+06            3.211074e+06   \nmean               2.873147e+01            1.599346e+00   \nstd                1.674886e+01            5.359386e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.680000e+01            0.000000e+00   \n50%                2.480000e+01            0.000000e+00   \n75%                3.650000e+01            7.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n\n       air_temperature_tmmx_1  wind_speed_1        fsca_1         SWE_2  \\\ncount            3.211074e+06  3.211074e+06  3.211074e+06  3.211074e+06   \nmean             2.880967e+02  3.766843e+00  5.662961e+01  5.910524e+00   \nstd              1.704810e+01  1.740410e+00  1.009767e+02  1.580611e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.790000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.886000e+02  3.400000e+00  0.000000e+00  0.000000e+00   \n75%              2.981000e+02  4.600000e+00  5.100000e+01  0.000000e+00   \nmax              3.254000e+02  1.960000e+01  2.550000e+02  2.340000e+02   \n\n       air_temperature_tmmn_2  potential_evapotranspiration_2  \\\ncount            3.211074e+06                    3.211074e+06   \nmean             2.748774e+02                    4.961526e+00   \nstd              1.640089e+01                    3.219742e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.700000e+02                    2.200000e+00   \n50%              2.762000e+02                    4.600000e+00   \n75%              2.817000e+02                    7.200000e+00   \nmax              3.085000e+02                    2.380000e+01   \n\n       mean_vapor_pressure_deficit_2  relative_humidity_rmax_2  \\\ncount                   3.211074e+06              3.211074e+06   \nmean                    8.767467e-01              7.106159e+01   \nstd                     8.027024e-01              2.084015e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.700000e-01              5.550000e+01   \n50%                     6.300000e-01              7.240000e+01   \n75%                     1.270000e+00              8.850000e+01   \nmax                     7.920000e+00              1.000000e+02   \n\n       relative_humidity_rmin_2  precipitation_amount_2  \\\ncount              3.211074e+06            3.211074e+06   \nmean               2.867329e+01            1.596229e+00   \nstd                1.674974e+01            5.353499e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.680000e+01            0.000000e+00   \n50%                2.470000e+01            0.000000e+00   \n75%                3.650000e+01            7.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n\n       air_temperature_tmmx_2  wind_speed_2        fsca_2         SWE_3  \\\ncount            3.211074e+06  3.211074e+06  3.211074e+06  3.211074e+06   \nmean             2.877840e+02  3.760861e+00  5.656106e+01  5.908328e+00   \nstd              1.960479e+01  1.742164e+00  1.009321e+02  1.580584e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.790000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.886000e+02  3.400000e+00  0.000000e+00  0.000000e+00   \n75%              2.981000e+02  4.600000e+00  5.100000e+01  0.000000e+00   \nmax              3.254000e+02  1.960000e+01  2.550000e+02  2.340000e+02   \n\n       air_temperature_tmmn_3  potential_evapotranspiration_3  \\\ncount            3.211074e+06                    3.211074e+06   \nmean             2.745755e+02                    4.957972e+00   \nstd              1.882549e+01                    3.223020e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.700000e+02                    2.200000e+00   \n50%              2.762000e+02                    4.600000e+00   \n75%              2.817000e+02                    7.200000e+00   \nmax              3.085000e+02                    2.380000e+01   \n\n       mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\ncount                   3.211074e+06              3.211074e+06   \nmean                    8.756875e-01              7.096146e+01   \nstd                     8.026856e-01              2.096297e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.600000e-01              5.540000e+01   \n50%                     6.300000e-01              7.240000e+01   \n75%                     1.270000e+00              8.840000e+01   \nmax                     7.920000e+00              1.000000e+02   \n\n       relative_humidity_rmin_3  precipitation_amount_3  \\\ncount              3.211074e+06            3.211074e+06   \nmean               2.861654e+01            1.593149e+00   \nstd                1.675190e+01            5.349529e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.670000e+01            0.000000e+00   \n50%                2.470000e+01            0.000000e+00   \n75%                3.640000e+01            7.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n\n       air_temperature_tmmx_3  wind_speed_3        fsca_3         SWE_4  \\\ncount            3.211074e+06  3.211074e+06  3.211074e+06  3.211074e+06   \nmean             2.874718e+02  3.755791e+00  5.649716e+01  5.906114e+00   \nstd              2.185971e+01  1.745100e+00  1.008920e+02  1.580556e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.790000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.886000e+02  3.400000e+00  0.000000e+00  0.000000e+00   \n75%              2.981000e+02  4.600000e+00  5.100000e+01  0.000000e+00   \nmax              3.254000e+02  1.960000e+01  2.550000e+02  2.340000e+02   \n\n       air_temperature_tmmn_4  potential_evapotranspiration_4  \\\ncount            3.211074e+06                    3.211074e+06   \nmean             2.742726e+02                    4.954449e+00   \nstd              2.096762e+01                    3.226200e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.700000e+02                    2.200000e+00   \n50%              2.762000e+02                    4.600000e+00   \n75%              2.817000e+02                    7.200000e+00   \nmax              3.085000e+02                    2.380000e+01   \n\n       mean_vapor_pressure_deficit_4  relative_humidity_rmax_4  \\\ncount                   3.211074e+06              3.211074e+06   \nmean                    8.746293e-01              7.086099e+01   \nstd                     8.026588e-01              2.108449e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.600000e-01              5.530000e+01   \n50%                     6.300000e-01              7.230000e+01   \n75%                     1.270000e+00              8.840000e+01   \nmax                     7.920000e+00              1.000000e+02   \n\n       relative_humidity_rmin_4  precipitation_amount_4  \\\ncount              3.211074e+06            3.211074e+06   \nmean               2.856438e+01            1.590732e+00   \nstd                1.675809e+01            5.345869e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.670000e+01            0.000000e+00   \n50%                2.470000e+01            0.000000e+00   \n75%                3.640000e+01            7.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n\n       air_temperature_tmmx_4  wind_speed_4        fsca_4         SWE_5  \\\ncount            3.211074e+06  3.211074e+06  3.211074e+06  3.211074e+06   \nmean             2.871593e+02  3.750750e+00  5.642836e+01  5.904152e+00   \nstd              2.389898e+01  1.747776e+00  1.008468e+02  1.580535e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.790000e+02  2.500000e+00  0.000000e+00  0.000000e+00   \n50%              2.886000e+02  3.400000e+00  0.000000e+00  0.000000e+00   \n75%              2.981000e+02  4.600000e+00  5.100000e+01  0.000000e+00   \nmax              3.254000e+02  1.960000e+01  2.550000e+02  2.340000e+02   \n\n       air_temperature_tmmn_5  potential_evapotranspiration_5  \\\ncount            3.211074e+06                    3.211074e+06   \nmean             2.739686e+02                    4.950782e+00   \nstd              2.290657e+01                    3.229421e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.700000e+02                    2.200000e+00   \n50%              2.762000e+02                    4.600000e+00   \n75%              2.817000e+02                    7.200000e+00   \nmax              3.085000e+02                    2.380000e+01   \n\n       mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\ncount                   3.211074e+06              3.211074e+06   \nmean                    8.735743e-01              7.076048e+01   \nstd                     8.026335e-01              2.120527e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.600000e-01              5.520000e+01   \n50%                     6.200000e-01              7.230000e+01   \n75%                     1.270000e+00              8.830000e+01   \nmax                     7.920000e+00              1.000000e+02   \n\n       relative_humidity_rmin_5  precipitation_amount_5  \\\ncount              3.211074e+06            3.211074e+06   \nmean               2.851507e+01            1.588183e+00   \nstd                1.676650e+01            5.343368e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.670000e+01            0.000000e+00   \n50%                2.460000e+01            0.000000e+00   \n75%                3.630000e+01            7.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n\n       air_temperature_tmmx_5  wind_speed_5        fsca_5         SWE_6  \\\ncount            3.211074e+06  3.211074e+06  3.211074e+06  3.211074e+06   \nmean             2.868453e+02  3.745403e+00  5.636542e+01  5.902941e+00   \nstd              2.577429e+01  1.749853e+00  1.008072e+02  1.580518e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.790000e+02  2.500000e+00  0.000000e+00  0.000000e+00   \n50%              2.886000e+02  3.400000e+00  0.000000e+00  0.000000e+00   \n75%              2.981000e+02  4.600000e+00  5.000000e+01  0.000000e+00   \nmax              3.254000e+02  1.960000e+01  2.550000e+02  2.340000e+02   \n\n       air_temperature_tmmn_6  potential_evapotranspiration_6  \\\ncount            3.211074e+06                    3.211074e+06   \nmean             2.736636e+02                    4.947033e+00   \nstd              2.469024e+01                    3.232708e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.700000e+02                    2.200000e+00   \n50%              2.762000e+02                    4.600000e+00   \n75%              2.817000e+02                    7.200000e+00   \nmax              3.085000e+02                    2.380000e+01   \n\n       mean_vapor_pressure_deficit_6  relative_humidity_rmax_6  \\\ncount                   3.211074e+06              3.211074e+06   \nmean                    8.725189e-01              7.065909e+01   \nstd                     8.025997e-01              2.132392e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.600000e-01              5.510000e+01   \n50%                     6.200000e-01              7.220001e+01   \n75%                     1.270000e+00              8.830000e+01   \nmax                     7.920000e+00              1.000000e+02   \n\n       relative_humidity_rmin_6  precipitation_amount_6  \\\ncount              3.211074e+06            3.211074e+06   \nmean               2.846746e+01            1.585877e+00   \nstd                1.677555e+01            5.340453e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.660000e+01            0.000000e+00   \n50%                2.460000e+01            0.000000e+00   \n75%                3.630000e+01            7.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n\n       air_temperature_tmmx_6  wind_speed_6        fsca_6         SWE_7  \\\ncount            3.211074e+06  3.211074e+06  3.211074e+06  3.211074e+06   \nmean             2.865309e+02  3.739675e+00  5.629664e+01  5.902085e+00   \nstd              2.751862e+01  1.750838e+00  1.007621e+02  1.580511e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.790000e+02  2.500000e+00  0.000000e+00  0.000000e+00   \n50%              2.886000e+02  3.400000e+00  0.000000e+00  0.000000e+00   \n75%              2.981000e+02  4.600000e+00  5.000000e+01  0.000000e+00   \nmax              3.254000e+02  1.960000e+01  2.550000e+02  2.340000e+02   \n\n       air_temperature_tmmn_7  potential_evapotranspiration_7  \\\ncount            3.211074e+06                    3.211074e+06   \nmean             2.733573e+02                    4.943259e+00   \nstd              2.635032e+01                    3.235903e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.700000e+02                    2.200000e+00   \n50%              2.761000e+02                    4.600000e+00   \n75%              2.817000e+02                    7.200000e+00   \nmax              3.085000e+02                    2.380000e+01   \n\n       mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\ncount                   3.211074e+06              3.211074e+06   \nmean                    8.714657e-01              7.055774e+01   \nstd                     8.025681e-01              2.144141e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.600000e-01              5.500000e+01   \n50%                     6.200000e-01              7.210000e+01   \n75%                     1.270000e+00              8.820001e+01   \nmax                     7.920000e+00              1.000000e+02   \n\n       relative_humidity_rmin_7  precipitation_amount_7  \\\ncount              3.211074e+06            3.211074e+06   \nmean               2.842077e+01            1.583692e+00   \nstd                1.678494e+01            5.336799e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.660000e+01            0.000000e+00   \n50%                2.460000e+01            0.000000e+00   \n75%                3.620000e+01            7.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n\n       air_temperature_tmmx_7  wind_speed_7        fsca_7  \ncount            3.211074e+06  3.211074e+06  3.211074e+06  \nmean             2.862166e+02  3.734451e+00  5.622605e+01  \nstd              2.915542e+01  1.753039e+00  1.007147e+02  \nmin              0.000000e+00  0.000000e+00  0.000000e+00  \n25%              2.790000e+02  2.500000e+00  0.000000e+00  \n50%              2.886000e+02  3.400000e+00  0.000000e+00  \n75%              2.981000e+02  4.600000e+00  5.000000e+01  \nmax              3.254000e+02  1.960000e+01  2.550000e+02  \nThis is our unique years [2018 2019 2020 2021]\nhow many rows are left in the three water years?                 lat           lon           SWE     swe_value  \\\ncount  2.391441e+06  2.391441e+06  2.391441e+06  2.391441e+06   \nmean   4.158887e+01 -1.137162e+02  4.341821e+00  2.458014e+00   \nstd    3.850395e+00  5.697857e+00  1.417716e+01  7.005064e+00   \nmin    3.141666e+01 -1.245500e+02  0.000000e+00 -8.000000e+00   \n25%    3.863000e+01 -1.192539e+02  0.000000e+00  0.000000e+00   \n50%    4.122500e+01 -1.128593e+02  0.000000e+00  0.000000e+00   \n75%    4.459397e+01 -1.091000e+02  0.000000e+00  0.000000e+00   \nmax    4.900000e+01 -1.005075e+02  2.340000e+02  1.021000e+02   \n\n       change_in_swe_inch    snow_depth  air_temperature_observed_f  \\\ncount        2.391441e+06  2.391441e+06                2.391441e+06   \nmean        -4.537013e-04  6.432507e+00                1.464136e+01   \nstd          1.216162e+00  1.744774e+01                2.035171e+01   \nmin         -1.370000e+02  0.000000e+00               -8.660000e+01   \n25%          0.000000e+00  0.000000e+00                0.000000e+00   \n50%          0.000000e+00  0.000000e+00                0.000000e+00   \n75%          0.000000e+00  0.000000e+00                3.150000e+01   \nmax          1.200000e+02  2.290000e+02                6.710000e+02   \n\n       air_temperature_tmmn  potential_evapotranspiration  \\\ncount          2.391441e+06                  2.391441e+06   \nmean           2.753547e+02                  5.010496e+00   \nstd            1.003197e+01                  3.215854e+00   \nmin            0.000000e+00                  0.000000e+00   \n25%            2.697000e+02                  2.275881e+00   \n50%            2.760000e+02                  4.700000e+00   \n75%            2.818000e+02                  7.300000e+00   \nmax            3.085000e+02                  2.380000e+01   \n\n       mean_vapor_pressure_deficit  relative_humidity_rmax  \\\ncount                 2.391441e+06            2.391441e+06   \nmean                  8.058697e-01            6.997290e+01   \nstd                   7.560035e-01            2.106099e+01   \nmin                   0.000000e+00            0.000000e+00   \n25%                   2.400000e-01            5.360000e+01   \n50%                   5.600000e-01            7.110000e+01   \n75%                   1.160000e+00            8.770001e+01   \nmax                   7.660000e+00            1.000000e+02   \n\n       relative_humidity_rmin  precipitation_amount  air_temperature_tmmx  \\\ncount            2.391441e+06          2.391441e+06          2.391441e+06   \nmean             2.884618e+01          1.664149e+00          2.884690e+02   \nstd              1.676406e+01          5.520286e+00          1.393679e+01   \nmin              0.000000e+00          0.000000e+00          0.000000e+00   \n25%              1.700000e+01          0.000000e+00          2.791000e+02   \n50%              2.480000e+01          0.000000e+00          2.886000e+02   \n75%              3.660000e+01          8.000000e-01          2.980000e+02   \nmax              1.000000e+02          5.042000e+02          3.254000e+02   \n\n         wind_speed     Elevation         Slope        Aspect     Curvature  \\\ncount  2.391441e+06  2.391441e+06  2.391441e+06  2.391441e+06  2.391441e+06   \nmean   3.747760e+00  1.948288e+03  9.197840e-01  1.845691e+02 -9.690169e+02   \nstd    1.713472e+00  7.950956e+02  2.520140e+00  1.047452e+02  5.081637e+03   \nmin    0.000000e+00 -1.207950e+00  6.327820e-02 -0.000000e+00 -2.198460e+04   \n25%    2.600000e+00  1.394696e+03  2.445297e-01  9.263547e+01 -3.992808e+03   \n50%    3.400000e+00  1.988180e+03  4.136047e-01  1.880594e+02 -2.811145e+01   \n75%    4.600000e+00  2.547068e+03  8.297043e-01  2.760791e+02  2.280909e+03   \nmax    1.960000e+01  3.978188e+03  9.000000e+01  3.599130e+02  1.757020e+04   \n\n          Northness      Eastness          fsca  corrected_slope  \\\ncount  2.391441e+06  2.391441e+06  2.391441e+06     2.391441e+06   \nmean   1.212411e-02  2.819455e-02  5.694140e+01     6.585723e+01   \nstd    5.886406e-01  5.822671e-01  1.009253e+02     4.925694e+02   \nmin   -7.853982e-01 -7.853979e-01  0.000000e+00    -9.999000e+03   \n25%   -6.284770e-01 -5.789484e-01  0.000000e+00     8.996606e+01   \n50%    2.564631e-02  6.505793e-02  0.000000e+00     8.998275e+01   \n75%    6.196246e-01  6.337889e-01  5.300000e+01     8.998937e+01   \nmax    7.853978e-01  7.853982e-01  2.550000e+02     8.999759e+01   \n\n              SWE_1  air_temperature_tmmn_1  potential_evapotranspiration_1  \\\ncount  2.391441e+06            2.391441e+06                    2.391441e+06   \nmean   4.359613e+00            2.753589e+02                    5.007176e+00   \nstd    1.420398e+01            1.003240e+01                    3.216413e+00   \nmin    0.000000e+00            0.000000e+00                    0.000000e+00   \n25%    0.000000e+00            2.697000e+02                    2.230330e+00   \n50%    0.000000e+00            2.760000e+02                    4.700000e+00   \n75%    0.000000e+00            2.818000e+02                    7.300000e+00   \nmax    2.340000e+02            3.085000e+02                    2.380000e+01   \n\n       mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\ncount                   2.391441e+06              2.391441e+06   \nmean                    8.051771e-01              6.998976e+01   \nstd                     7.554440e-01              2.106144e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.400000e-01              5.360000e+01   \n50%                     5.600000e-01              7.110000e+01   \n75%                     1.160000e+00              8.770001e+01   \nmax                     7.660000e+00              1.000000e+02   \n\n       relative_humidity_rmin_1  precipitation_amount_1  \\\ncount              2.391441e+06            2.391441e+06   \nmean               2.883912e+01            1.663696e+00   \nstd                1.675800e+01            5.518988e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.700000e+01            0.000000e+00   \n50%                2.480000e+01            0.000000e+00   \n75%                3.660000e+01            8.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n\n       air_temperature_tmmx_1  wind_speed_1        fsca_1         SWE_2  \\\ncount            2.391441e+06  2.391441e+06  2.391441e+06  2.391441e+06   \nmean             2.884699e+02  3.749438e+00  5.692986e+01  4.377509e+00   \nstd              1.393728e+01  1.714124e+00  1.009177e+02  1.423092e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.791000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.886000e+02  3.400000e+00  0.000000e+00  0.000000e+00   \n75%              2.980372e+02  4.600000e+00  5.300000e+01  0.000000e+00   \nmax              3.254000e+02  1.960000e+01  2.550000e+02  2.340000e+02   \n\n       air_temperature_tmmn_2  potential_evapotranspiration_2  \\\ncount            2.391441e+06                    2.391441e+06   \nmean             2.753617e+02                    5.003512e+00   \nstd              1.003263e+01                    3.216509e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.697000e+02                    2.200000e+00   \n50%              2.761000e+02                    4.620804e+00   \n75%              2.818000e+02                    7.300000e+00   \nmax              3.085000e+02                    2.380000e+01   \n\n       mean_vapor_pressure_deficit_2  relative_humidity_rmax_2  \\\ncount                   2.391441e+06              2.391441e+06   \nmean                    8.045691e-01              7.001623e+01   \nstd                     7.548363e-01              2.105772e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.400000e-01              5.360000e+01   \n50%                     5.600000e-01              7.110000e+01   \n75%                     1.160000e+00              8.770001e+01   \nmax                     7.660000e+00              1.000000e+02   \n\n       relative_humidity_rmin_2  precipitation_amount_2  \\\ncount              2.391441e+06            2.391441e+06   \nmean               2.882335e+01            1.662874e+00   \nstd                1.675549e+01            5.515035e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.700000e+01            0.000000e+00   \n50%                2.480000e+01            0.000000e+00   \n75%                3.660000e+01            8.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n\n       air_temperature_tmmx_2  wind_speed_2        fsca_2         SWE_3  \\\ncount            2.391441e+06  2.391441e+06  2.391441e+06  2.391441e+06   \nmean             2.884697e+02  3.749883e+00  5.694195e+01  4.395421e+00   \nstd              1.393800e+01  1.714229e+00  1.009260e+02  1.425780e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.791000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.886000e+02  3.400000e+00  0.000000e+00  0.000000e+00   \n75%              2.980988e+02  4.600000e+00  5.300000e+01  0.000000e+00   \nmax              3.254000e+02  1.960000e+01  2.550000e+02  2.340000e+02   \n\n       air_temperature_tmmn_3  potential_evapotranspiration_3  \\\ncount            2.391441e+06                    2.391441e+06   \nmean             2.753606e+02                    4.999427e+00   \nstd              1.003260e+01                    3.216145e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.697000e+02                    2.200000e+00   \n50%              2.761000e+02                    4.600000e+00   \n75%              2.818000e+02                    7.300000e+00   \nmax              3.085000e+02                    2.380000e+01   \n\n       mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\ncount                   2.391441e+06              2.391441e+06   \nmean                    8.039791e-01              7.005113e+01   \nstd                     7.542158e-01              2.104858e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.400000e-01              5.370000e+01   \n50%                     5.600000e-01              7.120001e+01   \n75%                     1.160000e+00              8.770001e+01   \nmax                     7.660000e+00              1.000000e+02   \n\n       relative_humidity_rmin_3  precipitation_amount_3  \\\ncount              2.391441e+06            2.391441e+06   \nmean               2.880960e+01            1.660582e+00   \nstd                1.675462e+01            5.506569e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.690000e+01            0.000000e+00   \n50%                2.480000e+01            0.000000e+00   \n75%                3.650000e+01            8.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n\n       air_temperature_tmmx_3  wind_speed_3        fsca_3         SWE_4  \\\ncount            2.391441e+06  2.391441e+06  2.391441e+06  2.391441e+06   \nmean             2.884687e+02  3.748919e+00  5.694682e+01  4.413285e+00   \nstd              1.393917e+01  1.714122e+00  1.009293e+02  1.428456e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.791000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.886000e+02  3.400000e+00  0.000000e+00  0.000000e+00   \n75%              2.981000e+02  4.600000e+00  5.300000e+01  0.000000e+00   \nmax              3.254000e+02  1.960000e+01  2.550000e+02  2.340000e+02   \n\n       air_temperature_tmmn_4  potential_evapotranspiration_4  \\\ncount            2.391441e+06                    2.391441e+06   \nmean             2.753565e+02                    4.995004e+00   \nstd              1.003206e+01                    3.215274e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.697000e+02                    2.200000e+00   \n50%              2.760000e+02                    4.600000e+00   \n75%              2.818000e+02                    7.200090e+00   \nmax              3.085000e+02                    2.380000e+01   \n\n       mean_vapor_pressure_deficit_4  relative_humidity_rmax_4  \\\ncount                   2.391441e+06              2.391441e+06   \nmean                    8.033356e-01              7.008050e+01   \nstd                     7.536027e-01              2.103613e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.400000e-01              5.370000e+01   \n50%                     5.600000e-01              7.120001e+01   \n75%                     1.150000e+00              8.780000e+01   \nmax                     7.660000e+00              1.000000e+02   \n\n       relative_humidity_rmin_4  precipitation_amount_4  \\\ncount              2.391441e+06            2.391441e+06   \nmean               2.880406e+01            1.658081e+00   \nstd                1.675452e+01            5.496392e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.690000e+01            0.000000e+00   \n50%                2.480000e+01            0.000000e+00   \n75%                3.650000e+01            8.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n\n       air_temperature_tmmx_4  wind_speed_4        fsca_4         SWE_5  \\\ncount            2.391441e+06  2.391441e+06  2.391441e+06  2.391441e+06   \nmean             2.884674e+02  3.748322e+00  5.693073e+01  4.431173e+00   \nstd              1.394066e+01  1.714042e+00  1.009186e+02  1.431127e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.791000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.886000e+02  3.400000e+00  0.000000e+00  0.000000e+00   \n75%              2.981000e+02  4.600000e+00  5.300000e+01  0.000000e+00   \nmax              3.254000e+02  1.960000e+01  2.550000e+02  2.340000e+02   \n\n       air_temperature_tmmn_5  potential_evapotranspiration_5  \\\ncount            2.391441e+06                    2.391441e+06   \nmean             2.753513e+02                    4.990389e+00   \nstd              1.003124e+01                    3.214335e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.697000e+02                    2.200000e+00   \n50%              2.760000e+02                    4.600000e+00   \n75%              2.818000e+02                    7.200000e+00   \nmax              3.085000e+02                    2.380000e+01   \n\n       mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\ncount                   2.391441e+06              2.391441e+06   \nmean                    8.026368e-01              7.010052e+01   \nstd                     7.530570e-01              2.102722e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.400000e-01              5.380000e+01   \n50%                     5.600000e-01              7.120001e+01   \n75%                     1.150000e+00              8.780000e+01   \nmax                     7.660000e+00              1.000000e+02   \n\n       relative_humidity_rmin_5  precipitation_amount_5  \\\ncount              2.391441e+06            2.391441e+06   \nmean               2.880143e+01            1.655614e+00   \nstd                1.675499e+01            5.490040e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.690000e+01            0.000000e+00   \n50%                2.480000e+01            0.000000e+00   \n75%                3.650000e+01            8.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n\n       air_temperature_tmmx_5  wind_speed_5        fsca_5         SWE_6  \\\ncount            2.391441e+06  2.391441e+06  2.391441e+06  2.391441e+06   \nmean             2.884656e+02  3.748079e+00  5.692747e+01  4.449006e+00   \nstd              1.394311e+01  1.714002e+00  1.009166e+02  1.433786e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.791000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.886000e+02  3.400000e+00  0.000000e+00  0.000000e+00   \n75%              2.981000e+02  4.600000e+00  5.300000e+01  0.000000e+00   \nmax              3.254000e+02  1.960000e+01  2.550000e+02  2.340000e+02   \n\n       air_temperature_tmmn_6  potential_evapotranspiration_6  \\\ncount            2.391441e+06                    2.391441e+06   \nmean             2.753479e+02                    4.985748e+00   \nstd              1.003094e+01                    3.213453e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.697000e+02                    2.200000e+00   \n50%              2.760000e+02                    4.600000e+00   \n75%              2.818000e+02                    7.200000e+00   \nmax              3.085000e+02                    2.380000e+01   \n\n       mean_vapor_pressure_deficit_6  relative_humidity_rmax_6  \\\ncount                   2.391441e+06              2.391441e+06   \nmean                    8.019089e-01              7.011324e+01   \nstd                     7.525462e-01              2.102099e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.400000e-01              5.380000e+01   \n50%                     5.600000e-01              7.120001e+01   \n75%                     1.150000e+00              8.780000e+01   \nmax                     7.660000e+00              1.000000e+02   \n\n       relative_humidity_rmin_6  precipitation_amount_6  \\\ncount              2.391441e+06            2.391441e+06   \nmean               2.880084e+01            1.652197e+00   \nstd                1.675545e+01            5.480193e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.690000e+01            0.000000e+00   \n50%                2.480000e+01            0.000000e+00   \n75%                3.650000e+01            8.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n\n       air_temperature_tmmx_6  wind_speed_6        fsca_6         SWE_7  \\\ncount            2.391441e+06  2.391441e+06  2.391441e+06  2.391441e+06   \nmean             2.884648e+02  3.748349e+00  5.693552e+01  4.466843e+00   \nstd              1.394534e+01  1.713849e+00  1.009221e+02  1.436438e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.791000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.886000e+02  3.400000e+00  0.000000e+00  0.000000e+00   \n75%              2.981000e+02  4.600000e+00  5.300000e+01  0.000000e+00   \nmax              3.254000e+02  1.960000e+01  2.550000e+02  2.340000e+02   \n\n       air_temperature_tmmn_7  potential_evapotranspiration_7  \\\ncount            2.391441e+06                    2.391441e+06   \nmean             2.753463e+02                    4.981193e+00   \nstd              1.003072e+01                    3.212689e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.697000e+02                    2.200000e+00   \n50%              2.760000e+02                    4.600000e+00   \n75%              2.818000e+02                    7.200000e+00   \nmax              3.085000e+02                    2.380000e+01   \n\n       mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\ncount                   2.391441e+06              2.391441e+06   \nmean                    8.011821e-01              7.012587e+01   \nstd                     7.519948e-01              2.101740e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.400000e-01              5.380000e+01   \n50%                     5.600000e-01              7.120001e+01   \n75%                     1.150000e+00              8.780000e+01   \nmax                     7.660000e+00              1.000000e+02   \n\n       relative_humidity_rmin_7  precipitation_amount_7  \\\ncount              2.391441e+06            2.391441e+06   \nmean               2.879952e+01            1.649103e+00   \nstd                1.675603e+01            5.469411e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.690000e+01            0.000000e+00   \n50%                2.480000e+01            0.000000e+00   \n75%                3.650000e+01            8.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n\n       air_temperature_tmmx_7  wind_speed_7        fsca_7  \ncount            2.391441e+06  2.391441e+06  2.391441e+06  \nmean             2.884653e+02  3.748932e+00  5.696279e+01  \nstd              1.394772e+01  1.713692e+00  1.009405e+02  \nmin              0.000000e+00  0.000000e+00  0.000000e+00  \n25%              2.791000e+02  2.600000e+00  0.000000e+00  \n50%              2.886000e+02  3.400000e+00  0.000000e+00  \n75%              2.981000e+02  4.600000e+00  5.300000e+01  \nmax              3.254000e+02  1.960000e+01  2.550000e+02  \nhow many groups?  <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7f047c0df450>\nThis is the dataframe after cumulative columns are added\ncount    2.391441e+06\nmean     1.208927e+04\nstd      1.820756e+04\nmin      0.000000e+00\n25%      0.000000e+00\n50%      0.000000e+00\n75%      2.275100e+04\nmax      1.299421e+05\nName: cumulative_fsca, dtype: float64\nAll the cumulative variables are added successfully! /home/zsun/gridmet_test_run/new_stations_3yrs_cumulative.csv\ndouble check the swe_value statistics: count    2.391441e+06\nmean     2.458014e+00\nstd      7.005064e+00\nmin     -8.000000e+00\n25%      0.000000e+00\n50%      0.000000e+00\n75%      0.000000e+00\nmax      1.021000e+02\nName: swe_value, dtype: float64\ndask_df.shape =  (2391441, 105)\nThe log10 file is saved to /home/zsun/gridmet_test_run/new_stations_3yrs_slope_renamed.csv\nconvert all cumulative columns into log10\nChecking  date\nChecking  lat\nChecking  lon\nChecking  SWE\nChecking  station_name\nChecking  swe_value\nChecking  change_in_swe_inch\nChecking  snow_depth\nChecking  air_temperature_observed_f\nChecking  air_temperature_tmmn\nChecking  potential_evapotranspiration\nChecking  mean_vapor_pressure_deficit\nChecking  relative_humidity_rmax\nChecking  relative_humidity_rmin\nChecking  precipitation_amount\nChecking  air_temperature_tmmx\nChecking  wind_speed\nChecking  Elevation\nChecking  Aspect\nChecking  Curvature\nChecking  Northness\nChecking  Eastness\nChecking  fsca\nChecking  Slope\nChecking  SWE_1\nChecking  air_temperature_tmmn_1\nChecking  potential_evapotranspiration_1\nChecking  mean_vapor_pressure_deficit_1\nChecking  relative_humidity_rmax_1\nChecking  relative_humidity_rmin_1\nChecking  precipitation_amount_1\nChecking  air_temperature_tmmx_1\nChecking  wind_speed_1\nChecking  fsca_1\nChecking  SWE_2\nChecking  air_temperature_tmmn_2\nChecking  potential_evapotranspiration_2\nChecking  mean_vapor_pressure_deficit_2\nChecking  relative_humidity_rmax_2\nChecking  relative_humidity_rmin_2\nChecking  precipitation_amount_2\nChecking  air_temperature_tmmx_2\nChecking  wind_speed_2\nChecking  fsca_2\nChecking  SWE_3\nChecking  air_temperature_tmmn_3\nChecking  potential_evapotranspiration_3\nChecking  mean_vapor_pressure_deficit_3\nChecking  relative_humidity_rmax_3\nChecking  relative_humidity_rmin_3\nChecking  precipitation_amount_3\nChecking  air_temperature_tmmx_3\nChecking  wind_speed_3\nChecking  fsca_3\nChecking  SWE_4\nChecking  air_temperature_tmmn_4\nChecking  potential_evapotranspiration_4\nChecking  mean_vapor_pressure_deficit_4\nChecking  relative_humidity_rmax_4\nChecking  relative_humidity_rmin_4\nChecking  precipitation_amount_4\nChecking  air_temperature_tmmx_4\nChecking  wind_speed_4\nChecking  fsca_4\nChecking  SWE_5\nChecking  air_temperature_tmmn_5\nChecking  potential_evapotranspiration_5\nChecking  mean_vapor_pressure_deficit_5\nChecking  relative_humidity_rmax_5\nChecking  relative_humidity_rmin_5\nChecking  precipitation_amount_5\nChecking  air_temperature_tmmx_5\nChecking  wind_speed_5\nChecking  fsca_5\nChecking  SWE_6\nChecking  air_temperature_tmmn_6\nChecking  potential_evapotranspiration_6\nChecking  mean_vapor_pressure_deficit_6\nChecking  relative_humidity_rmax_6\nChecking  relative_humidity_rmin_6\nChecking  precipitation_amount_6\nChecking  air_temperature_tmmx_6\nChecking  wind_speed_6\nChecking  fsca_6\nChecking  SWE_7\nChecking  air_temperature_tmmn_7\nChecking  potential_evapotranspiration_7\nChecking  mean_vapor_pressure_deficit_7\nChecking  relative_humidity_rmax_7\nChecking  relative_humidity_rmin_7\nChecking  precipitation_amount_7\nChecking  air_temperature_tmmx_7\nChecking  wind_speed_7\nChecking  fsca_7\nChecking  water_year\nChecking  cumulative_SWE\nconverted cumulative_SWE to log10\nChecking  cumulative_air_temperature_tmmn\nconverted cumulative_air_temperature_tmmn to log10\nChecking  cumulative_potential_evapotranspiration\nconverted cumulative_potential_evapotranspiration to log10\nChecking  cumulative_mean_vapor_pressure_deficit\nconverted cumulative_mean_vapor_pressure_deficit to log10\nChecking  cumulative_relative_humidity_rmax\nconverted cumulative_relative_humidity_rmax to log10\nChecking  cumulative_relative_humidity_rmin\nconverted cumulative_relative_humidity_rmin to log10\nChecking  cumulative_precipitation_amount\nconverted cumulative_precipitation_amount to log10\nChecking  cumulative_air_temperature_tmmx\nconverted cumulative_air_temperature_tmmx to log10\nChecking  cumulative_wind_speed\nconverted cumulative_wind_speed to log10\nChecking  cumulative_fsca\nconverted cumulative_fsca to log10\ndask_df.shape =  (2391441, 105)\nThe log10 file is saved to /home/zsun/gridmet_test_run/new_stations_3yrs_all_cols_log10.csv\nthe number of the total rows:  2391441\ndeduplicated_df.to_csv('deduplicated_training_points_final.csv', index=False)\nbash: line 0: exit: $: numeric argument required\n",
  "history_begin_time" : 1714932575310,
  "history_end_time" : 1714934674796,
  "history_notes" : "remote execution, with correct time series for non snow areas. this is actually wrong.",
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "yKlwyuBsjAHz",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\nimport dask.dataframe as dd\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    if column_name == \"SWE\":\n      mask = (y > 240) | y.isnull()\n    elif column_name == \"fsca\":\n      mask = ((y < 0) & (y > 100) & (y != 225) & (y != 237) & (y != 239)) | y.isnull()\n    else:\n      mask = y.isnull()\n\n    # Check if all elements in the mask array are True\n    all_true = np.all(mask)\n\n    if all_true:\n      df[column_name] = 0\n    else:\n      # Perform interpolation\n      new_y = np.interp(x, x[~mask], y[~mask])\n      # Replace missing values with interpolated values\n      df[column_name] = new_y\n\n    if np.any(df[column_name].isnull()):\n      raise ValueError(\"Single group: shouldn't have null values here\")\n        \n    return df\n\ndef convert_to_time_series(input_csv, output_csv, force=False):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                         'AMSR_SWE': 'SWE',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv) and not force:\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['fsca'] > 100):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        filled_data.to_csv(filled_csv, index=False)\n        \n        print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv) and not force:\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n        result.fillna(0, inplace=True)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv, force=False):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_cumulated = [\n      \"SWE\",\n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2018-10-01')\n    end_date = pd.to_datetime('2021-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df[\"cumulative_fsca\"].describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n\n    \ndef assign_zero_swe_value_to_all_fsca_zero_rows(na_filled_csv, non_station_zero_csv, force=False):\n    \n    # Define the conditions\n    condition_column = 'fsca'\n    target_column = 'swe_value'\n    values_to_check = [0, 225, 237, 239]\n    \n    \n    df = pd.read_csv(na_filled_csv, dtype={'station_name': 'object'})\n    empty_count = df[target_column].isnull().values.ravel().sum()\n    \n    print(f\"The empty number of rows are {empty_count} before filling in\")\n    print(\"double check the swe_value statistics before filling in:\", df[\"swe_value\"].describe())\n    \n    rows_less_than_zero = (df[target_column] < 0).sum()\n    print(\"Number of rows where '{}' is less than 0: {}\".format(target_column, rows_less_than_zero))\n    \n\n    # Mask the target column where the condition is met\n    df[target_column] = df[target_column].mask(\n        (df[target_column].isna()) & df[condition_column].isin(values_to_check),\n        0\n    )\n    \n    empty_count = df[target_column].isnull().values.ravel().sum()\n    \n    print(f\"The empty number of rows are {empty_count} after filling in\")\n    \n    print(\"total dataframe row number : \", len(df))\n    \n    df.to_csv(non_station_zero_csv, index=False)\n    \n    print(f\"The rows without snotel but fsca is zero or land or water or ocean are set to 0! {non_station_zero_csv}\")\n    print(\"double check the swe_value statistics after filling in:\", df[\"swe_value\"].describe())\n    \n    \ndef clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path, force=False):\n    # Read Dask DataFrame from CSV\n    dask_df = dd.read_csv(current_ready_csv_path, dtype={'station_name': 'object'})\n\n    # Remove rows where 'swe_value' is empty\n    dask_df_filtered = dask_df.dropna(subset=['swe_value'])\n\n    # Save the result to a new CSV file\n    dask_df_filtered.to_csv(cleaned_csv_path, index=False, single_file=True)\n    print(\"dask_df_filtered.shape = \", dask_df_filtered.shape)\n    print(f\"The filtered csv with no swe values is saved to {cleaned_csv_path}\")\n\ndef rename_corrected_slope(corrected_slope_path, renamed_slope_path, force=False):\n    df = pd.read_csv(corrected_slope_path, dtype={'station_name': 'object'})\n    df.drop(columns=['Slope'], inplace=True)\n\t# Rename 'column_to_rename' to 'old_column'\n    df.rename(columns={'corrected_slope': 'Slope'}, inplace=True)\n    df.to_csv(renamed_slope_path, index=False)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {renamed_slope_path}\")\n    \ndef log10_all_fields(cleaned_csv_path, logged_csv_path, force=False):\n    print(\"convert all cumulative columns into log10\")\n    # Read Dask DataFrame from CSV\n    df = pd.read_csv(cleaned_csv_path, dtype={'station_name': 'object'})\n    \n    # Get columns with \"cumulative\" in their names\n    for col in df.columns:\n        print(\"Checking \", col)\n        if \"cumulative\" in col:\n\t        # Apply log10 transformation to selected columns\n            df[col] = np.log10(df[col] + 0.1)  # Adding 1 to avoid log(0)\n            print(f\"converted {col} to log10\")\n\n    df.to_csv(logged_csv_path, index=False)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {logged_csv_path}\")\n\n    \n    \nif __name__ == \"__main__\":\n    # Define file paths for various CSV files\n    # current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n    current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv'\n    non_station_counted_csv_path = f'{work_dir}/new_stations_3yrs_fill_empty_snotel.csv'\n    cleaned_csv_path = f\"{work_dir}/new_stations_3yrs_cleaned.csv\"\n    target_time_series_csv_path = f'{work_dir}/new_stations_3yrs_time_series.csv'\n    backup_time_series_csv_path = f'{work_dir}/new_stations_3yrs_time_series_backup.csv'\n    # target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n    target_time_series_cumulative_csv_path = f'{work_dir}/new_stations_3yrs_cumulative.csv'\n    slope_renamed_path = f'{work_dir}/new_stations_3yrs_slope_renamed.csv'\n    logged_csv_path = f'{work_dir}/new_stations_3yrs_all_cols_log10.csv'\n    \n    # filling the non station rows with fsca indicating no snow\n    assign_zero_swe_value_to_all_fsca_zero_rows(current_ready_csv_path, non_station_counted_csv_path)\n    \n    # remove the empty swe_value rows first\n    clean_non_swe_rows(non_station_counted_csv_path, cleaned_csv_path)\n  \n    # Uncomment this line to execute the 'convert_to_time_series' function\n    convert_to_time_series(cleaned_csv_path, target_time_series_csv_path)\n\n    # Uncomment this line to execute the 'add_cumulative_columns' function\n    add_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path, force=True)\n    \n    # Rename the corrected slope to slope\n    rename_corrected_slope(target_time_series_cumulative_csv_path, slope_renamed_path)\n    \n    # convert all cumulative columns to log10\n    log10_all_fields(slope_renamed_path, logged_csv_path)\n    \n    df = pd.read_csv(logged_csv_path, dtype={'station_name': 'object'})\n    print(\"the number of the total rows: \", len(df))\n    \n    deduplicated_df = df.drop_duplicates(subset=['lat', 'lon'])\n    # Export the deduplicated DataFrame to a CSV file\n    deduplicated_df.to_csv('deduplicated_training_points_final.csv', index=False)\n    print(\"deduplicated_df.to_csv('deduplicated_training_points_final.csv', index=False)\")\n    \n",
  "history_output" : "today date = 2024-05-05\ntest start date:  2024-05-01\ntest end date:  2023-10-11\n/home/zsun\nThe empty number of rows are 2826499 before filling in\ndouble check the swe_value statistics before filling in: count    376106.000000\nmean          5.404103\nstd           9.160089\nmin           0.000000\n25%           0.000000\n50%           1.100000\n75%           7.400000\nmax         106.600000\nName: swe_value, dtype: float64\nNumber of rows where 'swe_value' is less than 0: 0\nThe empty number of rows are 2343415 after filling in\ntotal dataframe row number :  3202605\nThe rows without snotel but fsca is zero or land or water or ocean are set to 0! /home/zsun/gridmet_test_run/new_stations_3yrs_fill_empty_snotel.csv\ndouble check the swe_value statistics after filling in: count    859190.000000\nmean          2.365618\nstd           6.627051\nmin           0.000000\n25%           0.000000\n50%           0.000000\n75%           0.000000\nmax         106.600000\nName: swe_value, dtype: float64\ndask_df_filtered.shape =  (Delayed('int-848c9401-02b4-46da-960f-30b7f8e4eaa8'), 25)\nThe filtered csv with no swe values is saved to /home/zsun/gridmet_test_run/new_stations_3yrs_cleaned.csv\nAll current columns:  Index(['date', 'lat', 'lon', 'AMSR_SWE', 'station_name', 'swe_value',\n       'change_in_swe_inch', 'snow_depth', 'air_temperature_observed_f',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'fsca', 'corrected_slope'],\n      dtype='object')\nStart to fill in the missing values\nTraceback (most recent call last):\n  File \"convert_to_time_series.py\", line 321, in <module>\n    convert_to_time_series(cleaned_csv_path, target_time_series_csv_path)\n  File \"convert_to_time_series.py\", line 122, in convert_to_time_series\n    raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\nValueError: Error: shouldn't have SWE>240 at this point\nbash: line 0: exit: $: numeric argument required\n",
  "history_begin_time" : 1714929428843,
  "history_end_time" : 1714929591376,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "mYFulYYmUGy3",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\nimport dask.dataframe as dd\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    if column_name == \"SWE\":\n      mask = (y > 240) | y.isnull()\n    elif column_name == \"fsca\":\n      mask = ((y < 0) & (y > 100) & (y != 225) & (y != 237) & (y != 239)) | y.isnull()\n    else:\n      mask = y.isnull()\n\n    # Check if all elements in the mask array are True\n    all_true = np.all(mask)\n\n    if all_true:\n      df[column_name] = 0\n    else:\n      # Perform interpolation\n      new_y = np.interp(x, x[~mask], y[~mask])\n      # Replace missing values with interpolated values\n      df[column_name] = new_y\n\n    if np.any(df[column_name].isnull()):\n      raise ValueError(\"Single group: shouldn't have null values here\")\n        \n    return df\n\ndef convert_to_time_series(input_csv, output_csv, force=False):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                         'AMSR_SWE': 'SWE',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv) and not force:\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['fsca'] > 100):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        filled_data.to_csv(filled_csv, index=False)\n        \n        print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv) and not force:\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n        result.fillna(0, inplace=True)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv, force=False):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_cumulated = [\n      \"SWE\",\n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2018-10-01')\n    end_date = pd.to_datetime('2021-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df[\"cumulative_fsca\"].describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n\n    \ndef assign_zero_swe_value_to_all_fsca_zero_rows(na_filled_csv, non_station_zero_csv, force=False):\n    \n    # Define the conditions\n    condition_column = 'fsca'\n    target_column = 'swe_value'\n    values_to_check = [0, 225, 237, 239]\n    \n    \n    df = pd.read_csv(na_filled_csv, dtype={'station_name': 'object'})\n    empty_count = df[target_column].isnull().values.ravel().sum()\n    \n    print(f\"The empty number of rows are {empty_count} before filling in\")\n    print(\"double check the swe_value statistics before filling in:\", df[\"swe_value\"].describe())\n    \n    rows_less_than_zero = (df[target_column] < 0).sum()\n    print(\"Number of rows where '{}' is less than 0: {}\".format(target_column, rows_less_than_zero))\n    \n\n    # Mask the target column where the condition is met\n    df[target_column] = df[target_column].mask(\n        (df[target_column].isna()) & df[condition_column].isin(values_to_check),\n        0\n    )\n    \n    empty_count = df[target_column].isnull().values.ravel().sum()\n    \n    print(f\"The empty number of rows are {empty_count} after filling in\")\n    \n    print(\"total dataframe row number : \", len(df))\n    \n    df.to_csv(non_station_zero_csv, index=False)\n    \n    print(f\"The rows without snotel but fsca is zero or land or water or ocean are set to 0! {non_station_zero_csv}\")\n    print(\"double check the swe_value statistics after filling in:\", df[\"swe_value\"].describe())\n    \n    \ndef clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path, force=False):\n    # Read Dask DataFrame from CSV\n    dask_df = dd.read_csv(current_ready_csv_path, dtype={'station_name': 'object'})\n\n    # Remove rows where 'swe_value' is empty\n    dask_df_filtered = dask_df.dropna(subset=['swe_value'])\n\n    # Save the result to a new CSV file\n    dask_df_filtered.to_csv(cleaned_csv_path, index=False, single_file=True)\n    print(\"dask_df_filtered.shape = \", dask_df_filtered.shape)\n    print(f\"The filtered csv with no swe values is saved to {cleaned_csv_path}\")\n\ndef rename_corrected_slope(corrected_slope_path, renamed_slope_path, force=False):\n    df = pd.read_csv(corrected_slope_path, dtype={'station_name': 'object'})\n    df.drop(columns=['Slope'], inplace=True)\n\t# Rename 'column_to_rename' to 'old_column'\n    df.rename(columns={'corrected_slope': 'Slope'}, inplace=True)\n    df.to_csv(renamed_slope_path, index=False)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {renamed_slope_path}\")\n    \ndef log10_all_fields(cleaned_csv_path, logged_csv_path, force=False):\n    print(\"convert all cumulative columns into log10\")\n    # Read Dask DataFrame from CSV\n    df = pd.read_csv(cleaned_csv_path, dtype={'station_name': 'object'})\n    \n    # Get columns with \"cumulative\" in their names\n    for col in df.columns:\n        print(\"Checking \", col)\n        if \"cumulative\" in col:\n\t        # Apply log10 transformation to selected columns\n            df[col] = np.log10(df[col] + 0.1)  # Adding 1 to avoid log(0)\n            print(f\"converted {col} to log10\")\n\n    df.to_csv(logged_csv_path, index=False)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {logged_csv_path}\")\n\n    \n    \nif __name__ == \"__main__\":\n    # Define file paths for various CSV files\n    # current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n    current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv'\n    non_station_counted_csv_path = f'{work_dir}/new_stations_3yrs_fill_empty_snotel.csv'\n    cleaned_csv_path = f\"{work_dir}/new_stations_3yrs_cleaned.csv\"\n    target_time_series_csv_path = f'{work_dir}/new_stations_3yrs_time_series.csv'\n    backup_time_series_csv_path = f'{work_dir}/new_stations_3yrs_time_series_backup.csv'\n    # target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n    target_time_series_cumulative_csv_path = f'{work_dir}/new_stations_3yrs_cumulative.csv'\n    slope_renamed_path = f'{work_dir}/new_stations_3yrs_slope_renamed.csv'\n    logged_csv_path = f'{work_dir}/new_stations_3yrs_all_cols_log10.csv'\n    \n    # filling the non station rows with fsca indicating no snow\n    assign_zero_swe_value_to_all_fsca_zero_rows(current_ready_csv_path, non_station_counted_csv_path)\n    \n    # remove the empty swe_value rows first\n    clean_non_swe_rows(non_station_counted_csv_path, cleaned_csv_path)\n  \n    # Uncomment this line to execute the 'convert_to_time_series' function\n    convert_to_time_series(cleaned_csv_path, target_time_series_csv_path)\n\n    # Uncomment this line to execute the 'add_cumulative_columns' function\n    add_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path, force=True)\n    \n    # Rename the corrected slope to slope\n    rename_corrected_slope(target_time_series_cumulative_csv_path, slope_renamed_path)\n    \n    # convert all cumulative columns to log10\n    log10_all_fields(slope_renamed_path, logged_csv_path)\n    \n    df = pd.read_csv(logged_csv_path, dtype={'station_name': 'object'})\n    print(\"the number of the total rows: \", len(df))\n    \n    deduplicated_df = df.drop_duplicates(subset=['lat', 'lon'])\n    # Export the deduplicated DataFrame to a CSV file\n    deduplicated_df.to_csv('deduplicated_training_points_final.csv', index=False)\n    print(\"deduplicated_df.to_csv('deduplicated_training_points_final.csv', index=False)\")\n    \n",
  "history_output" : "today date = 2024-05-05\ntest start date:  2024-05-01\ntest end date:  2023-10-11\n/home/chetana\nThe empty number of rows are 13750843 before filling in\ndouble check the swe_value statistics before filling in: count    1.324517e+06\nmean     5.606424e+00\nstd      9.727693e+00\nmin     -8.000000e+00\n25%      0.000000e+00\n50%      4.000000e-01\n75%      7.800000e+00\nmax      1.066000e+02\nName: swe_value, dtype: float64\nNumber of rows where 'swe_value' is less than 0: 19\nThe empty number of rows are 11864286 after filling in\ntotal dataframe row number :  15075360\nThe rows without snotel but fsca is zero or land or water or ocean are set to 0! /home/chetana/gridmet_test_run/new_stations_3yrs_fill_empty_snotel.csv\ndouble check the swe_value statistics after filling in: count    3.211074e+06\nmean     2.312561e+00\nstd      6.830066e+00\nmin     -8.000000e+00\n25%      0.000000e+00\n50%      0.000000e+00\n75%      0.000000e+00\nmax      1.066000e+02\nName: swe_value, dtype: float64\ndask_df_filtered.shape =  (Delayed('int-7667f62f-111b-4ffd-9981-258252267e1c'), 25)\nThe filtered csv with no swe values is saved to /home/chetana/gridmet_test_run/new_stations_3yrs_cleaned.csv\nAll current columns:  Index(['date', 'lat', 'lon', 'AMSR_SWE', 'station_name', 'swe_value',\n       'change_in_swe_inch', 'snow_depth', 'air_temperature_observed_f',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'fsca', 'corrected_slope'],\n      dtype='object')\nStart to fill in the missing values\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/mYFulYYmUGy3/convert_to_time_series.py\", line 321, in <module>\n    convert_to_time_series(cleaned_csv_path, target_time_series_csv_path)\n  File \"/home/chetana/gw-workspace/mYFulYYmUGy3/convert_to_time_series.py\", line 122, in convert_to_time_series\n    raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\nValueError: Error: shouldn't have SWE>240 at this point\n",
  "history_begin_time" : 1714929240447,
  "history_end_time" : 1714930724067,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "e6YI3mfrP7xj",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\nimport dask.dataframe as dd\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    if column_name == \"SWE\":\n      mask = (y > 240) | y.isnull()\n    elif column_name == \"fsca\":\n      mask = (y > 100) | y.isnull()\n    else:\n      mask = y.isnull()\n\n    # Check if all elements in the mask array are True\n    all_true = np.all(mask)\n\n    if all_true:\n      df[column_name] = 0\n    else:\n      # Perform interpolation\n      new_y = np.interp(x, x[~mask], y[~mask])\n      # Replace missing values with interpolated values\n      df[column_name] = new_y\n\n    if np.any(df[column_name].isnull()):\n      raise ValueError(\"Single group: shouldn't have null values here\")\n        \n    return df\n\ndef convert_to_time_series(input_csv, output_csv):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                         'AMSR_SWE': 'SWE',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv):\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['fsca'] > 100):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        filled_data.to_csv(filled_csv, index=False)\n        \n        print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv):\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n        result.fillna(0, inplace=True)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv, force=False):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_cumulated = [\n      \"SWE\",\n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2018-10-01')\n    end_date = pd.to_datetime('2021-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df[\"cumulative_fsca\"].describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n\n    \ndef assign_zero_swe_value_to_all_fsca_zero_rows(na_filled_csv, non_station_zero_csv):\n    \n    # Define the conditions\n    condition_column = 'fsca'\n    target_column = 'swe_value'\n    values_to_check = [0, 225, 237, 239]\n    \n    \n    df = pd.read_csv(na_filled_csv, dtype={'station_name': 'object'})\n    empty_count = df[target_column].isnull().values.ravel().sum()\n    \n    print(f\"The empty number of rows are {empty_count} before filling in\")\n    print(\"double check the swe_value statistics before filling in:\", df[\"swe_value\"].describe())\n    \n    rows_less_than_zero = (df[target_column] < 0).sum()\n    print(\"Number of rows where '{}' is less than 0: {}\".format(target_column, rows_less_than_zero))\n    \n\n    # Mask the target column where the condition is met\n    df[target_column] = df[target_column].mask(\n        (df[target_column].isna()) & df[condition_column].isin(values_to_check),\n        0\n    )\n    \n    empty_count = df[target_column].isnull().values.ravel().sum()\n    \n    print(f\"The empty number of rows are {empty_count} after filling in\")\n    \n    print(\"total dataframe row number : \", len(df))\n    \n    df.to_csv(non_station_zero_csv, index=False)\n    \n    print(f\"The rows without snotel but fsca is zero or land or water or ocean are set to 0! {non_station_zero_csv}\")\n    print(\"double check the swe_value statistics after filling in:\", df[\"swe_value\"].describe())\n    \n    \ndef clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path):\n    # Read Dask DataFrame from CSV\n    dask_df = dd.read_csv(current_ready_csv_path, dtype={'station_name': 'object'})\n\n    # Remove rows where 'swe_value' is empty\n    dask_df_filtered = dask_df.dropna(subset=['swe_value'])\n\n    # Save the result to a new CSV file\n    dask_df_filtered.to_csv(cleaned_csv_path, index=False, single_file=True)\n    print(\"dask_df_filtered.shape = \", dask_df_filtered.shape)\n    print(f\"The filtered csv with no swe values is saved to {cleaned_csv_path}\")\n\ndef rename_corrected_slope(corrected_slope_path, renamed_slope_path):\n    df = pd.read_csv(corrected_slope_path, dtype={'station_name': 'object'})\n    df.drop(columns=['Slope'], inplace=True)\n\t# Rename 'column_to_rename' to 'old_column'\n    df.rename(columns={'corrected_slope': 'Slope'}, inplace=True)\n    df.to_csv(renamed_slope_path, index=False)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {renamed_slope_path}\")\n    \ndef log10_all_fields(cleaned_csv_path, logged_csv_path):\n    print(\"convert all cumulative columns into log10\")\n    # Read Dask DataFrame from CSV\n    df = pd.read_csv(cleaned_csv_path, dtype={'station_name': 'object'})\n    \n    # Get columns with \"cumulative\" in their names\n    for col in df.columns:\n        print(\"Checking \", col)\n        if \"cumulative\" in col:\n\t        # Apply log10 transformation to selected columns\n            df[col] = np.log10(df[col] + 0.1)  # Adding 1 to avoid log(0)\n            print(f\"converted {col} to log10\")\n\n    df.to_csv(logged_csv_path, index=False)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {logged_csv_path}\")\n\n    \n    \nif __name__ == \"__main__\":\n    # Define file paths for various CSV files\n    # current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n    current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv'\n    non_station_counted_csv_path = f'{current_ready_csv_path}_fill_empty_snotel.csv'\n    cleaned_csv_path = f\"{current_ready_csv_path}_cleaned.csv\"\n    target_time_series_csv_path = f'{current_ready_csv_path}_time_series.csv'\n    backup_time_series_csv_path = f'{current_ready_csv_path}_backup.csv'\n    # target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n    target_time_series_cumulative_csv_path = f'{current_ready_csv_path}_cumulative.csv'\n    logged_csv_path = f'{work_dir}/all_merged_all_cols_log10.csv'\n    slope_renamed_path = f'{work_dir}/all_merged_slope_renamed.csv'\n    \n    # filling the non station rows with fsca indicating no snow\n    # assign_zero_swe_value_to_all_fsca_zero_rows(current_ready_csv_path, non_station_counted_csv_path)\n    \n    # remove the empty swe_value rows first\n    # clean_non_swe_rows(non_station_counted_csv_path, cleaned_csv_path)\n  \n    # Uncomment this line to execute the 'convert_to_time_series' function\n    # convert_to_time_series(cleaned_csv_path, target_time_series_csv_path)\n\n    # Uncomment this line to execute the 'add_cumulative_columns' function\n    # add_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path, force=True)\n    \n    # Rename the corrected slope to slope\n    rename_corrected_slope(target_time_series_cumulative_csv_path, slope_renamed_path)\n    \n    # convert all cumulative columns to log10\n    log10_all_fields(slope_renamed_path, logged_csv_path)\n    \n    df = pd.read_csv(logged_csv_path, dtype={'station_name': 'object'})\n    print(\"the number of the total rows: \", len(df))\n    \n    deduplicated_df = df.drop_duplicates(subset=['lat', 'lon'])\n    # Export the deduplicated DataFrame to a CSV file\n    deduplicated_df.to_csv('deduplicated_training_points_final.csv', index=False)\n    print(\"deduplicated_df.to_csv('deduplicated_training_points_final.csv', index=False)\")\n    \n",
  "history_output" : "today date = 2024-05-05\ntest start date:  2024-05-01\ntest end date:  2023-10-11\n/home/chetana\ndask_df.shape =  (2391441, 105)\nThe log10 file is saved to /home/chetana/gridmet_test_run/all_merged_slope_renamed.csv\nconvert all cumulative columns into log10\nChecking  date\nChecking  lat\nChecking  lon\nChecking  SWE\nChecking  station_name\nChecking  swe_value\nChecking  change_in_swe_inch\nChecking  snow_depth\nChecking  air_temperature_observed_f\nChecking  air_temperature_tmmn\nChecking  potential_evapotranspiration\nChecking  mean_vapor_pressure_deficit\nChecking  relative_humidity_rmax\nChecking  relative_humidity_rmin\nChecking  precipitation_amount\nChecking  air_temperature_tmmx\nChecking  wind_speed\nChecking  Elevation\nChecking  Aspect\nChecking  Curvature\nChecking  Northness\nChecking  Eastness\nChecking  fsca\nChecking  Slope\nChecking  SWE_1\nChecking  air_temperature_tmmn_1\nChecking  potential_evapotranspiration_1\nChecking  mean_vapor_pressure_deficit_1\nChecking  relative_humidity_rmax_1\nChecking  relative_humidity_rmin_1\nChecking  precipitation_amount_1\nChecking  air_temperature_tmmx_1\nChecking  wind_speed_1\nChecking  fsca_1\nChecking  SWE_2\nChecking  air_temperature_tmmn_2\nChecking  potential_evapotranspiration_2\nChecking  mean_vapor_pressure_deficit_2\nChecking  relative_humidity_rmax_2\nChecking  relative_humidity_rmin_2\nChecking  precipitation_amount_2\nChecking  air_temperature_tmmx_2\nChecking  wind_speed_2\nChecking  fsca_2\nChecking  SWE_3\nChecking  air_temperature_tmmn_3\nChecking  potential_evapotranspiration_3\nChecking  mean_vapor_pressure_deficit_3\nChecking  relative_humidity_rmax_3\nChecking  relative_humidity_rmin_3\nChecking  precipitation_amount_3\nChecking  air_temperature_tmmx_3\nChecking  wind_speed_3\nChecking  fsca_3\nChecking  SWE_4\nChecking  air_temperature_tmmn_4\nChecking  potential_evapotranspiration_4\nChecking  mean_vapor_pressure_deficit_4\nChecking  relative_humidity_rmax_4\nChecking  relative_humidity_rmin_4\nChecking  precipitation_amount_4\nChecking  air_temperature_tmmx_4\nChecking  wind_speed_4\nChecking  fsca_4\nChecking  SWE_5\nChecking  air_temperature_tmmn_5\nChecking  potential_evapotranspiration_5\nChecking  mean_vapor_pressure_deficit_5\nChecking  relative_humidity_rmax_5\nChecking  relative_humidity_rmin_5\nChecking  precipitation_amount_5\nChecking  air_temperature_tmmx_5\nChecking  wind_speed_5\nChecking  fsca_5\nChecking  SWE_6\nChecking  air_temperature_tmmn_6\nChecking  potential_evapotranspiration_6\nChecking  mean_vapor_pressure_deficit_6\nChecking  relative_humidity_rmax_6\nChecking  relative_humidity_rmin_6\nChecking  precipitation_amount_6\nChecking  air_temperature_tmmx_6\nChecking  wind_speed_6\nChecking  fsca_6\nChecking  SWE_7\nChecking  air_temperature_tmmn_7\nChecking  potential_evapotranspiration_7\nChecking  mean_vapor_pressure_deficit_7\nChecking  relative_humidity_rmax_7\nChecking  relative_humidity_rmin_7\nChecking  precipitation_amount_7\nChecking  air_temperature_tmmx_7\nChecking  wind_speed_7\nChecking  fsca_7\nChecking  water_year\nChecking  cumulative_SWE\nconverted cumulative_SWE to log10\nChecking  cumulative_air_temperature_tmmn\nconverted cumulative_air_temperature_tmmn to log10\nChecking  cumulative_potential_evapotranspiration\nconverted cumulative_potential_evapotranspiration to log10\nChecking  cumulative_mean_vapor_pressure_deficit\nconverted cumulative_mean_vapor_pressure_deficit to log10\nChecking  cumulative_relative_humidity_rmax\nconverted cumulative_relative_humidity_rmax to log10\nChecking  cumulative_relative_humidity_rmin\nconverted cumulative_relative_humidity_rmin to log10\nChecking  cumulative_precipitation_amount\nconverted cumulative_precipitation_amount to log10\nChecking  cumulative_air_temperature_tmmx\nconverted cumulative_air_temperature_tmmx to log10\nChecking  cumulative_wind_speed\nconverted cumulative_wind_speed to log10\nChecking  cumulative_fsca\nconverted cumulative_fsca to log10\ndask_df.shape =  (2391441, 105)\nThe log10 file is saved to /home/chetana/gridmet_test_run/all_merged_all_cols_log10.csv\nthe number of the total rows:  2391441\ndeduplicated_df.to_csv('deduplicated_training_points_final.csv', index=False)\n",
  "history_begin_time" : 1714920759196,
  "history_end_time" : 1714921494126,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "9npbk2pl04e",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714897025216,
  "history_end_time" : 1714897025216,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "nidsavntpdq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714894044200,
  "history_end_time" : 1714895139380,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "1u9p5idsKgDm",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\nimport dask.dataframe as dd\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    if column_name == \"SWE\":\n      mask = (y > 240) | y.isnull()\n    elif column_name == \"fsca\":\n      mask = (y > 100) | y.isnull()\n    else:\n      mask = y.isnull()\n\n    # Check if all elements in the mask array are True\n    all_true = np.all(mask)\n\n    if all_true:\n      df[column_name] = 0\n    else:\n      # Perform interpolation\n      new_y = np.interp(x, x[~mask], y[~mask])\n      # Replace missing values with interpolated values\n      df[column_name] = new_y\n\n    if np.any(df[column_name].isnull()):\n      raise ValueError(\"Single group: shouldn't have null values here\")\n        \n    return df\n\ndef convert_to_time_series(input_csv, output_csv):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                         'AMSR_SWE': 'SWE',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv):\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['fsca'] > 100):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        filled_data.to_csv(filled_csv, index=False)\n        \n        print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv):\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n        result.fillna(0, inplace=True)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv, force=False):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_cumulated = [\n      \"SWE\",\n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2018-10-01')\n    end_date = pd.to_datetime('2021-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df[\"cumulative_fsca\"].describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n\n    \ndef assign_zero_swe_value_to_all_fsca_zero_rows(na_filled_csv, non_station_zero_csv):\n    \n    # Define the conditions\n    condition_column = 'fsca'\n    target_column = 'swe_value'\n    values_to_check = [0, 225, 237, 239]\n    \n    \n    df = pd.read_csv(na_filled_csv, dtype={'station_name': 'object'})\n    empty_count = df[target_column].isnull().values.ravel().sum()\n    \n    print(f\"The empty number of rows are {empty_count} before filling in\")\n    print(\"double check the swe_value statistics before filling in:\", df[\"swe_value\"].describe())\n    \n    rows_less_than_zero = (df[target_column] < 0).sum()\n    print(\"Number of rows where '{}' is less than 0: {}\".format(target_column, rows_less_than_zero))\n    \n\n    # Mask the target column where the condition is met\n    df[target_column] = df[target_column].mask(\n        (df[target_column].isna()) & df[condition_column].isin(values_to_check),\n        0\n    )\n    \n    empty_count = df[target_column].isnull().values.ravel().sum()\n    \n    print(f\"The empty number of rows are {empty_count} after filling in\")\n    \n    print(\"total dataframe row number : \", len(df))\n    \n    df.to_csv(non_station_zero_csv, index=False)\n    \n    print(f\"The rows without snotel but fsca is zero or land or water or ocean are set to 0! {non_station_zero_csv}\")\n    print(\"double check the swe_value statistics after filling in:\", df[\"swe_value\"].describe())\n    \n    \ndef clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path):\n    # Read Dask DataFrame from CSV\n    dask_df = dd.read_csv(current_ready_csv_path, dtype={'station_name': 'object'})\n\n    # Remove rows where 'swe_value' is empty\n    dask_df_filtered = dask_df.dropna(subset=['swe_value'])\n\n    # Save the result to a new CSV file\n    dask_df_filtered.to_csv(cleaned_csv_path, index=False, single_file=True)\n    print(\"dask_df_filtered.shape = \", dask_df_filtered.shape)\n    print(f\"The filtered csv with no swe values is saved to {cleaned_csv_path}\")\n\ndef rename_corrected_slope(corrected_slope_path, renamed_slope_path):\n    df = pd.read_csv(corrected_slope_path, dtype={'station_name': 'object'})\n    df.drop(columns=['Slope'], inplace=True)\n\t# Rename 'column_to_rename' to 'old_column'\n    df.rename(columns={'corrected_slope': 'Slope'}, inplace=True)\n    df.to_csv(renamed_slope_path, index=False)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {renamed_slope_path}\")\n    \ndef log10_all_fields(cleaned_csv_path, logged_csv_path):\n    print(\"convert all cumulative columns into log10\")\n    # Read Dask DataFrame from CSV\n    df = pd.read_csv(cleaned_csv_path, dtype={'station_name': 'object'})\n    \n    # Get columns with \"cumulative\" in their names\n    for col in df.columns:\n        print(\"Checking \", col)\n        if \"cumulative\" in col:\n\t        # Apply log10 transformation to selected columns\n            df[col] = np.log10(df[col] + 0.1)  # Adding 1 to avoid log(0)\n            print(f\"converted {col} to log10\")\n\n    df.to_csv(logged_csv_path, index=False)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {logged_csv_path}\")\n\n    \n    \nif __name__ == \"__main__\":\n    # Define file paths for various CSV files\n    # current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n    current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv'\n    non_station_counted_csv_path = f'{current_ready_csv_path}_fill_empty_snotel.csv'\n    cleaned_csv_path = f\"{current_ready_csv_path}_cleaned.csv\"\n    target_time_series_csv_path = f'{current_ready_csv_path}_time_series.csv'\n    backup_time_series_csv_path = f'{current_ready_csv_path}_backup.csv'\n    # target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n    target_time_series_cumulative_csv_path = f'{current_ready_csv_path}_cumulative.csv'\n    logged_csv_path = f'{current_ready_csv_path}_log10.csv'\n    slope_renamed_path = f'{current_ready_csv_path}_slope_renamed.csv'\n    \n    # filling the non station rows with fsca indicating no snow\n    assign_zero_swe_value_to_all_fsca_zero_rows(current_ready_csv_path, non_station_counted_csv_path)\n    \n    # remove the empty swe_value rows first\n    clean_non_swe_rows(non_station_counted_csv_path, cleaned_csv_path)\n  \n    # Uncomment this line to execute the 'convert_to_time_series' function\n    convert_to_time_series(cleaned_csv_path, target_time_series_csv_path)\n\n    # Uncomment this line to execute the 'add_cumulative_columns' function\n    add_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path, force=True)\n    \n    # convert all cumulative columns to log10\n    log10_all_fields(target_time_series_cumulative_csv_path, logged_csv_path)\n    \n    rename_corrected_slope(logged_csv_path, slope_renamed_path)\n    \n    df = pd.read_csv(slope_renamed_path, dtype={'station_name': 'object'})\n    print(\"the number of the total rows: \", len(df))\n    \n",
  "history_output" : "today date = 2024-05-05\n2024-05-02\ntest start date:  2024-05-02\ntest end date:  2023-10-11\n/home/chetana\nThe empty number of rows are 13750843 before filling in\ndouble check the swe_value statistics before filling in: count    1.324517e+06\nmean     5.606424e+00\nstd      9.727693e+00\nmin     -8.000000e+00\n25%      0.000000e+00\n50%      4.000000e-01\n75%      7.800000e+00\nmax      1.066000e+02\nName: swe_value, dtype: float64\nNumber of rows where 'swe_value' is less than 0: 19\nThe empty number of rows are 11864286 after filling in\ntotal dataframe row number :  15075360\nThe rows without snotel but fsca is zero or land or water or ocean are set to 0! /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv_fill_empty_snotel.csv\ndouble check the swe_value statistics after filling in: count    3.211074e+06\nmean     2.312561e+00\nstd      6.830066e+00\nmin     -8.000000e+00\n25%      0.000000e+00\n50%      0.000000e+00\n75%      0.000000e+00\nmax      1.066000e+02\nName: swe_value, dtype: float64\ndask_df_filtered.shape =  (Delayed('int-5f5ab4d5-57cf-41b3-bbda-df2847d570cf'), 25)\nThe filtered csv with no swe values is saved to /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv_cleaned.csv\nAll current columns:  Index(['date', 'lat', 'lon', 'AMSR_SWE', 'station_name', 'swe_value',\n       'change_in_swe_inch', 'snow_depth', 'air_temperature_observed_f',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'fsca', 'corrected_slope'],\n      dtype='object')\nStart to fill in the missing values\nNew filled values csv is saved to /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv_time_series.csv_gap_filled.csv\nStart to create the training csv with previous 7 days columns\nNew data is saved to /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv_time_series.csv\nFile is backed up to /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv_backup.csv\nthe column statistics from time series before cumulative:                  lat           lon           SWE     swe_value  \\\ncount  3.211074e+06  3.211074e+06  3.211074e+06  3.211074e+06   \nmean   4.156352e+01 -1.136765e+02  5.914814e+00  2.312561e+00   \nstd    3.850046e+00  5.696848e+00  1.580655e+01  6.830066e+00   \nmin    3.141666e+01 -1.245500e+02  0.000000e+00 -8.000000e+00   \n25%    3.855000e+01 -1.192220e+02  0.000000e+00  0.000000e+00   \n50%    4.118467e+01 -1.128238e+02  0.000000e+00  0.000000e+00   \n75%    4.457462e+01 -1.090667e+02  0.000000e+00  0.000000e+00   \nmax    4.900000e+01 -1.005075e+02  2.340000e+02  1.066000e+02   \n       change_in_swe_inch    snow_depth  air_temperature_observed_f  \\\ncount        3.211074e+06  3.211074e+06                3.211074e+06   \nmean         3.557065e-03  6.133463e+00                1.468743e+01   \nstd          1.198090e+00  1.723942e+01                2.040158e+01   \nmin         -1.370000e+02  0.000000e+00               -8.660000e+01   \n25%          0.000000e+00  0.000000e+00                0.000000e+00   \n50%          0.000000e+00  0.000000e+00                0.000000e+00   \n75%          0.000000e+00  0.000000e+00                3.180000e+01   \nmax          1.370000e+02  2.290000e+02                6.710000e+02   \n       air_temperature_tmmn  potential_evapotranspiration  \\\ncount          3.211074e+06                  3.211074e+06   \nmean           2.754783e+02                  4.968408e+00   \nstd            9.883147e+00                  3.213294e+00   \nmin            0.000000e+00                  0.000000e+00   \n25%            2.701000e+02                  2.200000e+00   \n50%            2.762000e+02                  4.600000e+00   \n75%            2.817000e+02                  7.200000e+00   \nmax            3.085000e+02                  2.380000e+01   \n       mean_vapor_pressure_deficit  relative_humidity_rmax  \\\ncount                 3.211074e+06            3.211074e+06   \nmean                  8.788692e-01            7.125555e+01   \nstd                   8.027297e-01            2.059016e+01   \nmin                   0.000000e+00            0.000000e+00   \n25%                   2.700000e-01            5.560000e+01   \n50%                   6.300000e-01            7.250000e+01   \n75%                   1.270000e+00            8.860000e+01   \nmax                   7.920000e+00            1.000000e+02   \n       relative_humidity_rmin  precipitation_amount  air_temperature_tmmx  \\\ncount            3.211074e+06          3.211074e+06          3.211074e+06   \nmean             2.879124e+01          1.602402e+00          2.884101e+02   \nstd              1.675204e+01          5.366858e+00          1.402561e+01   \nmin              0.000000e+00          0.000000e+00          0.000000e+00   \n25%              1.680000e+01          0.000000e+00          2.791000e+02   \n50%              2.480000e+01          0.000000e+00          2.886000e+02   \n75%              3.660000e+01          7.000000e-01          2.981000e+02   \nmax              1.000000e+02          5.042000e+02          3.254000e+02   \n         wind_speed     Elevation         Slope        Aspect     Curvature  \\\ncount  3.211074e+06  3.211074e+06  3.211074e+06  3.211074e+06  3.211074e+06   \nmean   3.772103e+00  1.953251e+03  9.195949e-01  1.845197e+02 -9.614543e+02   \nstd    1.737611e+00  7.932325e+02  2.524931e+00  1.047163e+02  5.081542e+03   \nmin    0.000000e+00 -1.207950e+00  6.327820e-02 -0.000000e+00 -2.198460e+04   \n25%    2.600000e+00  1.402141e+03  2.445297e-01  9.258768e+01 -3.988808e+03   \n50%    3.400000e+00  2.001734e+03  4.136047e-01  1.880594e+02 -2.000815e+01   \n75%    4.600000e+00  2.551543e+03  8.278580e-01  2.758316e+02  2.282732e+03   \nmax    1.960000e+01  3.978188e+03  9.000000e+01  3.599130e+02  1.757020e+04   \n          Northness      Eastness          fsca  corrected_slope  \\\ncount  3.211074e+06  3.211074e+06  3.211074e+06     3.211074e+06   \nmean   1.180370e-02  2.834155e-02  9.786031e+00     6.625122e+01   \nstd    5.884916e-01  5.823986e-01  2.119117e+01     4.885372e+02   \nmin   -7.853982e-01 -7.853979e-01  0.000000e+00    -9.999000e+03   \n25%   -6.284770e-01 -5.789484e-01  0.000000e+00     8.996606e+01   \n50%    2.564631e-02  6.505793e-02  0.000000e+00     8.998275e+01   \n75%    6.187943e-01  6.341513e-01  0.000000e+00     8.998937e+01   \nmax    7.853978e-01  7.853982e-01  9.600000e+01     8.999759e+01   \n              SWE_1  air_temperature_tmmn_1  potential_evapotranspiration_1  \\\ncount  3.211074e+06            3.211074e+06                    3.211074e+06   \nmean   5.912666e+00            2.751788e+02                    4.965036e+00   \nstd    1.580632e+01            1.354239e+01                    3.216475e+00   \nmin    0.000000e+00            0.000000e+00                    0.000000e+00   \n25%    0.000000e+00            2.700000e+02                    2.200000e+00   \n50%    0.000000e+00            2.762000e+02                    4.600000e+00   \n75%    0.000000e+00            2.817000e+02                    7.200000e+00   \nmax    2.340000e+02            3.085000e+02                    2.380000e+01   \n       mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\ncount                   3.211074e+06              3.211074e+06   \nmean                    8.778043e-01              7.115879e+01   \nstd                     8.027140e-01              2.071607e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.700000e-01              5.550000e+01   \n50%                     6.300000e-01              7.250000e+01   \n75%                     1.270000e+00              8.850000e+01   \nmax                     7.920000e+00              1.000000e+02   \n       relative_humidity_rmin_1  precipitation_amount_1  \\\ncount              3.211074e+06            3.211074e+06   \nmean               2.873147e+01            1.599346e+00   \nstd                1.674886e+01            5.359386e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.680000e+01            0.000000e+00   \n50%                2.480000e+01            0.000000e+00   \n75%                3.650000e+01            7.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_1  wind_speed_1        fsca_1         SWE_2  \\\ncount            3.211074e+06  3.211074e+06  3.211074e+06  3.211074e+06   \nmean             2.880967e+02  3.766843e+00  9.772294e+00  5.910524e+00   \nstd              1.704810e+01  1.740410e+00  2.117934e+01  1.580611e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.790000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.886000e+02  3.400000e+00  0.000000e+00  0.000000e+00   \n75%              2.981000e+02  4.600000e+00  0.000000e+00  0.000000e+00   \nmax              3.254000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_2  potential_evapotranspiration_2  \\\ncount            3.211074e+06                    3.211074e+06   \nmean             2.748774e+02                    4.961526e+00   \nstd              1.640089e+01                    3.219742e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.700000e+02                    2.200000e+00   \n50%              2.762000e+02                    4.600000e+00   \n75%              2.817000e+02                    7.200000e+00   \nmax              3.085000e+02                    2.380000e+01   \n       mean_vapor_pressure_deficit_2  relative_humidity_rmax_2  \\\ncount                   3.211074e+06              3.211074e+06   \nmean                    8.767467e-01              7.106159e+01   \nstd                     8.027024e-01              2.084015e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.700000e-01              5.550000e+01   \n50%                     6.300000e-01              7.240000e+01   \n75%                     1.270000e+00              8.850000e+01   \nmax                     7.920000e+00              1.000000e+02   \n       relative_humidity_rmin_2  precipitation_amount_2  \\\ncount              3.211074e+06            3.211074e+06   \nmean               2.867329e+01            1.596229e+00   \nstd                1.674974e+01            5.353499e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.680000e+01            0.000000e+00   \n50%                2.470000e+01            0.000000e+00   \n75%                3.650000e+01            7.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_2  wind_speed_2        fsca_2         SWE_3  \\\ncount            3.211074e+06  3.211074e+06  3.211074e+06  3.211074e+06   \nmean             2.877840e+02  3.760861e+00  9.758570e+00  5.908328e+00   \nstd              1.960479e+01  1.742164e+00  2.116752e+01  1.580584e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.790000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.886000e+02  3.400000e+00  0.000000e+00  0.000000e+00   \n75%              2.981000e+02  4.600000e+00  0.000000e+00  0.000000e+00   \nmax              3.254000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_3  potential_evapotranspiration_3  \\\ncount            3.211074e+06                    3.211074e+06   \nmean             2.745755e+02                    4.957972e+00   \nstd              1.882549e+01                    3.223020e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.700000e+02                    2.200000e+00   \n50%              2.762000e+02                    4.600000e+00   \n75%              2.817000e+02                    7.200000e+00   \nmax              3.085000e+02                    2.380000e+01   \n       mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\ncount                   3.211074e+06              3.211074e+06   \nmean                    8.756875e-01              7.096146e+01   \nstd                     8.026856e-01              2.096297e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.600000e-01              5.540000e+01   \n50%                     6.300000e-01              7.240000e+01   \n75%                     1.270000e+00              8.840000e+01   \nmax                     7.920000e+00              1.000000e+02   \n       relative_humidity_rmin_3  precipitation_amount_3  \\\ncount              3.211074e+06            3.211074e+06   \nmean               2.861654e+01            1.593149e+00   \nstd                1.675190e+01            5.349529e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.670000e+01            0.000000e+00   \n50%                2.470000e+01            0.000000e+00   \n75%                3.640000e+01            7.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_3  wind_speed_3        fsca_3         SWE_4  \\\ncount            3.211074e+06  3.211074e+06  3.211074e+06  3.211074e+06   \nmean             2.874718e+02  3.755791e+00  9.744835e+00  5.906114e+00   \nstd              2.185971e+01  1.745100e+00  2.115567e+01  1.580556e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.790000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.886000e+02  3.400000e+00  0.000000e+00  0.000000e+00   \n75%              2.981000e+02  4.600000e+00  0.000000e+00  0.000000e+00   \nmax              3.254000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_4  potential_evapotranspiration_4  \\\ncount            3.211074e+06                    3.211074e+06   \nmean             2.742726e+02                    4.954449e+00   \nstd              2.096762e+01                    3.226200e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.700000e+02                    2.200000e+00   \n50%              2.762000e+02                    4.600000e+00   \n75%              2.817000e+02                    7.200000e+00   \nmax              3.085000e+02                    2.380000e+01   \n       mean_vapor_pressure_deficit_4  relative_humidity_rmax_4  \\\ncount                   3.211074e+06              3.211074e+06   \nmean                    8.746293e-01              7.086099e+01   \nstd                     8.026588e-01              2.108449e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.600000e-01              5.530000e+01   \n50%                     6.300000e-01              7.230000e+01   \n75%                     1.270000e+00              8.840000e+01   \nmax                     7.920000e+00              1.000000e+02   \n       relative_humidity_rmin_4  precipitation_amount_4  \\\ncount              3.211074e+06            3.211074e+06   \nmean               2.856438e+01            1.590732e+00   \nstd                1.675809e+01            5.345869e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.670000e+01            0.000000e+00   \n50%                2.470000e+01            0.000000e+00   \n75%                3.640000e+01            7.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_4  wind_speed_4        fsca_4         SWE_5  \\\ncount            3.211074e+06  3.211074e+06  3.211074e+06  3.211074e+06   \nmean             2.871593e+02  3.750750e+00  9.731137e+00  5.904152e+00   \nstd              2.389898e+01  1.747776e+00  2.114387e+01  1.580535e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.790000e+02  2.500000e+00  0.000000e+00  0.000000e+00   \n50%              2.886000e+02  3.400000e+00  0.000000e+00  0.000000e+00   \n75%              2.981000e+02  4.600000e+00  0.000000e+00  0.000000e+00   \nmax              3.254000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_5  potential_evapotranspiration_5  \\\ncount            3.211074e+06                    3.211074e+06   \nmean             2.739686e+02                    4.950782e+00   \nstd              2.290657e+01                    3.229421e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.700000e+02                    2.200000e+00   \n50%              2.762000e+02                    4.600000e+00   \n75%              2.817000e+02                    7.200000e+00   \nmax              3.085000e+02                    2.380000e+01   \n       mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\ncount                   3.211074e+06              3.211074e+06   \nmean                    8.735743e-01              7.076048e+01   \nstd                     8.026335e-01              2.120527e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.600000e-01              5.520000e+01   \n50%                     6.200000e-01              7.230000e+01   \n75%                     1.270000e+00              8.830000e+01   \nmax                     7.920000e+00              1.000000e+02   \n       relative_humidity_rmin_5  precipitation_amount_5  \\\ncount              3.211074e+06            3.211074e+06   \nmean               2.851507e+01            1.588183e+00   \nstd                1.676650e+01            5.343368e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.670000e+01            0.000000e+00   \n50%                2.460000e+01            0.000000e+00   \n75%                3.630000e+01            7.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_5  wind_speed_5        fsca_5         SWE_6  \\\ncount            3.211074e+06  3.211074e+06  3.211074e+06  3.211074e+06   \nmean             2.868453e+02  3.745403e+00  9.717407e+00  5.902941e+00   \nstd              2.577429e+01  1.749853e+00  2.113197e+01  1.580518e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.790000e+02  2.500000e+00  0.000000e+00  0.000000e+00   \n50%              2.886000e+02  3.400000e+00  0.000000e+00  0.000000e+00   \n75%              2.981000e+02  4.600000e+00  0.000000e+00  0.000000e+00   \nmax              3.254000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_6  potential_evapotranspiration_6  \\\ncount            3.211074e+06                    3.211074e+06   \nmean             2.736636e+02                    4.947033e+00   \nstd              2.469024e+01                    3.232708e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.700000e+02                    2.200000e+00   \n50%              2.762000e+02                    4.600000e+00   \n75%              2.817000e+02                    7.200000e+00   \nmax              3.085000e+02                    2.380000e+01   \n       mean_vapor_pressure_deficit_6  relative_humidity_rmax_6  \\\ncount                   3.211074e+06              3.211074e+06   \nmean                    8.725189e-01              7.065909e+01   \nstd                     8.025997e-01              2.132392e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.600000e-01              5.510000e+01   \n50%                     6.200000e-01              7.220001e+01   \n75%                     1.270000e+00              8.830000e+01   \nmax                     7.920000e+00              1.000000e+02   \n       relative_humidity_rmin_6  precipitation_amount_6  \\\ncount              3.211074e+06            3.211074e+06   \nmean               2.846746e+01            1.585877e+00   \nstd                1.677555e+01            5.340453e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.660000e+01            0.000000e+00   \n50%                2.460000e+01            0.000000e+00   \n75%                3.630000e+01            7.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_6  wind_speed_6        fsca_6         SWE_7  \\\ncount            3.211074e+06  3.211074e+06  3.211074e+06  3.211074e+06   \nmean             2.865309e+02  3.739675e+00  9.703841e+00  5.902085e+00   \nstd              2.751862e+01  1.750838e+00  2.112033e+01  1.580511e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.790000e+02  2.500000e+00  0.000000e+00  0.000000e+00   \n50%              2.886000e+02  3.400000e+00  0.000000e+00  0.000000e+00   \n75%              2.981000e+02  4.600000e+00  0.000000e+00  0.000000e+00   \nmax              3.254000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_7  potential_evapotranspiration_7  \\\ncount            3.211074e+06                    3.211074e+06   \nmean             2.733573e+02                    4.943259e+00   \nstd              2.635032e+01                    3.235903e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.700000e+02                    2.200000e+00   \n50%              2.761000e+02                    4.600000e+00   \n75%              2.817000e+02                    7.200000e+00   \nmax              3.085000e+02                    2.380000e+01   \n       mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\ncount                   3.211074e+06              3.211074e+06   \nmean                    8.714657e-01              7.055774e+01   \nstd                     8.025681e-01              2.144141e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.600000e-01              5.500000e+01   \n50%                     6.200000e-01              7.210000e+01   \n75%                     1.270000e+00              8.820001e+01   \nmax                     7.920000e+00              1.000000e+02   \n       relative_humidity_rmin_7  precipitation_amount_7  \\\ncount              3.211074e+06            3.211074e+06   \nmean               2.842077e+01            1.583692e+00   \nstd                1.678494e+01            5.336799e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.660000e+01            0.000000e+00   \n50%                2.460000e+01            0.000000e+00   \n75%                3.620000e+01            7.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_7  wind_speed_7        fsca_7  \ncount            3.211074e+06  3.211074e+06  3.211074e+06  \nmean             2.862166e+02  3.734451e+00  9.690418e+00  \nstd              2.915542e+01  1.753039e+00  2.110880e+01  \nmin              0.000000e+00  0.000000e+00  0.000000e+00  \n25%              2.790000e+02  2.500000e+00  0.000000e+00  \n50%              2.886000e+02  3.400000e+00  0.000000e+00  \n75%              2.981000e+02  4.600000e+00  0.000000e+00  \nmax              3.254000e+02  1.960000e+01  9.600000e+01  \nThis is our unique years [2018 2019 2020 2021]\nhow many rows are left in the three water years?                 lat           lon           SWE     swe_value  \\\ncount  2.391441e+06  2.391441e+06  2.391441e+06  2.391441e+06   \nmean   4.158887e+01 -1.137162e+02  4.341821e+00  2.458014e+00   \nstd    3.850395e+00  5.697857e+00  1.417716e+01  7.005064e+00   \nmin    3.141666e+01 -1.245500e+02  0.000000e+00 -8.000000e+00   \n25%    3.863000e+01 -1.192539e+02  0.000000e+00  0.000000e+00   \n50%    4.122500e+01 -1.128593e+02  0.000000e+00  0.000000e+00   \n75%    4.459397e+01 -1.091000e+02  0.000000e+00  0.000000e+00   \nmax    4.900000e+01 -1.005075e+02  2.340000e+02  1.021000e+02   \n       change_in_swe_inch    snow_depth  air_temperature_observed_f  \\\ncount        2.391441e+06  2.391441e+06                2.391441e+06   \nmean        -4.537013e-04  6.432507e+00                1.464136e+01   \nstd          1.216162e+00  1.744774e+01                2.035171e+01   \nmin         -1.370000e+02  0.000000e+00               -8.660000e+01   \n25%          0.000000e+00  0.000000e+00                0.000000e+00   \n50%          0.000000e+00  0.000000e+00                0.000000e+00   \n75%          0.000000e+00  0.000000e+00                3.150000e+01   \nmax          1.200000e+02  2.290000e+02                6.710000e+02   \n       air_temperature_tmmn  potential_evapotranspiration  \\\ncount          2.391441e+06                  2.391441e+06   \nmean           2.753547e+02                  5.010496e+00   \nstd            1.003197e+01                  3.215854e+00   \nmin            0.000000e+00                  0.000000e+00   \n25%            2.697000e+02                  2.275881e+00   \n50%            2.760000e+02                  4.700000e+00   \n75%            2.818000e+02                  7.300000e+00   \nmax            3.085000e+02                  2.380000e+01   \n       mean_vapor_pressure_deficit  relative_humidity_rmax  \\\ncount                 2.391441e+06            2.391441e+06   \nmean                  8.058697e-01            6.997290e+01   \nstd                   7.560035e-01            2.106099e+01   \nmin                   0.000000e+00            0.000000e+00   \n25%                   2.400000e-01            5.360000e+01   \n50%                   5.600000e-01            7.110000e+01   \n75%                   1.160000e+00            8.770001e+01   \nmax                   7.660000e+00            1.000000e+02   \n       relative_humidity_rmin  precipitation_amount  air_temperature_tmmx  \\\ncount            2.391441e+06          2.391441e+06          2.391441e+06   \nmean             2.884618e+01          1.664149e+00          2.884690e+02   \nstd              1.676406e+01          5.520286e+00          1.393679e+01   \nmin              0.000000e+00          0.000000e+00          0.000000e+00   \n25%              1.700000e+01          0.000000e+00          2.791000e+02   \n50%              2.480000e+01          0.000000e+00          2.886000e+02   \n75%              3.660000e+01          8.000000e-01          2.980000e+02   \nmax              1.000000e+02          5.042000e+02          3.254000e+02   \n         wind_speed     Elevation         Slope        Aspect     Curvature  \\\ncount  2.391441e+06  2.391441e+06  2.391441e+06  2.391441e+06  2.391441e+06   \nmean   3.747760e+00  1.948288e+03  9.197840e-01  1.845691e+02 -9.690169e+02   \nstd    1.713472e+00  7.950956e+02  2.520140e+00  1.047452e+02  5.081637e+03   \nmin    0.000000e+00 -1.207950e+00  6.327820e-02 -0.000000e+00 -2.198460e+04   \n25%    2.600000e+00  1.394696e+03  2.445297e-01  9.263547e+01 -3.992808e+03   \n50%    3.400000e+00  1.988180e+03  4.136047e-01  1.880594e+02 -2.811145e+01   \n75%    4.600000e+00  2.547068e+03  8.297043e-01  2.760791e+02  2.280909e+03   \nmax    1.960000e+01  3.978188e+03  9.000000e+01  3.599130e+02  1.757020e+04   \n          Northness      Eastness          fsca  corrected_slope  \\\ncount  2.391441e+06  2.391441e+06  2.391441e+06     2.391441e+06   \nmean   1.212411e-02  2.819455e-02  1.028152e+01     6.585723e+01   \nstd    5.886406e-01  5.822671e-01  2.170414e+01     4.925694e+02   \nmin   -7.853982e-01 -7.853979e-01  0.000000e+00    -9.999000e+03   \n25%   -6.284770e-01 -5.789484e-01  0.000000e+00     8.996606e+01   \n50%    2.564631e-02  6.505793e-02  0.000000e+00     8.998275e+01   \n75%    6.196246e-01  6.337889e-01  0.000000e+00     8.998937e+01   \nmax    7.853978e-01  7.853982e-01  9.600000e+01     8.999759e+01   \n              SWE_1  air_temperature_tmmn_1  potential_evapotranspiration_1  \\\ncount  2.391441e+06            2.391441e+06                    2.391441e+06   \nmean   4.359613e+00            2.753589e+02                    5.007176e+00   \nstd    1.420398e+01            1.003240e+01                    3.216413e+00   \nmin    0.000000e+00            0.000000e+00                    0.000000e+00   \n25%    0.000000e+00            2.697000e+02                    2.230330e+00   \n50%    0.000000e+00            2.760000e+02                    4.700000e+00   \n75%    0.000000e+00            2.818000e+02                    7.300000e+00   \nmax    2.340000e+02            3.085000e+02                    2.380000e+01   \n       mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\ncount                   2.391441e+06              2.391441e+06   \nmean                    8.051771e-01              6.998976e+01   \nstd                     7.554440e-01              2.106144e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.400000e-01              5.360000e+01   \n50%                     5.600000e-01              7.110000e+01   \n75%                     1.160000e+00              8.770001e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_1  precipitation_amount_1  \\\ncount              2.391441e+06            2.391441e+06   \nmean               2.883912e+01            1.663696e+00   \nstd                1.675800e+01            5.518988e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.700000e+01            0.000000e+00   \n50%                2.480000e+01            0.000000e+00   \n75%                3.660000e+01            8.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_1  wind_speed_1        fsca_1         SWE_2  \\\ncount            2.391441e+06  2.391441e+06  2.391441e+06  2.391441e+06   \nmean             2.884699e+02  3.749438e+00  1.028157e+01  4.377509e+00   \nstd              1.393728e+01  1.714124e+00  2.170410e+01  1.423092e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.791000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.886000e+02  3.400000e+00  0.000000e+00  0.000000e+00   \n75%              2.980372e+02  4.600000e+00  0.000000e+00  0.000000e+00   \nmax              3.254000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_2  potential_evapotranspiration_2  \\\ncount            2.391441e+06                    2.391441e+06   \nmean             2.753617e+02                    5.003512e+00   \nstd              1.003263e+01                    3.216509e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.697000e+02                    2.200000e+00   \n50%              2.761000e+02                    4.620804e+00   \n75%              2.818000e+02                    7.300000e+00   \nmax              3.085000e+02                    2.380000e+01   \n       mean_vapor_pressure_deficit_2  relative_humidity_rmax_2  \\\ncount                   2.391441e+06              2.391441e+06   \nmean                    8.045691e-01              7.001623e+01   \nstd                     7.548363e-01              2.105772e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.400000e-01              5.360000e+01   \n50%                     5.600000e-01              7.110000e+01   \n75%                     1.160000e+00              8.770001e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_2  precipitation_amount_2  \\\ncount              2.391441e+06            2.391441e+06   \nmean               2.882335e+01            1.662874e+00   \nstd                1.675549e+01            5.515035e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.700000e+01            0.000000e+00   \n50%                2.480000e+01            0.000000e+00   \n75%                3.660000e+01            8.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_2  wind_speed_2        fsca_2         SWE_3  \\\ncount            2.391441e+06  2.391441e+06  2.391441e+06  2.391441e+06   \nmean             2.884697e+02  3.749883e+00  1.028180e+01  4.395421e+00   \nstd              1.393800e+01  1.714229e+00  2.170422e+01  1.425780e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.791000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.886000e+02  3.400000e+00  0.000000e+00  0.000000e+00   \n75%              2.980988e+02  4.600000e+00  0.000000e+00  0.000000e+00   \nmax              3.254000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_3  potential_evapotranspiration_3  \\\ncount            2.391441e+06                    2.391441e+06   \nmean             2.753606e+02                    4.999427e+00   \nstd              1.003260e+01                    3.216145e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.697000e+02                    2.200000e+00   \n50%              2.761000e+02                    4.600000e+00   \n75%              2.818000e+02                    7.300000e+00   \nmax              3.085000e+02                    2.380000e+01   \n       mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\ncount                   2.391441e+06              2.391441e+06   \nmean                    8.039791e-01              7.005113e+01   \nstd                     7.542158e-01              2.104858e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.400000e-01              5.370000e+01   \n50%                     5.600000e-01              7.120001e+01   \n75%                     1.160000e+00              8.770001e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_3  precipitation_amount_3  \\\ncount              2.391441e+06            2.391441e+06   \nmean               2.880960e+01            1.660582e+00   \nstd                1.675462e+01            5.506569e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.690000e+01            0.000000e+00   \n50%                2.480000e+01            0.000000e+00   \n75%                3.650000e+01            8.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_3  wind_speed_3        fsca_3         SWE_4  \\\ncount            2.391441e+06  2.391441e+06  2.391441e+06  2.391441e+06   \nmean             2.884687e+02  3.748919e+00  1.028206e+01  4.413285e+00   \nstd              1.393917e+01  1.714122e+00  2.170430e+01  1.428456e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.791000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.886000e+02  3.400000e+00  0.000000e+00  0.000000e+00   \n75%              2.981000e+02  4.600000e+00  0.000000e+00  0.000000e+00   \nmax              3.254000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_4  potential_evapotranspiration_4  \\\ncount            2.391441e+06                    2.391441e+06   \nmean             2.753565e+02                    4.995004e+00   \nstd              1.003206e+01                    3.215274e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.697000e+02                    2.200000e+00   \n50%              2.760000e+02                    4.600000e+00   \n75%              2.818000e+02                    7.200090e+00   \nmax              3.085000e+02                    2.380000e+01   \n       mean_vapor_pressure_deficit_4  relative_humidity_rmax_4  \\\ncount                   2.391441e+06              2.391441e+06   \nmean                    8.033356e-01              7.008050e+01   \nstd                     7.536027e-01              2.103613e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.400000e-01              5.370000e+01   \n50%                     5.600000e-01              7.120001e+01   \n75%                     1.150000e+00              8.780000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_4  precipitation_amount_4  \\\ncount              2.391441e+06            2.391441e+06   \nmean               2.880406e+01            1.658081e+00   \nstd                1.675452e+01            5.496392e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.690000e+01            0.000000e+00   \n50%                2.480000e+01            0.000000e+00   \n75%                3.650000e+01            8.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_4  wind_speed_4        fsca_4         SWE_5  \\\ncount            2.391441e+06  2.391441e+06  2.391441e+06  2.391441e+06   \nmean             2.884674e+02  3.748322e+00  1.028220e+01  4.431173e+00   \nstd              1.394066e+01  1.714042e+00  2.170433e+01  1.431127e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.791000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.886000e+02  3.400000e+00  0.000000e+00  0.000000e+00   \n75%              2.981000e+02  4.600000e+00  0.000000e+00  0.000000e+00   \nmax              3.254000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_5  potential_evapotranspiration_5  \\\ncount            2.391441e+06                    2.391441e+06   \nmean             2.753513e+02                    4.990389e+00   \nstd              1.003124e+01                    3.214335e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.697000e+02                    2.200000e+00   \n50%              2.760000e+02                    4.600000e+00   \n75%              2.818000e+02                    7.200000e+00   \nmax              3.085000e+02                    2.380000e+01   \n       mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\ncount                   2.391441e+06              2.391441e+06   \nmean                    8.026368e-01              7.010052e+01   \nstd                     7.530570e-01              2.102722e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.400000e-01              5.380000e+01   \n50%                     5.600000e-01              7.120001e+01   \n75%                     1.150000e+00              8.780000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_5  precipitation_amount_5  \\\ncount              2.391441e+06            2.391441e+06   \nmean               2.880143e+01            1.655614e+00   \nstd                1.675499e+01            5.490040e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.690000e+01            0.000000e+00   \n50%                2.480000e+01            0.000000e+00   \n75%                3.650000e+01            8.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_5  wind_speed_5        fsca_5         SWE_6  \\\ncount            2.391441e+06  2.391441e+06  2.391441e+06  2.391441e+06   \nmean             2.884656e+02  3.748079e+00  1.028217e+01  4.449006e+00   \nstd              1.394311e+01  1.714002e+00  2.170431e+01  1.433786e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.791000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.886000e+02  3.400000e+00  0.000000e+00  0.000000e+00   \n75%              2.981000e+02  4.600000e+00  0.000000e+00  0.000000e+00   \nmax              3.254000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_6  potential_evapotranspiration_6  \\\ncount            2.391441e+06                    2.391441e+06   \nmean             2.753479e+02                    4.985748e+00   \nstd              1.003094e+01                    3.213453e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.697000e+02                    2.200000e+00   \n50%              2.760000e+02                    4.600000e+00   \n75%              2.818000e+02                    7.200000e+00   \nmax              3.085000e+02                    2.380000e+01   \n       mean_vapor_pressure_deficit_6  relative_humidity_rmax_6  \\\ncount                   2.391441e+06              2.391441e+06   \nmean                    8.019089e-01              7.011324e+01   \nstd                     7.525462e-01              2.102099e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.400000e-01              5.380000e+01   \n50%                     5.600000e-01              7.120001e+01   \n75%                     1.150000e+00              8.780000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_6  precipitation_amount_6  \\\ncount              2.391441e+06            2.391441e+06   \nmean               2.880084e+01            1.652197e+00   \nstd                1.675545e+01            5.480193e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.690000e+01            0.000000e+00   \n50%                2.480000e+01            0.000000e+00   \n75%                3.650000e+01            8.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_6  wind_speed_6        fsca_6         SWE_7  \\\ncount            2.391441e+06  2.391441e+06  2.391441e+06  2.391441e+06   \nmean             2.884648e+02  3.748349e+00  1.028225e+01  4.466843e+00   \nstd              1.394534e+01  1.713849e+00  2.170430e+01  1.436438e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.791000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.886000e+02  3.400000e+00  0.000000e+00  0.000000e+00   \n75%              2.981000e+02  4.600000e+00  0.000000e+00  0.000000e+00   \nmax              3.254000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_7  potential_evapotranspiration_7  \\\ncount            2.391441e+06                    2.391441e+06   \nmean             2.753463e+02                    4.981193e+00   \nstd              1.003072e+01                    3.212689e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.697000e+02                    2.200000e+00   \n50%              2.760000e+02                    4.600000e+00   \n75%              2.818000e+02                    7.200000e+00   \nmax              3.085000e+02                    2.380000e+01   \n       mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\ncount                   2.391441e+06              2.391441e+06   \nmean                    8.011821e-01              7.012587e+01   \nstd                     7.519948e-01              2.101740e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.400000e-01              5.380000e+01   \n50%                     5.600000e-01              7.120001e+01   \n75%                     1.150000e+00              8.780000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_7  precipitation_amount_7  \\\ncount              2.391441e+06            2.391441e+06   \nmean               2.879952e+01            1.649103e+00   \nstd                1.675603e+01            5.469411e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.690000e+01            0.000000e+00   \n50%                2.480000e+01            0.000000e+00   \n75%                3.650000e+01            8.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_7  wind_speed_7        fsca_7  \ncount            2.391441e+06  2.391441e+06  2.391441e+06  \nmean             2.884653e+02  3.748932e+00  1.028226e+01  \nstd              1.394772e+01  1.713692e+00  2.170425e+01  \nmin              0.000000e+00  0.000000e+00  0.000000e+00  \n25%              2.791000e+02  2.600000e+00  0.000000e+00  \n50%              2.886000e+02  3.400000e+00  0.000000e+00  \n75%              2.981000e+02  4.600000e+00  0.000000e+00  \nmax              3.254000e+02  1.960000e+01  9.600000e+01  \nhow many groups?  <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7f9d7960ac40>\nThis is the dataframe after cumulative columns are added\ncount    2.391441e+06\nmean     2.587229e+03\nstd      4.384776e+03\nmin      0.000000e+00\n25%      0.000000e+00\n50%      0.000000e+00\n75%      4.294207e+03\nmax      3.490531e+04\nName: cumulative_fsca, dtype: float64\nAll the cumulative variables are added successfully! /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv_cumulative.csv\ndouble check the swe_value statistics: count    2.391441e+06\nmean     2.458014e+00\nstd      7.005064e+00\nmin     -8.000000e+00\n25%      0.000000e+00\n50%      0.000000e+00\n75%      0.000000e+00\nmax      1.021000e+02\nName: swe_value, dtype: float64\nconvert all cumulative columns into log10\nChecking  date\nChecking  lat\nChecking  lon\nChecking  SWE\nChecking  station_name\nChecking  swe_value\nChecking  change_in_swe_inch\nChecking  snow_depth\nChecking  air_temperature_observed_f\nChecking  air_temperature_tmmn\nChecking  potential_evapotranspiration\nChecking  mean_vapor_pressure_deficit\nChecking  relative_humidity_rmax\nChecking  relative_humidity_rmin\nChecking  precipitation_amount\nChecking  air_temperature_tmmx\nChecking  wind_speed\nChecking  Elevation\nChecking  Slope\nChecking  Aspect\nChecking  Curvature\nChecking  Northness\nChecking  Eastness\nChecking  fsca\nChecking  corrected_slope\nChecking  SWE_1\nChecking  air_temperature_tmmn_1\nChecking  potential_evapotranspiration_1\nChecking  mean_vapor_pressure_deficit_1\nChecking  relative_humidity_rmax_1\nChecking  relative_humidity_rmin_1\nChecking  precipitation_amount_1\nChecking  air_temperature_tmmx_1\nChecking  wind_speed_1\nChecking  fsca_1\nChecking  SWE_2\nChecking  air_temperature_tmmn_2\nChecking  potential_evapotranspiration_2\nChecking  mean_vapor_pressure_deficit_2\nChecking  relative_humidity_rmax_2\nChecking  relative_humidity_rmin_2\nChecking  precipitation_amount_2\nChecking  air_temperature_tmmx_2\nChecking  wind_speed_2\nChecking  fsca_2\nChecking  SWE_3\nChecking  air_temperature_tmmn_3\nChecking  potential_evapotranspiration_3\nChecking  mean_vapor_pressure_deficit_3\nChecking  relative_humidity_rmax_3\nChecking  relative_humidity_rmin_3\nChecking  precipitation_amount_3\nChecking  air_temperature_tmmx_3\nChecking  wind_speed_3\nChecking  fsca_3\nChecking  SWE_4\nChecking  air_temperature_tmmn_4\nChecking  potential_evapotranspiration_4\nChecking  mean_vapor_pressure_deficit_4\nChecking  relative_humidity_rmax_4\nChecking  relative_humidity_rmin_4\nChecking  precipitation_amount_4\nChecking  air_temperature_tmmx_4\nChecking  wind_speed_4\nChecking  fsca_4\nChecking  SWE_5\nChecking  air_temperature_tmmn_5\nChecking  potential_evapotranspiration_5\nChecking  mean_vapor_pressure_deficit_5\nChecking  relative_humidity_rmax_5\nChecking  relative_humidity_rmin_5\nChecking  precipitation_amount_5\nChecking  air_temperature_tmmx_5\nChecking  wind_speed_5\nChecking  fsca_5\nChecking  SWE_6\nChecking  air_temperature_tmmn_6\nChecking  potential_evapotranspiration_6\nChecking  mean_vapor_pressure_deficit_6\nChecking  relative_humidity_rmax_6\nChecking  relative_humidity_rmin_6\nChecking  precipitation_amount_6\nChecking  air_temperature_tmmx_6\nChecking  wind_speed_6\nChecking  fsca_6\nChecking  SWE_7\nChecking  air_temperature_tmmn_7\nChecking  potential_evapotranspiration_7\nChecking  mean_vapor_pressure_deficit_7\nChecking  relative_humidity_rmax_7\nChecking  relative_humidity_rmin_7\nChecking  precipitation_amount_7\nChecking  air_temperature_tmmx_7\nChecking  wind_speed_7\nChecking  fsca_7\nChecking  water_year\nChecking  cumulative_SWE\nconverted cumulative_SWE to log10\nChecking  cumulative_air_temperature_tmmn\nconverted cumulative_air_temperature_tmmn to log10\nChecking  cumulative_potential_evapotranspiration\nconverted cumulative_potential_evapotranspiration to log10\nChecking  cumulative_mean_vapor_pressure_deficit\nconverted cumulative_mean_vapor_pressure_deficit to log10\nChecking  cumulative_relative_humidity_rmax\nconverted cumulative_relative_humidity_rmax to log10\nChecking  cumulative_relative_humidity_rmin\nconverted cumulative_relative_humidity_rmin to log10\nChecking  cumulative_precipitation_amount\nconverted cumulative_precipitation_amount to log10\nChecking  cumulative_air_temperature_tmmx\nconverted cumulative_air_temperature_tmmx to log10\nChecking  cumulative_wind_speed\nconverted cumulative_wind_speed to log10\nChecking  cumulative_fsca\nconverted cumulative_fsca to log10\ndask_df.shape =  (2391441, 106)\nThe log10 file is saved to /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv_log10.csv\ndask_df.shape =  (2391441, 105)\nThe log10 file is saved to /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv_slope_renamed.csv\nthe number of the total rows:  2391441\n",
  "history_begin_time" : 1714890454089,
  "history_end_time" : 1714893357426,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "ScyZSNnjkTq7",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\nimport dask.dataframe as dd\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    if column_name == \"SWE\":\n      mask = (y > 240) | y.isnull()\n    elif column_name == \"fsca\":\n      mask = (y > 100) | y.isnull()\n    else:\n      mask = y.isnull()\n\n    # Check if all elements in the mask array are True\n    all_true = np.all(mask)\n\n    if all_true:\n      df[column_name] = 0\n    else:\n      # Perform interpolation\n      new_y = np.interp(x, x[~mask], y[~mask])\n      # Replace missing values with interpolated values\n      df[column_name] = new_y\n\n    if np.any(df[column_name].isnull()):\n      raise ValueError(\"Single group: shouldn't have null values here\")\n        \n    return df\n\ndef convert_to_time_series(input_csv, output_csv):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                         'AMSR_SWE': 'SWE',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv):\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['fsca'] > 100):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        filled_data.to_csv(filled_csv, index=False)\n        \n        print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv):\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n        result.fillna(0, inplace=True)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv, force=False):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_cumulated = [\n      \"SWE\",\n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2018-10-01')\n    end_date = pd.to_datetime('2021-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df[\"cumulative_fsca\"].describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n\n    \ndef assign_zero_swe_value_to_all_fsca_zero_rows(na_filled_csv, non_station_zero_csv):\n    \n    # Define the conditions\n    condition_column = 'fsca'\n    target_column = 'swe_value'\n    values_to_check = [0, 225, 237, 239]\n    \n    \n    df = pd.read_csv(na_filled_csv, dtype={'station_name': 'object'})\n    empty_count = df[target_column].isnull().values.ravel().sum()\n    \n    print(f\"The empty number of rows are {empty_count} before filling in\")\n    print(\"double check the swe_value statistics before filling in:\", df[\"swe_value\"].describe())\n    \n    rows_less_than_zero = (df[target_column] < 0).sum()\n    print(\"Number of rows where '{}' is less than 0: {}\".format(target_column, rows_less_than_zero))\n    \n\n    # Mask the target column where the condition is met\n    df[target_column] = df[target_column].mask(\n        (df[target_column].isna()) & df[condition_column].isin(values_to_check),\n        0\n    )\n    \n    empty_count = df[target_column].isnull().values.ravel().sum()\n    \n    print(f\"The empty number of rows are {empty_count} after filling in\")\n    \n    print(\"total dataframe row number : \", len(df))\n    \n    df.to_csv(non_station_zero_csv, index=False)\n    \n    print(f\"The rows without snotel but fsca is zero or land or water or ocean are set to 0! {non_station_zero_csv}\")\n    print(\"double check the swe_value statistics after filling in:\", df[\"swe_value\"].describe())\n    \n    \ndef clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path):\n    # Read Dask DataFrame from CSV\n    dask_df = dd.read_csv(current_ready_csv_path, dtype={'station_name': 'object'})\n\n    # Remove rows where 'swe_value' is empty\n    dask_df_filtered = dask_df.dropna(subset=['swe_value'])\n\n    # Save the result to a new CSV file\n    dask_df_filtered.to_csv(cleaned_csv_path, index=False, single_file=True)\n    print(\"dask_df_filtered.shape = \", dask_df_filtered.shape)\n    print(f\"The filtered csv with no swe values is saved to {cleaned_csv_path}\")\n\ndef rename_corrected_slope(corrected_slope_path, renamed_slope_path):\n    df = pd.read_csv(corrected_slope_path, dtype={'station_name': 'object'})\n    df.drop(columns=['Slope'], inplace=True)\n\t# Rename 'column_to_rename' to 'old_column'\n    df.rename(columns={'corrected_slope': 'Slope'}, inplace=True)\n    df.to_csv(renamed_slope_path, index=False)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {renamed_slope_path}\")\n    \ndef log10_all_fields(cleaned_csv_path, logged_csv_path):\n    print(\"convert all cumulative columns into log10\")\n    # Read Dask DataFrame from CSV\n    df = pd.read_csv(cleaned_csv_path, dtype={'station_name': 'object'})\n    \n    # Get columns with \"cumulative\" in their names\n    for col in df.columns:\n        print(\"Checking \", col)\n        if \"cumulative\" in col:\n\t        # Apply log10 transformation to selected columns\n            df[col] = np.log10(df[col] + 0.1)  # Adding 1 to avoid log(0)\n            print(f\"converted {col} to log10\")\n\n    df.to_csv(logged_csv_path, index=False)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {logged_csv_path}\")\n\n    \n    \nif __name__ == \"__main__\":\n    # Define file paths for various CSV files\n    # current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n    current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv'\n    cleaned_csv_path = f\"{current_ready_csv_path}_cleaned_nodata_with_non_stations.csv\"\n    non_station_counted_csv_path = f'{cleaned_csv_path}_non_station_counted_in_training.csv'\n    target_time_series_csv_path = f'{cleaned_csv_path}_time_series_v1_with_non_stations.csv'\n    backup_time_series_csv_path = f'{cleaned_csv_path}_time_series_v1_bak_with_non_stations.csv'\n    # target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n    target_time_series_cumulative_csv_path = f'{cleaned_csv_path}_time_series_cumulative_v1_with_non_stations.csv'\n    logged_csv_path = f'{cleaned_csv_path}_time_series_cumulative_logged_v1_with_non_stations.csv'\n    slope_renamed_path = f'{cleaned_csv_path}_slope_renamed_with_non_stations.csv'\n    \n    # filling the non station rows with fsca indicating no snow\n    assign_zero_swe_value_to_all_fsca_zero_rows(current_ready_csv_path, non_station_counted_csv_path)\n    \n    # remove the empty swe_value rows first\n    #clean_non_swe_rows(non_station_counted_csv_path, cleaned_csv_path)\n  \n    # Uncomment this line to execute the 'convert_to_time_series' function\n    #convert_to_time_series(cleaned_csv_path, target_time_series_csv_path)\n\n    # Uncomment this line to execute the 'add_cumulative_columns' function\n    #add_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path, force=True)\n    \n    # convert all cumulative columns to log10\n    #log10_all_fields(target_time_series_cumulative_csv_path, logged_csv_path)\n    \n    #rename_corrected_slope(logged_csv_path, slope_renamed_path)\n    \n    df = pd.read_csv(slope_renamed_path, dtype={'station_name': 'object'})\n    print(\"the number of the total rows: \", len(df))\n    \n",
  "history_output" : "today date = 2024-05-05\n2024-05-02\ntest start date:  2024-05-02\ntest end date:  2023-10-11\n/home/chetana\nThe empty number of rows are 13750843 before filling in\ndouble check the swe_value statistics before filling in: count    1.324517e+06\nmean     5.606424e+00\nstd      9.727693e+00\nmin     -8.000000e+00\n25%      0.000000e+00\n50%      4.000000e-01\n75%      7.800000e+00\nmax      1.066000e+02\nName: swe_value, dtype: float64\nNumber of rows where 'swe_value' is less than 0: 19\nThe empty number of rows are 11864286 after filling in\ntotal dataframe row number :  15075360\nThe rows without snotel but fsca is zero or land or water or ocean are set to 0! /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv_cleaned_nodata_with_non_stations.csv_non_station_counted_in_training.csv\ndouble check the swe_value statistics after filling in: count    3.211074e+06\nmean     2.312561e+00\nstd      6.830066e+00\nmin     -8.000000e+00\n25%      0.000000e+00\n50%      0.000000e+00\n75%      0.000000e+00\nmax      1.066000e+02\nName: swe_value, dtype: float64\nthe number of the total rows:  992057\n",
  "history_begin_time" : 1714889811510,
  "history_end_time" : 1714890369742,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "BwdCME7PD0Ax",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\nimport dask.dataframe as dd\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    if column_name == \"SWE\":\n      mask = (y > 240) | y.isnull()\n    elif column_name == \"fsca\":\n      mask = (y > 100) | y.isnull()\n    else:\n      mask = y.isnull()\n\n    # Check if all elements in the mask array are True\n    all_true = np.all(mask)\n\n    if all_true:\n      df[column_name] = 0\n    else:\n      # Perform interpolation\n      new_y = np.interp(x, x[~mask], y[~mask])\n      # Replace missing values with interpolated values\n      df[column_name] = new_y\n\n    if np.any(df[column_name].isnull()):\n      raise ValueError(\"Single group: shouldn't have null values here\")\n        \n    return df\n\ndef convert_to_time_series(input_csv, output_csv):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                         'AMSR_SWE': 'SWE',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv):\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['fsca'] > 100):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        filled_data.to_csv(filled_csv, index=False)\n        \n        print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv):\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n        result.fillna(0, inplace=True)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv, force=False):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_cumulated = [\n      \"SWE\",\n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2018-10-01')\n    end_date = pd.to_datetime('2021-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df[\"cumulative_fsca\"].describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n\n    \ndef assign_zero_swe_value_to_all_fsca_zero_rows(na_filled_csv, non_station_zero_csv):\n    \n    # Define the conditions\n    condition_column = 'fsca'\n    target_column = 'swe_value'\n    values_to_check = [0, 225, 237, 239]\n    \n    \n    df = pd.read_csv(na_filled_csv, dtype={'station_name': 'object'})\n    empty_count = df[target_column].isnull().values.ravel().sum()\n    \n    print(f\"The empty number of rows are {empty_count} before filling in\")\n    print(\"double check the swe_value statistics before filling in:\", df[\"swe_value\"].describe())\n    \n    rows_less_than_zero = (df[target_column] < 0).sum()\n    print(\"Number of rows where '{}' is less than 0: {}\".format(column_name, rows_less_than_zero))\n    \n\n    # Mask the target column where the condition is met\n    df[target_column] = df[target_column].mask(\n        (df[target_column].isna()) & df[condition_column].isin(values_to_check),\n        0\n    )\n    \n    empty_count = df[target_column].isnull().values.ravel().sum()\n    \n    print(f\"The empty number of rows are {empty_count} after filling in\")\n    \n    print(\"total dataframe row number : \", len(df))\n    \n    df.to_csv(non_station_zero_csv, index=False)\n    \n    print(f\"The rows without snotel but fsca is zero or land or water or ocean are set to 0! {non_station_zero_csv}\")\n    print(\"double check the swe_value statistics after filling in:\", df[\"swe_value\"].describe())\n    \n    \ndef clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path):\n    # Read Dask DataFrame from CSV\n    dask_df = dd.read_csv(current_ready_csv_path, dtype={'station_name': 'object'})\n\n    # Remove rows where 'swe_value' is empty\n    dask_df_filtered = dask_df.dropna(subset=['swe_value'])\n\n    # Save the result to a new CSV file\n    dask_df_filtered.to_csv(cleaned_csv_path, index=False, single_file=True)\n    print(\"dask_df_filtered.shape = \", dask_df_filtered.shape)\n    print(f\"The filtered csv with no swe values is saved to {cleaned_csv_path}\")\n\ndef rename_corrected_slope(corrected_slope_path, renamed_slope_path):\n    df = pd.read_csv(corrected_slope_path, dtype={'station_name': 'object'})\n    df.drop(columns=['Slope'], inplace=True)\n\t# Rename 'column_to_rename' to 'old_column'\n    df.rename(columns={'corrected_slope': 'Slope'}, inplace=True)\n    df.to_csv(renamed_slope_path, index=False)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {renamed_slope_path}\")\n    \ndef log10_all_fields(cleaned_csv_path, logged_csv_path):\n    print(\"convert all cumulative columns into log10\")\n    # Read Dask DataFrame from CSV\n    df = pd.read_csv(cleaned_csv_path, dtype={'station_name': 'object'})\n    \n    # Get columns with \"cumulative\" in their names\n    for col in df.columns:\n        print(\"Checking \", col)\n        if \"cumulative\" in col:\n\t        # Apply log10 transformation to selected columns\n            df[col] = np.log10(df[col] + 0.1)  # Adding 1 to avoid log(0)\n            print(f\"converted {col} to log10\")\n\n    df.to_csv(logged_csv_path, index=False)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {logged_csv_path}\")\n\n    \n    \nif __name__ == \"__main__\":\n    # Define file paths for various CSV files\n    # current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n    current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv'\n    cleaned_csv_path = f\"{current_ready_csv_path}_cleaned_nodata_with_non_stations.csv\"\n    non_station_counted_csv_path = f'{cleaned_csv_path}_non_station_counted_in_training.csv'\n    target_time_series_csv_path = f'{cleaned_csv_path}_time_series_v1_with_non_stations.csv'\n    backup_time_series_csv_path = f'{cleaned_csv_path}_time_series_v1_bak_with_non_stations.csv'\n    # target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n    target_time_series_cumulative_csv_path = f'{cleaned_csv_path}_time_series_cumulative_v1_with_non_stations.csv'\n    logged_csv_path = f'{cleaned_csv_path}_time_series_cumulative_logged_v1_with_non_stations.csv'\n    slope_renamed_path = f'{cleaned_csv_path}_slope_renamed_with_non_stations.csv'\n    \n    # filling the non station rows with fsca indicating no snow\n    assign_zero_swe_value_to_all_fsca_zero_rows(current_ready_csv_path, non_station_counted_csv_path)\n    \n    # remove the empty swe_value rows first\n    #clean_non_swe_rows(non_station_counted_csv_path, cleaned_csv_path)\n  \n    # Uncomment this line to execute the 'convert_to_time_series' function\n    #convert_to_time_series(cleaned_csv_path, target_time_series_csv_path)\n\n    # Uncomment this line to execute the 'add_cumulative_columns' function\n    #add_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path, force=True)\n    \n    # convert all cumulative columns to log10\n    #log10_all_fields(target_time_series_cumulative_csv_path, logged_csv_path)\n    \n    #rename_corrected_slope(logged_csv_path, slope_renamed_path)\n    \n    df = pd.read_csv(slope_renamed_path, dtype={'station_name': 'object'})\n    print(\"the number of the total rows: \", len(df))\n    \n",
  "history_output" : "today date = 2024-05-05\n2024-05-02\ntest start date:  2024-05-02\ntest end date:  2023-10-11\n/home/chetana\nThe empty number of rows are 13750843 before filling in\ndouble check the swe_value statistics before filling in: count    1.324517e+06\nmean     5.606424e+00\nstd      9.727693e+00\nmin     -8.000000e+00\n25%      0.000000e+00\n50%      4.000000e-01\n75%      7.800000e+00\nmax      1.066000e+02\nName: swe_value, dtype: float64\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/BwdCME7PD0Ax/convert_to_time_series.py\", line 315, in <module>\n    assign_zero_swe_value_to_all_fsca_zero_rows(current_ready_csv_path, non_station_counted_csv_path)\n  File \"/home/chetana/gw-workspace/BwdCME7PD0Ax/convert_to_time_series.py\", line 240, in assign_zero_swe_value_to_all_fsca_zero_rows\n    print(\"Number of rows where '{}' is less than 0: {}\".format(column_name, rows_less_than_zero))\nNameError: name 'column_name' is not defined\n",
  "history_begin_time" : 1714889632242,
  "history_end_time" : 1714889699290,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "ACX1onZwhotN",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\nimport dask.dataframe as dd\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    if column_name == \"SWE\":\n      mask = (y > 240) | y.isnull()\n    elif column_name == \"fsca\":\n      mask = (y > 100) | y.isnull()\n    else:\n      mask = y.isnull()\n\n    # Check if all elements in the mask array are True\n    all_true = np.all(mask)\n\n    if all_true:\n      df[column_name] = 0\n    else:\n      # Perform interpolation\n      new_y = np.interp(x, x[~mask], y[~mask])\n      # Replace missing values with interpolated values\n      df[column_name] = new_y\n\n    if np.any(df[column_name].isnull()):\n      raise ValueError(\"Single group: shouldn't have null values here\")\n        \n    return df\n\ndef convert_to_time_series(input_csv, output_csv):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                         'AMSR_SWE': 'SWE',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv):\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['fsca'] > 100):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        filled_data.to_csv(filled_csv, index=False)\n        \n        print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv):\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n        result.fillna(0, inplace=True)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv, force=False):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_cumulated = [\n      \"SWE\",\n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2018-10-01')\n    end_date = pd.to_datetime('2021-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df[\"cumulative_fsca\"].describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n\n    \ndef assign_zero_swe_value_to_all_fsca_zero_rows(na_filled_csv, non_station_zero_csv):\n    \n    # Define the conditions\n    condition_column = 'fsca'\n    target_column = 'swe_value'\n    values_to_check = [0, 225, 237, 239]\n    \n    df = pd.read_csv(na_filled_csv, dtype={'station_name': 'object'})\n    empty_count = df[target_column].isnull().values.ravel().sum()\n    \n    print(f\"The empty number of rows are {empty_count} before filling in\")\n    print(\"double check the swe_value statistics before filling in:\", df[\"swe_value\"].describe())\n\n    # Mask the target column where the condition is met\n    df[target_column] = df[target_column].mask(\n        (df[target_column].isna()) & df[condition_column].isin(values_to_check),\n        0\n    )\n    \n    empty_count = df[target_column].isnull().values.ravel().sum()\n    \n    print(f\"The empty number of rows are {empty_count} after filling in\")\n    \n    print(\"total dataframe row number : \", len(df))\n    \n    df.to_csv(non_station_zero_csv, index=False)\n    \n    print(f\"The rows without snotel but fsca is zero or land or water or ocean are set to 0! {non_station_zero_csv}\")\n    print(\"double check the swe_value statistics after filling in:\", df[\"swe_value\"].describe())\n    \n    \ndef clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path):\n    # Read Dask DataFrame from CSV\n    dask_df = dd.read_csv(current_ready_csv_path, dtype={'station_name': 'object'})\n\n    # Remove rows where 'swe_value' is empty\n    dask_df_filtered = dask_df.dropna(subset=['swe_value'])\n\n    # Save the result to a new CSV file\n    dask_df_filtered.to_csv(cleaned_csv_path, index=False, single_file=True)\n    print(\"dask_df_filtered.shape = \", dask_df_filtered.shape)\n    print(f\"The filtered csv with no swe values is saved to {cleaned_csv_path}\")\n\ndef rename_corrected_slope(corrected_slope_path, renamed_slope_path):\n    df = pd.read_csv(corrected_slope_path, dtype={'station_name': 'object'})\n    df.drop(columns=['Slope'], inplace=True)\n\t# Rename 'column_to_rename' to 'old_column'\n    df.rename(columns={'corrected_slope': 'Slope'}, inplace=True)\n    df.to_csv(renamed_slope_path, index=False)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {renamed_slope_path}\")\n    \ndef log10_all_fields(cleaned_csv_path, logged_csv_path):\n    print(\"convert all cumulative columns into log10\")\n    # Read Dask DataFrame from CSV\n    df = pd.read_csv(cleaned_csv_path, dtype={'station_name': 'object'})\n    \n    # Get columns with \"cumulative\" in their names\n    for col in df.columns:\n        print(\"Checking \", col)\n        if \"cumulative\" in col:\n\t        # Apply log10 transformation to selected columns\n            df[col] = np.log10(df[col] + 0.1)  # Adding 1 to avoid log(0)\n            print(f\"converted {col} to log10\")\n\n    df.to_csv(logged_csv_path, index=False)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {logged_csv_path}\")\n\n    \n    \nif __name__ == \"__main__\":\n    # Define file paths for various CSV files\n    # current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n    current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv'\n    cleaned_csv_path = f\"{current_ready_csv_path}_cleaned_nodata_with_non_stations.csv\"\n    non_station_counted_csv_path = f'{cleaned_csv_path}_non_station_counted_in_training.csv'\n    target_time_series_csv_path = f'{cleaned_csv_path}_time_series_v1_with_non_stations.csv'\n    backup_time_series_csv_path = f'{cleaned_csv_path}_time_series_v1_bak_with_non_stations.csv'\n    # target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n    target_time_series_cumulative_csv_path = f'{cleaned_csv_path}_time_series_cumulative_v1_with_non_stations.csv'\n    logged_csv_path = f'{cleaned_csv_path}_time_series_cumulative_logged_v1_with_non_stations.csv'\n    slope_renamed_path = f'{cleaned_csv_path}_slope_renamed_with_non_stations.csv'\n    \n    # filling the non station rows with fsca indicating no snow\n    assign_zero_swe_value_to_all_fsca_zero_rows(current_ready_csv_path, non_station_counted_csv_path)\n    \n    # remove the empty swe_value rows first\n    #clean_non_swe_rows(non_station_counted_csv_path, cleaned_csv_path)\n  \n    # Uncomment this line to execute the 'convert_to_time_series' function\n    #convert_to_time_series(cleaned_csv_path, target_time_series_csv_path)\n\n    # Uncomment this line to execute the 'add_cumulative_columns' function\n    #add_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path, force=True)\n    \n    # convert all cumulative columns to log10\n    #log10_all_fields(target_time_series_cumulative_csv_path, logged_csv_path)\n    \n    #rename_corrected_slope(logged_csv_path, slope_renamed_path)\n    \n    df = pd.read_csv(slope_renamed_path, dtype={'station_name': 'object'})\n    print(\"the number of the total rows: \", len(df))\n    \n",
  "history_output" : "today date = 2024-05-05\n2024-05-02\ntest start date:  2024-05-02\ntest end date:  2023-10-11\n/home/chetana\nThe empty number of rows are 13750843 before filling in\ndouble check the swe_value statistics before filling in: count    1.324517e+06\nmean     5.606424e+00\nstd      9.727693e+00\nmin     -8.000000e+00\n25%      0.000000e+00\n50%      4.000000e-01\n75%      7.800000e+00\nmax      1.066000e+02\nName: swe_value, dtype: float64\nThe empty number of rows are 11864286 after filling in\ntotal dataframe row number :  15075360\n",
  "history_begin_time" : 1714889406899,
  "history_end_time" : 1714889548216,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "FwoWa5o9SIck",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\nimport dask.dataframe as dd\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    if column_name == \"SWE\":\n      mask = (y > 240) | y.isnull()\n    elif column_name == \"fsca\":\n      mask = (y > 100) | y.isnull()\n    else:\n      mask = y.isnull()\n\n    # Check if all elements in the mask array are True\n    all_true = np.all(mask)\n\n    if all_true:\n      df[column_name] = 0\n    else:\n      # Perform interpolation\n      new_y = np.interp(x, x[~mask], y[~mask])\n      # Replace missing values with interpolated values\n      df[column_name] = new_y\n\n    if np.any(df[column_name].isnull()):\n      raise ValueError(\"Single group: shouldn't have null values here\")\n        \n    return df\n\ndef convert_to_time_series(input_csv, output_csv):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                         'AMSR_SWE': 'SWE',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv):\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['fsca'] > 100):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        filled_data.to_csv(filled_csv, index=False)\n        \n        print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv):\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n        result.fillna(0, inplace=True)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv, force=False):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_cumulated = [\n      \"SWE\",\n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2018-10-01')\n    end_date = pd.to_datetime('2021-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df[\"cumulative_fsca\"].describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n\n    \ndef assign_zero_swe_value_to_all_fsca_zero_rows(na_filled_csv, non_station_zero_csv):\n    \n    # Define the conditions\n    condition_column = 'fsca'\n    target_column = 'swe_value'\n    values_to_check = [0, 225, 237, 239]\n    \n    df = pd.read_csv(na_filled_csv, dtype={'station_name': 'object'})\n    empty_count = df[target_column].isna().sum()\n    \n    print(f\"The empty number of rows are {empty_count} before filling in\")\n    print(\"double check the swe_value statistics before filling in:\", df[\"swe_value\"].describe())\n\n    # Mask the target column where the condition is met\n    df[target_column] = df[target_column].mask(\n        (df[target_column].isna()) & df[condition_column].isin(values_to_check),\n        0\n    )\n    \n    empty_count = df[target_column].isna().sum()\n    \n    print(f\"The empty number of rows are {empty_count} after filling in\")\n    df.to_csv(non_station_zero_csv, index=False)\n    \n    print(\"total dataframe row number : \", len(df))\n    \n    print(f\"The rows without snotel but fsca is zero or land or water or ocean are set to 0! {non_station_zero_csv}\")\n    print(\"double check the swe_value statistics after filling in:\", df[\"swe_value\"].describe())\n    \n    \ndef clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path):\n    # Read Dask DataFrame from CSV\n    dask_df = dd.read_csv(current_ready_csv_path, dtype={'station_name': 'object'})\n\n    # Remove rows where 'swe_value' is empty\n    dask_df_filtered = dask_df.dropna(subset=['swe_value'])\n\n    # Save the result to a new CSV file\n    dask_df_filtered.to_csv(cleaned_csv_path, index=False, single_file=True)\n    print(\"dask_df_filtered.shape = \", dask_df_filtered.shape)\n    print(f\"The filtered csv with no swe values is saved to {cleaned_csv_path}\")\n\ndef rename_corrected_slope(corrected_slope_path, renamed_slope_path):\n    df = pd.read_csv(corrected_slope_path, dtype={'station_name': 'object'})\n    df.drop(columns=['Slope'], inplace=True)\n\t# Rename 'column_to_rename' to 'old_column'\n    df.rename(columns={'corrected_slope': 'Slope'}, inplace=True)\n    df.to_csv(renamed_slope_path, index=False)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {renamed_slope_path}\")\n    \ndef log10_all_fields(cleaned_csv_path, logged_csv_path):\n    print(\"convert all cumulative columns into log10\")\n    # Read Dask DataFrame from CSV\n    df = pd.read_csv(cleaned_csv_path, dtype={'station_name': 'object'})\n    \n    # Get columns with \"cumulative\" in their names\n    for col in df.columns:\n        print(\"Checking \", col)\n        if \"cumulative\" in col:\n\t        # Apply log10 transformation to selected columns\n            df[col] = np.log10(df[col] + 0.1)  # Adding 1 to avoid log(0)\n            print(f\"converted {col} to log10\")\n\n    df.to_csv(logged_csv_path, index=False)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {logged_csv_path}\")\n\n    \n    \nif __name__ == \"__main__\":\n    # Define file paths for various CSV files\n    # current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n    current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv'\n    cleaned_csv_path = f\"{current_ready_csv_path}_cleaned_nodata_with_non_stations.csv\"\n    non_station_counted_csv_path = f'{cleaned_csv_path}_non_station_counted_in_training.csv'\n    target_time_series_csv_path = f'{cleaned_csv_path}_time_series_v1_with_non_stations.csv'\n    backup_time_series_csv_path = f'{cleaned_csv_path}_time_series_v1_bak_with_non_stations.csv'\n    # target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n    target_time_series_cumulative_csv_path = f'{cleaned_csv_path}_time_series_cumulative_v1_with_non_stations.csv'\n    logged_csv_path = f'{cleaned_csv_path}_time_series_cumulative_logged_v1_with_non_stations.csv'\n    slope_renamed_path = f'{cleaned_csv_path}_slope_renamed_with_non_stations.csv'\n    \n    # filling the non station rows with fsca indicating no snow\n    assign_zero_swe_value_to_all_fsca_zero_rows(current_ready_csv_path, non_station_counted_csv_path)\n    \n    # remove the empty swe_value rows first\n    #clean_non_swe_rows(non_station_counted_csv_path, cleaned_csv_path)\n  \n    # Uncomment this line to execute the 'convert_to_time_series' function\n    #convert_to_time_series(cleaned_csv_path, target_time_series_csv_path)\n\n    # Uncomment this line to execute the 'add_cumulative_columns' function\n    #add_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path, force=True)\n    \n    # convert all cumulative columns to log10\n    #log10_all_fields(target_time_series_cumulative_csv_path, logged_csv_path)\n    \n    #rename_corrected_slope(logged_csv_path, slope_renamed_path)\n    \n    df = pd.read_csv(slope_renamed_path, dtype={'station_name': 'object'})\n    print(\"the number of the total rows: \", len(df))\n    \n",
  "history_output" : "today date = 2024-05-05\n2024-05-02\ntest start date:  2024-05-02\ntest end date:  2023-10-11\n/home/chetana\nThe empty number of rows are 13750843 before filling in\ndouble check the swe_value statistics before filling in: count    1.324517e+06\nmean     5.606424e+00\nstd      9.727693e+00\nmin     -8.000000e+00\n25%      0.000000e+00\n50%      4.000000e-01\n75%      7.800000e+00\nmax      1.066000e+02\nName: swe_value, dtype: float64\nThe empty number of rows are 11864286 after filling in\n",
  "history_begin_time" : 1714889058944,
  "history_end_time" : 1714889192874,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "3XzKmT2QSgVD",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\nimport dask.dataframe as dd\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    if column_name == \"SWE\":\n      mask = (y > 240) | y.isnull()\n    elif column_name == \"fsca\":\n      mask = (y > 100) | y.isnull()\n    else:\n      mask = y.isnull()\n\n    # Check if all elements in the mask array are True\n    all_true = np.all(mask)\n\n    if all_true:\n      df[column_name] = 0\n    else:\n      # Perform interpolation\n      new_y = np.interp(x, x[~mask], y[~mask])\n      # Replace missing values with interpolated values\n      df[column_name] = new_y\n\n    if np.any(df[column_name].isnull()):\n      raise ValueError(\"Single group: shouldn't have null values here\")\n        \n    return df\n\ndef convert_to_time_series(input_csv, output_csv):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                         'AMSR_SWE': 'SWE',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv):\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['fsca'] > 100):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        filled_data.to_csv(filled_csv, index=False)\n        \n        print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv):\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n        result.fillna(0, inplace=True)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv, force=False):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_cumulated = [\n      \"SWE\",\n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2018-10-01')\n    end_date = pd.to_datetime('2021-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df[\"cumulative_fsca\"].describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n\n    \ndef assign_zero_swe_value_to_all_fsca_zero_rows(na_filled_csv, non_station_zero_csv):\n    \n    # Define the conditions\n    condition_column = 'fsca'\n    target_column = 'swe_value'\n    values_to_check = [0, 225, 237, 239]\n    \n    df = pd.read_csv(na_filled_csv, dtype={'station_name': 'object'})\n    empty_count = df[target_column].isna().sum()\n    \n    print(f\"The empty number of rows are {empty_count} before filling in\")\n    print(\"double check the swe_value statistics before filling in:\", df[\"swe_value\"].describe())\n\n    # Mask the target column where the condition is met\n    df[target_column] = df[target_column].mask(\n        (df[target_column].isna()) & df[condition_column].isin(values_to_check),\n        0\n    )\n    \n    empty_count = df[target_column].isna().sum()\n    \n    print(f\"The empty number of rows are {empty_count} after filling in\")\n    df.to_csv(non_station_zero_csv, index=False)\n    \n    print(f\"The rows without snotel but fsca is zero or land or water or ocean are set to 0! {non_station_zero_csv}\")\n    print(\"double check the swe_value statistics after filling in:\", df[\"swe_value\"].describe())\n    \n    \ndef clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path):\n    # Read Dask DataFrame from CSV\n    dask_df = dd.read_csv(current_ready_csv_path, dtype={'station_name': 'object'})\n\n    # Remove rows where 'swe_value' is empty\n    dask_df_filtered = dask_df.dropna(subset=['swe_value'])\n\n    # Save the result to a new CSV file\n    dask_df_filtered.to_csv(cleaned_csv_path, index=False, single_file=True)\n    print(\"dask_df_filtered.shape = \", dask_df_filtered.shape)\n    print(f\"The filtered csv with no swe values is saved to {cleaned_csv_path}\")\n\ndef rename_corrected_slope(corrected_slope_path, renamed_slope_path):\n    df = pd.read_csv(corrected_slope_path, dtype={'station_name': 'object'})\n    df.drop(columns=['Slope'], inplace=True)\n\t# Rename 'column_to_rename' to 'old_column'\n    df.rename(columns={'corrected_slope': 'Slope'}, inplace=True)\n    df.to_csv(renamed_slope_path, index=False)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {renamed_slope_path}\")\n    \ndef log10_all_fields(cleaned_csv_path, logged_csv_path):\n    print(\"convert all cumulative columns into log10\")\n    # Read Dask DataFrame from CSV\n    df = pd.read_csv(cleaned_csv_path, dtype={'station_name': 'object'})\n    \n    # Get columns with \"cumulative\" in their names\n    for col in df.columns:\n        print(\"Checking \", col)\n        if \"cumulative\" in col:\n\t        # Apply log10 transformation to selected columns\n            df[col] = np.log10(df[col] + 0.1)  # Adding 1 to avoid log(0)\n            print(f\"converted {col} to log10\")\n\n    df.to_csv(logged_csv_path, index=False)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {logged_csv_path}\")\n\n    \n    \nif __name__ == \"__main__\":\n    # Define file paths for various CSV files\n    # current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n    current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv'\n    cleaned_csv_path = f\"{current_ready_csv_path}_cleaned_nodata_with_non_stations.csv\"\n    non_station_counted_csv_path = f'{cleaned_csv_path}_non_station_counted_in_training.csv'\n    target_time_series_csv_path = f'{cleaned_csv_path}_time_series_v1_with_non_stations.csv'\n    backup_time_series_csv_path = f'{cleaned_csv_path}_time_series_v1_bak_with_non_stations.csv'\n    # target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n    target_time_series_cumulative_csv_path = f'{cleaned_csv_path}_time_series_cumulative_v1_with_non_stations.csv'\n    logged_csv_path = f'{cleaned_csv_path}_time_series_cumulative_logged_v1_with_non_stations.csv'\n    slope_renamed_path = f'{cleaned_csv_path}_slope_renamed_with_non_stations.csv'\n    \n    # filling the non station rows with fsca indicating no snow\n    assign_zero_swe_value_to_all_fsca_zero_rows(current_ready_csv_path, non_station_counted_csv_path)\n    \n    # remove the empty swe_value rows first\n    #clean_non_swe_rows(non_station_counted_csv_path, cleaned_csv_path)\n  \n    # Uncomment this line to execute the 'convert_to_time_series' function\n    #convert_to_time_series(cleaned_csv_path, target_time_series_csv_path)\n\n    # Uncomment this line to execute the 'add_cumulative_columns' function\n    #add_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path, force=True)\n    \n    # convert all cumulative columns to log10\n    #log10_all_fields(target_time_series_cumulative_csv_path, logged_csv_path)\n    \n    #rename_corrected_slope(logged_csv_path, slope_renamed_path)\n    \n    df = pd.read_csv(slope_renamed_path, dtype={'station_name': 'object'})\n    print(\"the number of the total rows: \", len(df))\n    \n",
  "history_output" : "today date = 2024-05-05\n2024-05-02\ntest start date:  2024-05-02\ntest end date:  2023-10-11\n/home/chetana\nThe empty number of rows are 13750843 before filling in\ndouble check the swe_value statistics before filling in: count    1.324517e+06\nmean     5.606424e+00\nstd      9.727693e+00\nmin     -8.000000e+00\n25%      0.000000e+00\n50%      4.000000e-01\n75%      7.800000e+00\nmax      1.066000e+02\nName: swe_value, dtype: float64\nThe empty number of rows are 11864286 after filling in\n",
  "history_begin_time" : 1714888739297,
  "history_end_time" : 1714889051687,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "UmBJRpAp4Sho",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\nimport dask.dataframe as dd\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    if column_name == \"SWE\":\n      mask = (y > 240) | y.isnull()\n    elif column_name == \"fsca\":\n      mask = (y > 100) | y.isnull()\n    else:\n      mask = y.isnull()\n\n    # Check if all elements in the mask array are True\n    all_true = np.all(mask)\n\n    if all_true:\n      df[column_name] = 0\n    else:\n      # Perform interpolation\n      new_y = np.interp(x, x[~mask], y[~mask])\n      # Replace missing values with interpolated values\n      df[column_name] = new_y\n\n    if np.any(df[column_name].isnull()):\n      raise ValueError(\"Single group: shouldn't have null values here\")\n        \n    return df\n\ndef convert_to_time_series(input_csv, output_csv):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                         'AMSR_SWE': 'SWE',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv):\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['fsca'] > 100):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        filled_data.to_csv(filled_csv, index=False)\n        \n        print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv):\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n        result.fillna(0, inplace=True)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv, force=False):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_cumulated = [\n      \"SWE\",\n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2018-10-01')\n    end_date = pd.to_datetime('2021-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df[\"cumulative_fsca\"].describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n\n    \ndef assign_zero_swe_value_to_all_fsca_zero_rows(na_filled_csv, non_station_zero_csv):\n    \n    # Define the conditions\n    condition_column = 'fsca'\n    target_column = 'swe_value'\n    values_to_check = [0, 225, 237, 239]\n    \n    df = pd.read_csv(na_filled_csv, dtype={'station_name': 'object'})\n    empty_count = df[target_column].isna().sum()\n    \n    print(f\"The empty number of rows are {empty_count} before filling in\")\n\n    # Mask the target column where the condition is met\n    df[target_column] = df[target_column].mask(\n        (df[target_column].isna()) & df[condition_column].isin(values_to_check),\n        0\n    )\n    \n    empty_count = df[target_column].isna().sum()\n    \n    print(f\"The empty number of rows are {empty_count} after filling in\")\n    df.to_csv(non_station_zero_csv, index=False)\n    \n    print(f\"The rows without snotel but fsca is zero or land or water or ocean are set to 0! {non_station_zero_csv}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n    \n    \ndef clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path):\n    # Read Dask DataFrame from CSV\n    dask_df = dd.read_csv(current_ready_csv_path, dtype={'station_name': 'object'})\n\n    # Remove rows where 'swe_value' is empty\n    dask_df_filtered = dask_df.dropna(subset=['swe_value'])\n\n    # Save the result to a new CSV file\n    dask_df_filtered.to_csv(cleaned_csv_path, index=False, single_file=True)\n    print(\"dask_df_filtered.shape = \", dask_df_filtered.shape)\n    print(f\"The filtered csv with no swe values is saved to {cleaned_csv_path}\")\n\ndef rename_corrected_slope(corrected_slope_path, renamed_slope_path):\n    df = pd.read_csv(corrected_slope_path, dtype={'station_name': 'object'})\n    df.drop(columns=['Slope'], inplace=True)\n\t# Rename 'column_to_rename' to 'old_column'\n    df.rename(columns={'corrected_slope': 'Slope'}, inplace=True)\n    df.to_csv(renamed_slope_path, index=False)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {renamed_slope_path}\")\n    \ndef log10_all_fields(cleaned_csv_path, logged_csv_path):\n    print(\"convert all cumulative columns into log10\")\n    # Read Dask DataFrame from CSV\n    df = pd.read_csv(cleaned_csv_path, dtype={'station_name': 'object'})\n    \n    # Get columns with \"cumulative\" in their names\n    for col in df.columns:\n        print(\"Checking \", col)\n        if \"cumulative\" in col:\n\t        # Apply log10 transformation to selected columns\n            df[col] = np.log10(df[col] + 0.1)  # Adding 1 to avoid log(0)\n            print(f\"converted {col} to log10\")\n\n    df.to_csv(logged_csv_path, index=False)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {logged_csv_path}\")\n\n    \n    \nif __name__ == \"__main__\":\n    # Define file paths for various CSV files\n    # current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n    current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv'\n    cleaned_csv_path = f\"{current_ready_csv_path}_cleaned_nodata_with_non_stations.csv\"\n    non_station_counted_csv_path = f'{cleaned_csv_path}_non_station_counted_in_training.csv'\n    target_time_series_csv_path = f'{cleaned_csv_path}_time_series_v1_with_non_stations.csv'\n    backup_time_series_csv_path = f'{cleaned_csv_path}_time_series_v1_bak_with_non_stations.csv'\n    # target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n    target_time_series_cumulative_csv_path = f'{cleaned_csv_path}_time_series_cumulative_v1_with_non_stations.csv'\n    logged_csv_path = f'{cleaned_csv_path}_time_series_cumulative_logged_v1_with_non_stations.csv'\n    slope_renamed_path = f'{cleaned_csv_path}_slope_renamed_with_non_stations.csv'\n    \n    # filling the non station rows with fsca indicating no snow\n    #assign_zero_swe_value_to_all_fsca_zero_rows(current_ready_csv_path, non_station_counted_csv_path)\n    \n    # remove the empty swe_value rows first\n    #clean_non_swe_rows(non_station_counted_csv_path, cleaned_csv_path)\n  \n    # Uncomment this line to execute the 'convert_to_time_series' function\n    #convert_to_time_series(cleaned_csv_path, target_time_series_csv_path)\n\n    # Uncomment this line to execute the 'add_cumulative_columns' function\n    #add_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path, force=True)\n    \n    # convert all cumulative columns to log10\n    #log10_all_fields(target_time_series_cumulative_csv_path, logged_csv_path)\n    \n    #rename_corrected_slope(logged_csv_path, slope_renamed_path)\n    \n    df = pd.read_csv(slope_renamed_path, dtype={'station_name': 'object'})\n    print(\"the number of the total rows: \", len(df))\n    \n",
  "history_output" : "today date = 2024-05-05\n2024-05-02\ntest start date:  2024-05-02\ntest end date:  2023-10-11\n/home/chetana\nthe number of the total rows:  992057\n",
  "history_begin_time" : 1714888571577,
  "history_end_time" : 1714888595830,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "eqqcDFUkiP1d",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\nimport dask.dataframe as dd\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    if column_name == \"SWE\":\n      mask = (y > 240) | y.isnull()\n    elif column_name == \"fsca\":\n      mask = (y > 100) | y.isnull()\n    else:\n      mask = y.isnull()\n\n    # Check if all elements in the mask array are True\n    all_true = np.all(mask)\n\n    if all_true:\n      df[column_name] = 0\n    else:\n      # Perform interpolation\n      new_y = np.interp(x, x[~mask], y[~mask])\n      # Replace missing values with interpolated values\n      df[column_name] = new_y\n\n    if np.any(df[column_name].isnull()):\n      raise ValueError(\"Single group: shouldn't have null values here\")\n        \n    return df\n\ndef convert_to_time_series(input_csv, output_csv):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                         'AMSR_SWE': 'SWE',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv):\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['fsca'] > 100):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        filled_data.to_csv(filled_csv, index=False)\n        \n        print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv):\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n        result.fillna(0, inplace=True)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv, force=False):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_cumulated = [\n      \"SWE\",\n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2018-10-01')\n    end_date = pd.to_datetime('2021-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df[\"cumulative_fsca\"].describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n\n    \ndef assign_zero_swe_value_to_all_fsca_zero_rows(na_filled_csv, non_station_zero_csv):\n    \n    # Define the conditions\n    condition_column = 'fsca'\n    target_column = 'swe_value'\n    values_to_check = [0, 225, 237, 239]\n    \n    df = pd.read_csv(na_filled_csv, dtype={'station_name': 'object'})\n    empty_count = df[target_column].isna().sum()\n    \n    print(f\"The empty number of rows are {empty_count} before filling in\")\n\n    # Mask the target column where the condition is met\n    df[target_column] = df[target_column].mask(\n        (df[target_column].isna()) & df[condition_column].isin(values_to_check),\n        0\n    )\n    \n    empty_count = df[target_column].isna().sum()\n    \n    print(f\"The empty number of rows are {empty_count} after filling in\")\n    df.to_csv(non_station_zero_csv, index=False)\n    \n    print(f\"The rows without snotel but fsca is zero or land or water or ocean are set to 0! {non_station_zero_csv}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n    \n    \ndef clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path):\n    # Read Dask DataFrame from CSV\n    dask_df = dd.read_csv(current_ready_csv_path, dtype={'station_name': 'object'})\n\n    # Remove rows where 'swe_value' is empty\n    dask_df_filtered = dask_df.dropna(subset=['swe_value'])\n\n    # Save the result to a new CSV file\n    dask_df_filtered.to_csv(cleaned_csv_path, index=False, single_file=True)\n    print(\"dask_df_filtered.shape = \", dask_df_filtered.shape)\n    print(f\"The filtered csv with no swe values is saved to {cleaned_csv_path}\")\n\ndef rename_corrected_slope(corrected_slope_path, renamed_slope_path):\n    df = pd.read_csv(corrected_slope_path, dtype={'station_name': 'object'})\n    df.drop(columns=['Slope'], inplace=True)\n\t# Rename 'column_to_rename' to 'old_column'\n    df.rename(columns={'corrected_slope': 'Slope'}, inplace=True)\n    df.to_csv(renamed_slope_path, index=False)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {renamed_slope_path}\")\n    \ndef log10_all_fields(cleaned_csv_path, logged_csv_path):\n    print(\"convert all cumulative columns into log10\")\n    # Read Dask DataFrame from CSV\n    df = pd.read_csv(cleaned_csv_path, dtype={'station_name': 'object'})\n    \n    # Get columns with \"cumulative\" in their names\n    for col in df.columns:\n        print(\"Checking \", col)\n        if \"cumulative\" in col:\n\t        # Apply log10 transformation to selected columns\n            df[col] = np.log10(df[col] + 0.1)  # Adding 1 to avoid log(0)\n            print(f\"converted {col} to log10\")\n\n    df.to_csv(logged_csv_path, index=False)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {logged_csv_path}\")\n\n    \n    \nif __name__ == \"__main__\":\n    # Define file paths for various CSV files\n    # current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n    current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv'\n    cleaned_csv_path = f\"{current_ready_csv_path}_cleaned_nodata_with_non_stations.csv\"\n    non_station_counted_csv_path = f'{cleaned_csv_path}_non_station_counted_in_training.csv'\n    target_time_series_csv_path = f'{cleaned_csv_path}_time_series_v1_with_non_stations.csv'\n    backup_time_series_csv_path = f'{cleaned_csv_path}_time_series_v1_bak_with_non_stations.csv'\n    # target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n    target_time_series_cumulative_csv_path = f'{cleaned_csv_path}_time_series_cumulative_v1_with_non_stations.csv'\n    logged_csv_path = f'{cleaned_csv_path}_time_series_cumulative_logged_v1_with_non_stations.csv'\n    slope_renamed_path = f'{cleaned_csv_path}_slope_renamed_with_non_stations.csv'\n    \n    # filling the non station rows with fsca indicating no snow\n    #assign_zero_swe_value_to_all_fsca_zero_rows(current_ready_csv_path, non_station_counted_csv_path)\n    \n    # remove the empty swe_value rows first\n    #clean_non_swe_rows(non_station_counted_csv_path, cleaned_csv_path)\n  \n    # Uncomment this line to execute the 'convert_to_time_series' function\n    #convert_to_time_series(cleaned_csv_path, target_time_series_csv_path)\n\n    # Uncomment this line to execute the 'add_cumulative_columns' function\n    #add_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path, force=True)\n    \n    # convert all cumulative columns to log10\n    #log10_all_fields(target_time_series_cumulative_csv_path, logged_csv_path)\n    \n    rename_corrected_slope(logged_csv_path, slope_renamed_path)\n    \n",
  "history_output" : "today date = 2024-05-05\n2024-05-02\ntest start date:  2024-05-02\ntest end date:  2023-10-11\n/home/chetana\ndask_df.shape =  (992057, 105)\nThe log10 file is saved to /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv_cleaned_nodata_with_non_stations.csv_slope_renamed_with_non_stations.csv\n",
  "history_begin_time" : 1714887900319,
  "history_end_time" : 1714888059733,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "YQFxVG6E7QxK",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\nimport dask.dataframe as dd\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    if column_name == \"SWE\":\n      mask = (y > 240) | y.isnull()\n    elif column_name == \"fsca\":\n      mask = (y > 100) | y.isnull()\n    else:\n      mask = y.isnull()\n\n    # Check if all elements in the mask array are True\n    all_true = np.all(mask)\n\n    if all_true:\n      df[column_name] = 0\n    else:\n      # Perform interpolation\n      new_y = np.interp(x, x[~mask], y[~mask])\n      # Replace missing values with interpolated values\n      df[column_name] = new_y\n\n    if np.any(df[column_name].isnull()):\n      raise ValueError(\"Single group: shouldn't have null values here\")\n        \n    return df\n\ndef convert_to_time_series(input_csv, output_csv):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                         'AMSR_SWE': 'SWE',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv):\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['fsca'] > 100):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        filled_data.to_csv(filled_csv, index=False)\n        \n        print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv):\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n        result.fillna(0, inplace=True)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv, force=False):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_cumulated = [\n      \"SWE\",\n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2018-10-01')\n    end_date = pd.to_datetime('2021-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df[\"cumulative_fsca\"].describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n\n    \ndef assign_zero_swe_value_to_all_fsca_zero_rows(na_filled_csv, non_station_zero_csv):\n    \n    # Define the conditions\n    condition_column = 'fsca'\n    target_column = 'swe_value'\n    values_to_check = [0, 225, 237, 239]\n    \n    df = pd.read_csv(na_filled_csv, dtype={'station_name': 'object'})\n    empty_count = df[target_column].isna().sum()\n    \n    print(f\"The empty number of rows are {empty_count} before filling in\")\n\n    # Mask the target column where the condition is met\n    df[target_column] = df[target_column].mask(\n        (df[target_column].isna()) & df[condition_column].isin(values_to_check),\n        0\n    )\n    \n    empty_count = df[target_column].isna().sum()\n    \n    print(f\"The empty number of rows are {empty_count} after filling in\")\n    df.to_csv(non_station_zero_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {non_station_zero_csv}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n    \n    \ndef clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path):\n    # Read Dask DataFrame from CSV\n    dask_df = dd.read_csv(current_ready_csv_path, dtype={'station_name': 'object'})\n\n    # Remove rows where 'swe_value' is empty\n    dask_df_filtered = dask_df.dropna(subset=['swe_value'])\n\n    # Save the result to a new CSV file\n    dask_df_filtered.to_csv(cleaned_csv_path, index=False, single_file=True)\n    print(\"dask_df_filtered.shape = \", dask_df_filtered.shape)\n    print(f\"The filtered csv with no swe values is saved to {cleaned_csv_path}\")\n\ndef rename_corrected_slope(corrected_slope_path, renamed_slope_path):\n    df = pd.read_csv(corrected_slope_path, dtype={'station_name': 'object'})\n    df.drop(columns=['Slope'], inplace=True)\n\t# Rename 'column_to_rename' to 'old_column'\n    df.rename(columns={'corrected_slope': 'Slope'}, inplace=True)\n    df.to_csv(renamed_slope_path, index=False)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {renamed_slope_path}\")\n    \ndef log10_all_fields(cleaned_csv_path, logged_csv_path):\n    print(\"convert all cumulative columns into log10\")\n    # Read Dask DataFrame from CSV\n    df = pd.read_csv(cleaned_csv_path, dtype={'station_name': 'object'})\n    \n    # Get columns with \"cumulative\" in their names\n    for col in df.columns:\n        print(\"Checking \", col)\n        if \"cumulative\" in col:\n\t        # Apply log10 transformation to selected columns\n            df[col] = np.log10(df[col] + 0.1)  # Adding 1 to avoid log(0)\n            print(f\"converted {col} to log10\")\n\n    df.to_csv(logged_csv_path, index=False)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {logged_csv_path}\")\n\n    \n    \nif __name__ == \"__main__\":\n    # Define file paths for various CSV files\n    # current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n    current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv'\n    cleaned_csv_path = f\"{current_ready_csv_path}_cleaned_nodata_with_non_stations.csv\"\n    non_station_counted_csv_path = f'{cleaned_csv_path}_non_station_counted_in_training.csv'\n    target_time_series_csv_path = f'{cleaned_csv_path}_time_series_v1_with_non_stations.csv'\n    backup_time_series_csv_path = f'{cleaned_csv_path}_time_series_v1_bak_with_non_stations.csv'\n    # target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n    target_time_series_cumulative_csv_path = f'{cleaned_csv_path}_time_series_cumulative_v1_with_non_stations.csv'\n    logged_csv_path = f'{cleaned_csv_path}_time_series_cumulative_logged_v1_with_non_stations.csv'\n    \n    # filling the non station rows with fsca indicating no snow\n    assign_zero_swe_value_to_all_fsca_zero_rows(current_ready_csv_path, non_station_counted_csv_path)\n    \n    # remove the empty swe_value rows first\n    clean_non_swe_rows(non_station_counted_csv_path, cleaned_csv_path)\n  \n    # Uncomment this line to execute the 'convert_to_time_series' function\n    convert_to_time_series(cleaned_csv_path, target_time_series_csv_path)\n\n    # Uncomment this line to execute the 'add_cumulative_columns' function\n    add_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path, force=True)\n    \n    # convert all cumulative columns to log10\n    log10_all_fields(target_time_series_cumulative_csv_path, logged_csv_path)\n    \n",
  "history_output" : "today date = 2024-05-05\n2024-05-02\ntest start date:  2024-05-02\ntest end date:  2023-10-11\n/home/chetana\nThe empty number of rows are 13750843 before filling in\nThe empty number of rows are 11864286 after filling in\nAll the cumulative variables are added successfully! /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv_cleaned_nodata_with_non_stations.csv_non_station_counted_in_training.csv\ndouble check the swe_value statistics: count    3.211074e+06\nmean     2.312561e+00\nstd      6.830066e+00\nmin     -8.000000e+00\n25%      0.000000e+00\n50%      0.000000e+00\n75%      0.000000e+00\nmax      1.066000e+02\nName: swe_value, dtype: float64\ndask_df_filtered.shape =  (Delayed('int-db716055-d5b8-44cf-859a-e4810be5beb6'), 25)\nThe filtered csv with no swe values is saved to /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv_cleaned_nodata_with_non_stations.csv\nAll current columns:  Index(['date', 'lat', 'lon', 'AMSR_SWE', 'station_name', 'swe_value',\n       'change_in_swe_inch', 'snow_depth', 'air_temperature_observed_f',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'fsca', 'corrected_slope'],\n      dtype='object')\n/home/chetana/gridmet_test_run/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv_cleaned_nodata_with_non_stations.csv_time_series_v1_with_non_stations.csv_gap_filled.csv already exists, skipping\n/home/chetana/gridmet_test_run/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv_cleaned_nodata_with_non_stations.csv_time_series_v1_with_non_stations.csv already exists, skipping\nthe column statistics from time series before cumulative:                  lat           lon           SWE     swe_value  \\\ncount  1.324517e+06  1.324517e+06  1.324517e+06  1.324517e+06   \nmean   4.184030e+01 -1.139711e+02  1.001244e+01  5.606424e+00   \nstd    3.663432e+00  5.436375e+00  1.814626e+01  9.727693e+00   \nmin    3.292342e+01 -1.242667e+02  0.000000e+00 -8.000000e+00   \n25%    3.902611e+01 -1.194900e+02  0.000000e+00  0.000000e+00   \n50%    4.132950e+01 -1.130539e+02  0.000000e+00  4.000000e-01   \n75%    4.477665e+01 -1.098881e+02  1.900000e+01  7.800000e+00   \nmax    4.897523e+01 -1.037876e+02  2.340000e+02  1.066000e+02   \n       change_in_swe_inch    snow_depth  air_temperature_observed_f  \\\ncount        1.324517e+06  1.324517e+06                1.324517e+06   \nmean         1.022108e-02  1.481973e+01                3.131024e+01   \nstd          1.689782e+00  2.429267e+01                1.786615e+01   \nmin         -6.900000e+01  0.000000e+00               -8.660000e+01   \n25%          0.000000e+00  0.000000e+00                2.050000e+01   \n50%          0.000000e+00  0.000000e+00                3.310000e+01   \n75%          0.000000e+00  2.400000e+01                4.500000e+01   \nmax          4.900000e+01  2.290000e+02                1.083000e+02   \n       air_temperature_tmmn  potential_evapotranspiration  \\\ncount          1.324517e+06                  1.324517e+06   \nmean           2.719731e+02                  4.616553e+00   \nstd            1.141414e+01                  3.170231e+00   \nmin            0.000000e+00                  0.000000e+00   \n25%            2.666000e+02                  1.970189e+00   \n50%            2.724000e+02                  4.000000e+00   \n75%            2.784000e+02                  6.800000e+00   \nmax            2.991000e+02                  2.340000e+01   \n       mean_vapor_pressure_deficit  relative_humidity_rmax  \\\ncount                 1.324517e+06            1.324517e+06   \nmean                  8.460407e-01            7.257436e+01   \nstd                   7.827359e-01            2.060211e+01   \nmin                   0.000000e+00            0.000000e+00   \n25%                   2.600000e-01            5.700000e+01   \n50%                   6.000000e-01            7.430000e+01   \n75%                   1.220000e+00            9.040000e+01   \nmax                   7.660000e+00            1.000000e+02   \n       relative_humidity_rmin  precipitation_amount  air_temperature_tmmx  \\\ncount            1.324517e+06          1.324517e+06          1.324517e+06   \nmean             3.587180e+01          1.635578e+00          2.877025e+02   \nstd              1.897436e+01          5.368784e+00          1.522641e+01   \nmin              0.000000e+00          0.000000e+00          0.000000e+00   \n25%              2.120000e+01          0.000000e+00          2.786000e+02   \n50%              3.190000e+01          0.000000e+00          2.879000e+02   \n75%              4.780000e+01          8.000000e-01          2.974000e+02   \nmax              1.000000e+02          3.194000e+02          3.254000e+02   \n         wind_speed     Elevation         Slope        Aspect     Curvature  \\\ncount  1.324517e+06  1.324517e+06  1.324517e+06  1.324517e+06  1.324517e+06   \nmean   4.142140e+00  2.317516e+03  4.556065e-01  1.689306e+02 -3.373301e+03   \nstd    1.953996e+00  6.825940e+02  4.622992e-01  9.688290e+01  4.877321e+03   \nmin    0.000000e+00  7.343417e+01  8.322144e-02  9.394166e-01 -2.198460e+04   \n25%    2.700000e+00  1.864849e+03  2.184143e-01  9.035096e+01 -6.171032e+03   \n50%    3.700000e+00  2.379157e+03  3.135529e-01  1.667492e+02 -3.109417e+03   \n75%    5.100000e+00  2.826256e+03  5.081711e-01  2.458344e+02 -9.753198e+01   \nmax    1.960000e+01  3.978188e+03  4.869782e+00  3.599130e+02  1.757020e+04   \n          Northness      Eastness          fsca  corrected_slope  \\\ncount  1.324517e+06  1.324517e+06  1.324517e+06     1.324517e+06   \nmean  -8.407707e-02 -7.096966e-02  2.368239e+01     8.997800e+01   \nstd    5.881969e-01  5.724684e-01  2.753024e+01     5.171537e-02   \nmin   -7.853982e-01 -7.853979e-01  0.000000e+00     8.879540e+01   \n25%   -6.903161e-01 -6.513691e-01  0.000000e+00     8.997808e+01   \n50%   -1.896532e-01 -1.303633e-01  0.000000e+00     8.998635e+01   \n75%    5.234262e-01  5.119705e-01  5.041968e+01     8.999060e+01   \nmax    7.853976e-01  7.853982e-01  9.600000e+01     8.999648e+01   \n              SWE_1  air_temperature_tmmn_1  potential_evapotranspiration_1  \\\ncount  1.324517e+06            1.324517e+06                    1.324517e+06   \nmean   1.000959e+01            2.717987e+02                    4.614789e+00   \nstd    1.814660e+01            1.341371e+01                    3.171814e+00   \nmin    0.000000e+00            0.000000e+00                    0.000000e+00   \n25%    0.000000e+00            2.666000e+02                    1.917713e+00   \n50%    0.000000e+00            2.724000e+02                    4.000000e+00   \n75%    1.900000e+01            2.784000e+02                    6.800000e+00   \nmax    2.340000e+02            2.991000e+02                    2.340000e+01   \n       mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\ncount                   1.324517e+06              1.324517e+06   \nmean                    8.454246e-01              7.251377e+01   \nstd                     7.827250e-01              2.068017e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.600000e-01              5.700000e+01   \n50%                     6.000000e-01              7.430000e+01   \n75%                     1.220000e+00              9.030000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_1  precipitation_amount_1  \\\ncount              1.324517e+06            1.324517e+06   \nmean               3.582998e+01            1.634912e+00   \nstd                1.898160e+01            5.368571e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                2.120000e+01            0.000000e+00   \n50%                3.180000e+01            0.000000e+00   \n75%                4.780000e+01            8.000000e-01   \nmax                1.000000e+02            3.194000e+02   \n       air_temperature_tmmx_1  wind_speed_1        fsca_1         SWE_2  \\\ncount            1.324517e+06  1.324517e+06  1.324517e+06  1.324517e+06   \nmean             2.875155e+02  4.139575e+00  2.364893e+01  1.000658e+01   \nstd              1.695451e+01  1.956475e+00  2.752498e+01  1.814698e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.786000e+02  2.700000e+00  0.000000e+00  0.000000e+00   \n50%              2.879000e+02  3.700000e+00  0.000000e+00  0.000000e+00   \n75%              2.974000e+02  5.100000e+00  5.033937e+01  1.900000e+01   \nmax              3.254000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_2  potential_evapotranspiration_2  \\\ncount            1.324517e+06                    1.324517e+06   \nmean             2.716212e+02                    4.612832e+00   \nstd              1.515221e+01                    3.173495e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.666000e+02                    1.900000e+00   \n50%              2.724000e+02                    4.000000e+00   \n75%              2.784000e+02                    6.800000e+00   \nmax              2.991000e+02                    2.340000e+01   \n       mean_vapor_pressure_deficit_2  relative_humidity_rmax_2  \\\ncount                   1.324517e+06              1.324517e+06   \nmean                    8.448106e-01              7.245176e+01   \nstd                     7.827244e-01              2.075647e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.538384e-01              5.690000e+01   \n50%                     6.000000e-01              7.420001e+01   \n75%                     1.220000e+00              9.030000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_2  precipitation_amount_2  \\\ncount              1.324517e+06            1.324517e+06   \nmean               3.579025e+01            1.633567e+00   \nstd                1.899210e+01            5.367852e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                2.120000e+01            0.000000e+00   \n50%                3.180000e+01            0.000000e+00   \n75%                4.770000e+01            8.000000e-01   \nmax                1.000000e+02            3.194000e+02   \n       air_temperature_tmmx_2  wind_speed_2        fsca_2         SWE_3  \\\ncount            1.324517e+06  1.324517e+06  1.324517e+06  1.324517e+06   \nmean             2.873305e+02  4.135003e+00  2.361544e+01  1.000248e+01   \nstd              1.851886e+01  1.956693e+00  2.751970e+01  1.814725e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.786000e+02  2.700000e+00  0.000000e+00  0.000000e+00   \n50%              2.879000e+02  3.700000e+00  0.000000e+00  0.000000e+00   \n75%              2.974000e+02  5.100000e+00  5.033061e+01  1.900000e+01   \nmax              3.254000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_3  potential_evapotranspiration_3  \\\ncount            1.324517e+06                    1.324517e+06   \nmean             2.714455e+02                    4.611071e+00   \nstd              1.670774e+01                    3.175105e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.666000e+02                    1.900000e+00   \n50%              2.724000e+02                    4.000000e+00   \n75%              2.784000e+02                    6.800000e+00   \nmax              2.991000e+02                    2.340000e+01   \n       mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\ncount                   1.324517e+06              1.324517e+06   \nmean                    8.441884e-01              7.239043e+01   \nstd                     7.827225e-01              2.083262e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.500000e-01              5.690000e+01   \n50%                     6.000000e-01              7.420001e+01   \n75%                     1.220000e+00              9.030000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_3  precipitation_amount_3  \\\ncount              1.324517e+06            1.324517e+06   \nmean               3.575153e+01            1.631224e+00   \nstd                1.900416e+01            5.365840e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                2.110000e+01            0.000000e+00   \n50%                3.180000e+01            0.000000e+00   \n75%                4.770000e+01            7.783989e-01   \nmax                1.000000e+02            3.194000e+02   \n       air_temperature_tmmx_3  wind_speed_3        fsca_3         SWE_4  \\\ncount            1.324517e+06  1.324517e+06  1.324517e+06  1.324517e+06   \nmean             2.871465e+02  4.131723e+00  2.358178e+01  9.998094e+00   \nstd              1.995819e+01  1.958764e+00  2.751429e+01  1.814771e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.786000e+02  2.700000e+00  0.000000e+00  0.000000e+00   \n50%              2.879000e+02  3.700000e+00  0.000000e+00  0.000000e+00   \n75%              2.974000e+02  5.100000e+00  5.025000e+01  1.899945e+01   \nmax              3.254000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_4  potential_evapotranspiration_4  \\\ncount            1.324517e+06                    1.324517e+06   \nmean             2.712698e+02                    4.609609e+00   \nstd              1.812858e+01                    3.176407e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.666000e+02                    1.900000e+00   \n50%              2.724000e+02                    4.000000e+00   \n75%              2.784000e+02                    6.800000e+00   \nmax              2.991000e+02                    2.340000e+01   \n       mean_vapor_pressure_deficit_4  relative_humidity_rmax_4  \\\ncount                   1.324517e+06              1.324517e+06   \nmean                    8.435731e-01              7.233076e+01   \nstd                     7.827174e-01              2.090926e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.500000e-01              5.680000e+01   \n50%                     6.000000e-01              7.410000e+01   \n75%                     1.220000e+00              9.020001e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_4  precipitation_amount_4  \\\ncount              1.324517e+06            1.324517e+06   \nmean               3.571197e+01            1.629500e+00   \nstd                1.901471e+01            5.364604e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                2.110000e+01            0.000000e+00   \n50%                3.170000e+01            0.000000e+00   \n75%                4.770000e+01            7.218323e-01   \nmax                1.000000e+02            3.194000e+02   \n       air_temperature_tmmx_4  wind_speed_4        fsca_4         SWE_5  \\\ncount            1.324517e+06  1.324517e+06  1.324517e+06  1.324517e+06   \nmean             2.869616e+02  4.128316e+00  2.354823e+01  9.994338e+00   \nstd              2.129969e+01  1.960480e+00  2.750893e+01  1.814822e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.786000e+02  2.700000e+00  0.000000e+00  0.000000e+00   \n50%              2.879000e+02  3.700000e+00  0.000000e+00  0.000000e+00   \n75%              2.974000e+02  5.100000e+00  5.018538e+01  1.898953e+01   \nmax              3.254000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_5  potential_evapotranspiration_5  \\\ncount            1.324517e+06                    1.324517e+06   \nmean             2.710938e+02                    4.608049e+00   \nstd              1.944450e+01                    3.177723e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.666000e+02                    1.900000e+00   \n50%              2.724000e+02                    4.000000e+00   \n75%              2.784000e+02                    6.800000e+00   \nmax              2.991000e+02                    2.340000e+01   \n       mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\ncount                   1.324517e+06              1.324517e+06   \nmean                    8.429629e-01              7.227144e+01   \nstd                     7.827232e-01              2.098640e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.500000e-01              5.680000e+01   \n50%                     6.000000e-01              7.410000e+01   \n75%                     1.220000e+00              9.020001e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_5  precipitation_amount_5  \\\ncount              1.324517e+06            1.324517e+06   \nmean               3.567329e+01            1.626749e+00   \nstd                1.902623e+01            5.362325e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                2.110000e+01            0.000000e+00   \n50%                3.170000e+01            0.000000e+00   \n75%                4.760000e+01            7.000000e-01   \nmax                1.000000e+02            3.194000e+02   \n       air_temperature_tmmx_5  wind_speed_5        fsca_5         SWE_6  \\\ncount            1.324517e+06  1.324517e+06  1.324517e+06  1.324517e+06   \nmean             2.867730e+02  4.123931e+00  2.351468e+01  9.992211e+00   \nstd              2.256186e+01  1.961192e+00  2.750345e+01  1.814842e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.786000e+02  2.700000e+00  0.000000e+00  0.000000e+00   \n50%              2.879000e+02  3.700000e+00  0.000000e+00  0.000000e+00   \n75%              2.974000e+02  5.100000e+00  5.004741e+01  1.897901e+01   \nmax              3.254000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_6  potential_evapotranspiration_6  \\\ncount            1.324517e+06                    1.324517e+06   \nmean             2.709169e+02                    4.606305e+00   \nstd              2.067576e+01                    3.179274e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.666000e+02                    1.900000e+00   \n50%              2.724000e+02                    4.000000e+00   \n75%              2.784000e+02                    6.800000e+00   \nmax              2.991000e+02                    2.340000e+01   \n       mean_vapor_pressure_deficit_6  relative_humidity_rmax_6  \\\ncount                   1.324517e+06              1.324517e+06   \nmean                    8.423543e-01              7.220975e+01   \nstd                     7.827252e-01              2.106097e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.500000e-01              5.670000e+01   \n50%                     5.969236e-01              7.410000e+01   \n75%                     1.220000e+00              9.020001e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_6  precipitation_amount_6  \\\ncount              1.324517e+06            1.324517e+06   \nmean               3.563377e+01            1.624346e+00   \nstd                1.903642e+01            5.359515e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                2.110000e+01            0.000000e+00   \n50%                3.170000e+01            0.000000e+00   \n75%                4.760000e+01            7.000000e-01   \nmax                1.000000e+02            3.194000e+02   \n       air_temperature_tmmx_6  wind_speed_6        fsca_6         SWE_7  \\\ncount            1.324517e+06  1.324517e+06  1.324517e+06  1.324517e+06   \nmean             2.865839e+02  4.118507e+00  2.348156e+01  9.990833e+00   \nstd              2.375558e+01  1.959744e+00  2.749823e+01  1.814860e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.786000e+02  2.700000e+00  0.000000e+00  0.000000e+00   \n50%              2.879000e+02  3.700000e+00  0.000000e+00  0.000000e+00   \n75%              2.974000e+02  5.100000e+00  5.000110e+01  1.852037e+01   \nmax              3.254000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_7  potential_evapotranspiration_7  \\\ncount            1.324517e+06                    1.324517e+06   \nmean             2.707377e+02                    4.604573e+00   \nstd              2.183707e+01                    3.180753e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.666000e+02                    1.900000e+00   \n50%              2.724000e+02                    4.000000e+00   \n75%              2.784000e+02                    6.800000e+00   \nmax              2.991000e+02                    2.340000e+01   \n       mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\ncount                   1.324517e+06              1.324517e+06   \nmean                    8.417458e-01              7.214951e+01   \nstd                     7.827199e-01              2.113641e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.500000e-01              5.670000e+01   \n50%                     5.900000e-01              7.400000e+01   \n75%                     1.210000e+00              9.010000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_7  precipitation_amount_7  \\\ncount              1.324517e+06            1.324517e+06   \nmean               3.559392e+01            1.622151e+00   \nstd                1.904595e+01            5.356950e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                2.100000e+01            0.000000e+00   \n50%                3.160000e+01            0.000000e+00   \n75%                4.750000e+01            7.000000e-01   \nmax                1.000000e+02            3.194000e+02   \n       air_temperature_tmmx_7  wind_speed_7        fsca_7  \ncount            1.324517e+06  1.324517e+06  1.324517e+06  \nmean             2.863956e+02  4.113932e+00  2.344878e+01  \nstd              2.489063e+01  1.960493e+00  2.749306e+01  \nmin              0.000000e+00  0.000000e+00  0.000000e+00  \n25%              2.786000e+02  2.700000e+00  0.000000e+00  \n50%              2.879000e+02  3.700000e+00  0.000000e+00  \n75%              2.974000e+02  5.100000e+00  5.000000e+01  \nmax              3.254000e+02  1.960000e+01  9.600000e+01  \nThis is our unique years [2018 2019 2020 2021]\nhow many rows are left in the three water years?                  lat            lon            SWE      swe_value  \\\ncount  992057.000000  992057.000000  992057.000000  992057.000000   \nmean       41.849480    -113.960989       8.586352       5.925259   \nstd         3.662955       5.434208      18.834390       9.886632   \nmin        32.923420    -124.266670       0.000000      -8.000000   \n25%        39.045540    -119.448000       0.000000       0.000000   \n50%        41.330870    -113.023170       0.000000       0.700000   \n75%        44.776650    -109.888100       0.000000       8.500000   \nmax        48.975230    -103.787580     234.000000     102.100000   \n       change_in_swe_inch     snow_depth  air_temperature_observed_f  \\\ncount       992057.000000  992057.000000               992057.000000   \nmean             0.000995      15.454266                   31.075118   \nstd              1.678028      24.347080                   17.937051   \nmin            -69.000000       0.000000                  -86.600000   \n25%              0.000000       0.000000                   19.900000   \n50%              0.000000       0.000000                   32.500000   \n75%              0.000000      26.000000                   44.800000   \nmax             49.000000     229.000000                  108.300000   \n       air_temperature_tmmn  potential_evapotranspiration  \\\ncount         992057.000000                 992057.000000   \nmean             271.764346                      4.555282   \nstd               11.438732                      3.152945   \nmin                0.000000                      0.000000   \n25%              266.200000                      1.900000   \n50%              272.100000                      3.900000   \n75%              278.400000                      6.700000   \nmax              299.100000                     22.200000   \n       mean_vapor_pressure_deficit  relative_humidity_rmax  \\\ncount                992057.000000           992057.000000   \nmean                      0.785886               71.673223   \nstd                       0.745714               21.099229   \nmin                       0.000000                0.000000   \n25%                       0.232342               55.400000   \n50%                       0.540000               73.300000   \n75%                       1.120000               90.000000   \nmax                       7.660000              100.000000   \n       relative_humidity_rmin  precipitation_amount  air_temperature_tmmx  \\\ncount           992057.000000         992057.000000         992057.000000   \nmean                35.956037              1.666668            288.047156   \nstd                 18.981847              5.475472             15.200126   \nmin                  0.000000              0.000000              0.000000   \n25%                 21.400000              0.000000            278.900000   \n50%                 31.900000              0.000000            288.208831   \n75%                 47.800000              0.800000            297.700000   \nmax                100.000000            319.400000            325.400000   \n          wind_speed      Elevation          Slope         Aspect  \\\ncount  992057.000000  992057.000000  992057.000000  992057.000000   \nmean        4.096682    2317.164533       0.455953     169.015584   \nstd         1.918502     682.695764       0.463569      96.916751   \nmin         0.000000      73.434170       0.083221       0.939417   \n25%         2.700000    1864.849100       0.218124      90.395035   \n50%         3.700000    2379.156700       0.313553     166.749200   \n75%         5.000000    2824.653300       0.508171     245.834410   \nmax        19.600000    3978.187700       4.869782     359.912960   \n           Curvature      Northness       Eastness           fsca  \\\ncount  992057.000000  992057.000000  992057.000000  992057.000000   \nmean    -3375.957871      -0.083645      -0.071694      24.742051   \nstd      4877.219818       0.588272       0.572419      27.859497   \nmin    -21984.598000      -0.785398      -0.785398       0.000000   \n25%     -6171.031700      -0.690316      -0.651369       0.000000   \n50%     -3109.417200      -0.189653      -0.141754       6.770522   \n75%      -156.005510       0.523426       0.510969      51.999448   \nmax     17570.197000       0.785398       0.785398      96.000000   \n       corrected_slope          SWE_1  air_temperature_tmmn_1  \\\ncount    992057.000000  992057.000000           992057.000000   \nmean         89.977981       8.602998              271.762542   \nstd           0.051763      18.840370               11.491546   \nmin          88.795400       0.000000                0.000000   \n25%          89.978080       0.000000              266.200000   \n50%          89.986350       0.000000              272.100000   \n75%          89.990600       0.000000              278.400000   \nmax          89.996475     234.000000              299.100000   \n       potential_evapotranspiration_1  mean_vapor_pressure_deficit_1  \\\ncount                   992057.000000                  992057.000000   \nmean                         4.553368                       0.785401   \nstd                          3.153083                       0.745393   \nmin                          0.000000                       0.000000   \n25%                          1.900000                       0.230000   \n50%                          3.900000                       0.540000   \n75%                          6.700000                       1.120000   \nmax                         22.200000                       7.660000   \n       relative_humidity_rmax_1  relative_humidity_rmin_1  \\\ncount             992057.000000             992057.000000   \nmean                  71.679255                 35.958439   \nstd                   21.100837                 18.978968   \nmin                    0.000000                  0.000000   \n25%                   55.400000                 21.400000   \n50%                   73.300000                 31.900000   \n75%                   90.000000                 47.800000   \nmax                  100.000000                100.000000   \n       precipitation_amount_1  air_temperature_tmmx_1   wind_speed_1  \\\ncount           992057.000000           992057.000000  992057.000000   \nmean                 1.666575              288.042763       4.098289   \nstd                  5.475352               15.244367       1.919126   \nmin                  0.000000                0.000000       0.000000   \n25%                  0.000000              278.900000       2.700000   \n50%                  0.000000              288.225941       3.700000   \n75%                  0.800000              297.700000       5.000000   \nmax                319.400000              325.400000      19.600000   \n              fsca_1          SWE_2  air_temperature_tmmn_2  \\\ncount  992057.000000  992057.000000           992057.000000   \nmean       24.742109       8.619625              271.762125   \nstd        27.859391      18.846325               11.544682   \nmin         0.000000       0.000000                0.000000   \n25%         0.000000       0.000000              266.200000   \n50%         6.777989       0.000000              272.100000   \n75%        51.999447       0.000000              278.400000   \nmax        96.000000     234.000000              299.100000   \n       potential_evapotranspiration_2  mean_vapor_pressure_deficit_2  \\\ncount                   992057.000000                  992057.000000   \nmean                         4.551434                       0.785010   \nstd                          3.153155                       0.745047   \nmin                          0.000000                       0.000000   \n25%                          1.900000                       0.230000   \n50%                          3.900000                       0.540000   \n75%                          6.700000                       1.120000   \nmax                         22.200000                       7.660000   \n       relative_humidity_rmax_2  relative_humidity_rmin_2  \\\ncount             992057.000000             992057.000000   \nmean                  71.699260                 35.947709   \nstd                   21.100637                 18.981750   \nmin                    0.000000                  0.000000   \n25%                   55.400000                 21.400000   \n50%                   73.400000                 31.900000   \n75%                   90.000000                 47.800000   \nmax                  100.000000                100.000000   \n       precipitation_amount_2  air_temperature_tmmx_2   wind_speed_2  \\\ncount           992057.000000           992057.000000  992057.000000   \nmean                 1.666939              288.038496       4.099481   \nstd                  5.475347               15.288293       1.919377   \nmin                  0.000000                0.000000       0.000000   \n25%                  0.000000              278.900000       2.700000   \n50%                  0.000000              288.241784       3.700000   \n75%                  0.800000              297.700000       5.000000   \nmax                319.400000              325.400000      19.600000   \n              fsca_2          SWE_3  air_temperature_tmmn_3  \\\ncount  992057.000000  992057.000000           992057.000000   \nmean       24.742566       8.636217              271.759960   \nstd        27.859367      18.852063               11.597374   \nmin         0.000000       0.000000                0.000000   \n25%         0.000000       0.000000              266.200000   \n50%         6.793934       0.000000              272.100000   \n75%        51.999447       0.000000              278.500000   \nmax        96.000000     234.000000              299.100000   \n       potential_evapotranspiration_3  mean_vapor_pressure_deficit_3  \\\ncount                   992057.000000                  992057.000000   \nmean                         4.549227                       0.784665   \nstd                          3.152940                       0.744656   \nmin                          0.000000                       0.000000   \n25%                          1.900000                       0.230000   \n50%                          3.900000                       0.540000   \n75%                          6.700000                       1.120000   \nmax                         22.200000                       7.660000   \n       relative_humidity_rmax_3  relative_humidity_rmin_3  \\\ncount             992057.000000             992057.000000   \nmean                  71.726877                 35.928098   \nstd                   21.096480                 18.981333   \nmin                    0.000000                  0.000000   \n25%                   55.400000                 21.400000   \n50%                   73.400000                 31.900000   \n75%                   90.000000                 47.800000   \nmax                  100.000000                100.000000   \n       precipitation_amount_3  air_temperature_tmmx_3   wind_speed_3  \\\ncount           992057.000000           992057.000000  992057.000000   \nmean                 1.665610              288.032969       4.098614   \nstd                  5.471312               15.332311       1.919251   \nmin                  0.000000                0.000000       0.000000   \n25%                  0.000000              278.900000       2.700000   \n50%                  0.000000              288.217740       3.700000   \n75%                  0.800000              297.700000       5.000000   \nmax                319.400000              325.400000      19.600000   \n              fsca_3          SWE_4  air_temperature_tmmn_4  \\\ncount  992057.000000  992057.000000           992057.000000   \nmean       24.742974       8.652791              271.754610   \nstd        27.859188      18.857873               11.648491   \nmin         0.000000       0.000000                0.000000   \n25%         0.000000       0.000000              266.200000   \n50%         6.798506       0.000000              272.100000   \n75%        51.999447       0.000000              278.500000   \nmax        96.000000     234.000000              299.100000   \n       potential_evapotranspiration_4  mean_vapor_pressure_deficit_4  \\\ncount                   992057.000000                  992057.000000   \nmean                         4.546716                       0.784357   \nstd                          3.152158                       0.744265   \nmin                          0.000000                       0.000000   \n25%                          1.900000                       0.230000   \n50%                          3.900000                       0.540000   \n75%                          6.700000                       1.120000   \nmax                         22.200000                       7.660000   \n       relative_humidity_rmax_4  relative_humidity_rmin_4  \\\ncount             992057.000000             992057.000000   \nmean                  71.753589                 35.916694   \nstd                   21.084985                 18.981726   \nmin                    0.000000                  0.000000   \n25%                   55.500000                 21.300001   \n50%                   73.400000                 31.900000   \n75%                   90.100000                 47.800000   \nmax                  100.000000                100.000000   \n       precipitation_amount_4  air_temperature_tmmx_4   wind_speed_4  \\\ncount           992057.000000           992057.000000  992057.000000   \nmean                 1.663960              288.027194       4.098258   \nstd                  5.461826               15.376277       1.919281   \nmin                  0.000000                0.000000       0.000000   \n25%                  0.000000              278.900000       2.700000   \n50%                  0.000000              288.200000       3.700000   \n75%                  0.800000              297.700000       5.000000   \nmax                319.400000              325.400000      19.600000   \n              fsca_4          SWE_5  air_temperature_tmmn_5  \\\ncount  992057.000000  992057.000000           992057.000000   \nmean       24.743074       8.669347              271.746252   \nstd        27.859062      18.863640               11.697998   \nmin         0.000000       0.000000                0.000000   \n25%         0.000000       0.000000              266.200000   \n50%         6.800000       0.000000              272.100000   \n75%        51.999447       0.000000              278.400000   \nmax        96.000000     234.000000              299.100000   \n       potential_evapotranspiration_5  mean_vapor_pressure_deficit_5  \\\ncount                   992057.000000                  992057.000000   \nmean                         4.544060                       0.783974   \nstd                          3.151297                       0.743899   \nmin                          0.000000                       0.000000   \n25%                          1.900000                       0.230122   \n50%                          3.900000                       0.540000   \n75%                          6.700000                       1.120000   \nmax                         22.200000                       7.660000   \n       relative_humidity_rmax_5  relative_humidity_rmin_5  \\\ncount             992057.000000             992057.000000   \nmean                  71.774818                 35.908948   \nstd                   21.075476                 18.985691   \nmin                    0.000000                  0.000000   \n25%                   55.500000                 21.300001   \n50%                   73.400000                 31.900000   \n75%                   90.100000                 47.800000   \nmax                  100.000000                100.000000   \n       precipitation_amount_5  air_temperature_tmmx_5   wind_speed_5  \\\ncount           992057.000000           992057.000000  992057.000000   \nmean                 1.662662              288.021054       4.097789   \nstd                  5.459099               15.420732       1.919373   \nmin                  0.000000                0.000000       0.000000   \n25%                  0.000000              278.900000       2.700000   \n50%                  0.000000              288.200000       3.700000   \n75%                  0.800000              297.700000       5.000000   \nmax                319.400000              325.400000      19.600000   \n              fsca_5          SWE_6  air_temperature_tmmn_6  \\\ncount  992057.000000  992057.000000           992057.000000   \nmean       24.742895       8.685834              271.736965   \nstd        27.859049      18.869370               11.747018   \nmin         0.000000       0.000000                0.000000   \n25%         0.000000       0.000000              266.200000   \n50%         6.798477       0.000000              272.100000   \n75%        51.999445       0.000000              278.400000   \nmax        96.000000     234.000000              299.100000   \n       potential_evapotranspiration_6  mean_vapor_pressure_deficit_6  \\\ncount                   992057.000000                  992057.000000   \nmean                         4.541266                       0.783487   \nstd                          3.150326                       0.743583   \nmin                          0.000000                       0.000000   \n25%                          1.900000                       0.230000   \n50%                          3.900000                       0.540000   \n75%                          6.700000                       1.120000   \nmax                         22.200000                       7.660000   \n       relative_humidity_rmax_6  relative_humidity_rmin_6  \\\ncount             992057.000000             992057.000000   \nmean                  71.784545                 35.908327   \nstd                   21.070856                 18.986703   \nmin                    0.000000                  0.000000   \n25%                   55.600002                 21.300001   \n50%                   73.500000                 31.900000   \n75%                   90.100000                 47.800000   \nmax                  100.000000                100.000000   \n       precipitation_amount_6  air_temperature_tmmx_6   wind_speed_6  \\\ncount           992057.000000           992057.000000  992057.000000   \nmean                 1.660169              288.014168       4.097375   \nstd                  5.451943               15.465043       1.919524   \nmin                  0.000000                0.000000       0.000000   \n25%                  0.000000              278.900000       2.700000   \n50%                  0.000000              288.200000       3.700000   \n75%                  0.800000              297.700000       5.000000   \nmax                319.400000              325.400000      19.600000   \n              fsca_6          SWE_7  air_temperature_tmmn_7  \\\ncount  992057.000000  992057.000000           992057.000000   \nmean       24.742995       8.702404              271.729881   \nstd        27.858933      18.875121               11.793356   \nmin         0.000000       0.000000                0.000000   \n25%         0.000000       0.000000              266.200000   \n50%         6.800000       0.000000              272.100000   \n75%        51.999445       0.000000              278.400000   \nmax        96.000000     234.000000              299.100000   \n       potential_evapotranspiration_7  mean_vapor_pressure_deficit_7  \\\ncount                   992057.000000                  992057.000000   \nmean                         4.538566                       0.782985   \nstd                          3.149558                       0.743275   \nmin                          0.000000                       0.000000   \n25%                          1.900000                       0.230000   \n50%                          3.900000                       0.540000   \n75%                          6.700000                       1.120000   \nmax                         22.200000                       7.660000   \n       relative_humidity_rmax_7  relative_humidity_rmin_7  \\\ncount             992057.000000             992057.000000   \nmean                  71.789692                 35.912960   \nstd                   21.071348                 18.986244   \nmin                    0.000000                  0.000000   \n25%                   55.600002                 21.300001   \n50%                   73.500000                 31.900000   \n75%                   90.100000                 47.800000   \nmax                  100.000000                100.000000   \n       precipitation_amount_7  air_temperature_tmmx_7   wind_speed_7  \\\ncount           992057.000000           992057.000000  992057.000000   \nmean                 1.656934              288.006863       4.098677   \nstd                  5.435474               15.508371       1.919313   \nmin                  0.000000                0.000000       0.000000   \n25%                  0.000000              278.900000       2.700000   \n50%                  0.000000              288.200000       3.700000   \n75%                  0.800000              297.700000       5.000000   \nmax                319.400000              325.400000      19.600000   \n              fsca_7  \ncount  992057.000000  \nmean       24.742926  \nstd        27.858844  \nmin         0.000000  \n25%         0.000000  \n50%         6.800000  \n75%        51.999368  \nmax        96.000000  \nhow many groups?  <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7fe3a8e49730>\nThis is the dataframe after cumulative columns are added\ncount    992057.000000\nmean       6165.414943\nstd        4857.574424\nmin           0.000000\n25%        2073.716647\n50%        5709.428379\n75%        9224.599832\nmax       34951.069586\nName: cumulative_fsca, dtype: float64\nAll the cumulative variables are added successfully! /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv_cleaned_nodata_with_non_stations.csv_time_series_cumulative_v1_with_non_stations.csv\ndouble check the swe_value statistics: count    992057.000000\nmean          5.925259\nstd           9.886632\nmin          -8.000000\n25%           0.000000\n50%           0.700000\n75%           8.500000\nmax         102.100000\nName: swe_value, dtype: float64\nconvert all cumulative columns into log10\nChecking  date\nChecking  lat\nChecking  lon\nChecking  SWE\nChecking  station_name\nChecking  swe_value\nChecking  change_in_swe_inch\nChecking  snow_depth\nChecking  air_temperature_observed_f\nChecking  air_temperature_tmmn\nChecking  potential_evapotranspiration\nChecking  mean_vapor_pressure_deficit\nChecking  relative_humidity_rmax\nChecking  relative_humidity_rmin\nChecking  precipitation_amount\nChecking  air_temperature_tmmx\nChecking  wind_speed\nChecking  Elevation\nChecking  Slope\nChecking  Aspect\nChecking  Curvature\nChecking  Northness\nChecking  Eastness\nChecking  fsca\nChecking  corrected_slope\nChecking  SWE_1\nChecking  air_temperature_tmmn_1\nChecking  potential_evapotranspiration_1\nChecking  mean_vapor_pressure_deficit_1\nChecking  relative_humidity_rmax_1\nChecking  relative_humidity_rmin_1\nChecking  precipitation_amount_1\nChecking  air_temperature_tmmx_1\nChecking  wind_speed_1\nChecking  fsca_1\nChecking  SWE_2\nChecking  air_temperature_tmmn_2\nChecking  potential_evapotranspiration_2\nChecking  mean_vapor_pressure_deficit_2\nChecking  relative_humidity_rmax_2\nChecking  relative_humidity_rmin_2\nChecking  precipitation_amount_2\nChecking  air_temperature_tmmx_2\nChecking  wind_speed_2\nChecking  fsca_2\nChecking  SWE_3\nChecking  air_temperature_tmmn_3\nChecking  potential_evapotranspiration_3\nChecking  mean_vapor_pressure_deficit_3\nChecking  relative_humidity_rmax_3\nChecking  relative_humidity_rmin_3\nChecking  precipitation_amount_3\nChecking  air_temperature_tmmx_3\nChecking  wind_speed_3\nChecking  fsca_3\nChecking  SWE_4\nChecking  air_temperature_tmmn_4\nChecking  potential_evapotranspiration_4\nChecking  mean_vapor_pressure_deficit_4\nChecking  relative_humidity_rmax_4\nChecking  relative_humidity_rmin_4\nChecking  precipitation_amount_4\nChecking  air_temperature_tmmx_4\nChecking  wind_speed_4\nChecking  fsca_4\nChecking  SWE_5\nChecking  air_temperature_tmmn_5\nChecking  potential_evapotranspiration_5\nChecking  mean_vapor_pressure_deficit_5\nChecking  relative_humidity_rmax_5\nChecking  relative_humidity_rmin_5\nChecking  precipitation_amount_5\nChecking  air_temperature_tmmx_5\nChecking  wind_speed_5\nChecking  fsca_5\nChecking  SWE_6\nChecking  air_temperature_tmmn_6\nChecking  potential_evapotranspiration_6\nChecking  mean_vapor_pressure_deficit_6\nChecking  relative_humidity_rmax_6\nChecking  relative_humidity_rmin_6\nChecking  precipitation_amount_6\nChecking  air_temperature_tmmx_6\nChecking  wind_speed_6\nChecking  fsca_6\nChecking  SWE_7\nChecking  air_temperature_tmmn_7\nChecking  potential_evapotranspiration_7\nChecking  mean_vapor_pressure_deficit_7\nChecking  relative_humidity_rmax_7\nChecking  relative_humidity_rmin_7\nChecking  precipitation_amount_7\nChecking  air_temperature_tmmx_7\nChecking  wind_speed_7\nChecking  fsca_7\nChecking  water_year\nChecking  cumulative_SWE\nconverted cumulative_SWE to log10\nChecking  cumulative_air_temperature_tmmn\nconverted cumulative_air_temperature_tmmn to log10\nChecking  cumulative_potential_evapotranspiration\nconverted cumulative_potential_evapotranspiration to log10\nChecking  cumulative_mean_vapor_pressure_deficit\nconverted cumulative_mean_vapor_pressure_deficit to log10\nChecking  cumulative_relative_humidity_rmax\nconverted cumulative_relative_humidity_rmax to log10\nChecking  cumulative_relative_humidity_rmin\nconverted cumulative_relative_humidity_rmin to log10\nChecking  cumulative_precipitation_amount\nconverted cumulative_precipitation_amount to log10\nChecking  cumulative_air_temperature_tmmx\nconverted cumulative_air_temperature_tmmx to log10\nChecking  cumulative_wind_speed\nconverted cumulative_wind_speed to log10\nChecking  cumulative_fsca\nconverted cumulative_fsca to log10\ndask_df.shape =  (992057, 106)\nThe log10 file is saved to /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv_cleaned_nodata_with_non_stations.csv_time_series_cumulative_logged_v1_with_non_stations.csv\n",
  "history_begin_time" : 1714886704569,
  "history_end_time" : 1714887874444,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "9vAptEddPapm",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\nimport dask.dataframe as dd\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    if column_name == \"SWE\":\n      mask = (y > 240) | y.isnull()\n    elif column_name == \"fsca\":\n      mask = (y > 100) | y.isnull()\n    else:\n      mask = y.isnull()\n\n    # Check if all elements in the mask array are True\n    all_true = np.all(mask)\n\n    if all_true:\n      df[column_name] = 0\n    else:\n      # Perform interpolation\n      new_y = np.interp(x, x[~mask], y[~mask])\n      # Replace missing values with interpolated values\n      df[column_name] = new_y\n\n    if np.any(df[column_name].isnull()):\n      raise ValueError(\"Single group: shouldn't have null values here\")\n        \n    return df\n\ndef convert_to_time_series(input_csv, output_csv):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                         'AMSR_SWE': 'SWE',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv):\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['fsca'] > 100):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        filled_data.to_csv(filled_csv, index=False)\n        \n        print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv):\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n        result.fillna(0, inplace=True)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv, force=False):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_cumulated = [\n      \"SWE\",\n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2018-10-01')\n    end_date = pd.to_datetime('2021-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df[\"cumulative_fsca\"].describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n\n    \ndef assign_zero_swe_value_to_all_fsca_zero_rows(na_filled_csv, non_station_zero_csv):\n    \n    # Define the conditions\n    condition_column = 'fsca'\n    target_column = 'swe_value'\n    values_to_check = [0, 225, 237, 239]\n    \n    df = pd.read_csv(na_filled_csv, dtype={'station_name': 'object'})\n    empty_count = df[target_column].isna().sum()\n    \n    print(f\"The empty number of rows are {empty_count} before filling in\")\n\n    # Mask the target column where the condition is met\n    df[target_column] = df[target_column].mask(\n        (df[condition_column] == '') & df[target_column].isin(values_to_check),\n        0\n    )\n    \n    empty_count = df[target_column].isna().sum()\n    \n    print(f\"The empty number of rows are {empty_count} after filling in\")\n    df.to_csv(non_station_zero_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {non_station_zero_csv}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n    \n    \ndef clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path):\n    # Read Dask DataFrame from CSV\n    dask_df = dd.read_csv(current_ready_csv_path, dtype={'station_name': 'object'})\n\n    # Remove rows where 'swe_value' is empty\n    dask_df_filtered = dask_df.dropna(subset=['swe_value'])\n\n    # Save the result to a new CSV file\n    dask_df_filtered.to_csv(cleaned_csv_path, index=False, single_file=True)\n    print(\"dask_df_filtered.shape = \", dask_df_filtered.shape)\n    print(f\"The filtered csv with no swe values is saved to {cleaned_csv_path}\")\n\ndef rename_corrected_slope(corrected_slope_path, renamed_slope_path):\n    df = pd.read_csv(corrected_slope_path, dtype={'station_name': 'object'})\n    df.drop(columns=['Slope'], inplace=True)\n\t# Rename 'column_to_rename' to 'old_column'\n    df.rename(columns={'corrected_slope': 'Slope'}, inplace=True)\n    df.to_csv(renamed_slope_path, index=False)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {renamed_slope_path}\")\n    \ndef log10_all_fields(cleaned_csv_path, logged_csv_path):\n    print(\"convert all cumulative columns into log10\")\n    # Read Dask DataFrame from CSV\n    df = pd.read_csv(cleaned_csv_path, dtype={'station_name': 'object'})\n    \n    # Get columns with \"cumulative\" in their names\n    for col in df.columns:\n        print(\"Checking \", col)\n        if \"cumulative\" in col:\n\t        # Apply log10 transformation to selected columns\n            df[col] = np.log10(df[col] + 0.1)  # Adding 1 to avoid log(0)\n            print(f\"converted {col} to log10\")\n\n    df.to_csv(logged_csv_path, index=False)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {logged_csv_path}\")\n\n    \n    \nif __name__ == \"__main__\":\n    # Define file paths for various CSV files\n    # current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n    current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv'\n    cleaned_csv_path = f\"{current_ready_csv_path}_cleaned_nodata_with_non_stations.csv\"\n    non_station_counted_csv_path = f'{cleaned_csv_path}_non_station_counted_in_training.csv'\n    target_time_series_csv_path = f'{cleaned_csv_path}_time_series_v1_with_non_stations.csv'\n    backup_time_series_csv_path = f'{cleaned_csv_path}_time_series_v1_bak_with_non_stations.csv'\n    # target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n    target_time_series_cumulative_csv_path = f'{cleaned_csv_path}_time_series_cumulative_v1_with_non_stations.csv'\n    logged_csv_path = f'{cleaned_csv_path}_time_series_cumulative_logged_v1_with_non_stations.csv'\n    \n    # filling the non station rows with fsca indicating no snow\n    assign_zero_swe_value_to_all_fsca_zero_rows(current_ready_csv_path, non_station_counted_csv_path)\n    \n    # remove the empty swe_value rows first\n    clean_non_swe_rows(non_station_counted_csv_path, cleaned_csv_path)\n  \n    # Uncomment this line to execute the 'convert_to_time_series' function\n    convert_to_time_series(cleaned_csv_path, target_time_series_csv_path)\n\n    # Uncomment this line to execute the 'add_cumulative_columns' function\n    add_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path, force=True)\n    \n    # convert all cumulative columns to log10\n    log10_all_fields(target_time_series_cumulative_csv_path, logged_csv_path)\n    \n",
  "history_output" : "today date = 2024-05-05\n2024-05-02\ntest start date:  2024-05-02\ntest end date:  2023-10-11\n/home/chetana\nThe empty number of rows are 13750843 before filling in\nThe empty number of rows are 13750843 after filling in\n",
  "history_begin_time" : 1714886558113,
  "history_end_time" : 1714886643802,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "LoRNr2Q364s3",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\nimport dask.dataframe as dd\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    if column_name == \"SWE\":\n      mask = (y > 240) | y.isnull()\n    elif column_name == \"fsca\":\n      mask = (y > 100) | y.isnull()\n    else:\n      mask = y.isnull()\n\n    # Check if all elements in the mask array are True\n    all_true = np.all(mask)\n\n    if all_true:\n      df[column_name] = 0\n    else:\n      # Perform interpolation\n      new_y = np.interp(x, x[~mask], y[~mask])\n      # Replace missing values with interpolated values\n      df[column_name] = new_y\n\n    if np.any(df[column_name].isnull()):\n      raise ValueError(\"Single group: shouldn't have null values here\")\n        \n    return df\n\ndef convert_to_time_series(input_csv, output_csv):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                         'AMSR_SWE': 'SWE',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv):\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['fsca'] > 100):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        filled_data.to_csv(filled_csv, index=False)\n        \n        print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv):\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n        result.fillna(0, inplace=True)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv, force=False):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_cumulated = [\n      \"SWE\",\n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2018-10-01')\n    end_date = pd.to_datetime('2021-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df[\"cumulative_fsca\"].describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n\ndef clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path):\n    # Read Dask DataFrame from CSV\n    dask_df = dd.read_csv(current_ready_csv_path, dtype={'station_name': 'object'})\n\n    # Remove rows where 'swe_value' is empty\n    dask_df_filtered = dask_df.dropna(subset=['swe_value'])\n\n    # Save the result to a new CSV file\n    dask_df_filtered.to_csv(cleaned_csv_path, index=False, single_file=True)\n    print(\"dask_df_filtered.shape = \", dask_df_filtered.shape)\n    print(f\"The filtered csv with no swe values is saved to {cleaned_csv_path}\")\n\ndef rename_corrected_slope(corrected_slope_path, renamed_slope_path):\n    df = pd.read_csv(corrected_slope_path, dtype={'station_name': 'object'})\n    df.drop(columns=['Slope'], inplace=True)\n\t# Rename 'column_to_rename' to 'old_column'\n    df.rename(columns={'corrected_slope': 'Slope'}, inplace=True)\n    df.to_csv(renamed_slope_path, index=False)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {renamed_slope_path}\")\n    \ndef log10_all_fields(cleaned_csv_path, logged_csv_path):\n    print(\"convert all cumulative columns into log10\")\n    # Read Dask DataFrame from CSV\n    df = pd.read_csv(cleaned_csv_path, dtype={'station_name': 'object'})\n    \n    # Get columns with \"cumulative\" in their names\n    for col in df.columns:\n        print(\"Checking \", col)\n        if \"cumulative\" in col:\n\t        # Apply log10 transformation to selected columns\n            df[col] = np.log10(df[col] + 0.1)  # Adding 1 to avoid log(0)\n            print(f\"converted {col} to log10\")\n\n    df.to_csv(logged_csv_path, index=False)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {logged_csv_path}\")\n    \ndef assign_zero_swe_value_to_all_fsca_zero_rows(na_filled_csv, non_station_zero_csv):\n    \n    # Define the conditions\n    condition_column = 'fsca'\n    target_column = 'swe_value'\n    values_to_check = [0, 225, 237, 239]\n    \n    df = pd.read_csv(na_filled_csv, dtype={'station_name': 'object'})\n    empty_count = df[target_column].isna().sum()\n    \n    print(f\"The empty number of rows are {empty_count}\")\n\n    # Mask the target column where the condition is met\n#     df[target_column] = df[target_column].mask(\n#         (df[condition_column] == '') & df[target_column].isin(values_to_check),\n#         0\n#     )\n    \n    \nif __name__ == \"__main__\":\n    # Define file paths for various CSV files\n    # current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n    current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv'\n    cleaned_csv_path = f\"{current_ready_csv_path}_cleaned_nodata_with_non_stations.csv\"\n    target_time_series_csv_path = f'{cleaned_csv_path}_time_series_v1_with_non_stations.csv'\n    backup_time_series_csv_path = f'{cleaned_csv_path}_time_series_v1_bak_with_non_stations.csv'\n    # target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n    target_time_series_cumulative_csv_path = f'{cleaned_csv_path}_time_series_cumulative_v1_with_non_stations.csv'\n    logged_csv_path = f'{cleaned_csv_path}_time_series_cumulative_logged_v1_with_non_stations.csv'\n    non_station_counted_csv_path = f'{logged_csv_path}_non_station_counted_in_training.csv'\n    \n    # remove the empty swe_value rows first\n    #clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path)\n  \n    # Uncomment this line to execute the 'convert_to_time_series' function\n    #convert_to_time_series(cleaned_csv_path, target_time_series_csv_path)\n\n    # Uncomment this line to execute the 'add_cumulative_columns' function\n    #add_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path, force=True)\n    \n    #log10_all_fields(target_time_series_cumulative_csv_path, logged_csv_path)\n    \n    assign_zero_swe_value_to_all_fsca_zero_rows(logged_csv_path, non_station_counted_csv_path)\n",
  "history_output" : "today date = 2024-05-05\n2024-05-02\ntest start date:  2024-05-02\ntest end date:  2023-10-11\n/home/chetana\nThe empty number of rows are 0\n",
  "history_begin_time" : 1714886345081,
  "history_end_time" : 1714886368194,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "tS9blFJ6OPHP",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\nimport dask.dataframe as dd\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    if column_name == \"SWE\":\n      mask = (y > 240) | y.isnull()\n    elif column_name == \"fsca\":\n      mask = (y > 100) | y.isnull()\n    else:\n      mask = y.isnull()\n\n    # Check if all elements in the mask array are True\n    all_true = np.all(mask)\n\n    if all_true:\n      df[column_name] = 0\n    else:\n      # Perform interpolation\n      new_y = np.interp(x, x[~mask], y[~mask])\n      # Replace missing values with interpolated values\n      df[column_name] = new_y\n\n    if np.any(df[column_name].isnull()):\n      raise ValueError(\"Single group: shouldn't have null values here\")\n        \n    return df\n\ndef convert_to_time_series(input_csv, output_csv):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                         'AMSR_SWE': 'SWE',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv):\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['fsca'] > 100):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        filled_data.to_csv(filled_csv, index=False)\n        \n        print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv):\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n        result.fillna(0, inplace=True)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv, force=False):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_cumulated = [\n      \"SWE\",\n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2018-10-01')\n    end_date = pd.to_datetime('2021-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df[\"cumulative_fsca\"].describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n\ndef clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path):\n    # Read Dask DataFrame from CSV\n    dask_df = dd.read_csv(current_ready_csv_path, dtype={'station_name': 'object'})\n\n    # Remove rows where 'swe_value' is empty\n    dask_df_filtered = dask_df.dropna(subset=['swe_value'])\n\n    # Save the result to a new CSV file\n    dask_df_filtered.to_csv(cleaned_csv_path, index=False, single_file=True)\n    print(\"dask_df_filtered.shape = \", dask_df_filtered.shape)\n    print(f\"The filtered csv with no swe values is saved to {cleaned_csv_path}\")\n\ndef log10_all_fields(cleaned_csv_path, logged_csv_path):\n    print(\"convert all cumulative columns into log10\")\n    # Read Dask DataFrame from CSV\n    df = pd.read_csv(cleaned_csv_path, dtype={'station_name': 'object'})\n    df.drop(columns=['Slope'], inplace=True)\n\n\t# Rename 'column_to_rename' to 'old_column'\n    df.rename(columns={'corrected_slope': 'Slope'}, inplace=True)\n    \n    # Get columns with \"cumulative\" in their names\n    for col in df.columns:\n        print(\"Checking \", col)\n        if \"cumulative\" in col:\n\t        # Apply log10 transformation to selected columns\n            df[col] = np.log10(df[col] + 0.1)  # Adding 1 to avoid log(0)\n            print(f\"converted {col} to log10\")\n\n    df.to_csv(logged_csv_path, index=False)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {logged_csv_path}\")\n    \n    \n    \nif __name__ == \"__main__\":\n    # Define file paths for various CSV files\n    # current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n    current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv'\n    cleaned_csv_path = f\"{current_ready_csv_path}_cleaned_nodata_with_non_stations.csv\"\n    target_time_series_csv_path = f'{cleaned_csv_path}_time_series_v1_with_non_stations.csv'\n    backup_time_series_csv_path = f'{cleaned_csv_path}_time_series_v1_bak_with_non_stations.csv'\n    # target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n    target_time_series_cumulative_csv_path = f'{cleaned_csv_path}_time_series_cumulative_v1_with_non_stations.csv'\n    logged_csv_path = f'{cleaned_csv_path}_time_series_cumulative_logged_v1_with_non_stations.csv'\n    \n    # remove the empty swe_value rows first\n    #clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path)\n  \n    # Uncomment this line to execute the 'convert_to_time_series' function\n    #convert_to_time_series(cleaned_csv_path, target_time_series_csv_path)\n\n    # Uncomment this line to execute the 'add_cumulative_columns' function\n    #add_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path, force=True)\n    \n    log10_all_fields(target_time_series_cumulative_csv_path, logged_csv_path)\n    \n    \n",
  "history_output" : "today date = 2024-05-05\n2024-05-02\ntest start date:  2024-05-02\ntest end date:  2023-10-11\n/home/chetana\nconvert all cumulative columns into log10\nChecking  date\nChecking  lat\nChecking  lon\nChecking  SWE\nChecking  station_name\nChecking  swe_value\nChecking  change_in_swe_inch\nChecking  snow_depth\nChecking  air_temperature_observed_f\nChecking  air_temperature_tmmn\nChecking  potential_evapotranspiration\nChecking  mean_vapor_pressure_deficit\nChecking  relative_humidity_rmax\nChecking  relative_humidity_rmin\nChecking  precipitation_amount\nChecking  air_temperature_tmmx\nChecking  wind_speed\nChecking  Elevation\nChecking  Aspect\nChecking  Curvature\nChecking  Northness\nChecking  Eastness\nChecking  fsca\nChecking  Slope\nChecking  SWE_1\nChecking  air_temperature_tmmn_1\nChecking  potential_evapotranspiration_1\nChecking  mean_vapor_pressure_deficit_1\nChecking  relative_humidity_rmax_1\nChecking  relative_humidity_rmin_1\nChecking  precipitation_amount_1\nChecking  air_temperature_tmmx_1\nChecking  wind_speed_1\nChecking  fsca_1\nChecking  SWE_2\nChecking  air_temperature_tmmn_2\nChecking  potential_evapotranspiration_2\nChecking  mean_vapor_pressure_deficit_2\nChecking  relative_humidity_rmax_2\nChecking  relative_humidity_rmin_2\nChecking  precipitation_amount_2\nChecking  air_temperature_tmmx_2\nChecking  wind_speed_2\nChecking  fsca_2\nChecking  SWE_3\nChecking  air_temperature_tmmn_3\nChecking  potential_evapotranspiration_3\nChecking  mean_vapor_pressure_deficit_3\nChecking  relative_humidity_rmax_3\nChecking  relative_humidity_rmin_3\nChecking  precipitation_amount_3\nChecking  air_temperature_tmmx_3\nChecking  wind_speed_3\nChecking  fsca_3\nChecking  SWE_4\nChecking  air_temperature_tmmn_4\nChecking  potential_evapotranspiration_4\nChecking  mean_vapor_pressure_deficit_4\nChecking  relative_humidity_rmax_4\nChecking  relative_humidity_rmin_4\nChecking  precipitation_amount_4\nChecking  air_temperature_tmmx_4\nChecking  wind_speed_4\nChecking  fsca_4\nChecking  SWE_5\nChecking  air_temperature_tmmn_5\nChecking  potential_evapotranspiration_5\nChecking  mean_vapor_pressure_deficit_5\nChecking  relative_humidity_rmax_5\nChecking  relative_humidity_rmin_5\nChecking  precipitation_amount_5\nChecking  air_temperature_tmmx_5\nChecking  wind_speed_5\nChecking  fsca_5\nChecking  SWE_6\nChecking  air_temperature_tmmn_6\nChecking  potential_evapotranspiration_6\nChecking  mean_vapor_pressure_deficit_6\nChecking  relative_humidity_rmax_6\nChecking  relative_humidity_rmin_6\nChecking  precipitation_amount_6\nChecking  air_temperature_tmmx_6\nChecking  wind_speed_6\nChecking  fsca_6\nChecking  SWE_7\nChecking  air_temperature_tmmn_7\nChecking  potential_evapotranspiration_7\nChecking  mean_vapor_pressure_deficit_7\nChecking  relative_humidity_rmax_7\nChecking  relative_humidity_rmin_7\nChecking  precipitation_amount_7\nChecking  air_temperature_tmmx_7\nChecking  wind_speed_7\nChecking  fsca_7\nChecking  water_year\nChecking  cumulative_SWE\nconverted cumulative_SWE to log10\nChecking  cumulative_air_temperature_tmmn\nconverted cumulative_air_temperature_tmmn to log10\nChecking  cumulative_potential_evapotranspiration\nconverted cumulative_potential_evapotranspiration to log10\nChecking  cumulative_mean_vapor_pressure_deficit\nconverted cumulative_mean_vapor_pressure_deficit to log10\nChecking  cumulative_relative_humidity_rmax\nconverted cumulative_relative_humidity_rmax to log10\nChecking  cumulative_relative_humidity_rmin\nconverted cumulative_relative_humidity_rmin to log10\nChecking  cumulative_precipitation_amount\nconverted cumulative_precipitation_amount to log10\nChecking  cumulative_air_temperature_tmmx\nconverted cumulative_air_temperature_tmmx to log10\nChecking  cumulative_wind_speed\nconverted cumulative_wind_speed to log10\nChecking  cumulative_fsca\nconverted cumulative_fsca to log10\ndask_df.shape =  (992057, 105)\nThe log10 file is saved to /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv_cleaned_nodata_with_non_stations.csv_time_series_cumulative_logged_v1_with_non_stations.csv\n",
  "history_begin_time" : 1714885155120,
  "history_end_time" : 1714885312135,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "bGooygU7l3dc",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\nimport dask.dataframe as dd\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    if column_name == \"SWE\":\n      mask = (y > 240) | y.isnull()\n    elif column_name == \"fsca\":\n      mask = (y > 100) | y.isnull()\n    else:\n      mask = y.isnull()\n\n    # Check if all elements in the mask array are True\n    all_true = np.all(mask)\n\n    if all_true:\n      df[column_name] = 0\n    else:\n      # Perform interpolation\n      new_y = np.interp(x, x[~mask], y[~mask])\n      # Replace missing values with interpolated values\n      df[column_name] = new_y\n\n    if np.any(df[column_name].isnull()):\n      raise ValueError(\"Single group: shouldn't have null values here\")\n        \n    return df\n\ndef convert_to_time_series(input_csv, output_csv):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                         'AMSR_SWE': 'SWE',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv):\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['fsca'] > 100):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        filled_data.to_csv(filled_csv, index=False)\n        \n        print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv):\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n        result.fillna(0, inplace=True)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv, force=False):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_cumulated = [\n      \"SWE\",\n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2018-10-01')\n    end_date = pd.to_datetime('2021-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df[\"cumulative_fsca\"].describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n\ndef clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path):\n    # Read Dask DataFrame from CSV\n    dask_df = dd.read_csv(current_ready_csv_path, dtype={'station_name': 'object'})\n\n    # Remove rows where 'swe_value' is empty\n    dask_df_filtered = dask_df.dropna(subset=['swe_value'])\n\n    # Save the result to a new CSV file\n    dask_df_filtered.to_csv(cleaned_csv_path, index=False, single_file=True)\n    print(\"dask_df_filtered.shape = \", dask_df_filtered.shape)\n    print(f\"The filtered csv with no swe values is saved to {cleaned_csv_path}\")\n\ndef log10_all_fields(cleaned_csv_path, logged_csv_path):\n    print(\"convert all cumulative columns into log10\")\n    # Read Dask DataFrame from CSV\n    df = pd.read_csv(current_ready_csv_path, dtype={'station_name': 'object'})\n    df.drop(columns=['Slope'], inplace=True)\n\n\t# Rename 'column_to_rename' to 'old_column'\n    df.rename(columns={'corrected_slope': 'Slope'}, inplace=True)\n    \n    # Get columns with \"cumulative\" in their names\n    for col in df.columns:\n        if \"cumulative\" in col:\n\t        # Apply log10 transformation to selected columns\n            df[col] = np.log10(df[col] + 0.1)  # Adding 1 to avoid log(0)\n            print(f\"converted {col} to log10\")\n\n    df.to_csv(logged_csv_path, index=False)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {logged_csv_path}\")\n    \n    \n    \nif __name__ == \"__main__\":\n    # Define file paths for various CSV files\n    # current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n    current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv'\n    cleaned_csv_path = f\"{current_ready_csv_path}_cleaned_nodata_with_non_stations.csv\"\n    target_time_series_csv_path = f'{cleaned_csv_path}_time_series_v1_with_non_stations.csv'\n    backup_time_series_csv_path = f'{cleaned_csv_path}_time_series_v1_bak_with_non_stations.csv'\n    # target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n    target_time_series_cumulative_csv_path = f'{cleaned_csv_path}_time_series_cumulative_v1_with_non_stations.csv'\n    logged_csv_path = f'{cleaned_csv_path}_time_series_cumulative_logged_v1_with_non_stations.csv'\n    \n    # remove the empty swe_value rows first\n    #clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path)\n  \n    # Uncomment this line to execute the 'convert_to_time_series' function\n    #convert_to_time_series(cleaned_csv_path, target_time_series_csv_path)\n\n    # Uncomment this line to execute the 'add_cumulative_columns' function\n    #add_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path, force=True)\n    \n    log10_all_fields(target_time_series_cumulative_csv_path, logged_csv_path)\n    \n    \n",
  "history_output" : "today date = 2024-05-05\n2024-05-02\ntest start date:  2024-05-02\ntest end date:  2023-10-11\n/home/chetana\nconvert all cumulative columns into log10\n",
  "history_begin_time" : 1714885103846,
  "history_end_time" : 1714885147895,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "5LBl7JdYc5tY",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\nimport dask.dataframe as dd\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    if column_name == \"SWE\":\n      mask = (y > 240) | y.isnull()\n    elif column_name == \"fsca\":\n      mask = (y > 100) | y.isnull()\n    else:\n      mask = y.isnull()\n\n    # Check if all elements in the mask array are True\n    all_true = np.all(mask)\n\n    if all_true:\n      df[column_name] = 0\n    else:\n      # Perform interpolation\n      new_y = np.interp(x, x[~mask], y[~mask])\n      # Replace missing values with interpolated values\n      df[column_name] = new_y\n\n    if np.any(df[column_name].isnull()):\n      raise ValueError(\"Single group: shouldn't have null values here\")\n        \n    return df\n\ndef convert_to_time_series(input_csv, output_csv):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                         'AMSR_SWE': 'SWE',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv):\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['fsca'] > 100):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        filled_data.to_csv(filled_csv, index=False)\n        \n        print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv):\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n        result.fillna(0, inplace=True)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv, force=False):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_cumulated = [\n      \"SWE\",\n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2018-10-01')\n    end_date = pd.to_datetime('2021-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df[\"cumulative_fsca\"].describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n\ndef clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path):\n    # Read Dask DataFrame from CSV\n    dask_df = dd.read_csv(current_ready_csv_path, dtype={'station_name': 'object'})\n\n    # Remove rows where 'swe_value' is empty\n    dask_df_filtered = dask_df.dropna(subset=['swe_value'])\n\n    # Save the result to a new CSV file\n    dask_df_filtered.to_csv(cleaned_csv_path, index=False, single_file=True)\n    print(\"dask_df_filtered.shape = \", dask_df_filtered.shape)\n    print(f\"The filtered csv with no swe values is saved to {cleaned_csv_path}\")\n\ndef log10_all_fields(cleaned_csv_path, logged_csv_path):\n    print(\"convert all cumulative columns into log10\")\n    # Read Dask DataFrame from CSV\n    df = pd.read_csv(current_ready_csv_path, dtype={'station_name': 'object'})\n    df.drop(columns=['Slope'], inplace=True)\n\n\t# Rename 'column_to_rename' to 'old_column'\n    df.rename(columns={'corrected_slope': 'Slope'}, inplace=True)\n    \n    # Get columns with \"cumulative\" in their names\n    for col in df.columns:\n        if \"cumulative\" in col:\n\t        # Apply log10 transformation to selected columns\n            df[col] = np.log10(df[col] + 0.1)  # Adding 1 to avoid log(0)\n            print(f\"converted {col} to log10\")\n\n    df.to_csv(logged_csv_path, index=False, single_file=True)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {logged_csv_path}\")\n    \n    \n    \nif __name__ == \"__main__\":\n    # Define file paths for various CSV files\n    # current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n    current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv'\n    cleaned_csv_path = f\"{current_ready_csv_path}_cleaned_nodata_with_non_stations.csv\"\n    target_time_series_csv_path = f'{cleaned_csv_path}_time_series_v1_with_non_stations.csv'\n    backup_time_series_csv_path = f'{cleaned_csv_path}_time_series_v1_bak_with_non_stations.csv'\n    # target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n    target_time_series_cumulative_csv_path = f'{cleaned_csv_path}_time_series_cumulative_v1_with_non_stations.csv'\n    logged_csv_path = f'{cleaned_csv_path}_time_series_cumulative_logged_v1_with_non_stations.csv'\n    \n    # remove the empty swe_value rows first\n    #clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path)\n  \n    # Uncomment this line to execute the 'convert_to_time_series' function\n    #convert_to_time_series(cleaned_csv_path, target_time_series_csv_path)\n\n    # Uncomment this line to execute the 'add_cumulative_columns' function\n    #add_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path, force=True)\n    \n    log10_all_fields(target_time_series_cumulative_csv_path, logged_csv_path)\n    \n    \n",
  "history_output" : "today date = 2024-05-05\n2024-05-02\ntest start date:  2024-05-02\ntest end date:  2023-10-11\n/home/chetana\nconvert all cumulative columns into log10\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/5LBl7JdYc5tY/convert_to_time_series.py\", line 278, in <module>\n    log10_all_fields(target_time_series_cumulative_csv_path, logged_csv_path)\n  File \"/home/chetana/gw-workspace/5LBl7JdYc5tY/convert_to_time_series.py\", line 252, in log10_all_fields\n    df.to_csv(logged_csv_path, index=False, single_file=True)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/util/_decorators.py\", line 211, in wrapper\n    return func(*args, **kwargs)\nTypeError: to_csv() got an unexpected keyword argument 'single_file'\n",
  "history_begin_time" : 1714885021071,
  "history_end_time" : 1714885089460,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "wx5oIRZKh5ze",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\nimport dask.dataframe as dd\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    if column_name == \"SWE\":\n      mask = (y > 240) | y.isnull()\n    elif column_name == \"fsca\":\n      mask = (y > 100) | y.isnull()\n    else:\n      mask = y.isnull()\n\n    # Check if all elements in the mask array are True\n    all_true = np.all(mask)\n\n    if all_true:\n      df[column_name] = 0\n    else:\n      # Perform interpolation\n      new_y = np.interp(x, x[~mask], y[~mask])\n      # Replace missing values with interpolated values\n      df[column_name] = new_y\n\n    if np.any(df[column_name].isnull()):\n      raise ValueError(\"Single group: shouldn't have null values here\")\n        \n    return df\n\ndef convert_to_time_series(input_csv, output_csv):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                         'AMSR_SWE': 'SWE',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv):\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['fsca'] > 100):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        filled_data.to_csv(filled_csv, index=False)\n        \n        print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv):\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n        result.fillna(0, inplace=True)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv, force=False):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_cumulated = [\n      \"SWE\",\n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2018-10-01')\n    end_date = pd.to_datetime('2021-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df[\"cumulative_fsca\"].describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n\ndef clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path):\n    # Read Dask DataFrame from CSV\n    dask_df = dd.read_csv(current_ready_csv_path, dtype={'station_name': 'object'})\n\n    # Remove rows where 'swe_value' is empty\n    dask_df_filtered = dask_df.dropna(subset=['swe_value'])\n\n    # Save the result to a new CSV file\n    dask_df_filtered.to_csv(cleaned_csv_path, index=False, single_file=True)\n    print(\"dask_df_filtered.shape = \", dask_df_filtered.shape)\n    print(f\"The filtered csv with no swe values is saved to {cleaned_csv_path}\")\n\ndef log10_all_fields(cleaned_csv_path, logged_csv_path):\n    print(\"convert all cumulative columns into log10\")\n    # Read Dask DataFrame from CSV\n    df = pd.read_csv(current_ready_csv_path, dtype={'station_name': 'object'})\n    df.drop(columns=['Slope'], inplace=True)\n\n\t# Rename 'column_to_rename' to 'old_column'\n    df.rename(columns={'corrected_slope': 'Slope'}, inplace=True)\n    \n    # Get columns with \"cumulative\" in their names\n    for col in df.columns:\n    \tif \"cumulative\" in col:\n\t\t\t# Apply log10 transformation to selected columns\n    \t\tdf[col] = np.log10(df[col] + 0.1)  # Adding 1 to avoid log(0)\n            print(f\"converted {col} to log10\")\n\n    df.to_csv(logged_csv_path, index=False, single_file=True)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {logged_csv_path}\")\n    \n    \n    \nif __name__ == \"__main__\":\n    # Define file paths for various CSV files\n    # current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n    current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv'\n    cleaned_csv_path = f\"{current_ready_csv_path}_cleaned_nodata_with_non_stations.csv\"\n    target_time_series_csv_path = f'{cleaned_csv_path}_time_series_v1_with_non_stations.csv'\n    backup_time_series_csv_path = f'{cleaned_csv_path}_time_series_v1_bak_with_non_stations.csv'\n    # target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n    target_time_series_cumulative_csv_path = f'{cleaned_csv_path}_time_series_cumulative_v1_with_non_stations.csv'\n    logged_csv_path = f'{cleaned_csv_path}_time_series_cumulative_logged_v1_with_non_stations.csv'\n    \n    # remove the empty swe_value rows first\n    #clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path)\n  \n    # Uncomment this line to execute the 'convert_to_time_series' function\n    #convert_to_time_series(cleaned_csv_path, target_time_series_csv_path)\n\n    # Uncomment this line to execute the 'add_cumulative_columns' function\n    #add_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path, force=True)\n    \n    log10_all_fields(target_time_series_cumulative_csv_path, logged_csv_path)\n    \n    \n",
  "history_output" : "  File \"/home/chetana/gw-workspace/wx5oIRZKh5ze/convert_to_time_series.py\", line 250\n    print(f\"converted {col} to log10\")\n                                      ^\nIndentationError: unindent does not match any outer indentation level\n",
  "history_begin_time" : 1714884951998,
  "history_end_time" : 1714884952077,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "PZTfIB51cae8",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\nimport dask.dataframe as dd\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    if column_name == \"SWE\":\n      mask = (y > 240) | y.isnull()\n    elif column_name == \"fsca\":\n      mask = (y > 100) | y.isnull()\n    else:\n      mask = y.isnull()\n\n    # Check if all elements in the mask array are True\n    all_true = np.all(mask)\n\n    if all_true:\n      df[column_name] = 0\n    else:\n      # Perform interpolation\n      new_y = np.interp(x, x[~mask], y[~mask])\n      # Replace missing values with interpolated values\n      df[column_name] = new_y\n\n    if np.any(df[column_name].isnull()):\n      raise ValueError(\"Single group: shouldn't have null values here\")\n        \n    return df\n\ndef convert_to_time_series(input_csv, output_csv):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                         'AMSR_SWE': 'SWE',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv):\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['fsca'] > 100):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        filled_data.to_csv(filled_csv, index=False)\n        \n        print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv):\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n        result.fillna(0, inplace=True)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv, force=False):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_cumulated = [\n      \"SWE\",\n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2018-10-01')\n    end_date = pd.to_datetime('2021-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df[\"cumulative_fsca\"].describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n\ndef clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path):\n    # Read Dask DataFrame from CSV\n    dask_df = dd.read_csv(current_ready_csv_path, dtype={'station_name': 'object'})\n\n    # Remove rows where 'swe_value' is empty\n    dask_df_filtered = dask_df.dropna(subset=['swe_value'])\n\n    # Save the result to a new CSV file\n    dask_df_filtered.to_csv(cleaned_csv_path, index=False, single_file=True)\n    print(\"dask_df_filtered.shape = \", dask_df_filtered.shape)\n    print(f\"The filtered csv with no swe values is saved to {cleaned_csv_path}\")\n\ndef log10_all_fields(cleaned_csv_path, logged_csv_path):\n    print(\"convert all cumulative columns into log10\")\n    # Read Dask DataFrame from CSV\n    df = pd.read_csv(current_ready_csv_path, dtype={'station_name': 'object'})\n    df.drop(columns=['Slope'], inplace=True)\n\n\t# Rename 'column_to_rename' to 'old_column'\n    df.rename(columns={'corrected_slope': 'Slope'}, inplace=True)\n    \n    # Define a custom function to apply log10 transformation to columns\n    def log10_transform(row):\n        # Get columns with \"cumulative\" in their names\n        cumulative_cols = [col for col in df.columns if \"cumulative\" in col]\n        # Apply log10 transformation to selected columns\n        for col in cumulative_cols:\n            row[col] = np.log10(row[col] + 0.1)  # Adding 0.1 to avoid log(0)\n        return row\n\n    # Apply the custom function to each partition of the DataFrame\n    df = df.apply(log10_transform, axis=1)\n\n    df.to_csv(logged_csv_path, index=False, single_file=True)\n    print(\"dask_df.shape = \", df.shape)\n    print(f\"The log10 file is saved to {logged_csv_path}\")\n    \n    \n    \nif __name__ == \"__main__\":\n    # Define file paths for various CSV files\n    # current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n    current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv'\n    cleaned_csv_path = f\"{current_ready_csv_path}_cleaned_nodata_with_non_stations.csv\"\n    target_time_series_csv_path = f'{cleaned_csv_path}_time_series_v1_with_non_stations.csv'\n    backup_time_series_csv_path = f'{cleaned_csv_path}_time_series_v1_bak_with_non_stations.csv'\n    # target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n    target_time_series_cumulative_csv_path = f'{cleaned_csv_path}_time_series_cumulative_v1_with_non_stations.csv'\n    logged_csv_path = f'{cleaned_csv_path}_time_series_cumulative_logged_v1_with_non_stations.csv'\n    \n    # remove the empty swe_value rows first\n    #clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path)\n  \n    # Uncomment this line to execute the 'convert_to_time_series' function\n    #convert_to_time_series(cleaned_csv_path, target_time_series_csv_path)\n\n    # Uncomment this line to execute the 'add_cumulative_columns' function\n    #add_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path, force=True)\n    \n    log10_all_fields(target_time_series_cumulative_csv_path, logged_csv_path)\n    \n    \n",
  "history_output" : "today date = 2024-05-05\n2024-05-02\ntest start date:  2024-05-02\ntest end date:  2023-10-11\n/home/chetana\nconvert all cumulative columns into log10\n",
  "history_begin_time" : 1714884733848,
  "history_end_time" : 1714884809551,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "FTslk2QBncle",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\nimport dask.dataframe as dd\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    if column_name == \"SWE\":\n      mask = (y > 240) | y.isnull()\n    elif column_name == \"fsca\":\n      mask = (y > 100) | y.isnull()\n    else:\n      mask = y.isnull()\n\n    # Check if all elements in the mask array are True\n    all_true = np.all(mask)\n\n    if all_true:\n      df[column_name] = 0\n    else:\n      # Perform interpolation\n      new_y = np.interp(x, x[~mask], y[~mask])\n      # Replace missing values with interpolated values\n      df[column_name] = new_y\n\n    if np.any(df[column_name].isnull()):\n      raise ValueError(\"Single group: shouldn't have null values here\")\n        \n    return df\n\ndef convert_to_time_series(input_csv, output_csv):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                         'AMSR_SWE': 'SWE',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv):\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['fsca'] > 100):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        filled_data.to_csv(filled_csv, index=False)\n        \n        print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv):\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n        result.fillna(0, inplace=True)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv, force=False):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_cumulated = [\n      \"SWE\",\n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2018-10-01')\n    end_date = pd.to_datetime('2021-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df[\"cumulative_fsca\"].describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n\ndef clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path):\n    # Read Dask DataFrame from CSV\n    dask_df = dd.read_csv(current_ready_csv_path, dtype={'station_name': 'object'})\n\n    # Remove rows where 'swe_value' is empty\n    dask_df_filtered = dask_df.dropna(subset=['swe_value'])\n\n    # Save the result to a new CSV file\n    dask_df_filtered.to_csv(cleaned_csv_path, index=False, single_file=True)\n    print(\"dask_df_filtered.shape = \", dask_df_filtered.shape)\n    print(f\"The filtered csv with no swe values is saved to {cleaned_csv_path}\")\n\ndef log10_all_fields(cleaned_csv_path, logged_csv_path):\n    print(\"convert all cumulative columns into log10\")\n    # Read Dask DataFrame from CSV\n    dask_df = dd.read_csv(current_ready_csv_path, dtype={'station_name': 'object'})\n    dask_df.drop(columns=['Slope'], inplace=True)\n\n\t# Rename 'column_to_rename' to 'old_column'\n    dask_df.rename(columns={'corrected_slope': 'Slope'}, inplace=True)\n    \n    # Define a custom function to apply log10 transformation to columns\n    def log10_transform(partition):\n        # Get columns with \"cumulative\" in their names\n        cumulative_cols = [col for col in partition.columns if \"cumulative\" in col]\n        # Apply log10 transformation to selected columns\n        for col in cumulative_cols:\n            partition[col] = np.log10(partition[col] + 0.1)  # Adding 0.1 to avoid log(0)\n        return partition\n\n    # Apply the custom function to each partition of the DataFrame\n    dask_df = dask_df.map_partitions(log10_transform)\n\n    # Compute the result\n    dask_df = dask_df.compute()\n    dask_df.to_csv(logged_csv_path, index=False, single_file=True)\n    print(\"dask_df.shape = \", dask_df.shape)\n    print(f\"The log10 file is saved to {logged_csv_path}\")\n    \n    \n    \nif __name__ == \"__main__\":\n    # Define file paths for various CSV files\n    # current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n    current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv'\n    cleaned_csv_path = f\"{current_ready_csv_path}_cleaned_nodata_with_non_stations.csv\"\n    target_time_series_csv_path = f'{cleaned_csv_path}_time_series_v1_with_non_stations.csv'\n    backup_time_series_csv_path = f'{cleaned_csv_path}_time_series_v1_bak_with_non_stations.csv'\n    # target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n    target_time_series_cumulative_csv_path = f'{cleaned_csv_path}_time_series_cumulative_v1_with_non_stations.csv'\n    logged_csv_path = f'{cleaned_csv_path}_time_series_cumulative_logged_v1_with_non_stations.csv'\n    \n    # remove the empty swe_value rows first\n    #clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path)\n  \n    # Uncomment this line to execute the 'convert_to_time_series' function\n    #convert_to_time_series(cleaned_csv_path, target_time_series_csv_path)\n\n    # Uncomment this line to execute the 'add_cumulative_columns' function\n    #add_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path, force=True)\n    \n    log10_all_fields(target_time_series_cumulative_csv_path, logged_csv_path)\n    \n    \n",
  "history_output" : "today date = 2024-05-05\n2024-05-02\ntest start date:  2024-05-02\ntest end date:  2023-10-11\n/home/chetana\nconvert all cumulative columns into log10\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/FTslk2QBncle/convert_to_time_series.py\", line 285, in <module>\n    log10_all_fields(target_time_series_cumulative_csv_path, logged_csv_path)\n  File \"/home/chetana/gw-workspace/FTslk2QBncle/convert_to_time_series.py\", line 240, in log10_all_fields\n    dask_df.drop(columns=['Slope'], inplace=True)\nTypeError: drop() got an unexpected keyword argument 'inplace'\n",
  "history_begin_time" : 1714884626603,
  "history_end_time" : 1714884628585,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "HLC5xkbNF3iE",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\nimport dask.dataframe as dd\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    if column_name == \"SWE\":\n      mask = (y > 240) | y.isnull()\n    elif column_name == \"fsca\":\n      mask = (y > 100) | y.isnull()\n    else:\n      mask = y.isnull()\n\n    # Check if all elements in the mask array are True\n    all_true = np.all(mask)\n\n    if all_true:\n      df[column_name] = 0\n    else:\n      # Perform interpolation\n      new_y = np.interp(x, x[~mask], y[~mask])\n      # Replace missing values with interpolated values\n      df[column_name] = new_y\n\n    if np.any(df[column_name].isnull()):\n      raise ValueError(\"Single group: shouldn't have null values here\")\n        \n    return df\n\ndef convert_to_time_series(input_csv, output_csv):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                         'AMSR_SWE': 'SWE',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv):\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['fsca'] > 100):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        filled_data.to_csv(filled_csv, index=False)\n        \n        print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv):\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n        result.fillna(0, inplace=True)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv, force=False):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_cumulated = [\n      \"SWE\",\n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2018-10-01')\n    end_date = pd.to_datetime('2021-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df[\"cumulative_fsca\"].describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n\ndef clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path):\n    # Read Dask DataFrame from CSV\n    dask_df = dd.read_csv(current_ready_csv_path, dtype={'station_name': 'object'})\n\n    # Remove rows where 'swe_value' is empty\n    dask_df_filtered = dask_df.dropna(subset=['swe_value'])\n\n    # Save the result to a new CSV file\n    dask_df_filtered.to_csv(cleaned_csv_path, index=False, single_file=True)\n    print(\"dask_df_filtered.shape = \", dask_df_filtered.shape)\n    print(f\"The filtered csv with no swe values is saved to {cleaned_csv_path}\")\n\ndef log10_all_fields(cleaned_csv_path, logged_csv_path):\n    print(\"convert all cumulative columns into log10\")\n    # Read Dask DataFrame from CSV\n    dask_df = dd.read_csv(current_ready_csv_path, dtype={'station_name': 'object'})\n    dask_df.drop(columns=['Slope'], inplace=True)\n\n\t# Rename 'column_to_rename' to 'old_column'\n    dask_df.rename(columns={'corrected_slope': 'Slope'}, inplace=True)\n    \n    # Define a custom function to apply log10 transformation to columns\n    def log10_transform(partition):\n        # Get columns with \"cumulative\" in their names\n        cumulative_cols = [col for col in partition.columns if \"cumulative\" in col]\n        # Apply log10 transformation to selected columns\n        for col in cumulative_cols:\n            partition[col] = np.log10(partition[col] + 0.1)  # Adding 0.1 to avoid log(0)\n        return partition\n\n    # Apply the custom function to each partition of the DataFrame\n    dask_df = dask_df.map_partitions(log10_transform)\n\n    # Compute the result\n    dask_df = dask_df.compute()\n    dask_df.to_csv(logged_csv_path, index=False, single_file=True)\n    print(\"dask_df.shape = \", dask_df.shape)\n    print(f\"The log10 file is saved to {logged_csv_path}\")\n    \n    \n    \nif __name__ == \"__main__\":\n    # Define file paths for various CSV files\n    # current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n    current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv'\n    cleaned_csv_path = f\"{current_ready_csv_path}_cleaned_nodata_with_non_stations.csv\"\n    target_time_series_csv_path = f'{cleaned_csv_path}_time_series_v1_with_non_stations.csv'\n    backup_time_series_csv_path = f'{cleaned_csv_path}_time_series_v1_bak_with_non_stations.csv'\n    # target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n    target_time_series_cumulative_csv_path = f'{cleaned_csv_path}_time_series_cumulative_v1_with_non_stations.csv'\n    logged_csv_path = f'{cleaned_csv_path}_time_series_cumulative_logged_v1_with_non_stations.csv'\n    \n    # remove the empty swe_value rows first\n    #clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path)\n  \n    # Uncomment this line to execute the 'convert_to_time_series' function\n    #convert_to_time_series(cleaned_csv_path, target_time_series_csv_path)\n\n    # Uncomment this line to execute the 'add_cumulative_columns' function\n    #add_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path, force=True)\n    \n    log10_all_fields(target_time_series_cumulative_csv_path, logged_csv_path, force=True)\n    \n    \n",
  "history_output" : "today date = 2024-05-05\n2024-05-02\ntest start date:  2024-05-02\ntest end date:  2023-10-11\n/home/chetana\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/HLC5xkbNF3iE/convert_to_time_series.py\", line 285, in <module>\n    log10_all_fields(target_time_series_cumulative_csv_path, logged_csv_path, force=True)\nTypeError: log10_all_fields() got an unexpected keyword argument 'force'\n",
  "history_begin_time" : 1714884578682,
  "history_end_time" : 1714884580626,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "GDl7QSGSRjW0",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\nimport dask.dataframe as dd\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    if column_name == \"SWE\":\n      mask = (y > 240) | y.isnull()\n    elif column_name == \"fsca\":\n      mask = (y > 100) | y.isnull()\n    else:\n      mask = y.isnull()\n\n    # Check if all elements in the mask array are True\n    all_true = np.all(mask)\n\n    if all_true:\n      df[column_name] = 0\n    else:\n      # Perform interpolation\n      new_y = np.interp(x, x[~mask], y[~mask])\n      # Replace missing values with interpolated values\n      df[column_name] = new_y\n\n    if np.any(df[column_name].isnull()):\n      raise ValueError(\"Single group: shouldn't have null values here\")\n        \n    return df\n\ndef convert_to_time_series(input_csv, output_csv):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                         'AMSR_SWE': 'SWE',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv):\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['fsca'] > 100):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        filled_data.to_csv(filled_csv, index=False)\n        \n        print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv):\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n        result.fillna(0, inplace=True)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv, force=False):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_cumulated = [\n      \"SWE\",\n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2018-10-01')\n    end_date = pd.to_datetime('2021-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df[\"cumulative_fsca\"].describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n\ndef clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path):\n    # Read Dask DataFrame from CSV\n    dask_df = dd.read_csv(current_ready_csv_path, dtype={'station_name': 'object'})\n\n    # Remove rows where 'swe_value' is empty\n    dask_df_filtered = dask_df.dropna(subset=['swe_value'])\n\n    # Save the result to a new CSV file\n    dask_df_filtered.to_csv(cleaned_csv_path, index=False, single_file=True)\n    print(\"dask_df_filtered.shape = \", dask_df_filtered.shape)\n    print(f\"The filtered csv with no swe values is saved to {cleaned_csv_path}\")\n\ndef log10_all_fields(cleaned_csv_path, logged_csv_path):\n    print(\"convert all cumulative columns into log10\")\n    # Read Dask DataFrame from CSV\n    dask_df = dd.read_csv(current_ready_csv_path, dtype={'station_name': 'object'})\n    dask_df.drop(columns=['Slope'], inplace=True)\n\n\t# Rename 'column_to_rename' to 'old_column'\n    dask_df.rename(columns={'corrected_slope': 'Slope'}, inplace=True)\n    \n    # Define a custom function to apply log10 transformation to columns\n    def log10_transform(partition):\n        # Get columns with \"cumulative\" in their names\n        cumulative_cols = [col for col in partition.columns if \"cumulative\" in col]\n        # Apply log10 transformation to selected columns\n        for col in cumulative_cols:\n            partition[col] = np.log10(partition[col] + 0.1)  # Adding 0.1 to avoid log(0)\n        return partition\n\n    # Apply the custom function to each partition of the DataFrame\n    dask_df = dask_df.map_partitions(log10_transform)\n\n    # Compute the result\n    dask_df = dask_df.compute()\n    dask_df.to_csv(logged_csv_path, index=False, single_file=True)\n    print(\"dask_df.shape = \", dask_df.shape)\n    print(f\"The log10 file is saved to {logged_csv_path}\")\n    \n    \n    \nif __name__ == \"__main__\":\n    # Define file paths for various CSV files\n    # current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n    current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv'\n    cleaned_csv_path = f\"{current_ready_csv_path}_cleaned_nodata_with_non_stations.csv\"\n    target_time_series_csv_path = f'{cleaned_csv_path}_time_series_v1_with_non_stations.csv'\n    backup_time_series_csv_path = f'{cleaned_csv_path}_time_series_v1_bak_with_non_stations.csv'\n    # target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n    target_time_series_cumulative_csv_path = f'{cleaned_csv_path}_time_series_cumulative_v1_with_non_stations.csv'\n    logged_csv_path = f'{cleaned_csv_path}_time_series_cumulative_logged_v1_with_non_stations.csv'\n    \n    # remove the empty swe_value rows first\n    #clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path)\n  \n    # Uncomment this line to execute the 'convert_to_time_series' function\n    #convert_to_time_series(cleaned_csv_path, target_time_series_csv_path)\n\n    # Uncomment this line to execute the 'add_cumulative_columns' function\n    #add_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path, force=True)\n    \n    log_all_fields(target_time_series_cumulative_csv_path, logged_csv_path, force=True)\n    \n    \n",
  "history_output" : "today date = 2024-05-05\n2024-05-02\ntest start date:  2024-05-02\ntest end date:  2023-10-11\n/home/chetana\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/GDl7QSGSRjW0/convert_to_time_series.py\", line 285, in <module>\n    log_all_fields(target_time_series_cumulative_csv_path, logged_csv_path, force=True)\nNameError: name 'log_all_fields' is not defined\n",
  "history_begin_time" : 1714884534747,
  "history_end_time" : 1714884536700,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "OncA1vqzE4RB",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\nimport dask.dataframe as dd\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    if column_name == \"SWE\":\n      mask = (y > 240) | y.isnull()\n    elif column_name == \"fsca\":\n      mask = (y > 100) | y.isnull()\n    else:\n      mask = y.isnull()\n\n    # Check if all elements in the mask array are True\n    all_true = np.all(mask)\n\n    if all_true:\n      df[column_name] = 0\n    else:\n      # Perform interpolation\n      new_y = np.interp(x, x[~mask], y[~mask])\n      # Replace missing values with interpolated values\n      df[column_name] = new_y\n\n    if np.any(df[column_name].isnull()):\n      raise ValueError(\"Single group: shouldn't have null values here\")\n        \n    return df\n\ndef convert_to_time_series(input_csv, output_csv):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                         'AMSR_SWE': 'SWE',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv):\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['fsca'] > 100):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        filled_data.to_csv(filled_csv, index=False)\n        \n        print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv):\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n        result.fillna(0, inplace=True)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv, force=False):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_cumulated = [\n      \"SWE\",\n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2018-10-01')\n    end_date = pd.to_datetime('2021-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df[\"cumulative_fsca\"].describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n\ndef clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path):\n    # Read Dask DataFrame from CSV\n    dask_df = dd.read_csv(current_ready_csv_path, dtype={'station_name': 'object'})\n\n    # Remove rows where 'swe_value' is empty\n    dask_df_filtered = dask_df.dropna(subset=['swe_value'])\n\n    # Save the result to a new CSV file\n    dask_df_filtered.to_csv(cleaned_csv_path, index=False, single_file=True)\n    print(\"dask_df_filtered.shape = \", dask_df_filtered.shape)\n    print(f\"The filtered csv with no swe values is saved to {cleaned_csv_path}\")\n\ndef log10_all_fields(cleaned_csv_path, logged_csv_path):\n    print(\"convert all cumulative columns into log10\")\n    # Read Dask DataFrame from CSV\n    dask_df = dd.read_csv(current_ready_csv_path, dtype={'station_name': 'object'})\n    dask_df.drop(columns=['Slope'], inplace=True)\n\n\t# Rename 'column_to_rename' to 'old_column'\n\tdask_df.rename(columns={'corrected_slope': 'Slope'}, inplace=True)\n    \n    # Define a custom function to apply log10 transformation to columns\n    def log10_transform(partition):\n        # Get columns with \"cumulative\" in their names\n        cumulative_cols = [col for col in partition.columns if \"cumulative\" in col]\n        # Apply log10 transformation to selected columns\n        for col in cumulative_cols:\n            partition[col] = np.log10(partition[col] + 0.1)  # Adding 0.1 to avoid log(0)\n        return partition\n\n    # Apply the custom function to each partition of the DataFrame\n    dask_df = dask_df.map_partitions(log10_transform)\n\n    # Compute the result\n    dask_df = dask_df.compute()\n    dask_df.to_csv(logged_csv_path, index=False, single_file=True)\n    print(\"dask_df.shape = \", dask_df.shape)\n    print(f\"The log10 file is saved to {logged_csv_path}\")\n    \n    \n    \nif __name__ == \"__main__\":\n    # Define file paths for various CSV files\n    # current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n    current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv'\n    cleaned_csv_path = f\"{current_ready_csv_path}_cleaned_nodata_with_non_stations.csv\"\n    target_time_series_csv_path = f'{cleaned_csv_path}_time_series_v1_with_non_stations.csv'\n    backup_time_series_csv_path = f'{cleaned_csv_path}_time_series_v1_bak_with_non_stations.csv'\n    # target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n    target_time_series_cumulative_csv_path = f'{cleaned_csv_path}_time_series_cumulative_v1_with_non_stations.csv'\n    logged_csv_path = f'{cleaned_csv_path}_time_series_cumulative_logged_v1_with_non_stations.csv'\n    \n    # remove the empty swe_value rows first\n    #clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path)\n  \n    # Uncomment this line to execute the 'convert_to_time_series' function\n    #convert_to_time_series(cleaned_csv_path, target_time_series_csv_path)\n\n    # Uncomment this line to execute the 'add_cumulative_columns' function\n    #add_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path, force=True)\n    \n    log_all_fields(target_time_series_cumulative_csv_path, logged_csv_path, force=True)\n    \n    \n",
  "history_output" : "  File \"/home/chetana/gw-workspace/OncA1vqzE4RB/convert_to_time_series.py\", line 243\n    dask_df.rename(columns={'corrected_slope': 'Slope'}, inplace=True)\nTabError: inconsistent use of tabs and spaces in indentation\n",
  "history_begin_time" : 1714884517001,
  "history_end_time" : 1714884517080,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "hu1v8idtqlc",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714881609903,
  "history_end_time" : 1714881609903,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "lZM5kemjubeQ",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\nimport dask.dataframe as dd\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    if column_name == \"SWE\":\n      mask = (y > 240) | y.isnull()\n    elif column_name == \"fsca\":\n      mask = (y > 100) | y.isnull()\n    else:\n      mask = y.isnull()\n\n    # Check if all elements in the mask array are True\n    all_true = np.all(mask)\n\n    if all_true:\n      df[column_name] = 0\n    else:\n      # Perform interpolation\n      new_y = np.interp(x, x[~mask], y[~mask])\n      # Replace missing values with interpolated values\n      df[column_name] = new_y\n\n    if np.any(df[column_name].isnull()):\n      raise ValueError(\"Single group: shouldn't have null values here\")\n        \n    return df\n\ndef convert_to_time_series(input_csv, output_csv):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                         'AMSR_SWE': 'SWE',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv):\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['fsca'] > 100):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        filled_data.to_csv(filled_csv, index=False)\n        \n        print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv):\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n        result.fillna(0, inplace=True)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv, force=False):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_cumulated = [\n      \"SWE\",\n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv, dtype={'station_name': 'object'})\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2018-10-01')\n    end_date = pd.to_datetime('2021-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df[\"cumulative_fsca\"].describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n\ndef clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path):\n    # Read Dask DataFrame from CSV\n    dask_df = dd.read_csv(current_ready_csv_path, dtype={'station_name': 'object'})\n\n    # Remove rows where 'swe_value' is empty\n    dask_df_filtered = dask_df.dropna(subset=['swe_value'])\n\n    # Save the result to a new CSV file\n    dask_df_filtered.to_csv(cleaned_csv_path, index=False, single_file=True)\n    print(\"dask_df_filtered.shape = \", dask_df_filtered.shape)\n    print(f\"The filtered csv with no swe values is saved to {cleaned_csv_path}\")\n\nif __name__ == \"__main__\":\n    # Define file paths for various CSV files\n    # current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n    current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv'\n    cleaned_csv_path = f\"{current_ready_csv_path}_cleaned_nodata_with_non_stations.csv\"\n    target_time_series_csv_path = f'{cleaned_csv_path}_time_series_v1_with_non_stations.csv'\n    backup_time_series_csv_path = f'{cleaned_csv_path}_time_series_v1_bak_with_non_stations.csv'\n    # target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n    target_time_series_cumulative_csv_path = f'{cleaned_csv_path}_time_series_cumulative_v1_with_non_stations.csv'\n    \n    \n    # remove the empty swe_value rows first\n    clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path)\n  \n    # Uncomment this line to execute the 'convert_to_time_series' function\n    convert_to_time_series(cleaned_csv_path, target_time_series_csv_path)\n\n    # Uncomment this line to execute the 'add_cumulative_columns' function\n    add_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path, force=True)\n",
  "history_output" : "today date = 2024-05-05\n2024-05-02\ntest start date:  2024-05-02\ntest end date:  2023-10-11\n/home/chetana\ndask_df_filtered.shape =  (Delayed('int-ac3fb422-5503-43d0-8477-450f1f9e7c4d'), 25)\nThe filtered csv with no swe values is saved to /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv_cleaned_nodata_with_non_stations.csv\nAll current columns:  Index(['date', 'lat', 'lon', 'AMSR_SWE', 'station_name', 'swe_value',\n       'change_in_swe_inch', 'snow_depth', 'air_temperature_observed_f',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'fsca', 'corrected_slope'],\n      dtype='object')\nStart to fill in the missing values\nNew filled values csv is saved to /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv_cleaned_nodata_with_non_stations.csv_time_series_v1_with_non_stations.csv_gap_filled.csv\nStart to create the training csv with previous 7 days columns\nNew data is saved to /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv_cleaned_nodata_with_non_stations.csv_time_series_v1_with_non_stations.csv\nFile is backed up to /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv_cleaned_nodata_with_non_stations.csv_time_series_v1_bak_with_non_stations.csv\nthe column statistics from time series before cumulative:                  lat           lon           SWE     swe_value  \\\ncount  1.324517e+06  1.324517e+06  1.324517e+06  1.324517e+06   \nmean   4.184030e+01 -1.139711e+02  1.001244e+01  5.606424e+00   \nstd    3.663432e+00  5.436375e+00  1.814626e+01  9.727693e+00   \nmin    3.292342e+01 -1.242667e+02  0.000000e+00 -8.000000e+00   \n25%    3.902611e+01 -1.194900e+02  0.000000e+00  0.000000e+00   \n50%    4.132950e+01 -1.130539e+02  0.000000e+00  4.000000e-01   \n75%    4.477665e+01 -1.098881e+02  1.900000e+01  7.800000e+00   \nmax    4.897523e+01 -1.037876e+02  2.340000e+02  1.066000e+02   \n       change_in_swe_inch    snow_depth  air_temperature_observed_f  \\\ncount        1.324517e+06  1.324517e+06                1.324517e+06   \nmean         1.022108e-02  1.481973e+01                3.131024e+01   \nstd          1.689782e+00  2.429267e+01                1.786615e+01   \nmin         -6.900000e+01  0.000000e+00               -8.660000e+01   \n25%          0.000000e+00  0.000000e+00                2.050000e+01   \n50%          0.000000e+00  0.000000e+00                3.310000e+01   \n75%          0.000000e+00  2.400000e+01                4.500000e+01   \nmax          4.900000e+01  2.290000e+02                1.083000e+02   \n       air_temperature_tmmn  potential_evapotranspiration  \\\ncount          1.324517e+06                  1.324517e+06   \nmean           2.719731e+02                  4.616553e+00   \nstd            1.141414e+01                  3.170231e+00   \nmin            0.000000e+00                  0.000000e+00   \n25%            2.666000e+02                  1.970189e+00   \n50%            2.724000e+02                  4.000000e+00   \n75%            2.784000e+02                  6.800000e+00   \nmax            2.991000e+02                  2.340000e+01   \n       mean_vapor_pressure_deficit  relative_humidity_rmax  \\\ncount                 1.324517e+06            1.324517e+06   \nmean                  8.460407e-01            7.257436e+01   \nstd                   7.827359e-01            2.060211e+01   \nmin                   0.000000e+00            0.000000e+00   \n25%                   2.600000e-01            5.700000e+01   \n50%                   6.000000e-01            7.430000e+01   \n75%                   1.220000e+00            9.040000e+01   \nmax                   7.660000e+00            1.000000e+02   \n       relative_humidity_rmin  precipitation_amount  air_temperature_tmmx  \\\ncount            1.324517e+06          1.324517e+06          1.324517e+06   \nmean             3.587180e+01          1.635578e+00          2.877025e+02   \nstd              1.897436e+01          5.368784e+00          1.522641e+01   \nmin              0.000000e+00          0.000000e+00          0.000000e+00   \n25%              2.120000e+01          0.000000e+00          2.786000e+02   \n50%              3.190000e+01          0.000000e+00          2.879000e+02   \n75%              4.780000e+01          8.000000e-01          2.974000e+02   \nmax              1.000000e+02          3.194000e+02          3.254000e+02   \n         wind_speed     Elevation         Slope        Aspect     Curvature  \\\ncount  1.324517e+06  1.324517e+06  1.324517e+06  1.324517e+06  1.324517e+06   \nmean   4.142140e+00  2.317516e+03  4.556065e-01  1.689306e+02 -3.373301e+03   \nstd    1.953996e+00  6.825940e+02  4.622992e-01  9.688290e+01  4.877321e+03   \nmin    0.000000e+00  7.343417e+01  8.322144e-02  9.394166e-01 -2.198460e+04   \n25%    2.700000e+00  1.864849e+03  2.184143e-01  9.035096e+01 -6.171032e+03   \n50%    3.700000e+00  2.379157e+03  3.135529e-01  1.667492e+02 -3.109417e+03   \n75%    5.100000e+00  2.826256e+03  5.081711e-01  2.458344e+02 -9.753198e+01   \nmax    1.960000e+01  3.978188e+03  4.869782e+00  3.599130e+02  1.757020e+04   \n          Northness      Eastness          fsca  corrected_slope  \\\ncount  1.324517e+06  1.324517e+06  1.324517e+06     1.324517e+06   \nmean  -8.407707e-02 -7.096966e-02  2.368239e+01     8.997800e+01   \nstd    5.881969e-01  5.724684e-01  2.753024e+01     5.171537e-02   \nmin   -7.853982e-01 -7.853979e-01  0.000000e+00     8.879540e+01   \n25%   -6.903161e-01 -6.513691e-01  0.000000e+00     8.997808e+01   \n50%   -1.896532e-01 -1.303633e-01  0.000000e+00     8.998635e+01   \n75%    5.234262e-01  5.119705e-01  5.041968e+01     8.999060e+01   \nmax    7.853976e-01  7.853982e-01  9.600000e+01     8.999648e+01   \n              SWE_1  air_temperature_tmmn_1  potential_evapotranspiration_1  \\\ncount  1.324517e+06            1.324517e+06                    1.324517e+06   \nmean   1.000959e+01            2.717987e+02                    4.614789e+00   \nstd    1.814660e+01            1.341371e+01                    3.171814e+00   \nmin    0.000000e+00            0.000000e+00                    0.000000e+00   \n25%    0.000000e+00            2.666000e+02                    1.917713e+00   \n50%    0.000000e+00            2.724000e+02                    4.000000e+00   \n75%    1.900000e+01            2.784000e+02                    6.800000e+00   \nmax    2.340000e+02            2.991000e+02                    2.340000e+01   \n       mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\ncount                   1.324517e+06              1.324517e+06   \nmean                    8.454246e-01              7.251377e+01   \nstd                     7.827250e-01              2.068017e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.600000e-01              5.700000e+01   \n50%                     6.000000e-01              7.430000e+01   \n75%                     1.220000e+00              9.030000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_1  precipitation_amount_1  \\\ncount              1.324517e+06            1.324517e+06   \nmean               3.582998e+01            1.634912e+00   \nstd                1.898160e+01            5.368571e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                2.120000e+01            0.000000e+00   \n50%                3.180000e+01            0.000000e+00   \n75%                4.780000e+01            8.000000e-01   \nmax                1.000000e+02            3.194000e+02   \n       air_temperature_tmmx_1  wind_speed_1        fsca_1         SWE_2  \\\ncount            1.324517e+06  1.324517e+06  1.324517e+06  1.324517e+06   \nmean             2.875155e+02  4.139575e+00  2.364893e+01  1.000658e+01   \nstd              1.695451e+01  1.956475e+00  2.752498e+01  1.814698e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.786000e+02  2.700000e+00  0.000000e+00  0.000000e+00   \n50%              2.879000e+02  3.700000e+00  0.000000e+00  0.000000e+00   \n75%              2.974000e+02  5.100000e+00  5.033937e+01  1.900000e+01   \nmax              3.254000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_2  potential_evapotranspiration_2  \\\ncount            1.324517e+06                    1.324517e+06   \nmean             2.716212e+02                    4.612832e+00   \nstd              1.515221e+01                    3.173495e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.666000e+02                    1.900000e+00   \n50%              2.724000e+02                    4.000000e+00   \n75%              2.784000e+02                    6.800000e+00   \nmax              2.991000e+02                    2.340000e+01   \n       mean_vapor_pressure_deficit_2  relative_humidity_rmax_2  \\\ncount                   1.324517e+06              1.324517e+06   \nmean                    8.448106e-01              7.245176e+01   \nstd                     7.827244e-01              2.075647e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.538384e-01              5.690000e+01   \n50%                     6.000000e-01              7.420001e+01   \n75%                     1.220000e+00              9.030000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_2  precipitation_amount_2  \\\ncount              1.324517e+06            1.324517e+06   \nmean               3.579025e+01            1.633567e+00   \nstd                1.899210e+01            5.367852e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                2.120000e+01            0.000000e+00   \n50%                3.180000e+01            0.000000e+00   \n75%                4.770000e+01            8.000000e-01   \nmax                1.000000e+02            3.194000e+02   \n       air_temperature_tmmx_2  wind_speed_2        fsca_2         SWE_3  \\\ncount            1.324517e+06  1.324517e+06  1.324517e+06  1.324517e+06   \nmean             2.873305e+02  4.135003e+00  2.361544e+01  1.000248e+01   \nstd              1.851886e+01  1.956693e+00  2.751970e+01  1.814725e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.786000e+02  2.700000e+00  0.000000e+00  0.000000e+00   \n50%              2.879000e+02  3.700000e+00  0.000000e+00  0.000000e+00   \n75%              2.974000e+02  5.100000e+00  5.033061e+01  1.900000e+01   \nmax              3.254000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_3  potential_evapotranspiration_3  \\\ncount            1.324517e+06                    1.324517e+06   \nmean             2.714455e+02                    4.611071e+00   \nstd              1.670774e+01                    3.175105e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.666000e+02                    1.900000e+00   \n50%              2.724000e+02                    4.000000e+00   \n75%              2.784000e+02                    6.800000e+00   \nmax              2.991000e+02                    2.340000e+01   \n       mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\ncount                   1.324517e+06              1.324517e+06   \nmean                    8.441884e-01              7.239043e+01   \nstd                     7.827225e-01              2.083262e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.500000e-01              5.690000e+01   \n50%                     6.000000e-01              7.420001e+01   \n75%                     1.220000e+00              9.030000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_3  precipitation_amount_3  \\\ncount              1.324517e+06            1.324517e+06   \nmean               3.575153e+01            1.631224e+00   \nstd                1.900416e+01            5.365840e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                2.110000e+01            0.000000e+00   \n50%                3.180000e+01            0.000000e+00   \n75%                4.770000e+01            7.783989e-01   \nmax                1.000000e+02            3.194000e+02   \n       air_temperature_tmmx_3  wind_speed_3        fsca_3         SWE_4  \\\ncount            1.324517e+06  1.324517e+06  1.324517e+06  1.324517e+06   \nmean             2.871465e+02  4.131723e+00  2.358178e+01  9.998094e+00   \nstd              1.995819e+01  1.958764e+00  2.751429e+01  1.814771e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.786000e+02  2.700000e+00  0.000000e+00  0.000000e+00   \n50%              2.879000e+02  3.700000e+00  0.000000e+00  0.000000e+00   \n75%              2.974000e+02  5.100000e+00  5.025000e+01  1.899945e+01   \nmax              3.254000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_4  potential_evapotranspiration_4  \\\ncount            1.324517e+06                    1.324517e+06   \nmean             2.712698e+02                    4.609609e+00   \nstd              1.812858e+01                    3.176407e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.666000e+02                    1.900000e+00   \n50%              2.724000e+02                    4.000000e+00   \n75%              2.784000e+02                    6.800000e+00   \nmax              2.991000e+02                    2.340000e+01   \n       mean_vapor_pressure_deficit_4  relative_humidity_rmax_4  \\\ncount                   1.324517e+06              1.324517e+06   \nmean                    8.435731e-01              7.233076e+01   \nstd                     7.827174e-01              2.090926e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.500000e-01              5.680000e+01   \n50%                     6.000000e-01              7.410000e+01   \n75%                     1.220000e+00              9.020001e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_4  precipitation_amount_4  \\\ncount              1.324517e+06            1.324517e+06   \nmean               3.571197e+01            1.629500e+00   \nstd                1.901471e+01            5.364604e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                2.110000e+01            0.000000e+00   \n50%                3.170000e+01            0.000000e+00   \n75%                4.770000e+01            7.218323e-01   \nmax                1.000000e+02            3.194000e+02   \n       air_temperature_tmmx_4  wind_speed_4        fsca_4         SWE_5  \\\ncount            1.324517e+06  1.324517e+06  1.324517e+06  1.324517e+06   \nmean             2.869616e+02  4.128316e+00  2.354823e+01  9.994338e+00   \nstd              2.129969e+01  1.960480e+00  2.750893e+01  1.814822e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.786000e+02  2.700000e+00  0.000000e+00  0.000000e+00   \n50%              2.879000e+02  3.700000e+00  0.000000e+00  0.000000e+00   \n75%              2.974000e+02  5.100000e+00  5.018538e+01  1.898953e+01   \nmax              3.254000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_5  potential_evapotranspiration_5  \\\ncount            1.324517e+06                    1.324517e+06   \nmean             2.710938e+02                    4.608049e+00   \nstd              1.944450e+01                    3.177723e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.666000e+02                    1.900000e+00   \n50%              2.724000e+02                    4.000000e+00   \n75%              2.784000e+02                    6.800000e+00   \nmax              2.991000e+02                    2.340000e+01   \n       mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\ncount                   1.324517e+06              1.324517e+06   \nmean                    8.429629e-01              7.227144e+01   \nstd                     7.827232e-01              2.098640e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.500000e-01              5.680000e+01   \n50%                     6.000000e-01              7.410000e+01   \n75%                     1.220000e+00              9.020001e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_5  precipitation_amount_5  \\\ncount              1.324517e+06            1.324517e+06   \nmean               3.567329e+01            1.626749e+00   \nstd                1.902623e+01            5.362325e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                2.110000e+01            0.000000e+00   \n50%                3.170000e+01            0.000000e+00   \n75%                4.760000e+01            7.000000e-01   \nmax                1.000000e+02            3.194000e+02   \n       air_temperature_tmmx_5  wind_speed_5        fsca_5         SWE_6  \\\ncount            1.324517e+06  1.324517e+06  1.324517e+06  1.324517e+06   \nmean             2.867730e+02  4.123931e+00  2.351468e+01  9.992211e+00   \nstd              2.256186e+01  1.961192e+00  2.750345e+01  1.814842e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.786000e+02  2.700000e+00  0.000000e+00  0.000000e+00   \n50%              2.879000e+02  3.700000e+00  0.000000e+00  0.000000e+00   \n75%              2.974000e+02  5.100000e+00  5.004741e+01  1.897901e+01   \nmax              3.254000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_6  potential_evapotranspiration_6  \\\ncount            1.324517e+06                    1.324517e+06   \nmean             2.709169e+02                    4.606305e+00   \nstd              2.067576e+01                    3.179274e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.666000e+02                    1.900000e+00   \n50%              2.724000e+02                    4.000000e+00   \n75%              2.784000e+02                    6.800000e+00   \nmax              2.991000e+02                    2.340000e+01   \n       mean_vapor_pressure_deficit_6  relative_humidity_rmax_6  \\\ncount                   1.324517e+06              1.324517e+06   \nmean                    8.423543e-01              7.220975e+01   \nstd                     7.827252e-01              2.106097e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.500000e-01              5.670000e+01   \n50%                     5.969236e-01              7.410000e+01   \n75%                     1.220000e+00              9.020001e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_6  precipitation_amount_6  \\\ncount              1.324517e+06            1.324517e+06   \nmean               3.563377e+01            1.624346e+00   \nstd                1.903642e+01            5.359515e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                2.110000e+01            0.000000e+00   \n50%                3.170000e+01            0.000000e+00   \n75%                4.760000e+01            7.000000e-01   \nmax                1.000000e+02            3.194000e+02   \n       air_temperature_tmmx_6  wind_speed_6        fsca_6         SWE_7  \\\ncount            1.324517e+06  1.324517e+06  1.324517e+06  1.324517e+06   \nmean             2.865839e+02  4.118507e+00  2.348156e+01  9.990833e+00   \nstd              2.375558e+01  1.959744e+00  2.749823e+01  1.814860e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.786000e+02  2.700000e+00  0.000000e+00  0.000000e+00   \n50%              2.879000e+02  3.700000e+00  0.000000e+00  0.000000e+00   \n75%              2.974000e+02  5.100000e+00  5.000110e+01  1.852037e+01   \nmax              3.254000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_7  potential_evapotranspiration_7  \\\ncount            1.324517e+06                    1.324517e+06   \nmean             2.707377e+02                    4.604573e+00   \nstd              2.183707e+01                    3.180753e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.666000e+02                    1.900000e+00   \n50%              2.724000e+02                    4.000000e+00   \n75%              2.784000e+02                    6.800000e+00   \nmax              2.991000e+02                    2.340000e+01   \n       mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\ncount                   1.324517e+06              1.324517e+06   \nmean                    8.417458e-01              7.214951e+01   \nstd                     7.827199e-01              2.113641e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.500000e-01              5.670000e+01   \n50%                     5.900000e-01              7.400000e+01   \n75%                     1.210000e+00              9.010000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_7  precipitation_amount_7  \\\ncount              1.324517e+06            1.324517e+06   \nmean               3.559392e+01            1.622151e+00   \nstd                1.904595e+01            5.356950e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                2.100000e+01            0.000000e+00   \n50%                3.160000e+01            0.000000e+00   \n75%                4.750000e+01            7.000000e-01   \nmax                1.000000e+02            3.194000e+02   \n       air_temperature_tmmx_7  wind_speed_7        fsca_7  \ncount            1.324517e+06  1.324517e+06  1.324517e+06  \nmean             2.863956e+02  4.113932e+00  2.344878e+01  \nstd              2.489063e+01  1.960493e+00  2.749306e+01  \nmin              0.000000e+00  0.000000e+00  0.000000e+00  \n25%              2.786000e+02  2.700000e+00  0.000000e+00  \n50%              2.879000e+02  3.700000e+00  0.000000e+00  \n75%              2.974000e+02  5.100000e+00  5.000000e+01  \nmax              3.254000e+02  1.960000e+01  9.600000e+01  \nThis is our unique years [2018 2019 2020 2021]\nhow many rows are left in the three water years?                  lat            lon            SWE      swe_value  \\\ncount  992057.000000  992057.000000  992057.000000  992057.000000   \nmean       41.849480    -113.960989       8.586352       5.925259   \nstd         3.662955       5.434208      18.834390       9.886632   \nmin        32.923420    -124.266670       0.000000      -8.000000   \n25%        39.045540    -119.448000       0.000000       0.000000   \n50%        41.330870    -113.023170       0.000000       0.700000   \n75%        44.776650    -109.888100       0.000000       8.500000   \nmax        48.975230    -103.787580     234.000000     102.100000   \n       change_in_swe_inch     snow_depth  air_temperature_observed_f  \\\ncount       992057.000000  992057.000000               992057.000000   \nmean             0.000995      15.454266                   31.075118   \nstd              1.678028      24.347080                   17.937051   \nmin            -69.000000       0.000000                  -86.600000   \n25%              0.000000       0.000000                   19.900000   \n50%              0.000000       0.000000                   32.500000   \n75%              0.000000      26.000000                   44.800000   \nmax             49.000000     229.000000                  108.300000   \n       air_temperature_tmmn  potential_evapotranspiration  \\\ncount         992057.000000                 992057.000000   \nmean             271.764346                      4.555282   \nstd               11.438732                      3.152945   \nmin                0.000000                      0.000000   \n25%              266.200000                      1.900000   \n50%              272.100000                      3.900000   \n75%              278.400000                      6.700000   \nmax              299.100000                     22.200000   \n       mean_vapor_pressure_deficit  relative_humidity_rmax  \\\ncount                992057.000000           992057.000000   \nmean                      0.785886               71.673223   \nstd                       0.745714               21.099229   \nmin                       0.000000                0.000000   \n25%                       0.232342               55.400000   \n50%                       0.540000               73.300000   \n75%                       1.120000               90.000000   \nmax                       7.660000              100.000000   \n       relative_humidity_rmin  precipitation_amount  air_temperature_tmmx  \\\ncount           992057.000000         992057.000000         992057.000000   \nmean                35.956037              1.666668            288.047156   \nstd                 18.981847              5.475472             15.200126   \nmin                  0.000000              0.000000              0.000000   \n25%                 21.400000              0.000000            278.900000   \n50%                 31.900000              0.000000            288.208831   \n75%                 47.800000              0.800000            297.700000   \nmax                100.000000            319.400000            325.400000   \n          wind_speed      Elevation          Slope         Aspect  \\\ncount  992057.000000  992057.000000  992057.000000  992057.000000   \nmean        4.096682    2317.164533       0.455953     169.015584   \nstd         1.918502     682.695764       0.463569      96.916751   \nmin         0.000000      73.434170       0.083221       0.939417   \n25%         2.700000    1864.849100       0.218124      90.395035   \n50%         3.700000    2379.156700       0.313553     166.749200   \n75%         5.000000    2824.653300       0.508171     245.834410   \nmax        19.600000    3978.187700       4.869782     359.912960   \n           Curvature      Northness       Eastness           fsca  \\\ncount  992057.000000  992057.000000  992057.000000  992057.000000   \nmean    -3375.957871      -0.083645      -0.071694      24.742051   \nstd      4877.219818       0.588272       0.572419      27.859497   \nmin    -21984.598000      -0.785398      -0.785398       0.000000   \n25%     -6171.031700      -0.690316      -0.651369       0.000000   \n50%     -3109.417200      -0.189653      -0.141754       6.770522   \n75%      -156.005510       0.523426       0.510969      51.999448   \nmax     17570.197000       0.785398       0.785398      96.000000   \n       corrected_slope          SWE_1  air_temperature_tmmn_1  \\\ncount    992057.000000  992057.000000           992057.000000   \nmean         89.977981       8.602998              271.762542   \nstd           0.051763      18.840370               11.491546   \nmin          88.795400       0.000000                0.000000   \n25%          89.978080       0.000000              266.200000   \n50%          89.986350       0.000000              272.100000   \n75%          89.990600       0.000000              278.400000   \nmax          89.996475     234.000000              299.100000   \n       potential_evapotranspiration_1  mean_vapor_pressure_deficit_1  \\\ncount                   992057.000000                  992057.000000   \nmean                         4.553368                       0.785401   \nstd                          3.153083                       0.745393   \nmin                          0.000000                       0.000000   \n25%                          1.900000                       0.230000   \n50%                          3.900000                       0.540000   \n75%                          6.700000                       1.120000   \nmax                         22.200000                       7.660000   \n       relative_humidity_rmax_1  relative_humidity_rmin_1  \\\ncount             992057.000000             992057.000000   \nmean                  71.679255                 35.958439   \nstd                   21.100837                 18.978968   \nmin                    0.000000                  0.000000   \n25%                   55.400000                 21.400000   \n50%                   73.300000                 31.900000   \n75%                   90.000000                 47.800000   \nmax                  100.000000                100.000000   \n       precipitation_amount_1  air_temperature_tmmx_1   wind_speed_1  \\\ncount           992057.000000           992057.000000  992057.000000   \nmean                 1.666575              288.042763       4.098289   \nstd                  5.475352               15.244367       1.919126   \nmin                  0.000000                0.000000       0.000000   \n25%                  0.000000              278.900000       2.700000   \n50%                  0.000000              288.225941       3.700000   \n75%                  0.800000              297.700000       5.000000   \nmax                319.400000              325.400000      19.600000   \n              fsca_1          SWE_2  air_temperature_tmmn_2  \\\ncount  992057.000000  992057.000000           992057.000000   \nmean       24.742109       8.619625              271.762125   \nstd        27.859391      18.846325               11.544682   \nmin         0.000000       0.000000                0.000000   \n25%         0.000000       0.000000              266.200000   \n50%         6.777989       0.000000              272.100000   \n75%        51.999447       0.000000              278.400000   \nmax        96.000000     234.000000              299.100000   \n       potential_evapotranspiration_2  mean_vapor_pressure_deficit_2  \\\ncount                   992057.000000                  992057.000000   \nmean                         4.551434                       0.785010   \nstd                          3.153155                       0.745047   \nmin                          0.000000                       0.000000   \n25%                          1.900000                       0.230000   \n50%                          3.900000                       0.540000   \n75%                          6.700000                       1.120000   \nmax                         22.200000                       7.660000   \n       relative_humidity_rmax_2  relative_humidity_rmin_2  \\\ncount             992057.000000             992057.000000   \nmean                  71.699260                 35.947709   \nstd                   21.100637                 18.981750   \nmin                    0.000000                  0.000000   \n25%                   55.400000                 21.400000   \n50%                   73.400000                 31.900000   \n75%                   90.000000                 47.800000   \nmax                  100.000000                100.000000   \n       precipitation_amount_2  air_temperature_tmmx_2   wind_speed_2  \\\ncount           992057.000000           992057.000000  992057.000000   \nmean                 1.666939              288.038496       4.099481   \nstd                  5.475347               15.288293       1.919377   \nmin                  0.000000                0.000000       0.000000   \n25%                  0.000000              278.900000       2.700000   \n50%                  0.000000              288.241784       3.700000   \n75%                  0.800000              297.700000       5.000000   \nmax                319.400000              325.400000      19.600000   \n              fsca_2          SWE_3  air_temperature_tmmn_3  \\\ncount  992057.000000  992057.000000           992057.000000   \nmean       24.742566       8.636217              271.759960   \nstd        27.859367      18.852063               11.597374   \nmin         0.000000       0.000000                0.000000   \n25%         0.000000       0.000000              266.200000   \n50%         6.793934       0.000000              272.100000   \n75%        51.999447       0.000000              278.500000   \nmax        96.000000     234.000000              299.100000   \n       potential_evapotranspiration_3  mean_vapor_pressure_deficit_3  \\\ncount                   992057.000000                  992057.000000   \nmean                         4.549227                       0.784665   \nstd                          3.152940                       0.744656   \nmin                          0.000000                       0.000000   \n25%                          1.900000                       0.230000   \n50%                          3.900000                       0.540000   \n75%                          6.700000                       1.120000   \nmax                         22.200000                       7.660000   \n       relative_humidity_rmax_3  relative_humidity_rmin_3  \\\ncount             992057.000000             992057.000000   \nmean                  71.726877                 35.928098   \nstd                   21.096480                 18.981333   \nmin                    0.000000                  0.000000   \n25%                   55.400000                 21.400000   \n50%                   73.400000                 31.900000   \n75%                   90.000000                 47.800000   \nmax                  100.000000                100.000000   \n       precipitation_amount_3  air_temperature_tmmx_3   wind_speed_3  \\\ncount           992057.000000           992057.000000  992057.000000   \nmean                 1.665610              288.032969       4.098614   \nstd                  5.471312               15.332311       1.919251   \nmin                  0.000000                0.000000       0.000000   \n25%                  0.000000              278.900000       2.700000   \n50%                  0.000000              288.217740       3.700000   \n75%                  0.800000              297.700000       5.000000   \nmax                319.400000              325.400000      19.600000   \n              fsca_3          SWE_4  air_temperature_tmmn_4  \\\ncount  992057.000000  992057.000000           992057.000000   \nmean       24.742974       8.652791              271.754610   \nstd        27.859188      18.857873               11.648491   \nmin         0.000000       0.000000                0.000000   \n25%         0.000000       0.000000              266.200000   \n50%         6.798506       0.000000              272.100000   \n75%        51.999447       0.000000              278.500000   \nmax        96.000000     234.000000              299.100000   \n       potential_evapotranspiration_4  mean_vapor_pressure_deficit_4  \\\ncount                   992057.000000                  992057.000000   \nmean                         4.546716                       0.784357   \nstd                          3.152158                       0.744265   \nmin                          0.000000                       0.000000   \n25%                          1.900000                       0.230000   \n50%                          3.900000                       0.540000   \n75%                          6.700000                       1.120000   \nmax                         22.200000                       7.660000   \n       relative_humidity_rmax_4  relative_humidity_rmin_4  \\\ncount             992057.000000             992057.000000   \nmean                  71.753589                 35.916694   \nstd                   21.084985                 18.981726   \nmin                    0.000000                  0.000000   \n25%                   55.500000                 21.300001   \n50%                   73.400000                 31.900000   \n75%                   90.100000                 47.800000   \nmax                  100.000000                100.000000   \n       precipitation_amount_4  air_temperature_tmmx_4   wind_speed_4  \\\ncount           992057.000000           992057.000000  992057.000000   \nmean                 1.663960              288.027194       4.098258   \nstd                  5.461826               15.376277       1.919281   \nmin                  0.000000                0.000000       0.000000   \n25%                  0.000000              278.900000       2.700000   \n50%                  0.000000              288.200000       3.700000   \n75%                  0.800000              297.700000       5.000000   \nmax                319.400000              325.400000      19.600000   \n              fsca_4          SWE_5  air_temperature_tmmn_5  \\\ncount  992057.000000  992057.000000           992057.000000   \nmean       24.743074       8.669347              271.746252   \nstd        27.859062      18.863640               11.697998   \nmin         0.000000       0.000000                0.000000   \n25%         0.000000       0.000000              266.200000   \n50%         6.800000       0.000000              272.100000   \n75%        51.999447       0.000000              278.400000   \nmax        96.000000     234.000000              299.100000   \n       potential_evapotranspiration_5  mean_vapor_pressure_deficit_5  \\\ncount                   992057.000000                  992057.000000   \nmean                         4.544060                       0.783974   \nstd                          3.151297                       0.743899   \nmin                          0.000000                       0.000000   \n25%                          1.900000                       0.230122   \n50%                          3.900000                       0.540000   \n75%                          6.700000                       1.120000   \nmax                         22.200000                       7.660000   \n       relative_humidity_rmax_5  relative_humidity_rmin_5  \\\ncount             992057.000000             992057.000000   \nmean                  71.774818                 35.908948   \nstd                   21.075476                 18.985691   \nmin                    0.000000                  0.000000   \n25%                   55.500000                 21.300001   \n50%                   73.400000                 31.900000   \n75%                   90.100000                 47.800000   \nmax                  100.000000                100.000000   \n       precipitation_amount_5  air_temperature_tmmx_5   wind_speed_5  \\\ncount           992057.000000           992057.000000  992057.000000   \nmean                 1.662662              288.021054       4.097789   \nstd                  5.459099               15.420732       1.919373   \nmin                  0.000000                0.000000       0.000000   \n25%                  0.000000              278.900000       2.700000   \n50%                  0.000000              288.200000       3.700000   \n75%                  0.800000              297.700000       5.000000   \nmax                319.400000              325.400000      19.600000   \n              fsca_5          SWE_6  air_temperature_tmmn_6  \\\ncount  992057.000000  992057.000000           992057.000000   \nmean       24.742895       8.685834              271.736965   \nstd        27.859049      18.869370               11.747018   \nmin         0.000000       0.000000                0.000000   \n25%         0.000000       0.000000              266.200000   \n50%         6.798477       0.000000              272.100000   \n75%        51.999445       0.000000              278.400000   \nmax        96.000000     234.000000              299.100000   \n       potential_evapotranspiration_6  mean_vapor_pressure_deficit_6  \\\ncount                   992057.000000                  992057.000000   \nmean                         4.541266                       0.783487   \nstd                          3.150326                       0.743583   \nmin                          0.000000                       0.000000   \n25%                          1.900000                       0.230000   \n50%                          3.900000                       0.540000   \n75%                          6.700000                       1.120000   \nmax                         22.200000                       7.660000   \n       relative_humidity_rmax_6  relative_humidity_rmin_6  \\\ncount             992057.000000             992057.000000   \nmean                  71.784545                 35.908327   \nstd                   21.070856                 18.986703   \nmin                    0.000000                  0.000000   \n25%                   55.600002                 21.300001   \n50%                   73.500000                 31.900000   \n75%                   90.100000                 47.800000   \nmax                  100.000000                100.000000   \n       precipitation_amount_6  air_temperature_tmmx_6   wind_speed_6  \\\ncount           992057.000000           992057.000000  992057.000000   \nmean                 1.660169              288.014168       4.097375   \nstd                  5.451943               15.465043       1.919524   \nmin                  0.000000                0.000000       0.000000   \n25%                  0.000000              278.900000       2.700000   \n50%                  0.000000              288.200000       3.700000   \n75%                  0.800000              297.700000       5.000000   \nmax                319.400000              325.400000      19.600000   \n              fsca_6          SWE_7  air_temperature_tmmn_7  \\\ncount  992057.000000  992057.000000           992057.000000   \nmean       24.742995       8.702404              271.729881   \nstd        27.858933      18.875121               11.793356   \nmin         0.000000       0.000000                0.000000   \n25%         0.000000       0.000000              266.200000   \n50%         6.800000       0.000000              272.100000   \n75%        51.999445       0.000000              278.400000   \nmax        96.000000     234.000000              299.100000   \n       potential_evapotranspiration_7  mean_vapor_pressure_deficit_7  \\\ncount                   992057.000000                  992057.000000   \nmean                         4.538566                       0.782985   \nstd                          3.149558                       0.743275   \nmin                          0.000000                       0.000000   \n25%                          1.900000                       0.230000   \n50%                          3.900000                       0.540000   \n75%                          6.700000                       1.120000   \nmax                         22.200000                       7.660000   \n       relative_humidity_rmax_7  relative_humidity_rmin_7  \\\ncount             992057.000000             992057.000000   \nmean                  71.789692                 35.912960   \nstd                   21.071348                 18.986244   \nmin                    0.000000                  0.000000   \n25%                   55.600002                 21.300001   \n50%                   73.500000                 31.900000   \n75%                   90.100000                 47.800000   \nmax                  100.000000                100.000000   \n       precipitation_amount_7  air_temperature_tmmx_7   wind_speed_7  \\\ncount           992057.000000           992057.000000  992057.000000   \nmean                 1.656934              288.006863       4.098677   \nstd                  5.435474               15.508371       1.919313   \nmin                  0.000000                0.000000       0.000000   \n25%                  0.000000              278.900000       2.700000   \n50%                  0.000000              288.200000       3.700000   \n75%                  0.800000              297.700000       5.000000   \nmax                319.400000              325.400000      19.600000   \n              fsca_7  \ncount  992057.000000  \nmean       24.742926  \nstd        27.858844  \nmin         0.000000  \n25%         0.000000  \n50%         6.800000  \n75%        51.999368  \nmax        96.000000  \nhow many groups?  <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7f5afbd7df10>\nThis is the dataframe after cumulative columns are added\ncount    992057.000000\nmean       6165.414943\nstd        4857.574424\nmin           0.000000\n25%        2073.716647\n50%        5709.428379\n75%        9224.599832\nmax       34951.069586\nName: cumulative_fsca, dtype: float64\nAll the cumulative variables are added successfully! /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv_cleaned_nodata_with_non_stations.csv_time_series_cumulative_v1_with_non_stations.csv\ndouble check the swe_value statistics: count    992057.000000\nmean          5.925259\nstd           9.886632\nmin          -8.000000\n25%           0.000000\n50%           0.700000\n75%           8.500000\nmax         102.100000\nName: swe_value, dtype: float64\n",
  "history_begin_time" : 1714879945409,
  "history_end_time" : 1714880553865,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "p6tvkfCXSVYu",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\nimport dask.dataframe as dd\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    if column_name == \"SWE\":\n      mask = (y > 240) | y.isnull()\n    elif column_name == \"fsca\":\n      mask = (y > 100) | y.isnull()\n    else:\n      mask = y.isnull()\n\n    # Check if all elements in the mask array are True\n    all_true = np.all(mask)\n\n    if all_true:\n      df[column_name] = 0\n    else:\n      # Perform interpolation\n      new_y = np.interp(x, x[~mask], y[~mask])\n      # Replace missing values with interpolated values\n      df[column_name] = new_y\n\n    if np.any(df[column_name].isnull()):\n      raise ValueError(\"Single group: shouldn't have null values here\")\n        \n    return df\n\ndef convert_to_time_series(input_csv, output_csv):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                         'AMSR_SWE': 'SWE',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv):\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['fsca'] > 100):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        filled_data.to_csv(filled_csv, index=False)\n        \n        print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv):\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n        result.fillna(0, inplace=True)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv, force=False):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_cumulated = [\n      \"SWE\",\n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv)\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2018-10-01')\n    end_date = pd.to_datetime('2021-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df[\"cumulative_fsca\"].describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n\ndef clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path):\n    # Read Dask DataFrame from CSV\n    dask_df = dd.read_csv(current_ready_csv_path)\n\n    # Remove rows where 'swe_value' is empty\n    dask_df_filtered = dask_df.dropna(subset=['swe_value'])\n\n    # Save the result to a new CSV file\n    dask_df_filtered.to_csv(cleaned_csv_path, index=False, single_file=True)\n    print(\"dask_df_filtered.shape = \", dask_df_filtered.shape)\n    print(f\"The filtered csv with no swe values is saved to {cleaned_csv_path}\")\n\nif __name__ == \"__main__\":\n    # Define file paths for various CSV files\n    # current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n    current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_stations_with_non_stations.csv_sorted_slope_corrected.csv'\n    cleaned_csv_path = f\"{current_ready_csv_path}_cleaned_nodata_with_non_stations.csv\"\n    target_time_series_csv_path = f'{cleaned_csv_path}_time_series_v1_with_non_stations.csv'\n    backup_time_series_csv_path = f'{cleaned_csv_path}_time_series_v1_bak_with_non_stations.csv'\n    # target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n    target_time_series_cumulative_csv_path = f'{cleaned_csv_path}_time_series_cumulative_v1_with_non_stations.csv'\n    \n    \n    # remove the empty swe_value rows first\n    clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path)\n  \n    # Uncomment this line to execute the 'convert_to_time_series' function\n    convert_to_time_series(cleaned_csv_path, target_time_series_csv_path)\n\n    # Uncomment this line to execute the 'add_cumulative_columns' function\n    add_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path, force=True)\n",
  "history_output" : "today date = 2024-05-05\n2024-05-02\ntest start date:  2024-05-02\ntest end date:  2023-10-11\n/home/chetana\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/p6tvkfCXSVYu/convert_to_time_series.py\", line 248, in <module>\n    clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path)\n  File \"/home/chetana/gw-workspace/p6tvkfCXSVYu/convert_to_time_series.py\", line 232, in clean_non_swe_rows\n    dask_df_filtered.to_csv(cleaned_csv_path, index=False, single_file=True)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/dask/dataframe/core.py\", line 1897, in to_csv\n    return to_csv(self, filename, **kwargs)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/dask/dataframe/io/csv.py\", line 995, in to_csv\n    return list(dask.compute(*values, **compute_kwargs))\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/dask/base.py\", line 628, in compute\n    results = schedule(dsk, keys, **kwargs)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/dask/dataframe/io/csv.py\", line 142, in __call__\n    df = pandas_read_text(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/dask/dataframe/io/csv.py\", line 197, in pandas_read_text\n    coerce_dtypes(df, dtypes)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/dask/dataframe/io/csv.py\", line 298, in coerce_dtypes\n    raise ValueError(msg)\nValueError: Mismatched dtypes found in `pd.read_csv`/`pd.read_table`.\n+--------------+--------+----------+\n| Column       | Found  | Expected |\n+--------------+--------+----------+\n| station_name | object | float64  |\n+--------------+--------+----------+\nThe following columns also raised exceptions on conversion:\n- station_name\n  ValueError(\"could not convert string to float: 'Hoosier Pass'\")\nUsually this is due to dask's dtype inference failing, and\n*may* be fixed by specifying dtypes manually by adding:\ndtype={'station_name': 'object'}\nto the call to `read_csv`/`read_table`.\n/home/chetana/anaconda3/lib/python3.9/site-packages/dask/dataframe/io/csv.py:195: DtypeWarning: Columns (4) have mixed types. Specify dtype option on import or set low_memory=False.\n  df = reader(bio, **kwargs)\n",
  "history_begin_time" : 1714879747681,
  "history_end_time" : 1714879766184,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "o62qythl1zz",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714409076793,
  "history_end_time" : 1714409076793,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "343wnymqyde",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714407283851,
  "history_end_time" : 1714407283851,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "3da7z6q832d",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714404800138,
  "history_end_time" : 1714404800138,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "f5bmrtyebmv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714363210301,
  "history_end_time" : 1714363210301,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "id9romywzy0",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714362032727,
  "history_end_time" : 1714362032727,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "52ggosxq6dh",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714355595259,
  "history_end_time" : 1714355595259,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ohe3c6o6xat",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714351396915,
  "history_end_time" : 1714351396915,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "85wqhtzz3is",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714348539320,
  "history_end_time" : 1714348539320,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "jtyaytziq5q",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714345973291,
  "history_end_time" : 1714345973291,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "lkkamxijq18",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714343583918,
  "history_end_time" : 1714343583918,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "b5dtbfmhxru",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714340841831,
  "history_end_time" : 1714340841831,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "k0vuhik5hfv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714332798200,
  "history_end_time" : 1714332798200,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "zfxkvbidf9p",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714328816239,
  "history_end_time" : 1714328816239,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "dxalryp269f",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714323529115,
  "history_end_time" : 1714323529115,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "4lijpw45vo4",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714320354977,
  "history_end_time" : 1714320354977,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "t767e3bweyf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714315863142,
  "history_end_time" : 1714315863142,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "0ubex538gd2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714283543379,
  "history_end_time" : 1714315862070,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "edh3j9zgqf1",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714281870997,
  "history_end_time" : 1714283515041,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "b7l5380tl2b",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714276838487,
  "history_end_time" : 1714315876917,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "gu0xq7ssu6v",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714274662766,
  "history_end_time" : 1714281869552,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "k1rqldwlllx",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714272894757,
  "history_end_time" : 1714274352452,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "gdlq4oif42x",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714265253464,
  "history_end_time" : 1714272892784,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "i24y6y07glm",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714265112675,
  "history_end_time" : 1714265250945,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "bt4vmjqc86j",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714192736428,
  "history_end_time" : 1714265111668,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "12g2owwt7k0",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714190418450,
  "history_end_time" : 1714274351055,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "wg96qhrecdh",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714104009612,
  "history_end_time" : 1714274350453,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "ypkpz20cxpc",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714017609943,
  "history_end_time" : 1714274349940,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "b7npqzlra06",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1713931210249,
  "history_end_time" : 1714274349397,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "weux2iq8fn5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1713844809927,
  "history_end_time" : 1714274348794,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "kx5fbazqgl3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1713758409502,
  "history_end_time" : 1714274347361,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "d1v65wmjhc7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1713672009949,
  "history_end_time" : 1714274346369,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "f4grl0oy22a",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1713585609772,
  "history_end_time" : 1714274345855,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "kjo09sbh2h5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1713499209970,
  "history_end_time" : 1714274345302,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "wd6aqvstzi1",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1713412809203,
  "history_end_time" : 1714274344729,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "79kwpvugj3b",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1713326409333,
  "history_end_time" : 1714274343305,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "k3ojlczdswq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1713283461361,
  "history_end_time" : 1713283461361,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "e7jagjlqwxz",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1713240009294,
  "history_end_time" : 1714274342602,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "l0lf0uuznwn",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1711771209937,
  "history_end_time" : 1711771209937,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "fd34digqjvm",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1711684813954,
  "history_end_time" : 1714282476123,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "9sqrk1xkqqi",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1711598415375,
  "history_end_time" : 1714282474716,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "so6dp9nyu59",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1711592280537,
  "history_end_time" : 1711592280537,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "y3dygojnnqt",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1711592081950,
  "history_end_time" : 1711592081950,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "v3l3ro8tzlw",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1711512016678,
  "history_end_time" : 1711512016678,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "sbxw93gchw0",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1711425614443,
  "history_end_time" : 1714282483207,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "5njhzslztop",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1711339213006,
  "history_end_time" : 1714282483870,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "syxoxpmjxqe",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1711252813764,
  "history_end_time" : 1711252813764,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "bv52ijryij1",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1711166414385,
  "history_end_time" : 1711166414385,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "sifys27qv7v",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1711080009349,
  "history_end_time" : 1711080009349,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "5e07l5amhtw",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710993609998,
  "history_end_time" : 1714282484656,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "3iwfv4icbpw",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710907209443,
  "history_end_time" : 1714282485305,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "uaqexp70yz1",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710820809096,
  "history_end_time" : 1714282486310,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "m5t26ciwwyl",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710734409821,
  "history_end_time" : 1714282486976,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "3wzrqohogjl",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710690214216,
  "history_end_time" : 1710690214216,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "bz1v1c11gdy",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710648009518,
  "history_end_time" : 1714282488983,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "17ol8w07j3q",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710561608986,
  "history_end_time" : 1714282489557,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "kuihugdb8ob",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710475209595,
  "history_end_time" : 1714282490331,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "3oglayptz1b",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710388809581,
  "history_end_time" : 1714282490852,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "jn7bda5wz1q",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710302409667,
  "history_end_time" : 1714282491525,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "96v6hblg0wk",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710216009745,
  "history_end_time" : 1714282492143,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "cycp7fl0u2t",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710172046544,
  "history_end_time" : 1710172046544,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "4zyih6fsx5j",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710129609412,
  "history_end_time" : 1714282493755,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "9aug9uma6wo",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710080234080,
  "history_end_time" : 1710080234080,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "lfmf1o2954l",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710043209053,
  "history_end_time" : 1714282495099,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "mz738oodhuk",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709998716302,
  "history_end_time" : 1709998716302,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "funibdggbuk",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709956809339,
  "history_end_time" : 1714282495739,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "07zpky3r374",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709924987608,
  "history_end_time" : 1709924987608,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "jg3anmri3br",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709870410339,
  "history_end_time" : 1714282496862,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "vafxjhskevo",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709845595334,
  "history_end_time" : 1709845595334,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "w8mdossfc7i",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709844621984,
  "history_end_time" : 1709844621984,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "un5soy33tp5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709842923410,
  "history_end_time" : 1709842923410,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "cawltikf3zb",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709827652627,
  "history_end_time" : 1709844621187,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "6bs249ncteh",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709826138722,
  "history_end_time" : 1709826138722,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "46tic2ebeqd",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709797240860,
  "history_end_time" : 1709797240860,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "8ljr3grz1fa",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709791538006,
  "history_end_time" : 1709791538006,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "vf9wotm4vox",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709784009808,
  "history_end_time" : 1714282504747,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "0p8ob058qvd",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709778056679,
  "history_end_time" : 1709778056679,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "j9t2jciq873",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709774843634,
  "history_end_time" : 1709774843634,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "9eyu0s6d5e7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709765244692,
  "history_end_time" : 1709774842951,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "l8bz50mk4lp",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709763117644,
  "history_end_time" : 1709765243450,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "mnaehhjkl4h",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709751527399,
  "history_end_time" : 1709751527399,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "98juizc9chd",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709751443204,
  "history_end_time" : 1709751495340,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "1opoj1ot93r",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709697609631,
  "history_end_time" : 1714282506692,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "fy867ozu619",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709611209042,
  "history_end_time" : 1714282507225,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "nuo6tetg23y",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709524809236,
  "history_end_time" : 1714282507738,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "hfrbdpwfajh",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709438409019,
  "history_end_time" : 1709438409019,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "kb2ed5azc6w",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709352009404,
  "history_end_time" : 1709352009404,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "mix7axoa263",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709265609779,
  "history_end_time" : 1709265609779,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "k6t1ocb2d4i",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709179209734,
  "history_end_time" : 1709179209734,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "y5xy5y4ufn9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709137312994,
  "history_end_time" : 1709137312994,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "5bz8sptpi1u",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709092809372,
  "history_end_time" : 1709092809372,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "kpemogsn32h",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709085684229,
  "history_end_time" : 1709085684229,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "a93ypfvg6b6",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709078942169,
  "history_end_time" : 1709085672814,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "8drjlv",
  "indicator" : "Stopped"
},{
  "history_id" : "1mfy9xlj004",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709038894876,
  "history_end_time" : 1709038894876,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "0d89hbgj802",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709038873000,
  "history_end_time" : 1709038879075,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "8drjlv",
  "indicator" : "Stopped"
},{
  "history_id" : "j9kw8trrdll",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709006408943,
  "history_end_time" : 1709006408943,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "azmcmdwshkg",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708971826229,
  "history_end_time" : 1708971826229,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "umokk4gp5jb",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708958410900,
  "history_end_time" : 1708958410900,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "oj3awqnwnyg",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708954624231,
  "history_end_time" : 1708954624231,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "rrd7f5ezkel",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708920009763,
  "history_end_time" : 1708920009763,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "zzplc970ue0",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708833609450,
  "history_end_time" : 1708833609450,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "6u88yjjf9pj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708747209206,
  "history_end_time" : 1708747209206,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "l4pggqyik5c",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708660809324,
  "history_end_time" : 1708660809324,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "wvkdcxrbctj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708574410001,
  "history_end_time" : 1708574410001,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "fkiryjbvr4k",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708488010507,
  "history_end_time" : 1708488010507,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "eyg0dy92chr",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708401609234,
  "history_end_time" : 1708401609234,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "fw5yiozkfpi",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708352215568,
  "history_end_time" : 1708352215568,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "d5ne75oz2um",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708348193307,
  "history_end_time" : 1708352214878,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "8drjlv",
  "indicator" : "Stopped"
},{
  "history_id" : "p5c9vjq0z2j",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708315209388,
  "history_end_time" : 1708315209388,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "tjrdm17pyxq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708312689982,
  "history_end_time" : 1708312689982,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "4wxlynuzzsm",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708305309948,
  "history_end_time" : 1708312689140,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "8drjlv",
  "indicator" : "Stopped"
},{
  "history_id" : "q5iztpiirkm",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708242679331,
  "history_end_time" : 1708242679331,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "e1hkdy700aq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708240733543,
  "history_end_time" : 1708240733543,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "nb9f93vxiks",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708238770026,
  "history_end_time" : 1708238770026,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "93yy93uud5x",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708237144906,
  "history_end_time" : 1708237144906,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "8z5r05a52x8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708235187257,
  "history_end_time" : 1708235187257,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "7cb5986fcma",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708233874707,
  "history_end_time" : 1708233874707,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "ovpsfx893ln",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708228809501,
  "history_end_time" : 1708228809501,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "k8ho5zbeq7s",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708227613834,
  "history_end_time" : 1708227613834,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "xx9smmgj8ij",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708142409712,
  "history_end_time" : 1708142409712,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "kkhy15xcg8n",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708056009536,
  "history_end_time" : 1708056009536,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "y8g6x7r1gs3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707969609343,
  "history_end_time" : 1707969609343,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "376ddlpmv8o",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707883209122,
  "history_end_time" : 1707883209122,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "mgdaul3lyu0",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707796809633,
  "history_end_time" : 1707796809633,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "t3gl4i01iof",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707750669785,
  "history_end_time" : 1707750669785,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "4v41ta73sgz",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707710409682,
  "history_end_time" : 1707710409682,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "jdapiglp3cb",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707624009748,
  "history_end_time" : 1707624009748,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "mgjz86zfepz",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707537608909,
  "history_end_time" : 1707537608909,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "su4h0qgh2ga",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707491746728,
  "history_end_time" : 1707491746728,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "iib8g67n47u",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707484657964,
  "history_end_time" : 1707484657964,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "yrcv9qthexu",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707451209970,
  "history_end_time" : 1707451209970,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "gue4izbcvad",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707434644210,
  "history_end_time" : 1707434644210,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "08motgkxh5n",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707432571827,
  "history_end_time" : 1707432571827,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "o0kvcx3nat7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707431129265,
  "history_end_time" : 1707432053960,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "8drjlv",
  "indicator" : "Stopped"
},{
  "history_id" : "svh9hdt9wjp",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707418188664,
  "history_end_time" : 1707418188664,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "mahjd7",
  "indicator" : "Skipped"
},{
  "history_id" : "b3m6wivm5s2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707413610369,
  "history_end_time" : 1707413610369,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "mahjd7",
  "indicator" : "Skipped"
},{
  "history_id" : "2tcdbfswjp3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707364808994,
  "history_end_time" : 1707364808994,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "odqlkyg9q46",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707278409222,
  "history_end_time" : 1707278409222,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "fjtycdpyi90",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707192718900,
  "history_end_time" : 1707192718900,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "0ozcogqhx3e",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707192009410,
  "history_end_time" : 1707448888657,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "8wjpq8vs3d6",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707189399144,
  "history_end_time" : 1707189399144,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "p566onb2wwq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707105609442,
  "history_end_time" : 1707750639197,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "n3r3yygw2uf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707019209452,
  "history_end_time" : 1707750639666,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "y1ks9g8aki4",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706932809334,
  "history_end_time" : 1707750640210,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "p54co5vepiq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706846409809,
  "history_end_time" : 1707750640644,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "v16h0vjcxs9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706760010079,
  "history_end_time" : 1707750643301,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "ig4wboi98un",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706673609605,
  "history_end_time" : 1707750643805,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "04rgf2l0m1g",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706587209528,
  "history_end_time" : 1707750644989,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "t3dv654820t",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706500809117,
  "history_end_time" : 1707750645666,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "s5cz96zzba2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706414409448,
  "history_end_time" : 1707750646110,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "cplaugcp0zd",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706366105919,
  "history_end_time" : 1706366105919,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "z78ao59z4eh",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706364888473,
  "history_end_time" : 1706364888473,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "6urdn3s2kci",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706328009655,
  "history_end_time" : 1707750646910,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "f1jm3rvhwho",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706280497982,
  "history_end_time" : 1706280497982,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "tth40d2e1tk",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706244881248,
  "history_end_time" : 1706244881248,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ktv2mll6we4",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706241609860,
  "history_end_time" : 1706244810659,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "9er05bukzb4",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706155209729,
  "history_end_time" : 1706244801320,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "c78zuuchkuf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706068809238,
  "history_end_time" : 1706244800346,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "j65f2l0b8x8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705982409126,
  "history_end_time" : 1706244799980,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "8ke089h86sg",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705896759324,
  "history_end_time" : 1706244799016,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "dxh0wdkln7h",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705896009924,
  "history_end_time" : 1706244798536,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "vle93wur4er",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705849064172,
  "history_end_time" : 1706244798023,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "d6u222ia5uk",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705809609065,
  "history_end_time" : 1705849649606,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "4jb1zum3jxb",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705793527225,
  "history_end_time" : 1705849647065,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "terogtkmb31",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705790835109,
  "history_end_time" : 1705790835109,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "nouramtzmqs",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705770628233,
  "history_end_time" : 1705849642251,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "agnxkg5x0i7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705762761015,
  "history_end_time" : 1705849640896,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "v3wuxv8wbid",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705723209646,
  "history_end_time" : 1705789738455,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "t3qt5n69h90",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705636808952,
  "history_end_time" : 1705770636239,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "8ks28cacex0",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705550409432,
  "history_end_time" : 1705770635555,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "zp19ipxw9d5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705464009009,
  "history_end_time" : 1705770635067,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "w6w08a0vw7x",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705422422537,
  "history_end_time" : 1705422422537,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ch1avs3uwnj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705377609582,
  "history_end_time" : 1705770633061,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "4n790sl30dl",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705291209214,
  "history_end_time" : 1705770632182,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "cbz2okkkpzd",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705278850596,
  "history_end_time" : 1705278850596,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "h92fpe9b1to",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705270952805,
  "history_end_time" : 1705270952805,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "d32holmi9a2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705204809661,
  "history_end_time" : 1705789662012,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "ryuyvsdarrw",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705169057237,
  "history_end_time" : 1705169057237,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "eiws9k9gw2m",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705118409797,
  "history_end_time" : 1705789660780,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "ql92eqh7rb9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705072448181,
  "history_end_time" : 1705072448181,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "zw4sv07tic2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705032009649,
  "history_end_time" : 1705789659552,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "wy8obj3jlpx",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704979918386,
  "history_end_time" : 1704979918386,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "w5f3gyupj2g",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704945609786,
  "history_end_time" : 1705789658822,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "df5o3xpbi38",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704918977838,
  "history_end_time" : 1704918977838,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "kqsz71084ab",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704908919856,
  "history_end_time" : 1704908919856,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "h1cbp8eituj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704859207728,
  "history_end_time" : 1705789668265,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "a3opa1930xm",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704775840763,
  "history_end_time" : 1704775840763,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "pr0htsqpucf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704772806940,
  "history_end_time" : 1705789667295,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "7b1ty0kjhml",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704726161287,
  "history_end_time" : 1704727049033,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "83zq6ej2dlz",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704686408523,
  "history_end_time" : 1705789666652,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "al2fpbm537y",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704644803739,
  "history_end_time" : 1704644803739,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "87vcrc9cub6",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704600008361,
  "history_end_time" : 1705789665926,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "kju1ieaeeuy",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704566156637,
  "history_end_time" : 1704566156637,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "7a2gz83g1mn",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704565587394,
  "history_end_time" : 1704565587394,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "l15kz9xb2no",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704564424170,
  "history_end_time" : 1704564424170,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "jm4ja9gns1i",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704562992191,
  "history_end_time" : 1704562992191,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "lfepvanork8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704561889809,
  "history_end_time" : 1704561889809,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "i6kjs8is4ex",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704561861183,
  "history_end_time" : 1704561887042,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "25vbasjjf5v",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704555479219,
  "history_end_time" : 1704555479219,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "gu80souxyh8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704555028210,
  "history_end_time" : 1704555028210,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "rygqlj4cclj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704553241780,
  "history_end_time" : 1704553241780,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "zbaq3ppqc34",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704552254645,
  "history_end_time" : 1704552254645,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "n1ahdbgub1r",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704513607508,
  "history_end_time" : 1705789671135,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "ql3s1d2c093",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704427207676,
  "history_end_time" : 1705789671875,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "mn5sbxdzfpf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704340807695,
  "history_end_time" : 1705789673119,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "04ryqml0d6l",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704330109330,
  "history_end_time" : 1704330109330,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "r5wj2rqcv8b",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704329364880,
  "history_end_time" : 1704329364880,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "pof5h63draq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704254407679,
  "history_end_time" : 1705789675687,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "2hck5ua1euf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704208947968,
  "history_end_time" : 1704208947968,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "7gv3qzc0p1i",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704207352030,
  "history_end_time" : 1704207352030,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "xwn5gf56109",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704205859386,
  "history_end_time" : 1704205859386,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "z15v92hfn6a",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704168007533,
  "history_end_time" : 1705789676832,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "acihnyfik42",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704081607634,
  "history_end_time" : 1705789677625,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "wzbrsz3yaik",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703995208575,
  "history_end_time" : 1705789678820,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "6ygmrq74258",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703962871416,
  "history_end_time" : 1703962871416,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "inn7620hk9g",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703960265454,
  "history_end_time" : 1703960265454,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "whluqykn4wo",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703959737858,
  "history_end_time" : 1703959737858,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "js8pvj3v7sq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703958611602,
  "history_end_time" : 1703958611602,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "fvla2mw9fzz",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703955838238,
  "history_end_time" : 1703955838238,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "3sgv6qx96kv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703954150391,
  "history_end_time" : 1703954150391,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "nlkmg1xrmmp",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703915768083,
  "history_end_time" : 1703915768083,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "kua15q3441v",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703915283499,
  "history_end_time" : 1703915283499,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "8wamyvb1vyr",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703914476655,
  "history_end_time" : 1703914476655,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "piwd2ievusn",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703912302188,
  "history_end_time" : 1703912302188,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "9d5w6pekxeh",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703908807292,
  "history_end_time" : 1705789681238,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "f2etgugtfbq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703906215392,
  "history_end_time" : 1703906215392,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "lbzjpu9b46s",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703900919156,
  "history_end_time" : 1703900919156,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "gkesf9o7cf5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703899837779,
  "history_end_time" : 1703899837779,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "jk89zk3dswy",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703897422963,
  "history_end_time" : 1703897422963,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "pqmkvaho0bf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703896125596,
  "history_end_time" : 1703896125596,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "qhv5d4pbn8d",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703890276003,
  "history_end_time" : 1703890276003,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "t0wa2kqasln",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703886800821,
  "history_end_time" : 1703886800821,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "gnu8vmgtsw2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703885997779,
  "history_end_time" : 1703885997779,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "tzszw74qw02",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703880194728,
  "history_end_time" : 1703880194728,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "dmtjen53rot",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703872753046,
  "history_end_time" : 1703872753046,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "4hnbdznyb8p",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703869828247,
  "history_end_time" : 1703869828247,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "nh91i048kbi",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703868616944,
  "history_end_time" : 1703868616944,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ui494c5n5eu",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703867114059,
  "history_end_time" : 1703867114059,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "zw1i0qf0e7u",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703864885459,
  "history_end_time" : 1703864885459,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "uvx0edw3lsa",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703862637383,
  "history_end_time" : 1703862637383,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "twqahfqpod4",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703827227362,
  "history_end_time" : 1703827227362,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "nz8r2eywkse",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703822411623,
  "history_end_time" : 1703822411623,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "eaqud75aqi2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703786924646,
  "history_end_time" : 1703789718830,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "rtyfksgd2a5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703786053499,
  "history_end_time" : 1703786917618,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "5v8a8k4ibf5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703778395406,
  "history_end_time" : 1703778395406,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "0cxhptqodh3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703739034588,
  "history_end_time" : 1703739034588,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "lmucv529tjd",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703738754636,
  "history_end_time" : 1703792459280,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "iqwx908zhdx",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703736166920,
  "history_end_time" : 1703737316889,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "dnji5plpefs",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703694763592,
  "history_end_time" : 1703694763592,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "nuzkgkneq5l",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703659541211,
  "history_end_time" : 1703659541211,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "xrd7f3jll1c",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703658144717,
  "history_end_time" : 1703658144717,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ckpc5cuq0bp",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703650855784,
  "history_end_time" : 1703650855784,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "7kf69yoayr6",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703646751546,
  "history_end_time" : 1703650812448,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "39ich2zp7em",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703642120905,
  "history_end_time" : 1703646749629,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "st281gcrnu6",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703641988958,
  "history_end_time" : 1703642074637,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "cgp0g9oomtf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703629665517,
  "history_end_time" : 1703629665517,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "if38kbadaxl",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703626687998,
  "history_end_time" : 1703627783061,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "i5q7euscxs6",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703625782112,
  "history_end_time" : 1703625782112,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "i04835z1ub9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703624784034,
  "history_end_time" : 1703624784034,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "y76Zs2YG6qZH",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\nimport dask.dataframe as dd\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    if column_name == \"SWE\":\n      mask = (y > 240) | y.isnull()\n    elif column_name == \"fsca\":\n      mask = (y > 100) | y.isnull()\n    else:\n      mask = y.isnull()\n\n    # Check if all elements in the mask array are True\n    all_true = np.all(mask)\n\n    if all_true:\n      df[column_name] = 0\n    else:\n      # Perform interpolation\n      new_y = np.interp(x, x[~mask], y[~mask])\n      # Replace missing values with interpolated values\n      df[column_name] = new_y\n\n    if np.any(df[column_name].isnull()):\n      raise ValueError(\"Single group: shouldn't have null values here\")\n        \n    return df\n\ndef convert_to_time_series(input_csv, output_csv):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                         'AMSR_SWE': 'SWE',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv):\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['fsca'] > 100):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        filled_data.to_csv(filled_csv, index=False)\n        \n        print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv):\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n        result.fillna(0, inplace=True)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv, force=False):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_cumulated = [\n      \"SWE\",\n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv)\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2018-10-01')\n    end_date = pd.to_datetime('2021-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df[\"cumulative_fsca\"].describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n\ndef clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path):\n    # Read Dask DataFrame from CSV\n    dask_df = dd.read_csv(current_ready_csv_path)\n\n    # Remove rows where 'swe_value' is empty\n    dask_df_filtered = dask_df.dropna(subset=['swe_value'])\n\n    # Save the result to a new CSV file\n    dask_df_filtered.to_csv(cleaned_csv_path, index=False, single_file=True)\n    print(\"dask_df_filtered.shape = \", dask_df_filtered.shape)\n    print(f\"The filtered csv with no swe values is saved to {cleaned_csv_path}\")\n\nif __name__ == \"__main__\":\n    # Define file paths for various CSV files\n    # current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n    current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_active_stations_v1.csv_sorted.csv'\n    cleaned_csv_path = f\"{current_ready_csv_path}_cleaned_nodata.csv\"\n    target_time_series_csv_path = f'{cleaned_csv_path}_time_series_v1.csv'\n    backup_time_series_csv_path = f'{cleaned_csv_path}_time_series_v1_bak.csv'\n    # target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n    target_time_series_cumulative_csv_path = f'{cleaned_csv_path}_time_series_cumulative_v1.csv'\n    \n    \n    # remove the empty swe_value rows first\n    clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path)\n  \n    # Uncomment this line to execute the 'convert_to_time_series' function\n    convert_to_time_series(cleaned_csv_path, target_time_series_csv_path)\n\n    # Uncomment this line to execute the 'add_cumulative_columns' function\n    add_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path, force=True)\n",
  "history_output" : "today date = 2023-12-26\ntest start date:  2023-01-20\ntest end date:  2023-10-11\n/home/chetana\n2022275\ndask_df_filtered.shape =  (Delayed('int-68a7627a-9055-4757-8a12-f321c1c261c7'), 26)\nThe filtered csv with no swe values is saved to /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_active_stations_v1.csv_sorted.csv_cleaned_nodata.csv\nAll current columns:  Index(['date', 'lat', 'lon', 'AMSR_SWE', 'station_name', 'swe_value',\n       'change_in_swe_inch', 'snow_depth', 'air_temperature_observed_f',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'stationTriplet', 'elevation',\n       'Elevation', 'Slope', 'Aspect', 'Curvature', 'Northness', 'Eastness',\n       'fsca'],\n      dtype='object')\nStart to fill in the missing values\nNew filled values csv is saved to /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_active_stations_v1.csv_sorted.csv_cleaned_nodata.csv_time_series_v1.csv_gap_filled.csv\nStart to create the training csv with previous 7 days columns\nNew data is saved to /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_active_stations_v1.csv_sorted.csv_cleaned_nodata.csv_time_series_v1.csv\nFile is backed up to /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_active_stations_v1.csv_sorted.csv_cleaned_nodata.csv_time_series_v1_bak.csv\nthe column statistics from time series before cumulative:                  lat           lon           SWE     swe_value  \\\ncount  1.438061e+06  1.438061e+06  1.438061e+06  1.438061e+06   \nmean   4.173615e+01 -1.142888e+02  9.894390e+00  5.686187e+00   \nstd    3.641380e+00  5.470979e+00  1.802438e+01  9.849050e+00   \nmin    3.292342e+01 -1.242667e+02  0.000000e+00 -8.000000e+00   \n25%    3.885190e+01 -1.196700e+02  0.000000e+00  0.000000e+00   \n50%    4.119700e+01 -1.137562e+02  0.000000e+00  4.000000e-01   \n75%    4.465258e+01 -1.100578e+02  1.800000e+01  7.900000e+00   \nmax    4.897523e+01 -1.037876e+02  2.340000e+02  1.066000e+02   \n       change_in_swe_inch    snow_depth  air_temperature_observed_f  \\\ncount        1.438061e+06  1.438061e+06                1.438061e+06   \nmean         9.598341e-03  1.406293e+01                2.957108e+01   \nstd          1.642182e+00  2.394601e+01                1.876136e+01   \nmin         -6.900000e+01  0.000000e+00               -8.660000e+01   \n25%          0.000000e+00  0.000000e+00                1.650000e+01   \n50%          0.000000e+00  0.000000e+00                3.180000e+01   \n75%          0.000000e+00  2.200000e+01                4.410000e+01   \nmax          4.900000e+01  2.290000e+02                1.083000e+02   \n       air_temperature_tmmn  potential_evapotranspiration  \\\ncount          1.438061e+06                  1.438061e+06   \nmean           2.720682e+02                  4.334462e+00   \nstd            1.119648e+01                  2.850435e+00   \nmin            0.000000e+00                  0.000000e+00   \n25%            2.667000e+02                  1.900000e+00   \n50%            2.724000e+02                  3.800000e+00   \n75%            2.785000e+02                  6.400000e+00   \nmax            2.991000e+02                  2.190000e+01   \n       mean_vapor_pressure_deficit  relative_humidity_rmax  \\\ncount                 1.438061e+06            1.438061e+06   \nmean                  7.322114e-01            7.101552e+01   \nstd                   6.561488e-01            2.062073e+01   \nmin                   0.000000e+00            0.000000e+00   \n25%                   2.300000e-01            5.530000e+01   \n50%                   5.300000e-01            7.230000e+01   \n75%                   1.070000e+00            8.820001e+01   \nmax                   7.140000e+00            1.000000e+02   \n       relative_humidity_rmin  precipitation_amount  air_temperature_tmmx  \\\ncount            1.438061e+06          1.438061e+06          1.438061e+06   \nmean             3.567318e+01          2.570251e+00          2.837347e+02   \nstd              1.895046e+01          7.067832e+00          1.263387e+01   \nmin              0.000000e+00          0.000000e+00          0.000000e+00   \n25%              2.110000e+01          0.000000e+00          2.760000e+02   \n50%              3.160000e+01          0.000000e+00          2.833000e+02   \n75%              4.760000e+01          2.100000e+00          2.922000e+02   \nmax              1.000000e+02          5.042000e+02          3.147000e+02   \n         wind_speed     elevation     Elevation         Slope        Aspect  \\\ncount  1.438061e+06  1.438061e+06  1.438061e+06  1.438061e+06  1.438061e+06   \nmean   4.133040e+00  7.552883e+03  2.315878e+03  4.540822e-01  1.698657e+02   \nstd    1.944006e+00  2.003133e+03  6.712892e+02  4.548148e-01  9.632127e+01   \nmin    0.000000e+00  4.200000e+02  7.343417e+01  8.322144e-02  9.394166e-01   \n25%    2.700000e+00  6.190000e+03  1.877333e+03  2.184143e-01  9.357574e+01   \n50%    3.700000e+00  7.760000e+03  2.376719e+03  3.150559e-01  1.669088e+02   \n75%    5.100000e+00  9.080000e+03  2.809225e+03  5.067368e-01  2.458344e+02   \nmax    1.960000e+01  1.162600e+04  3.978188e+03  4.869782e+00  3.599130e+02   \n          Curvature     Northness      Eastness          fsca         SWE_1  \\\ncount  1.438061e+06  1.438061e+06  1.438061e+06  1.438061e+06  1.438061e+06   \nmean  -3.441432e+03 -9.395431e-02 -6.803081e-02  2.376726e+01  9.891772e+00   \nstd    4.910423e+03  5.880387e-01  5.708757e-01  2.760089e+01  1.802468e+01   \nmin   -2.198460e+04 -7.853982e-01 -7.853979e-01  0.000000e+00  0.000000e+00   \n25%   -6.225868e+03 -6.945519e-01 -6.455206e-01  0.000000e+00  0.000000e+00   \n50%   -3.205518e+03 -2.090330e-01 -1.286902e-01  0.000000e+00  0.000000e+00   \n75%   -1.612075e+02  5.073022e-01  5.119705e-01  5.066500e+01  1.800000e+01   \nmax    1.757020e+04  7.853976e-01  7.853982e-01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_1  potential_evapotranspiration_1  \\\ncount            1.438061e+06                    1.438061e+06   \nmean             2.719077e+02                    4.330675e+00   \nstd              1.308125e+01                    2.851305e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.667000e+02                    1.900000e+00   \n50%              2.724000e+02                    3.800000e+00   \n75%              2.785000e+02                    6.400000e+00   \nmax              2.991000e+02                    2.190000e+01   \n       mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\ncount                   1.438061e+06              1.438061e+06   \nmean                    7.317259e-01              7.095967e+01   \nstd                     6.561729e-01              2.068839e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.300000e-01              5.520000e+01   \n50%                     5.300000e-01              7.230000e+01   \n75%                     1.070000e+00              8.820001e+01   \nmax                     7.140000e+00              1.000000e+02   \n       relative_humidity_rmin_1  precipitation_amount_1  \\\ncount              1.438061e+06            1.438061e+06   \nmean               3.563467e+01            2.566542e+00   \nstd                1.895674e+01            7.064646e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                2.100000e+01            0.000000e+00   \n50%                3.160000e+01            0.000000e+00   \n75%                4.750000e+01            2.100000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_1  wind_speed_1        fsca_1         SWE_2  \\\ncount            1.438061e+06  1.438061e+06  1.438061e+06  1.438061e+06   \nmean             2.835683e+02  4.130678e+00  2.373645e+01  9.888999e+00   \nstd              1.446929e+01  1.946289e+00  2.759615e+01  1.802501e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.760000e+02  2.700000e+00  0.000000e+00  0.000000e+00   \n50%              2.833000e+02  3.700000e+00  0.000000e+00  0.000000e+00   \n75%              2.922000e+02  5.100000e+00  5.060000e+01  1.800000e+01   \nmax              3.147000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_2  potential_evapotranspiration_2  \\\ncount            1.438061e+06                    1.438061e+06   \nmean             2.717442e+02                    4.326648e+00   \nstd              1.472746e+01                    2.851983e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.667000e+02                    1.900000e+00   \n50%              2.724000e+02                    3.800000e+00   \n75%              2.785000e+02                    6.400000e+00   \nmax              2.991000e+02                    2.190000e+01   \n       mean_vapor_pressure_deficit_2  relative_humidity_rmax_2  \\\ncount                   1.438061e+06              1.438061e+06   \nmean                    7.312409e-01              7.090251e+01   \nstd                     6.561984e-01              2.075439e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.300000e-01              5.520000e+01   \n50%                     5.300000e-01              7.230000e+01   \n75%                     1.070000e+00              8.820001e+01   \nmax                     7.140000e+00              1.000000e+02   \n       relative_humidity_rmin_2  precipitation_amount_2  \\\ncount              1.438061e+06            1.438061e+06   \nmean               3.559808e+01            2.561584e+00   \nstd                1.896605e+01            7.060606e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                2.100000e+01            0.000000e+00   \n50%                3.160000e+01            0.000000e+00   \n75%                4.750000e+01            2.100000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_2  wind_speed_2        fsca_2         SWE_3  \\\ncount            1.438061e+06  1.438061e+06  1.438061e+06  1.438061e+06   \nmean             2.834010e+02  4.126466e+00  2.370560e+01  9.885242e+00   \nstd              1.609590e+01  1.946473e+00  2.759140e+01  1.802524e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.760000e+02  2.700000e+00  0.000000e+00  0.000000e+00   \n50%              2.833000e+02  3.700000e+00  0.000000e+00  0.000000e+00   \n75%              2.922000e+02  5.100000e+00  5.051150e+01  1.800000e+01   \nmax              3.147000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_3  potential_evapotranspiration_3  \\\ncount            1.438061e+06                    1.438061e+06   \nmean             2.715824e+02                    4.322632e+00   \nstd              1.620442e+01                    2.852953e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.667000e+02                    1.900000e+00   \n50%              2.724000e+02                    3.800000e+00   \n75%              2.785000e+02                    6.400000e+00   \nmax              2.991000e+02                    2.190000e+01   \n       mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\ncount                   1.438061e+06              1.438061e+06   \nmean                    7.307529e-01              7.084601e+01   \nstd                     6.562270e-01              2.082043e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.300000e-01              5.510000e+01   \n50%                     5.300000e-01              7.220001e+01   \n75%                     1.070000e+00              8.810000e+01   \nmax                     7.140000e+00              1.000000e+02   \n       relative_humidity_rmin_3  precipitation_amount_3  \\\ncount              1.438061e+06            1.438061e+06   \nmean               3.556236e+01            2.558499e+00   \nstd                1.897665e+01            7.059340e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                2.100000e+01            0.000000e+00   \n50%                3.150000e+01            0.000000e+00   \n75%                4.750000e+01            2.100000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_3  wind_speed_3        fsca_3         SWE_4  \\\ncount            1.438061e+06  1.438061e+06  1.438061e+06  1.438061e+06   \nmean             2.832350e+02  4.123493e+00  2.367470e+01  9.881227e+00   \nstd              1.756998e+01  1.948439e+00  2.758657e+01  1.802565e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.760000e+02  2.700000e+00  0.000000e+00  0.000000e+00   \n50%              2.833000e+02  3.700000e+00  0.000000e+00  0.000000e+00   \n75%              2.922000e+02  5.100000e+00  5.050000e+01  1.800000e+01   \nmax              3.147000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_4  potential_evapotranspiration_4  \\\ncount            1.438061e+06                    1.438061e+06   \nmean             2.714208e+02                    4.318486e+00   \nstd              1.755607e+01                    2.854046e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.667000e+02                    1.900000e+00   \n50%              2.724000e+02                    3.800000e+00   \n75%              2.785000e+02                    6.400000e+00   \nmax              2.991000e+02                    2.190000e+01   \n       mean_vapor_pressure_deficit_4  relative_humidity_rmax_4  \\\ncount                   1.438061e+06              1.438061e+06   \nmean                    7.302624e-01              7.079104e+01   \nstd                     6.562481e-01              2.088710e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.300000e-01              5.510000e+01   \n50%                     5.200301e-01              7.220001e+01   \n75%                     1.070000e+00              8.810000e+01   \nmax                     7.140000e+00              1.000000e+02   \n       relative_humidity_rmin_4  precipitation_amount_4  \\\ncount              1.438061e+06            1.438061e+06   \nmean               3.552586e+01            2.555536e+00   \nstd                1.898586e+01            7.056507e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                2.100000e+01            0.000000e+00   \n50%                3.150000e+01            0.000000e+00   \n75%                4.740000e+01            2.100000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_4  wind_speed_4        fsca_4         SWE_5  \\\ncount            1.438061e+06  1.438061e+06  1.438061e+06  1.438061e+06   \nmean             2.830697e+02  4.120401e+00  2.364388e+01  9.877759e+00   \nstd              1.892744e+01  1.950077e+00  2.758179e+01  1.802609e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.760000e+02  2.700000e+00  0.000000e+00  0.000000e+00   \n50%              2.833000e+02  3.700000e+00  0.000000e+00  0.000000e+00   \n75%              2.922000e+02  5.100000e+00  5.048284e+01  1.800000e+01   \nmax              3.147000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_5  potential_evapotranspiration_5  \\\ncount            1.438061e+06                    1.438061e+06   \nmean             2.712586e+02                    4.314544e+00   \nstd              1.880976e+01                    2.855403e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.667000e+02                    1.900000e+00   \n50%              2.724000e+02                    3.800000e+00   \n75%              2.785000e+02                    6.400000e+00   \nmax              2.991000e+02                    2.190000e+01   \n       mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\ncount                   1.438061e+06              1.438061e+06   \nmean                    7.297743e-01              7.073631e+01   \nstd                     6.562701e-01              2.095418e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.300000e-01              5.500000e+01   \n50%                     5.200000e-01              7.220001e+01   \n75%                     1.070000e+00              8.810000e+01   \nmax                     7.140000e+00              1.000000e+02   \n       relative_humidity_rmin_5  precipitation_amount_5  \\\ncount              1.438061e+06            1.438061e+06   \nmean               3.549031e+01            2.551028e+00   \nstd                1.899626e+01            7.050642e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                2.091481e+01            0.000000e+00   \n50%                3.150000e+01            0.000000e+00   \n75%                4.740000e+01            2.100000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_5  wind_speed_5        fsca_5         SWE_6  \\\ncount            1.438061e+06  1.438061e+06  1.438061e+06  1.438061e+06   \nmean             2.829036e+02  4.116319e+00  2.361297e+01  9.875790e+00   \nstd              2.019326e+01  1.950660e+00  2.757684e+01  1.802626e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.760000e+02  2.700000e+00  0.000000e+00  0.000000e+00   \n50%              2.833000e+02  3.700000e+00  0.000000e+00  0.000000e+00   \n75%              2.922000e+02  5.100000e+00  5.040000e+01  1.800000e+01   \nmax              3.147000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_6  potential_evapotranspiration_6  \\\ncount            1.438061e+06                    1.438061e+06   \nmean             2.710957e+02                    4.310355e+00   \nstd              1.998405e+01                    2.856428e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.667000e+02                    1.900000e+00   \n50%              2.724000e+02                    3.800000e+00   \n75%              2.785000e+02                    6.400000e+00   \nmax              2.991000e+02                    2.190000e+01   \n       mean_vapor_pressure_deficit_6  relative_humidity_rmax_6  \\\ncount                   1.438061e+06              1.438061e+06   \nmean                    7.292881e-01              7.067941e+01   \nstd                     6.562972e-01              2.101880e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.300000e-01              5.500000e+01   \n50%                     5.200000e-01              7.210000e+01   \n75%                     1.070000e+00              8.810000e+01   \nmax                     7.140000e+00              1.000000e+02   \n       relative_humidity_rmin_6  precipitation_amount_6  \\\ncount              1.438061e+06            1.438061e+06   \nmean               3.545400e+01            2.545208e+00   \nstd                1.900542e+01            7.043737e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                2.090000e+01            0.000000e+00   \n50%                3.150000e+01            0.000000e+00   \n75%                4.730000e+01            2.100000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_6  wind_speed_6        fsca_6         SWE_7  \\\ncount            1.438061e+06  1.438061e+06  1.438061e+06  1.438061e+06   \nmean             2.827364e+02  4.111277e+00  2.358244e+01  9.874517e+00   \nstd              2.138366e+01  1.949236e+00  2.757213e+01  1.802641e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.760000e+02  2.700000e+00  0.000000e+00  0.000000e+00   \n50%              2.833000e+02  3.700000e+00  0.000000e+00  0.000000e+00   \n75%              2.922000e+02  5.100000e+00  5.033490e+01  1.800000e+01   \nmax              3.147000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_7  potential_evapotranspiration_7  \\\ncount            1.438061e+06                    1.438061e+06   \nmean             2.709306e+02                    4.306375e+00   \nstd              2.109259e+01                    2.857732e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.667000e+02                    1.900000e+00   \n50%              2.724000e+02                    3.800000e+00   \n75%              2.785000e+02                    6.400000e+00   \nmax              2.991000e+02                    2.190000e+01   \n       mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\ncount                   1.438061e+06              1.438061e+06   \nmean                    7.288081e-01              7.062359e+01   \nstd                     6.563301e-01              2.108432e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.300000e-01              5.490000e+01   \n50%                     5.200000e-01              7.210000e+01   \n75%                     1.070000e+00              8.800000e+01   \nmax                     7.140000e+00              1.000000e+02   \n       relative_humidity_rmin_7  precipitation_amount_7  \\\ncount              1.438061e+06            1.438061e+06   \nmean               3.541726e+01            2.539266e+00   \nstd                1.901403e+01            7.032727e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                2.090000e+01            0.000000e+00   \n50%                3.140000e+01            0.000000e+00   \n75%                4.730000e+01            2.100000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_7  wind_speed_7        fsca_7  \ncount            1.438061e+06  1.438061e+06  1.438061e+06  \nmean             2.825680e+02  4.107006e+00  2.355229e+01  \nstd              2.251069e+01  1.949846e+00  2.756748e+01  \nmin              0.000000e+00  0.000000e+00  0.000000e+00  \n25%              2.760000e+02  2.700000e+00  0.000000e+00  \n50%              2.833000e+02  3.700000e+00  0.000000e+00  \n75%              2.922000e+02  5.100000e+00  5.030394e+01  \nmax              3.147000e+02  1.960000e+01  9.600000e+01  \nThis is our unique years [2018 2019 2020 2021]\nhow many rows are left in the three water years?                 lat           lon           SWE     swe_value  \\\ncount  1.075041e+06  1.075041e+06  1.075041e+06  1.075041e+06   \nmean   4.175147e+01 -1.142701e+02  8.476187e+00  6.038476e+00   \nstd    3.640937e+00  5.469904e+00  1.868724e+01  1.005967e+01   \nmin    3.292342e+01 -1.242667e+02  0.000000e+00 -8.000000e+00   \n25%    3.889435e+01 -1.196620e+02  0.000000e+00  0.000000e+00   \n50%    4.122155e+01 -1.136705e+02  0.000000e+00  7.000000e-01   \n75%    4.465567e+01 -1.100578e+02  0.000000e+00  8.700000e+00   \nmax    4.897523e+01 -1.037876e+02  2.340000e+02  1.021000e+02   \n       change_in_swe_inch    snow_depth  air_temperature_observed_f  \\\ncount        1.075041e+06  1.075041e+06                1.075041e+06   \nmean         1.140422e-03  1.465725e+01                2.940286e+01   \nstd          1.632333e+00  2.397309e+01                1.878445e+01   \nmin         -6.900000e+01  0.000000e+00               -8.660000e+01   \n25%          0.000000e+00  0.000000e+00                1.620000e+01   \n50%          0.000000e+00  0.000000e+00                3.150000e+01   \n75%          0.000000e+00  2.400000e+01                4.410000e+01   \nmax          4.900000e+01  2.290000e+02                1.083000e+02   \n       air_temperature_tmmn  potential_evapotranspiration  \\\ncount          1.075041e+06                  1.075041e+06   \nmean           2.718629e+02                  4.050413e+00   \nstd            1.123373e+01                  2.751499e+00   \nmin            0.000000e+00                  0.000000e+00   \n25%            2.663000e+02                  1.800000e+00   \n50%            2.721000e+02                  3.400000e+00   \n75%            2.785000e+02                  6.000000e+00   \nmax            2.991000e+02                  2.180000e+01   \n       mean_vapor_pressure_deficit  relative_humidity_rmax  \\\ncount                 1.075041e+06            1.075041e+06   \nmean                  7.216063e-01            6.968985e+01   \nstd                   6.748037e-01            2.099316e+01   \nmin                   0.000000e+00            0.000000e+00   \n25%                   2.200000e-01            5.330000e+01   \n50%                   5.000000e-01            7.079868e+01   \n75%                   1.040000e+00            8.720001e+01   \nmax                   7.120000e+00            1.000000e+02   \n       relative_humidity_rmin  precipitation_amount  air_temperature_tmmx  \\\ncount            1.075041e+06          1.075041e+06          1.075041e+06   \nmean             3.573714e+01          2.482211e+00          2.839424e+02   \nstd              1.895468e+01          6.656455e+00          1.266647e+01   \nmin              0.000000e+00          0.000000e+00          0.000000e+00   \n25%              2.120000e+01          0.000000e+00          2.760000e+02   \n50%              3.170000e+01          0.000000e+00          2.835000e+02   \n75%              4.750000e+01          2.100000e+00          2.926000e+02   \nmax              1.000000e+02          2.681000e+02          3.147000e+02   \n         wind_speed     elevation     Elevation         Slope        Aspect  \\\ncount  1.075041e+06  1.075041e+06  1.075041e+06  1.075041e+06  1.075041e+06   \nmean   4.094805e+00  7.549310e+03  2.314784e+03  4.547217e-01  1.699981e+02   \nstd    1.907756e+00  2.001896e+03  6.716421e+02  4.569083e-01  9.634905e+01   \nmin    0.000000e+00  4.200000e+02  7.343417e+01  8.322144e-02  9.394166e-01   \n25%    2.700000e+00  6.190000e+03  1.877333e+03  2.181244e-01  9.465331e+01   \n50%    3.700000e+00  7.760000e+03  2.375609e+03  3.150559e-01  1.668641e+02   \n75%    5.000000e+00  9.069000e+03  2.806601e+03  5.067368e-01  2.458344e+02   \nmax    1.960000e+01  1.162600e+04  3.978188e+03  4.869782e+00  3.599130e+02   \n          Curvature     Northness      Eastness          fsca         SWE_1  \\\ncount  1.075041e+06  1.075041e+06  1.075041e+06  1.075041e+06  1.075041e+06   \nmean  -3.442631e+03 -9.360435e-02 -6.903257e-02  2.482356e+01  8.491547e+00   \nstd    4.912067e+03  5.880218e-01  5.708660e-01  2.792298e+01  1.869289e+01   \nmin   -2.198460e+04 -7.853982e-01 -7.853979e-01  0.000000e+00  0.000000e+00   \n25%   -6.238082e+03 -6.945519e-01 -6.455206e-01  0.000000e+00  0.000000e+00   \n50%   -3.205518e+03 -2.071670e-01 -1.286902e-01  7.000000e+00  0.000000e+00   \n75%   -1.696209e+02  5.013258e-01  5.119705e-01  5.200000e+01  0.000000e+00   \nmax    1.757020e+04  7.853976e-01  7.853982e-01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_1  potential_evapotranspiration_1  \\\ncount            1.075041e+06                    1.075041e+06   \nmean             2.718613e+02                    4.047113e+00   \nstd              1.128338e+01                    2.749076e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.663000e+02                    1.800000e+00   \n50%              2.721000e+02                    3.400000e+00   \n75%              2.785000e+02                    6.000000e+00   \nmax              2.991000e+02                    2.180000e+01   \n       mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\ncount                   1.075041e+06              1.075041e+06   \nmean                    7.214732e-01              6.969537e+01   \nstd                     6.746126e-01              2.099518e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.200000e-01              5.330000e+01   \n50%                     5.000000e-01              7.080000e+01   \n75%                     1.040000e+00              8.720001e+01   \nmax                     7.120000e+00              1.000000e+02   \n       relative_humidity_rmin_1  precipitation_amount_1  \\\ncount              1.075041e+06            1.075041e+06   \nmean               3.573935e+01            2.481004e+00   \nstd                1.895205e+01            6.654878e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                2.120000e+01            0.000000e+00   \n50%                3.170000e+01            0.000000e+00   \n75%                4.750000e+01            2.100000e+00   \nmax                1.000000e+02            2.681000e+02   \n       air_temperature_tmmx_1  wind_speed_1        fsca_1         SWE_2  \\\ncount            1.075041e+06  1.075041e+06  1.075041e+06  1.075041e+06   \nmean             2.839335e+02  4.096286e+00  2.482361e+01  8.506891e+00   \nstd              1.271473e+01  1.908337e+00  2.792288e+01  1.869852e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.760000e+02  2.700000e+00  0.000000e+00  0.000000e+00   \n50%              2.835000e+02  3.700000e+00  7.000000e+00  0.000000e+00   \n75%              2.926000e+02  5.000000e+00  5.200000e+01  0.000000e+00   \nmax              3.147000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_2  potential_evapotranspiration_2  \\\ncount            1.075041e+06                    1.075041e+06   \nmean             2.718609e+02                    4.044407e+00   \nstd              1.133332e+01                    2.747731e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.663000e+02                    1.800000e+00   \n50%              2.721000e+02                    3.400000e+00   \n75%              2.785000e+02                    6.000000e+00   \nmax              2.991000e+02                    2.180000e+01   \n       mean_vapor_pressure_deficit_2  relative_humidity_rmax_2  \\\ncount                   1.075041e+06              1.075041e+06   \nmean                    7.215147e-01              6.971379e+01   \nstd                     6.744550e-01              2.099674e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.200000e-01              5.330000e+01   \n50%                     5.000000e-01              7.080000e+01   \n75%                     1.040000e+00              8.720001e+01   \nmax                     7.120000e+00              1.000000e+02   \n       relative_humidity_rmin_2  precipitation_amount_2  \\\ncount              1.075041e+06            1.075041e+06   \nmean               3.572945e+01            2.479585e+00   \nstd                1.895451e+01            6.654049e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                2.120000e+01            0.000000e+00   \n50%                3.170000e+01            0.000000e+00   \n75%                4.750000e+01            2.100000e+00   \nmax                1.000000e+02            2.681000e+02   \n       air_temperature_tmmx_2  wind_speed_2        fsca_2         SWE_3  \\\ncount            1.075041e+06  1.075041e+06  1.075041e+06  1.075041e+06   \nmean             2.839261e+02  4.097382e+00  2.482403e+01  8.522197e+00   \nstd              1.276345e+01  1.908572e+00  2.792286e+01  1.870396e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.760000e+02  2.700000e+00  0.000000e+00  0.000000e+00   \n50%              2.835000e+02  3.700000e+00  7.001644e+00  0.000000e+00   \n75%              2.926000e+02  5.000000e+00  5.200000e+01  0.000000e+00   \nmax              3.147000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_3  potential_evapotranspiration_3  \\\ncount            1.075041e+06                    1.075041e+06   \nmean             2.718588e+02                    4.042203e+00   \nstd              1.138284e+01                    2.746809e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.663000e+02                    1.800000e+00   \n50%              2.721000e+02                    3.400000e+00   \n75%              2.785000e+02                    6.000000e+00   \nmax              2.991000e+02                    2.180000e+01   \n       mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\ncount                   1.075041e+06              1.075041e+06   \nmean                    7.217265e-01              6.973903e+01   \nstd                     6.743870e-01              2.099516e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.200000e-01              5.330000e+01   \n50%                     5.000000e-01              7.080000e+01   \n75%                     1.040000e+00              8.720001e+01   \nmax                     7.120000e+00              1.000000e+02   \n       relative_humidity_rmin_3  precipitation_amount_3  \\\ncount              1.075041e+06            1.075041e+06   \nmean               3.571180e+01            2.476744e+00   \nstd                1.895388e+01            6.652454e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                2.120000e+01            0.000000e+00   \n50%                3.170000e+01            0.000000e+00   \n75%                4.750000e+01            2.100000e+00   \nmax                1.000000e+02            2.681000e+02   \n       air_temperature_tmmx_3  wind_speed_3        fsca_3         SWE_4  \\\ncount            1.075041e+06  1.075041e+06  1.075041e+06  1.075041e+06   \nmean             2.839192e+02  4.096565e+00  2.482444e+01  8.537486e+00   \nstd              1.281096e+01  1.908444e+00  2.792268e+01  1.870946e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.760000e+02  2.700000e+00  0.000000e+00  0.000000e+00   \n50%              2.835000e+02  3.700000e+00  7.002370e+00  0.000000e+00   \n75%              2.926000e+02  5.000000e+00  5.200000e+01  0.000000e+00   \nmax              3.147000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_4  potential_evapotranspiration_4  \\\ncount            1.075041e+06                    1.075041e+06   \nmean             2.718538e+02                    4.040172e+00   \nstd              1.143091e+01                    2.745348e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.663000e+02                    1.800000e+00   \n50%              2.721000e+02                    3.400000e+00   \n75%              2.785000e+02                    6.000000e+00   \nmax              2.991000e+02                    2.180000e+01   \n       mean_vapor_pressure_deficit_4  relative_humidity_rmax_4  \\\ncount                   1.075041e+06              1.075041e+06   \nmean                    7.219905e-01              6.976342e+01   \nstd                     6.743484e-01              2.098667e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.200000e-01              5.340000e+01   \n50%                     5.000000e-01              7.080000e+01   \n75%                     1.040000e+00              8.720001e+01   \nmax                     7.120000e+00              1.000000e+02   \n       relative_humidity_rmin_4  precipitation_amount_4  \\\ncount              1.075041e+06            1.075041e+06   \nmean               3.570172e+01            2.474003e+00   \nstd                1.895408e+01            6.648323e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                2.120000e+01            0.000000e+00   \n50%                3.160000e+01            0.000000e+00   \n75%                4.750000e+01            2.100000e+00   \nmax                1.000000e+02            2.681000e+02   \n       air_temperature_tmmx_4  wind_speed_4        fsca_4         SWE_5  \\\ncount            1.075041e+06  1.075041e+06  1.075041e+06  1.075041e+06   \nmean             2.839107e+02  4.096222e+00  2.482457e+01  8.552818e+00   \nstd              1.285637e+01  1.908462e+00  2.792255e+01  1.871495e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.760000e+02  2.700000e+00  0.000000e+00  0.000000e+00   \n50%              2.835000e+02  3.700000e+00  7.003523e+00  0.000000e+00   \n75%              2.926000e+02  5.000000e+00  5.200000e+01  0.000000e+00   \nmax              3.147000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_5  potential_evapotranspiration_5  \\\ncount            1.075041e+06                    1.075041e+06   \nmean             2.718460e+02                    4.037452e+00   \nstd              1.147748e+01                    2.742928e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.663000e+02                    1.800000e+00   \n50%              2.721000e+02                    3.400000e+00   \n75%              2.785000e+02                    6.000000e+00   \nmax              2.991000e+02                    2.180000e+01   \n       mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\ncount                   1.075041e+06              1.075041e+06   \nmean                    7.221355e-01              6.978197e+01   \nstd                     6.742093e-01              2.097995e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.200000e-01              5.340000e+01   \n50%                     5.000000e-01              7.090000e+01   \n75%                     1.040000e+00              8.720452e+01   \nmax                     7.120000e+00              1.000000e+02   \n       relative_humidity_rmin_5  precipitation_amount_5  \\\ncount              1.075041e+06            1.075041e+06   \nmean               3.569583e+01            2.472818e+00   \nstd                1.895714e+01            6.645629e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                2.120000e+01            0.000000e+00   \n50%                3.160000e+01            0.000000e+00   \n75%                4.750000e+01            2.100000e+00   \nmax                1.000000e+02            2.681000e+02   \n       air_temperature_tmmx_5  wind_speed_5        fsca_5         SWE_6  \\\ncount            1.075041e+06  1.075041e+06  1.075041e+06  1.075041e+06   \nmean             2.839039e+02  4.095913e+00  2.482444e+01  8.568086e+00   \nstd              1.290201e+01  1.908597e+00  2.792253e+01  1.872040e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.760000e+02  2.700000e+00  0.000000e+00  0.000000e+00   \n50%              2.835000e+02  3.700000e+00  7.002370e+00  0.000000e+00   \n75%              2.926000e+02  5.000000e+00  5.200000e+01  0.000000e+00   \nmax              3.147000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_6  potential_evapotranspiration_6  \\\ncount            1.075041e+06                    1.075041e+06   \nmean             2.718374e+02                    4.034967e+00   \nstd              1.152360e+01                    2.741765e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.663000e+02                    1.800000e+00   \n50%              2.721000e+02                    3.400000e+00   \n75%              2.785000e+02                    6.000000e+00   \nmax              2.991000e+02                    2.180000e+01   \n       mean_vapor_pressure_deficit_6  relative_humidity_rmax_6  \\\ncount                   1.075041e+06              1.075041e+06   \nmean                    7.221267e-01              6.978993e+01   \nstd                     6.739802e-01              2.097675e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.200000e-01              5.340000e+01   \n50%                     5.000000e-01              7.090000e+01   \n75%                     1.040000e+00              8.725080e+01   \nmax                     6.910000e+00              1.000000e+02   \n       relative_humidity_rmin_6  precipitation_amount_6  \\\ncount              1.075041e+06            1.075041e+06   \nmean               3.569651e+01            2.472902e+00   \nstd                1.895754e+01            6.645539e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                2.120000e+01            0.000000e+00   \n50%                3.160000e+01            0.000000e+00   \n75%                4.750000e+01            2.100000e+00   \nmax                1.000000e+02            2.681000e+02   \n       air_temperature_tmmx_6  wind_speed_6        fsca_6         SWE_7  \\\ncount            1.075041e+06  1.075041e+06  1.075041e+06  1.075041e+06   \nmean             2.838962e+02  4.095648e+00  2.482456e+01  8.583410e+00   \nstd              1.294681e+01  1.908784e+00  2.792241e+01  1.872587e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.760000e+02  2.700000e+00  0.000000e+00  0.000000e+00   \n50%              2.834966e+02  3.700000e+00  7.003544e+00  0.000000e+00   \n75%              2.926000e+02  5.000000e+00  5.200000e+01  0.000000e+00   \nmax              3.147000e+02  1.960000e+01  9.600000e+01  2.340000e+02   \n       air_temperature_tmmn_7  potential_evapotranspiration_7  \\\ncount            1.075041e+06                    1.075041e+06   \nmean             2.718308e+02                    4.032333e+00   \nstd              1.156719e+01                    2.740272e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.663000e+02                    1.800000e+00   \n50%              2.721000e+02                    3.400000e+00   \n75%              2.785000e+02                    6.000000e+00   \nmax              2.991000e+02                    2.180000e+01   \n       mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\ncount                   1.075041e+06              1.075041e+06   \nmean                    7.220289e-01              6.979409e+01   \nstd                     6.737392e-01              2.097874e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.200000e-01              5.340000e+01   \n50%                     5.000000e-01              7.090000e+01   \n75%                     1.040000e+00              8.730000e+01   \nmax                     6.910000e+00              1.000000e+02   \n       relative_humidity_rmin_7  precipitation_amount_7  \\\ncount              1.075041e+06            1.075041e+06   \nmean               3.570192e+01            2.473228e+00   \nstd                1.895677e+01            6.645349e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                2.120000e+01            0.000000e+00   \n50%                3.170000e+01            0.000000e+00   \n75%                4.750000e+01            2.100000e+00   \nmax                1.000000e+02            2.681000e+02   \n       air_temperature_tmmx_7  wind_speed_7        fsca_7  \ncount            1.075041e+06  1.075041e+06  1.075041e+06  \nmean             2.838892e+02  4.097028e+00  2.482452e+01  \nstd              1.298888e+01  1.908612e+00  2.792231e+01  \nmin              0.000000e+00  0.000000e+00  0.000000e+00  \n25%              2.760000e+02  2.700000e+00  0.000000e+00  \n50%              2.834053e+02  3.700000e+00  7.003557e+00  \n75%              2.926000e+02  5.000000e+00  5.200000e+01  \nmax              3.147000e+02  1.960000e+01  9.600000e+01  \nhow many groups?  <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7f440c440640>\nThis is the dataframe after cumulative columns are added\ncount    1.075041e+06\nmean     8.189756e+03\nstd      9.326563e+03\nmin      0.000000e+00\n25%      2.258433e+03\n50%      6.147414e+03\n75%      9.989164e+03\nmax      6.203122e+04\nName: cumulative_fsca, dtype: float64\nAll the cumulative variables are added successfully! /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_active_stations_v1.csv_sorted.csv_cleaned_nodata.csv_time_series_cumulative_v1.csv\ndouble check the swe_value statistics: count    1.075041e+06\nmean     6.038476e+00\nstd      1.005967e+01\nmin     -8.000000e+00\n25%      0.000000e+00\n50%      7.000000e-01\n75%      8.700000e+00\nmax      1.021000e+02\nName: swe_value, dtype: float64\n",
  "history_begin_time" : 1703622365762,
  "history_end_time" : 1703623073488,
  "history_notes" : "Remove the nodata rows in the dataframe",
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "mhEezwtbxfPe",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    if column_name == \"SWE\":\n      mask = (y > 240) | y.isnull()\n    elif column_name == \"fsca\":\n      mask = (y > 100) | y.isnull()\n    else:\n      mask = y.isnull()\n\n    # Check if all elements in the mask array are True\n    all_true = np.all(mask)\n\n    if all_true:\n      df[column_name] = 0\n    else:\n      # Perform interpolation\n      new_y = np.interp(x, x[~mask], y[~mask])\n      # Replace missing values with interpolated values\n      df[column_name] = new_y\n\n    if np.any(df[column_name].isnull()):\n      raise ValueError(\"Single group: shouldn't have null values here\")\n        \n    return df\n\ndef convert_to_time_series(input_csv, output_csv):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                         'AMSR_SWE': 'SWE',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv):\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['fsca'] > 100):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        filled_data.to_csv(filled_csv, index=False)\n        \n        print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv):\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n        result.fillna(0, inplace=True)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv, force=False):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_cumulated = [\n      \"SWE\",\n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv)\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2018-10-01')\n    end_date = pd.to_datetime('2021-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df[\"cumulative_fsca\"].describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n\ndef clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path):\n    # Read Dask DataFrame from CSV\n    dask_df = dd.read_csv(current_ready_csv_path)\n\n    # Remove rows where 'swe_value' is empty\n    dask_df_filtered = dask_df.dropna(subset=['swe_value'])\n\n    # Save the result to a new CSV file\n    dask_df_filtered.to_csv(cleaned_csv_path, index=False, single_file=True)\n    print(\"dask_df_filtered.shape = \", dask_df_filtered.shape)\n    print(f\"The filtered csv with no swe values is saved to {cleaned_csv_path}\")\n\nif __name__ == \"__main__\":\n    # Define file paths for various CSV files\n    # current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n    current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_active_stations_v1.csv_sorted.csv'\n    cleaned_csv_path = f\"{current_ready_csv_path}_cleaned_nodata.csv\"\n    target_time_series_csv_path = f'{cleaned_csv_path}_time_series_v1.csv'\n    backup_time_series_csv_path = f'{cleaned_csv_path}_time_series_v1_bak.csv'\n    # target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n    target_time_series_cumulative_csv_path = f'{cleaned_csv_path}_time_series_cumulative_v1.csv'\n    \n    \n    # remove the empty swe_value rows first\n    clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path)\n  \n    # Uncomment this line to execute the 'convert_to_time_series' function\n    convert_to_time_series(cleaned_csv_path, target_time_series_csv_path)\n\n    # Uncomment this line to execute the 'add_cumulative_columns' function\n    add_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path, force=True)\n",
  "history_output" : "today date = 2023-12-26\ntest start date:  2023-01-20\ntest end date:  2023-10-11\n/home/chetana\n2022275\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/mhEezwtbxfPe/convert_to_time_series.py\", line 247, in <module>\n    clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path)\n  File \"/home/chetana/gw-workspace/mhEezwtbxfPe/convert_to_time_series.py\", line 225, in clean_non_swe_rows\n    dask_df = dd.read_csv(current_ready_csv_path)\nNameError: name 'dd' is not defined\n",
  "history_begin_time" : 1703621902524,
  "history_end_time" : 1703621903330,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "QNSbs3l4PSwr",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    if column_name == \"SWE\":\n      mask = (y > 240) | y.isnull()\n    elif column_name == \"fsca\":\n      mask = (y > 100) | y.isnull()\n    else:\n      mask = y.isnull()\n\n    # Check if all elements in the mask array are True\n    all_true = np.all(mask)\n\n    if all_true:\n      df[column_name] = 0\n    else:\n      # Perform interpolation\n      new_y = np.interp(x, x[~mask], y[~mask])\n      # Replace missing values with interpolated values\n      df[column_name] = new_y\n\n    if np.any(df[column_name].isnull()):\n      raise ValueError(\"Single group: shouldn't have null values here\")\n        \n    return df\n\ndef convert_to_time_series(input_csv, output_csv):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                         'AMSR_SWE': 'SWE',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv):\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['fsca'] > 100):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        filled_data.to_csv(filled_csv, index=False)\n        \n        print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv):\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n        result.fillna(0, inplace=True)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv, force=False):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_cumulated = [\n      \"SWE\",\n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv)\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2018-10-01')\n    end_date = pd.to_datetime('2021-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df[\"cumulative_fsca\"].describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n    \n\nif __name__ == \"__main__\":\n    # Define file paths for various CSV files\n    # current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n    current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_active_stations_v1.csv_sorted.csv'\n    cleaned_csv_path = f\"{current_ready_csv_path}_cleaned_nodata.csv\"\n    target_time_series_csv_path = f'{cleaned_csv_path}_time_series_v1.csv'\n    backup_time_series_csv_path = f'{cleaned_csv_path}_time_series_v1_bak.csv'\n    # target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n    target_time_series_cumulative_csv_path = f'{cleaned_csv_path}_time_series_cumulative_v1.csv'\n    \n    \n    # remove the empty swe_value rows first\n    clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path)\n  \n    # Uncomment this line to execute the 'convert_to_time_series' function\n    convert_to_time_series(cleaned_csv_path, target_time_series_csv_path)\n\n    # Uncomment this line to execute the 'add_cumulative_columns' function\n    add_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path, force=True)\n",
  "history_output" : "today date = 2023-12-26\ntest start date:  2023-01-20\ntest end date:  2023-10-11\n/home/chetana\n2022275\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/QNSbs3l4PSwr/convert_to_time_series.py\", line 236, in <module>\n    clean_non_swe_rows(current_ready_csv_path, cleaned_csv_path)\nNameError: name 'clean_non_swe_rows' is not defined\n",
  "history_begin_time" : 1703621383462,
  "history_end_time" : 1703621387124,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "6hSacMqhAOfa",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n# Define file paths for various CSV files\n# current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_active_stations_v1.csv_sorted.csv'\ntarget_time_series_csv_path = f'{current_ready_csv_path}_time_series_v1.csv'\nbackup_time_series_csv_path = f'{current_ready_csv_path}_time_series_v1_bak.csv'\n# target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\ntarget_time_series_cumulative_csv_path = f'{current_ready_csv_path}_time_series_cumulative_v1.csv'\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    if column_name == \"SWE\":\n      mask = (y > 240) | y.isnull()\n    elif column_name == \"fsca\":\n      mask = (y > 100) | y.isnull()\n    else:\n      mask = y.isnull()\n\n    # Check if all elements in the mask array are True\n    all_true = np.all(mask)\n\n    if all_true:\n      df[column_name] = 0\n    else:\n      # Perform interpolation\n      new_y = np.interp(x, x[~mask], y[~mask])\n      # Replace missing values with interpolated values\n      df[column_name] = new_y\n\n    if np.any(df[column_name].isnull()):\n      raise ValueError(\"Single group: shouldn't have null values here\")\n        \n    return df\n\ndef convert_to_time_series(input_csv, output_csv):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                         'AMSR_SWE': 'SWE',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv):\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['fsca'] > 100):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        filled_data.to_csv(filled_csv, index=False)\n        \n        print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv):\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n        result.fillna(0, inplace=True)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv, force=False):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_cumulated = [\n      \"SWE\",\n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv)\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2018-10-01')\n    end_date = pd.to_datetime('2021-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df[\"cumulative_fsca\"].describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n    \n\nif __name__ == \"__main__\":\n    # Uncomment this line to execute the 'convert_to_time_series' function\n    convert_to_time_series(current_ready_csv_path, target_time_series_csv_path)\n\n    # Uncomment this line to execute the 'add_cumulative_columns' function\n    add_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path, force=True)\n",
  "history_output" : "today date = 2023-12-26\ntest start date:  2023-01-20\ntest end date:  2023-10-11\n/home/chetana\n2022275\nAll current columns:  Index(['date', 'lat', 'lon', 'AMSR_SWE', 'station_name', 'swe_value',\n       'change_in_swe_inch', 'snow_depth', 'air_temperature_observed_f',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'stationTriplet', 'elevation',\n       'Elevation', 'Slope', 'Aspect', 'Curvature', 'Northness', 'Eastness',\n       'fsca'],\n      dtype='object')\n/home/chetana/gridmet_test_run/final_merged_data_3yrs_all_active_stations_v1.csv_sorted.csv_time_series_v1.csv_gap_filled.csv already exists, skipping\n/home/chetana/gridmet_test_run/final_merged_data_3yrs_all_active_stations_v1.csv_sorted.csv_time_series_v1.csv already exists, skipping\n/home/chetana/gw-workspace/6hSacMqhAOfa/convert_to_time_series.py:185: DtypeWarning: Columns (4) have mixed types. Specify dtype option on import or set low_memory=False.\n  df = pd.read_csv(input_csv)\nthe column statistics from time series before cumulative:                  lat           lon           SWE     swe_value  \\\ncount  5.831374e+06  5.831374e+06  5.831374e+06  5.831374e+06   \nmean   4.190023e+01 -1.136720e+02  8.872740e+00  1.402257e+00   \nstd    3.848358e+00  5.685628e+00  1.807279e+01  5.470743e+00   \nmin    3.141666e+01 -1.245500e+02  0.000000e+00 -8.000000e+00   \n25%    3.893601e+01 -1.191265e+02  0.000000e+00  0.000000e+00   \n50%    4.158700e+01 -1.129643e+02  0.000000e+00  0.000000e+00   \n75%    4.494000e+01 -1.090667e+02  1.300000e+01  0.000000e+00   \nmax    4.900000e+01 -1.005075e+02  2.400000e+02  1.066000e+02   \n       change_in_swe_inch    snow_depth  air_temperature_observed_f  \\\ncount        5.831374e+06  5.831374e+06                5.831374e+06   \nmean         2.774989e-03  3.850921e+00                9.494213e+00   \nstd          1.151723e+00  1.384436e+01                1.779046e+01   \nmin         -3.010000e+02  0.000000e+00               -8.660000e+01   \n25%          0.000000e+00  0.000000e+00                0.000000e+00   \n50%          0.000000e+00  0.000000e+00                0.000000e+00   \n75%          0.000000e+00  0.000000e+00                9.100000e+00   \nmax          4.620000e+02  4.620000e+02                6.710000e+02   \n       air_temperature_tmmn  potential_evapotranspiration  \\\ncount          5.831374e+06                  5.831374e+06   \nmean           2.733119e+02                  4.355479e+00   \nstd            9.762602e+00                  2.859076e+00   \nmin            0.000000e+00                  0.000000e+00   \n25%            2.675998e+02                  1.900000e+00   \n50%            2.735000e+02                  3.800327e+00   \n75%            2.799000e+02                  6.500000e+00   \nmax            3.085000e+02                  2.480000e+01   \n       mean_vapor_pressure_deficit  relative_humidity_rmax  \\\ncount                 5.831374e+06            5.831374e+06   \nmean                  7.726802e-01            7.382125e+01   \nstd                   6.945363e-01            2.029552e+01   \nmin                   0.000000e+00            0.000000e+00   \n25%                   2.400000e-01            5.890000e+01   \n50%                   5.500000e-01            7.590000e+01   \n75%                   1.130000e+00            9.150000e+01   \nmax                   7.660000e+00            1.000000e+02   \n       relative_humidity_rmin  precipitation_amount  air_temperature_tmmx  \\\ncount            5.831374e+06          5.831374e+06          5.831374e+06   \nmean             3.433630e+01          1.899181e+00          2.864632e+02   \nstd              1.876338e+01          5.797270e+00          1.182823e+01   \nmin              0.000000e+00          0.000000e+00          0.000000e+00   \n25%              1.990000e+01          0.000000e+00          2.778000e+02   \n50%              3.040000e+01          0.000000e+00          2.860000e+02   \n75%              4.600000e+01          1.200000e+00          2.952000e+02   \nmax              1.000000e+02          5.042000e+02          3.223000e+02   \n         wind_speed     elevation     Elevation         Slope        Aspect  \\\ncount  5.831374e+06  5.831374e+06  5.831374e+06  5.831374e+06  5.831374e+06   \nmean   3.942010e+00  5.999921e+03  1.904316e+03  1.031573e+00  1.867008e+02   \nstd    1.843856e+00  2.569634e+03  7.942218e+02  3.590236e+00  1.066232e+02   \nmin    0.000000e+00  1.000000e+01 -1.207950e+00  6.327820e-02 -0.000000e+00   \n25%    2.600000e+00  4.340000e+03  1.354743e+03  2.460251e-01  9.189144e+01   \n50%    3.600000e+00  6.200000e+03  1.935498e+03  4.256592e-01  1.912890e+02   \n75%    4.800000e+00  7.886000e+03  2.483709e+03  8.868256e-01  2.813530e+02   \nmax    1.960000e+01  1.170000e+04  3.978188e+03  9.000000e+01  3.599130e+02   \n          Curvature     Northness      Eastness          fsca         SWE_1  \\\ncount  5.831374e+06  5.831374e+06  5.831374e+06  5.831374e+06  5.831374e+06   \nmean  -6.338177e+02  3.744572e-02  3.848866e-02  1.712213e+01  8.869669e+00   \nstd    5.033858e+03  5.879777e-01  5.816885e-01  2.570079e+01  1.807285e+01   \nmin   -2.198460e+04 -7.853982e-01 -7.853979e-01  0.000000e+00  0.000000e+00   \n25%   -3.618001e+03 -5.882038e-01 -5.711176e-01  0.000000e+00  0.000000e+00   \n50%    2.900531e+02  9.371997e-02  8.551028e-02  0.000000e+00  0.000000e+00   \n75%    2.557073e+03  6.423781e-01  6.407763e-01  3.800000e+01  1.300000e+01   \nmax    1.757020e+04  7.853978e-01  7.853982e-01  9.700000e+01  2.400000e+02   \n       air_temperature_tmmn_1  potential_evapotranspiration_1  \\\ncount            5.831374e+06                    5.831374e+06   \nmean             2.731504e+02                    4.351597e+00   \nstd              1.190498e+01                    2.859914e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.675011e+02                    1.900000e+00   \n50%              2.735000e+02                    3.800000e+00   \n75%              2.799000e+02                    6.500000e+00   \nmax              3.085000e+02                    2.480000e+01   \n       mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\ncount                   5.831374e+06              5.831374e+06   \nmean                    7.721802e-01              7.376410e+01   \nstd                     6.945745e-01              2.037193e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.400000e-01              5.889685e+01   \n50%                     5.500000e-01              7.580000e+01   \n75%                     1.130000e+00              9.150000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_1  precipitation_amount_1  \\\ncount              5.831374e+06            5.831374e+06   \nmean               3.429772e+01            1.897124e+00   \nstd                1.876717e+01            5.795678e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.990000e+01            0.000000e+00   \n50%                3.040000e+01            0.000000e+00   \n75%                4.599831e+01            1.200000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_1  wind_speed_1        fsca_1         SWE_2  \\\ncount            5.831374e+06  5.831374e+06  5.831374e+06  5.831374e+06   \nmean             2.862952e+02  3.939851e+00  1.709503e+01  8.866244e+00   \nstd              1.381568e+01  1.846039e+00  2.568883e+01  1.807292e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.778000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.860000e+02  3.600000e+00  0.000000e+00  0.000000e+00   \n75%              2.952000e+02  4.800000e+00  3.800000e+01  1.300000e+01   \nmax              3.223000e+02  1.960000e+01  9.700000e+01  2.400000e+02   \n       air_temperature_tmmn_2  potential_evapotranspiration_2  \\\ncount            5.831374e+06                    5.831374e+06   \nmean             2.729858e+02                    4.347450e+00   \nstd              1.371809e+01                    2.860538e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.675000e+02                    1.900000e+00   \n50%              2.735000e+02                    3.800000e+00   \n75%              2.799000e+02                    6.500000e+00   \nmax              3.085000e+02                    2.480000e+01   \n       mean_vapor_pressure_deficit_2  relative_humidity_rmax_2  \\\ncount                   5.831374e+06              5.831374e+06   \nmean                    7.716782e-01              7.370582e+01   \nstd                     6.946119e-01              2.044700e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.400000e-01              5.880000e+01   \n50%                     5.500000e-01              7.580000e+01   \n75%                     1.130000e+00              9.140312e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_2  precipitation_amount_2  \\\ncount              5.831374e+06            5.831374e+06   \nmean               3.426314e+01            1.894248e+00   \nstd                1.877606e+01            5.793453e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.980000e+01            0.000000e+00   \n50%                3.040000e+01            0.000000e+00   \n75%                4.590000e+01            1.200000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_2  wind_speed_2        fsca_2         SWE_3  \\\ncount            5.831374e+06  5.831374e+06  5.831374e+06  5.831374e+06   \nmean             2.861258e+02  3.936180e+00  1.706793e+01  8.861901e+00   \nstd              1.555108e+01  1.846650e+00  2.567685e+01  1.807291e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.778000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.860000e+02  3.600000e+00  0.000000e+00  0.000000e+00   \n75%              2.952000e+02  4.800000e+00  3.790053e+01  1.300000e+01   \nmax              3.223000e+02  1.960000e+01  9.700000e+01  2.400000e+02   \n       air_temperature_tmmn_3  potential_evapotranspiration_3  \\\ncount            5.831374e+06                    5.831374e+06   \nmean             2.728230e+02                    4.343336e+00   \nstd              1.531489e+01                    2.861466e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.675000e+02                    1.900000e+00   \n50%              2.735000e+02                    3.800000e+00   \n75%              2.799000e+02                    6.500000e+00   \nmax              3.085000e+02                    2.480000e+01   \n       mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\ncount                   5.831374e+06              5.831374e+06   \nmean                    7.711760e-01              7.364954e+01   \nstd                     6.946503e-01              2.052278e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.400000e-01              5.880000e+01   \n50%                     5.500000e-01              7.580000e+01   \n75%                     1.130000e+00              9.140000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_3  precipitation_amount_3  \\\ncount              5.831374e+06            5.831374e+06   \nmean               3.422769e+01            1.892077e+00   \nstd                1.878438e+01            5.792529e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.980000e+01            0.000000e+00   \n50%                3.030000e+01            0.000000e+00   \n75%                4.590000e+01            1.100200e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_3  wind_speed_3        fsca_3         SWE_4  \\\ncount            5.831374e+06  5.831374e+06  5.831374e+06  5.831374e+06   \nmean             2.859580e+02  3.933487e+00  1.704085e+01  8.857529e+00   \nstd              1.710828e+01  1.848616e+00  2.566483e+01  1.807289e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.778000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.860000e+02  3.599600e+00  0.000000e+00  0.000000e+00   \n75%              2.952000e+02  4.800000e+00  3.766901e+01  1.300000e+01   \nmax              3.223000e+02  1.960000e+01  9.700000e+01  2.400000e+02   \n       air_temperature_tmmn_4  potential_evapotranspiration_4  \\\ncount            5.831374e+06                    5.831374e+06   \nmean             2.726601e+02                    4.339110e+00   \nstd              1.675875e+01                    2.862549e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.675000e+02                    1.900000e+00   \n50%              2.735000e+02                    3.800000e+00   \n75%              2.799000e+02                    6.498439e+00   \nmax              3.085000e+02                    2.480000e+01   \n       mean_vapor_pressure_deficit_4  relative_humidity_rmax_4  \\\ncount                   5.831374e+06              5.831374e+06   \nmean                    7.706729e-01              7.359432e+01   \nstd                     6.946898e-01              2.059840e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.400000e-01              5.870000e+01   \n50%                     5.500000e-01              7.570001e+01   \n75%                     1.130000e+00              9.140000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_4  precipitation_amount_4  \\\ncount              5.831374e+06            5.831374e+06   \nmean               3.419158e+01            1.890298e+00   \nstd                1.879167e+01            5.791821e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.980000e+01            0.000000e+00   \n50%                3.030000e+01            0.000000e+00   \n75%                4.580000e+01            1.100000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_4  wind_speed_4        fsca_4         SWE_5  \\\ncount            5.831374e+06  5.831374e+06  5.831374e+06  5.831374e+06   \nmean             2.857908e+02  3.930676e+00  1.701386e+01  8.853649e+00   \nstd              1.853298e+01  1.850310e+00  2.565290e+01  1.807293e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.778000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.860000e+02  3.500525e+00  0.000000e+00  0.000000e+00   \n75%              2.952000e+02  4.800000e+00  3.750156e+01  1.300000e+01   \nmax              3.223000e+02  1.960000e+01  9.700000e+01  2.400000e+02   \n       air_temperature_tmmn_5  potential_evapotranspiration_5  \\\ncount            5.831374e+06                    5.831374e+06   \nmean             2.724969e+02                    4.335111e+00   \nstd              1.808636e+01                    2.863902e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.675000e+02                    1.900000e+00   \n50%              2.735000e+02                    3.800000e+00   \n75%              2.799000e+02                    6.400000e+00   \nmax              3.085000e+02                    2.480000e+01   \n       mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\ncount                   5.831374e+06              5.831374e+06   \nmean                    7.701696e-01              7.353873e+01   \nstd                     6.947255e-01              2.067438e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.400000e-01              5.870000e+01   \n50%                     5.500000e-01              7.570001e+01   \n75%                     1.130000e+00              9.140000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_5  precipitation_amount_5  \\\ncount              5.831374e+06            5.831374e+06   \nmean               3.415632e+01            1.887170e+00   \nstd                1.879933e+01            5.788662e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.980000e+01            0.000000e+00   \n50%                3.030000e+01            0.000000e+00   \n75%                4.580000e+01            1.100000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_5  wind_speed_5        fsca_5         SWE_6  \\\ncount            5.831374e+06  5.831374e+06  5.831374e+06  5.831374e+06   \nmean             2.856229e+02  3.926977e+00  1.698698e+01  8.851081e+00   \nstd              1.985477e+01  1.851076e+00  2.564088e+01  1.807286e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.778000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.860000e+02  3.500000e+00  0.000000e+00  0.000000e+00   \n75%              2.952000e+02  4.800000e+00  3.740014e+01  1.300000e+01   \nmax              3.223000e+02  1.960000e+01  9.700000e+01  2.400000e+02   \n       air_temperature_tmmn_6  potential_evapotranspiration_6  \\\ncount            5.831374e+06                    5.831374e+06   \nmean             2.723329e+02                    4.330843e+00   \nstd              1.932210e+01                    2.864920e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.675000e+02                    1.900000e+00   \n50%              2.735000e+02                    3.800000e+00   \n75%              2.799000e+02                    6.400000e+00   \nmax              3.085000e+02                    2.480000e+01   \n       mean_vapor_pressure_deficit_6  relative_humidity_rmax_6  \\\ncount                   5.831374e+06              5.831374e+06   \nmean                    7.696691e-01              7.348127e+01   \nstd                     6.947638e-01              2.074845e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.400000e-01              5.860000e+01   \n50%                     5.500000e-01              7.570001e+01   \n75%                     1.130000e+00              9.130000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_6  precipitation_amount_6  \\\ncount              5.831374e+06            5.831374e+06   \nmean               3.412083e+01            1.883249e+00   \nstd                1.880629e+01            5.784789e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.970006e+01            0.000000e+00   \n50%                3.020000e+01            0.000000e+00   \n75%                4.570000e+01            1.100000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_6  wind_speed_6        fsca_6         SWE_7  \\\ncount            5.831374e+06  5.831374e+06  5.831374e+06  5.831374e+06   \nmean             2.854538e+02  3.922301e+00  1.696053e+01  8.849371e+00   \nstd              2.109345e+01  1.849889e+00  2.562934e+01  1.807283e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.778000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.860000e+02  3.500000e+00  0.000000e+00  0.000000e+00   \n75%              2.952000e+02  4.800000e+00  3.725183e+01  1.300000e+01   \nmax              3.223000e+02  1.960000e+01  9.700000e+01  2.400000e+02   \n       air_temperature_tmmn_7  potential_evapotranspiration_7  \\\ncount            5.831374e+06                    5.831374e+06   \nmean             2.721666e+02                    4.326846e+00   \nstd              2.048314e+01                    2.866261e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.675000e+02                    1.900000e+00   \n50%              2.735000e+02                    3.800000e+00   \n75%              2.799000e+02                    6.400000e+00   \nmax              3.085000e+02                    2.480000e+01   \n       mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\ncount                   5.831374e+06              5.831374e+06   \nmean                    7.691693e-01              7.342436e+01   \nstd                     6.947996e-01              2.082304e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.400000e-01              5.860000e+01   \n50%                     5.500000e-01              7.560000e+01   \n75%                     1.130000e+00              9.130000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_7  precipitation_amount_7  \\\ncount              5.831374e+06            5.831374e+06   \nmean               3.408493e+01            1.878433e+00   \nstd                1.881287e+01            5.774238e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.970000e+01            0.000000e+00   \n50%                3.020000e+01            0.000000e+00   \n75%                4.570000e+01            1.100000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_7  wind_speed_7        fsca_7  \ncount            5.831374e+06  5.831374e+06  5.831374e+06  \nmean             2.852833e+02  3.918437e+00  1.693449e+01  \nstd              2.226296e+01  1.850701e+00  2.561797e+01  \nmin              0.000000e+00  0.000000e+00  0.000000e+00  \n25%              2.778000e+02  2.600000e+00  0.000000e+00  \n50%              2.860000e+02  3.500000e+00  0.000000e+00  \n75%              2.952000e+02  4.800000e+00  3.700376e+01  \nmax              3.223000e+02  1.960000e+01  9.700000e+01  \nThis is our unique years [2018 2019 2020 2021]\nhow many rows are left in the three water years?                 lat           lon           SWE     swe_value  \\\ncount  4.373449e+06  4.373449e+06  4.373449e+06  4.373449e+06   \nmean   4.190049e+01 -1.136712e+02  7.532038e+00  1.484323e+00   \nstd    3.848405e+00  5.685628e+00  1.866844e+01  5.624509e+00   \nmin    3.141666e+01 -1.245500e+02  0.000000e+00 -8.000000e+00   \n25%    3.893601e+01 -1.191265e+02  0.000000e+00  0.000000e+00   \n50%    4.158700e+01 -1.129643e+02  0.000000e+00  0.000000e+00   \n75%    4.494307e+01 -1.090654e+02  0.000000e+00  0.000000e+00   \nmax    4.900000e+01 -1.005075e+02  2.400000e+02  1.021000e+02   \n       change_in_swe_inch    snow_depth  air_temperature_observed_f  \\\ncount        4.373449e+06  4.373449e+06                4.373449e+06   \nmean         9.580539e-05  4.039408e+00                9.424499e+00   \nstd          1.177501e+00  1.403262e+01                1.770849e+01   \nmin         -1.370000e+02  0.000000e+00               -8.660000e+01   \n25%          0.000000e+00  0.000000e+00                0.000000e+00   \n50%          0.000000e+00  0.000000e+00                0.000000e+00   \n75%          0.000000e+00  0.000000e+00                9.000000e+00   \nmax          1.370000e+02  2.290000e+02                6.710000e+02   \n       air_temperature_tmmn  potential_evapotranspiration  \\\ncount          4.373449e+06                  4.373449e+06   \nmean           2.731320e+02                  4.072312e+00   \nstd            9.876003e+00                  2.757013e+00   \nmin            0.000000e+00                  0.000000e+00   \n25%            2.672000e+02                  1.800000e+00   \n50%            2.732000e+02                  3.500000e+00   \n75%            2.799000e+02                  6.000000e+00   \nmax            3.085000e+02                  2.210000e+01   \n       mean_vapor_pressure_deficit  relative_humidity_rmax  \\\ncount                 4.373449e+06            4.373449e+06   \nmean                  7.355580e-01            7.256472e+01   \nstd                   6.802281e-01            2.070993e+01   \nmin                   0.000000e+00            0.000000e+00   \n25%                   2.300000e-01            5.690000e+01   \n50%                   5.100000e-01            7.450000e+01   \n75%                   1.060000e+00            9.040000e+01   \nmax                   7.660000e+00            1.000000e+02   \n       relative_humidity_rmin  precipitation_amount  air_temperature_tmmx  \\\ncount            4.373449e+06          4.373449e+06          4.373449e+06   \nmean             3.441610e+01          1.832800e+00          2.866877e+02   \nstd              1.876701e+01          5.435755e+00          1.189978e+01   \nmin              0.000000e+00          0.000000e+00          0.000000e+00   \n25%              2.000000e+01          0.000000e+00          2.779000e+02   \n50%              3.050000e+01          0.000000e+00          2.863000e+02   \n75%              4.600000e+01          1.100000e+00          2.956000e+02   \nmax              1.000000e+02          2.681000e+02          3.223000e+02   \n         wind_speed     elevation     Elevation         Slope        Aspect  \\\ncount  4.373449e+06  4.373449e+06  4.373449e+06  4.373449e+06  4.373449e+06   \nmean   3.910554e+00  5.999806e+03  1.904241e+03  1.031669e+00  1.867030e+02   \nstd    1.814496e+00  2.569575e+03  7.942035e+02  3.590906e+00  1.066251e+02   \nmin    0.000000e+00  1.000000e+01 -1.207950e+00  6.327820e-02 -0.000000e+00   \n25%    2.600000e+00  4.340000e+03  1.354743e+03  2.460251e-01  9.189144e+01   \n50%    3.500000e+00  6.200000e+03  1.935498e+03  4.256592e-01  1.912890e+02   \n75%    4.800000e+00  7.886000e+03  2.483709e+03  8.868256e-01  2.813530e+02   \nmax    1.960000e+01  1.170000e+04  3.978188e+03  9.000000e+01  3.599130e+02   \n          Curvature     Northness      Eastness          fsca         SWE_1  \\\ncount  4.373449e+06  4.373449e+06  4.373449e+06  4.373449e+06  4.373449e+06   \nmean  -6.334026e+02  3.745117e-02  3.851484e-02  1.789842e+01  7.546177e+00   \nstd    5.033965e+03  5.879904e-01  5.816739e-01  2.612237e+01  1.867477e+01   \nmin   -2.198460e+04 -7.853982e-01 -7.853979e-01  0.000000e+00  0.000000e+00   \n25%   -3.607563e+03 -5.882038e-01 -5.711176e-01  0.000000e+00  0.000000e+00   \n50%    2.900531e+02  9.371997e-02  8.551028e-02  0.000000e+00  0.000000e+00   \n75%    2.557073e+03  6.423781e-01  6.407763e-01  4.036365e+01  0.000000e+00   \nmax    1.757020e+04  7.853978e-01  7.853982e-01  9.700000e+01  2.400000e+02   \n       air_temperature_tmmn_1  potential_evapotranspiration_1  \\\ncount            4.373449e+06                    4.373449e+06   \nmean             2.731340e+02                    4.068919e+00   \nstd              9.876767e+00                    2.754466e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.672000e+02                    1.800000e+00   \n50%              2.732000e+02                    3.499775e+00   \n75%              2.799000e+02                    6.000000e+00   \nmax              3.085000e+02                    2.210000e+01   \n       mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\ncount                   4.373449e+06              4.373449e+06   \nmean                    7.355087e-01              7.257052e+01   \nstd                     6.800889e-01              2.071020e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.300000e-01              5.700000e+01   \n50%                     5.100000e-01              7.450000e+01   \n75%                     1.060000e+00              9.040000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_1  precipitation_amount_1  \\\ncount              4.373449e+06            4.373449e+06   \nmean               3.442213e+01            1.831965e+00   \nstd                1.876704e+01            5.434537e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                2.000000e+01            0.000000e+00   \n50%                3.050000e+01            0.000000e+00   \n75%                4.600000e+01            1.100000e+00   \nmax                1.000000e+02            2.681000e+02   \n       air_temperature_tmmx_1  wind_speed_1        fsca_1         SWE_2  \\\ncount            4.373449e+06  4.373449e+06  4.373449e+06  4.373449e+06   \nmean             2.866826e+02  3.911878e+00  1.789853e+01  7.560379e+00   \nstd              1.190119e+01  1.814873e+00  2.612234e+01  1.868115e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.779000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.863000e+02  3.500000e+00  0.000000e+00  0.000000e+00   \n75%              2.956000e+02  4.800000e+00  4.036367e+01  0.000000e+00   \nmax              3.223000e+02  1.960000e+01  9.700000e+01  2.400000e+02   \n       air_temperature_tmmn_2  potential_evapotranspiration_2  \\\ncount            4.373449e+06                    4.373449e+06   \nmean             2.731368e+02                    4.066224e+00   \nstd              9.877781e+00                    2.753179e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.672000e+02                    1.800000e+00   \n50%              2.732000e+02                    3.400000e+00   \n75%              2.799000e+02                    6.000000e+00   \nmax              3.085000e+02                    2.210000e+01   \n       mean_vapor_pressure_deficit_2  relative_humidity_rmax_2  \\\ncount                   4.373449e+06              4.373449e+06   \nmean                    7.356326e-01              7.258620e+01   \nstd                     6.800248e-01              2.070926e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.300000e-01              5.700000e+01   \n50%                     5.100000e-01              7.450000e+01   \n75%                     1.060000e+00              9.040000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_2  precipitation_amount_2  \\\ncount              4.373449e+06            4.373449e+06   \nmean               3.441734e+01            1.831102e+00   \nstd                1.877082e+01            5.433886e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                2.000000e+01            0.000000e+00   \n50%                3.050000e+01            0.000000e+00   \n75%                4.600000e+01            1.100000e+00   \nmax                1.000000e+02            2.681000e+02   \n       air_temperature_tmmx_2  wind_speed_2        fsca_2         SWE_3  \\\ncount            4.373449e+06  4.373449e+06  4.373449e+06  4.373449e+06   \nmean             2.866788e+02  3.912768e+00  1.789877e+01  7.574594e+00   \nstd              1.190345e+01  1.815051e+00  2.612233e+01  1.868752e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.778000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.862992e+02  3.500000e+00  0.000000e+00  0.000000e+00   \n75%              2.956000e+02  4.800000e+00  4.036376e+01  0.000000e+00   \nmax              3.223000e+02  1.960000e+01  9.700000e+01  2.400000e+02   \n       air_temperature_tmmn_3  potential_evapotranspiration_3  \\\ncount            4.373449e+06                    4.373449e+06   \nmean             2.731378e+02                    4.064062e+00   \nstd              9.878292e+00                    2.752337e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.672000e+02                    1.800000e+00   \n50%              2.732000e+02                    3.400000e+00   \n75%              2.799000e+02                    6.000000e+00   \nmax              3.085000e+02                    2.210000e+01   \n       mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\ncount                   4.373449e+06              4.373449e+06   \nmean                    7.359279e-01              7.260943e+01   \nstd                     6.800844e-01              2.070503e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.300000e-01              5.700000e+01   \n50%                     5.100000e-01              7.450000e+01   \n75%                     1.060000e+00              9.050000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_3  precipitation_amount_3  \\\ncount              4.373449e+06            4.373449e+06   \nmean               3.440473e+01            1.829042e+00   \nstd                1.877240e+01            5.432677e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                2.000000e+01            0.000000e+00   \n50%                3.049777e+01            0.000000e+00   \n75%                4.600000e+01            1.100000e+00   \nmax                1.000000e+02            2.681000e+02   \n       air_temperature_tmmx_3  wind_speed_3        fsca_3         SWE_4  \\\ncount            4.373449e+06  4.373449e+06  4.373449e+06  4.373449e+06   \nmean             2.866752e+02  3.911839e+00  1.789898e+01  7.588800e+00   \nstd              1.190400e+01  1.814808e+00  2.612231e+01  1.869388e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.778000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.862000e+02  3.500000e+00  0.000000e+00  0.000000e+00   \n75%              2.956000e+02  4.800000e+00  4.036383e+01  0.000000e+00   \nmax              3.223000e+02  1.960000e+01  9.700000e+01  2.400000e+02   \n       air_temperature_tmmn_4  potential_evapotranspiration_4  \\\ncount            4.373449e+06                    4.373449e+06   \nmean             2.731364e+02                    4.062009e+00   \nstd              9.877920e+00                    2.750736e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.672000e+02                    1.800000e+00   \n50%              2.732000e+02                    3.400000e+00   \n75%              2.799000e+02                    6.000000e+00   \nmax              3.085000e+02                    2.210000e+01   \n       mean_vapor_pressure_deficit_4  relative_humidity_rmax_4  \\\ncount                   4.373449e+06              4.373449e+06   \nmean                    7.363249e-01              7.263190e+01   \nstd                     6.802312e-01              2.069390e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.300000e-01              5.700000e+01   \n50%                     5.100000e-01              7.450000e+01   \n75%                     1.060000e+00              9.050000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_4  precipitation_amount_4  \\\ncount              4.373449e+06            4.373449e+06   \nmean               3.439761e+01            1.826948e+00   \nstd                1.877364e+01            5.429298e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                2.000000e+01            0.000000e+00   \n50%                3.040000e+01            0.000000e+00   \n75%                4.600000e+01            1.100000e+00   \nmax                1.000000e+02            2.681000e+02   \n       air_temperature_tmmx_4  wind_speed_4        fsca_4         SWE_5  \\\ncount            4.373449e+06  4.373449e+06  4.373449e+06  4.373449e+06   \nmean             2.866705e+02  3.911409e+00  1.789913e+01  7.603003e+00   \nstd              1.190201e+01  1.814738e+00  2.612226e+01  1.870022e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.778000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.862000e+02  3.500000e+00  0.000000e+00  0.000000e+00   \n75%              2.956000e+02  4.800000e+00  4.036383e+01  0.000000e+00   \nmax              3.223000e+02  1.960000e+01  9.700000e+01  2.400000e+02   \n       air_temperature_tmmn_5  potential_evapotranspiration_5  \\\ncount            4.373449e+06                    4.373449e+06   \nmean             2.731326e+02                    4.059207e+00   \nstd              9.876401e+00                    2.748117e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.672000e+02                    1.800000e+00   \n50%              2.732000e+02                    3.400000e+00   \n75%              2.799000e+02                    6.000000e+00   \nmax              3.085000e+02                    2.210000e+01   \n       mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\ncount                   4.373449e+06              4.373449e+06   \nmean                    7.366271e-01              7.264968e+01   \nstd                     6.802278e-01              2.068476e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.300000e-01              5.710000e+01   \n50%                     5.100000e-01              7.450000e+01   \n75%                     1.069977e+00              9.050000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_5  precipitation_amount_5  \\\ncount              4.373449e+06            4.373449e+06   \nmean               3.439349e+01            1.825897e+00   \nstd                1.877566e+01            5.427000e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                2.000000e+01            0.000000e+00   \n50%                3.040000e+01            0.000000e+00   \n75%                4.600000e+01            1.100000e+00   \nmax                1.000000e+02            2.681000e+02   \n       air_temperature_tmmx_5  wind_speed_5        fsca_5         SWE_6  \\\ncount            4.373449e+06  4.373449e+06  4.373449e+06  4.373449e+06   \nmean             2.866679e+02  3.911131e+00  1.789904e+01  7.617175e+00   \nstd              1.190060e+01  1.814854e+00  2.612225e+01  1.870654e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.778000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.862000e+02  3.500000e+00  0.000000e+00  0.000000e+00   \n75%              2.956000e+02  4.800000e+00  4.036377e+01  0.000000e+00   \nmax              3.223000e+02  1.960000e+01  9.700000e+01  2.400000e+02   \n       air_temperature_tmmn_6  potential_evapotranspiration_6  \\\ncount            4.373449e+06                    4.373449e+06   \nmean             2.731286e+02                    4.056650e+00   \nstd              9.874996e+00                    2.746840e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.672000e+02                    1.800000e+00   \n50%              2.732000e+02                    3.400000e+00   \n75%              2.799000e+02                    6.000000e+00   \nmax              3.085000e+02                    2.210000e+01   \n       mean_vapor_pressure_deficit_6  relative_humidity_rmax_6  \\\ncount                   4.373449e+06              4.373449e+06   \nmean                    7.367641e-01              7.265682e+01   \nstd                     6.801096e-01              2.067865e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.300000e-01              5.710000e+01   \n50%                     5.199700e-01              7.460000e+01   \n75%                     1.070000e+00              9.050000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_6  precipitation_amount_6  \\\ncount              4.373449e+06            4.373449e+06   \nmean               3.439543e+01            1.825909e+00   \nstd                1.877501e+01            5.426952e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                2.000000e+01            0.000000e+00   \n50%                3.040000e+01            0.000000e+00   \n75%                4.600000e+01            1.100000e+00   \nmax                1.000000e+02            2.681000e+02   \n       air_temperature_tmmx_6  wind_speed_6        fsca_6         SWE_7  \\\ncount            4.373449e+06  4.373449e+06  4.373449e+06  4.373449e+06   \nmean             2.866641e+02  3.911002e+00  1.789907e+01  7.631370e+00   \nstd              1.189830e+01  1.814969e+00  2.612221e+01  1.871284e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.778000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.862000e+02  3.500000e+00  0.000000e+00  0.000000e+00   \n75%              2.956000e+02  4.800000e+00  4.036376e+01  0.000000e+00   \nmax              3.223000e+02  1.960000e+01  9.700000e+01  2.400000e+02   \n       air_temperature_tmmn_7  potential_evapotranspiration_7  \\\ncount            4.373449e+06                    4.373449e+06   \nmean             2.731262e+02                    4.053955e+00   \nstd              9.874118e+00                    2.745272e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.672000e+02                    1.800000e+00   \n50%              2.732000e+02                    3.400000e+00   \n75%              2.799000e+02                    6.000000e+00   \nmax              3.085000e+02                    2.210000e+01   \n       mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\ncount                   4.373449e+06              4.373449e+06   \nmean                    7.368106e-01              7.266101e+01   \nstd                     6.799610e-01              2.067764e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.300000e-01              5.710000e+01   \n50%                     5.200000e-01              7.460000e+01   \n75%                     1.069952e+00              9.050000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_7  precipitation_amount_7  \\\ncount              4.373449e+06            4.373449e+06   \nmean               3.440135e+01            1.826223e+00   \nstd                1.877424e+01            5.426987e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                2.000000e+01            0.000000e+00   \n50%                3.050000e+01            0.000000e+00   \n75%                4.600000e+01            1.100000e+00   \nmax                1.000000e+02            2.681000e+02   \n       air_temperature_tmmx_7  wind_speed_7        fsca_7  \ncount            4.373449e+06  4.373449e+06  4.373449e+06  \nmean             2.866617e+02  3.912361e+00  1.789893e+01  \nstd              1.189707e+01  1.814775e+00  2.612218e+01  \nmin              0.000000e+00  0.000000e+00  0.000000e+00  \n25%              2.778000e+02  2.600000e+00  0.000000e+00  \n50%              2.862000e+02  3.500000e+00  0.000000e+00  \n75%              2.955000e+02  4.800000e+00  4.036366e+01  \nmax              3.223000e+02  1.960000e+01  9.700000e+01  \nhow many groups?  <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7f9213d0b970>\nThis is the dataframe after cumulative columns are added\ncount    4.373449e+06\nmean     5.837208e+03\nstd      7.891078e+03\nmin      0.000000e+00\n25%      8.345067e+02\n50%      3.675469e+03\n75%      7.763981e+03\nmax      6.282106e+04\nName: cumulative_fsca, dtype: float64\nAll the cumulative variables are added successfully! /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_active_stations_v1.csv_sorted.csv_time_series_cumulative_v1.csv\ndouble check the swe_value statistics: count    4.373449e+06\nmean     1.484323e+00\nstd      5.624509e+00\nmin     -8.000000e+00\n25%      0.000000e+00\n50%      0.000000e+00\n75%      0.000000e+00\nmax      1.021000e+02\nName: swe_value, dtype: float64\n",
  "history_begin_time" : 1703618349174,
  "history_end_time" : 1703621665698,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "tsjUG2HVYa77",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n# Define file paths for various CSV files\n# current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_active_stations_v1.csv_sorted.csv'\ntarget_time_series_csv_path = f'{current_ready_csv_path}_time_series_v1.csv'\nbackup_time_series_csv_path = f'{current_ready_csv_path}_time_series_v1_bak.csv'\n# target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\ntarget_time_series_cumulative_csv_path = f'{current_ready_csv_path}_time_series_cumulative_v1.csv'\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    if column_name == \"SWE\":\n      mask = (y > 240) | y.isnull()\n    elif column_name == \"fsca\":\n      mask = (y > 100) | y.isnull()\n    else:\n      mask = y.isnull()\n\n    # Check if all elements in the mask array are True\n    all_true = np.all(mask)\n\n    if all_true:\n      df[column_name] = 0\n    else:\n      # Perform interpolation\n      new_y = np.interp(x, x[~mask], y[~mask])\n      # Replace missing values with interpolated values\n      df[column_name] = new_y\n\n    if np.any(df[column_name].isnull()):\n      raise ValueError(\"Single group: shouldn't have null values here\")\n        \n    return df\n\ndef convert_to_time_series(input_csv, output_csv):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                         'AMSR_SWE': 'SWE',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv):\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['fsca'] > 100):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        filled_data.to_csv(filled_csv, index=False)\n        \n        print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv):\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n        result.fillna(0, inplace=True)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_cumulated = [\n      \"SWE\",\n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv)\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2019-10-01')\n    end_date = pd.to_datetime('2022-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df[\"cumulative_fsca\"].describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n    \n\nif __name__ == \"__main__\":\n    # Uncomment this line to execute the 'convert_to_time_series' function\n    convert_to_time_series(current_ready_csv_path, target_time_series_csv_path)\n\n    # Uncomment this line to execute the 'add_cumulative_columns' function\n    add_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path)\n",
  "history_output" : "today date = 2023-12-26\ntest start date:  2023-01-20\ntest end date:  2023-10-11\n/home/chetana\n2022275\nAll current columns:  Index(['date', 'lat', 'lon', 'AMSR_SWE', 'station_name', 'swe_value',\n       'change_in_swe_inch', 'snow_depth', 'air_temperature_observed_f',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'stationTriplet', 'elevation',\n       'Elevation', 'Slope', 'Aspect', 'Curvature', 'Northness', 'Eastness',\n       'fsca'],\n      dtype='object')\n/home/chetana/gridmet_test_run/final_merged_data_3yrs_all_active_stations_v1.csv_sorted.csv_time_series_v1.csv_gap_filled.csv already exists, skipping\n/home/chetana/gridmet_test_run/final_merged_data_3yrs_all_active_stations_v1.csv_sorted.csv_time_series_v1.csv already exists, skipping\n/home/chetana/gw-workspace/tsjUG2HVYa77/convert_to_time_series.py:185: DtypeWarning: Columns (4) have mixed types. Specify dtype option on import or set low_memory=False.\n  df = pd.read_csv(input_csv)\nthe column statistics from time series before cumulative:                  lat           lon           SWE     swe_value  \\\ncount  5.831374e+06  5.831374e+06  5.831374e+06  5.831374e+06   \nmean   4.190023e+01 -1.136720e+02  8.872740e+00  1.402257e+00   \nstd    3.848358e+00  5.685628e+00  1.807279e+01  5.470743e+00   \nmin    3.141666e+01 -1.245500e+02  0.000000e+00 -8.000000e+00   \n25%    3.893601e+01 -1.191265e+02  0.000000e+00  0.000000e+00   \n50%    4.158700e+01 -1.129643e+02  0.000000e+00  0.000000e+00   \n75%    4.494000e+01 -1.090667e+02  1.300000e+01  0.000000e+00   \nmax    4.900000e+01 -1.005075e+02  2.400000e+02  1.066000e+02   \n       change_in_swe_inch    snow_depth  air_temperature_observed_f  \\\ncount        5.831374e+06  5.831374e+06                5.831374e+06   \nmean         2.774989e-03  3.850921e+00                9.494213e+00   \nstd          1.151723e+00  1.384436e+01                1.779046e+01   \nmin         -3.010000e+02  0.000000e+00               -8.660000e+01   \n25%          0.000000e+00  0.000000e+00                0.000000e+00   \n50%          0.000000e+00  0.000000e+00                0.000000e+00   \n75%          0.000000e+00  0.000000e+00                9.100000e+00   \nmax          4.620000e+02  4.620000e+02                6.710000e+02   \n       air_temperature_tmmn  potential_evapotranspiration  \\\ncount          5.831374e+06                  5.831374e+06   \nmean           2.733119e+02                  4.355479e+00   \nstd            9.762602e+00                  2.859076e+00   \nmin            0.000000e+00                  0.000000e+00   \n25%            2.675998e+02                  1.900000e+00   \n50%            2.735000e+02                  3.800327e+00   \n75%            2.799000e+02                  6.500000e+00   \nmax            3.085000e+02                  2.480000e+01   \n       mean_vapor_pressure_deficit  relative_humidity_rmax  \\\ncount                 5.831374e+06            5.831374e+06   \nmean                  7.726802e-01            7.382125e+01   \nstd                   6.945363e-01            2.029552e+01   \nmin                   0.000000e+00            0.000000e+00   \n25%                   2.400000e-01            5.890000e+01   \n50%                   5.500000e-01            7.590000e+01   \n75%                   1.130000e+00            9.150000e+01   \nmax                   7.660000e+00            1.000000e+02   \n       relative_humidity_rmin  precipitation_amount  air_temperature_tmmx  \\\ncount            5.831374e+06          5.831374e+06          5.831374e+06   \nmean             3.433630e+01          1.899181e+00          2.864632e+02   \nstd              1.876338e+01          5.797270e+00          1.182823e+01   \nmin              0.000000e+00          0.000000e+00          0.000000e+00   \n25%              1.990000e+01          0.000000e+00          2.778000e+02   \n50%              3.040000e+01          0.000000e+00          2.860000e+02   \n75%              4.600000e+01          1.200000e+00          2.952000e+02   \nmax              1.000000e+02          5.042000e+02          3.223000e+02   \n         wind_speed     elevation     Elevation         Slope        Aspect  \\\ncount  5.831374e+06  5.831374e+06  5.831374e+06  5.831374e+06  5.831374e+06   \nmean   3.942010e+00  5.999921e+03  1.904316e+03  1.031573e+00  1.867008e+02   \nstd    1.843856e+00  2.569634e+03  7.942218e+02  3.590236e+00  1.066232e+02   \nmin    0.000000e+00  1.000000e+01 -1.207950e+00  6.327820e-02 -0.000000e+00   \n25%    2.600000e+00  4.340000e+03  1.354743e+03  2.460251e-01  9.189144e+01   \n50%    3.600000e+00  6.200000e+03  1.935498e+03  4.256592e-01  1.912890e+02   \n75%    4.800000e+00  7.886000e+03  2.483709e+03  8.868256e-01  2.813530e+02   \nmax    1.960000e+01  1.170000e+04  3.978188e+03  9.000000e+01  3.599130e+02   \n          Curvature     Northness      Eastness          fsca         SWE_1  \\\ncount  5.831374e+06  5.831374e+06  5.831374e+06  5.831374e+06  5.831374e+06   \nmean  -6.338177e+02  3.744572e-02  3.848866e-02  1.712213e+01  8.869669e+00   \nstd    5.033858e+03  5.879777e-01  5.816885e-01  2.570079e+01  1.807285e+01   \nmin   -2.198460e+04 -7.853982e-01 -7.853979e-01  0.000000e+00  0.000000e+00   \n25%   -3.618001e+03 -5.882038e-01 -5.711176e-01  0.000000e+00  0.000000e+00   \n50%    2.900531e+02  9.371997e-02  8.551028e-02  0.000000e+00  0.000000e+00   \n75%    2.557073e+03  6.423781e-01  6.407763e-01  3.800000e+01  1.300000e+01   \nmax    1.757020e+04  7.853978e-01  7.853982e-01  9.700000e+01  2.400000e+02   \n       air_temperature_tmmn_1  potential_evapotranspiration_1  \\\ncount            5.831374e+06                    5.831374e+06   \nmean             2.731504e+02                    4.351597e+00   \nstd              1.190498e+01                    2.859914e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.675011e+02                    1.900000e+00   \n50%              2.735000e+02                    3.800000e+00   \n75%              2.799000e+02                    6.500000e+00   \nmax              3.085000e+02                    2.480000e+01   \n       mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\ncount                   5.831374e+06              5.831374e+06   \nmean                    7.721802e-01              7.376410e+01   \nstd                     6.945745e-01              2.037193e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.400000e-01              5.889685e+01   \n50%                     5.500000e-01              7.580000e+01   \n75%                     1.130000e+00              9.150000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_1  precipitation_amount_1  \\\ncount              5.831374e+06            5.831374e+06   \nmean               3.429772e+01            1.897124e+00   \nstd                1.876717e+01            5.795678e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.990000e+01            0.000000e+00   \n50%                3.040000e+01            0.000000e+00   \n75%                4.599831e+01            1.200000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_1  wind_speed_1        fsca_1         SWE_2  \\\ncount            5.831374e+06  5.831374e+06  5.831374e+06  5.831374e+06   \nmean             2.862952e+02  3.939851e+00  1.709503e+01  8.866244e+00   \nstd              1.381568e+01  1.846039e+00  2.568883e+01  1.807292e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.778000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.860000e+02  3.600000e+00  0.000000e+00  0.000000e+00   \n75%              2.952000e+02  4.800000e+00  3.800000e+01  1.300000e+01   \nmax              3.223000e+02  1.960000e+01  9.700000e+01  2.400000e+02   \n       air_temperature_tmmn_2  potential_evapotranspiration_2  \\\ncount            5.831374e+06                    5.831374e+06   \nmean             2.729858e+02                    4.347450e+00   \nstd              1.371809e+01                    2.860538e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.675000e+02                    1.900000e+00   \n50%              2.735000e+02                    3.800000e+00   \n75%              2.799000e+02                    6.500000e+00   \nmax              3.085000e+02                    2.480000e+01   \n       mean_vapor_pressure_deficit_2  relative_humidity_rmax_2  \\\ncount                   5.831374e+06              5.831374e+06   \nmean                    7.716782e-01              7.370582e+01   \nstd                     6.946119e-01              2.044700e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.400000e-01              5.880000e+01   \n50%                     5.500000e-01              7.580000e+01   \n75%                     1.130000e+00              9.140312e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_2  precipitation_amount_2  \\\ncount              5.831374e+06            5.831374e+06   \nmean               3.426314e+01            1.894248e+00   \nstd                1.877606e+01            5.793453e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.980000e+01            0.000000e+00   \n50%                3.040000e+01            0.000000e+00   \n75%                4.590000e+01            1.200000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_2  wind_speed_2        fsca_2         SWE_3  \\\ncount            5.831374e+06  5.831374e+06  5.831374e+06  5.831374e+06   \nmean             2.861258e+02  3.936180e+00  1.706793e+01  8.861901e+00   \nstd              1.555108e+01  1.846650e+00  2.567685e+01  1.807291e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.778000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.860000e+02  3.600000e+00  0.000000e+00  0.000000e+00   \n75%              2.952000e+02  4.800000e+00  3.790053e+01  1.300000e+01   \nmax              3.223000e+02  1.960000e+01  9.700000e+01  2.400000e+02   \n       air_temperature_tmmn_3  potential_evapotranspiration_3  \\\ncount            5.831374e+06                    5.831374e+06   \nmean             2.728230e+02                    4.343336e+00   \nstd              1.531489e+01                    2.861466e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.675000e+02                    1.900000e+00   \n50%              2.735000e+02                    3.800000e+00   \n75%              2.799000e+02                    6.500000e+00   \nmax              3.085000e+02                    2.480000e+01   \n       mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\ncount                   5.831374e+06              5.831374e+06   \nmean                    7.711760e-01              7.364954e+01   \nstd                     6.946503e-01              2.052278e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.400000e-01              5.880000e+01   \n50%                     5.500000e-01              7.580000e+01   \n75%                     1.130000e+00              9.140000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_3  precipitation_amount_3  \\\ncount              5.831374e+06            5.831374e+06   \nmean               3.422769e+01            1.892077e+00   \nstd                1.878438e+01            5.792529e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.980000e+01            0.000000e+00   \n50%                3.030000e+01            0.000000e+00   \n75%                4.590000e+01            1.100200e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_3  wind_speed_3        fsca_3         SWE_4  \\\ncount            5.831374e+06  5.831374e+06  5.831374e+06  5.831374e+06   \nmean             2.859580e+02  3.933487e+00  1.704085e+01  8.857529e+00   \nstd              1.710828e+01  1.848616e+00  2.566483e+01  1.807289e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.778000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.860000e+02  3.599600e+00  0.000000e+00  0.000000e+00   \n75%              2.952000e+02  4.800000e+00  3.766901e+01  1.300000e+01   \nmax              3.223000e+02  1.960000e+01  9.700000e+01  2.400000e+02   \n       air_temperature_tmmn_4  potential_evapotranspiration_4  \\\ncount            5.831374e+06                    5.831374e+06   \nmean             2.726601e+02                    4.339110e+00   \nstd              1.675875e+01                    2.862549e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.675000e+02                    1.900000e+00   \n50%              2.735000e+02                    3.800000e+00   \n75%              2.799000e+02                    6.498439e+00   \nmax              3.085000e+02                    2.480000e+01   \n       mean_vapor_pressure_deficit_4  relative_humidity_rmax_4  \\\ncount                   5.831374e+06              5.831374e+06   \nmean                    7.706729e-01              7.359432e+01   \nstd                     6.946898e-01              2.059840e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.400000e-01              5.870000e+01   \n50%                     5.500000e-01              7.570001e+01   \n75%                     1.130000e+00              9.140000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_4  precipitation_amount_4  \\\ncount              5.831374e+06            5.831374e+06   \nmean               3.419158e+01            1.890298e+00   \nstd                1.879167e+01            5.791821e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.980000e+01            0.000000e+00   \n50%                3.030000e+01            0.000000e+00   \n75%                4.580000e+01            1.100000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_4  wind_speed_4        fsca_4         SWE_5  \\\ncount            5.831374e+06  5.831374e+06  5.831374e+06  5.831374e+06   \nmean             2.857908e+02  3.930676e+00  1.701386e+01  8.853649e+00   \nstd              1.853298e+01  1.850310e+00  2.565290e+01  1.807293e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.778000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.860000e+02  3.500525e+00  0.000000e+00  0.000000e+00   \n75%              2.952000e+02  4.800000e+00  3.750156e+01  1.300000e+01   \nmax              3.223000e+02  1.960000e+01  9.700000e+01  2.400000e+02   \n       air_temperature_tmmn_5  potential_evapotranspiration_5  \\\ncount            5.831374e+06                    5.831374e+06   \nmean             2.724969e+02                    4.335111e+00   \nstd              1.808636e+01                    2.863902e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.675000e+02                    1.900000e+00   \n50%              2.735000e+02                    3.800000e+00   \n75%              2.799000e+02                    6.400000e+00   \nmax              3.085000e+02                    2.480000e+01   \n       mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\ncount                   5.831374e+06              5.831374e+06   \nmean                    7.701696e-01              7.353873e+01   \nstd                     6.947255e-01              2.067438e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.400000e-01              5.870000e+01   \n50%                     5.500000e-01              7.570001e+01   \n75%                     1.130000e+00              9.140000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_5  precipitation_amount_5  \\\ncount              5.831374e+06            5.831374e+06   \nmean               3.415632e+01            1.887170e+00   \nstd                1.879933e+01            5.788662e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.980000e+01            0.000000e+00   \n50%                3.030000e+01            0.000000e+00   \n75%                4.580000e+01            1.100000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_5  wind_speed_5        fsca_5         SWE_6  \\\ncount            5.831374e+06  5.831374e+06  5.831374e+06  5.831374e+06   \nmean             2.856229e+02  3.926977e+00  1.698698e+01  8.851081e+00   \nstd              1.985477e+01  1.851076e+00  2.564088e+01  1.807286e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.778000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.860000e+02  3.500000e+00  0.000000e+00  0.000000e+00   \n75%              2.952000e+02  4.800000e+00  3.740014e+01  1.300000e+01   \nmax              3.223000e+02  1.960000e+01  9.700000e+01  2.400000e+02   \n       air_temperature_tmmn_6  potential_evapotranspiration_6  \\\ncount            5.831374e+06                    5.831374e+06   \nmean             2.723329e+02                    4.330843e+00   \nstd              1.932210e+01                    2.864920e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.675000e+02                    1.900000e+00   \n50%              2.735000e+02                    3.800000e+00   \n75%              2.799000e+02                    6.400000e+00   \nmax              3.085000e+02                    2.480000e+01   \n       mean_vapor_pressure_deficit_6  relative_humidity_rmax_6  \\\ncount                   5.831374e+06              5.831374e+06   \nmean                    7.696691e-01              7.348127e+01   \nstd                     6.947638e-01              2.074845e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.400000e-01              5.860000e+01   \n50%                     5.500000e-01              7.570001e+01   \n75%                     1.130000e+00              9.130000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_6  precipitation_amount_6  \\\ncount              5.831374e+06            5.831374e+06   \nmean               3.412083e+01            1.883249e+00   \nstd                1.880629e+01            5.784789e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.970006e+01            0.000000e+00   \n50%                3.020000e+01            0.000000e+00   \n75%                4.570000e+01            1.100000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_6  wind_speed_6        fsca_6         SWE_7  \\\ncount            5.831374e+06  5.831374e+06  5.831374e+06  5.831374e+06   \nmean             2.854538e+02  3.922301e+00  1.696053e+01  8.849371e+00   \nstd              2.109345e+01  1.849889e+00  2.562934e+01  1.807283e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.778000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.860000e+02  3.500000e+00  0.000000e+00  0.000000e+00   \n75%              2.952000e+02  4.800000e+00  3.725183e+01  1.300000e+01   \nmax              3.223000e+02  1.960000e+01  9.700000e+01  2.400000e+02   \n       air_temperature_tmmn_7  potential_evapotranspiration_7  \\\ncount            5.831374e+06                    5.831374e+06   \nmean             2.721666e+02                    4.326846e+00   \nstd              2.048314e+01                    2.866261e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.675000e+02                    1.900000e+00   \n50%              2.735000e+02                    3.800000e+00   \n75%              2.799000e+02                    6.400000e+00   \nmax              3.085000e+02                    2.480000e+01   \n       mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\ncount                   5.831374e+06              5.831374e+06   \nmean                    7.691693e-01              7.342436e+01   \nstd                     6.947996e-01              2.082304e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.400000e-01              5.860000e+01   \n50%                     5.500000e-01              7.560000e+01   \n75%                     1.130000e+00              9.130000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_7  precipitation_amount_7  \\\ncount              5.831374e+06            5.831374e+06   \nmean               3.408493e+01            1.878433e+00   \nstd                1.881287e+01            5.774238e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.970000e+01            0.000000e+00   \n50%                3.020000e+01            0.000000e+00   \n75%                4.570000e+01            1.100000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_7  wind_speed_7        fsca_7  \ncount            5.831374e+06  5.831374e+06  5.831374e+06  \nmean             2.852833e+02  3.918437e+00  1.693449e+01  \nstd              2.226296e+01  1.850701e+00  2.561797e+01  \nmin              0.000000e+00  0.000000e+00  0.000000e+00  \n25%              2.778000e+02  2.600000e+00  0.000000e+00  \n50%              2.860000e+02  3.500000e+00  0.000000e+00  \n75%              2.952000e+02  4.800000e+00  3.700376e+01  \nmax              3.223000e+02  1.960000e+01  9.700000e+01  \nThis is our unique years [2018 2019 2020 2021]\nhow many rows are left in the three water years?                 lat           lon           SWE     swe_value  \\\ncount  3.288946e+06  3.288946e+06  3.288946e+06  3.288946e+06   \nmean   4.189836e+01 -1.136754e+02  5.197746e+00  1.207488e+00   \nstd    3.848272e+00  5.685615e+00  1.609404e+01  4.703094e+00   \nmin    3.141666e+01 -1.245500e+02  0.000000e+00 -8.000000e+00   \n25%    3.892582e+01 -1.191414e+02  0.000000e+00  0.000000e+00   \n50%    4.158700e+01 -1.129819e+02  0.000000e+00  0.000000e+00   \n75%    4.494000e+01 -1.090667e+02  0.000000e+00  0.000000e+00   \nmax    4.900000e+01 -1.005075e+02  2.400000e+02  1.021000e+02   \n       change_in_swe_inch    snow_depth  air_temperature_observed_f  \\\ncount        3.288946e+06  3.288946e+06                3.288946e+06   \nmean         1.010293e-02  3.548387e+00                9.391730e+00   \nstd          1.228916e+00  1.285056e+01                1.759004e+01   \nmin         -1.360000e+02  0.000000e+00               -8.500000e+01   \n25%          0.000000e+00  0.000000e+00                0.000000e+00   \n50%          0.000000e+00  0.000000e+00                0.000000e+00   \n75%          0.000000e+00  0.000000e+00                1.000000e+01   \nmax          1.380000e+02  2.290000e+02                6.710000e+02   \n       air_temperature_tmmn  potential_evapotranspiration  \\\ncount          3.288946e+06                  3.288946e+06   \nmean           2.730210e+02                  4.714184e+00   \nstd            9.698977e+00                  2.913859e+00   \nmin            0.000000e+00                  0.000000e+00   \n25%            2.672000e+02                  2.200000e+00   \n50%            2.729000e+02                  4.400000e+00   \n75%            2.794000e+02                  6.900000e+00   \nmax            3.085000e+02                  2.210000e+01   \n       mean_vapor_pressure_deficit  relative_humidity_rmax  \\\ncount                 3.288946e+06            3.288946e+06   \nmean                  8.749891e-01            7.371253e+01   \nstd                   7.376970e-01            2.072674e+01   \nmin                   0.000000e+00            0.000000e+00   \n25%                   2.900000e-01            5.820000e+01   \n50%                   6.700000e-01            7.610000e+01   \n75%                   1.300000e+00            9.200000e+01   \nmax                   7.660000e+00            1.000000e+02   \n       relative_humidity_rmin  precipitation_amount  air_temperature_tmmx  \\\ncount            3.288946e+06          3.288946e+06          3.288946e+06   \nmean             3.384550e+01          1.797024e+00          2.861291e+02   \nstd              1.905449e+01          5.722536e+00          1.176484e+01   \nmin              0.000000e+00          0.000000e+00          0.000000e+00   \n25%              1.910000e+01          0.000000e+00          2.776000e+02   \n50%              2.970000e+01          0.000000e+00          2.853000e+02   \n75%              4.570000e+01          1.000000e+00          2.947000e+02   \nmax              1.000000e+02          5.042000e+02          3.223000e+02   \n         wind_speed     elevation     Elevation         Slope        Aspect  \\\ncount  3.288946e+06  3.288946e+06  3.288946e+06  3.288946e+06  3.288946e+06   \nmean   3.986164e+00  6.000521e+03  1.904546e+03  1.031314e+00  1.866801e+02   \nstd    1.884486e+00  2.569585e+03  7.941488e+02  3.590373e+00  1.066173e+02   \nmin    0.000000e+00  1.000000e+01 -1.207950e+00  6.327820e-02 -0.000000e+00   \n25%    2.700000e+00  4.340000e+03  1.355136e+03  2.460251e-01  9.189144e+01   \n50%    3.600000e+00  6.200000e+03  1.935498e+03  4.256592e-01  1.911646e+02   \n75%    4.900000e+00  7.886000e+03  2.483709e+03  8.868256e-01  2.813530e+02   \nmax    1.960000e+01  1.170000e+04  3.978188e+03  9.000000e+01  3.599130e+02   \n          Curvature     Northness      Eastness          fsca         SWE_1  \\\ncount  3.288946e+06  3.288946e+06  3.288946e+06  3.288946e+06  3.288946e+06   \nmean  -6.361626e+02  3.739390e-02  3.836442e-02  1.644955e+01  5.192584e+00   \nstd    5.034246e+03  5.879487e-01  5.817316e-01  2.495860e+01  1.609319e+01   \nmin   -2.198460e+04 -7.853982e-01 -7.853979e-01  0.000000e+00  0.000000e+00   \n25%   -3.618001e+03 -5.892057e-01 -5.711176e-01  0.000000e+00  0.000000e+00   \n50%    2.899267e+02  9.371997e-02  8.463854e-02  0.000000e+00  0.000000e+00   \n75%    2.557073e+03  6.423781e-01  6.407763e-01  3.538775e+01  0.000000e+00   \nmax    1.757020e+04  7.853978e-01  7.853982e-01  9.700000e+01  2.400000e+02   \n       air_temperature_tmmn_1  potential_evapotranspiration_1  \\\ncount            3.288946e+06                    3.288946e+06   \nmean             2.730356e+02                    4.715851e+00   \nstd              9.685627e+00                    2.914241e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.673000e+02                    2.200000e+00   \n50%              2.729000e+02                    4.400000e+00   \n75%              2.794000e+02                    6.900000e+00   \nmax              3.085000e+02                    2.210000e+01   \n       mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\ncount                   3.288946e+06              3.288946e+06   \nmean                    8.755408e-01              7.369034e+01   \nstd                     7.376822e-01              2.072647e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.900000e-01              5.820000e+01   \n50%                     6.700000e-01              7.610000e+01   \n75%                     1.300000e+00              9.200000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_1  precipitation_amount_1  \\\ncount              3.288946e+06            3.288946e+06   \nmean               3.382311e+01            1.794437e+00   \nstd                1.903805e+01            5.720079e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.910000e+01            0.000000e+00   \n50%                2.970000e+01            0.000000e+00   \n75%                4.570000e+01            1.000000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_1  wind_speed_1        fsca_1         SWE_2  \\\ncount            3.288946e+06  3.288946e+06  3.288946e+06  3.288946e+06   \nmean             2.861508e+02  3.986567e+00  1.640787e+01  5.186564e+00   \nstd              1.175183e+01  1.885013e+00  2.493698e+01  1.609197e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.776000e+02  2.700000e+00  0.000000e+00  0.000000e+00   \n50%              2.853000e+02  3.600000e+00  0.000000e+00  0.000000e+00   \n75%              2.947000e+02  4.900000e+00  3.500876e+01  0.000000e+00   \nmax              3.223000e+02  1.960000e+01  9.700000e+01  2.400000e+02   \n       air_temperature_tmmn_2  potential_evapotranspiration_2  \\\ncount            3.288946e+06                    3.288946e+06   \nmean             2.730457e+02                    4.716243e+00   \nstd              9.680565e+00                    2.913327e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.673000e+02                    2.200000e+00   \n50%              2.729000e+02                    4.400000e+00   \n75%              2.794000e+02                    6.900000e+00   \nmax              3.085000e+02                    2.210000e+01   \n       mean_vapor_pressure_deficit_2  relative_humidity_rmax_2  \\\ncount                   3.288946e+06              3.288946e+06   \nmean                    8.761723e-01              7.367328e+01   \nstd                     7.377316e-01              2.072143e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.900000e-01              5.820000e+01   \n50%                     6.700000e-01              7.610000e+01   \n75%                     1.300000e+00              9.190000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_2  precipitation_amount_2  \\\ncount              3.288946e+06            3.288946e+06   \nmean               3.382080e+01            1.793117e+00   \nstd                1.904546e+01            5.717969e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.910000e+01            0.000000e+00   \n50%                2.970000e+01            0.000000e+00   \n75%                4.570000e+01            1.000000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_2  wind_speed_2        fsca_2         SWE_3  \\\ncount            3.288946e+06  3.288946e+06  3.288946e+06  3.288946e+06   \nmean             2.861726e+02  3.986338e+00  1.636537e+01  5.178889e+00   \nstd              1.174368e+01  1.884488e+00  2.491430e+01  1.609018e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.776000e+02  2.700000e+00  0.000000e+00  0.000000e+00   \n50%              2.854000e+02  3.600000e+00  0.000000e+00  0.000000e+00   \n75%              2.947000e+02  4.900000e+00  3.500000e+01  0.000000e+00   \nmax              3.223000e+02  1.960000e+01  9.700000e+01  2.400000e+02   \n       air_temperature_tmmn_3  potential_evapotranspiration_3  \\\ncount            3.288946e+06                    3.288946e+06   \nmean             2.730606e+02                    4.717193e+00   \nstd              9.671118e+00                    2.913488e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.673000e+02                    2.200000e+00   \n50%              2.729000e+02                    4.401799e+00   \n75%              2.795000e+02                    6.900000e+00   \nmax              3.085000e+02                    2.210000e+01   \n       mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\ncount                   3.288946e+06              3.288946e+06   \nmean                    8.767316e-01              7.366130e+01   \nstd                     7.377295e-01              2.071709e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.900000e-01              5.820000e+01   \n50%                     6.700000e-01              7.600000e+01   \n75%                     1.300000e+00              9.190000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_3  precipitation_amount_3  \\\ncount              3.288946e+06            3.288946e+06   \nmean               3.381791e+01            1.796065e+00   \nstd                1.905189e+01            5.724678e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.910000e+01            0.000000e+00   \n50%                2.970000e+01            0.000000e+00   \n75%                4.560957e+01            1.000000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_3  wind_speed_3        fsca_3         SWE_4  \\\ncount            3.288946e+06  3.288946e+06  3.288946e+06  3.288946e+06   \nmean             2.861995e+02  3.987771e+00  1.632141e+01  5.171163e+00   \nstd              1.173296e+01  1.885884e+00  2.489084e+01  1.608838e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.777000e+02  2.700000e+00  0.000000e+00  0.000000e+00   \n50%              2.854000e+02  3.600000e+00  0.000000e+00  0.000000e+00   \n75%              2.948000e+02  4.900000e+00  3.500000e+01  0.000000e+00   \nmax              3.223000e+02  1.960000e+01  9.700000e+01  2.400000e+02   \n       air_temperature_tmmn_4  potential_evapotranspiration_4  \\\ncount            3.288946e+06                    3.288946e+06   \nmean             2.730784e+02                    4.717708e+00   \nstd              9.662371e+00                    2.913633e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.673000e+02                    2.200000e+00   \n50%              2.729000e+02                    4.499600e+00   \n75%              2.795000e+02                    6.900000e+00   \nmax              3.085000e+02                    2.210000e+01   \n       mean_vapor_pressure_deficit_4  relative_humidity_rmax_4  \\\ncount                   3.288946e+06              3.288946e+06   \nmean                    8.771920e-01              7.363589e+01   \nstd                     7.376163e-01              2.072111e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.900000e-01              5.820000e+01   \n50%                     6.700000e-01              7.600000e+01   \n75%                     1.300000e+00              9.190000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_4  precipitation_amount_4  \\\ncount              3.288946e+06            3.288946e+06   \nmean               3.379764e+01            1.795838e+00   \nstd                1.903659e+01            5.724767e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.910000e+01            0.000000e+00   \n50%                2.960030e+01            0.000000e+00   \n75%                4.560000e+01            1.000000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_4  wind_speed_4        fsca_4         SWE_5  \\\ncount            3.288946e+06  3.288946e+06  3.288946e+06  3.288946e+06   \nmean             2.862284e+02  3.987496e+00  1.627598e+01  5.164319e+00   \nstd              1.172070e+01  1.884764e+00  2.486735e+01  1.608689e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.777000e+02  2.700000e+00  0.000000e+00  0.000000e+00   \n50%              2.854000e+02  3.600000e+00  0.000000e+00  0.000000e+00   \n75%              2.948000e+02  4.900000e+00  3.480000e+01  0.000000e+00   \nmax              3.223000e+02  1.960000e+01  9.700000e+01  2.400000e+02   \n       air_temperature_tmmn_5  potential_evapotranspiration_5  \\\ncount            3.288946e+06                    3.288946e+06   \nmean             2.730965e+02                    4.717917e+00   \nstd              9.654314e+00                    2.913965e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.673000e+02                    2.200000e+00   \n50%              2.730000e+02                    4.499500e+00   \n75%              2.795000e+02                    6.900000e+00   \nmax              3.085000e+02                    2.210000e+01   \n       mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\ncount                   3.288946e+06              3.288946e+06   \nmean                    8.773877e-01              7.360392e+01   \nstd                     7.374199e-01              2.072353e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.900000e-01              5.810000e+01   \n50%                     6.700000e-01              7.600000e+01   \n75%                     1.300000e+00              9.180000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_5  precipitation_amount_5  \\\ncount              3.288946e+06            3.288946e+06   \nmean               3.376894e+01            1.792375e+00   \nstd                1.902232e+01            5.720682e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.910000e+01            0.000000e+00   \n50%                2.960000e+01            0.000000e+00   \n75%                4.550000e+01            1.000000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_5  wind_speed_5        fsca_5         SWE_6  \\\ncount            3.288946e+06  3.288946e+06  3.288946e+06  3.288946e+06   \nmean             2.862553e+02  3.986243e+00  1.622967e+01  5.159823e+00   \nstd              1.170849e+01  1.882665e+00  2.484369e+01  1.608573e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.777000e+02  2.700000e+00  0.000000e+00  0.000000e+00   \n50%              2.855000e+02  3.600000e+00  0.000000e+00  0.000000e+00   \n75%              2.948000e+02  4.900000e+00  3.450000e+01  0.000000e+00   \nmax              3.223000e+02  1.960000e+01  9.700000e+01  2.400000e+02   \n       air_temperature_tmmn_6  potential_evapotranspiration_6  \\\ncount            3.288946e+06                    3.288946e+06   \nmean             2.731133e+02                    4.716793e+00   \nstd              9.648302e+00                    2.913681e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.674000e+02                    2.200000e+00   \n50%              2.730000e+02                    4.400000e+00   \n75%              2.795000e+02                    6.900000e+00   \nmax              3.085000e+02                    2.210000e+01   \n       mean_vapor_pressure_deficit_6  relative_humidity_rmax_6  \\\ncount                   3.288946e+06              3.288946e+06   \nmean                    8.773255e-01              7.356936e+01   \nstd                     7.372593e-01              2.072143e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.900000e-01              5.810000e+01   \n50%                     6.700000e-01              7.590000e+01   \n75%                     1.300000e+00              9.180000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_6  precipitation_amount_6  \\\ncount              3.288946e+06            3.288946e+06   \nmean               3.373705e+01            1.785906e+00   \nstd                1.900428e+01            5.713897e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.910000e+01            0.000000e+00   \n50%                2.960000e+01            0.000000e+00   \n75%                4.550000e+01            9.871091e-01   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_6  wind_speed_6        fsca_6         SWE_7  \\\ncount            3.288946e+06  3.288946e+06  3.288946e+06  3.288946e+06   \nmean             2.862777e+02  3.982323e+00  1.618349e+01  5.156817e+00   \nstd              1.169819e+01  1.876762e+00  2.482105e+01  1.608499e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.777006e+02  2.700000e+00  0.000000e+00  0.000000e+00   \n50%              2.855000e+02  3.600000e+00  0.000000e+00  0.000000e+00   \n75%              2.948000e+02  4.900000e+00  3.422359e+01  0.000000e+00   \nmax              3.223000e+02  1.960000e+01  9.700000e+01  2.400000e+02   \n       air_temperature_tmmn_7  potential_evapotranspiration_7  \\\ncount            3.288946e+06                    3.288946e+06   \nmean             2.731266e+02                    4.716386e+00   \nstd              9.646655e+00                    2.914236e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.674000e+02                    2.200000e+00   \n50%              2.730000e+02                    4.400000e+00   \n75%              2.795000e+02                    6.900000e+00   \nmax              3.085000e+02                    2.210000e+01   \n       mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\ncount                   3.288946e+06              3.288946e+06   \nmean                    8.772951e-01              7.353994e+01   \nstd                     7.371051e-01              2.071987e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.900000e-01              5.800000e+01   \n50%                     6.700000e-01              7.590000e+01   \n75%                     1.300000e+00              9.170233e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_7  precipitation_amount_7  \\\ncount              3.288946e+06            3.288946e+06   \nmean               3.370800e+01            1.777784e+00   \nstd                1.898764e+01            5.695137e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.910000e+01            0.000000e+00   \n50%                2.960000e+01            0.000000e+00   \n75%                4.540000e+01            9.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_7  wind_speed_7        fsca_7  \ncount            3.288946e+06  3.288946e+06  3.288946e+06  \nmean             2.862967e+02  3.980900e+00  1.613796e+01  \nstd              1.169094e+01  1.875127e+00  2.479872e+01  \nmin              0.000000e+00  0.000000e+00  0.000000e+00  \n25%              2.778000e+02  2.700000e+00  0.000000e+00  \n50%              2.855000e+02  3.600000e+00  0.000000e+00  \n75%              2.948000e+02  4.900000e+00  3.400000e+01  \nmax              3.223000e+02  1.960000e+01  9.700000e+01  \nhow many groups?  <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7fc8358f7850>\nThis is the dataframe after cumulative columns are added\ncount    3.288946e+06\nmean     4.965370e+03\nstd      7.229009e+03\nmin      0.000000e+00\n25%      4.949803e+02\n50%      2.637006e+03\n75%      6.815005e+03\nmax      6.203291e+04\nName: cumulative_fsca, dtype: float64\nAll the cumulative variables are added successfully! /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_active_stations_v1.csv_sorted.csv_time_series_cumulative_v1.csv\ndouble check the swe_value statistics: count    3.288946e+06\nmean     1.207488e+00\nstd      4.703094e+00\nmin     -8.000000e+00\n25%      0.000000e+00\n50%      0.000000e+00\n75%      0.000000e+00\nmax      1.021000e+02\nName: swe_value, dtype: float64\n",
  "history_begin_time" : 1703617167347,
  "history_end_time" : 1703617935180,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "NiVJeFVGclQW",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n# Define file paths for various CSV files\n# current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_active_stations_v1.csv_sorted.csv'\ntarget_time_series_csv_path = f'{current_ready_csv_path}_time_series_v1.csv'\nbackup_time_series_csv_path = f'{current_ready_csv_path}_time_series_v1_bak.csv'\n# target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\ntarget_time_series_cumulative_csv_path = f'{current_ready_csv_path}_time_series_cumulative_v1.csv'\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    if column_name == \"SWE\":\n      mask = (y > 240) | y.isnull()\n    elif column_name == \"fsca\":\n      mask = (y > 100) | y.isnull()\n    else:\n      mask = y.isnull()\n\n    # Check if all elements in the mask array are True\n    all_true = np.all(mask)\n\n    if all_true:\n      df[column_name] = 0\n    else:\n      # Perform interpolation\n      new_y = np.interp(x, x[~mask], y[~mask])\n      # Replace missing values with interpolated values\n      df[column_name] = new_y\n\n    if np.any(df[column_name].isnull()):\n      raise ValueError(\"Single group: shouldn't have null values here\")\n        \n    return df\n\ndef convert_to_time_series(input_csv, output_csv):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                         'AMSR_SWE': 'SWE',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv):\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['fsca'] > 100):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        filled_data.to_csv(filled_csv, index=False)\n        \n        print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv):\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n        result.fillna(0, inplace=True)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_cumulated = [\n      \"SWE\", \n      \"Flag\", \n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv)\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2019-10-01')\n    end_date = pd.to_datetime('2022-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df[\"cumulative_fsca\"].describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n    \n\nif __name__ == \"__main__\":\n    # Uncomment this line to execute the 'convert_to_time_series' function\n    convert_to_time_series(current_ready_csv_path, target_time_series_csv_path)\n\n    # Uncomment this line to execute the 'add_cumulative_columns' function\n    add_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path)\n",
  "history_output" : "today date = 2023-12-26\ntest start date:  2023-01-20\ntest end date:  2023-10-11\n/home/chetana\n2022275\nAll current columns:  Index(['date', 'lat', 'lon', 'AMSR_SWE', 'station_name', 'swe_value',\n       'change_in_swe_inch', 'snow_depth', 'air_temperature_observed_f',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'stationTriplet', 'elevation',\n       'Elevation', 'Slope', 'Aspect', 'Curvature', 'Northness', 'Eastness',\n       'fsca'],\n      dtype='object')\nStart to fill in the missing values\nNew filled values csv is saved to /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_active_stations_v1.csv_sorted.csv_time_series_v1.csv_gap_filled.csv\nStart to create the training csv with previous 7 days columns\nNew data is saved to /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_active_stations_v1.csv_sorted.csv_time_series_v1.csv\nFile is backed up to /home/chetana/gridmet_test_run/final_merged_data_3yrs_all_active_stations_v1.csv_sorted.csv_time_series_v1_bak.csv\n/home/chetana/gw-workspace/NiVJeFVGclQW/convert_to_time_series.py:186: DtypeWarning: Columns (4) have mixed types. Specify dtype option on import or set low_memory=False.\n  df = pd.read_csv(input_csv)\nthe column statistics from time series before cumulative:                  lat           lon           SWE     swe_value  \\\ncount  5.831374e+06  5.831374e+06  5.831374e+06  5.831374e+06   \nmean   4.190023e+01 -1.136720e+02  8.872740e+00  1.402257e+00   \nstd    3.848358e+00  5.685628e+00  1.807279e+01  5.470743e+00   \nmin    3.141666e+01 -1.245500e+02  0.000000e+00 -8.000000e+00   \n25%    3.893601e+01 -1.191265e+02  0.000000e+00  0.000000e+00   \n50%    4.158700e+01 -1.129643e+02  0.000000e+00  0.000000e+00   \n75%    4.494000e+01 -1.090667e+02  1.300000e+01  0.000000e+00   \nmax    4.900000e+01 -1.005075e+02  2.400000e+02  1.066000e+02   \n       change_in_swe_inch    snow_depth  air_temperature_observed_f  \\\ncount        5.831374e+06  5.831374e+06                5.831374e+06   \nmean         2.774989e-03  3.850921e+00                9.494213e+00   \nstd          1.151723e+00  1.384436e+01                1.779046e+01   \nmin         -3.010000e+02  0.000000e+00               -8.660000e+01   \n25%          0.000000e+00  0.000000e+00                0.000000e+00   \n50%          0.000000e+00  0.000000e+00                0.000000e+00   \n75%          0.000000e+00  0.000000e+00                9.100000e+00   \nmax          4.620000e+02  4.620000e+02                6.710000e+02   \n       air_temperature_tmmn  potential_evapotranspiration  \\\ncount          5.831374e+06                  5.831374e+06   \nmean           2.733119e+02                  4.355479e+00   \nstd            9.762602e+00                  2.859076e+00   \nmin            0.000000e+00                  0.000000e+00   \n25%            2.675998e+02                  1.900000e+00   \n50%            2.735000e+02                  3.800327e+00   \n75%            2.799000e+02                  6.500000e+00   \nmax            3.085000e+02                  2.480000e+01   \n       mean_vapor_pressure_deficit  relative_humidity_rmax  \\\ncount                 5.831374e+06            5.831374e+06   \nmean                  7.726802e-01            7.382125e+01   \nstd                   6.945363e-01            2.029552e+01   \nmin                   0.000000e+00            0.000000e+00   \n25%                   2.400000e-01            5.890000e+01   \n50%                   5.500000e-01            7.590000e+01   \n75%                   1.130000e+00            9.150000e+01   \nmax                   7.660000e+00            1.000000e+02   \n       relative_humidity_rmin  precipitation_amount  air_temperature_tmmx  \\\ncount            5.831374e+06          5.831374e+06          5.831374e+06   \nmean             3.433630e+01          1.899181e+00          2.864632e+02   \nstd              1.876338e+01          5.797270e+00          1.182823e+01   \nmin              0.000000e+00          0.000000e+00          0.000000e+00   \n25%              1.990000e+01          0.000000e+00          2.778000e+02   \n50%              3.040000e+01          0.000000e+00          2.860000e+02   \n75%              4.600000e+01          1.200000e+00          2.952000e+02   \nmax              1.000000e+02          5.042000e+02          3.223000e+02   \n         wind_speed     elevation     Elevation         Slope        Aspect  \\\ncount  5.831374e+06  5.831374e+06  5.831374e+06  5.831374e+06  5.831374e+06   \nmean   3.942010e+00  5.999921e+03  1.904316e+03  1.031573e+00  1.867008e+02   \nstd    1.843856e+00  2.569634e+03  7.942218e+02  3.590236e+00  1.066232e+02   \nmin    0.000000e+00  1.000000e+01 -1.207950e+00  6.327820e-02 -0.000000e+00   \n25%    2.600000e+00  4.340000e+03  1.354743e+03  2.460251e-01  9.189144e+01   \n50%    3.600000e+00  6.200000e+03  1.935498e+03  4.256592e-01  1.912890e+02   \n75%    4.800000e+00  7.886000e+03  2.483709e+03  8.868256e-01  2.813530e+02   \nmax    1.960000e+01  1.170000e+04  3.978188e+03  9.000000e+01  3.599130e+02   \n          Curvature     Northness      Eastness          fsca         SWE_1  \\\ncount  5.831374e+06  5.831374e+06  5.831374e+06  5.831374e+06  5.831374e+06   \nmean  -6.338177e+02  3.744572e-02  3.848866e-02  1.712213e+01  8.869669e+00   \nstd    5.033858e+03  5.879777e-01  5.816885e-01  2.570079e+01  1.807285e+01   \nmin   -2.198460e+04 -7.853982e-01 -7.853979e-01  0.000000e+00  0.000000e+00   \n25%   -3.618001e+03 -5.882038e-01 -5.711176e-01  0.000000e+00  0.000000e+00   \n50%    2.900531e+02  9.371997e-02  8.551028e-02  0.000000e+00  0.000000e+00   \n75%    2.557073e+03  6.423781e-01  6.407763e-01  3.800000e+01  1.300000e+01   \nmax    1.757020e+04  7.853978e-01  7.853982e-01  9.700000e+01  2.400000e+02   \n       air_temperature_tmmn_1  potential_evapotranspiration_1  \\\ncount            5.831374e+06                    5.831374e+06   \nmean             2.731504e+02                    4.351597e+00   \nstd              1.190498e+01                    2.859914e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.675011e+02                    1.900000e+00   \n50%              2.735000e+02                    3.800000e+00   \n75%              2.799000e+02                    6.500000e+00   \nmax              3.085000e+02                    2.480000e+01   \n       mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\ncount                   5.831374e+06              5.831374e+06   \nmean                    7.721802e-01              7.376410e+01   \nstd                     6.945745e-01              2.037193e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.400000e-01              5.889685e+01   \n50%                     5.500000e-01              7.580000e+01   \n75%                     1.130000e+00              9.150000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_1  precipitation_amount_1  \\\ncount              5.831374e+06            5.831374e+06   \nmean               3.429772e+01            1.897124e+00   \nstd                1.876717e+01            5.795678e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.990000e+01            0.000000e+00   \n50%                3.040000e+01            0.000000e+00   \n75%                4.599831e+01            1.200000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_1  wind_speed_1        fsca_1         SWE_2  \\\ncount            5.831374e+06  5.831374e+06  5.831374e+06  5.831374e+06   \nmean             2.862952e+02  3.939851e+00  1.709503e+01  8.866244e+00   \nstd              1.381568e+01  1.846039e+00  2.568883e+01  1.807292e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.778000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.860000e+02  3.600000e+00  0.000000e+00  0.000000e+00   \n75%              2.952000e+02  4.800000e+00  3.800000e+01  1.300000e+01   \nmax              3.223000e+02  1.960000e+01  9.700000e+01  2.400000e+02   \n       air_temperature_tmmn_2  potential_evapotranspiration_2  \\\ncount            5.831374e+06                    5.831374e+06   \nmean             2.729858e+02                    4.347450e+00   \nstd              1.371809e+01                    2.860538e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.675000e+02                    1.900000e+00   \n50%              2.735000e+02                    3.800000e+00   \n75%              2.799000e+02                    6.500000e+00   \nmax              3.085000e+02                    2.480000e+01   \n       mean_vapor_pressure_deficit_2  relative_humidity_rmax_2  \\\ncount                   5.831374e+06              5.831374e+06   \nmean                    7.716782e-01              7.370582e+01   \nstd                     6.946119e-01              2.044700e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.400000e-01              5.880000e+01   \n50%                     5.500000e-01              7.580000e+01   \n75%                     1.130000e+00              9.140312e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_2  precipitation_amount_2  \\\ncount              5.831374e+06            5.831374e+06   \nmean               3.426314e+01            1.894248e+00   \nstd                1.877606e+01            5.793453e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.980000e+01            0.000000e+00   \n50%                3.040000e+01            0.000000e+00   \n75%                4.590000e+01            1.200000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_2  wind_speed_2        fsca_2         SWE_3  \\\ncount            5.831374e+06  5.831374e+06  5.831374e+06  5.831374e+06   \nmean             2.861258e+02  3.936180e+00  1.706793e+01  8.861901e+00   \nstd              1.555108e+01  1.846650e+00  2.567685e+01  1.807291e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.778000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.860000e+02  3.600000e+00  0.000000e+00  0.000000e+00   \n75%              2.952000e+02  4.800000e+00  3.790053e+01  1.300000e+01   \nmax              3.223000e+02  1.960000e+01  9.700000e+01  2.400000e+02   \n       air_temperature_tmmn_3  potential_evapotranspiration_3  \\\ncount            5.831374e+06                    5.831374e+06   \nmean             2.728230e+02                    4.343336e+00   \nstd              1.531489e+01                    2.861466e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.675000e+02                    1.900000e+00   \n50%              2.735000e+02                    3.800000e+00   \n75%              2.799000e+02                    6.500000e+00   \nmax              3.085000e+02                    2.480000e+01   \n       mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\ncount                   5.831374e+06              5.831374e+06   \nmean                    7.711760e-01              7.364954e+01   \nstd                     6.946503e-01              2.052278e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.400000e-01              5.880000e+01   \n50%                     5.500000e-01              7.580000e+01   \n75%                     1.130000e+00              9.140000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_3  precipitation_amount_3  \\\ncount              5.831374e+06            5.831374e+06   \nmean               3.422769e+01            1.892077e+00   \nstd                1.878438e+01            5.792529e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.980000e+01            0.000000e+00   \n50%                3.030000e+01            0.000000e+00   \n75%                4.590000e+01            1.100200e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_3  wind_speed_3        fsca_3         SWE_4  \\\ncount            5.831374e+06  5.831374e+06  5.831374e+06  5.831374e+06   \nmean             2.859580e+02  3.933487e+00  1.704085e+01  8.857529e+00   \nstd              1.710828e+01  1.848616e+00  2.566483e+01  1.807289e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.778000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.860000e+02  3.599600e+00  0.000000e+00  0.000000e+00   \n75%              2.952000e+02  4.800000e+00  3.766901e+01  1.300000e+01   \nmax              3.223000e+02  1.960000e+01  9.700000e+01  2.400000e+02   \n       air_temperature_tmmn_4  potential_evapotranspiration_4  \\\ncount            5.831374e+06                    5.831374e+06   \nmean             2.726601e+02                    4.339110e+00   \nstd              1.675875e+01                    2.862549e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.675000e+02                    1.900000e+00   \n50%              2.735000e+02                    3.800000e+00   \n75%              2.799000e+02                    6.498439e+00   \nmax              3.085000e+02                    2.480000e+01   \n       mean_vapor_pressure_deficit_4  relative_humidity_rmax_4  \\\ncount                   5.831374e+06              5.831374e+06   \nmean                    7.706729e-01              7.359432e+01   \nstd                     6.946898e-01              2.059840e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.400000e-01              5.870000e+01   \n50%                     5.500000e-01              7.570001e+01   \n75%                     1.130000e+00              9.140000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_4  precipitation_amount_4  \\\ncount              5.831374e+06            5.831374e+06   \nmean               3.419158e+01            1.890298e+00   \nstd                1.879167e+01            5.791821e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.980000e+01            0.000000e+00   \n50%                3.030000e+01            0.000000e+00   \n75%                4.580000e+01            1.100000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_4  wind_speed_4        fsca_4         SWE_5  \\\ncount            5.831374e+06  5.831374e+06  5.831374e+06  5.831374e+06   \nmean             2.857908e+02  3.930676e+00  1.701386e+01  8.853649e+00   \nstd              1.853298e+01  1.850310e+00  2.565290e+01  1.807293e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.778000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.860000e+02  3.500525e+00  0.000000e+00  0.000000e+00   \n75%              2.952000e+02  4.800000e+00  3.750156e+01  1.300000e+01   \nmax              3.223000e+02  1.960000e+01  9.700000e+01  2.400000e+02   \n       air_temperature_tmmn_5  potential_evapotranspiration_5  \\\ncount            5.831374e+06                    5.831374e+06   \nmean             2.724969e+02                    4.335111e+00   \nstd              1.808636e+01                    2.863902e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.675000e+02                    1.900000e+00   \n50%              2.735000e+02                    3.800000e+00   \n75%              2.799000e+02                    6.400000e+00   \nmax              3.085000e+02                    2.480000e+01   \n       mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\ncount                   5.831374e+06              5.831374e+06   \nmean                    7.701696e-01              7.353873e+01   \nstd                     6.947255e-01              2.067438e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.400000e-01              5.870000e+01   \n50%                     5.500000e-01              7.570001e+01   \n75%                     1.130000e+00              9.140000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_5  precipitation_amount_5  \\\ncount              5.831374e+06            5.831374e+06   \nmean               3.415632e+01            1.887170e+00   \nstd                1.879933e+01            5.788662e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.980000e+01            0.000000e+00   \n50%                3.030000e+01            0.000000e+00   \n75%                4.580000e+01            1.100000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_5  wind_speed_5        fsca_5         SWE_6  \\\ncount            5.831374e+06  5.831374e+06  5.831374e+06  5.831374e+06   \nmean             2.856229e+02  3.926977e+00  1.698698e+01  8.851081e+00   \nstd              1.985477e+01  1.851076e+00  2.564088e+01  1.807286e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.778000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.860000e+02  3.500000e+00  0.000000e+00  0.000000e+00   \n75%              2.952000e+02  4.800000e+00  3.740014e+01  1.300000e+01   \nmax              3.223000e+02  1.960000e+01  9.700000e+01  2.400000e+02   \n       air_temperature_tmmn_6  potential_evapotranspiration_6  \\\ncount            5.831374e+06                    5.831374e+06   \nmean             2.723329e+02                    4.330843e+00   \nstd              1.932210e+01                    2.864920e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.675000e+02                    1.900000e+00   \n50%              2.735000e+02                    3.800000e+00   \n75%              2.799000e+02                    6.400000e+00   \nmax              3.085000e+02                    2.480000e+01   \n       mean_vapor_pressure_deficit_6  relative_humidity_rmax_6  \\\ncount                   5.831374e+06              5.831374e+06   \nmean                    7.696691e-01              7.348127e+01   \nstd                     6.947638e-01              2.074845e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.400000e-01              5.860000e+01   \n50%                     5.500000e-01              7.570001e+01   \n75%                     1.130000e+00              9.130000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_6  precipitation_amount_6  \\\ncount              5.831374e+06            5.831374e+06   \nmean               3.412083e+01            1.883249e+00   \nstd                1.880629e+01            5.784789e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.970006e+01            0.000000e+00   \n50%                3.020000e+01            0.000000e+00   \n75%                4.570000e+01            1.100000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_6  wind_speed_6        fsca_6         SWE_7  \\\ncount            5.831374e+06  5.831374e+06  5.831374e+06  5.831374e+06   \nmean             2.854538e+02  3.922301e+00  1.696053e+01  8.849371e+00   \nstd              2.109345e+01  1.849889e+00  2.562934e+01  1.807283e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.778000e+02  2.600000e+00  0.000000e+00  0.000000e+00   \n50%              2.860000e+02  3.500000e+00  0.000000e+00  0.000000e+00   \n75%              2.952000e+02  4.800000e+00  3.725183e+01  1.300000e+01   \nmax              3.223000e+02  1.960000e+01  9.700000e+01  2.400000e+02   \n       air_temperature_tmmn_7  potential_evapotranspiration_7  \\\ncount            5.831374e+06                    5.831374e+06   \nmean             2.721666e+02                    4.326846e+00   \nstd              2.048314e+01                    2.866261e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.675000e+02                    1.900000e+00   \n50%              2.735000e+02                    3.800000e+00   \n75%              2.799000e+02                    6.400000e+00   \nmax              3.085000e+02                    2.480000e+01   \n       mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\ncount                   5.831374e+06              5.831374e+06   \nmean                    7.691693e-01              7.342436e+01   \nstd                     6.947996e-01              2.082304e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.400000e-01              5.860000e+01   \n50%                     5.500000e-01              7.560000e+01   \n75%                     1.130000e+00              9.130000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_7  precipitation_amount_7  \\\ncount              5.831374e+06            5.831374e+06   \nmean               3.408493e+01            1.878433e+00   \nstd                1.881287e+01            5.774238e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.970000e+01            0.000000e+00   \n50%                3.020000e+01            0.000000e+00   \n75%                4.570000e+01            1.100000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_7  wind_speed_7        fsca_7  \ncount            5.831374e+06  5.831374e+06  5.831374e+06  \nmean             2.852833e+02  3.918437e+00  1.693449e+01  \nstd              2.226296e+01  1.850701e+00  2.561797e+01  \nmin              0.000000e+00  0.000000e+00  0.000000e+00  \n25%              2.778000e+02  2.600000e+00  0.000000e+00  \n50%              2.860000e+02  3.500000e+00  0.000000e+00  \n75%              2.952000e+02  4.800000e+00  3.700376e+01  \nmax              3.223000e+02  1.960000e+01  9.700000e+01  \nThis is our unique years [2018 2019 2020 2021]\nhow many rows are left in the three water years?                 lat           lon           SWE     swe_value  \\\ncount  3.288946e+06  3.288946e+06  3.288946e+06  3.288946e+06   \nmean   4.189836e+01 -1.136754e+02  5.197746e+00  1.207488e+00   \nstd    3.848272e+00  5.685615e+00  1.609404e+01  4.703094e+00   \nmin    3.141666e+01 -1.245500e+02  0.000000e+00 -8.000000e+00   \n25%    3.892582e+01 -1.191414e+02  0.000000e+00  0.000000e+00   \n50%    4.158700e+01 -1.129819e+02  0.000000e+00  0.000000e+00   \n75%    4.494000e+01 -1.090667e+02  0.000000e+00  0.000000e+00   \nmax    4.900000e+01 -1.005075e+02  2.400000e+02  1.021000e+02   \n       change_in_swe_inch    snow_depth  air_temperature_observed_f  \\\ncount        3.288946e+06  3.288946e+06                3.288946e+06   \nmean         1.010293e-02  3.548387e+00                9.391730e+00   \nstd          1.228916e+00  1.285056e+01                1.759004e+01   \nmin         -1.360000e+02  0.000000e+00               -8.500000e+01   \n25%          0.000000e+00  0.000000e+00                0.000000e+00   \n50%          0.000000e+00  0.000000e+00                0.000000e+00   \n75%          0.000000e+00  0.000000e+00                1.000000e+01   \nmax          1.380000e+02  2.290000e+02                6.710000e+02   \n       air_temperature_tmmn  potential_evapotranspiration  \\\ncount          3.288946e+06                  3.288946e+06   \nmean           2.730210e+02                  4.714184e+00   \nstd            9.698977e+00                  2.913859e+00   \nmin            0.000000e+00                  0.000000e+00   \n25%            2.672000e+02                  2.200000e+00   \n50%            2.729000e+02                  4.400000e+00   \n75%            2.794000e+02                  6.900000e+00   \nmax            3.085000e+02                  2.210000e+01   \n       mean_vapor_pressure_deficit  relative_humidity_rmax  \\\ncount                 3.288946e+06            3.288946e+06   \nmean                  8.749891e-01            7.371253e+01   \nstd                   7.376970e-01            2.072674e+01   \nmin                   0.000000e+00            0.000000e+00   \n25%                   2.900000e-01            5.820000e+01   \n50%                   6.700000e-01            7.610000e+01   \n75%                   1.300000e+00            9.200000e+01   \nmax                   7.660000e+00            1.000000e+02   \n       relative_humidity_rmin  precipitation_amount  air_temperature_tmmx  \\\ncount            3.288946e+06          3.288946e+06          3.288946e+06   \nmean             3.384550e+01          1.797024e+00          2.861291e+02   \nstd              1.905449e+01          5.722536e+00          1.176484e+01   \nmin              0.000000e+00          0.000000e+00          0.000000e+00   \n25%              1.910000e+01          0.000000e+00          2.776000e+02   \n50%              2.970000e+01          0.000000e+00          2.853000e+02   \n75%              4.570000e+01          1.000000e+00          2.947000e+02   \nmax              1.000000e+02          5.042000e+02          3.223000e+02   \n         wind_speed     elevation     Elevation         Slope        Aspect  \\\ncount  3.288946e+06  3.288946e+06  3.288946e+06  3.288946e+06  3.288946e+06   \nmean   3.986164e+00  6.000521e+03  1.904546e+03  1.031314e+00  1.866801e+02   \nstd    1.884486e+00  2.569585e+03  7.941488e+02  3.590373e+00  1.066173e+02   \nmin    0.000000e+00  1.000000e+01 -1.207950e+00  6.327820e-02 -0.000000e+00   \n25%    2.700000e+00  4.340000e+03  1.355136e+03  2.460251e-01  9.189144e+01   \n50%    3.600000e+00  6.200000e+03  1.935498e+03  4.256592e-01  1.911646e+02   \n75%    4.900000e+00  7.886000e+03  2.483709e+03  8.868256e-01  2.813530e+02   \nmax    1.960000e+01  1.170000e+04  3.978188e+03  9.000000e+01  3.599130e+02   \n          Curvature     Northness      Eastness          fsca         SWE_1  \\\ncount  3.288946e+06  3.288946e+06  3.288946e+06  3.288946e+06  3.288946e+06   \nmean  -6.361626e+02  3.739390e-02  3.836442e-02  1.644955e+01  5.192584e+00   \nstd    5.034246e+03  5.879487e-01  5.817316e-01  2.495860e+01  1.609319e+01   \nmin   -2.198460e+04 -7.853982e-01 -7.853979e-01  0.000000e+00  0.000000e+00   \n25%   -3.618001e+03 -5.892057e-01 -5.711176e-01  0.000000e+00  0.000000e+00   \n50%    2.899267e+02  9.371997e-02  8.463854e-02  0.000000e+00  0.000000e+00   \n75%    2.557073e+03  6.423781e-01  6.407763e-01  3.538775e+01  0.000000e+00   \nmax    1.757020e+04  7.853978e-01  7.853982e-01  9.700000e+01  2.400000e+02   \n       air_temperature_tmmn_1  potential_evapotranspiration_1  \\\ncount            3.288946e+06                    3.288946e+06   \nmean             2.730356e+02                    4.715851e+00   \nstd              9.685627e+00                    2.914241e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.673000e+02                    2.200000e+00   \n50%              2.729000e+02                    4.400000e+00   \n75%              2.794000e+02                    6.900000e+00   \nmax              3.085000e+02                    2.210000e+01   \n       mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\ncount                   3.288946e+06              3.288946e+06   \nmean                    8.755408e-01              7.369034e+01   \nstd                     7.376822e-01              2.072647e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.900000e-01              5.820000e+01   \n50%                     6.700000e-01              7.610000e+01   \n75%                     1.300000e+00              9.200000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_1  precipitation_amount_1  \\\ncount              3.288946e+06            3.288946e+06   \nmean               3.382311e+01            1.794437e+00   \nstd                1.903805e+01            5.720079e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.910000e+01            0.000000e+00   \n50%                2.970000e+01            0.000000e+00   \n75%                4.570000e+01            1.000000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_1  wind_speed_1        fsca_1         SWE_2  \\\ncount            3.288946e+06  3.288946e+06  3.288946e+06  3.288946e+06   \nmean             2.861508e+02  3.986567e+00  1.640787e+01  5.186564e+00   \nstd              1.175183e+01  1.885013e+00  2.493698e+01  1.609197e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.776000e+02  2.700000e+00  0.000000e+00  0.000000e+00   \n50%              2.853000e+02  3.600000e+00  0.000000e+00  0.000000e+00   \n75%              2.947000e+02  4.900000e+00  3.500876e+01  0.000000e+00   \nmax              3.223000e+02  1.960000e+01  9.700000e+01  2.400000e+02   \n       air_temperature_tmmn_2  potential_evapotranspiration_2  \\\ncount            3.288946e+06                    3.288946e+06   \nmean             2.730457e+02                    4.716243e+00   \nstd              9.680565e+00                    2.913327e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.673000e+02                    2.200000e+00   \n50%              2.729000e+02                    4.400000e+00   \n75%              2.794000e+02                    6.900000e+00   \nmax              3.085000e+02                    2.210000e+01   \n       mean_vapor_pressure_deficit_2  relative_humidity_rmax_2  \\\ncount                   3.288946e+06              3.288946e+06   \nmean                    8.761723e-01              7.367328e+01   \nstd                     7.377316e-01              2.072143e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.900000e-01              5.820000e+01   \n50%                     6.700000e-01              7.610000e+01   \n75%                     1.300000e+00              9.190000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_2  precipitation_amount_2  \\\ncount              3.288946e+06            3.288946e+06   \nmean               3.382080e+01            1.793117e+00   \nstd                1.904546e+01            5.717969e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.910000e+01            0.000000e+00   \n50%                2.970000e+01            0.000000e+00   \n75%                4.570000e+01            1.000000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_2  wind_speed_2        fsca_2         SWE_3  \\\ncount            3.288946e+06  3.288946e+06  3.288946e+06  3.288946e+06   \nmean             2.861726e+02  3.986338e+00  1.636537e+01  5.178889e+00   \nstd              1.174368e+01  1.884488e+00  2.491430e+01  1.609018e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.776000e+02  2.700000e+00  0.000000e+00  0.000000e+00   \n50%              2.854000e+02  3.600000e+00  0.000000e+00  0.000000e+00   \n75%              2.947000e+02  4.900000e+00  3.500000e+01  0.000000e+00   \nmax              3.223000e+02  1.960000e+01  9.700000e+01  2.400000e+02   \n       air_temperature_tmmn_3  potential_evapotranspiration_3  \\\ncount            3.288946e+06                    3.288946e+06   \nmean             2.730606e+02                    4.717193e+00   \nstd              9.671118e+00                    2.913488e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.673000e+02                    2.200000e+00   \n50%              2.729000e+02                    4.401799e+00   \n75%              2.795000e+02                    6.900000e+00   \nmax              3.085000e+02                    2.210000e+01   \n       mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\ncount                   3.288946e+06              3.288946e+06   \nmean                    8.767316e-01              7.366130e+01   \nstd                     7.377295e-01              2.071709e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.900000e-01              5.820000e+01   \n50%                     6.700000e-01              7.600000e+01   \n75%                     1.300000e+00              9.190000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_3  precipitation_amount_3  \\\ncount              3.288946e+06            3.288946e+06   \nmean               3.381791e+01            1.796065e+00   \nstd                1.905189e+01            5.724678e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.910000e+01            0.000000e+00   \n50%                2.970000e+01            0.000000e+00   \n75%                4.560957e+01            1.000000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_3  wind_speed_3        fsca_3         SWE_4  \\\ncount            3.288946e+06  3.288946e+06  3.288946e+06  3.288946e+06   \nmean             2.861995e+02  3.987771e+00  1.632141e+01  5.171163e+00   \nstd              1.173296e+01  1.885884e+00  2.489084e+01  1.608838e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.777000e+02  2.700000e+00  0.000000e+00  0.000000e+00   \n50%              2.854000e+02  3.600000e+00  0.000000e+00  0.000000e+00   \n75%              2.948000e+02  4.900000e+00  3.500000e+01  0.000000e+00   \nmax              3.223000e+02  1.960000e+01  9.700000e+01  2.400000e+02   \n       air_temperature_tmmn_4  potential_evapotranspiration_4  \\\ncount            3.288946e+06                    3.288946e+06   \nmean             2.730784e+02                    4.717708e+00   \nstd              9.662371e+00                    2.913633e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.673000e+02                    2.200000e+00   \n50%              2.729000e+02                    4.499600e+00   \n75%              2.795000e+02                    6.900000e+00   \nmax              3.085000e+02                    2.210000e+01   \n       mean_vapor_pressure_deficit_4  relative_humidity_rmax_4  \\\ncount                   3.288946e+06              3.288946e+06   \nmean                    8.771920e-01              7.363589e+01   \nstd                     7.376163e-01              2.072111e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.900000e-01              5.820000e+01   \n50%                     6.700000e-01              7.600000e+01   \n75%                     1.300000e+00              9.190000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_4  precipitation_amount_4  \\\ncount              3.288946e+06            3.288946e+06   \nmean               3.379764e+01            1.795838e+00   \nstd                1.903659e+01            5.724767e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.910000e+01            0.000000e+00   \n50%                2.960030e+01            0.000000e+00   \n75%                4.560000e+01            1.000000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_4  wind_speed_4        fsca_4         SWE_5  \\\ncount            3.288946e+06  3.288946e+06  3.288946e+06  3.288946e+06   \nmean             2.862284e+02  3.987496e+00  1.627598e+01  5.164319e+00   \nstd              1.172070e+01  1.884764e+00  2.486735e+01  1.608689e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.777000e+02  2.700000e+00  0.000000e+00  0.000000e+00   \n50%              2.854000e+02  3.600000e+00  0.000000e+00  0.000000e+00   \n75%              2.948000e+02  4.900000e+00  3.480000e+01  0.000000e+00   \nmax              3.223000e+02  1.960000e+01  9.700000e+01  2.400000e+02   \n       air_temperature_tmmn_5  potential_evapotranspiration_5  \\\ncount            3.288946e+06                    3.288946e+06   \nmean             2.730965e+02                    4.717917e+00   \nstd              9.654314e+00                    2.913965e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.673000e+02                    2.200000e+00   \n50%              2.730000e+02                    4.499500e+00   \n75%              2.795000e+02                    6.900000e+00   \nmax              3.085000e+02                    2.210000e+01   \n       mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\ncount                   3.288946e+06              3.288946e+06   \nmean                    8.773877e-01              7.360392e+01   \nstd                     7.374199e-01              2.072353e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.900000e-01              5.810000e+01   \n50%                     6.700000e-01              7.600000e+01   \n75%                     1.300000e+00              9.180000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_5  precipitation_amount_5  \\\ncount              3.288946e+06            3.288946e+06   \nmean               3.376894e+01            1.792375e+00   \nstd                1.902232e+01            5.720682e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.910000e+01            0.000000e+00   \n50%                2.960000e+01            0.000000e+00   \n75%                4.550000e+01            1.000000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_5  wind_speed_5        fsca_5         SWE_6  \\\ncount            3.288946e+06  3.288946e+06  3.288946e+06  3.288946e+06   \nmean             2.862553e+02  3.986243e+00  1.622967e+01  5.159823e+00   \nstd              1.170849e+01  1.882665e+00  2.484369e+01  1.608573e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.777000e+02  2.700000e+00  0.000000e+00  0.000000e+00   \n50%              2.855000e+02  3.600000e+00  0.000000e+00  0.000000e+00   \n75%              2.948000e+02  4.900000e+00  3.450000e+01  0.000000e+00   \nmax              3.223000e+02  1.960000e+01  9.700000e+01  2.400000e+02   \n       air_temperature_tmmn_6  potential_evapotranspiration_6  \\\ncount            3.288946e+06                    3.288946e+06   \nmean             2.731133e+02                    4.716793e+00   \nstd              9.648302e+00                    2.913681e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.674000e+02                    2.200000e+00   \n50%              2.730000e+02                    4.400000e+00   \n75%              2.795000e+02                    6.900000e+00   \nmax              3.085000e+02                    2.210000e+01   \n       mean_vapor_pressure_deficit_6  relative_humidity_rmax_6  \\\ncount                   3.288946e+06              3.288946e+06   \nmean                    8.773255e-01              7.356936e+01   \nstd                     7.372593e-01              2.072143e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.900000e-01              5.810000e+01   \n50%                     6.700000e-01              7.590000e+01   \n75%                     1.300000e+00              9.180000e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_6  precipitation_amount_6  \\\ncount              3.288946e+06            3.288946e+06   \nmean               3.373705e+01            1.785906e+00   \nstd                1.900428e+01            5.713897e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.910000e+01            0.000000e+00   \n50%                2.960000e+01            0.000000e+00   \n75%                4.550000e+01            9.871091e-01   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_6  wind_speed_6        fsca_6         SWE_7  \\\ncount            3.288946e+06  3.288946e+06  3.288946e+06  3.288946e+06   \nmean             2.862777e+02  3.982323e+00  1.618349e+01  5.156817e+00   \nstd              1.169819e+01  1.876762e+00  2.482105e+01  1.608499e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.777006e+02  2.700000e+00  0.000000e+00  0.000000e+00   \n50%              2.855000e+02  3.600000e+00  0.000000e+00  0.000000e+00   \n75%              2.948000e+02  4.900000e+00  3.422359e+01  0.000000e+00   \nmax              3.223000e+02  1.960000e+01  9.700000e+01  2.400000e+02   \n       air_temperature_tmmn_7  potential_evapotranspiration_7  \\\ncount            3.288946e+06                    3.288946e+06   \nmean             2.731266e+02                    4.716386e+00   \nstd              9.646655e+00                    2.914236e+00   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.674000e+02                    2.200000e+00   \n50%              2.730000e+02                    4.400000e+00   \n75%              2.795000e+02                    6.900000e+00   \nmax              3.085000e+02                    2.210000e+01   \n       mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\ncount                   3.288946e+06              3.288946e+06   \nmean                    8.772951e-01              7.353994e+01   \nstd                     7.371051e-01              2.071987e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     2.900000e-01              5.800000e+01   \n50%                     6.700000e-01              7.590000e+01   \n75%                     1.300000e+00              9.170233e+01   \nmax                     7.660000e+00              1.000000e+02   \n       relative_humidity_rmin_7  precipitation_amount_7  \\\ncount              3.288946e+06            3.288946e+06   \nmean               3.370800e+01            1.777784e+00   \nstd                1.898764e+01            5.695137e+00   \nmin                0.000000e+00            0.000000e+00   \n25%                1.910000e+01            0.000000e+00   \n50%                2.960000e+01            0.000000e+00   \n75%                4.540000e+01            9.000000e-01   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_7  wind_speed_7        fsca_7  \ncount            3.288946e+06  3.288946e+06  3.288946e+06  \nmean             2.862967e+02  3.980900e+00  1.613796e+01  \nstd              1.169094e+01  1.875127e+00  2.479872e+01  \nmin              0.000000e+00  0.000000e+00  0.000000e+00  \n25%              2.778000e+02  2.700000e+00  0.000000e+00  \n50%              2.855000e+02  3.600000e+00  0.000000e+00  \n75%              2.948000e+02  4.900000e+00  3.400000e+01  \nmax              3.223000e+02  1.960000e+01  9.700000e+01  \nhow many groups?  <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7f824e070c70>\nTraceback (most recent call last):\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3802, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 138, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 165, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5745, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5753, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Flag'\nThe above exception was the direct cause of the following exception:\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/NiVJeFVGclQW/convert_to_time_series.py\", line 236, in <module>\n    add_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path)\n  File \"/home/chetana/gw-workspace/NiVJeFVGclQW/convert_to_time_series.py\", line 220, in add_cumulative_columns\n    df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/groupby/groupby.py\", line 1567, in apply\n    result = self._python_apply_general(f, self._selected_obj)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/groupby/groupby.py\", line 1629, in _python_apply_general\n    values, mutated = self.grouper.apply(f, data, self.axis)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/groupby/ops.py\", line 839, in apply\n    res = f(group)\n  File \"/home/chetana/gw-workspace/NiVJeFVGclQW/convert_to_time_series.py\", line 220, in <lambda>\n    df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/frame.py\", line 3807, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3804, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Flag'\n",
  "history_begin_time" : 1703616017472,
  "history_end_time" : 1703617067063,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "yixS7GB70k1m",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n# Define file paths for various CSV files\n# current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_all_active_stations_v1.csv_sorted.csv'\ntarget_time_series_csv_path = f'{current_ready_csv_path}_time_series_v1.csv'\nbackup_time_series_csv_path = f'{current_ready_csv_path}_time_series_v1_bak.csv'\n# target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\ntarget_time_series_cumulative_csv_path = f'{current_ready_csv_path}_time_series_cumulative_v1.csv'\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    if column_name == \"SWE\":\n      mask = (y > 240) | y.isnull()\n    elif column_name == \"fsca\":\n      mask = (y > 100) | y.isnull()\n    else:\n      mask = y.isnull()\n\n    # Check if all elements in the mask array are True\n    all_true = np.all(mask)\n\n    if all_true:\n      df[column_name] = 0\n    else:\n      # Perform interpolation\n      new_y = np.interp(x, x[~mask], y[~mask])\n      # Replace missing values with interpolated values\n      df[column_name] = new_y\n\n    if np.any(df[column_name].isnull()):\n      raise ValueError(\"Single group: shouldn't have null values here\")\n        \n    return df\n\ndef convert_to_time_series(input_csv, output_csv):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 \"Flag\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv):\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['fsca'] > 100):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        filled_data.to_csv(filled_csv, index=False)\n        \n        print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv):\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n        result.fillna(0, inplace=True)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_cumulated = [\n      \"SWE\", \n      \"Flag\", \n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv)\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2019-10-01')\n    end_date = pd.to_datetime('2022-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df[\"cumulative_fsca\"].describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n    \n\nif __name__ == \"__main__\":\n    # Uncomment this line to execute the 'convert_to_time_series' function\n    convert_to_time_series(current_ready_csv_path, target_time_series_csv_path)\n\n    # Uncomment this line to execute the 'add_cumulative_columns' function\n    add_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path)\n",
  "history_output" : "today date = 2023-12-26\ntest start date:  2023-01-20\ntest end date:  2023-10-11\n/home/chetana\n2022275\nAll current columns:  Index(['date', 'lat', 'lon', 'AMSR_SWE', 'station_name', 'swe_value',\n       'change_in_swe_inch', 'snow_depth', 'air_temperature_observed_f',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'stationTriplet', 'elevation',\n       'Elevation', 'Slope', 'Aspect', 'Curvature', 'Northness', 'Eastness',\n       'fsca'],\n      dtype='object')\nStart to fill in the missing values\nTraceback (most recent call last):\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3802, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 138, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 165, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5745, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5753, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'SWE'\nThe above exception was the direct cause of the following exception:\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/yixS7GB70k1m/convert_to_time_series.py\", line 233, in <module>\n    convert_to_time_series(current_ready_csv_path, target_time_series_csv_path)\n  File \"/home/chetana/gw-workspace/yixS7GB70k1m/convert_to_time_series.py\", line 123, in convert_to_time_series\n    filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/groupby/groupby.py\", line 1567, in apply\n    result = self._python_apply_general(f, self._selected_obj)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/groupby/groupby.py\", line 1629, in _python_apply_general\n    values, mutated = self.grouper.apply(f, data, self.axis)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/groupby/ops.py\", line 839, in apply\n    res = f(group)\n  File \"/home/chetana/gw-workspace/yixS7GB70k1m/convert_to_time_series.py\", line 117, in process_group_filling_value\n    group = interpolate_missing_inplace(group, column_name)\n  File \"/home/chetana/gw-workspace/yixS7GB70k1m/convert_to_time_series.py\", line 41, in interpolate_missing_inplace\n    y = df[column_name]\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/frame.py\", line 3807, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3804, in get_loc\n    raise KeyError(key) from err\nKeyError: 'SWE'\n",
  "history_begin_time" : 1703615372819,
  "history_end_time" : 1703615397078,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "bzb79kyk5vu",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702875592856,
  "history_end_time" : 1702875592856,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "697yvu20q0j",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702871264387,
  "history_end_time" : 1702871264387,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "y4t9ortmg8a",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702867996406,
  "history_end_time" : 1702867996406,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "x2cqx5lol48",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702866593404,
  "history_end_time" : 1702866593404,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "rpuhhgdn9jr",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702866137648,
  "history_end_time" : 1702866137648,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "tpd7b7r67av",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702657305645,
  "history_end_time" : 1702657305645,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "fx7grmcy1zs",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702633223057,
  "history_end_time" : 1702633223057,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "fetsouu4p1d",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702633156942,
  "history_end_time" : 1702633163905,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "z8bld2b58jg",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702274520895,
  "history_end_time" : 1702274520895,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "fq723poopgd",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702257109212,
  "history_end_time" : 1702257109212,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ani3nxteg3r",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702253506554,
  "history_end_time" : 1702253506554,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "056b11zcdv7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702047800953,
  "history_end_time" : 1702047800953,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "w03q2i1bgyd",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702046671888,
  "history_end_time" : 1702047789490,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "m37mhifrokq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701838624084,
  "history_end_time" : 1701838624084,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "7EELY4vGNn5r",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n# Define file paths for various CSV files\n# current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected.csv'\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v3.csv'\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v3_bak.csv'\n# target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\ntarget_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_cumulative_v3.csv'\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    if column_name == \"SWE\":\n      mask = (y > 240) | y.isnull()\n    elif column_name == \"fsca\":\n      mask = (y > 100) | y.isnull()\n    else:\n      mask = y.isnull()\n\n    # Check if all elements in the mask array are True\n    all_true = np.all(mask)\n\n    if all_true:\n      df[column_name] = 0\n    else:\n      # Perform interpolation\n      new_y = np.interp(x, x[~mask], y[~mask])\n      # Replace missing values with interpolated values\n      df[column_name] = new_y\n\n    if np.any(df[column_name].isnull()):\n      raise ValueError(\"Single group: shouldn't have null values here\")\n        \n    return df\n\ndef convert_to_time_series(input_csv, output_csv):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 \"Flag\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv):\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['fsca'] > 100):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        filled_data.to_csv(filled_csv, index=False)\n        \n        print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv):\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n        result.fillna(0, inplace=True)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_cumulated = [\n      \"SWE\", \n      \"Flag\", \n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv)\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2019-10-01')\n    end_date = pd.to_datetime('2022-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df[\"cumulative_fsca\"].describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n    \n\n\n# Uncomment this line to execute the 'convert_to_time_series' function\nconvert_to_time_series(current_ready_csv_path, target_time_series_csv_path)\n\n# Uncomment this line to execute the 'add_cumulative_columns' function\nadd_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path)\n",
  "history_output" : "today date = 2023-12-04\ntest start date:  2022-10-05\ntest end date:  2023-10-07\n/home/chetana\n2022275\n/home/chetana/gw-workspace/7EELY4vGNn5r/convert_to_time_series.py:87: DtypeWarning: Columns (6,7) have mixed types. Specify dtype option on import or set low_memory=False.\n  df = pd.read_csv(input_csv)\nAll current columns:  Index(['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n       'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n       'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n       'fsca'],\n      dtype='object')\n/home/chetana/gridmet_test_run/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v3.csv_gap_filled.csv already exists, skipping\n/home/chetana/gridmet_test_run/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v3.csv already exists, skipping\nthe column statistics from time series before cumulative:                  lat           lon           SWE          Flag     swe_value  \\\ncount  1.152303e+06  1.152303e+06  1.152303e+06  1.152303e+06  1.152303e+06   \nmean   4.157867e+01 -1.141048e+02  8.592147e+00  2.189066e+02  2.714047e+00   \nstd    3.656259e+00  5.458877e+00  1.301175e+01  7.212259e+01  4.907269e+00   \nmin    3.335825e+01 -1.234486e+02  0.000000e+00  0.000000e+00  0.000000e+00   \n25%    3.870816e+01 -1.196577e+02  0.000000e+00  2.410000e+02  0.000000e+00   \n50%    4.093632e+01 -1.133964e+02  0.000000e+00  2.410000e+02  0.000000e+00   \n75%    4.461398e+01 -1.100008e+02  2.000000e+01  2.410000e+02  3.400000e+00   \nmax    4.897107e+01 -1.051948e+02  1.209923e+02  2.550000e+02  2.260000e+01   \n       potential_evapotranspiration  precipitation_amount  \\\ncount                  1.152303e+06          1.152303e+06   \nmean                   8.988371e-01          1.273672e+01   \nstd                    9.655767e-01          2.480617e+01   \nmin                    0.000000e+00          0.000000e+00   \n25%                    4.000000e-01          0.000000e+00   \n50%                    7.000000e-01          2.500000e+00   \n75%                    1.001686e+00          1.280000e+01   \nmax                    1.009962e+01          1.336000e+02   \n       relative_humidity_rmax  relative_humidity_rmin  air_temperature_tmmn  \\\ncount            1.152303e+06            1.152303e+06          1.152303e+06   \nmean             8.740004e+01            5.762307e+01          2.519556e+02   \nstd              2.288166e+01            2.438432e+01          5.483590e+01   \nmin              0.000000e+00            0.000000e+00          0.000000e+00   \n25%              8.500000e+01            3.990000e+01          2.575000e+02   \n50%              9.840000e+01            6.120000e+01          2.652000e+02   \n75%              1.000000e+02            7.550000e+01          2.691000e+02   \nmax              1.000000e+02            1.000000e+02          2.903996e+02   \n       air_temperature_tmmx  mean_vapor_pressure_deficit    wind_speed  \\\ncount          1.152303e+06                 1.152303e+06  1.152303e+06   \nmean           2.601854e+02                 1.205145e-01  3.804287e+00   \nstd            5.634833e+01                 1.686098e-01  1.962463e+00   \nmin            0.000000e+00                 0.000000e+00  0.000000e+00   \n25%            2.682000e+02                 3.000000e-02  2.600000e+00   \n50%            2.726000e+02                 9.000000e-02  3.400000e+00   \n75%            2.757000e+02                 1.500000e-01  4.626885e+00   \nmax            3.029967e+02                 2.379927e+00  1.419912e+01   \n          elevation         slope     curvature        aspect      eastness  \\\ncount  1.152303e+06  1.152303e+06  1.152303e+06  1.152303e+06  1.152303e+06   \nmean   1.981167e+03  8.998028e+01 -3.284082e+03  1.434884e+02  5.051248e-02   \nstd    1.089668e+03  1.547512e-02  4.304268e+03  1.138377e+02  4.768540e-01   \nmin    0.000000e+00  8.990720e+01 -1.917768e+04  0.000000e+00 -7.853438e-01   \n25%    1.373774e+03  8.997688e+01 -5.788455e+03  2.357475e+01 -2.456968e-01   \n50%    2.290836e+03  8.998582e+01 -2.768771e+03  1.382174e+02  0.000000e+00   \n75%    2.812862e+03  8.999000e+01  0.000000e+00  2.189235e+02  4.308670e-01   \nmax    3.823385e+03  8.999648e+01  9.069726e+03  3.586563e+02  7.853980e-01   \n          northness          fsca         SWE_1        Flag_1  \\\ncount  1.152303e+06  1.152303e+06  1.152303e+06  1.152303e+06   \nmean  -4.342394e-02  4.127664e+01  8.589022e+00  2.188554e+02   \nstd    5.788388e-01  2.357471e+01  1.300971e+01  7.219171e+01   \nmin   -7.853694e-01  0.000000e+00  0.000000e+00  0.000000e+00   \n25%   -6.407296e-01  2.900000e+01  0.000000e+00  2.410000e+02   \n50%    0.000000e+00  4.600000e+01  0.000000e+00  2.410000e+02   \n75%    5.982362e-01  5.900000e+01  2.000000e+01  2.410000e+02   \nmax    7.853850e-01  9.499820e+01  1.209923e+02  2.550000e+02   \n       air_temperature_tmmn_1  potential_evapotranspiration_1  \\\ncount            1.152303e+06                    1.152303e+06   \nmean             2.519006e+02                    8.985359e-01   \nstd              5.495749e+01                    9.653831e-01   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.575000e+02                    4.000000e-01   \n50%              2.652000e+02                    7.000000e-01   \n75%              2.691000e+02                    1.001433e+00   \nmax              2.903996e+02                    1.009962e+01   \n       mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\ncount                   1.152303e+06              1.152303e+06   \nmean                    1.204705e-01              8.738209e+01   \nstd                     1.685706e-01              2.291527e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     3.000000e-02              8.499472e+01   \n50%                     9.000000e-02              9.840000e+01   \n75%                     1.500000e-01              1.000000e+02   \nmax                     2.379927e+00              1.000000e+02   \n       relative_humidity_rmin_1  precipitation_amount_1  \\\ncount              1.152303e+06            1.152303e+06   \nmean               5.761338e+01            1.273552e+01   \nstd                2.439653e+01            2.480568e+01   \nmin                0.000000e+00            0.000000e+00   \n25%                3.990000e+01            0.000000e+00   \n50%                6.120000e+01            2.500000e+00   \n75%                7.550000e+01            1.280000e+01   \nmax                1.000000e+02            1.336000e+02   \n       air_temperature_tmmx_1  wind_speed_1        fsca_1         SWE_2  \\\ncount            1.152303e+06  1.152303e+06  1.152303e+06  1.152303e+06   \nmean             2.601281e+02  3.803426e+00  4.126733e+01  8.586863e+00   \nstd              5.647447e+01  1.963029e+00  2.358011e+01  1.300863e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.682000e+02  2.600000e+00  2.900000e+01  0.000000e+00   \n50%              2.726000e+02  3.400000e+00  4.600000e+01  0.000000e+00   \n75%              2.757000e+02  4.609674e+00  5.900000e+01  2.000000e+01   \nmax              3.029967e+02  1.419912e+01  9.499820e+01  1.209923e+02   \n             Flag_2  air_temperature_tmmn_2  potential_evapotranspiration_2  \\\ncount  1.152303e+06            1.152303e+06                    1.152303e+06   \nmean   2.188042e+02            2.518453e+02                    8.983025e-01   \nstd    7.226077e+01            5.507874e+01                    9.653044e-01   \nmin    0.000000e+00            0.000000e+00                    0.000000e+00   \n25%    2.410000e+02            2.575000e+02                    4.000000e-01   \n50%    2.410000e+02            2.652000e+02                    7.000000e-01   \n75%    2.410000e+02            2.691000e+02                    1.001140e+00   \nmax    2.550000e+02            2.903996e+02                    1.009962e+01   \n       mean_vapor_pressure_deficit_2  relative_humidity_rmax_2  \\\ncount                   1.152303e+06              1.152303e+06   \nmean                    1.204388e-01              8.736318e+01   \nstd                     1.685535e-01              2.294923e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     3.000000e-02              8.497343e+01   \n50%                     9.000000e-02              9.840000e+01   \n75%                     1.500000e-01              1.000000e+02   \nmax                     2.379927e+00              1.000000e+02   \n       relative_humidity_rmin_2  precipitation_amount_2  \\\ncount              1.152303e+06            1.152303e+06   \nmean               5.760176e+01            1.273276e+01   \nstd                2.440905e+01            2.480342e+01   \nmin                0.000000e+00            0.000000e+00   \n25%                3.990000e+01            0.000000e+00   \n50%                6.120000e+01            2.500000e+00   \n75%                7.550000e+01            1.280000e+01   \nmax                1.000000e+02            1.336000e+02   \n       air_temperature_tmmx_2  wind_speed_2        fsca_2         SWE_3  \\\ncount            1.152303e+06  1.152303e+06  1.152303e+06  1.152303e+06   \nmean             2.600708e+02  3.802500e+00  4.125780e+01  8.584579e+00   \nstd              5.660031e+01  1.963544e+00  2.358574e+01  1.300744e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.682000e+02  2.600000e+00  2.900000e+01  0.000000e+00   \n50%              2.726000e+02  3.400000e+00  4.600000e+01  0.000000e+00   \n75%              2.757000e+02  4.601667e+00  5.900000e+01  2.000000e+01   \nmax              3.029967e+02  1.419912e+01  9.499820e+01  1.209923e+02   \n             Flag_3  air_temperature_tmmn_3  potential_evapotranspiration_3  \\\ncount  1.152303e+06            1.152303e+06                    1.152303e+06   \nmean   2.187531e+02            2.517900e+02                    8.980626e-01   \nstd    7.232973e+01            5.519966e+01                    9.652303e-01   \nmin    0.000000e+00            0.000000e+00                    0.000000e+00   \n25%    2.410000e+02            2.575000e+02                    4.000000e-01   \n50%    2.410000e+02            2.652000e+02                    7.000000e-01   \n75%    2.410000e+02            2.691000e+02                    1.000960e+00   \nmax    2.550000e+02            2.903996e+02                    1.009962e+01   \n       mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\ncount                   1.152303e+06              1.152303e+06   \nmean                    1.204072e-01              8.734434e+01   \nstd                     1.685400e-01              2.298319e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     3.000000e-02              8.492823e+01   \n50%                     9.000000e-02              9.840000e+01   \n75%                     1.500000e-01              1.000000e+02   \nmax                     2.379927e+00              1.000000e+02   \n       relative_humidity_rmin_3  precipitation_amount_3  \\\ncount              1.152303e+06            1.152303e+06   \nmean               5.759027e+01            1.273008e+01   \nstd                2.442158e+01            2.480125e+01   \nmin                0.000000e+00            0.000000e+00   \n25%                3.990000e+01            0.000000e+00   \n50%                6.120000e+01            2.500000e+00   \n75%                7.550000e+01            1.280000e+01   \nmax                1.000000e+02            1.336000e+02   \n       air_temperature_tmmx_3  wind_speed_3        fsca_3         SWE_4  \\\ncount            1.152303e+06  1.152303e+06  1.152303e+06  1.152303e+06   \nmean             2.600135e+02  3.801570e+00  4.124850e+01  8.582179e+00   \nstd              5.672581e+01  1.964090e+00  2.359122e+01  1.300626e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.682000e+02  2.600000e+00  2.900000e+01  0.000000e+00   \n50%              2.726000e+02  3.400000e+00  4.600000e+01  0.000000e+00   \n75%              2.757000e+02  4.600523e+00  5.900000e+01  2.000000e+01   \nmax              3.029967e+02  1.419912e+01  9.499820e+01  1.209923e+02   \n             Flag_4  air_temperature_tmmn_4  potential_evapotranspiration_4  \\\ncount  1.152303e+06            1.152303e+06                    1.152303e+06   \nmean   2.187019e+02            2.517347e+02                    8.978387e-01   \nstd    7.239857e+01            5.532026e+01                    9.651861e-01   \nmin    0.000000e+00            0.000000e+00                    0.000000e+00   \n25%    2.410000e+02            2.575000e+02                    4.000000e-01   \n50%    2.410000e+02            2.652000e+02                    7.000000e-01   \n75%    2.410000e+02            2.691000e+02                    1.000822e+00   \nmax    2.550000e+02            2.903996e+02                    1.009962e+01   \n       mean_vapor_pressure_deficit_4  relative_humidity_rmax_4  \\\ncount                   1.152303e+06              1.152303e+06   \nmean                    1.203776e-01              8.732548e+01   \nstd                     1.685305e-01              2.301703e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     3.000000e-02              8.479800e+01   \n50%                     9.000000e-02              9.840000e+01   \n75%                     1.500000e-01              1.000000e+02   \nmax                     2.379927e+00              1.000000e+02   \n       relative_humidity_rmin_4  precipitation_amount_4  \\\ncount              1.152303e+06            1.152303e+06   \nmean               5.757858e+01            1.272761e+01   \nstd                2.443395e+01            2.479926e+01   \nmin                0.000000e+00            0.000000e+00   \n25%                3.990000e+01            0.000000e+00   \n50%                6.120000e+01            2.500000e+00   \n75%                7.550000e+01            1.280000e+01   \nmax                1.000000e+02            1.336000e+02   \n       air_temperature_tmmx_4  wind_speed_4        fsca_4         SWE_5  \\\ncount            1.152303e+06  1.152303e+06  1.152303e+06  1.152303e+06   \nmean             2.599562e+02  3.800674e+00  4.123930e+01  8.579957e+00   \nstd              5.685099e+01  1.964656e+00  2.359664e+01  1.300512e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.682000e+02  2.600000e+00  2.900000e+01  0.000000e+00   \n50%              2.726000e+02  3.400000e+00  4.600000e+01  0.000000e+00   \n75%              2.757000e+02  4.600213e+00  5.900000e+01  2.000000e+01   \nmax              3.029967e+02  1.419912e+01  9.499820e+01  1.209923e+02   \n             Flag_5  air_temperature_tmmn_5  potential_evapotranspiration_5  \\\ncount  1.152303e+06            1.152303e+06                    1.152303e+06   \nmean   2.186507e+02            2.516793e+02                    8.976465e-01   \nstd    7.246732e+01            5.544054e+01                    9.652081e-01   \nmin    0.000000e+00            0.000000e+00                    0.000000e+00   \n25%    2.410000e+02            2.575000e+02                    4.000000e-01   \n50%    2.410000e+02            2.652000e+02                    7.000000e-01   \n75%    2.410000e+02            2.691000e+02                    1.000774e+00   \nmax    2.550000e+02            2.903996e+02                    1.009962e+01   \n       mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\ncount                   1.152303e+06              1.152303e+06   \nmean                    1.203529e-01              8.730624e+01   \nstd                     1.685301e-01              2.305100e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     3.000000e-02              8.474094e+01   \n50%                     9.000000e-02              9.840000e+01   \n75%                     1.500000e-01              1.000000e+02   \nmax                     2.379927e+00              1.000000e+02   \n       relative_humidity_rmin_5  precipitation_amount_5  \\\ncount              1.152303e+06            1.152303e+06   \nmean               5.756622e+01            1.272452e+01   \nstd                2.444642e+01            2.479673e+01   \nmin                0.000000e+00            0.000000e+00   \n25%                3.990000e+01            0.000000e+00   \n50%                6.120000e+01            2.500000e+00   \n75%                7.550000e+01            1.280000e+01   \nmax                1.000000e+02            1.336000e+02   \n       air_temperature_tmmx_5  wind_speed_5        fsca_5         SWE_6  \\\ncount            1.152303e+06  1.152303e+06  1.152303e+06  1.152303e+06   \nmean             2.598989e+02  3.799746e+00  4.123019e+01  8.577802e+00   \nstd              5.697586e+01  1.965177e+00  2.360194e+01  1.300406e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.682000e+02  2.600000e+00  2.900000e+01  0.000000e+00   \n50%              2.726000e+02  3.400000e+00  4.600000e+01  0.000000e+00   \n75%              2.757000e+02  4.600027e+00  5.900000e+01  2.000000e+01   \nmax              3.029967e+02  1.419912e+01  9.499820e+01  1.209923e+02   \n             Flag_6  air_temperature_tmmn_6  potential_evapotranspiration_6  \\\ncount  1.152303e+06            1.152303e+06                    1.152303e+06   \nmean   2.185996e+02            2.516239e+02                    8.974458e-01   \nstd    7.253597e+01            5.556051e+01                    9.652024e-01   \nmin    0.000000e+00            0.000000e+00                    0.000000e+00   \n25%    2.410000e+02            2.575000e+02                    4.000000e-01   \n50%    2.410000e+02            2.652000e+02                    7.000000e-01   \n75%    2.410000e+02            2.691000e+02                    1.000721e+00   \nmax    2.550000e+02            2.903996e+02                    1.009962e+01   \n       mean_vapor_pressure_deficit_6  relative_humidity_rmax_6  \\\ncount                   1.152303e+06              1.152303e+06   \nmean                    1.203268e-01              8.728700e+01   \nstd                     1.685260e-01              2.308497e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     3.000000e-02              8.460000e+01   \n50%                     9.000000e-02              9.840000e+01   \n75%                     1.500000e-01              1.000000e+02   \nmax                     2.379927e+00              1.000000e+02   \n       relative_humidity_rmin_6  precipitation_amount_6  \\\ncount              1.152303e+06            1.152303e+06   \nmean               5.755391e+01            1.272156e+01   \nstd                2.445886e+01            2.479412e+01   \nmin                0.000000e+00            0.000000e+00   \n25%                3.990000e+01            0.000000e+00   \n50%                6.120000e+01            2.500000e+00   \n75%                7.550000e+01            1.280000e+01   \nmax                1.000000e+02            1.336000e+02   \n       air_temperature_tmmx_6  wind_speed_6        fsca_6         SWE_7  \\\ncount            1.152303e+06  1.152303e+06  1.152303e+06  1.152303e+06   \nmean             2.598417e+02  3.798826e+00  4.122141e+01  8.575677e+00   \nstd              5.710038e+01  1.965695e+00  2.360721e+01  1.300311e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.681992e+02  2.600000e+00  2.900000e+01  0.000000e+00   \n50%              2.726000e+02  3.400000e+00  4.600000e+01  0.000000e+00   \n75%              2.757000e+02  4.600000e+00  5.900000e+01  2.000000e+01   \nmax              3.029967e+02  1.419912e+01  9.499820e+01  1.209923e+02   \n             Flag_7  air_temperature_tmmn_7  potential_evapotranspiration_7  \\\ncount  1.152303e+06            1.152303e+06                    1.152303e+06   \nmean   2.185484e+02            2.515685e+02                    8.972404e-01   \nstd    7.260450e+01            5.568016e+01                    9.651654e-01   \nmin    0.000000e+00            0.000000e+00                    0.000000e+00   \n25%    2.410000e+02            2.575000e+02                    4.000000e-01   \n50%    2.410000e+02            2.652000e+02                    7.000000e-01   \n75%    2.410000e+02            2.691000e+02                    1.000666e+00   \nmax    2.550000e+02            2.903996e+02                    1.009962e+01   \n       mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\ncount                   1.152303e+06              1.152303e+06   \nmean                    1.202992e-01              8.726782e+01   \nstd                     1.685157e-01              2.311875e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     3.000000e-02              8.460000e+01   \n50%                     9.000000e-02              9.840000e+01   \n75%                     1.500000e-01              1.000000e+02   \nmax                     2.379927e+00              1.000000e+02   \n       relative_humidity_rmin_7  precipitation_amount_7  \\\ncount              1.152303e+06            1.152303e+06   \nmean               5.754157e+01            1.271906e+01   \nstd                2.447119e+01            2.479232e+01   \nmin                0.000000e+00            0.000000e+00   \n25%                3.990000e+01            0.000000e+00   \n50%                6.120000e+01            2.500000e+00   \n75%                7.550000e+01            1.280000e+01   \nmax                1.000000e+02            1.336000e+02   \n       air_temperature_tmmx_7  wind_speed_7        fsca_7  \ncount            1.152303e+06  1.152303e+06  1.152303e+06  \nmean             2.597843e+02  3.797935e+00  4.121238e+01  \nstd              5.722457e+01  1.966244e+00  2.361265e+01  \nmin              0.000000e+00  0.000000e+00  0.000000e+00  \n25%              2.681981e+02  2.600000e+00  2.900000e+01  \n50%              2.726000e+02  3.400000e+00  4.600000e+01  \n75%              2.757000e+02  4.600000e+00  5.900000e+01  \nmax              3.029967e+02  1.419912e+01  9.499820e+01  \nThis is our unique years [2018 2019 2020 2021 2022]\nhow many rows are left in the three water years?                  lat            lon            SWE           Flag  \\\ncount  797888.000000  797888.000000  797888.000000  797888.000000   \nmean       41.615630    -114.130327       8.670955     216.947159   \nstd         3.643291       5.447167      13.015449      74.727441   \nmin        33.358254    -123.448583       0.000000       0.000000   \n25%        38.911155    -119.666675       0.000000     241.000000   \n50%        40.939712    -113.585082       0.000000     241.000000   \n75%        44.613976    -110.000804      20.000000     241.000000   \nmax        48.971066    -105.194817     120.992297     255.000000   \n           swe_value  potential_evapotranspiration  precipitation_amount  \\\ncount  797888.000000                 797888.000000         797888.000000   \nmean        2.378197                      0.905121             12.489575   \nstd         3.859433                      0.960089             24.464776   \nmin         0.000000                      0.000000              0.000000   \n25%         0.000000                      0.400000              0.000000   \n50%         0.000000                      0.700000              2.403388   \n75%         3.700000                      1.100000             12.300000   \nmax        14.300000                     10.099621            133.600000   \n       relative_humidity_rmax  relative_humidity_rmin  air_temperature_tmmn  \\\ncount           797888.000000           797888.000000         797888.000000   \nmean                87.868569               57.679897            253.395985   \nstd                 21.871793               24.103710             51.277688   \nmin                  0.000000                0.000000              0.000000   \n25%                 85.093823               39.814208            257.300000   \n50%                 98.400000               61.100000            265.200000   \n75%                100.000000               75.500000            269.100000   \nmax                100.000000              100.000000            290.399576   \n       air_temperature_tmmx  mean_vapor_pressure_deficit     wind_speed  \\\ncount         797888.000000                797888.000000  797888.000000   \nmean             261.739924                     0.121678       3.800249   \nstd               52.658450                     0.167859       1.930971   \nmin                0.000000                     0.000000       0.000000   \n25%              268.199052                     0.030000       2.600000   \n50%              272.600000                     0.090000       3.400000   \n75%              275.700000                     0.150000       4.600000   \nmax              302.996746                     2.379927      14.199116   \n           elevation          slope      curvature         aspect  \\\ncount  797888.000000  797888.000000  797888.000000  797888.000000   \nmean     2146.377731      89.980194   -3557.943893     155.453971   \nstd       965.291267       0.015543    4370.045317     110.361143   \nmin         0.000000      89.907196  -19177.676000       0.000000   \n25%      1712.839425      89.976875   -6130.748700      47.035070   \n50%      2410.964800      89.985710   -3167.041750     156.107400   \n75%      2851.773100      89.989990       0.000000     239.545010   \nmax      3823.384800      89.996475    9069.726000     358.656280   \n            eastness      northness           fsca          SWE_1  \\\ncount  797888.000000  797888.000000  797888.000000  797888.000000   \nmean        0.054725      -0.047045      40.893058       8.671360   \nstd         0.496106       0.602349      23.788484      13.015505   \nmin        -0.785344      -0.785369       0.000000       0.000000   \n25%        -0.348325      -0.684530      28.000000       0.000000   \n50%         0.000000       0.000000      46.000000       0.000000   \n75%         0.560143       0.628359      59.000000      20.000000   \nmax         0.785398       0.785385      94.998200     120.992297   \n              Flag_1  air_temperature_tmmn_1  potential_evapotranspiration_1  \\\ncount  797888.000000           797888.000000                   797888.000000   \nmean      216.947122              253.395526                        0.905107   \nstd        74.727427               51.277598                        0.960058   \nmin         0.000000                0.000000                        0.000000   \n25%       241.000000              257.300000                        0.400000   \n50%       241.000000              265.200000                        0.700000   \n75%       241.000000              269.100000                        1.100000   \nmax       255.000000              290.399576                       10.099621   \n       mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\ncount                  797888.000000             797888.000000   \nmean                        0.121677                 87.868642   \nstd                         0.167855                 21.871936   \nmin                         0.000000                  0.000000   \n25%                         0.030000                 85.093861   \n50%                         0.090000                 98.400000   \n75%                         0.150000                100.000000   \nmax                         2.379927                100.000000   \n       relative_humidity_rmin_1  precipitation_amount_1  \\\ncount             797888.000000           797888.000000   \nmean                  57.679163               12.489332   \nstd                   24.103757               24.464968   \nmin                    0.000000                0.000000   \n25%                   39.813788                0.000000   \n50%                   61.100000                2.402867   \n75%                   75.500000               12.300000   \nmax                  100.000000              133.600000   \n       air_temperature_tmmx_1   wind_speed_1         fsca_1          SWE_2  \\\ncount           797888.000000  797888.000000  797888.000000  797888.000000   \nmean               261.739639       3.800231      40.893242       8.671828   \nstd                 52.658399       1.931001      23.788597      13.015760   \nmin                  0.000000       0.000000       0.000000       0.000000   \n25%                268.198977       2.600000      28.000000       0.000000   \n50%                272.600000       3.400000      46.000000       0.000000   \n75%                275.700000       4.600000      59.000000      20.000000   \nmax                302.996746      14.199116      94.998200     120.992297   \n              Flag_2  air_temperature_tmmn_2  potential_evapotranspiration_2  \\\ncount  797888.000000           797888.000000                   797888.000000   \nmean      216.947175              253.394978                        0.905082   \nstd        74.727449               51.277516                        0.960021   \nmin         0.000000                0.000000                        0.000000   \n25%       241.000000              257.300000                        0.400000   \n50%       241.000000              265.200000                        0.700000   \n75%       241.000000              269.100000                        1.100000   \nmax       255.000000              290.399576                       10.099621   \n       mean_vapor_pressure_deficit_2  relative_humidity_rmax_2  \\\ncount                  797888.000000             797888.000000   \nmean                        0.121674                 87.868966   \nstd                         0.167852                 21.871860   \nmin                         0.000000                  0.000000   \n25%                         0.030000                 85.094051   \n50%                         0.090000                 98.400000   \n75%                         0.150000                100.000000   \nmax                         2.379927                100.000000   \n       relative_humidity_rmin_2  precipitation_amount_2  \\\ncount             797888.000000           797888.000000   \nmean                  57.678598               12.489307   \nstd                   24.103914               24.465291   \nmin                    0.000000                0.000000   \n25%                   39.813593                0.000000   \n50%                   61.100000                2.402442   \n75%                   75.500000               12.300000   \nmax                  100.000000              133.600000   \n       air_temperature_tmmx_2   wind_speed_2         fsca_2          SWE_3  \\\ncount           797888.000000  797888.000000  797888.000000  797888.000000   \nmean               261.739289       3.800204      40.892922       8.672401   \nstd                 52.658337       1.931025      23.788764      13.016023   \nmin                  0.000000       0.000000       0.000000       0.000000   \n25%                268.198877       2.600000      28.000000       0.000000   \n50%                272.600000       3.400000      46.000000       0.000000   \n75%                275.700000       4.600000      59.000000      20.000000   \nmax                302.996746      14.199116      94.998200     120.992297   \n              Flag_3  air_temperature_tmmn_3  potential_evapotranspiration_3  \\\ncount  797888.000000           797888.000000                   797888.000000   \nmean      216.947201              253.394342                        0.905074   \nstd        74.727460               51.277405                        0.960001   \nmin         0.000000                0.000000                        0.000000   \n25%       241.000000              257.300000                        0.400000   \n50%       241.000000              265.200000                        0.700000   \n75%       241.000000              269.100000                        1.100000   \nmax       255.000000              290.399576                       10.099621   \n       mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\ncount                  797888.000000             797888.000000   \nmean                        0.121675                 87.868802   \nstd                         0.167851                 21.871969   \nmin                         0.000000                  0.000000   \n25%                         0.030000                 85.093884   \n50%                         0.090000                 98.400000   \n75%                         0.150000                100.000000   \nmax                         2.379927                100.000000   \n       relative_humidity_rmin_3  precipitation_amount_3  \\\ncount             797888.000000           797888.000000   \nmean                  57.677273               12.488560   \nstd                   24.104056               24.464872   \nmin                    0.000000                0.000000   \n25%                   39.812932                0.000000   \n50%                   61.100000                2.401934   \n75%                   75.500000               12.300000   \nmax                  100.000000              133.600000   \n       air_temperature_tmmx_3   wind_speed_3         fsca_3          SWE_4  \\\ncount           797888.000000  797888.000000  797888.000000  797888.000000   \nmean               261.738946       3.800123      40.892784       8.672153   \nstd                 52.658276       1.930981      23.788894      13.015783   \nmin                  0.000000       0.000000       0.000000       0.000000   \n25%                268.198781       2.600000      28.000000       0.000000   \n50%                272.600000       3.400000      46.000000       0.000000   \n75%                275.700000       4.600000      59.000000      20.000000   \nmax                302.996746      14.199116      94.998200     120.992297   \n              Flag_4  air_temperature_tmmn_4  potential_evapotranspiration_4  \\\ncount  797888.000000           797888.000000                   797888.000000   \nmean      216.947263              253.394129                        0.904999   \nstd        74.727486               51.277359                        0.959861   \nmin         0.000000                0.000000                        0.000000   \n25%       241.000000              257.300000                        0.400000   \n50%       241.000000              265.200000                        0.700000   \n75%       241.000000              269.100000                        1.100000   \nmax       255.000000              290.399576                       10.099621   \n       mean_vapor_pressure_deficit_4  relative_humidity_rmax_4  \\\ncount                  797888.000000             797888.000000   \nmean                        0.121662                 87.869788   \nstd                         0.167825                 21.871602   \nmin                         0.000000                  0.000000   \n25%                         0.030000                 85.094964   \n50%                         0.090000                 98.400000   \n75%                         0.150000                100.000000   \nmax                         2.379927                100.000000   \n       relative_humidity_rmin_4  precipitation_amount_4  \\\ncount             797888.000000           797888.000000   \nmean                  57.678320               12.489451   \nstd                   24.103919               24.466094   \nmin                    0.000000                0.000000   \n25%                   39.813492                0.000000   \n50%                   61.100000                2.402404   \n75%                   75.500000               12.300000   \nmax                  100.000000              133.600000   \n       air_temperature_tmmx_4   wind_speed_4         fsca_4          SWE_5  \\\ncount           797888.000000  797888.000000  797888.000000  797888.000000   \nmean               261.738680       3.800159      40.893150       8.672238   \nstd                 52.658194       1.930999      23.789061      13.015942   \nmin                  0.000000       0.000000       0.000000       0.000000   \n25%                268.198747       2.600000      28.000000       0.000000   \n50%                272.600000       3.400000      46.000000       0.000000   \n75%                275.700000       4.600000      59.000000      20.000000   \nmax                302.996746      14.199116      94.998200     120.992297   \n              Flag_5  air_temperature_tmmn_5  potential_evapotranspiration_5  \\\ncount  797888.000000           797888.000000                   797888.000000   \nmean      216.947202              253.394046                        0.904977   \nstd        74.727461               51.277332                        0.959853   \nmin         0.000000                0.000000                        0.000000   \n25%       241.000000              257.300000                        0.400000   \n50%       241.000000              265.200000                        0.700000   \n75%       241.000000              269.100000                        1.100000   \nmax       255.000000              290.399576                       10.099621   \n       mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\ncount                  797888.000000             797888.000000   \nmean                        0.121655                 87.870418   \nstd                         0.167816                 21.871336   \nmin                         0.000000                  0.000000   \n25%                         0.030000                 85.097479   \n50%                         0.090000                 98.400000   \n75%                         0.150000                100.000000   \nmax                         2.379927                100.000000   \n       relative_humidity_rmin_5  precipitation_amount_5  \\\ncount             797888.000000           797888.000000   \nmean                  57.678878               12.489545   \nstd                   24.103771               24.466169   \nmin                    0.000000                0.000000   \n25%                   39.813593                0.000000   \n50%                   61.100000                2.402470   \n75%                   75.500000               12.300000   \nmax                  100.000000              133.600000   \n       air_temperature_tmmx_5   wind_speed_5         fsca_5          SWE_6  \\\ncount           797888.000000  797888.000000  797888.000000  797888.000000   \nmean               261.738555       3.800193      40.892630       8.672120   \nstd                 52.658153       1.931026      23.789461      13.015815   \nmin                  0.000000       0.000000       0.000000       0.000000   \n25%                268.198761       2.600000      28.000000       0.000000   \n50%                272.600000       3.400000      46.000000       0.000000   \n75%                275.700000       4.600000      59.000000      20.000000   \nmax                302.996746      14.199116      94.998200     120.992297   \n              Flag_6  air_temperature_tmmn_6  potential_evapotranspiration_6  \\\ncount  797888.000000           797888.000000                   797888.000000   \nmean      216.947184              253.393972                        0.904955   \nstd        74.727454               51.277311                        0.959796   \nmin         0.000000                0.000000                        0.000000   \n25%       241.000000              257.300000                        0.400000   \n50%       241.000000              265.200000                        0.700000   \n75%       241.000000              269.100000                        1.100000   \nmax       255.000000              290.399576                       10.099621   \n       mean_vapor_pressure_deficit_6  relative_humidity_rmax_6  \\\ncount                  797888.000000             797888.000000   \nmean                        0.121651                 87.870572   \nstd                         0.167807                 21.871450   \nmin                         0.000000                  0.000000   \n25%                         0.030000                 85.097500   \n50%                         0.090000                 98.400000   \n75%                         0.150000                100.000000   \nmax                         2.379927                100.000000   \n       relative_humidity_rmin_6  precipitation_amount_6  \\\ncount             797888.000000           797888.000000   \nmean                  57.678898               12.489131   \nstd                   24.104074               24.465689   \nmin                    0.000000                0.000000   \n25%                   39.813477                0.000000   \n50%                   61.100000                2.402461   \n75%                   75.500000               12.300000   \nmax                  100.000000              133.600000   \n       air_temperature_tmmx_6   wind_speed_6         fsca_6          SWE_7  \\\ncount           797888.000000  797888.000000  797888.000000  797888.000000   \nmean               261.738521       3.800226      40.892931       8.671898   \nstd                 52.658123       1.931073      23.789607      13.015467   \nmin                  0.000000       0.000000       0.000000       0.000000   \n25%                268.198766       2.600000      28.000000       0.000000   \n50%                272.600000       3.400000      46.000000       0.000000   \n75%                275.700000       4.600000      59.000000      20.000000   \nmax                302.996746      14.199116      94.998200     120.992297   \n              Flag_7  air_temperature_tmmn_7  potential_evapotranspiration_7  \\\ncount  797888.000000           797888.000000                   797888.000000   \nmean      216.947035              253.394017                        0.904935   \nstd        74.727392               51.277292                        0.959746   \nmin         0.000000                0.000000                        0.000000   \n25%       241.000000              257.300000                        0.400000   \n50%       241.000000              265.200000                        0.700000   \n75%       241.000000              269.100000                        1.100000   \nmax       255.000000              290.399576                       10.099621   \n       mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\ncount                  797888.000000             797888.000000   \nmean                        0.121647                 87.870999   \nstd                         0.167799                 21.871122   \nmin                         0.000000                  0.000000   \n25%                         0.030000                 85.098543   \n50%                         0.090000                 98.400000   \n75%                         0.150000                100.000000   \nmax                         2.379927                100.000000   \n       relative_humidity_rmin_7  precipitation_amount_7  \\\ncount             797888.000000           797888.000000   \nmean                  57.679422               12.489408   \nstd                   24.103840               24.465905   \nmin                    0.000000                0.000000   \n25%                   39.813695                0.000000   \n50%                   61.100000                2.402848   \n75%                   75.500000               12.300000   \nmax                  100.000000              133.600000   \n       air_temperature_tmmx_7   wind_speed_7         fsca_7  \ncount           797888.000000  797888.000000  797888.000000  \nmean               261.738514       3.800272      40.893001  \nstd                 52.658102       1.931106      23.789682  \nmin                  0.000000       0.000000       0.000000  \n25%                268.198818       2.600000      28.000000  \n50%                272.600000       3.400000      46.000000  \n75%                275.700000       4.600000      59.000000  \nmax                302.996746      14.199116      94.998200  \nhow many groups?  <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7fc084706970>\nThis is the dataframe after cumulative columns are added\ncount    797888.000000\nmean      36522.807646\nstd       43943.351853\nmin           0.000000\n25%        4992.000000\n50%       20541.000000\n75%       53800.000000\nmax      344820.000000\nName: cumulative_fsca, dtype: float64\nAll the cumulative variables are added successfully! /home/chetana/gridmet_test_run/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_cumulative_v3.csv\ndouble check the swe_value statistics: count    797888.000000\nmean          2.378197\nstd           3.859433\nmin           0.000000\n25%           0.000000\n50%           0.000000\n75%           3.700000\nmax          14.300000\nName: swe_value, dtype: float64\n",
  "history_begin_time" : 1701658713646,
  "history_end_time" : 1701658871909,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "2L9nqsnKbfLv",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n# Define file paths for various CSV files\n# current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected.csv'\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v3.csv'\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v3_bak.csv'\n# target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\ntarget_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_cumulative_v3.csv'\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    if column_name == \"SWE\":\n      mask = (y > 240) | y.isnull()\n    elif column_name == \"fsca\":\n      mask = (y > 100) | y.isnull()\n    else:\n      mask = y.isnull()\n\n    # Check if all elements in the mask array are True\n    all_true = np.all(mask)\n\n    if all_true:\n      df[column_name] = 0\n    else:\n      # Perform interpolation\n      new_y = np.interp(x, x[~mask], y[~mask])\n      # Replace missing values with interpolated values\n      df[column_name] = new_y\n\n    if np.any(df[column_name].isnull()):\n      raise ValueError(\"Single group: shouldn't have null values here\")\n        \n    return df\n\ndef convert_to_time_series(input_csv, output_csv):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 \"Flag\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv):\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['fsca'] > 100):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        filled_data.to_csv(filled_csv, index=False)\n        \n        print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv):\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n        result.fillna(0, inplace=True)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_cumulated = [\n      \"SWE\", \n      \"Flag\", \n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv)\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2019-10-01')\n    end_date = pd.to_datetime('2022-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df.describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n    \n\n\n# Uncomment this line to execute the 'convert_to_time_series' function\nconvert_to_time_series(current_ready_csv_path, target_time_series_csv_path)\n\n# Uncomment this line to execute the 'add_cumulative_columns' function\nadd_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path)\n",
  "history_output" : "today date = 2023-12-04\ntest start date:  2022-10-05\ntest end date:  2023-10-07\n/home/chetana\n2022275\n/home/chetana/gw-workspace/2L9nqsnKbfLv/convert_to_time_series.py:87: DtypeWarning: Columns (6,7) have mixed types. Specify dtype option on import or set low_memory=False.\n  df = pd.read_csv(input_csv)\nAll current columns:  Index(['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n       'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n       'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n       'fsca'],\n      dtype='object')\n/home/chetana/gridmet_test_run/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v3.csv_gap_filled.csv already exists, skipping\n/home/chetana/gridmet_test_run/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v3.csv already exists, skipping\nthe column statistics from time series before cumulative:                  lat           lon           SWE          Flag     swe_value  \\\ncount  1.152303e+06  1.152303e+06  1.152303e+06  1.152303e+06  1.152303e+06   \nmean   4.157867e+01 -1.141048e+02  8.592147e+00  2.189066e+02  2.714047e+00   \nstd    3.656259e+00  5.458877e+00  1.301175e+01  7.212259e+01  4.907269e+00   \nmin    3.335825e+01 -1.234486e+02  0.000000e+00  0.000000e+00  0.000000e+00   \n25%    3.870816e+01 -1.196577e+02  0.000000e+00  2.410000e+02  0.000000e+00   \n50%    4.093632e+01 -1.133964e+02  0.000000e+00  2.410000e+02  0.000000e+00   \n75%    4.461398e+01 -1.100008e+02  2.000000e+01  2.410000e+02  3.400000e+00   \nmax    4.897107e+01 -1.051948e+02  1.209923e+02  2.550000e+02  2.260000e+01   \n       potential_evapotranspiration  precipitation_amount  \\\ncount                  1.152303e+06          1.152303e+06   \nmean                   8.988371e-01          1.273672e+01   \nstd                    9.655767e-01          2.480617e+01   \nmin                    0.000000e+00          0.000000e+00   \n25%                    4.000000e-01          0.000000e+00   \n50%                    7.000000e-01          2.500000e+00   \n75%                    1.001686e+00          1.280000e+01   \nmax                    1.009962e+01          1.336000e+02   \n       relative_humidity_rmax  relative_humidity_rmin  air_temperature_tmmn  \\\ncount            1.152303e+06            1.152303e+06          1.152303e+06   \nmean             8.740004e+01            5.762307e+01          2.519556e+02   \nstd              2.288166e+01            2.438432e+01          5.483590e+01   \nmin              0.000000e+00            0.000000e+00          0.000000e+00   \n25%              8.500000e+01            3.990000e+01          2.575000e+02   \n50%              9.840000e+01            6.120000e+01          2.652000e+02   \n75%              1.000000e+02            7.550000e+01          2.691000e+02   \nmax              1.000000e+02            1.000000e+02          2.903996e+02   \n       air_temperature_tmmx  mean_vapor_pressure_deficit    wind_speed  \\\ncount          1.152303e+06                 1.152303e+06  1.152303e+06   \nmean           2.601854e+02                 1.205145e-01  3.804287e+00   \nstd            5.634833e+01                 1.686098e-01  1.962463e+00   \nmin            0.000000e+00                 0.000000e+00  0.000000e+00   \n25%            2.682000e+02                 3.000000e-02  2.600000e+00   \n50%            2.726000e+02                 9.000000e-02  3.400000e+00   \n75%            2.757000e+02                 1.500000e-01  4.626885e+00   \nmax            3.029967e+02                 2.379927e+00  1.419912e+01   \n          elevation         slope     curvature        aspect      eastness  \\\ncount  1.152303e+06  1.152303e+06  1.152303e+06  1.152303e+06  1.152303e+06   \nmean   1.981167e+03  8.998028e+01 -3.284082e+03  1.434884e+02  5.051248e-02   \nstd    1.089668e+03  1.547512e-02  4.304268e+03  1.138377e+02  4.768540e-01   \nmin    0.000000e+00  8.990720e+01 -1.917768e+04  0.000000e+00 -7.853438e-01   \n25%    1.373774e+03  8.997688e+01 -5.788455e+03  2.357475e+01 -2.456968e-01   \n50%    2.290836e+03  8.998582e+01 -2.768771e+03  1.382174e+02  0.000000e+00   \n75%    2.812862e+03  8.999000e+01  0.000000e+00  2.189235e+02  4.308670e-01   \nmax    3.823385e+03  8.999648e+01  9.069726e+03  3.586563e+02  7.853980e-01   \n          northness          fsca         SWE_1        Flag_1  \\\ncount  1.152303e+06  1.152303e+06  1.152303e+06  1.152303e+06   \nmean  -4.342394e-02  4.127664e+01  8.589022e+00  2.188554e+02   \nstd    5.788388e-01  2.357471e+01  1.300971e+01  7.219171e+01   \nmin   -7.853694e-01  0.000000e+00  0.000000e+00  0.000000e+00   \n25%   -6.407296e-01  2.900000e+01  0.000000e+00  2.410000e+02   \n50%    0.000000e+00  4.600000e+01  0.000000e+00  2.410000e+02   \n75%    5.982362e-01  5.900000e+01  2.000000e+01  2.410000e+02   \nmax    7.853850e-01  9.499820e+01  1.209923e+02  2.550000e+02   \n       air_temperature_tmmn_1  potential_evapotranspiration_1  \\\ncount            1.152303e+06                    1.152303e+06   \nmean             2.519006e+02                    8.985359e-01   \nstd              5.495749e+01                    9.653831e-01   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.575000e+02                    4.000000e-01   \n50%              2.652000e+02                    7.000000e-01   \n75%              2.691000e+02                    1.001433e+00   \nmax              2.903996e+02                    1.009962e+01   \n       mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\ncount                   1.152303e+06              1.152303e+06   \nmean                    1.204705e-01              8.738209e+01   \nstd                     1.685706e-01              2.291527e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     3.000000e-02              8.499472e+01   \n50%                     9.000000e-02              9.840000e+01   \n75%                     1.500000e-01              1.000000e+02   \nmax                     2.379927e+00              1.000000e+02   \n       relative_humidity_rmin_1  precipitation_amount_1  \\\ncount              1.152303e+06            1.152303e+06   \nmean               5.761338e+01            1.273552e+01   \nstd                2.439653e+01            2.480568e+01   \nmin                0.000000e+00            0.000000e+00   \n25%                3.990000e+01            0.000000e+00   \n50%                6.120000e+01            2.500000e+00   \n75%                7.550000e+01            1.280000e+01   \nmax                1.000000e+02            1.336000e+02   \n       air_temperature_tmmx_1  wind_speed_1        fsca_1         SWE_2  \\\ncount            1.152303e+06  1.152303e+06  1.152303e+06  1.152303e+06   \nmean             2.601281e+02  3.803426e+00  4.126733e+01  8.586863e+00   \nstd              5.647447e+01  1.963029e+00  2.358011e+01  1.300863e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.682000e+02  2.600000e+00  2.900000e+01  0.000000e+00   \n50%              2.726000e+02  3.400000e+00  4.600000e+01  0.000000e+00   \n75%              2.757000e+02  4.609674e+00  5.900000e+01  2.000000e+01   \nmax              3.029967e+02  1.419912e+01  9.499820e+01  1.209923e+02   \n             Flag_2  air_temperature_tmmn_2  potential_evapotranspiration_2  \\\ncount  1.152303e+06            1.152303e+06                    1.152303e+06   \nmean   2.188042e+02            2.518453e+02                    8.983025e-01   \nstd    7.226077e+01            5.507874e+01                    9.653044e-01   \nmin    0.000000e+00            0.000000e+00                    0.000000e+00   \n25%    2.410000e+02            2.575000e+02                    4.000000e-01   \n50%    2.410000e+02            2.652000e+02                    7.000000e-01   \n75%    2.410000e+02            2.691000e+02                    1.001140e+00   \nmax    2.550000e+02            2.903996e+02                    1.009962e+01   \n       mean_vapor_pressure_deficit_2  relative_humidity_rmax_2  \\\ncount                   1.152303e+06              1.152303e+06   \nmean                    1.204388e-01              8.736318e+01   \nstd                     1.685535e-01              2.294923e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     3.000000e-02              8.497343e+01   \n50%                     9.000000e-02              9.840000e+01   \n75%                     1.500000e-01              1.000000e+02   \nmax                     2.379927e+00              1.000000e+02   \n       relative_humidity_rmin_2  precipitation_amount_2  \\\ncount              1.152303e+06            1.152303e+06   \nmean               5.760176e+01            1.273276e+01   \nstd                2.440905e+01            2.480342e+01   \nmin                0.000000e+00            0.000000e+00   \n25%                3.990000e+01            0.000000e+00   \n50%                6.120000e+01            2.500000e+00   \n75%                7.550000e+01            1.280000e+01   \nmax                1.000000e+02            1.336000e+02   \n       air_temperature_tmmx_2  wind_speed_2        fsca_2         SWE_3  \\\ncount            1.152303e+06  1.152303e+06  1.152303e+06  1.152303e+06   \nmean             2.600708e+02  3.802500e+00  4.125780e+01  8.584579e+00   \nstd              5.660031e+01  1.963544e+00  2.358574e+01  1.300744e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.682000e+02  2.600000e+00  2.900000e+01  0.000000e+00   \n50%              2.726000e+02  3.400000e+00  4.600000e+01  0.000000e+00   \n75%              2.757000e+02  4.601667e+00  5.900000e+01  2.000000e+01   \nmax              3.029967e+02  1.419912e+01  9.499820e+01  1.209923e+02   \n             Flag_3  air_temperature_tmmn_3  potential_evapotranspiration_3  \\\ncount  1.152303e+06            1.152303e+06                    1.152303e+06   \nmean   2.187531e+02            2.517900e+02                    8.980626e-01   \nstd    7.232973e+01            5.519966e+01                    9.652303e-01   \nmin    0.000000e+00            0.000000e+00                    0.000000e+00   \n25%    2.410000e+02            2.575000e+02                    4.000000e-01   \n50%    2.410000e+02            2.652000e+02                    7.000000e-01   \n75%    2.410000e+02            2.691000e+02                    1.000960e+00   \nmax    2.550000e+02            2.903996e+02                    1.009962e+01   \n       mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\ncount                   1.152303e+06              1.152303e+06   \nmean                    1.204072e-01              8.734434e+01   \nstd                     1.685400e-01              2.298319e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     3.000000e-02              8.492823e+01   \n50%                     9.000000e-02              9.840000e+01   \n75%                     1.500000e-01              1.000000e+02   \nmax                     2.379927e+00              1.000000e+02   \n       relative_humidity_rmin_3  precipitation_amount_3  \\\ncount              1.152303e+06            1.152303e+06   \nmean               5.759027e+01            1.273008e+01   \nstd                2.442158e+01            2.480125e+01   \nmin                0.000000e+00            0.000000e+00   \n25%                3.990000e+01            0.000000e+00   \n50%                6.120000e+01            2.500000e+00   \n75%                7.550000e+01            1.280000e+01   \nmax                1.000000e+02            1.336000e+02   \n       air_temperature_tmmx_3  wind_speed_3        fsca_3         SWE_4  \\\ncount            1.152303e+06  1.152303e+06  1.152303e+06  1.152303e+06   \nmean             2.600135e+02  3.801570e+00  4.124850e+01  8.582179e+00   \nstd              5.672581e+01  1.964090e+00  2.359122e+01  1.300626e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.682000e+02  2.600000e+00  2.900000e+01  0.000000e+00   \n50%              2.726000e+02  3.400000e+00  4.600000e+01  0.000000e+00   \n75%              2.757000e+02  4.600523e+00  5.900000e+01  2.000000e+01   \nmax              3.029967e+02  1.419912e+01  9.499820e+01  1.209923e+02   \n             Flag_4  air_temperature_tmmn_4  potential_evapotranspiration_4  \\\ncount  1.152303e+06            1.152303e+06                    1.152303e+06   \nmean   2.187019e+02            2.517347e+02                    8.978387e-01   \nstd    7.239857e+01            5.532026e+01                    9.651861e-01   \nmin    0.000000e+00            0.000000e+00                    0.000000e+00   \n25%    2.410000e+02            2.575000e+02                    4.000000e-01   \n50%    2.410000e+02            2.652000e+02                    7.000000e-01   \n75%    2.410000e+02            2.691000e+02                    1.000822e+00   \nmax    2.550000e+02            2.903996e+02                    1.009962e+01   \n       mean_vapor_pressure_deficit_4  relative_humidity_rmax_4  \\\ncount                   1.152303e+06              1.152303e+06   \nmean                    1.203776e-01              8.732548e+01   \nstd                     1.685305e-01              2.301703e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     3.000000e-02              8.479800e+01   \n50%                     9.000000e-02              9.840000e+01   \n75%                     1.500000e-01              1.000000e+02   \nmax                     2.379927e+00              1.000000e+02   \n       relative_humidity_rmin_4  precipitation_amount_4  \\\ncount              1.152303e+06            1.152303e+06   \nmean               5.757858e+01            1.272761e+01   \nstd                2.443395e+01            2.479926e+01   \nmin                0.000000e+00            0.000000e+00   \n25%                3.990000e+01            0.000000e+00   \n50%                6.120000e+01            2.500000e+00   \n75%                7.550000e+01            1.280000e+01   \nmax                1.000000e+02            1.336000e+02   \n       air_temperature_tmmx_4  wind_speed_4        fsca_4         SWE_5  \\\ncount            1.152303e+06  1.152303e+06  1.152303e+06  1.152303e+06   \nmean             2.599562e+02  3.800674e+00  4.123930e+01  8.579957e+00   \nstd              5.685099e+01  1.964656e+00  2.359664e+01  1.300512e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.682000e+02  2.600000e+00  2.900000e+01  0.000000e+00   \n50%              2.726000e+02  3.400000e+00  4.600000e+01  0.000000e+00   \n75%              2.757000e+02  4.600213e+00  5.900000e+01  2.000000e+01   \nmax              3.029967e+02  1.419912e+01  9.499820e+01  1.209923e+02   \n             Flag_5  air_temperature_tmmn_5  potential_evapotranspiration_5  \\\ncount  1.152303e+06            1.152303e+06                    1.152303e+06   \nmean   2.186507e+02            2.516793e+02                    8.976465e-01   \nstd    7.246732e+01            5.544054e+01                    9.652081e-01   \nmin    0.000000e+00            0.000000e+00                    0.000000e+00   \n25%    2.410000e+02            2.575000e+02                    4.000000e-01   \n50%    2.410000e+02            2.652000e+02                    7.000000e-01   \n75%    2.410000e+02            2.691000e+02                    1.000774e+00   \nmax    2.550000e+02            2.903996e+02                    1.009962e+01   \n       mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\ncount                   1.152303e+06              1.152303e+06   \nmean                    1.203529e-01              8.730624e+01   \nstd                     1.685301e-01              2.305100e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     3.000000e-02              8.474094e+01   \n50%                     9.000000e-02              9.840000e+01   \n75%                     1.500000e-01              1.000000e+02   \nmax                     2.379927e+00              1.000000e+02   \n       relative_humidity_rmin_5  precipitation_amount_5  \\\ncount              1.152303e+06            1.152303e+06   \nmean               5.756622e+01            1.272452e+01   \nstd                2.444642e+01            2.479673e+01   \nmin                0.000000e+00            0.000000e+00   \n25%                3.990000e+01            0.000000e+00   \n50%                6.120000e+01            2.500000e+00   \n75%                7.550000e+01            1.280000e+01   \nmax                1.000000e+02            1.336000e+02   \n       air_temperature_tmmx_5  wind_speed_5        fsca_5         SWE_6  \\\ncount            1.152303e+06  1.152303e+06  1.152303e+06  1.152303e+06   \nmean             2.598989e+02  3.799746e+00  4.123019e+01  8.577802e+00   \nstd              5.697586e+01  1.965177e+00  2.360194e+01  1.300406e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.682000e+02  2.600000e+00  2.900000e+01  0.000000e+00   \n50%              2.726000e+02  3.400000e+00  4.600000e+01  0.000000e+00   \n75%              2.757000e+02  4.600027e+00  5.900000e+01  2.000000e+01   \nmax              3.029967e+02  1.419912e+01  9.499820e+01  1.209923e+02   \n             Flag_6  air_temperature_tmmn_6  potential_evapotranspiration_6  \\\ncount  1.152303e+06            1.152303e+06                    1.152303e+06   \nmean   2.185996e+02            2.516239e+02                    8.974458e-01   \nstd    7.253597e+01            5.556051e+01                    9.652024e-01   \nmin    0.000000e+00            0.000000e+00                    0.000000e+00   \n25%    2.410000e+02            2.575000e+02                    4.000000e-01   \n50%    2.410000e+02            2.652000e+02                    7.000000e-01   \n75%    2.410000e+02            2.691000e+02                    1.000721e+00   \nmax    2.550000e+02            2.903996e+02                    1.009962e+01   \n       mean_vapor_pressure_deficit_6  relative_humidity_rmax_6  \\\ncount                   1.152303e+06              1.152303e+06   \nmean                    1.203268e-01              8.728700e+01   \nstd                     1.685260e-01              2.308497e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     3.000000e-02              8.460000e+01   \n50%                     9.000000e-02              9.840000e+01   \n75%                     1.500000e-01              1.000000e+02   \nmax                     2.379927e+00              1.000000e+02   \n       relative_humidity_rmin_6  precipitation_amount_6  \\\ncount              1.152303e+06            1.152303e+06   \nmean               5.755391e+01            1.272156e+01   \nstd                2.445886e+01            2.479412e+01   \nmin                0.000000e+00            0.000000e+00   \n25%                3.990000e+01            0.000000e+00   \n50%                6.120000e+01            2.500000e+00   \n75%                7.550000e+01            1.280000e+01   \nmax                1.000000e+02            1.336000e+02   \n       air_temperature_tmmx_6  wind_speed_6        fsca_6         SWE_7  \\\ncount            1.152303e+06  1.152303e+06  1.152303e+06  1.152303e+06   \nmean             2.598417e+02  3.798826e+00  4.122141e+01  8.575677e+00   \nstd              5.710038e+01  1.965695e+00  2.360721e+01  1.300311e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.681992e+02  2.600000e+00  2.900000e+01  0.000000e+00   \n50%              2.726000e+02  3.400000e+00  4.600000e+01  0.000000e+00   \n75%              2.757000e+02  4.600000e+00  5.900000e+01  2.000000e+01   \nmax              3.029967e+02  1.419912e+01  9.499820e+01  1.209923e+02   \n             Flag_7  air_temperature_tmmn_7  potential_evapotranspiration_7  \\\ncount  1.152303e+06            1.152303e+06                    1.152303e+06   \nmean   2.185484e+02            2.515685e+02                    8.972404e-01   \nstd    7.260450e+01            5.568016e+01                    9.651654e-01   \nmin    0.000000e+00            0.000000e+00                    0.000000e+00   \n25%    2.410000e+02            2.575000e+02                    4.000000e-01   \n50%    2.410000e+02            2.652000e+02                    7.000000e-01   \n75%    2.410000e+02            2.691000e+02                    1.000666e+00   \nmax    2.550000e+02            2.903996e+02                    1.009962e+01   \n       mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\ncount                   1.152303e+06              1.152303e+06   \nmean                    1.202992e-01              8.726782e+01   \nstd                     1.685157e-01              2.311875e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     3.000000e-02              8.460000e+01   \n50%                     9.000000e-02              9.840000e+01   \n75%                     1.500000e-01              1.000000e+02   \nmax                     2.379927e+00              1.000000e+02   \n       relative_humidity_rmin_7  precipitation_amount_7  \\\ncount              1.152303e+06            1.152303e+06   \nmean               5.754157e+01            1.271906e+01   \nstd                2.447119e+01            2.479232e+01   \nmin                0.000000e+00            0.000000e+00   \n25%                3.990000e+01            0.000000e+00   \n50%                6.120000e+01            2.500000e+00   \n75%                7.550000e+01            1.280000e+01   \nmax                1.000000e+02            1.336000e+02   \n       air_temperature_tmmx_7  wind_speed_7        fsca_7  \ncount            1.152303e+06  1.152303e+06  1.152303e+06  \nmean             2.597843e+02  3.797935e+00  4.121238e+01  \nstd              5.722457e+01  1.966244e+00  2.361265e+01  \nmin              0.000000e+00  0.000000e+00  0.000000e+00  \n25%              2.681981e+02  2.600000e+00  2.900000e+01  \n50%              2.726000e+02  3.400000e+00  4.600000e+01  \n75%              2.757000e+02  4.600000e+00  5.900000e+01  \nmax              3.029967e+02  1.419912e+01  9.499820e+01  \nThis is our unique years [2018 2019 2020 2021 2022]\nhow many rows are left in the three water years?                  lat            lon            SWE           Flag  \\\ncount  797888.000000  797888.000000  797888.000000  797888.000000   \nmean       41.615630    -114.130327       8.670955     216.947159   \nstd         3.643291       5.447167      13.015449      74.727441   \nmin        33.358254    -123.448583       0.000000       0.000000   \n25%        38.911155    -119.666675       0.000000     241.000000   \n50%        40.939712    -113.585082       0.000000     241.000000   \n75%        44.613976    -110.000804      20.000000     241.000000   \nmax        48.971066    -105.194817     120.992297     255.000000   \n           swe_value  potential_evapotranspiration  precipitation_amount  \\\ncount  797888.000000                 797888.000000         797888.000000   \nmean        2.378197                      0.905121             12.489575   \nstd         3.859433                      0.960089             24.464776   \nmin         0.000000                      0.000000              0.000000   \n25%         0.000000                      0.400000              0.000000   \n50%         0.000000                      0.700000              2.403388   \n75%         3.700000                      1.100000             12.300000   \nmax        14.300000                     10.099621            133.600000   \n       relative_humidity_rmax  relative_humidity_rmin  air_temperature_tmmn  \\\ncount           797888.000000           797888.000000         797888.000000   \nmean                87.868569               57.679897            253.395985   \nstd                 21.871793               24.103710             51.277688   \nmin                  0.000000                0.000000              0.000000   \n25%                 85.093823               39.814208            257.300000   \n50%                 98.400000               61.100000            265.200000   \n75%                100.000000               75.500000            269.100000   \nmax                100.000000              100.000000            290.399576   \n       air_temperature_tmmx  mean_vapor_pressure_deficit     wind_speed  \\\ncount         797888.000000                797888.000000  797888.000000   \nmean             261.739924                     0.121678       3.800249   \nstd               52.658450                     0.167859       1.930971   \nmin                0.000000                     0.000000       0.000000   \n25%              268.199052                     0.030000       2.600000   \n50%              272.600000                     0.090000       3.400000   \n75%              275.700000                     0.150000       4.600000   \nmax              302.996746                     2.379927      14.199116   \n           elevation          slope      curvature         aspect  \\\ncount  797888.000000  797888.000000  797888.000000  797888.000000   \nmean     2146.377731      89.980194   -3557.943893     155.453971   \nstd       965.291267       0.015543    4370.045317     110.361143   \nmin         0.000000      89.907196  -19177.676000       0.000000   \n25%      1712.839425      89.976875   -6130.748700      47.035070   \n50%      2410.964800      89.985710   -3167.041750     156.107400   \n75%      2851.773100      89.989990       0.000000     239.545010   \nmax      3823.384800      89.996475    9069.726000     358.656280   \n            eastness      northness           fsca          SWE_1  \\\ncount  797888.000000  797888.000000  797888.000000  797888.000000   \nmean        0.054725      -0.047045      40.893058       8.671360   \nstd         0.496106       0.602349      23.788484      13.015505   \nmin        -0.785344      -0.785369       0.000000       0.000000   \n25%        -0.348325      -0.684530      28.000000       0.000000   \n50%         0.000000       0.000000      46.000000       0.000000   \n75%         0.560143       0.628359      59.000000      20.000000   \nmax         0.785398       0.785385      94.998200     120.992297   \n              Flag_1  air_temperature_tmmn_1  potential_evapotranspiration_1  \\\ncount  797888.000000           797888.000000                   797888.000000   \nmean      216.947122              253.395526                        0.905107   \nstd        74.727427               51.277598                        0.960058   \nmin         0.000000                0.000000                        0.000000   \n25%       241.000000              257.300000                        0.400000   \n50%       241.000000              265.200000                        0.700000   \n75%       241.000000              269.100000                        1.100000   \nmax       255.000000              290.399576                       10.099621   \n       mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\ncount                  797888.000000             797888.000000   \nmean                        0.121677                 87.868642   \nstd                         0.167855                 21.871936   \nmin                         0.000000                  0.000000   \n25%                         0.030000                 85.093861   \n50%                         0.090000                 98.400000   \n75%                         0.150000                100.000000   \nmax                         2.379927                100.000000   \n       relative_humidity_rmin_1  precipitation_amount_1  \\\ncount             797888.000000           797888.000000   \nmean                  57.679163               12.489332   \nstd                   24.103757               24.464968   \nmin                    0.000000                0.000000   \n25%                   39.813788                0.000000   \n50%                   61.100000                2.402867   \n75%                   75.500000               12.300000   \nmax                  100.000000              133.600000   \n       air_temperature_tmmx_1   wind_speed_1         fsca_1          SWE_2  \\\ncount           797888.000000  797888.000000  797888.000000  797888.000000   \nmean               261.739639       3.800231      40.893242       8.671828   \nstd                 52.658399       1.931001      23.788597      13.015760   \nmin                  0.000000       0.000000       0.000000       0.000000   \n25%                268.198977       2.600000      28.000000       0.000000   \n50%                272.600000       3.400000      46.000000       0.000000   \n75%                275.700000       4.600000      59.000000      20.000000   \nmax                302.996746      14.199116      94.998200     120.992297   \n              Flag_2  air_temperature_tmmn_2  potential_evapotranspiration_2  \\\ncount  797888.000000           797888.000000                   797888.000000   \nmean      216.947175              253.394978                        0.905082   \nstd        74.727449               51.277516                        0.960021   \nmin         0.000000                0.000000                        0.000000   \n25%       241.000000              257.300000                        0.400000   \n50%       241.000000              265.200000                        0.700000   \n75%       241.000000              269.100000                        1.100000   \nmax       255.000000              290.399576                       10.099621   \n       mean_vapor_pressure_deficit_2  relative_humidity_rmax_2  \\\ncount                  797888.000000             797888.000000   \nmean                        0.121674                 87.868966   \nstd                         0.167852                 21.871860   \nmin                         0.000000                  0.000000   \n25%                         0.030000                 85.094051   \n50%                         0.090000                 98.400000   \n75%                         0.150000                100.000000   \nmax                         2.379927                100.000000   \n       relative_humidity_rmin_2  precipitation_amount_2  \\\ncount             797888.000000           797888.000000   \nmean                  57.678598               12.489307   \nstd                   24.103914               24.465291   \nmin                    0.000000                0.000000   \n25%                   39.813593                0.000000   \n50%                   61.100000                2.402442   \n75%                   75.500000               12.300000   \nmax                  100.000000              133.600000   \n       air_temperature_tmmx_2   wind_speed_2         fsca_2          SWE_3  \\\ncount           797888.000000  797888.000000  797888.000000  797888.000000   \nmean               261.739289       3.800204      40.892922       8.672401   \nstd                 52.658337       1.931025      23.788764      13.016023   \nmin                  0.000000       0.000000       0.000000       0.000000   \n25%                268.198877       2.600000      28.000000       0.000000   \n50%                272.600000       3.400000      46.000000       0.000000   \n75%                275.700000       4.600000      59.000000      20.000000   \nmax                302.996746      14.199116      94.998200     120.992297   \n              Flag_3  air_temperature_tmmn_3  potential_evapotranspiration_3  \\\ncount  797888.000000           797888.000000                   797888.000000   \nmean      216.947201              253.394342                        0.905074   \nstd        74.727460               51.277405                        0.960001   \nmin         0.000000                0.000000                        0.000000   \n25%       241.000000              257.300000                        0.400000   \n50%       241.000000              265.200000                        0.700000   \n75%       241.000000              269.100000                        1.100000   \nmax       255.000000              290.399576                       10.099621   \n       mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\ncount                  797888.000000             797888.000000   \nmean                        0.121675                 87.868802   \nstd                         0.167851                 21.871969   \nmin                         0.000000                  0.000000   \n25%                         0.030000                 85.093884   \n50%                         0.090000                 98.400000   \n75%                         0.150000                100.000000   \nmax                         2.379927                100.000000   \n       relative_humidity_rmin_3  precipitation_amount_3  \\\ncount             797888.000000           797888.000000   \nmean                  57.677273               12.488560   \nstd                   24.104056               24.464872   \nmin                    0.000000                0.000000   \n25%                   39.812932                0.000000   \n50%                   61.100000                2.401934   \n75%                   75.500000               12.300000   \nmax                  100.000000              133.600000   \n       air_temperature_tmmx_3   wind_speed_3         fsca_3          SWE_4  \\\ncount           797888.000000  797888.000000  797888.000000  797888.000000   \nmean               261.738946       3.800123      40.892784       8.672153   \nstd                 52.658276       1.930981      23.788894      13.015783   \nmin                  0.000000       0.000000       0.000000       0.000000   \n25%                268.198781       2.600000      28.000000       0.000000   \n50%                272.600000       3.400000      46.000000       0.000000   \n75%                275.700000       4.600000      59.000000      20.000000   \nmax                302.996746      14.199116      94.998200     120.992297   \n              Flag_4  air_temperature_tmmn_4  potential_evapotranspiration_4  \\\ncount  797888.000000           797888.000000                   797888.000000   \nmean      216.947263              253.394129                        0.904999   \nstd        74.727486               51.277359                        0.959861   \nmin         0.000000                0.000000                        0.000000   \n25%       241.000000              257.300000                        0.400000   \n50%       241.000000              265.200000                        0.700000   \n75%       241.000000              269.100000                        1.100000   \nmax       255.000000              290.399576                       10.099621   \n       mean_vapor_pressure_deficit_4  relative_humidity_rmax_4  \\\ncount                  797888.000000             797888.000000   \nmean                        0.121662                 87.869788   \nstd                         0.167825                 21.871602   \nmin                         0.000000                  0.000000   \n25%                         0.030000                 85.094964   \n50%                         0.090000                 98.400000   \n75%                         0.150000                100.000000   \nmax                         2.379927                100.000000   \n       relative_humidity_rmin_4  precipitation_amount_4  \\\ncount             797888.000000           797888.000000   \nmean                  57.678320               12.489451   \nstd                   24.103919               24.466094   \nmin                    0.000000                0.000000   \n25%                   39.813492                0.000000   \n50%                   61.100000                2.402404   \n75%                   75.500000               12.300000   \nmax                  100.000000              133.600000   \n       air_temperature_tmmx_4   wind_speed_4         fsca_4          SWE_5  \\\ncount           797888.000000  797888.000000  797888.000000  797888.000000   \nmean               261.738680       3.800159      40.893150       8.672238   \nstd                 52.658194       1.930999      23.789061      13.015942   \nmin                  0.000000       0.000000       0.000000       0.000000   \n25%                268.198747       2.600000      28.000000       0.000000   \n50%                272.600000       3.400000      46.000000       0.000000   \n75%                275.700000       4.600000      59.000000      20.000000   \nmax                302.996746      14.199116      94.998200     120.992297   \n              Flag_5  air_temperature_tmmn_5  potential_evapotranspiration_5  \\\ncount  797888.000000           797888.000000                   797888.000000   \nmean      216.947202              253.394046                        0.904977   \nstd        74.727461               51.277332                        0.959853   \nmin         0.000000                0.000000                        0.000000   \n25%       241.000000              257.300000                        0.400000   \n50%       241.000000              265.200000                        0.700000   \n75%       241.000000              269.100000                        1.100000   \nmax       255.000000              290.399576                       10.099621   \n       mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\ncount                  797888.000000             797888.000000   \nmean                        0.121655                 87.870418   \nstd                         0.167816                 21.871336   \nmin                         0.000000                  0.000000   \n25%                         0.030000                 85.097479   \n50%                         0.090000                 98.400000   \n75%                         0.150000                100.000000   \nmax                         2.379927                100.000000   \n       relative_humidity_rmin_5  precipitation_amount_5  \\\ncount             797888.000000           797888.000000   \nmean                  57.678878               12.489545   \nstd                   24.103771               24.466169   \nmin                    0.000000                0.000000   \n25%                   39.813593                0.000000   \n50%                   61.100000                2.402470   \n75%                   75.500000               12.300000   \nmax                  100.000000              133.600000   \n       air_temperature_tmmx_5   wind_speed_5         fsca_5          SWE_6  \\\ncount           797888.000000  797888.000000  797888.000000  797888.000000   \nmean               261.738555       3.800193      40.892630       8.672120   \nstd                 52.658153       1.931026      23.789461      13.015815   \nmin                  0.000000       0.000000       0.000000       0.000000   \n25%                268.198761       2.600000      28.000000       0.000000   \n50%                272.600000       3.400000      46.000000       0.000000   \n75%                275.700000       4.600000      59.000000      20.000000   \nmax                302.996746      14.199116      94.998200     120.992297   \n              Flag_6  air_temperature_tmmn_6  potential_evapotranspiration_6  \\\ncount  797888.000000           797888.000000                   797888.000000   \nmean      216.947184              253.393972                        0.904955   \nstd        74.727454               51.277311                        0.959796   \nmin         0.000000                0.000000                        0.000000   \n25%       241.000000              257.300000                        0.400000   \n50%       241.000000              265.200000                        0.700000   \n75%       241.000000              269.100000                        1.100000   \nmax       255.000000              290.399576                       10.099621   \n       mean_vapor_pressure_deficit_6  relative_humidity_rmax_6  \\\ncount                  797888.000000             797888.000000   \nmean                        0.121651                 87.870572   \nstd                         0.167807                 21.871450   \nmin                         0.000000                  0.000000   \n25%                         0.030000                 85.097500   \n50%                         0.090000                 98.400000   \n75%                         0.150000                100.000000   \nmax                         2.379927                100.000000   \n       relative_humidity_rmin_6  precipitation_amount_6  \\\ncount             797888.000000           797888.000000   \nmean                  57.678898               12.489131   \nstd                   24.104074               24.465689   \nmin                    0.000000                0.000000   \n25%                   39.813477                0.000000   \n50%                   61.100000                2.402461   \n75%                   75.500000               12.300000   \nmax                  100.000000              133.600000   \n       air_temperature_tmmx_6   wind_speed_6         fsca_6          SWE_7  \\\ncount           797888.000000  797888.000000  797888.000000  797888.000000   \nmean               261.738521       3.800226      40.892931       8.671898   \nstd                 52.658123       1.931073      23.789607      13.015467   \nmin                  0.000000       0.000000       0.000000       0.000000   \n25%                268.198766       2.600000      28.000000       0.000000   \n50%                272.600000       3.400000      46.000000       0.000000   \n75%                275.700000       4.600000      59.000000      20.000000   \nmax                302.996746      14.199116      94.998200     120.992297   \n              Flag_7  air_temperature_tmmn_7  potential_evapotranspiration_7  \\\ncount  797888.000000           797888.000000                   797888.000000   \nmean      216.947035              253.394017                        0.904935   \nstd        74.727392               51.277292                        0.959746   \nmin         0.000000                0.000000                        0.000000   \n25%       241.000000              257.300000                        0.400000   \n50%       241.000000              265.200000                        0.700000   \n75%       241.000000              269.100000                        1.100000   \nmax       255.000000              290.399576                       10.099621   \n       mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\ncount                  797888.000000             797888.000000   \nmean                        0.121647                 87.870999   \nstd                         0.167799                 21.871122   \nmin                         0.000000                  0.000000   \n25%                         0.030000                 85.098543   \n50%                         0.090000                 98.400000   \n75%                         0.150000                100.000000   \nmax                         2.379927                100.000000   \n       relative_humidity_rmin_7  precipitation_amount_7  \\\ncount             797888.000000           797888.000000   \nmean                  57.679422               12.489408   \nstd                   24.103840               24.465905   \nmin                    0.000000                0.000000   \n25%                   39.813695                0.000000   \n50%                   61.100000                2.402848   \n75%                   75.500000               12.300000   \nmax                  100.000000              133.600000   \n       air_temperature_tmmx_7   wind_speed_7         fsca_7  \ncount           797888.000000  797888.000000  797888.000000  \nmean               261.738514       3.800272      40.893001  \nstd                 52.658102       1.931106      23.789682  \nmin                  0.000000       0.000000       0.000000  \n25%                268.198818       2.600000      28.000000  \n50%                272.600000       3.400000      46.000000  \n75%                275.700000       4.600000      59.000000  \nmax                302.996746      14.199116      94.998200  \nhow many groups?  <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7ff77d255970>\nThis is the dataframe after cumulative columns are added\n                 lat            lon            SWE           Flag  \\\ncount  797888.000000  797888.000000  797888.000000  797888.000000   \nmean       41.615630    -114.130327       8.670955     216.947159   \nstd         3.643291       5.447167      13.015449      74.727441   \nmin        33.358254    -123.448583       0.000000       0.000000   \n25%        38.911155    -119.666675       0.000000     241.000000   \n50%        40.939712    -113.585082       0.000000     241.000000   \n75%        44.613976    -110.000804      20.000000     241.000000   \nmax        48.971066    -105.194817     120.992297     255.000000   \n           swe_value  potential_evapotranspiration  precipitation_amount  \\\ncount  797888.000000                 797888.000000         797888.000000   \nmean        2.378197                      0.905121             12.489575   \nstd         3.859433                      0.960089             24.464776   \nmin         0.000000                      0.000000              0.000000   \n25%         0.000000                      0.400000              0.000000   \n50%         0.000000                      0.700000              2.403388   \n75%         3.700000                      1.100000             12.300000   \nmax        14.300000                     10.099621            133.600000   \n       relative_humidity_rmax  relative_humidity_rmin  air_temperature_tmmn  \\\ncount           797888.000000           797888.000000         797888.000000   \nmean                87.868569               57.679897            253.395985   \nstd                 21.871793               24.103710             51.277688   \nmin                  0.000000                0.000000              0.000000   \n25%                 85.093823               39.814208            257.300000   \n50%                 98.400000               61.100000            265.200000   \n75%                100.000000               75.500000            269.100000   \nmax                100.000000              100.000000            290.399576   \n       air_temperature_tmmx  mean_vapor_pressure_deficit     wind_speed  \\\ncount         797888.000000                797888.000000  797888.000000   \nmean             261.739924                     0.121678       3.800249   \nstd               52.658450                     0.167859       1.930971   \nmin                0.000000                     0.000000       0.000000   \n25%              268.199052                     0.030000       2.600000   \n50%              272.600000                     0.090000       3.400000   \n75%              275.700000                     0.150000       4.600000   \nmax              302.996746                     2.379927      14.199116   \n           elevation          slope      curvature         aspect  \\\ncount  797888.000000  797888.000000  797888.000000  797888.000000   \nmean     2146.377731      89.980194   -3557.943893     155.453971   \nstd       965.291267       0.015543    4370.045317     110.361143   \nmin         0.000000      89.907196  -19177.676000       0.000000   \n25%      1712.839425      89.976875   -6130.748700      47.035070   \n50%      2410.964800      89.985710   -3167.041750     156.107400   \n75%      2851.773100      89.989990       0.000000     239.545010   \nmax      3823.384800      89.996475    9069.726000     358.656280   \n            eastness      northness           fsca          SWE_1  \\\ncount  797888.000000  797888.000000  797888.000000  797888.000000   \nmean        0.054725      -0.047045      40.893058       8.671360   \nstd         0.496106       0.602349      23.788484      13.015505   \nmin        -0.785344      -0.785369       0.000000       0.000000   \n25%        -0.348325      -0.684530      28.000000       0.000000   \n50%         0.000000       0.000000      46.000000       0.000000   \n75%         0.560143       0.628359      59.000000      20.000000   \nmax         0.785398       0.785385      94.998200     120.992297   \n              Flag_1  air_temperature_tmmn_1  potential_evapotranspiration_1  \\\ncount  797888.000000           797888.000000                   797888.000000   \nmean      216.947122              253.395526                        0.905107   \nstd        74.727427               51.277598                        0.960058   \nmin         0.000000                0.000000                        0.000000   \n25%       241.000000              257.300000                        0.400000   \n50%       241.000000              265.200000                        0.700000   \n75%       241.000000              269.100000                        1.100000   \nmax       255.000000              290.399576                       10.099621   \n       mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\ncount                  797888.000000             797888.000000   \nmean                        0.121677                 87.868642   \nstd                         0.167855                 21.871936   \nmin                         0.000000                  0.000000   \n25%                         0.030000                 85.093861   \n50%                         0.090000                 98.400000   \n75%                         0.150000                100.000000   \nmax                         2.379927                100.000000   \n       relative_humidity_rmin_1  precipitation_amount_1  \\\ncount             797888.000000           797888.000000   \nmean                  57.679163               12.489332   \nstd                   24.103757               24.464968   \nmin                    0.000000                0.000000   \n25%                   39.813788                0.000000   \n50%                   61.100000                2.402867   \n75%                   75.500000               12.300000   \nmax                  100.000000              133.600000   \n       air_temperature_tmmx_1   wind_speed_1         fsca_1          SWE_2  \\\ncount           797888.000000  797888.000000  797888.000000  797888.000000   \nmean               261.739639       3.800231      40.893242       8.671828   \nstd                 52.658399       1.931001      23.788597      13.015760   \nmin                  0.000000       0.000000       0.000000       0.000000   \n25%                268.198977       2.600000      28.000000       0.000000   \n50%                272.600000       3.400000      46.000000       0.000000   \n75%                275.700000       4.600000      59.000000      20.000000   \nmax                302.996746      14.199116      94.998200     120.992297   \n              Flag_2  air_temperature_tmmn_2  potential_evapotranspiration_2  \\\ncount  797888.000000           797888.000000                   797888.000000   \nmean      216.947175              253.394978                        0.905082   \nstd        74.727449               51.277516                        0.960021   \nmin         0.000000                0.000000                        0.000000   \n25%       241.000000              257.300000                        0.400000   \n50%       241.000000              265.200000                        0.700000   \n75%       241.000000              269.100000                        1.100000   \nmax       255.000000              290.399576                       10.099621   \n       mean_vapor_pressure_deficit_2  relative_humidity_rmax_2  \\\ncount                  797888.000000             797888.000000   \nmean                        0.121674                 87.868966   \nstd                         0.167852                 21.871860   \nmin                         0.000000                  0.000000   \n25%                         0.030000                 85.094051   \n50%                         0.090000                 98.400000   \n75%                         0.150000                100.000000   \nmax                         2.379927                100.000000   \n       relative_humidity_rmin_2  precipitation_amount_2  \\\ncount             797888.000000           797888.000000   \nmean                  57.678598               12.489307   \nstd                   24.103914               24.465291   \nmin                    0.000000                0.000000   \n25%                   39.813593                0.000000   \n50%                   61.100000                2.402442   \n75%                   75.500000               12.300000   \nmax                  100.000000              133.600000   \n       air_temperature_tmmx_2   wind_speed_2         fsca_2          SWE_3  \\\ncount           797888.000000  797888.000000  797888.000000  797888.000000   \nmean               261.739289       3.800204      40.892922       8.672401   \nstd                 52.658337       1.931025      23.788764      13.016023   \nmin                  0.000000       0.000000       0.000000       0.000000   \n25%                268.198877       2.600000      28.000000       0.000000   \n50%                272.600000       3.400000      46.000000       0.000000   \n75%                275.700000       4.600000      59.000000      20.000000   \nmax                302.996746      14.199116      94.998200     120.992297   \n              Flag_3  air_temperature_tmmn_3  potential_evapotranspiration_3  \\\ncount  797888.000000           797888.000000                   797888.000000   \nmean      216.947201              253.394342                        0.905074   \nstd        74.727460               51.277405                        0.960001   \nmin         0.000000                0.000000                        0.000000   \n25%       241.000000              257.300000                        0.400000   \n50%       241.000000              265.200000                        0.700000   \n75%       241.000000              269.100000                        1.100000   \nmax       255.000000              290.399576                       10.099621   \n       mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\ncount                  797888.000000             797888.000000   \nmean                        0.121675                 87.868802   \nstd                         0.167851                 21.871969   \nmin                         0.000000                  0.000000   \n25%                         0.030000                 85.093884   \n50%                         0.090000                 98.400000   \n75%                         0.150000                100.000000   \nmax                         2.379927                100.000000   \n       relative_humidity_rmin_3  precipitation_amount_3  \\\ncount             797888.000000           797888.000000   \nmean                  57.677273               12.488560   \nstd                   24.104056               24.464872   \nmin                    0.000000                0.000000   \n25%                   39.812932                0.000000   \n50%                   61.100000                2.401934   \n75%                   75.500000               12.300000   \nmax                  100.000000              133.600000   \n       air_temperature_tmmx_3   wind_speed_3         fsca_3          SWE_4  \\\ncount           797888.000000  797888.000000  797888.000000  797888.000000   \nmean               261.738946       3.800123      40.892784       8.672153   \nstd                 52.658276       1.930981      23.788894      13.015783   \nmin                  0.000000       0.000000       0.000000       0.000000   \n25%                268.198781       2.600000      28.000000       0.000000   \n50%                272.600000       3.400000      46.000000       0.000000   \n75%                275.700000       4.600000      59.000000      20.000000   \nmax                302.996746      14.199116      94.998200     120.992297   \n              Flag_4  air_temperature_tmmn_4  potential_evapotranspiration_4  \\\ncount  797888.000000           797888.000000                   797888.000000   \nmean      216.947263              253.394129                        0.904999   \nstd        74.727486               51.277359                        0.959861   \nmin         0.000000                0.000000                        0.000000   \n25%       241.000000              257.300000                        0.400000   \n50%       241.000000              265.200000                        0.700000   \n75%       241.000000              269.100000                        1.100000   \nmax       255.000000              290.399576                       10.099621   \n       mean_vapor_pressure_deficit_4  relative_humidity_rmax_4  \\\ncount                  797888.000000             797888.000000   \nmean                        0.121662                 87.869788   \nstd                         0.167825                 21.871602   \nmin                         0.000000                  0.000000   \n25%                         0.030000                 85.094964   \n50%                         0.090000                 98.400000   \n75%                         0.150000                100.000000   \nmax                         2.379927                100.000000   \n       relative_humidity_rmin_4  precipitation_amount_4  \\\ncount             797888.000000           797888.000000   \nmean                  57.678320               12.489451   \nstd                   24.103919               24.466094   \nmin                    0.000000                0.000000   \n25%                   39.813492                0.000000   \n50%                   61.100000                2.402404   \n75%                   75.500000               12.300000   \nmax                  100.000000              133.600000   \n       air_temperature_tmmx_4   wind_speed_4         fsca_4          SWE_5  \\\ncount           797888.000000  797888.000000  797888.000000  797888.000000   \nmean               261.738680       3.800159      40.893150       8.672238   \nstd                 52.658194       1.930999      23.789061      13.015942   \nmin                  0.000000       0.000000       0.000000       0.000000   \n25%                268.198747       2.600000      28.000000       0.000000   \n50%                272.600000       3.400000      46.000000       0.000000   \n75%                275.700000       4.600000      59.000000      20.000000   \nmax                302.996746      14.199116      94.998200     120.992297   \n              Flag_5  air_temperature_tmmn_5  potential_evapotranspiration_5  \\\ncount  797888.000000           797888.000000                   797888.000000   \nmean      216.947202              253.394046                        0.904977   \nstd        74.727461               51.277332                        0.959853   \nmin         0.000000                0.000000                        0.000000   \n25%       241.000000              257.300000                        0.400000   \n50%       241.000000              265.200000                        0.700000   \n75%       241.000000              269.100000                        1.100000   \nmax       255.000000              290.399576                       10.099621   \n       mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\ncount                  797888.000000             797888.000000   \nmean                        0.121655                 87.870418   \nstd                         0.167816                 21.871336   \nmin                         0.000000                  0.000000   \n25%                         0.030000                 85.097479   \n50%                         0.090000                 98.400000   \n75%                         0.150000                100.000000   \nmax                         2.379927                100.000000   \n       relative_humidity_rmin_5  precipitation_amount_5  \\\ncount             797888.000000           797888.000000   \nmean                  57.678878               12.489545   \nstd                   24.103771               24.466169   \nmin                    0.000000                0.000000   \n25%                   39.813593                0.000000   \n50%                   61.100000                2.402470   \n75%                   75.500000               12.300000   \nmax                  100.000000              133.600000   \n       air_temperature_tmmx_5   wind_speed_5         fsca_5          SWE_6  \\\ncount           797888.000000  797888.000000  797888.000000  797888.000000   \nmean               261.738555       3.800193      40.892630       8.672120   \nstd                 52.658153       1.931026      23.789461      13.015815   \nmin                  0.000000       0.000000       0.000000       0.000000   \n25%                268.198761       2.600000      28.000000       0.000000   \n50%                272.600000       3.400000      46.000000       0.000000   \n75%                275.700000       4.600000      59.000000      20.000000   \nmax                302.996746      14.199116      94.998200     120.992297   \n              Flag_6  air_temperature_tmmn_6  potential_evapotranspiration_6  \\\ncount  797888.000000           797888.000000                   797888.000000   \nmean      216.947184              253.393972                        0.904955   \nstd        74.727454               51.277311                        0.959796   \nmin         0.000000                0.000000                        0.000000   \n25%       241.000000              257.300000                        0.400000   \n50%       241.000000              265.200000                        0.700000   \n75%       241.000000              269.100000                        1.100000   \nmax       255.000000              290.399576                       10.099621   \n       mean_vapor_pressure_deficit_6  relative_humidity_rmax_6  \\\ncount                  797888.000000             797888.000000   \nmean                        0.121651                 87.870572   \nstd                         0.167807                 21.871450   \nmin                         0.000000                  0.000000   \n25%                         0.030000                 85.097500   \n50%                         0.090000                 98.400000   \n75%                         0.150000                100.000000   \nmax                         2.379927                100.000000   \n       relative_humidity_rmin_6  precipitation_amount_6  \\\ncount             797888.000000           797888.000000   \nmean                  57.678898               12.489131   \nstd                   24.104074               24.465689   \nmin                    0.000000                0.000000   \n25%                   39.813477                0.000000   \n50%                   61.100000                2.402461   \n75%                   75.500000               12.300000   \nmax                  100.000000              133.600000   \n       air_temperature_tmmx_6   wind_speed_6         fsca_6          SWE_7  \\\ncount           797888.000000  797888.000000  797888.000000  797888.000000   \nmean               261.738521       3.800226      40.892931       8.671898   \nstd                 52.658123       1.931073      23.789607      13.015467   \nmin                  0.000000       0.000000       0.000000       0.000000   \n25%                268.198766       2.600000      28.000000       0.000000   \n50%                272.600000       3.400000      46.000000       0.000000   \n75%                275.700000       4.600000      59.000000      20.000000   \nmax                302.996746      14.199116      94.998200     120.992297   \n              Flag_7  air_temperature_tmmn_7  potential_evapotranspiration_7  \\\ncount  797888.000000           797888.000000                   797888.000000   \nmean      216.947035              253.394017                        0.904935   \nstd        74.727392               51.277292                        0.959746   \nmin         0.000000                0.000000                        0.000000   \n25%       241.000000              257.300000                        0.400000   \n50%       241.000000              265.200000                        0.700000   \n75%       241.000000              269.100000                        1.100000   \nmax       255.000000              290.399576                       10.099621   \n       mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\ncount                  797888.000000             797888.000000   \nmean                        0.121647                 87.870999   \nstd                         0.167799                 21.871122   \nmin                         0.000000                  0.000000   \n25%                         0.030000                 85.098543   \n50%                         0.090000                 98.400000   \n75%                         0.150000                100.000000   \nmax                         2.379927                100.000000   \n       relative_humidity_rmin_7  precipitation_amount_7  \\\ncount             797888.000000           797888.000000   \nmean                  57.679422               12.489408   \nstd                   24.103840               24.465905   \nmin                    0.000000                0.000000   \n25%                   39.813695                0.000000   \n50%                   61.100000                2.402848   \n75%                   75.500000               12.300000   \nmax                  100.000000              133.600000   \n       air_temperature_tmmx_7   wind_speed_7         fsca_7     water_year  \\\ncount           797888.000000  797888.000000  797888.000000  797888.000000   \nmean               261.738514       3.800272      40.893001    2020.999088   \nstd                 52.658102       1.931106      23.789682       0.816683   \nmin                  0.000000       0.000000       0.000000    2020.000000   \n25%                268.198818       2.600000      28.000000    2020.000000   \n50%                272.600000       3.400000      46.000000    2021.000000   \n75%                275.700000       4.600000      59.000000    2022.000000   \nmax                302.996746      14.199116      94.998200    2022.000000   \n       cumulative_SWE  cumulative_Flag  cumulative_air_temperature_tmmn  \\\ncount   797888.000000     7.978880e+05                     7.978880e+05   \nmean      6816.528159     1.838117e+05                     2.202369e+05   \nstd      11275.938427     1.951428e+05                     2.118482e+05   \nmin          0.000000     0.000000e+00                     0.000000e+00   \n25%          0.000000     3.840300e+04                     6.104801e+04   \n50%       1380.000000     1.205000e+05                     1.607537e+05   \n75%       8989.046021     2.723775e+05                     3.216380e+05   \nmax      82320.000000     1.234884e+06                     1.345229e+06   \n       cumulative_potential_evapotranspiration  \\\ncount                            797888.000000   \nmean                                757.152515   \nstd                                 916.157302   \nmin                                   0.000000   \n25%                                 172.596253   \n50%                                 460.000000   \n75%                                 986.600000   \nmax                                7548.251472   \n       cumulative_mean_vapor_pressure_deficit  \\\ncount                           797888.000000   \nmean                               100.450355   \nstd                                132.855608   \nmin                                  0.000000   \n25%                                 18.710000   \n50%                                 54.180000   \n75%                                126.980000   \nmax                               1006.675716   \n       cumulative_relative_humidity_rmax  cumulative_relative_humidity_rmin  \\\ncount                      797888.000000                      797888.000000   \nmean                        76208.350377                       51466.071172   \nstd                         72559.281518                       55402.284240   \nmin                             0.000000                           0.000000   \n25%                         20723.952433                       12744.250000   \n50%                         55600.000000                       34676.457381   \n75%                        111275.550000                       71680.864537   \nmax                        467109.500000                      449150.000000   \n       cumulative_precipitation_amount  cumulative_air_temperature_tmmx  \\\ncount                    797888.000000                     7.978880e+05   \nmean                      14020.172581                     2.273012e+05   \nstd                       38799.643252                     2.183160e+05   \nmin                           0.000000                     0.000000e+00   \n25%                         563.421621                     6.312347e+04   \n50%                        2456.914098                     1.659770e+05   \n75%                        8430.117469                     3.323949e+05   \nmax                      409805.500000                     1.393200e+06   \n       cumulative_wind_speed  cumulative_fsca  \ncount          797888.000000    797888.000000  \nmean             3153.090689     36522.807646  \nstd              3141.521544     43943.351853  \nmin                 0.000000         0.000000  \n25%               858.200000      4992.000000  \n50%              2150.715277     20541.000000  \n75%              4492.831735     53800.000000  \nmax             21419.100000    344820.000000  \nAll the cumulative variables are added successfully! /home/chetana/gridmet_test_run/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_cumulative_v3.csv\ndouble check the swe_value statistics: count    797888.000000\nmean          2.378197\nstd           3.859433\nmin           0.000000\n25%           0.000000\n50%           0.000000\n75%           3.700000\nmax          14.300000\nName: swe_value, dtype: float64\n",
  "history_begin_time" : 1701658244892,
  "history_end_time" : 1701658412703,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "xjW0yxX77PYo",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n# Define file paths for various CSV files\n# current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected.csv'\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v3.csv'\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v3_bak.csv'\n# target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\ntarget_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_cumulative_v3.csv'\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    if column_name == \"SWE\":\n      mask = (y > 240) | y.isnull()\n    elif column_name == \"fsca\":\n      mask = (y > 100) | y.isnull()\n    else:\n      mask = y.isnull()\n\n    # Check if all elements in the mask array are True\n    all_true = np.all(mask)\n\n    if all_true:\n      df[column_name] = 0\n    else:\n      # Perform interpolation\n      new_y = np.interp(x, x[~mask], y[~mask])\n      # Replace missing values with interpolated values\n      df[column_name] = new_y\n\n    if np.any(df[column_name].isnull()):\n      raise ValueError(\"Single group: shouldn't have null values here\")\n        \n    return df\n\ndef convert_to_time_series(input_csv, output_csv):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 \"Flag\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv):\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['fsca'] > 100):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        filled_data.to_csv(filled_csv, index=False)\n        \n        print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv):\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n        result.fillna(0, inplace=True)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_cumulated = [\n      \"SWE\", \n      \"Flag\", \n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv)\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2019-10-01')\n    end_date = pd.to_datetime('2022-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df.describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n    \n\n\n# Uncomment this line to execute the 'convert_to_time_series' function\nconvert_to_time_series(current_ready_csv_path, target_time_series_csv_path)\n\n# Uncomment this line to execute the 'add_cumulative_columns' function\nadd_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path)\n",
  "history_output" : "today date = 2023-12-04\ntest start date:  2022-10-05\ntest end date:  2023-10-07\n/home/chetana\n2022275\n/home/chetana/gw-workspace/xjW0yxX77PYo/convert_to_time_series.py:87: DtypeWarning: Columns (6,7) have mixed types. Specify dtype option on import or set low_memory=False.\n  df = pd.read_csv(input_csv)\nAll current columns:  Index(['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n       'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n       'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n       'fsca'],\n      dtype='object')\n/home/chetana/gridmet_test_run/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v3.csv_gap_filled.csv already exists, skipping\n/home/chetana/gridmet_test_run/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v3.csv already exists, skipping\nthe column statistics from time series before cumulative:                  lat           lon           SWE          Flag     swe_value  \\\ncount  1.152303e+06  1.152303e+06  1.152303e+06  1.152303e+06  1.152303e+06   \nmean   4.157867e+01 -1.141048e+02  8.592147e+00  2.189066e+02  2.714047e+00   \nstd    3.656259e+00  5.458877e+00  1.301175e+01  7.212259e+01  4.907269e+00   \nmin    3.335825e+01 -1.234486e+02  0.000000e+00  0.000000e+00  0.000000e+00   \n25%    3.870816e+01 -1.196577e+02  0.000000e+00  2.410000e+02  0.000000e+00   \n50%    4.093632e+01 -1.133964e+02  0.000000e+00  2.410000e+02  0.000000e+00   \n75%    4.461398e+01 -1.100008e+02  2.000000e+01  2.410000e+02  3.400000e+00   \nmax    4.897107e+01 -1.051948e+02  1.209923e+02  2.550000e+02  2.260000e+01   \n       potential_evapotranspiration  precipitation_amount  \\\ncount                  1.152303e+06          1.152303e+06   \nmean                   8.988371e-01          1.273672e+01   \nstd                    9.655767e-01          2.480617e+01   \nmin                    0.000000e+00          0.000000e+00   \n25%                    4.000000e-01          0.000000e+00   \n50%                    7.000000e-01          2.500000e+00   \n75%                    1.001686e+00          1.280000e+01   \nmax                    1.009962e+01          1.336000e+02   \n       relative_humidity_rmax  relative_humidity_rmin  air_temperature_tmmn  \\\ncount            1.152303e+06            1.152303e+06          1.152303e+06   \nmean             8.740004e+01            5.762307e+01          2.519556e+02   \nstd              2.288166e+01            2.438432e+01          5.483590e+01   \nmin              0.000000e+00            0.000000e+00          0.000000e+00   \n25%              8.500000e+01            3.990000e+01          2.575000e+02   \n50%              9.840000e+01            6.120000e+01          2.652000e+02   \n75%              1.000000e+02            7.550000e+01          2.691000e+02   \nmax              1.000000e+02            1.000000e+02          2.903996e+02   \n       air_temperature_tmmx  mean_vapor_pressure_deficit    wind_speed  \\\ncount          1.152303e+06                 1.152303e+06  1.152303e+06   \nmean           2.601854e+02                 1.205145e-01  3.804287e+00   \nstd            5.634833e+01                 1.686098e-01  1.962463e+00   \nmin            0.000000e+00                 0.000000e+00  0.000000e+00   \n25%            2.682000e+02                 3.000000e-02  2.600000e+00   \n50%            2.726000e+02                 9.000000e-02  3.400000e+00   \n75%            2.757000e+02                 1.500000e-01  4.626885e+00   \nmax            3.029967e+02                 2.379927e+00  1.419912e+01   \n          elevation         slope     curvature        aspect      eastness  \\\ncount  1.152303e+06  1.152303e+06  1.152303e+06  1.152303e+06  1.152303e+06   \nmean   1.981167e+03  8.998028e+01 -3.284082e+03  1.434884e+02  5.051248e-02   \nstd    1.089668e+03  1.547512e-02  4.304268e+03  1.138377e+02  4.768540e-01   \nmin    0.000000e+00  8.990720e+01 -1.917768e+04  0.000000e+00 -7.853438e-01   \n25%    1.373774e+03  8.997688e+01 -5.788455e+03  2.357475e+01 -2.456968e-01   \n50%    2.290836e+03  8.998582e+01 -2.768771e+03  1.382174e+02  0.000000e+00   \n75%    2.812862e+03  8.999000e+01  0.000000e+00  2.189235e+02  4.308670e-01   \nmax    3.823385e+03  8.999648e+01  9.069726e+03  3.586563e+02  7.853980e-01   \n          northness          fsca         SWE_1        Flag_1  \\\ncount  1.152303e+06  1.152303e+06  1.152303e+06  1.152303e+06   \nmean  -4.342394e-02  4.127664e+01  8.589022e+00  2.188554e+02   \nstd    5.788388e-01  2.357471e+01  1.300971e+01  7.219171e+01   \nmin   -7.853694e-01  0.000000e+00  0.000000e+00  0.000000e+00   \n25%   -6.407296e-01  2.900000e+01  0.000000e+00  2.410000e+02   \n50%    0.000000e+00  4.600000e+01  0.000000e+00  2.410000e+02   \n75%    5.982362e-01  5.900000e+01  2.000000e+01  2.410000e+02   \nmax    7.853850e-01  9.499820e+01  1.209923e+02  2.550000e+02   \n       air_temperature_tmmn_1  potential_evapotranspiration_1  \\\ncount            1.152303e+06                    1.152303e+06   \nmean             2.519006e+02                    8.985359e-01   \nstd              5.495749e+01                    9.653831e-01   \nmin              0.000000e+00                    0.000000e+00   \n25%              2.575000e+02                    4.000000e-01   \n50%              2.652000e+02                    7.000000e-01   \n75%              2.691000e+02                    1.001433e+00   \nmax              2.903996e+02                    1.009962e+01   \n       mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\ncount                   1.152303e+06              1.152303e+06   \nmean                    1.204705e-01              8.738209e+01   \nstd                     1.685706e-01              2.291527e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     3.000000e-02              8.499472e+01   \n50%                     9.000000e-02              9.840000e+01   \n75%                     1.500000e-01              1.000000e+02   \nmax                     2.379927e+00              1.000000e+02   \n       relative_humidity_rmin_1  precipitation_amount_1  \\\ncount              1.152303e+06            1.152303e+06   \nmean               5.761338e+01            1.273552e+01   \nstd                2.439653e+01            2.480568e+01   \nmin                0.000000e+00            0.000000e+00   \n25%                3.990000e+01            0.000000e+00   \n50%                6.120000e+01            2.500000e+00   \n75%                7.550000e+01            1.280000e+01   \nmax                1.000000e+02            1.336000e+02   \n       air_temperature_tmmx_1  wind_speed_1        fsca_1         SWE_2  \\\ncount            1.152303e+06  1.152303e+06  1.152303e+06  1.152303e+06   \nmean             2.601281e+02  3.803426e+00  4.126733e+01  8.586863e+00   \nstd              5.647447e+01  1.963029e+00  2.358011e+01  1.300863e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.682000e+02  2.600000e+00  2.900000e+01  0.000000e+00   \n50%              2.726000e+02  3.400000e+00  4.600000e+01  0.000000e+00   \n75%              2.757000e+02  4.609674e+00  5.900000e+01  2.000000e+01   \nmax              3.029967e+02  1.419912e+01  9.499820e+01  1.209923e+02   \n             Flag_2  air_temperature_tmmn_2  potential_evapotranspiration_2  \\\ncount  1.152303e+06            1.152303e+06                    1.152303e+06   \nmean   2.188042e+02            2.518453e+02                    8.983025e-01   \nstd    7.226077e+01            5.507874e+01                    9.653044e-01   \nmin    0.000000e+00            0.000000e+00                    0.000000e+00   \n25%    2.410000e+02            2.575000e+02                    4.000000e-01   \n50%    2.410000e+02            2.652000e+02                    7.000000e-01   \n75%    2.410000e+02            2.691000e+02                    1.001140e+00   \nmax    2.550000e+02            2.903996e+02                    1.009962e+01   \n       mean_vapor_pressure_deficit_2  relative_humidity_rmax_2  \\\ncount                   1.152303e+06              1.152303e+06   \nmean                    1.204388e-01              8.736318e+01   \nstd                     1.685535e-01              2.294923e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     3.000000e-02              8.497343e+01   \n50%                     9.000000e-02              9.840000e+01   \n75%                     1.500000e-01              1.000000e+02   \nmax                     2.379927e+00              1.000000e+02   \n       relative_humidity_rmin_2  precipitation_amount_2  \\\ncount              1.152303e+06            1.152303e+06   \nmean               5.760176e+01            1.273276e+01   \nstd                2.440905e+01            2.480342e+01   \nmin                0.000000e+00            0.000000e+00   \n25%                3.990000e+01            0.000000e+00   \n50%                6.120000e+01            2.500000e+00   \n75%                7.550000e+01            1.280000e+01   \nmax                1.000000e+02            1.336000e+02   \n       air_temperature_tmmx_2  wind_speed_2        fsca_2         SWE_3  \\\ncount            1.152303e+06  1.152303e+06  1.152303e+06  1.152303e+06   \nmean             2.600708e+02  3.802500e+00  4.125780e+01  8.584579e+00   \nstd              5.660031e+01  1.963544e+00  2.358574e+01  1.300744e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.682000e+02  2.600000e+00  2.900000e+01  0.000000e+00   \n50%              2.726000e+02  3.400000e+00  4.600000e+01  0.000000e+00   \n75%              2.757000e+02  4.601667e+00  5.900000e+01  2.000000e+01   \nmax              3.029967e+02  1.419912e+01  9.499820e+01  1.209923e+02   \n             Flag_3  air_temperature_tmmn_3  potential_evapotranspiration_3  \\\ncount  1.152303e+06            1.152303e+06                    1.152303e+06   \nmean   2.187531e+02            2.517900e+02                    8.980626e-01   \nstd    7.232973e+01            5.519966e+01                    9.652303e-01   \nmin    0.000000e+00            0.000000e+00                    0.000000e+00   \n25%    2.410000e+02            2.575000e+02                    4.000000e-01   \n50%    2.410000e+02            2.652000e+02                    7.000000e-01   \n75%    2.410000e+02            2.691000e+02                    1.000960e+00   \nmax    2.550000e+02            2.903996e+02                    1.009962e+01   \n       mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\ncount                   1.152303e+06              1.152303e+06   \nmean                    1.204072e-01              8.734434e+01   \nstd                     1.685400e-01              2.298319e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     3.000000e-02              8.492823e+01   \n50%                     9.000000e-02              9.840000e+01   \n75%                     1.500000e-01              1.000000e+02   \nmax                     2.379927e+00              1.000000e+02   \n       relative_humidity_rmin_3  precipitation_amount_3  \\\ncount              1.152303e+06            1.152303e+06   \nmean               5.759027e+01            1.273008e+01   \nstd                2.442158e+01            2.480125e+01   \nmin                0.000000e+00            0.000000e+00   \n25%                3.990000e+01            0.000000e+00   \n50%                6.120000e+01            2.500000e+00   \n75%                7.550000e+01            1.280000e+01   \nmax                1.000000e+02            1.336000e+02   \n       air_temperature_tmmx_3  wind_speed_3        fsca_3         SWE_4  \\\ncount            1.152303e+06  1.152303e+06  1.152303e+06  1.152303e+06   \nmean             2.600135e+02  3.801570e+00  4.124850e+01  8.582179e+00   \nstd              5.672581e+01  1.964090e+00  2.359122e+01  1.300626e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.682000e+02  2.600000e+00  2.900000e+01  0.000000e+00   \n50%              2.726000e+02  3.400000e+00  4.600000e+01  0.000000e+00   \n75%              2.757000e+02  4.600523e+00  5.900000e+01  2.000000e+01   \nmax              3.029967e+02  1.419912e+01  9.499820e+01  1.209923e+02   \n             Flag_4  air_temperature_tmmn_4  potential_evapotranspiration_4  \\\ncount  1.152303e+06            1.152303e+06                    1.152303e+06   \nmean   2.187019e+02            2.517347e+02                    8.978387e-01   \nstd    7.239857e+01            5.532026e+01                    9.651861e-01   \nmin    0.000000e+00            0.000000e+00                    0.000000e+00   \n25%    2.410000e+02            2.575000e+02                    4.000000e-01   \n50%    2.410000e+02            2.652000e+02                    7.000000e-01   \n75%    2.410000e+02            2.691000e+02                    1.000822e+00   \nmax    2.550000e+02            2.903996e+02                    1.009962e+01   \n       mean_vapor_pressure_deficit_4  relative_humidity_rmax_4  \\\ncount                   1.152303e+06              1.152303e+06   \nmean                    1.203776e-01              8.732548e+01   \nstd                     1.685305e-01              2.301703e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     3.000000e-02              8.479800e+01   \n50%                     9.000000e-02              9.840000e+01   \n75%                     1.500000e-01              1.000000e+02   \nmax                     2.379927e+00              1.000000e+02   \n       relative_humidity_rmin_4  precipitation_amount_4  \\\ncount              1.152303e+06            1.152303e+06   \nmean               5.757858e+01            1.272761e+01   \nstd                2.443395e+01            2.479926e+01   \nmin                0.000000e+00            0.000000e+00   \n25%                3.990000e+01            0.000000e+00   \n50%                6.120000e+01            2.500000e+00   \n75%                7.550000e+01            1.280000e+01   \nmax                1.000000e+02            1.336000e+02   \n       air_temperature_tmmx_4  wind_speed_4        fsca_4         SWE_5  \\\ncount            1.152303e+06  1.152303e+06  1.152303e+06  1.152303e+06   \nmean             2.599562e+02  3.800674e+00  4.123930e+01  8.579957e+00   \nstd              5.685099e+01  1.964656e+00  2.359664e+01  1.300512e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.682000e+02  2.600000e+00  2.900000e+01  0.000000e+00   \n50%              2.726000e+02  3.400000e+00  4.600000e+01  0.000000e+00   \n75%              2.757000e+02  4.600213e+00  5.900000e+01  2.000000e+01   \nmax              3.029967e+02  1.419912e+01  9.499820e+01  1.209923e+02   \n             Flag_5  air_temperature_tmmn_5  potential_evapotranspiration_5  \\\ncount  1.152303e+06            1.152303e+06                    1.152303e+06   \nmean   2.186507e+02            2.516793e+02                    8.976465e-01   \nstd    7.246732e+01            5.544054e+01                    9.652081e-01   \nmin    0.000000e+00            0.000000e+00                    0.000000e+00   \n25%    2.410000e+02            2.575000e+02                    4.000000e-01   \n50%    2.410000e+02            2.652000e+02                    7.000000e-01   \n75%    2.410000e+02            2.691000e+02                    1.000774e+00   \nmax    2.550000e+02            2.903996e+02                    1.009962e+01   \n       mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\ncount                   1.152303e+06              1.152303e+06   \nmean                    1.203529e-01              8.730624e+01   \nstd                     1.685301e-01              2.305100e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     3.000000e-02              8.474094e+01   \n50%                     9.000000e-02              9.840000e+01   \n75%                     1.500000e-01              1.000000e+02   \nmax                     2.379927e+00              1.000000e+02   \n       relative_humidity_rmin_5  precipitation_amount_5  \\\ncount              1.152303e+06            1.152303e+06   \nmean               5.756622e+01            1.272452e+01   \nstd                2.444642e+01            2.479673e+01   \nmin                0.000000e+00            0.000000e+00   \n25%                3.990000e+01            0.000000e+00   \n50%                6.120000e+01            2.500000e+00   \n75%                7.550000e+01            1.280000e+01   \nmax                1.000000e+02            1.336000e+02   \n       air_temperature_tmmx_5  wind_speed_5        fsca_5         SWE_6  \\\ncount            1.152303e+06  1.152303e+06  1.152303e+06  1.152303e+06   \nmean             2.598989e+02  3.799746e+00  4.123019e+01  8.577802e+00   \nstd              5.697586e+01  1.965177e+00  2.360194e+01  1.300406e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.682000e+02  2.600000e+00  2.900000e+01  0.000000e+00   \n50%              2.726000e+02  3.400000e+00  4.600000e+01  0.000000e+00   \n75%              2.757000e+02  4.600027e+00  5.900000e+01  2.000000e+01   \nmax              3.029967e+02  1.419912e+01  9.499820e+01  1.209923e+02   \n             Flag_6  air_temperature_tmmn_6  potential_evapotranspiration_6  \\\ncount  1.152303e+06            1.152303e+06                    1.152303e+06   \nmean   2.185996e+02            2.516239e+02                    8.974458e-01   \nstd    7.253597e+01            5.556051e+01                    9.652024e-01   \nmin    0.000000e+00            0.000000e+00                    0.000000e+00   \n25%    2.410000e+02            2.575000e+02                    4.000000e-01   \n50%    2.410000e+02            2.652000e+02                    7.000000e-01   \n75%    2.410000e+02            2.691000e+02                    1.000721e+00   \nmax    2.550000e+02            2.903996e+02                    1.009962e+01   \n       mean_vapor_pressure_deficit_6  relative_humidity_rmax_6  \\\ncount                   1.152303e+06              1.152303e+06   \nmean                    1.203268e-01              8.728700e+01   \nstd                     1.685260e-01              2.308497e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     3.000000e-02              8.460000e+01   \n50%                     9.000000e-02              9.840000e+01   \n75%                     1.500000e-01              1.000000e+02   \nmax                     2.379927e+00              1.000000e+02   \n       relative_humidity_rmin_6  precipitation_amount_6  \\\ncount              1.152303e+06            1.152303e+06   \nmean               5.755391e+01            1.272156e+01   \nstd                2.445886e+01            2.479412e+01   \nmin                0.000000e+00            0.000000e+00   \n25%                3.990000e+01            0.000000e+00   \n50%                6.120000e+01            2.500000e+00   \n75%                7.550000e+01            1.280000e+01   \nmax                1.000000e+02            1.336000e+02   \n       air_temperature_tmmx_6  wind_speed_6        fsca_6         SWE_7  \\\ncount            1.152303e+06  1.152303e+06  1.152303e+06  1.152303e+06   \nmean             2.598417e+02  3.798826e+00  4.122141e+01  8.575677e+00   \nstd              5.710038e+01  1.965695e+00  2.360721e+01  1.300311e+01   \nmin              0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n25%              2.681992e+02  2.600000e+00  2.900000e+01  0.000000e+00   \n50%              2.726000e+02  3.400000e+00  4.600000e+01  0.000000e+00   \n75%              2.757000e+02  4.600000e+00  5.900000e+01  2.000000e+01   \nmax              3.029967e+02  1.419912e+01  9.499820e+01  1.209923e+02   \n             Flag_7  air_temperature_tmmn_7  potential_evapotranspiration_7  \\\ncount  1.152303e+06            1.152303e+06                    1.152303e+06   \nmean   2.185484e+02            2.515685e+02                    8.972404e-01   \nstd    7.260450e+01            5.568016e+01                    9.651654e-01   \nmin    0.000000e+00            0.000000e+00                    0.000000e+00   \n25%    2.410000e+02            2.575000e+02                    4.000000e-01   \n50%    2.410000e+02            2.652000e+02                    7.000000e-01   \n75%    2.410000e+02            2.691000e+02                    1.000666e+00   \nmax    2.550000e+02            2.903996e+02                    1.009962e+01   \n       mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\ncount                   1.152303e+06              1.152303e+06   \nmean                    1.202992e-01              8.726782e+01   \nstd                     1.685157e-01              2.311875e+01   \nmin                     0.000000e+00              0.000000e+00   \n25%                     3.000000e-02              8.460000e+01   \n50%                     9.000000e-02              9.840000e+01   \n75%                     1.500000e-01              1.000000e+02   \nmax                     2.379927e+00              1.000000e+02   \n       relative_humidity_rmin_7  precipitation_amount_7  \\\ncount              1.152303e+06            1.152303e+06   \nmean               5.754157e+01            1.271906e+01   \nstd                2.447119e+01            2.479232e+01   \nmin                0.000000e+00            0.000000e+00   \n25%                3.990000e+01            0.000000e+00   \n50%                6.120000e+01            2.500000e+00   \n75%                7.550000e+01            1.280000e+01   \nmax                1.000000e+02            1.336000e+02   \n       air_temperature_tmmx_7  wind_speed_7        fsca_7  \ncount            1.152303e+06  1.152303e+06  1.152303e+06  \nmean             2.597843e+02  3.797935e+00  4.121238e+01  \nstd              5.722457e+01  1.966244e+00  2.361265e+01  \nmin              0.000000e+00  0.000000e+00  0.000000e+00  \n25%              2.681981e+02  2.600000e+00  2.900000e+01  \n50%              2.726000e+02  3.400000e+00  4.600000e+01  \n75%              2.757000e+02  4.600000e+00  5.900000e+01  \nmax              3.029967e+02  1.419912e+01  9.499820e+01  \nThis is our unique years [2018 2019 2020 2021 2022]\nhow many rows are left in the three water years?                  lat            lon            SWE           Flag  \\\ncount  797888.000000  797888.000000  797888.000000  797888.000000   \nmean       41.615630    -114.130327       8.670955     216.947159   \nstd         3.643291       5.447167      13.015449      74.727441   \nmin        33.358254    -123.448583       0.000000       0.000000   \n25%        38.911155    -119.666675       0.000000     241.000000   \n50%        40.939712    -113.585082       0.000000     241.000000   \n75%        44.613976    -110.000804      20.000000     241.000000   \nmax        48.971066    -105.194817     120.992297     255.000000   \n           swe_value  potential_evapotranspiration  precipitation_amount  \\\ncount  797888.000000                 797888.000000         797888.000000   \nmean        2.378197                      0.905121             12.489575   \nstd         3.859433                      0.960089             24.464776   \nmin         0.000000                      0.000000              0.000000   \n25%         0.000000                      0.400000              0.000000   \n50%         0.000000                      0.700000              2.403388   \n75%         3.700000                      1.100000             12.300000   \nmax        14.300000                     10.099621            133.600000   \n       relative_humidity_rmax  relative_humidity_rmin  air_temperature_tmmn  \\\ncount           797888.000000           797888.000000         797888.000000   \nmean                87.868569               57.679897            253.395985   \nstd                 21.871793               24.103710             51.277688   \nmin                  0.000000                0.000000              0.000000   \n25%                 85.093823               39.814208            257.300000   \n50%                 98.400000               61.100000            265.200000   \n75%                100.000000               75.500000            269.100000   \nmax                100.000000              100.000000            290.399576   \n       air_temperature_tmmx  mean_vapor_pressure_deficit     wind_speed  \\\ncount         797888.000000                797888.000000  797888.000000   \nmean             261.739924                     0.121678       3.800249   \nstd               52.658450                     0.167859       1.930971   \nmin                0.000000                     0.000000       0.000000   \n25%              268.199052                     0.030000       2.600000   \n50%              272.600000                     0.090000       3.400000   \n75%              275.700000                     0.150000       4.600000   \nmax              302.996746                     2.379927      14.199116   \n           elevation          slope      curvature         aspect  \\\ncount  797888.000000  797888.000000  797888.000000  797888.000000   \nmean     2146.377731      89.980194   -3557.943893     155.453971   \nstd       965.291267       0.015543    4370.045317     110.361143   \nmin         0.000000      89.907196  -19177.676000       0.000000   \n25%      1712.839425      89.976875   -6130.748700      47.035070   \n50%      2410.964800      89.985710   -3167.041750     156.107400   \n75%      2851.773100      89.989990       0.000000     239.545010   \nmax      3823.384800      89.996475    9069.726000     358.656280   \n            eastness      northness           fsca          SWE_1  \\\ncount  797888.000000  797888.000000  797888.000000  797888.000000   \nmean        0.054725      -0.047045      40.893058       8.671360   \nstd         0.496106       0.602349      23.788484      13.015505   \nmin        -0.785344      -0.785369       0.000000       0.000000   \n25%        -0.348325      -0.684530      28.000000       0.000000   \n50%         0.000000       0.000000      46.000000       0.000000   \n75%         0.560143       0.628359      59.000000      20.000000   \nmax         0.785398       0.785385      94.998200     120.992297   \n              Flag_1  air_temperature_tmmn_1  potential_evapotranspiration_1  \\\ncount  797888.000000           797888.000000                   797888.000000   \nmean      216.947122              253.395526                        0.905107   \nstd        74.727427               51.277598                        0.960058   \nmin         0.000000                0.000000                        0.000000   \n25%       241.000000              257.300000                        0.400000   \n50%       241.000000              265.200000                        0.700000   \n75%       241.000000              269.100000                        1.100000   \nmax       255.000000              290.399576                       10.099621   \n       mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\ncount                  797888.000000             797888.000000   \nmean                        0.121677                 87.868642   \nstd                         0.167855                 21.871936   \nmin                         0.000000                  0.000000   \n25%                         0.030000                 85.093861   \n50%                         0.090000                 98.400000   \n75%                         0.150000                100.000000   \nmax                         2.379927                100.000000   \n       relative_humidity_rmin_1  precipitation_amount_1  \\\ncount             797888.000000           797888.000000   \nmean                  57.679163               12.489332   \nstd                   24.103757               24.464968   \nmin                    0.000000                0.000000   \n25%                   39.813788                0.000000   \n50%                   61.100000                2.402867   \n75%                   75.500000               12.300000   \nmax                  100.000000              133.600000   \n       air_temperature_tmmx_1   wind_speed_1         fsca_1          SWE_2  \\\ncount           797888.000000  797888.000000  797888.000000  797888.000000   \nmean               261.739639       3.800231      40.893242       8.671828   \nstd                 52.658399       1.931001      23.788597      13.015760   \nmin                  0.000000       0.000000       0.000000       0.000000   \n25%                268.198977       2.600000      28.000000       0.000000   \n50%                272.600000       3.400000      46.000000       0.000000   \n75%                275.700000       4.600000      59.000000      20.000000   \nmax                302.996746      14.199116      94.998200     120.992297   \n              Flag_2  air_temperature_tmmn_2  potential_evapotranspiration_2  \\\ncount  797888.000000           797888.000000                   797888.000000   \nmean      216.947175              253.394978                        0.905082   \nstd        74.727449               51.277516                        0.960021   \nmin         0.000000                0.000000                        0.000000   \n25%       241.000000              257.300000                        0.400000   \n50%       241.000000              265.200000                        0.700000   \n75%       241.000000              269.100000                        1.100000   \nmax       255.000000              290.399576                       10.099621   \n       mean_vapor_pressure_deficit_2  relative_humidity_rmax_2  \\\ncount                  797888.000000             797888.000000   \nmean                        0.121674                 87.868966   \nstd                         0.167852                 21.871860   \nmin                         0.000000                  0.000000   \n25%                         0.030000                 85.094051   \n50%                         0.090000                 98.400000   \n75%                         0.150000                100.000000   \nmax                         2.379927                100.000000   \n       relative_humidity_rmin_2  precipitation_amount_2  \\\ncount             797888.000000           797888.000000   \nmean                  57.678598               12.489307   \nstd                   24.103914               24.465291   \nmin                    0.000000                0.000000   \n25%                   39.813593                0.000000   \n50%                   61.100000                2.402442   \n75%                   75.500000               12.300000   \nmax                  100.000000              133.600000   \n       air_temperature_tmmx_2   wind_speed_2         fsca_2          SWE_3  \\\ncount           797888.000000  797888.000000  797888.000000  797888.000000   \nmean               261.739289       3.800204      40.892922       8.672401   \nstd                 52.658337       1.931025      23.788764      13.016023   \nmin                  0.000000       0.000000       0.000000       0.000000   \n25%                268.198877       2.600000      28.000000       0.000000   \n50%                272.600000       3.400000      46.000000       0.000000   \n75%                275.700000       4.600000      59.000000      20.000000   \nmax                302.996746      14.199116      94.998200     120.992297   \n              Flag_3  air_temperature_tmmn_3  potential_evapotranspiration_3  \\\ncount  797888.000000           797888.000000                   797888.000000   \nmean      216.947201              253.394342                        0.905074   \nstd        74.727460               51.277405                        0.960001   \nmin         0.000000                0.000000                        0.000000   \n25%       241.000000              257.300000                        0.400000   \n50%       241.000000              265.200000                        0.700000   \n75%       241.000000              269.100000                        1.100000   \nmax       255.000000              290.399576                       10.099621   \n       mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\ncount                  797888.000000             797888.000000   \nmean                        0.121675                 87.868802   \nstd                         0.167851                 21.871969   \nmin                         0.000000                  0.000000   \n25%                         0.030000                 85.093884   \n50%                         0.090000                 98.400000   \n75%                         0.150000                100.000000   \nmax                         2.379927                100.000000   \n       relative_humidity_rmin_3  precipitation_amount_3  \\\ncount             797888.000000           797888.000000   \nmean                  57.677273               12.488560   \nstd                   24.104056               24.464872   \nmin                    0.000000                0.000000   \n25%                   39.812932                0.000000   \n50%                   61.100000                2.401934   \n75%                   75.500000               12.300000   \nmax                  100.000000              133.600000   \n       air_temperature_tmmx_3   wind_speed_3         fsca_3          SWE_4  \\\ncount           797888.000000  797888.000000  797888.000000  797888.000000   \nmean               261.738946       3.800123      40.892784       8.672153   \nstd                 52.658276       1.930981      23.788894      13.015783   \nmin                  0.000000       0.000000       0.000000       0.000000   \n25%                268.198781       2.600000      28.000000       0.000000   \n50%                272.600000       3.400000      46.000000       0.000000   \n75%                275.700000       4.600000      59.000000      20.000000   \nmax                302.996746      14.199116      94.998200     120.992297   \n              Flag_4  air_temperature_tmmn_4  potential_evapotranspiration_4  \\\ncount  797888.000000           797888.000000                   797888.000000   \nmean      216.947263              253.394129                        0.904999   \nstd        74.727486               51.277359                        0.959861   \nmin         0.000000                0.000000                        0.000000   \n25%       241.000000              257.300000                        0.400000   \n50%       241.000000              265.200000                        0.700000   \n75%       241.000000              269.100000                        1.100000   \nmax       255.000000              290.399576                       10.099621   \n       mean_vapor_pressure_deficit_4  relative_humidity_rmax_4  \\\ncount                  797888.000000             797888.000000   \nmean                        0.121662                 87.869788   \nstd                         0.167825                 21.871602   \nmin                         0.000000                  0.000000   \n25%                         0.030000                 85.094964   \n50%                         0.090000                 98.400000   \n75%                         0.150000                100.000000   \nmax                         2.379927                100.000000   \n       relative_humidity_rmin_4  precipitation_amount_4  \\\ncount             797888.000000           797888.000000   \nmean                  57.678320               12.489451   \nstd                   24.103919               24.466094   \nmin                    0.000000                0.000000   \n25%                   39.813492                0.000000   \n50%                   61.100000                2.402404   \n75%                   75.500000               12.300000   \nmax                  100.000000              133.600000   \n       air_temperature_tmmx_4   wind_speed_4         fsca_4          SWE_5  \\\ncount           797888.000000  797888.000000  797888.000000  797888.000000   \nmean               261.738680       3.800159      40.893150       8.672238   \nstd                 52.658194       1.930999      23.789061      13.015942   \nmin                  0.000000       0.000000       0.000000       0.000000   \n25%                268.198747       2.600000      28.000000       0.000000   \n50%                272.600000       3.400000      46.000000       0.000000   \n75%                275.700000       4.600000      59.000000      20.000000   \nmax                302.996746      14.199116      94.998200     120.992297   \n              Flag_5  air_temperature_tmmn_5  potential_evapotranspiration_5  \\\ncount  797888.000000           797888.000000                   797888.000000   \nmean      216.947202              253.394046                        0.904977   \nstd        74.727461               51.277332                        0.959853   \nmin         0.000000                0.000000                        0.000000   \n25%       241.000000              257.300000                        0.400000   \n50%       241.000000              265.200000                        0.700000   \n75%       241.000000              269.100000                        1.100000   \nmax       255.000000              290.399576                       10.099621   \n       mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\ncount                  797888.000000             797888.000000   \nmean                        0.121655                 87.870418   \nstd                         0.167816                 21.871336   \nmin                         0.000000                  0.000000   \n25%                         0.030000                 85.097479   \n50%                         0.090000                 98.400000   \n75%                         0.150000                100.000000   \nmax                         2.379927                100.000000   \n       relative_humidity_rmin_5  precipitation_amount_5  \\\ncount             797888.000000           797888.000000   \nmean                  57.678878               12.489545   \nstd                   24.103771               24.466169   \nmin                    0.000000                0.000000   \n25%                   39.813593                0.000000   \n50%                   61.100000                2.402470   \n75%                   75.500000               12.300000   \nmax                  100.000000              133.600000   \n       air_temperature_tmmx_5   wind_speed_5         fsca_5          SWE_6  \\\ncount           797888.000000  797888.000000  797888.000000  797888.000000   \nmean               261.738555       3.800193      40.892630       8.672120   \nstd                 52.658153       1.931026      23.789461      13.015815   \nmin                  0.000000       0.000000       0.000000       0.000000   \n25%                268.198761       2.600000      28.000000       0.000000   \n50%                272.600000       3.400000      46.000000       0.000000   \n75%                275.700000       4.600000      59.000000      20.000000   \nmax                302.996746      14.199116      94.998200     120.992297   \n              Flag_6  air_temperature_tmmn_6  potential_evapotranspiration_6  \\\ncount  797888.000000           797888.000000                   797888.000000   \nmean      216.947184              253.393972                        0.904955   \nstd        74.727454               51.277311                        0.959796   \nmin         0.000000                0.000000                        0.000000   \n25%       241.000000              257.300000                        0.400000   \n50%       241.000000              265.200000                        0.700000   \n75%       241.000000              269.100000                        1.100000   \nmax       255.000000              290.399576                       10.099621   \n       mean_vapor_pressure_deficit_6  relative_humidity_rmax_6  \\\ncount                  797888.000000             797888.000000   \nmean                        0.121651                 87.870572   \nstd                         0.167807                 21.871450   \nmin                         0.000000                  0.000000   \n25%                         0.030000                 85.097500   \n50%                         0.090000                 98.400000   \n75%                         0.150000                100.000000   \nmax                         2.379927                100.000000   \n       relative_humidity_rmin_6  precipitation_amount_6  \\\ncount             797888.000000           797888.000000   \nmean                  57.678898               12.489131   \nstd                   24.104074               24.465689   \nmin                    0.000000                0.000000   \n25%                   39.813477                0.000000   \n50%                   61.100000                2.402461   \n75%                   75.500000               12.300000   \nmax                  100.000000              133.600000   \n       air_temperature_tmmx_6   wind_speed_6         fsca_6          SWE_7  \\\ncount           797888.000000  797888.000000  797888.000000  797888.000000   \nmean               261.738521       3.800226      40.892931       8.671898   \nstd                 52.658123       1.931073      23.789607      13.015467   \nmin                  0.000000       0.000000       0.000000       0.000000   \n25%                268.198766       2.600000      28.000000       0.000000   \n50%                272.600000       3.400000      46.000000       0.000000   \n75%                275.700000       4.600000      59.000000      20.000000   \nmax                302.996746      14.199116      94.998200     120.992297   \n              Flag_7  air_temperature_tmmn_7  potential_evapotranspiration_7  \\\ncount  797888.000000           797888.000000                   797888.000000   \nmean      216.947035              253.394017                        0.904935   \nstd        74.727392               51.277292                        0.959746   \nmin         0.000000                0.000000                        0.000000   \n25%       241.000000              257.300000                        0.400000   \n50%       241.000000              265.200000                        0.700000   \n75%       241.000000              269.100000                        1.100000   \nmax       255.000000              290.399576                       10.099621   \n       mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\ncount                  797888.000000             797888.000000   \nmean                        0.121647                 87.870999   \nstd                         0.167799                 21.871122   \nmin                         0.000000                  0.000000   \n25%                         0.030000                 85.098543   \n50%                         0.090000                 98.400000   \n75%                         0.150000                100.000000   \nmax                         2.379927                100.000000   \n       relative_humidity_rmin_7  precipitation_amount_7  \\\ncount             797888.000000           797888.000000   \nmean                  57.679422               12.489408   \nstd                   24.103840               24.465905   \nmin                    0.000000                0.000000   \n25%                   39.813695                0.000000   \n50%                   61.100000                2.402848   \n75%                   75.500000               12.300000   \nmax                  100.000000              133.600000   \n       air_temperature_tmmx_7   wind_speed_7         fsca_7  \ncount           797888.000000  797888.000000  797888.000000  \nmean               261.738514       3.800272      40.893001  \nstd                 52.658102       1.931106      23.789682  \nmin                  0.000000       0.000000       0.000000  \n25%                268.198818       2.600000      28.000000  \n50%                272.600000       3.400000      46.000000  \n75%                275.700000       4.600000      59.000000  \nmax                302.996746      14.199116      94.998200  \n",
  "history_begin_time" : 1701658080296,
  "history_end_time" : 1701658141660,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "tB4X8fU0Rtmu",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n# Define file paths for various CSV files\n# current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected.csv'\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v3.csv'\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v3_bak.csv'\n# target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\ntarget_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_cumulative_v3.csv'\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    if column_name == \"SWE\":\n      mask = (y > 240) | y.isnull()\n    elif column_name == \"fsca\":\n      mask = (y > 100) | y.isnull()\n    else:\n      mask = y.isnull()\n\n    # Check if all elements in the mask array are True\n    all_true = np.all(mask)\n\n    if all_true:\n      df[column_name] = 0\n    else:\n      # Perform interpolation\n      new_y = np.interp(x, x[~mask], y[~mask])\n      # Replace missing values with interpolated values\n      df[column_name] = new_y\n\n    if np.any(df[column_name].isnull()):\n      raise ValueError(\"Single group: shouldn't have null values here\")\n        \n    return df\n\ndef convert_to_time_series(input_csv, output_csv):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 \"Flag\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv):\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['fsca'] > 100):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        filled_data.to_csv(filled_csv, index=False)\n        \n        print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv):\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n        result.fillna(0, inplace=True)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_cumulated = [\n      \"SWE\", \n      \"Flag\", \n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv)\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2019-10-01')\n    end_date = pd.to_datetime('2022-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df.describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n    \n\n\n# Uncomment this line to execute the 'convert_to_time_series' function\nconvert_to_time_series(current_ready_csv_path, target_time_series_csv_path)\n\n# Uncomment this line to execute the 'add_cumulative_columns' function\n#add_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path)\n",
  "history_output" : "today date = 2023-12-04\ntest start date:  2022-10-05\ntest end date:  2023-10-07\n/home/chetana\n2022275\n/home/chetana/gw-workspace/tB4X8fU0Rtmu/convert_to_time_series.py:87: DtypeWarning: Columns (6,7) have mixed types. Specify dtype option on import or set low_memory=False.\n  df = pd.read_csv(input_csv)\nAll current columns:  Index(['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n       'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n       'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n       'fsca'],\n      dtype='object')\nStart to fill in the missing values\nNew filled values csv is saved to /home/chetana/gridmet_test_run/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v3.csv_gap_filled.csv\nStart to create the training csv with previous 7 days columns\nNew data is saved to /home/chetana/gridmet_test_run/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v3.csv\nFile is backed up to /home/chetana/gridmet_test_run/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v3_bak.csv\n",
  "history_begin_time" : 1701657803065,
  "history_end_time" : 1701657917971,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "YpqtWsp9FlVb",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n# Define file paths for various CSV files\n# current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected.csv'\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v2.csv'\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v2_bak.csv'\n# target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\ntarget_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_cumulative_v1.csv'\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    if column_name == \"SWE\":\n      mask = (y > 240) | y.isnull()\n    elif column_name == \"fsca\":\n      mask = (y > 100) | y.isnull()\n    else:\n      mask = y.isnull()\n\n    # Check if all elements in the mask array are True\n    all_true = np.all(mask)\n\n    if all_true:\n      df[column_name] = 0\n    else:\n      # Perform interpolation\n      new_y = np.interp(x, x[~mask], y[~mask])\n      # Replace missing values with interpolated values\n      df[column_name] = new_y\n\n    if np.any(df[column_name].isnull()):\n      raise ValueError(\"Single group: shouldn't have null values here\")\n        \n    return df\n\ndef convert_to_time_series(input_csv, output_csv):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 \"Flag\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv):\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['fsca'] > 100):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        filled_data.to_csv(filled_csv, index=False)\n        \n        print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv):\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_cumulated = [\n      \"SWE\", \n      \"Flag\", \n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv)\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2019-10-01')\n    end_date = pd.to_datetime('2022-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df.describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n    \n\n\n# Uncomment this line to execute the 'convert_to_time_series' function\nconvert_to_time_series(current_ready_csv_path, target_time_series_csv_path)\n\n# Uncomment this line to execute the 'add_cumulative_columns' function\n#add_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path)\n",
  "history_output" : "today date = 2023-12-04\ntest start date:  2022-10-05\ntest end date:  2023-10-07\n/home/chetana\n2022275\n/home/chetana/gw-workspace/YpqtWsp9FlVb/convert_to_time_series.py:87: DtypeWarning: Columns (6,7) have mixed types. Specify dtype option on import or set low_memory=False.\n  df = pd.read_csv(input_csv)\nAll current columns:  Index(['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n       'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n       'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n       'fsca'],\n      dtype='object')\n/home/chetana/gridmet_test_run/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v2.csv_gap_filled.csv already exists, skipping\nStart to create the training csv with previous 7 days columns\nNew data is saved to /home/chetana/gridmet_test_run/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v2.csv\nFile is backed up to /home/chetana/gridmet_test_run/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v2_bak.csv\n",
  "history_begin_time" : 1701656648012,
  "history_end_time" : 1701656743733,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "udiFlfu83arX",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n# Define file paths for various CSV files\n# current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected.csv'\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v2.csv'\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v2_bak.csv'\n# target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\ntarget_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_cumulative_v1.csv'\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    if column_name == \"SWE\":\n      mask = (y > 240) | y.isnull()\n    elif column_name == \"fsca\":\n      mask = (y > 100) | y.isnull()\n    else:\n      mask = y.isnull()\n\n    # Check if all elements in the mask array are True\n    all_true = np.all(mask)\n\n    if all_true:\n      df[column_name] = 0\n    else:\n      # Perform interpolation\n      new_y = np.interp(x, x[~mask], y[~mask])\n      # Replace missing values with interpolated values\n      df[column_name] = new_y\n\n    if np.any(df[column_name].isnull()):\n      raise ValueError(\"Single group: shouldn't have null values here\")\n        \n    return df\n\ndef convert_to_time_series(input_csv, output_csv):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 \"Flag\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv):\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['fsca'] > 100):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        filled_data.to_csv(filled_csv, index=False)\n        \n        print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv):\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    \n    columns_to_be_cumulated = [\n      \"SWE\", \n      \"Flag\", \n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv)\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2019-10-01')\n    end_date = pd.to_datetime('2022-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df.describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n    \n\n\n# Uncomment this line to execute the 'convert_to_time_series' function\nconvert_to_time_series(current_ready_csv_path, target_time_series_csv_path)\n\n# Uncomment this line to execute the 'add_cumulative_columns' function\nadd_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path)\n",
  "history_output" : "today date = 2023-12-04\ntest start date:  2022-10-05\ntest end date:  2023-10-07\n/home/chetana\n2022275\n/home/chetana/gw-workspace/udiFlfu83arX/convert_to_time_series.py:87: DtypeWarning: Columns (6,7) have mixed types. Specify dtype option on import or set low_memory=False.\n  df = pd.read_csv(input_csv)\nAll current columns:  Index(['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n       'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n       'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n       'fsca'],\n      dtype='object')\nStart to fill in the missing values\nNew filled values csv is saved to /home/chetana/gridmet_test_run/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v2.csv_gap_filled.csv\nStart to create the training csv with previous 7 days columns\n",
  "history_begin_time" : 1701656611540,
  "history_end_time" : 1701656638322,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "Y7aKeUxRkA8c",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n# Define file paths for various CSV files\n# current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected.csv'\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v2.csv'\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v2_bak.csv'\n# target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\ntarget_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_cumulative_v1.csv'\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef convert_to_time_series(input_csv, output_csv):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 \"Flag\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv):\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def interpolate_missing_inplace(df, column_name, degree=3):\n          x = df.index\n          y = df[column_name]\n\n          # Create a mask for missing values\n          if column_name == \"SWE\":\n            mask = (y > 240) | y.isnull()\n          elif column_name == \"fsca\":\n            mask = (y > 100) | y.isnull()\n          else:\n            mask = y.isnull()\n        \n          # Check if all elements in the mask array are True\n          all_true = np.all(mask)\n          \n          if all_true:\n            df[column_name] = 0\n          else:\n            # Perform interpolation\n            new_y = np.interp(x, x[~mask], y[~mask])\n            # Replace missing values with interpolated values\n            df[column_name] = new_y\n    \n          if np.any(df[column_name].isnull()):\n            raise ValueError(\"Single group: shouldn't have null values here\")\n          return df\n    \n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['fsca'] > 100):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        filled_data.to_csv(filled_csv, index=False)\n        \n        print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv):\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n#         for name, group in grouped:\n#           group = group.set_index('date')\n#           for day in range(1, num_days + 1):\n#             for target_col in columns_to_be_time_series:\n#               new_column_name = f'{target_col}_{day}'\n#               group[new_column_name] = group[target_col].shift(day)\n#         result = pd.concat([result, group], axis=0)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    columns_to_be_cumulated = [\n      \"SWE\", \n      \"Flag\", \n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv)\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2019-10-01')\n    end_date = pd.to_datetime('2022-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(group):\n        for column in columns_to_be_cumulated:\n          x = group.index\n          y = group[column]\n          \n\t\t  # Create a mask for missing values\n          if column == \"SWE\":\n          \tmask = y > 240\n          elif column == \"fsca\":\n            mask = y > 100\n          else:\n            \n          \n          # Perform interpolation\n          new_y = np.interp(x, x[~mask], y[~mask])\n            \n          if np.any(new_y > 100):\n             raise ValueError(\"fsca group: shouldn't have values > 240 here\")\n\n          # Replace missing values with interpolated values\n          group[column] = new_y\n        \n        return group\n\n    \n    df = grouped.apply(interpolate_missing_inplace)\n        \n    print(\"All the columns should have missing values filled: \", df.describe())    \n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df.describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n    \n\n\n# Uncomment this line to execute the 'convert_to_time_series' function\nconvert_to_time_series(current_ready_csv_path, target_time_series_csv_path)\n\n# Uncomment this line to execute the 'add_cumulative_columns' function\nadd_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path)\n",
  "history_output" : "  File \"/home/chetana/gw-workspace/Y7aKeUxRkA8c/convert_to_time_series.py\", line 238\n    new_y = np.interp(x, x[~mask], y[~mask])\n    ^\nIndentationError: expected an indented block\n",
  "history_begin_time" : 1701656266279,
  "history_end_time" : 1701656266337,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "thyCKSN0jBiJ",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n# Define file paths for various CSV files\n# current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected.csv'\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v2.csv'\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v2_bak.csv'\n# target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\ntarget_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_cumulative_v1.csv'\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef convert_to_time_series(input_csv, output_csv):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 \"Flag\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv):\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def interpolate_missing_inplace(df, column_name, degree=3):\n          x = df.index\n          y = df[column_name]\n\n          # Create a mask for missing values\n          if column_name == \"SWE\":\n            mask = (y > 240) | y.isnull()\n          elif column_name == \"fsca\":\n            mask = (y > 100) | y.isnull()\n          else:\n            mask = y.isnull()\n          # Perform interpolation\n          new_y = np.interp(x, x[~mask], y[~mask])\n\n          if np.any(new_y.isnull()):\n            raise ValueError(\"Single group: shouldn't have null values here\")\n\n          # Replace missing values with interpolated values\n          df[column_name] = new_y\n          return df\n    \n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['fsca'] > 100):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        result.to_csv(filled_csv, index=False)\n        \n    print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv):\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n#         for name, group in grouped:\n#           group = group.set_index('date')\n#           for day in range(1, num_days + 1):\n#             for target_col in columns_to_be_time_series:\n#               new_column_name = f'{target_col}_{day}'\n#               group[new_column_name] = group[target_col].shift(day)\n#         result = pd.concat([result, group], axis=0)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    columns_to_be_cumulated = [\n      \"SWE\", \n      \"Flag\", \n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv)\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2019-10-01')\n    end_date = pd.to_datetime('2022-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(group):\n        for column in columns_to_be_cumulated:\n          x = group.index\n          y = group[column]\n          \n\t\t  # Create a mask for missing values\n          if column == \"SWE\":\n          \tmask = y > 240\n            # Perform interpolation\n          \tnew_y = np.interp(x, x[~mask], y[~mask])\n\n          \tif np.any(new_y > 240):\n          \t    raise ValueError(\"SWE group: shouldn't have values > 240 here\")\n\n          \t# Replace missing values with interpolated values\n          \tgroup[column] = new_y\n          elif column == \"fsca\":\n            mask = y > 100\n            # Perform interpolation\n            new_y = np.interp(x, x[~mask], y[~mask])\n            \n            if np.any(new_y > 100):\n                raise ValueError(\"fsca group: shouldn't have values > 240 here\")\n\n          \t# Replace missing values with interpolated values\n            group[column] = new_y\n        \n        return group\n\n    \n    df = grouped.apply(interpolate_missing_inplace)\n        \n    print(\"All the columns should have missing values filled: \", df.describe())    \n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df.describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n    \n\n\n# Uncomment this line to execute the 'convert_to_time_series' function\nconvert_to_time_series(current_ready_csv_path, target_time_series_csv_path)\n\n# Uncomment this line to execute the 'add_cumulative_columns' function\nadd_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path)\n",
  "history_output" : "today date = 2023-12-04\ntest start date:  2022-10-05\ntest end date:  2023-10-07\n/home/chetana\n2022275\n/home/chetana/gw-workspace/thyCKSN0jBiJ/convert_to_time_series.py:60: DtypeWarning: Columns (6,7) have mixed types. Specify dtype option on import or set low_memory=False.\n  df = pd.read_csv(input_csv)\nAll current columns:  Index(['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n       'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n       'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n       'fsca'],\n      dtype='object')\nStart to fill in the missing values\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/thyCKSN0jBiJ/convert_to_time_series.py\", line 267, in <module>\n    convert_to_time_series(current_ready_csv_path, target_time_series_csv_path)\n  File \"/home/chetana/gw-workspace/thyCKSN0jBiJ/convert_to_time_series.py\", line 117, in convert_to_time_series\n    filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/groupby/groupby.py\", line 1567, in apply\n    result = self._python_apply_general(f, self._selected_obj)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/groupby/groupby.py\", line 1629, in _python_apply_general\n    values, mutated = self.grouper.apply(f, data, self.axis)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/groupby/ops.py\", line 839, in apply\n    res = f(group)\n  File \"/home/chetana/gw-workspace/thyCKSN0jBiJ/convert_to_time_series.py\", line 111, in process_group_filling_value\n    group = interpolate_missing_inplace(group, column_name)\n  File \"/home/chetana/gw-workspace/thyCKSN0jBiJ/convert_to_time_series.py\", line 99, in interpolate_missing_inplace\n    if np.any(new_y.isnull()):\nAttributeError: 'numpy.ndarray' object has no attribute 'isnull'\n",
  "history_begin_time" : 1701655479278,
  "history_end_time" : 1701655483985,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "Kj6wN9ywnZzD",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n# Define file paths for various CSV files\n# current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected.csv'\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v2.csv'\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v2_bak.csv'\n# target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\ntarget_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_cumulative_v1.csv'\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef convert_to_time_series(input_csv, output_csv):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 \"Flag\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed',\n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                        }, inplace=True)\n    \n    filled_csv = f\"{output_csv}_gap_filled.csv\"\n    if os.path.exists(filled_csv):\n        print(f\"{filled_csv} already exists, skipping\")\n        filled_data = pd.read_csv(filled_csv)\n    else:\n        # Function to perform polynomial interpolation and fill in missing values\n        def interpolate_missing_inplace(df, column_name, degree=3):\n          x = df.index\n          y = df[column_name]\n\n          # Create a mask for missing values\n          if column_name == \"SWE\":\n        \tmask = (y > 240) | y.isnull()\n          elif column_name == \"fsca\":\n            mask = (y > 100) | y.isnull()\n          else:\n            mask = y.isnull()\n          # Perform interpolation\n          new_y = np.interp(x, x[~mask], y[~mask])\n\n          if np.any(new_y.isnull()):\n            raise ValueError(\"Single group: shouldn't have null values here\")\n\n          # Replace missing values with interpolated values\n          df[column_name] = new_y\n          return df\n    \n        def process_group_filling_value(group):\n          # Sort the group by 'date'\n          group = group.sort_values(by='date')\n      \n          for column_name in columns_to_be_time_series:\n            group = interpolate_missing_inplace(group, column_name)\n          # Return the processed group\n          return group\n        # Group the data by 'lat' and 'lon' and apply interpolation for each column\n        print(\"Start to fill in the missing values\")\n        grouped = df.groupby(['lat', 'lon'])\n        filled_data = grouped.apply(process_group_filling_value).reset_index(drop=True)\n    \n\n        if any(filled_data['fsca'] > 100):\n          raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n        result.to_csv(filled_csv, index=False)\n    print(f\"New filled values csv is saved to {filled_csv}\")\n    \n    if os.path.exists(output_csv):\n        print(f\"{output_csv} already exists, skipping\")\n    else:\n        df = filled_data\n        # Create a new DataFrame to store the time series data for each location\n        print(\"Start to create the training csv with previous 7 days columns\")\n        result = pd.DataFrame()\n\n        # Define the number of days to consider (7 days in this case)\n        num_days = 7\n\n        grouped = df.groupby(['lat', 'lon'])\n        \n        def process_group_time_series(group, num_days):\n          group = group.sort_values(by='date')\n          for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n              new_column_name = f'{target_col}_{day}'\n              group[new_column_name] = group[target_col].shift(day)\n              \n          return group\n        \n        result = grouped.apply(lambda group: process_group_time_series(group, num_days)).reset_index(drop=True)\n#         for name, group in grouped:\n#           group = group.set_index('date')\n#           for day in range(1, num_days + 1):\n#             for target_col in columns_to_be_time_series:\n#               new_column_name = f'{target_col}_{day}'\n#               group[new_column_name] = group[target_col].shift(day)\n#         result = pd.concat([result, group], axis=0)\n        \n        result.to_csv(output_csv, index=False)\n        print(f\"New data is saved to {output_csv}\")\n        shutil.copy(output_csv, backup_time_series_csv_path)\n        print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    columns_to_be_cumulated = [\n      \"SWE\", \n      \"Flag\", \n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv)\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2019-10-01')\n    end_date = pd.to_datetime('2022-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(group):\n        for column in columns_to_be_cumulated:\n          x = group.index\n          y = group[column]\n          \n\t\t  # Create a mask for missing values\n          if column == \"SWE\":\n          \tmask = y > 240\n            # Perform interpolation\n          \tnew_y = np.interp(x, x[~mask], y[~mask])\n\n          \tif np.any(new_y > 240):\n          \t    raise ValueError(\"SWE group: shouldn't have values > 240 here\")\n\n          \t# Replace missing values with interpolated values\n          \tgroup[column] = new_y\n          elif column == \"fsca\":\n            mask = y > 100\n            # Perform interpolation\n            new_y = np.interp(x, x[~mask], y[~mask])\n            \n            if np.any(new_y > 100):\n                raise ValueError(\"fsca group: shouldn't have values > 240 here\")\n\n          \t# Replace missing values with interpolated values\n            group[column] = new_y\n        \n        return group\n\n    \n    df = grouped.apply(interpolate_missing_inplace)\n        \n    print(\"All the columns should have missing values filled: \", df.describe())    \n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df.describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n    \n\n\n# Uncomment this line to execute the 'convert_to_time_series' function\nconvert_to_time_series(current_ready_csv_path, target_time_series_csv_path)\n\n# Uncomment this line to execute the 'add_cumulative_columns' function\nadd_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path)\n",
  "history_output" : "  File \"/home/chetana/gw-workspace/Kj6wN9ywnZzD/convert_to_time_series.py\", line 91\n    mask = (y > 240) | y.isnull()\nTabError: inconsistent use of tabs and spaces in indentation\n",
  "history_begin_time" : 1701655448528,
  "history_end_time" : 1701655448581,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "60n9x3v5tcw",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701272631490,
  "history_end_time" : 1701272875117,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "cg7kimqeb4g",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701272152712,
  "history_end_time" : 1701272363360,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "dnpew28xnkx",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701269761357,
  "history_end_time" : 1701269761357,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "GqLj39g75OVy",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n# Define file paths for various CSV files\n# current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected.csv'\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v1.csv'\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v1_bak.csv'\n# target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\ntarget_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_cumulative_v1.csv'\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef convert_to_time_series(input_csv, output_csv):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 \"Flag\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed', \n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                        }, inplace=True)\n\n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(df, column_name, degree=3):\n        x = df.index\n        y = df[column_name]\n\n        # Create a mask for missing values\n        if column_name == \"SWE\":\n        \tmask = (y > 240) | y.isnull()\n        elif column_name == \"fsca\":\n            mask = (y > 100) | y.isnull()\n        else:\n            mask = y.isnull()\n        # Perform interpolation\n        new_y = np.interp(x, x[~mask], y[~mask])\n\n        if np.any(new_y.isnull()):\n            raise ValueError(\"Single group: shouldn't have null values here\")\n\n        # Replace missing values with interpolated values\n        df[column_name] = new_y\n        return df\n\n    # Group the data by 'lat' and 'lon' and apply interpolation for each column\n#     grouped = df.groupby(['lat', 'lon'])\n#     filled_data = pd.DataFrame()\n#     for name, group in grouped:\n#         print(f\"Start filling missing values for {name}\")\n#         interpolate_missing_inplace(group, 'SWE')\n#         filled_data = pd.concat([filled_data, group], axis=0)\n\n#     filled_data = filled_data.reset_index()\n\n#     if any(filled_data['SWE'] > 240):\n#         raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n    # Create a new DataFrame to store the time series data for each location\n    result = pd.DataFrame()\n\n    # Define the number of days to consider (7 days in this case)\n    num_days = 7\n\n    grouped = df.groupby(['lat', 'lon'])\n    for name, group in grouped:\n        group = group.set_index('date')\n        for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n                new_column_name = f'{target_col}_{day}'\n                group[new_column_name] = group[target_col].shift(day)\n        result = pd.concat([result, group], axis=0)\n\n    # Reset the index of the result DataFrame\n    result = result.reset_index()\n    result.to_csv(output_csv, index=False)\n    print(f\"New data is saved to {output_csv}\")\n    shutil.copy(output_csv, backup_time_series_csv_path)\n    print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    columns_to_be_cumulated = [\n      \"SWE\", \n      \"Flag\", \n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv)\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2019-10-01')\n    end_date = pd.to_datetime('2022-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(group):\n        for column in columns_to_be_cumulated:\n          x = group.index\n          y = group[column]\n          \n\t\t  # Create a mask for missing values\n          if column == \"SWE\":\n          \tmask = y > 240\n            # Perform interpolation\n          \tnew_y = np.interp(x, x[~mask], y[~mask])\n\n          \tif np.any(new_y > 240):\n          \t    raise ValueError(\"SWE group: shouldn't have values > 240 here\")\n\n          \t# Replace missing values with interpolated values\n          \tgroup[column] = new_y\n          elif column == \"fsca\":\n            mask = y > 100\n            # Perform interpolation\n            new_y = np.interp(x, x[~mask], y[~mask])\n            \n            if np.any(new_y > 100):\n                raise ValueError(\"fsca group: shouldn't have values > 240 here\")\n\n          \t# Replace missing values with interpolated values\n            group[column] = new_y\n        \n        return group\n\n    \n    df = grouped.apply(interpolate_missing_inplace)\n        \n    print(\"All the columns should have missing values filled: \", df.describe())    \n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df.describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n    \n\n\n# Uncomment this line to execute the 'convert_to_time_series' function\nconvert_to_time_series(current_ready_csv_path, target_time_series_csv_path)\n\n# Uncomment this line to execute the 'add_cumulative_columns' function\nadd_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path)\n",
  "history_output" : "today date = 2023-11-29\ntest start date:  2022-11-12\ntest end date:  2023-10-07\n/home/chetana\n2022275\n/home/chetana/gw-workspace/GqLj39g75OVy/convert_to_time_series.py:60: DtypeWarning: Columns (6,7) have mixed types. Specify dtype option on import or set low_memory=False.\n  df = pd.read_csv(input_csv)\nAll current columns:  Index(['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n       'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n       'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n       'fsca'],\n      dtype='object')\nNew data is saved to /home/chetana/gridmet_test_run/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v1.csv\nFile is backed up to /home/chetana/gridmet_test_run/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v1_bak.csv\nthe column statistics from time series before cumulative:                  lat           lon            SWE           Flag  \\\ncount  1.152303e+06  1.152303e+06  951111.000000  951111.000000   \nmean   4.157867e+01 -1.141048e+02      50.488570     243.446459   \nstd    3.656259e+00  5.458877e+00      95.498542       5.316203   \nmin    3.335825e+01 -1.234486e+02       0.000000     241.000000   \n25%    3.870816e+01 -1.196577e+02       0.000000     241.000000   \n50%    4.093632e+01 -1.133964e+02       0.000000     241.000000   \n75%    4.461398e+01 -1.100008e+02      35.000000     241.000000   \nmax    4.897107e+01 -1.051948e+02     255.000000     255.000000   \n           swe_value  potential_evapotranspiration  precipitation_amount  \\\ncount  938091.000000                  1.022700e+06          1.022700e+06   \nmean        3.333796                  3.943372e+00          2.689152e+00   \nstd         5.245389                  2.478664e+00          7.456401e+00   \nmin         0.000000                  0.000000e+00          0.000000e+00   \n25%         0.000000                  1.900000e+00          0.000000e+00   \n50%         0.000000                  3.500000e+00          0.000000e+00   \n75%         6.300000                  5.800000e+00          2.200000e+00   \nmax        22.600000                  1.510000e+01          5.042000e+02   \n       relative_humidity_rmax  relative_humidity_rmin  air_temperature_tmmn  \\\ncount            1.022700e+06            1.022700e+06          1.022700e+06   \nmean             7.123571e+01            3.578010e+01          2.720187e+02   \nstd              2.030150e+01            1.888091e+01          8.384982e+00   \nmin              8.200000e+00            1.000000e+00          2.328000e+02   \n25%              5.560000e+01            2.130000e+01          2.663000e+02   \n50%              7.240000e+01            3.160000e+01          2.722000e+02   \n75%              8.820000e+01            4.740000e+01          2.784000e+02   \nmax              1.000000e+02            1.000000e+02          2.983000e+02   \n       air_temperature_tmmx  mean_vapor_pressure_deficit    wind_speed  \\\ncount          1.022700e+06                 1.022700e+06  1.022700e+06   \nmean           2.837481e+02                 6.258550e-01  4.214964e+00   \nstd            9.912702e+00                 5.233133e-01  2.043559e+00   \nmin            2.444000e+02                 0.000000e+00  5.000000e-01   \n25%            2.759000e+02                 2.100000e-01  2.800000e+00   \n50%            2.831000e+02                 4.700000e-01  3.700000e+00   \n75%            2.920000e+02                 9.300000e-01  5.200000e+00   \nmax            3.144000e+02                 3.870000e+00  1.860000e+01   \n           elevation         slope      curvature         aspect  \\\ncount  951111.000000  1.152303e+06  951111.000000  951111.000000   \nmean     2400.250366  8.998028e+01   -3978.775967     173.841000   \nstd       657.753668  1.547512e-02    4436.407717     102.096778   \nmin       758.443700  8.990720e+01  -19177.676000       0.415929   \n25%      1948.688100  8.997688e+01   -6479.865000     101.168440   \n50%      2468.187000  8.998582e+01   -3720.545200     169.149630   \n75%      2924.415500  8.999000e+01    -657.843500     254.958680   \nmax      3823.384800  8.999648e+01    9069.726000     358.656280   \n            eastness      northness           fsca          SWE_1  \\\ncount  951111.000000  951111.000000  802191.000000  950868.000000   \nmean        0.061198      -0.052610     126.431217      50.494015   \nstd         0.524249       0.636747     117.142750      95.502541   \nmin        -0.785344      -0.785369       0.000000       0.000000   \n25%        -0.398911      -0.735620       0.000000       0.000000   \n50%         0.140316      -0.193049      69.000000       0.000000   \n75%         0.577196       0.649554     250.000000      35.000000   \nmax         0.785398       0.785385     255.000000     255.000000   \n              Flag_1  air_temperature_tmmn_1  potential_evapotranspiration_1  \\\ncount  950868.000000            1.022457e+06                    1.022457e+06   \nmean      243.446731            2.720198e+02                    3.944135e+00   \nstd         5.316436            8.385519e+00                    2.478454e+00   \nmin       241.000000            2.328000e+02                    0.000000e+00   \n25%       241.000000            2.663000e+02                    1.900000e+00   \n50%       241.000000            2.722000e+02                    3.500000e+00   \n75%       241.000000            2.784000e+02                    5.800000e+00   \nmax       255.000000            2.983000e+02                    1.510000e+01   \n       mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\ncount                   1.022457e+06              1.022457e+06   \nmean                    6.259842e-01              7.122990e+01   \nstd                     5.233073e-01              2.030013e+01   \nmin                     0.000000e+00              8.200000e+00   \n25%                     2.100000e-01              5.560000e+01   \n50%                     4.700000e-01              7.240000e+01   \n75%                     9.300000e-01              8.820000e+01   \nmax                     3.870000e+00              1.000000e+02   \n       relative_humidity_rmin_1  precipitation_amount_1  \\\ncount              1.022457e+06            1.022457e+06   \nmean               3.577147e+01            2.684194e+00   \nstd                1.887389e+01            7.433182e+00   \nmin                1.000000e+00            0.000000e+00   \n25%                2.130000e+01            0.000000e+00   \n50%                3.160000e+01            0.000000e+00   \n75%                4.740000e+01            2.200000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_1  wind_speed_1         fsca_1          SWE_2  \\\ncount            1.022457e+06  1.022457e+06  802191.000000  950625.000000   \nmean             2.837504e+02  4.214878e+00     126.431217      50.497704   \nstd              9.912640e+00  2.043577e+00     117.142750      95.505929   \nmin              2.444000e+02  5.000000e-01       0.000000       0.000000   \n25%              2.759000e+02  2.800000e+00       0.000000       0.000000   \n50%              2.831000e+02  3.700000e+00      69.000000       0.000000   \n75%              2.920000e+02  5.200000e+00     250.000000      35.000000   \nmax              3.144000e+02  1.860000e+01     255.000000     255.000000   \n              Flag_2  air_temperature_tmmn_2  potential_evapotranspiration_2  \\\ncount  950625.000000            1.022214e+06                    1.022214e+06   \nmean      243.446944            2.720209e+02                    3.944851e+00   \nstd         5.316618            8.385815e+00                    2.478297e+00   \nmin       241.000000            2.328000e+02                    0.000000e+00   \n25%       241.000000            2.663000e+02                    1.900000e+00   \n50%       241.000000            2.722000e+02                    3.500000e+00   \n75%       241.000000            2.784000e+02                    5.800000e+00   \nmax       255.000000            2.983000e+02                    1.510000e+01   \n       mean_vapor_pressure_deficit_2  relative_humidity_rmax_2  \\\ncount                   1.022214e+06              1.022214e+06   \nmean                    6.261075e-01              7.122478e+01   \nstd                     5.233070e-01              2.029937e+01   \nmin                     0.000000e+00              8.200000e+00   \n25%                     2.100000e-01              5.560000e+01   \n50%                     4.700000e-01              7.230000e+01   \n75%                     9.300000e-01              8.820000e+01   \nmax                     3.870000e+00              1.000000e+02   \n       relative_humidity_rmin_2  precipitation_amount_2  \\\ncount              1.022214e+06            1.022214e+06   \nmean               3.576392e+01            2.680426e+00   \nstd                1.886841e+01            7.420497e+00   \nmin                1.000000e+00            0.000000e+00   \n25%                2.130000e+01            0.000000e+00   \n50%                3.160000e+01            0.000000e+00   \n75%                4.730000e+01            2.200000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_2  wind_speed_2         fsca_2          SWE_3  \\\ncount            1.022214e+06  1.022214e+06  802191.000000  950382.000000   \nmean             2.837528e+02  4.214727e+00     126.431217      50.501449   \nstd              9.912443e+00  2.043506e+00     117.142750      95.509949   \nmin              2.444000e+02  5.000000e-01       0.000000       0.000000   \n25%              2.759000e+02  2.800000e+00       0.000000       0.000000   \n50%              2.831000e+02  3.700000e+00      69.000000       0.000000   \n75%              2.920000e+02  5.200000e+00     250.000000      35.000000   \nmax              3.144000e+02  1.860000e+01     255.000000     255.000000   \n              Flag_3  air_temperature_tmmn_3  potential_evapotranspiration_3  \\\ncount  950382.000000            1.021971e+06                    1.021971e+06   \nmean      243.447186            2.720225e+02                    3.945581e+00   \nstd         5.316826            8.385741e+00                    2.478126e+00   \nmin       241.000000            2.328000e+02                    0.000000e+00   \n25%       241.000000            2.663000e+02                    1.900000e+00   \n50%       241.000000            2.722000e+02                    3.500000e+00   \n75%       241.000000            2.784000e+02                    5.800000e+00   \nmax       255.000000            2.983000e+02                    1.510000e+01   \n       mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\ncount                   1.021971e+06              1.021971e+06   \nmean                    6.262307e-01              7.121986e+01   \nstd                     5.233067e-01              2.029864e+01   \nmin                     0.000000e+00              8.200000e+00   \n25%                     2.100000e-01              5.550000e+01   \n50%                     4.700000e-01              7.230000e+01   \n75%                     9.300000e-01              8.820000e+01   \nmax                     3.870000e+00              1.000000e+02   \n       relative_humidity_rmin_3  precipitation_amount_3  \\\ncount              1.021971e+06            1.021971e+06   \nmean               3.575711e+01            2.678322e+00   \nstd                1.886382e+01            7.414806e+00   \nmin                1.000000e+00            0.000000e+00   \n25%                2.130000e+01            0.000000e+00   \n50%                3.160000e+01            0.000000e+00   \n75%                4.730000e+01            2.200000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_3  wind_speed_3         fsca_3          SWE_4  \\\ncount            1.021971e+06  1.021971e+06  802191.000000  950139.000000   \nmean             2.837556e+02  4.214655e+00     126.431217      50.500756   \nstd              9.911805e+00  2.043569e+00     117.142750      95.509284   \nmin              2.444000e+02  5.000000e-01       0.000000       0.000000   \n25%              2.759000e+02  2.800000e+00       0.000000       0.000000   \n50%              2.831000e+02  3.700000e+00      69.000000       0.000000   \n75%              2.920000e+02  5.200000e+00     250.000000      35.000000   \nmax              3.144000e+02  1.860000e+01     255.000000     255.000000   \n              Flag_4  air_temperature_tmmn_4  potential_evapotranspiration_4  \\\ncount  950139.000000            1.021728e+06                    1.021728e+06   \nmean      243.447135            2.720240e+02                    3.946313e+00   \nstd         5.316781            8.385866e+00                    2.477953e+00   \nmin       241.000000            2.328000e+02                    0.000000e+00   \n25%       241.000000            2.663000e+02                    1.900000e+00   \n50%       241.000000            2.722000e+02                    3.500000e+00   \n75%       241.000000            2.784000e+02                    5.800000e+00   \nmax       255.000000            2.983000e+02                    1.510000e+01   \n       mean_vapor_pressure_deficit_4  relative_humidity_rmax_4  \\\ncount                   1.021728e+06              1.021728e+06   \nmean                    6.263553e-01              7.121508e+01   \nstd                     5.233051e-01              2.029788e+01   \nmin                     0.000000e+00              8.200000e+00   \n25%                     2.100000e-01              5.550000e+01   \n50%                     4.700000e-01              7.230000e+01   \n75%                     9.300000e-01              8.820000e+01   \nmax                     3.870000e+00              1.000000e+02   \n       relative_humidity_rmin_4  precipitation_amount_4  \\\ncount              1.021728e+06            1.021728e+06   \nmean               3.575005e+01            2.676063e+00   \nstd                1.885871e+01            7.407503e+00   \nmin                1.000000e+00            0.000000e+00   \n25%                2.130000e+01            0.000000e+00   \n50%                3.160000e+01            0.000000e+00   \n75%                4.730000e+01            2.200000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_4  wind_speed_4         fsca_4          SWE_5  \\\ncount            1.021728e+06  1.021728e+06  802191.000000  949896.000000   \nmean             2.837582e+02  4.214480e+00     126.431217      50.500290   \nstd              9.911412e+00  2.043561e+00     117.142750      95.508834   \nmin              2.444000e+02  5.000000e-01       0.000000       0.000000   \n25%              2.759000e+02  2.800000e+00       0.000000       0.000000   \n50%              2.831000e+02  3.700000e+00      69.000000       0.000000   \n75%              2.920000e+02  5.200000e+00     250.000000      35.000000   \nmax              3.144000e+02  1.860000e+01     255.000000     255.000000   \n              Flag_5  air_temperature_tmmn_5  potential_evapotranspiration_5  \\\ncount  949896.000000            1.021485e+06                    1.021485e+06   \nmean      243.447097            2.720251e+02                    3.946977e+00   \nstd         5.316749            8.386260e+00                    2.477838e+00   \nmin       241.000000            2.328000e+02                    0.000000e+00   \n25%       241.000000            2.663000e+02                    1.900000e+00   \n50%       241.000000            2.722000e+02                    3.500000e+00   \n75%       241.000000            2.784000e+02                    5.800000e+00   \nmax       255.000000            2.983000e+02                    1.510000e+01   \n       mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\ncount                   1.021485e+06              1.021485e+06   \nmean                    6.264743e-01              7.121038e+01   \nstd                     5.233079e-01              2.029716e+01   \nmin                     0.000000e+00              8.200000e+00   \n25%                     2.100000e-01              5.550000e+01   \n50%                     4.700000e-01              7.230000e+01   \n75%                     9.300000e-01              8.820000e+01   \nmax                     3.870000e+00              1.000000e+02   \n       relative_humidity_rmin_5  precipitation_amount_5  \\\ncount              1.021485e+06            1.021485e+06   \nmean               3.574323e+01            2.671586e+00   \nstd                1.885367e+01            7.391348e+00   \nmin                1.000000e+00            0.000000e+00   \n25%                2.130000e+01            0.000000e+00   \n50%                3.160000e+01            0.000000e+00   \n75%                4.730000e+01            2.200000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_5  wind_speed_5         fsca_5          SWE_6  \\\ncount            1.021485e+06  1.021485e+06  802191.000000  949653.000000   \nmean             2.837604e+02  4.213970e+00     126.431217      50.495453   \nstd              9.911360e+00  2.043077e+00     117.142750      95.505265   \nmin              2.444000e+02  5.000000e-01       0.000000       0.000000   \n25%              2.759000e+02  2.800000e+00       0.000000       0.000000   \n50%              2.831000e+02  3.700000e+00      69.000000       0.000000   \n75%              2.920000e+02  5.200000e+00     250.000000      35.000000   \nmax              3.144000e+02  1.860000e+01     255.000000     255.000000   \n              Flag_6  air_temperature_tmmn_6  potential_evapotranspiration_6  \\\ncount  949653.000000            1.021242e+06                    1.021242e+06   \nmean      243.446839            2.720261e+02                    3.947557e+00   \nstd         5.316528            8.386646e+00                    2.477784e+00   \nmin       241.000000            2.328000e+02                    0.000000e+00   \n25%       241.000000            2.663000e+02                    1.900000e+00   \n50%       241.000000            2.722000e+02                    3.500000e+00   \n75%       241.000000            2.784000e+02                    5.800000e+00   \nmax       255.000000            2.983000e+02                    1.510000e+01   \n       mean_vapor_pressure_deficit_6  relative_humidity_rmax_6  \\\ncount                   1.021242e+06              1.021242e+06   \nmean                    6.265698e-01              7.120807e+01   \nstd                     5.233230e-01              2.029666e+01   \nmin                     0.000000e+00              8.200000e+00   \n25%                     2.100000e-01              5.550000e+01   \n50%                     4.700000e-01              7.230000e+01   \n75%                     9.300000e-01              8.820000e+01   \nmax                     3.870000e+00              1.000000e+02   \n       relative_humidity_rmin_6  precipitation_amount_6  \\\ncount              1.021242e+06            1.021242e+06   \nmean               3.573869e+01            2.669114e+00   \nstd                1.885002e+01            7.382468e+00   \nmin                1.000000e+00            0.000000e+00   \n25%                2.130000e+01            0.000000e+00   \n50%                3.160000e+01            0.000000e+00   \n75%                4.730000e+01            2.200000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_6  wind_speed_6         fsca_6          SWE_7  \\\ncount            1.021242e+06  1.021242e+06  802191.000000  949410.000000   \nmean             2.837624e+02  4.213803e+00     126.431217      50.489223   \nstd              9.911429e+00  2.043086e+00     117.142750      95.499980   \nmin              2.444000e+02  5.000000e-01       0.000000       0.000000   \n25%              2.759000e+02  2.800000e+00       0.000000       0.000000   \n50%              2.831000e+02  3.700000e+00      69.000000       0.000000   \n75%              2.920000e+02  5.200000e+00     250.000000      35.000000   \nmax              3.144000e+02  1.860000e+01     255.000000     255.000000   \n              Flag_7  air_temperature_tmmn_7  potential_evapotranspiration_7  \\\ncount  949410.000000            1.020999e+06                    1.020999e+06   \nmean      243.446477            2.720272e+02                    3.948178e+00   \nstd         5.316218            8.386879e+00                    2.477719e+00   \nmin       241.000000            2.328000e+02                    0.000000e+00   \n25%       241.000000            2.663000e+02                    1.900000e+00   \n50%       241.000000            2.722000e+02                    3.500000e+00   \n75%       241.000000            2.784000e+02                    5.800000e+00   \nmax       255.000000            2.983000e+02                    1.510000e+01   \n       mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\ncount                   1.020999e+06              1.020999e+06   \nmean                    6.266652e-01              7.120526e+01   \nstd                     5.233356e-01              2.029610e+01   \nmin                     0.000000e+00              8.200000e+00   \n25%                     2.100000e-01              5.550000e+01   \n50%                     4.700000e-01              7.230000e+01   \n75%                     9.300000e-01              8.820000e+01   \nmax                     3.870000e+00              1.000000e+02   \n       relative_humidity_rmin_7  precipitation_amount_7  \\\ncount              1.020999e+06            1.020999e+06   \nmean               3.573404e+01            2.667432e+00   \nstd                1.884648e+01            7.375934e+00   \nmin                1.000000e+00            0.000000e+00   \n25%                2.130000e+01            0.000000e+00   \n50%                3.160000e+01            0.000000e+00   \n75%                4.730000e+01            2.200000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_7  wind_speed_7         fsca_7  \ncount            1.020999e+06  1.020999e+06  802191.000000  \nmean             2.837644e+02  4.213598e+00     126.431217  \nstd              9.911386e+00  2.042980e+00     117.142750  \nmin              2.444000e+02  5.000000e-01       0.000000  \n25%              2.759000e+02  2.800000e+00       0.000000  \n50%              2.831000e+02  3.700000e+00      69.000000  \n75%              2.920000e+02  5.200000e+00     250.000000  \nmax              3.144000e+02  1.860000e+01     255.000000  \nThis is our unique years [2018 2019 2020 2021 2022]\nhow many rows are left in the three water years?                  lat            lon            SWE           Flag  \\\ncount  797888.000000  797888.000000  713496.000000  713496.000000   \nmean       41.615630    -114.130327      50.335017     243.447882   \nstd         3.643291       5.447167      95.572211       5.317320   \nmin        33.358254    -123.448583       0.000000     241.000000   \n25%        38.911155    -119.666675       0.000000     241.000000   \n50%        40.939712    -113.585082       0.000000     241.000000   \n75%        44.613976    -110.000804      35.000000     241.000000   \nmax        48.971066    -105.194817     255.000000     255.000000   \n           swe_value  potential_evapotranspiration  precipitation_amount  \\\ncount  712845.000000                 767200.000000         767200.000000   \nmean        2.661918                      4.024112              2.485314   \nstd         3.989611                      2.504920              7.038737   \nmin         0.000000                      0.000000              0.000000   \n25%         0.000000                      1.900000              0.000000   \n50%         0.000000                      3.600000              0.000000   \n75%         5.900000                      5.900000              2.000000   \nmax        14.300000                     15.100000            504.200000   \n       relative_humidity_rmax  relative_humidity_rmin  air_temperature_tmmn  \\\ncount           767200.000000           767200.000000         767200.000000   \nmean                70.041987               35.022455            272.261304   \nstd                 20.604479               18.817779              8.334684   \nmin                  8.200000                1.000000            238.000000   \n25%                 53.900000               20.600000            266.600000   \n50%                 71.000000               30.900000            272.300000   \n75%                 87.100000               46.400000            278.600000   \nmax                100.000000              100.000000            298.300000   \n       air_temperature_tmmx  mean_vapor_pressure_deficit     wind_speed  \\\ncount         767200.000000                767200.000000  767200.000000   \nmean             284.033753                     0.647127       4.221713   \nstd                9.892099                     0.537530       2.039676   \nmin              248.700000                     0.000000       0.500000   \n25%              276.200000                     0.220000       2.800000   \n50%              283.300000                     0.480000       3.800000   \n75%              292.300000                     0.960000       5.200000   \nmax              314.400000                     3.870000      18.600000   \n           elevation          slope      curvature         aspect  \\\ncount  713496.000000  797888.000000  713496.000000  713496.000000   \nmean     2400.250366      89.980194   -3978.775967     173.841000   \nstd       657.753783       0.015543    4436.408493     102.096796   \nmin       758.443700      89.907196  -19177.676000       0.415929   \n25%      1948.688100      89.976875   -6479.865000     101.168440   \n50%      2468.187000      89.985710   -3720.545200     169.149630   \n75%      2924.415500      89.989990    -657.843500     254.958680   \nmax      3823.384800      89.996475    9069.726000     358.656280   \n            eastness      northness           fsca          SWE_1  \\\ncount  713496.000000  713496.000000  535773.000000  713496.000000   \nmean        0.061198      -0.052610     122.514533      50.326516   \nstd         0.524249       0.636747     117.046903      95.565266   \nmin        -0.785344      -0.785369       0.000000       0.000000   \n25%        -0.398911      -0.735620       0.000000       0.000000   \n50%         0.140316      -0.193049      64.000000       0.000000   \n75%         0.577196       0.649554     250.000000      35.000000   \nmax         0.785398       0.785385     255.000000     255.000000   \n              Flag_1  air_temperature_tmmn_1  potential_evapotranspiration_1  \\\ncount  713496.000000           767200.000000                   767200.000000   \nmean      243.447411              272.259492                        4.024137   \nstd         5.316916                8.334653                        2.505176   \nmin       241.000000              238.000000                        0.000000   \n25%       241.000000              266.600000                        1.900000   \n50%       241.000000              272.300000                        3.600000   \n75%       241.000000              278.600000                        5.900000   \nmax       255.000000              298.300000                       15.100000   \n       mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\ncount                  767200.000000             767200.000000   \nmean                        0.647076                 70.040419   \nstd                         0.537543                 20.604568   \nmin                         0.000000                  8.200000   \n25%                         0.220000                 53.900000   \n50%                         0.480000                 71.000000   \n75%                         0.960000                 87.100000   \nmax                         3.870000                100.000000   \n       relative_humidity_rmin_1  precipitation_amount_1  \\\ncount             767200.000000           767200.000000   \nmean                  35.022552                2.484736   \nstd                   18.818393                7.038488   \nmin                    1.000000                0.000000   \n25%                   20.600000                0.000000   \n50%                   30.900000                0.000000   \n75%                   46.400000                2.000000   \nmax                  100.000000              504.200000   \n       air_temperature_tmmx_1   wind_speed_1         fsca_1          SWE_2  \\\ncount           767200.000000  767200.000000  536016.000000  713496.000000   \nmean               284.031583       4.222192     122.512431      50.320798   \nstd                  9.892455       2.040115     117.050025      95.560648   \nmin                248.700000       0.500000       0.000000       0.000000   \n25%                276.200000       2.800000       0.000000       0.000000   \n50%                283.300000       3.800000      64.000000       0.000000   \n75%                292.300000       5.200000     250.000000      35.000000   \nmax                314.400000      18.600000     255.000000     255.000000   \n              Flag_2  air_temperature_tmmn_2  potential_evapotranspiration_2  \\\ncount  713496.000000           767200.000000                   767200.000000   \nmean      243.447097              272.257565                        4.023965   \nstd         5.316648                8.334572                        2.505408   \nmin       241.000000              238.000000                        0.000000   \n25%       241.000000              266.600000                        1.900000   \n50%       241.000000              272.300000                        3.600000   \n75%       241.000000              278.600000                        5.900000   \nmax       255.000000              298.300000                       15.100000   \n       mean_vapor_pressure_deficit_2  relative_humidity_rmax_2  \\\ncount                  767200.000000             767200.000000   \nmean                        0.646991                 70.041094   \nstd                         0.537558                 20.604445   \nmin                         0.000000                  8.200000   \n25%                         0.220000                 53.900000   \n50%                         0.480000                 71.000000   \n75%                         0.960000                 87.100000   \nmax                         3.870000                100.000000   \n       relative_humidity_rmin_2  precipitation_amount_2  \\\ncount             767200.000000           767200.000000   \nmean                  35.025048                2.484644   \nstd                   18.819945                7.038449   \nmin                    1.000000                0.000000   \n25%                   20.600000                0.000000   \n50%                   30.900000                0.000000   \n75%                   46.400000                2.000000   \nmax                  100.000000              504.200000   \n       air_temperature_tmmx_2   wind_speed_2         fsca_2          SWE_3  \\\ncount           767200.000000  767200.000000  536259.000000  713496.000000   \nmean               284.028983       4.222740     122.521101      50.318296   \nstd                  9.892864       2.040883     117.053468      95.558628   \nmin                248.700000       0.500000       0.000000       0.000000   \n25%                276.200000       2.800000       0.000000       0.000000   \n50%                283.300000       3.800000      64.000000       0.000000   \n75%                292.300000       5.200000     250.000000      35.000000   \nmax                314.400000      18.600000     255.000000     255.000000   \n             Flag_3  air_temperature_tmmn_3  potential_evapotranspiration_3  \\\ncount  713496.00000           767200.000000                   767200.000000   \nmean      243.44696              272.255493                        4.023631   \nstd         5.31653                8.334143                        2.505544   \nmin       241.00000              238.000000                        0.000000   \n25%       241.00000              266.600000                        1.900000   \n50%       241.00000              272.300000                        3.600000   \n75%       241.00000              278.600000                        5.900000   \nmax       255.00000              298.300000                       15.100000   \n       mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\ncount                  767200.000000             767200.000000   \nmean                        0.646874                 70.045193   \nstd                         0.537558                 20.604698   \nmin                         0.000000                  8.200000   \n25%                         0.220000                 53.900000   \n50%                         0.480000                 71.000000   \n75%                         0.960000                 87.100000   \nmax                         3.870000                100.000000   \n       relative_humidity_rmin_3  precipitation_amount_3  \\\ncount             767200.000000           767200.000000   \nmean                  35.029034                2.484949   \nstd                   18.822219                7.038722   \nmin                    1.000000                0.000000   \n25%                   20.600000                0.000000   \n50%                   30.900000                0.000000   \n75%                   46.400000                2.000000   \nmax                  100.000000              504.200000   \n       air_temperature_tmmx_3   wind_speed_3         fsca_3          SWE_4  \\\ncount           767200.000000  767200.000000  536502.000000  713496.000000   \nmean               284.026528       4.223269     122.526248      50.311148   \nstd                  9.892944       2.041410     117.056690      95.552854   \nmin                248.700000       0.500000       0.000000       0.000000   \n25%                276.200000       2.800000       0.000000       0.000000   \n50%                283.300000       3.800000      64.000000       0.000000   \n75%                292.300000       5.200000     250.000000      35.000000   \nmax                314.400000      18.600000     255.000000     255.000000   \n              Flag_4  air_temperature_tmmn_4  potential_evapotranspiration_4  \\\ncount  713496.000000           767200.000000                   767200.000000   \nmean      243.446567              272.253844                        4.023396   \nstd         5.316194                8.333654                        2.505659   \nmin       241.000000              238.000000                        0.000000   \n25%       241.000000              266.600000                        1.900000   \n50%       241.000000              272.300000                        3.600000   \n75%       241.000000              278.600000                        5.900000   \nmax       255.000000              298.300000                       15.100000   \n       mean_vapor_pressure_deficit_4  relative_humidity_rmax_4  \\\ncount                  767200.000000             767200.000000   \nmean                        0.646762                 70.048777   \nstd                         0.537535                 20.604025   \nmin                         0.000000                  8.200000   \n25%                         0.220000                 53.900000   \n50%                         0.480000                 71.000000   \n75%                         0.960000                 87.100000   \nmax                         3.870000                100.000000   \n       relative_humidity_rmin_4  precipitation_amount_4  \\\ncount             767200.000000           767200.000000   \nmean                  35.032820                2.485223   \nstd                   18.823806                7.038887   \nmin                    1.000000                0.000000   \n25%                   20.600000                0.000000   \n50%                   30.900000                0.000000   \n75%                   46.400000                2.000000   \nmax                  100.000000              504.200000   \n       air_temperature_tmmx_4   wind_speed_4         fsca_4         SWE_5  \\\ncount           767200.000000  767200.000000  536745.000000  713496.00000   \nmean               284.024386       4.223736     122.526909      50.31222   \nstd                  9.892878       2.041711     117.059882      95.55372   \nmin                248.700000       0.500000       0.000000       0.00000   \n25%                276.200000       2.800000       0.000000       0.00000   \n50%                283.300000       3.800000      64.000000       0.00000   \n75%                292.300000       5.200000     250.000000      35.00000   \nmax                314.400000      18.600000     255.000000     255.00000   \n              Flag_5  air_temperature_tmmn_5  potential_evapotranspiration_5  \\\ncount  713496.000000           767200.000000                   767200.000000   \nmean      243.446626              272.252317                        4.023200   \nstd         5.316244                8.333121                        2.505814   \nmin       241.000000              238.000000                        0.000000   \n25%       241.000000              266.600000                        1.900000   \n50%       241.000000              272.300000                        3.600000   \n75%       241.000000              278.600000                        5.900000   \nmax       255.000000              298.300000                       15.100000   \n       mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\ncount                  767200.000000             767200.000000   \nmean                        0.646653                 70.052329   \nstd                         0.537511                 20.603616   \nmin                         0.000000                  8.200000   \n25%                         0.220000                 53.900000   \n50%                         0.480000                 71.000000   \n75%                         0.960000                 87.100000   \nmax                         3.870000                100.000000   \n       relative_humidity_rmin_5  precipitation_amount_5  \\\ncount             767200.000000           767200.000000   \nmean                  35.036577                2.485695   \nstd                   18.825852                7.039300   \nmin                    1.000000                0.000000   \n25%                   20.600000                0.000000   \n50%                   30.900000                0.000000   \n75%                   46.400000                2.000000   \nmax                  100.000000              504.200000   \n       air_temperature_tmmx_5   wind_speed_5         fsca_5          SWE_6  \\\ncount           767200.000000  767200.000000  536988.000000  713496.000000   \nmean               284.022421       4.224254     122.525898      50.310791   \nstd                  9.892795       2.041994     117.063270      95.552565   \nmin                248.700000       0.500000       0.000000       0.000000   \n25%                276.200000       2.800000       0.000000       0.000000   \n50%                283.300000       3.800000      64.000000       0.000000   \n75%                292.300000       5.200000     250.000000      35.000000   \nmax                314.400000      18.600000     255.000000     255.000000   \n              Flag_6  air_temperature_tmmn_6  potential_evapotranspiration_6  \\\ncount  713496.000000           767200.000000                   767200.000000   \nmean      243.446548              272.250904                        4.022913   \nstd         5.316177                8.332727                        2.505968   \nmin       241.000000              238.000000                        0.000000   \n25%       241.000000              266.600000                        1.900000   \n50%       241.000000              272.300000                        3.600000   \n75%       241.000000              278.600000                        5.900000   \nmax       255.000000              298.300000                       15.100000   \n       mean_vapor_pressure_deficit_6  relative_humidity_rmax_6  \\\ncount                  767200.000000             767200.000000   \nmean                        0.646554                 70.055568   \nstd                         0.537508                 20.603884   \nmin                         0.000000                  8.200000   \n25%                         0.220000                 53.900000   \n50%                         0.480000                 71.000000   \n75%                         0.960000                 87.200000   \nmax                         3.870000                100.000000   \n       relative_humidity_rmin_6  precipitation_amount_6  \\\ncount             767200.000000           767200.000000   \nmean                  35.040710                2.486229   \nstd                   18.828492                7.039703   \nmin                    1.000000                0.000000   \n25%                   20.600000                0.000000   \n50%                   30.900000                0.000000   \n75%                   46.400000                2.000000   \nmax                  100.000000              504.200000   \n       air_temperature_tmmx_6   wind_speed_6         fsca_6          SWE_7  \\\ncount           767200.000000  767200.000000  537231.000000  713496.000000   \nmean               284.020433       4.224612     122.516556      50.315437   \nstd                  9.892841       2.042310     117.066434      95.556318   \nmin                248.700000       0.500000       0.000000       0.000000   \n25%                276.200000       2.800000       0.000000       0.000000   \n50%                283.300000       3.800000      64.000000       0.000000   \n75%                292.300000       5.200000     250.000000      35.000000   \nmax                314.400000      18.600000     255.000000     255.000000   \n              Flag_7  air_temperature_tmmn_7  potential_evapotranspiration_7  \\\ncount  713496.000000           767200.000000                   767200.000000   \nmean      243.446803              272.249559                        4.022624   \nstd         5.316396                8.332266                        2.506123   \nmin       241.000000              238.000000                        0.000000   \n25%       241.000000              266.600000                        1.900000   \n50%       241.000000              272.300000                        3.600000   \n75%       241.000000              278.600000                        5.900000   \nmax       255.000000              298.300000                       15.100000   \n       mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\ncount                  767200.000000             767200.000000   \nmean                        0.646440                 70.059453   \nstd                         0.537498                 20.604642   \nmin                         0.000000                  8.200000   \n25%                         0.220000                 53.900000   \n50%                         0.480000                 71.000000   \n75%                         0.960000                 87.200000   \nmax                         3.870000                100.000000   \n       relative_humidity_rmin_7  precipitation_amount_7  \\\ncount             767200.000000           767200.000000   \nmean                  35.045342                2.486815   \nstd                   18.831274                7.040030   \nmin                    1.000000                0.000000   \n25%                   20.600000                0.000000   \n50%                   30.900000                0.000000   \n75%                   46.400000                2.000000   \nmax                  100.000000              504.200000   \n       air_temperature_tmmx_7   wind_speed_7         fsca_7  \ncount           767200.000000  767200.000000  537474.000000  \nmean               284.018453       4.225047     122.506825  \nstd                  9.892653       2.042543     117.069695  \nmin                248.700000       0.500000       0.000000  \n25%                276.200000       2.800000       0.000000  \n50%                283.300000       3.800000      64.000000  \n75%                292.300000       5.200000     250.000000  \nmax                314.400000      18.600000     255.000000  \nhow many groups?  <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7f07ed9721c0>\nAll the columns should have missing values filled:                   lat            lon            SWE           Flag  \\\ncount  797888.000000  797888.000000  713496.000000  713496.000000   \nmean       41.615630    -114.130327       7.053092     243.447882   \nstd         3.643291       5.447167      17.546653       5.317320   \nmin        33.358254    -123.448583       0.000000     241.000000   \n25%        38.911155    -119.666675       0.000000     241.000000   \n50%        40.939712    -113.585082       0.000000     241.000000   \n75%        44.613976    -110.000804       0.000000     241.000000   \nmax        48.971066    -105.194817     197.000000     255.000000   \n           swe_value  potential_evapotranspiration  precipitation_amount  \\\ncount  712845.000000                 767200.000000         767200.000000   \nmean        2.661918                      4.024112              2.485314   \nstd         3.989611                      2.504920              7.038737   \nmin         0.000000                      0.000000              0.000000   \n25%         0.000000                      1.900000              0.000000   \n50%         0.000000                      3.600000              0.000000   \n75%         5.900000                      5.900000              2.000000   \nmax        14.300000                     15.100000            504.200000   \n       relative_humidity_rmax  relative_humidity_rmin  air_temperature_tmmn  \\\ncount           767200.000000           767200.000000         767200.000000   \nmean                70.041987               35.022455            272.261304   \nstd                 20.604479               18.817779              8.334684   \nmin                  8.200000                1.000000            238.000000   \n25%                 53.900000               20.600000            266.600000   \n50%                 71.000000               30.900000            272.300000   \n75%                 87.100000               46.400000            278.600000   \nmax                100.000000              100.000000            298.300000   \n       air_temperature_tmmx  mean_vapor_pressure_deficit     wind_speed  \\\ncount         767200.000000                767200.000000  767200.000000   \nmean             284.033753                     0.647127       4.221713   \nstd                9.892099                     0.537530       2.039676   \nmin              248.700000                     0.000000       0.500000   \n25%              276.200000                     0.220000       2.800000   \n50%              283.300000                     0.480000       3.800000   \n75%              292.300000                     0.960000       5.200000   \nmax              314.400000                     3.870000      18.600000   \n           elevation          slope      curvature         aspect  \\\ncount  713496.000000  797888.000000  713496.000000  713496.000000   \nmean     2400.250366      89.980194   -3978.775967     173.841000   \nstd       657.753783       0.015543    4436.408493     102.096796   \nmin       758.443700      89.907196  -19177.676000       0.415929   \n25%      1948.688100      89.976875   -6479.865000     101.168440   \n50%      2468.187000      89.985710   -3720.545200     169.149630   \n75%      2924.415500      89.989990    -657.843500     254.958680   \nmax      3823.384800      89.996475    9069.726000     358.656280   \n            eastness      northness           fsca          SWE_1  \\\ncount  713496.000000  713496.000000  531543.000000  713496.000000   \nmean        0.061198      -0.052610      24.650995      50.326516   \nstd         0.524249       0.636747      27.876487      95.565266   \nmin        -0.785344      -0.785369       0.000000       0.000000   \n25%        -0.398911      -0.735620       0.000000       0.000000   \n50%         0.140316      -0.193049       5.534884       0.000000   \n75%         0.577196       0.649554      52.000000      35.000000   \nmax         0.785398       0.785385      96.000000     255.000000   \n              Flag_1  air_temperature_tmmn_1  potential_evapotranspiration_1  \\\ncount  713496.000000           767200.000000                   767200.000000   \nmean      243.447411              272.259492                        4.024137   \nstd         5.316916                8.334653                        2.505176   \nmin       241.000000              238.000000                        0.000000   \n25%       241.000000              266.600000                        1.900000   \n50%       241.000000              272.300000                        3.600000   \n75%       241.000000              278.600000                        5.900000   \nmax       255.000000              298.300000                       15.100000   \n       mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\ncount                  767200.000000             767200.000000   \nmean                        0.647076                 70.040419   \nstd                         0.537543                 20.604568   \nmin                         0.000000                  8.200000   \n25%                         0.220000                 53.900000   \n50%                         0.480000                 71.000000   \n75%                         0.960000                 87.100000   \nmax                         3.870000                100.000000   \n       relative_humidity_rmin_1  precipitation_amount_1  \\\ncount             767200.000000           767200.000000   \nmean                  35.022552                2.484736   \nstd                   18.818393                7.038488   \nmin                    1.000000                0.000000   \n25%                   20.600000                0.000000   \n50%                   30.900000                0.000000   \n75%                   46.400000                2.000000   \nmax                  100.000000              504.200000   \n       air_temperature_tmmx_1   wind_speed_1         fsca_1          SWE_2  \\\ncount           767200.000000  767200.000000  536016.000000  713496.000000   \nmean               284.031583       4.222192     122.512431      50.320798   \nstd                  9.892455       2.040115     117.050025      95.560648   \nmin                248.700000       0.500000       0.000000       0.000000   \n25%                276.200000       2.800000       0.000000       0.000000   \n50%                283.300000       3.800000      64.000000       0.000000   \n75%                292.300000       5.200000     250.000000      35.000000   \nmax                314.400000      18.600000     255.000000     255.000000   \n              Flag_2  air_temperature_tmmn_2  potential_evapotranspiration_2  \\\ncount  713496.000000           767200.000000                   767200.000000   \nmean      243.447097              272.257565                        4.023965   \nstd         5.316648                8.334572                        2.505408   \nmin       241.000000              238.000000                        0.000000   \n25%       241.000000              266.600000                        1.900000   \n50%       241.000000              272.300000                        3.600000   \n75%       241.000000              278.600000                        5.900000   \nmax       255.000000              298.300000                       15.100000   \n       mean_vapor_pressure_deficit_2  relative_humidity_rmax_2  \\\ncount                  767200.000000             767200.000000   \nmean                        0.646991                 70.041094   \nstd                         0.537558                 20.604445   \nmin                         0.000000                  8.200000   \n25%                         0.220000                 53.900000   \n50%                         0.480000                 71.000000   \n75%                         0.960000                 87.100000   \nmax                         3.870000                100.000000   \n       relative_humidity_rmin_2  precipitation_amount_2  \\\ncount             767200.000000           767200.000000   \nmean                  35.025048                2.484644   \nstd                   18.819945                7.038449   \nmin                    1.000000                0.000000   \n25%                   20.600000                0.000000   \n50%                   30.900000                0.000000   \n75%                   46.400000                2.000000   \nmax                  100.000000              504.200000   \n       air_temperature_tmmx_2   wind_speed_2         fsca_2          SWE_3  \\\ncount           767200.000000  767200.000000  536259.000000  713496.000000   \nmean               284.028983       4.222740     122.521101      50.318296   \nstd                  9.892864       2.040883     117.053468      95.558628   \nmin                248.700000       0.500000       0.000000       0.000000   \n25%                276.200000       2.800000       0.000000       0.000000   \n50%                283.300000       3.800000      64.000000       0.000000   \n75%                292.300000       5.200000     250.000000      35.000000   \nmax                314.400000      18.600000     255.000000     255.000000   \n             Flag_3  air_temperature_tmmn_3  potential_evapotranspiration_3  \\\ncount  713496.00000           767200.000000                   767200.000000   \nmean      243.44696              272.255493                        4.023631   \nstd         5.31653                8.334143                        2.505544   \nmin       241.00000              238.000000                        0.000000   \n25%       241.00000              266.600000                        1.900000   \n50%       241.00000              272.300000                        3.600000   \n75%       241.00000              278.600000                        5.900000   \nmax       255.00000              298.300000                       15.100000   \n       mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\ncount                  767200.000000             767200.000000   \nmean                        0.646874                 70.045193   \nstd                         0.537558                 20.604698   \nmin                         0.000000                  8.200000   \n25%                         0.220000                 53.900000   \n50%                         0.480000                 71.000000   \n75%                         0.960000                 87.100000   \nmax                         3.870000                100.000000   \n       relative_humidity_rmin_3  precipitation_amount_3  \\\ncount             767200.000000           767200.000000   \nmean                  35.029034                2.484949   \nstd                   18.822219                7.038722   \nmin                    1.000000                0.000000   \n25%                   20.600000                0.000000   \n50%                   30.900000                0.000000   \n75%                   46.400000                2.000000   \nmax                  100.000000              504.200000   \n       air_temperature_tmmx_3   wind_speed_3         fsca_3          SWE_4  \\\ncount           767200.000000  767200.000000  536502.000000  713496.000000   \nmean               284.026528       4.223269     122.526248      50.311148   \nstd                  9.892944       2.041410     117.056690      95.552854   \nmin                248.700000       0.500000       0.000000       0.000000   \n25%                276.200000       2.800000       0.000000       0.000000   \n50%                283.300000       3.800000      64.000000       0.000000   \n75%                292.300000       5.200000     250.000000      35.000000   \nmax                314.400000      18.600000     255.000000     255.000000   \n              Flag_4  air_temperature_tmmn_4  potential_evapotranspiration_4  \\\ncount  713496.000000           767200.000000                   767200.000000   \nmean      243.446567              272.253844                        4.023396   \nstd         5.316194                8.333654                        2.505659   \nmin       241.000000              238.000000                        0.000000   \n25%       241.000000              266.600000                        1.900000   \n50%       241.000000              272.300000                        3.600000   \n75%       241.000000              278.600000                        5.900000   \nmax       255.000000              298.300000                       15.100000   \n       mean_vapor_pressure_deficit_4  relative_humidity_rmax_4  \\\ncount                  767200.000000             767200.000000   \nmean                        0.646762                 70.048777   \nstd                         0.537535                 20.604025   \nmin                         0.000000                  8.200000   \n25%                         0.220000                 53.900000   \n50%                         0.480000                 71.000000   \n75%                         0.960000                 87.100000   \nmax                         3.870000                100.000000   \n       relative_humidity_rmin_4  precipitation_amount_4  \\\ncount             767200.000000           767200.000000   \nmean                  35.032820                2.485223   \nstd                   18.823806                7.038887   \nmin                    1.000000                0.000000   \n25%                   20.600000                0.000000   \n50%                   30.900000                0.000000   \n75%                   46.400000                2.000000   \nmax                  100.000000              504.200000   \n       air_temperature_tmmx_4   wind_speed_4         fsca_4         SWE_5  \\\ncount           767200.000000  767200.000000  536745.000000  713496.00000   \nmean               284.024386       4.223736     122.526909      50.31222   \nstd                  9.892878       2.041711     117.059882      95.55372   \nmin                248.700000       0.500000       0.000000       0.00000   \n25%                276.200000       2.800000       0.000000       0.00000   \n50%                283.300000       3.800000      64.000000       0.00000   \n75%                292.300000       5.200000     250.000000      35.00000   \nmax                314.400000      18.600000     255.000000     255.00000   \n              Flag_5  air_temperature_tmmn_5  potential_evapotranspiration_5  \\\ncount  713496.000000           767200.000000                   767200.000000   \nmean      243.446626              272.252317                        4.023200   \nstd         5.316244                8.333121                        2.505814   \nmin       241.000000              238.000000                        0.000000   \n25%       241.000000              266.600000                        1.900000   \n50%       241.000000              272.300000                        3.600000   \n75%       241.000000              278.600000                        5.900000   \nmax       255.000000              298.300000                       15.100000   \n       mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\ncount                  767200.000000             767200.000000   \nmean                        0.646653                 70.052329   \nstd                         0.537511                 20.603616   \nmin                         0.000000                  8.200000   \n25%                         0.220000                 53.900000   \n50%                         0.480000                 71.000000   \n75%                         0.960000                 87.100000   \nmax                         3.870000                100.000000   \n       relative_humidity_rmin_5  precipitation_amount_5  \\\ncount             767200.000000           767200.000000   \nmean                  35.036577                2.485695   \nstd                   18.825852                7.039300   \nmin                    1.000000                0.000000   \n25%                   20.600000                0.000000   \n50%                   30.900000                0.000000   \n75%                   46.400000                2.000000   \nmax                  100.000000              504.200000   \n       air_temperature_tmmx_5   wind_speed_5         fsca_5          SWE_6  \\\ncount           767200.000000  767200.000000  536988.000000  713496.000000   \nmean               284.022421       4.224254     122.525898      50.310791   \nstd                  9.892795       2.041994     117.063270      95.552565   \nmin                248.700000       0.500000       0.000000       0.000000   \n25%                276.200000       2.800000       0.000000       0.000000   \n50%                283.300000       3.800000      64.000000       0.000000   \n75%                292.300000       5.200000     250.000000      35.000000   \nmax                314.400000      18.600000     255.000000     255.000000   \n              Flag_6  air_temperature_tmmn_6  potential_evapotranspiration_6  \\\ncount  713496.000000           767200.000000                   767200.000000   \nmean      243.446548              272.250904                        4.022913   \nstd         5.316177                8.332727                        2.505968   \nmin       241.000000              238.000000                        0.000000   \n25%       241.000000              266.600000                        1.900000   \n50%       241.000000              272.300000                        3.600000   \n75%       241.000000              278.600000                        5.900000   \nmax       255.000000              298.300000                       15.100000   \n       mean_vapor_pressure_deficit_6  relative_humidity_rmax_6  \\\ncount                  767200.000000             767200.000000   \nmean                        0.646554                 70.055568   \nstd                         0.537508                 20.603884   \nmin                         0.000000                  8.200000   \n25%                         0.220000                 53.900000   \n50%                         0.480000                 71.000000   \n75%                         0.960000                 87.200000   \nmax                         3.870000                100.000000   \n       relative_humidity_rmin_6  precipitation_amount_6  \\\ncount             767200.000000           767200.000000   \nmean                  35.040710                2.486229   \nstd                   18.828492                7.039703   \nmin                    1.000000                0.000000   \n25%                   20.600000                0.000000   \n50%                   30.900000                0.000000   \n75%                   46.400000                2.000000   \nmax                  100.000000              504.200000   \n       air_temperature_tmmx_6   wind_speed_6         fsca_6          SWE_7  \\\ncount           767200.000000  767200.000000  537231.000000  713496.000000   \nmean               284.020433       4.224612     122.516556      50.315437   \nstd                  9.892841       2.042310     117.066434      95.556318   \nmin                248.700000       0.500000       0.000000       0.000000   \n25%                276.200000       2.800000       0.000000       0.000000   \n50%                283.300000       3.800000      64.000000       0.000000   \n75%                292.300000       5.200000     250.000000      35.000000   \nmax                314.400000      18.600000     255.000000     255.000000   \n              Flag_7  air_temperature_tmmn_7  potential_evapotranspiration_7  \\\ncount  713496.000000           767200.000000                   767200.000000   \nmean      243.446803              272.249559                        4.022624   \nstd         5.316396                8.332266                        2.506123   \nmin       241.000000              238.000000                        0.000000   \n25%       241.000000              266.600000                        1.900000   \n50%       241.000000              272.300000                        3.600000   \n75%       241.000000              278.600000                        5.900000   \nmax       255.000000              298.300000                       15.100000   \n       mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\ncount                  767200.000000             767200.000000   \nmean                        0.646440                 70.059453   \nstd                         0.537498                 20.604642   \nmin                         0.000000                  8.200000   \n25%                         0.220000                 53.900000   \n50%                         0.480000                 71.000000   \n75%                         0.960000                 87.200000   \nmax                         3.870000                100.000000   \n       relative_humidity_rmin_7  precipitation_amount_7  \\\ncount             767200.000000           767200.000000   \nmean                  35.045342                2.486815   \nstd                   18.831274                7.040030   \nmin                    1.000000                0.000000   \n25%                   20.600000                0.000000   \n50%                   30.900000                0.000000   \n75%                   46.400000                2.000000   \nmax                  100.000000              504.200000   \n       air_temperature_tmmx_7   wind_speed_7         fsca_7     water_year  \ncount           767200.000000  767200.000000  537474.000000  797888.000000  \nmean               284.018453       4.225047     122.506825    2020.999088  \nstd                  9.892653       2.042543     117.069695       0.816683  \nmin                248.700000       0.500000       0.000000    2020.000000  \n25%                276.200000       2.800000       0.000000    2020.000000  \n50%                283.300000       3.800000      64.000000    2021.000000  \n75%                292.300000       5.200000     250.000000    2022.000000  \nmax                314.400000      18.600000     255.000000    2022.000000  \nThis is the dataframe after cumulative columns are added\n                 lat            lon            SWE           Flag  \\\ncount  797888.000000  797888.000000  713496.000000  713496.000000   \nmean       41.615630    -114.130327       7.053092     243.447882   \nstd         3.643291       5.447167      17.546653       5.317320   \nmin        33.358254    -123.448583       0.000000     241.000000   \n25%        38.911155    -119.666675       0.000000     241.000000   \n50%        40.939712    -113.585082       0.000000     241.000000   \n75%        44.613976    -110.000804       0.000000     241.000000   \nmax        48.971066    -105.194817     197.000000     255.000000   \n           swe_value  potential_evapotranspiration  precipitation_amount  \\\ncount  712845.000000                 767200.000000         767200.000000   \nmean        2.661918                      4.024112              2.485314   \nstd         3.989611                      2.504920              7.038737   \nmin         0.000000                      0.000000              0.000000   \n25%         0.000000                      1.900000              0.000000   \n50%         0.000000                      3.600000              0.000000   \n75%         5.900000                      5.900000              2.000000   \nmax        14.300000                     15.100000            504.200000   \n       relative_humidity_rmax  relative_humidity_rmin  air_temperature_tmmn  \\\ncount           767200.000000           767200.000000         767200.000000   \nmean                70.041987               35.022455            272.261304   \nstd                 20.604479               18.817779              8.334684   \nmin                  8.200000                1.000000            238.000000   \n25%                 53.900000               20.600000            266.600000   \n50%                 71.000000               30.900000            272.300000   \n75%                 87.100000               46.400000            278.600000   \nmax                100.000000              100.000000            298.300000   \n       air_temperature_tmmx  mean_vapor_pressure_deficit     wind_speed  \\\ncount         767200.000000                767200.000000  767200.000000   \nmean             284.033753                     0.647127       4.221713   \nstd                9.892099                     0.537530       2.039676   \nmin              248.700000                     0.000000       0.500000   \n25%              276.200000                     0.220000       2.800000   \n50%              283.300000                     0.480000       3.800000   \n75%              292.300000                     0.960000       5.200000   \nmax              314.400000                     3.870000      18.600000   \n           elevation          slope      curvature         aspect  \\\ncount  713496.000000  797888.000000  713496.000000  713496.000000   \nmean     2400.250366      89.980194   -3978.775967     173.841000   \nstd       657.753783       0.015543    4436.408493     102.096796   \nmin       758.443700      89.907196  -19177.676000       0.415929   \n25%      1948.688100      89.976875   -6479.865000     101.168440   \n50%      2468.187000      89.985710   -3720.545200     169.149630   \n75%      2924.415500      89.989990    -657.843500     254.958680   \nmax      3823.384800      89.996475    9069.726000     358.656280   \n            eastness      northness           fsca          SWE_1  \\\ncount  713496.000000  713496.000000  531543.000000  713496.000000   \nmean        0.061198      -0.052610      24.650995      50.326516   \nstd         0.524249       0.636747      27.876487      95.565266   \nmin        -0.785344      -0.785369       0.000000       0.000000   \n25%        -0.398911      -0.735620       0.000000       0.000000   \n50%         0.140316      -0.193049       5.534884       0.000000   \n75%         0.577196       0.649554      52.000000      35.000000   \nmax         0.785398       0.785385      96.000000     255.000000   \n              Flag_1  air_temperature_tmmn_1  potential_evapotranspiration_1  \\\ncount  713496.000000           767200.000000                   767200.000000   \nmean      243.447411              272.259492                        4.024137   \nstd         5.316916                8.334653                        2.505176   \nmin       241.000000              238.000000                        0.000000   \n25%       241.000000              266.600000                        1.900000   \n50%       241.000000              272.300000                        3.600000   \n75%       241.000000              278.600000                        5.900000   \nmax       255.000000              298.300000                       15.100000   \n       mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\ncount                  767200.000000             767200.000000   \nmean                        0.647076                 70.040419   \nstd                         0.537543                 20.604568   \nmin                         0.000000                  8.200000   \n25%                         0.220000                 53.900000   \n50%                         0.480000                 71.000000   \n75%                         0.960000                 87.100000   \nmax                         3.870000                100.000000   \n       relative_humidity_rmin_1  precipitation_amount_1  \\\ncount             767200.000000           767200.000000   \nmean                  35.022552                2.484736   \nstd                   18.818393                7.038488   \nmin                    1.000000                0.000000   \n25%                   20.600000                0.000000   \n50%                   30.900000                0.000000   \n75%                   46.400000                2.000000   \nmax                  100.000000              504.200000   \n       air_temperature_tmmx_1   wind_speed_1         fsca_1          SWE_2  \\\ncount           767200.000000  767200.000000  536016.000000  713496.000000   \nmean               284.031583       4.222192     122.512431      50.320798   \nstd                  9.892455       2.040115     117.050025      95.560648   \nmin                248.700000       0.500000       0.000000       0.000000   \n25%                276.200000       2.800000       0.000000       0.000000   \n50%                283.300000       3.800000      64.000000       0.000000   \n75%                292.300000       5.200000     250.000000      35.000000   \nmax                314.400000      18.600000     255.000000     255.000000   \n              Flag_2  air_temperature_tmmn_2  potential_evapotranspiration_2  \\\ncount  713496.000000           767200.000000                   767200.000000   \nmean      243.447097              272.257565                        4.023965   \nstd         5.316648                8.334572                        2.505408   \nmin       241.000000              238.000000                        0.000000   \n25%       241.000000              266.600000                        1.900000   \n50%       241.000000              272.300000                        3.600000   \n75%       241.000000              278.600000                        5.900000   \nmax       255.000000              298.300000                       15.100000   \n       mean_vapor_pressure_deficit_2  relative_humidity_rmax_2  \\\ncount                  767200.000000             767200.000000   \nmean                        0.646991                 70.041094   \nstd                         0.537558                 20.604445   \nmin                         0.000000                  8.200000   \n25%                         0.220000                 53.900000   \n50%                         0.480000                 71.000000   \n75%                         0.960000                 87.100000   \nmax                         3.870000                100.000000   \n       relative_humidity_rmin_2  precipitation_amount_2  \\\ncount             767200.000000           767200.000000   \nmean                  35.025048                2.484644   \nstd                   18.819945                7.038449   \nmin                    1.000000                0.000000   \n25%                   20.600000                0.000000   \n50%                   30.900000                0.000000   \n75%                   46.400000                2.000000   \nmax                  100.000000              504.200000   \n       air_temperature_tmmx_2   wind_speed_2         fsca_2          SWE_3  \\\ncount           767200.000000  767200.000000  536259.000000  713496.000000   \nmean               284.028983       4.222740     122.521101      50.318296   \nstd                  9.892864       2.040883     117.053468      95.558628   \nmin                248.700000       0.500000       0.000000       0.000000   \n25%                276.200000       2.800000       0.000000       0.000000   \n50%                283.300000       3.800000      64.000000       0.000000   \n75%                292.300000       5.200000     250.000000      35.000000   \nmax                314.400000      18.600000     255.000000     255.000000   \n             Flag_3  air_temperature_tmmn_3  potential_evapotranspiration_3  \\\ncount  713496.00000           767200.000000                   767200.000000   \nmean      243.44696              272.255493                        4.023631   \nstd         5.31653                8.334143                        2.505544   \nmin       241.00000              238.000000                        0.000000   \n25%       241.00000              266.600000                        1.900000   \n50%       241.00000              272.300000                        3.600000   \n75%       241.00000              278.600000                        5.900000   \nmax       255.00000              298.300000                       15.100000   \n       mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\ncount                  767200.000000             767200.000000   \nmean                        0.646874                 70.045193   \nstd                         0.537558                 20.604698   \nmin                         0.000000                  8.200000   \n25%                         0.220000                 53.900000   \n50%                         0.480000                 71.000000   \n75%                         0.960000                 87.100000   \nmax                         3.870000                100.000000   \n       relative_humidity_rmin_3  precipitation_amount_3  \\\ncount             767200.000000           767200.000000   \nmean                  35.029034                2.484949   \nstd                   18.822219                7.038722   \nmin                    1.000000                0.000000   \n25%                   20.600000                0.000000   \n50%                   30.900000                0.000000   \n75%                   46.400000                2.000000   \nmax                  100.000000              504.200000   \n       air_temperature_tmmx_3   wind_speed_3         fsca_3          SWE_4  \\\ncount           767200.000000  767200.000000  536502.000000  713496.000000   \nmean               284.026528       4.223269     122.526248      50.311148   \nstd                  9.892944       2.041410     117.056690      95.552854   \nmin                248.700000       0.500000       0.000000       0.000000   \n25%                276.200000       2.800000       0.000000       0.000000   \n50%                283.300000       3.800000      64.000000       0.000000   \n75%                292.300000       5.200000     250.000000      35.000000   \nmax                314.400000      18.600000     255.000000     255.000000   \n              Flag_4  air_temperature_tmmn_4  potential_evapotranspiration_4  \\\ncount  713496.000000           767200.000000                   767200.000000   \nmean      243.446567              272.253844                        4.023396   \nstd         5.316194                8.333654                        2.505659   \nmin       241.000000              238.000000                        0.000000   \n25%       241.000000              266.600000                        1.900000   \n50%       241.000000              272.300000                        3.600000   \n75%       241.000000              278.600000                        5.900000   \nmax       255.000000              298.300000                       15.100000   \n       mean_vapor_pressure_deficit_4  relative_humidity_rmax_4  \\\ncount                  767200.000000             767200.000000   \nmean                        0.646762                 70.048777   \nstd                         0.537535                 20.604025   \nmin                         0.000000                  8.200000   \n25%                         0.220000                 53.900000   \n50%                         0.480000                 71.000000   \n75%                         0.960000                 87.100000   \nmax                         3.870000                100.000000   \n       relative_humidity_rmin_4  precipitation_amount_4  \\\ncount             767200.000000           767200.000000   \nmean                  35.032820                2.485223   \nstd                   18.823806                7.038887   \nmin                    1.000000                0.000000   \n25%                   20.600000                0.000000   \n50%                   30.900000                0.000000   \n75%                   46.400000                2.000000   \nmax                  100.000000              504.200000   \n       air_temperature_tmmx_4   wind_speed_4         fsca_4         SWE_5  \\\ncount           767200.000000  767200.000000  536745.000000  713496.00000   \nmean               284.024386       4.223736     122.526909      50.31222   \nstd                  9.892878       2.041711     117.059882      95.55372   \nmin                248.700000       0.500000       0.000000       0.00000   \n25%                276.200000       2.800000       0.000000       0.00000   \n50%                283.300000       3.800000      64.000000       0.00000   \n75%                292.300000       5.200000     250.000000      35.00000   \nmax                314.400000      18.600000     255.000000     255.00000   \n              Flag_5  air_temperature_tmmn_5  potential_evapotranspiration_5  \\\ncount  713496.000000           767200.000000                   767200.000000   \nmean      243.446626              272.252317                        4.023200   \nstd         5.316244                8.333121                        2.505814   \nmin       241.000000              238.000000                        0.000000   \n25%       241.000000              266.600000                        1.900000   \n50%       241.000000              272.300000                        3.600000   \n75%       241.000000              278.600000                        5.900000   \nmax       255.000000              298.300000                       15.100000   \n       mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\ncount                  767200.000000             767200.000000   \nmean                        0.646653                 70.052329   \nstd                         0.537511                 20.603616   \nmin                         0.000000                  8.200000   \n25%                         0.220000                 53.900000   \n50%                         0.480000                 71.000000   \n75%                         0.960000                 87.100000   \nmax                         3.870000                100.000000   \n       relative_humidity_rmin_5  precipitation_amount_5  \\\ncount             767200.000000           767200.000000   \nmean                  35.036577                2.485695   \nstd                   18.825852                7.039300   \nmin                    1.000000                0.000000   \n25%                   20.600000                0.000000   \n50%                   30.900000                0.000000   \n75%                   46.400000                2.000000   \nmax                  100.000000              504.200000   \n       air_temperature_tmmx_5   wind_speed_5         fsca_5          SWE_6  \\\ncount           767200.000000  767200.000000  536988.000000  713496.000000   \nmean               284.022421       4.224254     122.525898      50.310791   \nstd                  9.892795       2.041994     117.063270      95.552565   \nmin                248.700000       0.500000       0.000000       0.000000   \n25%                276.200000       2.800000       0.000000       0.000000   \n50%                283.300000       3.800000      64.000000       0.000000   \n75%                292.300000       5.200000     250.000000      35.000000   \nmax                314.400000      18.600000     255.000000     255.000000   \n              Flag_6  air_temperature_tmmn_6  potential_evapotranspiration_6  \\\ncount  713496.000000           767200.000000                   767200.000000   \nmean      243.446548              272.250904                        4.022913   \nstd         5.316177                8.332727                        2.505968   \nmin       241.000000              238.000000                        0.000000   \n25%       241.000000              266.600000                        1.900000   \n50%       241.000000              272.300000                        3.600000   \n75%       241.000000              278.600000                        5.900000   \nmax       255.000000              298.300000                       15.100000   \n       mean_vapor_pressure_deficit_6  relative_humidity_rmax_6  \\\ncount                  767200.000000             767200.000000   \nmean                        0.646554                 70.055568   \nstd                         0.537508                 20.603884   \nmin                         0.000000                  8.200000   \n25%                         0.220000                 53.900000   \n50%                         0.480000                 71.000000   \n75%                         0.960000                 87.200000   \nmax                         3.870000                100.000000   \n       relative_humidity_rmin_6  precipitation_amount_6  \\\ncount             767200.000000           767200.000000   \nmean                  35.040710                2.486229   \nstd                   18.828492                7.039703   \nmin                    1.000000                0.000000   \n25%                   20.600000                0.000000   \n50%                   30.900000                0.000000   \n75%                   46.400000                2.000000   \nmax                  100.000000              504.200000   \n       air_temperature_tmmx_6   wind_speed_6         fsca_6          SWE_7  \\\ncount           767200.000000  767200.000000  537231.000000  713496.000000   \nmean               284.020433       4.224612     122.516556      50.315437   \nstd                  9.892841       2.042310     117.066434      95.556318   \nmin                248.700000       0.500000       0.000000       0.000000   \n25%                276.200000       2.800000       0.000000       0.000000   \n50%                283.300000       3.800000      64.000000       0.000000   \n75%                292.300000       5.200000     250.000000      35.000000   \nmax                314.400000      18.600000     255.000000     255.000000   \n              Flag_7  air_temperature_tmmn_7  potential_evapotranspiration_7  \\\ncount  713496.000000           767200.000000                   767200.000000   \nmean      243.446803              272.249559                        4.022624   \nstd         5.316396                8.332266                        2.506123   \nmin       241.000000              238.000000                        0.000000   \n25%       241.000000              266.600000                        1.900000   \n50%       241.000000              272.300000                        3.600000   \n75%       241.000000              278.600000                        5.900000   \nmax       255.000000              298.300000                       15.100000   \n       mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\ncount                  767200.000000             767200.000000   \nmean                        0.646440                 70.059453   \nstd                         0.537498                 20.604642   \nmin                         0.000000                  8.200000   \n25%                         0.220000                 53.900000   \n50%                         0.480000                 71.000000   \n75%                         0.960000                 87.200000   \nmax                         3.870000                100.000000   \n       relative_humidity_rmin_7  precipitation_amount_7  \\\ncount             767200.000000           767200.000000   \nmean                  35.045342                2.486815   \nstd                   18.831274                7.040030   \nmin                    1.000000                0.000000   \n25%                   20.600000                0.000000   \n50%                   30.900000                0.000000   \n75%                   46.400000                2.000000   \nmax                  100.000000              504.200000   \n       air_temperature_tmmx_7   wind_speed_7         fsca_7     water_year  \\\ncount           767200.000000  767200.000000  537474.000000  797888.000000   \nmean               284.018453       4.225047     122.506825    2020.999088   \nstd                  9.892653       2.042543     117.069695       0.816683   \nmin                248.700000       0.500000       0.000000    2020.000000   \n25%                276.200000       2.800000       0.000000    2020.000000   \n50%                283.300000       3.800000      64.000000    2021.000000   \n75%                292.300000       5.200000     250.000000    2022.000000   \nmax                314.400000      18.600000     255.000000    2022.000000   \n       cumulative_SWE  cumulative_Flag  cumulative_air_temperature_tmmn  \\\ncount   713496.000000     7.134960e+05                     7.672000e+05   \nmean      6441.735519     2.063683e+05                     2.339183e+05   \nstd       9615.732478     1.962608e+05                     2.163938e+05   \nmin          0.000000     2.410000e+02                     2.613000e+02   \n25%          0.000000     5.970300e+04                     7.090738e+04   \n50%       1506.000000     1.486280e+05                     1.737617e+05   \n75%       9355.000000     2.980050e+05                     3.367690e+05   \nmax      57841.000000     1.250172e+06                     1.410108e+06   \n       cumulative_potential_evapotranspiration  \\\ncount                            767200.000000   \nmean                               2680.790546   \nstd                                3033.422391   \nmin                                   0.800000   \n25%                                 657.000000   \n50%                                1533.600000   \n75%                                3656.700000   \nmax                               23479.300000   \n       cumulative_mean_vapor_pressure_deficit  \\\ncount                           767200.000000   \nmean                               411.532369   \nstd                                488.720352   \nmin                                  0.000000   \n25%                                100.240000   \n50%                                233.760000   \n75%                                539.020000   \nmax                               4248.790000   \n       cumulative_relative_humidity_rmax  cumulative_relative_humidity_rmin  \\\ncount                      767200.000000                      767200.000000   \nmean                        63171.153850                       33192.557569   \nstd                         57129.887329                       31521.156536   \nmin                            18.500000                           1.000000   \n25%                         18084.475000                        8732.000000   \n50%                         47738.600000                       25043.400000   \n75%                         93047.275000                       48983.100000   \nmax                        330952.000000                      212666.000000   \n       cumulative_precipitation_amount  cumulative_air_temperature_tmmx  \\\ncount                    767200.000000                     7.672000e+05   \nmean                       2809.653087                     2.433647e+05   \nstd                        3839.971243                     2.251910e+05   \nmin                           0.000000                     2.697000e+02   \n25%                         560.000000                     7.376865e+04   \n50%                        1615.000000                     1.805070e+05   \n75%                        3477.600000                     3.502821e+05   \nmax                       31189.000000                     1.458642e+06   \n       cumulative_wind_speed  cumulative_fsca  \ncount          767200.000000    531543.000000  \nmean             3852.168646     25080.280125  \nstd              3529.475010     29588.267048  \nmin                 0.800000         0.000000  \n25%              1121.100000      3881.000000  \n50%              2852.200000     13479.695652  \n75%              5538.200000     37887.500000  \nmax             19442.800000    191611.000000  \nAll the cumulative variables are added successfully! /home/chetana/gridmet_test_run/final_merged_data_3yrs_cleaned_v4_slope_corrected_cumulative_v1.csv\ndouble check the swe_value statistics: count    712845.000000\nmean          2.661918\nstd           3.989611\nmin           0.000000\n25%           0.000000\n50%           0.000000\n75%           5.900000\nmax          14.300000\nName: swe_value, dtype: float64\n",
  "history_begin_time" : 1701247817911,
  "history_end_time" : 1701248069805,
  "history_notes" : "fill in all the missing values of swe and fsca",
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "J8IG9ROVii3L",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n# Define file paths for various CSV files\n# current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected.csv'\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v1.csv'\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v1_bak.csv'\n# target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\ntarget_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_cumulative_v1.csv'\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef convert_to_time_series(input_csv, output_csv):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 \"Flag\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed', \n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                        }, inplace=True)\n\n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(df, column_name, degree=3):\n        x = df.index\n        y = df[column_name]\n\n        # Create a mask for missing values\n        if column_name == \"SWE\":\n        \tmask = (y > 240) | y.isnull()\n        elif column_name == \"fsca\":\n            mask = (y > 100) | y.isnull()\n        else:\n            mask = y.isnull()\n        # Perform interpolation\n        new_y = np.interp(x, x[~mask], y[~mask])\n\n        if np.any(new_y.isnull()):\n            raise ValueError(\"Single group: shouldn't have null values here\")\n\n        # Replace missing values with interpolated values\n        df[column_name] = new_y\n        return df\n\n    # Group the data by 'lat' and 'lon' and apply interpolation for each column\n#     grouped = df.groupby(['lat', 'lon'])\n#     filled_data = pd.DataFrame()\n#     for name, group in grouped:\n#         print(f\"Start filling missing values for {name}\")\n#         interpolate_missing_inplace(group, 'SWE')\n#         filled_data = pd.concat([filled_data, group], axis=0)\n\n#     filled_data = filled_data.reset_index()\n\n#     if any(filled_data['SWE'] > 240):\n#         raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n    # Create a new DataFrame to store the time series data for each location\n    result = pd.DataFrame()\n\n    # Define the number of days to consider (7 days in this case)\n    num_days = 7\n\n    grouped = df.groupby(['lat', 'lon'])\n    for name, group in grouped:\n        group = group.set_index('date')\n        for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n                new_column_name = f'{target_col}_{day}'\n                group[new_column_name] = group[target_col].shift(day)\n        result = pd.concat([result, group], axis=0)\n\n    # Reset the index of the result DataFrame\n    result = result.reset_index()\n    result.to_csv(output_csv, index=False)\n    print(f\"New data is saved to {output_csv}\")\n    shutil.copy(output_csv, backup_time_series_csv_path)\n    print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    columns_to_be_cumulated = [\n      \"SWE\", \n      \"Flag\", \n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv)\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2019-10-01')\n    end_date = pd.to_datetime('2022-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(group):\n        for column in columns_to_be_cumulated:\n          x = group.index\n          y = group[column]\n          \n\t\t  # Create a mask for missing values\n          if column == \"SWE\":\n          \tmask = y > 240\n            # Perform interpolation\n          \tnew_y = np.interp(x, x[~mask], y[~mask])\n\n          \tif np.any(new_y > 240):\n          \t    raise ValueError(\"SWE group: shouldn't have values > 240 here\")\n\n          \t# Replace missing values with interpolated values\n          \tgroup[column] = new_y\n          elif column == \"fsca\":\n            mask = y > 100\n            # Perform interpolation\n            new_y = np.interp(x, x[~mask], y[~mask])\n            \n            if np.any(new_y > 100):\n                raise ValueError(\"fsca group: shouldn't have values > 240 here\")\n\n          \t# Replace missing values with interpolated values\n          \tgroup[column] = new_y\n        \n        return group\n\n    \n    df = grouped.apply(interpolate_missing_inplace)\n        \n    print(\"All the columns should have missing values filled: \", df.describe())    \n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df.describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n    \n\n\n# Uncomment this line to execute the 'convert_to_time_series' function\nconvert_to_time_series(current_ready_csv_path, target_time_series_csv_path)\n\n# Uncomment this line to execute the 'add_cumulative_columns' function\nadd_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path)\n",
  "history_output" : "  File \"/home/chetana/gw-workspace/J8IG9ROVii3L/convert_to_time_series.py\", line 216\n    group[column] = new_y\nTabError: inconsistent use of tabs and spaces in indentation\n",
  "history_begin_time" : 1701247808779,
  "history_end_time" : 1701247808835,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "UwNjyaB6JLGd",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n# Define file paths for various CSV files\n# current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected.csv'\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v1.csv'\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v1_bak.csv'\n# target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\ntarget_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_cumulative_v1.csv'\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef convert_to_time_series(input_csv, output_csv):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 \"Flag\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed', \n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                        }, inplace=True)\n\n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(df, column_name, degree=3):\n        x = df.index\n        y = df[column_name]\n\n        # Create a mask for missing values\n        if column_name == \"SWE\":\n        \tmask = (y > 240) | y.isnull()\n        elif column_name == \"fsca\":\n            mask = (y > 100) | y.isnull()\n        else:\n            mask = y.isnull()\n        # Perform interpolation\n        new_y = np.interp(x, x[~mask], y[~mask])\n\n        if np.any(new_y.isnull()):\n            raise ValueError(\"Single group: shouldn't have null values here\")\n\n        # Replace missing values with interpolated values\n        df[column_name] = new_y\n        return df\n\n    # Group the data by 'lat' and 'lon' and apply interpolation for each column\n#     grouped = df.groupby(['lat', 'lon'])\n#     filled_data = pd.DataFrame()\n#     for name, group in grouped:\n#         print(f\"Start filling missing values for {name}\")\n#         interpolate_missing_inplace(group, 'SWE')\n#         filled_data = pd.concat([filled_data, group], axis=0)\n\n#     filled_data = filled_data.reset_index()\n\n#     if any(filled_data['SWE'] > 240):\n#         raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n    # Create a new DataFrame to store the time series data for each location\n    result = pd.DataFrame()\n\n    # Define the number of days to consider (7 days in this case)\n    num_days = 7\n\n    grouped = df.groupby(['lat', 'lon'])\n    for name, group in grouped:\n        group = group.set_index('date')\n        for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n                new_column_name = f'{target_col}_{day}'\n                group[new_column_name] = group[target_col].shift(day)\n        result = pd.concat([result, group], axis=0)\n\n    # Reset the index of the result DataFrame\n    result = result.reset_index()\n    result.to_csv(output_csv, index=False)\n    print(f\"New data is saved to {output_csv}\")\n    shutil.copy(output_csv, backup_time_series_csv_path)\n    print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    columns_to_be_cumulated = [\n      \"SWE\", \n      \"Flag\", \n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv)\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2019-10-01')\n    end_date = pd.to_datetime('2022-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(group):\n        for column in columns_to_be_cumulated:\n          x = group.index\n          y = group[column]\n          \n\t\t  # Create a mask for missing values\n          if column == \"SWE\":\n          \tmask = y > 240\n            # Perform interpolation\n          \tnew_y = np.interp(x, x[~mask], y[~mask])\n\n          \tif np.any(new_y > 240):\n          \t    raise ValueError(\"SWE group: shouldn't have values > 240 here\")\n\n          \t# Replace missing values with interpolated values\n          \tgroup[column] = new_y\n          elif column == \"fsca\":\n            mask = y > 100\n            # Perform interpolation\n            new_y = np.interp(x, x[~mask], y[~mask])\n\n          \tif np.any(new_y > 100):\n          \t    raise ValueError(\"fsca group: shouldn't have values > 240 here\")\n\n          \t# Replace missing values with interpolated values\n          \tgroup[column] = new_y\n        \n        return group\n\n    \n    df = grouped.apply(interpolate_missing_inplace)\n        \n    print(\"All the columns should have missing values filled: \", df.describe())    \n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df.describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n    \n\n\n# Uncomment this line to execute the 'convert_to_time_series' function\nconvert_to_time_series(current_ready_csv_path, target_time_series_csv_path)\n\n# Uncomment this line to execute the 'add_cumulative_columns' function\nadd_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path)\n",
  "history_output" : "  File \"/home/chetana/gw-workspace/UwNjyaB6JLGd/convert_to_time_series.py\", line 212\n    if np.any(new_y > 100):\nTabError: inconsistent use of tabs and spaces in indentation\n",
  "history_begin_time" : 1701247794179,
  "history_end_time" : 1701247794235,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "awPay7IWY4T4",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n# Define file paths for various CSV files\n# current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected.csv'\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v1.csv'\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v1_bak.csv'\n# target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\ntarget_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_cumulative_v1.csv'\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef convert_to_time_series(input_csv, output_csv):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 \"Flag\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed', \n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                        }, inplace=True)\n\n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(df, column_name, degree=3):\n        x = df.index\n        y = df[column_name]\n\n        # Create a mask for missing values\n        if column_name == \"SWE\":\n        \tmask = (y > 240) | y.isnull()\n        elif column_name == \"fsca\":\n            mask = (y > 100) | y.isnull()\n        else:\n            mask = y.isnull()\n        # Perform interpolation\n        new_y = np.interp(x, x[~mask], y[~mask])\n\n        if np.any(new_y.isnull()):\n            raise ValueError(\"Single group: shouldn't have null values here\")\n\n        # Replace missing values with interpolated values\n        df[column_name] = new_y\n        return df\n\n    # Group the data by 'lat' and 'lon' and apply interpolation for each column\n#     grouped = df.groupby(['lat', 'lon'])\n#     filled_data = pd.DataFrame()\n#     for name, group in grouped:\n#         print(f\"Start filling missing values for {name}\")\n#         interpolate_missing_inplace(group, 'SWE')\n#         filled_data = pd.concat([filled_data, group], axis=0)\n\n#     filled_data = filled_data.reset_index()\n\n#     if any(filled_data['SWE'] > 240):\n#         raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n    # Create a new DataFrame to store the time series data for each location\n    result = pd.DataFrame()\n\n    # Define the number of days to consider (7 days in this case)\n    num_days = 7\n\n    grouped = df.groupby(['lat', 'lon'])\n    for name, group in grouped:\n        group = group.set_index('date')\n        for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n                new_column_name = f'{target_col}_{day}'\n                group[new_column_name] = group[target_col].shift(day)\n        result = pd.concat([result, group], axis=0)\n\n    # Reset the index of the result DataFrame\n    result = result.reset_index()\n    result.to_csv(output_csv, index=False)\n    print(f\"New data is saved to {output_csv}\")\n    shutil.copy(output_csv, backup_time_series_csv_path)\n    print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    columns_to_be_cumulated = [\n      \"SWE\", \n      \"Flag\", \n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv)\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2019-10-01')\n    end_date = pd.to_datetime('2022-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(group):\n        for column in columns_to_be_cumulated:\n          x = group.index\n          y = group[column]\n          \n\t\t  # Create a mask for missing values\n          if column == \"SWE\":\n          \tmask = y > 240\n            # Perform interpolation\n          \tnew_y = np.interp(x, x[~mask], y[~mask])\n\n          \tif np.any(new_y > 240):\n          \t    raise ValueError(\"SWE group: shouldn't have values > 240 here\")\n\n          \t# Replace missing values with interpolated values\n          \tgroup[column] = new_y\n          elif column == \"fsca\":\n            mask = y > 100\n            # Perform interpolation\n          \tnew_y = np.interp(x, x[~mask], y[~mask])\n\n          \tif np.any(new_y > 100):\n          \t    raise ValueError(\"fsca group: shouldn't have values > 240 here\")\n\n          \t# Replace missing values with interpolated values\n          \tgroup[column] = new_y\n        \n        return group\n\n    \n    df = grouped.apply(interpolate_missing_inplace)\n        \n    print(\"All the columns should have missing values filled: \", df.describe())    \n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df.describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n    \n\n\n# Uncomment this line to execute the 'convert_to_time_series' function\nconvert_to_time_series(current_ready_csv_path, target_time_series_csv_path)\n\n# Uncomment this line to execute the 'add_cumulative_columns' function\nadd_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path)\n",
  "history_output" : "  File \"/home/chetana/gw-workspace/awPay7IWY4T4/convert_to_time_series.py\", line 210\n    new_y = np.interp(x, x[~mask], y[~mask])\nTabError: inconsistent use of tabs and spaces in indentation\n",
  "history_begin_time" : 1701247760567,
  "history_end_time" : 1701247760623,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "8cbtrbhjqby",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701245472031,
  "history_end_time" : 1701245472031,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "oocfv7xjxcs",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701234300628,
  "history_end_time" : 1701234300628,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "fn1sjzfa2n9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701232375291,
  "history_end_time" : 1701234158047,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "iklbdj2ew20",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701231048678,
  "history_end_time" : 1701231048678,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "raqx44rug9p",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701230933475,
  "history_end_time" : 1701230952353,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "grcjccvnt7o",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701230796353,
  "history_end_time" : 1701230932260,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "mf9f36z4tp2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701230384899,
  "history_end_time" : 1701230384899,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "3thhfyqgobo",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701229983518,
  "history_end_time" : 1701229983518,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "6uw53pecl5z",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701228899382,
  "history_end_time" : 1701228899382,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "6ilorryv6lv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701228374815,
  "history_end_time" : 1701228374815,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "9t35bbzll3d",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701228236353,
  "history_end_time" : 1701228236353,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ah6cg94kv1z",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701228118519,
  "history_end_time" : 1701228118519,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "9yy94ezrv8j",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701228056542,
  "history_end_time" : 1701228056542,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "68s9ooey29c",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701227912543,
  "history_end_time" : 1701227912543,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "IqD4kcOgBCkN",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n# Define file paths for various CSV files\n# current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected.csv'\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v1.csv'\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v1_bak.csv'\n# target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\ntarget_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_cumulative_v1.csv'\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef convert_to_time_series(input_csv, output_csv):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 \"Flag\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed', \n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    df.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                        }, inplace=True)\n\n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(df, column_name, degree=3):\n        x = df.index\n        y = df[column_name]\n\n        # Create a mask for missing values\n        \n        mask = y > 240\n        # Perform interpolation\n        new_y = np.interp(x, x[~mask], y[~mask])\n\n        if np.any(new_y > 240):\n            raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n        # Replace missing values with interpolated values\n        df[column_name] = new_y\n        return df\n\n    # Group the data by 'lat' and 'lon' and apply interpolation for each column\n#     grouped = df.groupby(['lat', 'lon'])\n#     filled_data = pd.DataFrame()\n#     for name, group in grouped:\n#         print(f\"Start filling missing values for {name}\")\n#         interpolate_missing_inplace(group, 'SWE')\n#         filled_data = pd.concat([filled_data, group], axis=0)\n\n#     filled_data = filled_data.reset_index()\n\n#     if any(filled_data['SWE'] > 240):\n#         raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n    # Create a new DataFrame to store the time series data for each location\n    result = pd.DataFrame()\n\n    # Define the number of days to consider (7 days in this case)\n    num_days = 7\n\n    grouped = df.groupby(['lat', 'lon'])\n    for name, group in grouped:\n        group = group.set_index('date')\n        for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n                new_column_name = f'{target_col}_{day}'\n                group[new_column_name] = group[target_col].shift(day)\n        result = pd.concat([result, group], axis=0)\n\n    # Reset the index of the result DataFrame\n    result = result.reset_index()\n    result.to_csv(output_csv, index=False)\n    print(f\"New data is saved to {output_csv}\")\n    shutil.copy(output_csv, backup_time_series_csv_path)\n    print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    columns_to_be_cumulated = [\n      \"SWE\", \n      \"Flag\", \n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv)\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2019-10-01')\n    end_date = pd.to_datetime('2022-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(group):\n        for column in columns_to_be_cumulated:\n          x = group.index\n          y = group[column]\n          \n\t\t  # Create a mask for missing values\n          if column == \"SWE\":\n          \tmask = y > 240\n            # Perform interpolation\n          \tnew_y = np.interp(x, x[~mask], y[~mask])\n\n          \tif np.any(new_y > 240):\n          \t    raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n          \t# Replace missing values with interpolated values\n          \tgroup[column] = new_y\n        \n        return group\n\n    \n    df = grouped.apply(interpolate_missing_inplace)\n        \n    print(\"All the columns should have missing values filled: \", df.describe())    \n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df.describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n    \n\n\n# Uncomment this line to execute the 'convert_to_time_series' function\nconvert_to_time_series(current_ready_csv_path, target_time_series_csv_path)\n\n# Uncomment this line to execute the 'add_cumulative_columns' function\nadd_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path)\n",
  "history_output" : "today date = 2023-11-29\ntest start date:  2022-11-15\ntest end date:  2023-10-07\n/home/chetana\n2022275\n/home/chetana/gw-workspace/IqD4kcOgBCkN/convert_to_time_series.py:60: DtypeWarning: Columns (6,7) have mixed types. Specify dtype option on import or set low_memory=False.\n  df = pd.read_csv(input_csv)\nAll current columns:  Index(['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n       'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n       'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n       'fsca'],\n      dtype='object')\nNew data is saved to /home/chetana/gridmet_test_run/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v1.csv\nFile is backed up to /home/chetana/gridmet_test_run/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v1_bak.csv\nthe column statistics from time series before cumulative:                  lat           lon            SWE           Flag  \\\ncount  1.152303e+06  1.152303e+06  951111.000000  951111.000000   \nmean   4.157867e+01 -1.141048e+02      50.488570     243.446459   \nstd    3.656259e+00  5.458877e+00      95.498542       5.316203   \nmin    3.335825e+01 -1.234486e+02       0.000000     241.000000   \n25%    3.870816e+01 -1.196577e+02       0.000000     241.000000   \n50%    4.093632e+01 -1.133964e+02       0.000000     241.000000   \n75%    4.461398e+01 -1.100008e+02      35.000000     241.000000   \nmax    4.897107e+01 -1.051948e+02     255.000000     255.000000   \n           swe_value  potential_evapotranspiration  precipitation_amount  \\\ncount  938091.000000                  1.022700e+06          1.022700e+06   \nmean        3.333796                  3.943372e+00          2.689152e+00   \nstd         5.245389                  2.478664e+00          7.456401e+00   \nmin         0.000000                  0.000000e+00          0.000000e+00   \n25%         0.000000                  1.900000e+00          0.000000e+00   \n50%         0.000000                  3.500000e+00          0.000000e+00   \n75%         6.300000                  5.800000e+00          2.200000e+00   \nmax        22.600000                  1.510000e+01          5.042000e+02   \n       relative_humidity_rmax  relative_humidity_rmin  air_temperature_tmmn  \\\ncount            1.022700e+06            1.022700e+06          1.022700e+06   \nmean             7.123571e+01            3.578010e+01          2.720187e+02   \nstd              2.030150e+01            1.888091e+01          8.384982e+00   \nmin              8.200000e+00            1.000000e+00          2.328000e+02   \n25%              5.560000e+01            2.130000e+01          2.663000e+02   \n50%              7.240000e+01            3.160000e+01          2.722000e+02   \n75%              8.820000e+01            4.740000e+01          2.784000e+02   \nmax              1.000000e+02            1.000000e+02          2.983000e+02   \n       air_temperature_tmmx  mean_vapor_pressure_deficit    wind_speed  \\\ncount          1.022700e+06                 1.022700e+06  1.022700e+06   \nmean           2.837481e+02                 6.258550e-01  4.214964e+00   \nstd            9.912702e+00                 5.233133e-01  2.043559e+00   \nmin            2.444000e+02                 0.000000e+00  5.000000e-01   \n25%            2.759000e+02                 2.100000e-01  2.800000e+00   \n50%            2.831000e+02                 4.700000e-01  3.700000e+00   \n75%            2.920000e+02                 9.300000e-01  5.200000e+00   \nmax            3.144000e+02                 3.870000e+00  1.860000e+01   \n           elevation         slope      curvature         aspect  \\\ncount  951111.000000  1.152303e+06  951111.000000  951111.000000   \nmean     2400.250366  8.998028e+01   -3978.775967     173.841000   \nstd       657.753668  1.547512e-02    4436.407717     102.096778   \nmin       758.443700  8.990720e+01  -19177.676000       0.415929   \n25%      1948.688100  8.997688e+01   -6479.865000     101.168440   \n50%      2468.187000  8.998582e+01   -3720.545200     169.149630   \n75%      2924.415500  8.999000e+01    -657.843500     254.958680   \nmax      3823.384800  8.999648e+01    9069.726000     358.656280   \n            eastness      northness           fsca          SWE_1  \\\ncount  951111.000000  951111.000000  802191.000000  950868.000000   \nmean        0.061198      -0.052610     126.431217      50.494015   \nstd         0.524249       0.636747     117.142750      95.502541   \nmin        -0.785344      -0.785369       0.000000       0.000000   \n25%        -0.398911      -0.735620       0.000000       0.000000   \n50%         0.140316      -0.193049      69.000000       0.000000   \n75%         0.577196       0.649554     250.000000      35.000000   \nmax         0.785398       0.785385     255.000000     255.000000   \n              Flag_1  air_temperature_tmmn_1  potential_evapotranspiration_1  \\\ncount  950868.000000            1.022457e+06                    1.022457e+06   \nmean      243.446731            2.720198e+02                    3.944135e+00   \nstd         5.316436            8.385519e+00                    2.478454e+00   \nmin       241.000000            2.328000e+02                    0.000000e+00   \n25%       241.000000            2.663000e+02                    1.900000e+00   \n50%       241.000000            2.722000e+02                    3.500000e+00   \n75%       241.000000            2.784000e+02                    5.800000e+00   \nmax       255.000000            2.983000e+02                    1.510000e+01   \n       mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\ncount                   1.022457e+06              1.022457e+06   \nmean                    6.259842e-01              7.122990e+01   \nstd                     5.233073e-01              2.030013e+01   \nmin                     0.000000e+00              8.200000e+00   \n25%                     2.100000e-01              5.560000e+01   \n50%                     4.700000e-01              7.240000e+01   \n75%                     9.300000e-01              8.820000e+01   \nmax                     3.870000e+00              1.000000e+02   \n       relative_humidity_rmin_1  precipitation_amount_1  \\\ncount              1.022457e+06            1.022457e+06   \nmean               3.577147e+01            2.684194e+00   \nstd                1.887389e+01            7.433182e+00   \nmin                1.000000e+00            0.000000e+00   \n25%                2.130000e+01            0.000000e+00   \n50%                3.160000e+01            0.000000e+00   \n75%                4.740000e+01            2.200000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_1  wind_speed_1         fsca_1          SWE_2  \\\ncount            1.022457e+06  1.022457e+06  802191.000000  950625.000000   \nmean             2.837504e+02  4.214878e+00     126.431217      50.497704   \nstd              9.912640e+00  2.043577e+00     117.142750      95.505929   \nmin              2.444000e+02  5.000000e-01       0.000000       0.000000   \n25%              2.759000e+02  2.800000e+00       0.000000       0.000000   \n50%              2.831000e+02  3.700000e+00      69.000000       0.000000   \n75%              2.920000e+02  5.200000e+00     250.000000      35.000000   \nmax              3.144000e+02  1.860000e+01     255.000000     255.000000   \n              Flag_2  air_temperature_tmmn_2  potential_evapotranspiration_2  \\\ncount  950625.000000            1.022214e+06                    1.022214e+06   \nmean      243.446944            2.720209e+02                    3.944851e+00   \nstd         5.316618            8.385815e+00                    2.478297e+00   \nmin       241.000000            2.328000e+02                    0.000000e+00   \n25%       241.000000            2.663000e+02                    1.900000e+00   \n50%       241.000000            2.722000e+02                    3.500000e+00   \n75%       241.000000            2.784000e+02                    5.800000e+00   \nmax       255.000000            2.983000e+02                    1.510000e+01   \n       mean_vapor_pressure_deficit_2  relative_humidity_rmax_2  \\\ncount                   1.022214e+06              1.022214e+06   \nmean                    6.261075e-01              7.122478e+01   \nstd                     5.233070e-01              2.029937e+01   \nmin                     0.000000e+00              8.200000e+00   \n25%                     2.100000e-01              5.560000e+01   \n50%                     4.700000e-01              7.230000e+01   \n75%                     9.300000e-01              8.820000e+01   \nmax                     3.870000e+00              1.000000e+02   \n       relative_humidity_rmin_2  precipitation_amount_2  \\\ncount              1.022214e+06            1.022214e+06   \nmean               3.576392e+01            2.680426e+00   \nstd                1.886841e+01            7.420497e+00   \nmin                1.000000e+00            0.000000e+00   \n25%                2.130000e+01            0.000000e+00   \n50%                3.160000e+01            0.000000e+00   \n75%                4.730000e+01            2.200000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_2  wind_speed_2         fsca_2          SWE_3  \\\ncount            1.022214e+06  1.022214e+06  802191.000000  950382.000000   \nmean             2.837528e+02  4.214727e+00     126.431217      50.501449   \nstd              9.912443e+00  2.043506e+00     117.142750      95.509949   \nmin              2.444000e+02  5.000000e-01       0.000000       0.000000   \n25%              2.759000e+02  2.800000e+00       0.000000       0.000000   \n50%              2.831000e+02  3.700000e+00      69.000000       0.000000   \n75%              2.920000e+02  5.200000e+00     250.000000      35.000000   \nmax              3.144000e+02  1.860000e+01     255.000000     255.000000   \n              Flag_3  air_temperature_tmmn_3  potential_evapotranspiration_3  \\\ncount  950382.000000            1.021971e+06                    1.021971e+06   \nmean      243.447186            2.720225e+02                    3.945581e+00   \nstd         5.316826            8.385741e+00                    2.478126e+00   \nmin       241.000000            2.328000e+02                    0.000000e+00   \n25%       241.000000            2.663000e+02                    1.900000e+00   \n50%       241.000000            2.722000e+02                    3.500000e+00   \n75%       241.000000            2.784000e+02                    5.800000e+00   \nmax       255.000000            2.983000e+02                    1.510000e+01   \n       mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\ncount                   1.021971e+06              1.021971e+06   \nmean                    6.262307e-01              7.121986e+01   \nstd                     5.233067e-01              2.029864e+01   \nmin                     0.000000e+00              8.200000e+00   \n25%                     2.100000e-01              5.550000e+01   \n50%                     4.700000e-01              7.230000e+01   \n75%                     9.300000e-01              8.820000e+01   \nmax                     3.870000e+00              1.000000e+02   \n       relative_humidity_rmin_3  precipitation_amount_3  \\\ncount              1.021971e+06            1.021971e+06   \nmean               3.575711e+01            2.678322e+00   \nstd                1.886382e+01            7.414806e+00   \nmin                1.000000e+00            0.000000e+00   \n25%                2.130000e+01            0.000000e+00   \n50%                3.160000e+01            0.000000e+00   \n75%                4.730000e+01            2.200000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_3  wind_speed_3         fsca_3          SWE_4  \\\ncount            1.021971e+06  1.021971e+06  802191.000000  950139.000000   \nmean             2.837556e+02  4.214655e+00     126.431217      50.500756   \nstd              9.911805e+00  2.043569e+00     117.142750      95.509284   \nmin              2.444000e+02  5.000000e-01       0.000000       0.000000   \n25%              2.759000e+02  2.800000e+00       0.000000       0.000000   \n50%              2.831000e+02  3.700000e+00      69.000000       0.000000   \n75%              2.920000e+02  5.200000e+00     250.000000      35.000000   \nmax              3.144000e+02  1.860000e+01     255.000000     255.000000   \n              Flag_4  air_temperature_tmmn_4  potential_evapotranspiration_4  \\\ncount  950139.000000            1.021728e+06                    1.021728e+06   \nmean      243.447135            2.720240e+02                    3.946313e+00   \nstd         5.316781            8.385866e+00                    2.477953e+00   \nmin       241.000000            2.328000e+02                    0.000000e+00   \n25%       241.000000            2.663000e+02                    1.900000e+00   \n50%       241.000000            2.722000e+02                    3.500000e+00   \n75%       241.000000            2.784000e+02                    5.800000e+00   \nmax       255.000000            2.983000e+02                    1.510000e+01   \n       mean_vapor_pressure_deficit_4  relative_humidity_rmax_4  \\\ncount                   1.021728e+06              1.021728e+06   \nmean                    6.263553e-01              7.121508e+01   \nstd                     5.233051e-01              2.029788e+01   \nmin                     0.000000e+00              8.200000e+00   \n25%                     2.100000e-01              5.550000e+01   \n50%                     4.700000e-01              7.230000e+01   \n75%                     9.300000e-01              8.820000e+01   \nmax                     3.870000e+00              1.000000e+02   \n       relative_humidity_rmin_4  precipitation_amount_4  \\\ncount              1.021728e+06            1.021728e+06   \nmean               3.575005e+01            2.676063e+00   \nstd                1.885871e+01            7.407503e+00   \nmin                1.000000e+00            0.000000e+00   \n25%                2.130000e+01            0.000000e+00   \n50%                3.160000e+01            0.000000e+00   \n75%                4.730000e+01            2.200000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_4  wind_speed_4         fsca_4          SWE_5  \\\ncount            1.021728e+06  1.021728e+06  802191.000000  949896.000000   \nmean             2.837582e+02  4.214480e+00     126.431217      50.500290   \nstd              9.911412e+00  2.043561e+00     117.142750      95.508834   \nmin              2.444000e+02  5.000000e-01       0.000000       0.000000   \n25%              2.759000e+02  2.800000e+00       0.000000       0.000000   \n50%              2.831000e+02  3.700000e+00      69.000000       0.000000   \n75%              2.920000e+02  5.200000e+00     250.000000      35.000000   \nmax              3.144000e+02  1.860000e+01     255.000000     255.000000   \n              Flag_5  air_temperature_tmmn_5  potential_evapotranspiration_5  \\\ncount  949896.000000            1.021485e+06                    1.021485e+06   \nmean      243.447097            2.720251e+02                    3.946977e+00   \nstd         5.316749            8.386260e+00                    2.477838e+00   \nmin       241.000000            2.328000e+02                    0.000000e+00   \n25%       241.000000            2.663000e+02                    1.900000e+00   \n50%       241.000000            2.722000e+02                    3.500000e+00   \n75%       241.000000            2.784000e+02                    5.800000e+00   \nmax       255.000000            2.983000e+02                    1.510000e+01   \n       mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\ncount                   1.021485e+06              1.021485e+06   \nmean                    6.264743e-01              7.121038e+01   \nstd                     5.233079e-01              2.029716e+01   \nmin                     0.000000e+00              8.200000e+00   \n25%                     2.100000e-01              5.550000e+01   \n50%                     4.700000e-01              7.230000e+01   \n75%                     9.300000e-01              8.820000e+01   \nmax                     3.870000e+00              1.000000e+02   \n       relative_humidity_rmin_5  precipitation_amount_5  \\\ncount              1.021485e+06            1.021485e+06   \nmean               3.574323e+01            2.671586e+00   \nstd                1.885367e+01            7.391348e+00   \nmin                1.000000e+00            0.000000e+00   \n25%                2.130000e+01            0.000000e+00   \n50%                3.160000e+01            0.000000e+00   \n75%                4.730000e+01            2.200000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_5  wind_speed_5         fsca_5          SWE_6  \\\ncount            1.021485e+06  1.021485e+06  802191.000000  949653.000000   \nmean             2.837604e+02  4.213970e+00     126.431217      50.495453   \nstd              9.911360e+00  2.043077e+00     117.142750      95.505265   \nmin              2.444000e+02  5.000000e-01       0.000000       0.000000   \n25%              2.759000e+02  2.800000e+00       0.000000       0.000000   \n50%              2.831000e+02  3.700000e+00      69.000000       0.000000   \n75%              2.920000e+02  5.200000e+00     250.000000      35.000000   \nmax              3.144000e+02  1.860000e+01     255.000000     255.000000   \n              Flag_6  air_temperature_tmmn_6  potential_evapotranspiration_6  \\\ncount  949653.000000            1.021242e+06                    1.021242e+06   \nmean      243.446839            2.720261e+02                    3.947557e+00   \nstd         5.316528            8.386646e+00                    2.477784e+00   \nmin       241.000000            2.328000e+02                    0.000000e+00   \n25%       241.000000            2.663000e+02                    1.900000e+00   \n50%       241.000000            2.722000e+02                    3.500000e+00   \n75%       241.000000            2.784000e+02                    5.800000e+00   \nmax       255.000000            2.983000e+02                    1.510000e+01   \n       mean_vapor_pressure_deficit_6  relative_humidity_rmax_6  \\\ncount                   1.021242e+06              1.021242e+06   \nmean                    6.265698e-01              7.120807e+01   \nstd                     5.233230e-01              2.029666e+01   \nmin                     0.000000e+00              8.200000e+00   \n25%                     2.100000e-01              5.550000e+01   \n50%                     4.700000e-01              7.230000e+01   \n75%                     9.300000e-01              8.820000e+01   \nmax                     3.870000e+00              1.000000e+02   \n       relative_humidity_rmin_6  precipitation_amount_6  \\\ncount              1.021242e+06            1.021242e+06   \nmean               3.573869e+01            2.669114e+00   \nstd                1.885002e+01            7.382468e+00   \nmin                1.000000e+00            0.000000e+00   \n25%                2.130000e+01            0.000000e+00   \n50%                3.160000e+01            0.000000e+00   \n75%                4.730000e+01            2.200000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_6  wind_speed_6         fsca_6          SWE_7  \\\ncount            1.021242e+06  1.021242e+06  802191.000000  949410.000000   \nmean             2.837624e+02  4.213803e+00     126.431217      50.489223   \nstd              9.911429e+00  2.043086e+00     117.142750      95.499980   \nmin              2.444000e+02  5.000000e-01       0.000000       0.000000   \n25%              2.759000e+02  2.800000e+00       0.000000       0.000000   \n50%              2.831000e+02  3.700000e+00      69.000000       0.000000   \n75%              2.920000e+02  5.200000e+00     250.000000      35.000000   \nmax              3.144000e+02  1.860000e+01     255.000000     255.000000   \n              Flag_7  air_temperature_tmmn_7  potential_evapotranspiration_7  \\\ncount  949410.000000            1.020999e+06                    1.020999e+06   \nmean      243.446477            2.720272e+02                    3.948178e+00   \nstd         5.316218            8.386879e+00                    2.477719e+00   \nmin       241.000000            2.328000e+02                    0.000000e+00   \n25%       241.000000            2.663000e+02                    1.900000e+00   \n50%       241.000000            2.722000e+02                    3.500000e+00   \n75%       241.000000            2.784000e+02                    5.800000e+00   \nmax       255.000000            2.983000e+02                    1.510000e+01   \n       mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\ncount                   1.020999e+06              1.020999e+06   \nmean                    6.266652e-01              7.120526e+01   \nstd                     5.233356e-01              2.029610e+01   \nmin                     0.000000e+00              8.200000e+00   \n25%                     2.100000e-01              5.550000e+01   \n50%                     4.700000e-01              7.230000e+01   \n75%                     9.300000e-01              8.820000e+01   \nmax                     3.870000e+00              1.000000e+02   \n       relative_humidity_rmin_7  precipitation_amount_7  \\\ncount              1.020999e+06            1.020999e+06   \nmean               3.573404e+01            2.667432e+00   \nstd                1.884648e+01            7.375934e+00   \nmin                1.000000e+00            0.000000e+00   \n25%                2.130000e+01            0.000000e+00   \n50%                3.160000e+01            0.000000e+00   \n75%                4.730000e+01            2.200000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_7  wind_speed_7         fsca_7  \ncount            1.020999e+06  1.020999e+06  802191.000000  \nmean             2.837644e+02  4.213598e+00     126.431217  \nstd              9.911386e+00  2.042980e+00     117.142750  \nmin              2.444000e+02  5.000000e-01       0.000000  \n25%              2.759000e+02  2.800000e+00       0.000000  \n50%              2.831000e+02  3.700000e+00      69.000000  \n75%              2.920000e+02  5.200000e+00     250.000000  \nmax              3.144000e+02  1.860000e+01     255.000000  \nThis is our unique years [2018 2019 2020 2021 2022]\nhow many rows are left in the three water years?                  lat            lon            SWE           Flag  \\\ncount  797888.000000  797888.000000  713496.000000  713496.000000   \nmean       41.615630    -114.130327      50.335017     243.447882   \nstd         3.643291       5.447167      95.572211       5.317320   \nmin        33.358254    -123.448583       0.000000     241.000000   \n25%        38.911155    -119.666675       0.000000     241.000000   \n50%        40.939712    -113.585082       0.000000     241.000000   \n75%        44.613976    -110.000804      35.000000     241.000000   \nmax        48.971066    -105.194817     255.000000     255.000000   \n           swe_value  potential_evapotranspiration  precipitation_amount  \\\ncount  712845.000000                 767200.000000         767200.000000   \nmean        2.661918                      4.024112              2.485314   \nstd         3.989611                      2.504920              7.038737   \nmin         0.000000                      0.000000              0.000000   \n25%         0.000000                      1.900000              0.000000   \n50%         0.000000                      3.600000              0.000000   \n75%         5.900000                      5.900000              2.000000   \nmax        14.300000                     15.100000            504.200000   \n       relative_humidity_rmax  relative_humidity_rmin  air_temperature_tmmn  \\\ncount           767200.000000           767200.000000         767200.000000   \nmean                70.041987               35.022455            272.261304   \nstd                 20.604479               18.817779              8.334684   \nmin                  8.200000                1.000000            238.000000   \n25%                 53.900000               20.600000            266.600000   \n50%                 71.000000               30.900000            272.300000   \n75%                 87.100000               46.400000            278.600000   \nmax                100.000000              100.000000            298.300000   \n       air_temperature_tmmx  mean_vapor_pressure_deficit     wind_speed  \\\ncount         767200.000000                767200.000000  767200.000000   \nmean             284.033753                     0.647127       4.221713   \nstd                9.892099                     0.537530       2.039676   \nmin              248.700000                     0.000000       0.500000   \n25%              276.200000                     0.220000       2.800000   \n50%              283.300000                     0.480000       3.800000   \n75%              292.300000                     0.960000       5.200000   \nmax              314.400000                     3.870000      18.600000   \n           elevation          slope      curvature         aspect  \\\ncount  713496.000000  797888.000000  713496.000000  713496.000000   \nmean     2400.250366      89.980194   -3978.775967     173.841000   \nstd       657.753783       0.015543    4436.408493     102.096796   \nmin       758.443700      89.907196  -19177.676000       0.415929   \n25%      1948.688100      89.976875   -6479.865000     101.168440   \n50%      2468.187000      89.985710   -3720.545200     169.149630   \n75%      2924.415500      89.989990    -657.843500     254.958680   \nmax      3823.384800      89.996475    9069.726000     358.656280   \n            eastness      northness           fsca          SWE_1  \\\ncount  713496.000000  713496.000000  535773.000000  713496.000000   \nmean        0.061198      -0.052610     122.514533      50.326516   \nstd         0.524249       0.636747     117.046903      95.565266   \nmin        -0.785344      -0.785369       0.000000       0.000000   \n25%        -0.398911      -0.735620       0.000000       0.000000   \n50%         0.140316      -0.193049      64.000000       0.000000   \n75%         0.577196       0.649554     250.000000      35.000000   \nmax         0.785398       0.785385     255.000000     255.000000   \n              Flag_1  air_temperature_tmmn_1  potential_evapotranspiration_1  \\\ncount  713496.000000           767200.000000                   767200.000000   \nmean      243.447411              272.259492                        4.024137   \nstd         5.316916                8.334653                        2.505176   \nmin       241.000000              238.000000                        0.000000   \n25%       241.000000              266.600000                        1.900000   \n50%       241.000000              272.300000                        3.600000   \n75%       241.000000              278.600000                        5.900000   \nmax       255.000000              298.300000                       15.100000   \n       mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\ncount                  767200.000000             767200.000000   \nmean                        0.647076                 70.040419   \nstd                         0.537543                 20.604568   \nmin                         0.000000                  8.200000   \n25%                         0.220000                 53.900000   \n50%                         0.480000                 71.000000   \n75%                         0.960000                 87.100000   \nmax                         3.870000                100.000000   \n       relative_humidity_rmin_1  precipitation_amount_1  \\\ncount             767200.000000           767200.000000   \nmean                  35.022552                2.484736   \nstd                   18.818393                7.038488   \nmin                    1.000000                0.000000   \n25%                   20.600000                0.000000   \n50%                   30.900000                0.000000   \n75%                   46.400000                2.000000   \nmax                  100.000000              504.200000   \n       air_temperature_tmmx_1   wind_speed_1         fsca_1          SWE_2  \\\ncount           767200.000000  767200.000000  536016.000000  713496.000000   \nmean               284.031583       4.222192     122.512431      50.320798   \nstd                  9.892455       2.040115     117.050025      95.560648   \nmin                248.700000       0.500000       0.000000       0.000000   \n25%                276.200000       2.800000       0.000000       0.000000   \n50%                283.300000       3.800000      64.000000       0.000000   \n75%                292.300000       5.200000     250.000000      35.000000   \nmax                314.400000      18.600000     255.000000     255.000000   \n              Flag_2  air_temperature_tmmn_2  potential_evapotranspiration_2  \\\ncount  713496.000000           767200.000000                   767200.000000   \nmean      243.447097              272.257565                        4.023965   \nstd         5.316648                8.334572                        2.505408   \nmin       241.000000              238.000000                        0.000000   \n25%       241.000000              266.600000                        1.900000   \n50%       241.000000              272.300000                        3.600000   \n75%       241.000000              278.600000                        5.900000   \nmax       255.000000              298.300000                       15.100000   \n       mean_vapor_pressure_deficit_2  relative_humidity_rmax_2  \\\ncount                  767200.000000             767200.000000   \nmean                        0.646991                 70.041094   \nstd                         0.537558                 20.604445   \nmin                         0.000000                  8.200000   \n25%                         0.220000                 53.900000   \n50%                         0.480000                 71.000000   \n75%                         0.960000                 87.100000   \nmax                         3.870000                100.000000   \n       relative_humidity_rmin_2  precipitation_amount_2  \\\ncount             767200.000000           767200.000000   \nmean                  35.025048                2.484644   \nstd                   18.819945                7.038449   \nmin                    1.000000                0.000000   \n25%                   20.600000                0.000000   \n50%                   30.900000                0.000000   \n75%                   46.400000                2.000000   \nmax                  100.000000              504.200000   \n       air_temperature_tmmx_2   wind_speed_2         fsca_2          SWE_3  \\\ncount           767200.000000  767200.000000  536259.000000  713496.000000   \nmean               284.028983       4.222740     122.521101      50.318296   \nstd                  9.892864       2.040883     117.053468      95.558628   \nmin                248.700000       0.500000       0.000000       0.000000   \n25%                276.200000       2.800000       0.000000       0.000000   \n50%                283.300000       3.800000      64.000000       0.000000   \n75%                292.300000       5.200000     250.000000      35.000000   \nmax                314.400000      18.600000     255.000000     255.000000   \n             Flag_3  air_temperature_tmmn_3  potential_evapotranspiration_3  \\\ncount  713496.00000           767200.000000                   767200.000000   \nmean      243.44696              272.255493                        4.023631   \nstd         5.31653                8.334143                        2.505544   \nmin       241.00000              238.000000                        0.000000   \n25%       241.00000              266.600000                        1.900000   \n50%       241.00000              272.300000                        3.600000   \n75%       241.00000              278.600000                        5.900000   \nmax       255.00000              298.300000                       15.100000   \n       mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\ncount                  767200.000000             767200.000000   \nmean                        0.646874                 70.045193   \nstd                         0.537558                 20.604698   \nmin                         0.000000                  8.200000   \n25%                         0.220000                 53.900000   \n50%                         0.480000                 71.000000   \n75%                         0.960000                 87.100000   \nmax                         3.870000                100.000000   \n       relative_humidity_rmin_3  precipitation_amount_3  \\\ncount             767200.000000           767200.000000   \nmean                  35.029034                2.484949   \nstd                   18.822219                7.038722   \nmin                    1.000000                0.000000   \n25%                   20.600000                0.000000   \n50%                   30.900000                0.000000   \n75%                   46.400000                2.000000   \nmax                  100.000000              504.200000   \n       air_temperature_tmmx_3   wind_speed_3         fsca_3          SWE_4  \\\ncount           767200.000000  767200.000000  536502.000000  713496.000000   \nmean               284.026528       4.223269     122.526248      50.311148   \nstd                  9.892944       2.041410     117.056690      95.552854   \nmin                248.700000       0.500000       0.000000       0.000000   \n25%                276.200000       2.800000       0.000000       0.000000   \n50%                283.300000       3.800000      64.000000       0.000000   \n75%                292.300000       5.200000     250.000000      35.000000   \nmax                314.400000      18.600000     255.000000     255.000000   \n              Flag_4  air_temperature_tmmn_4  potential_evapotranspiration_4  \\\ncount  713496.000000           767200.000000                   767200.000000   \nmean      243.446567              272.253844                        4.023396   \nstd         5.316194                8.333654                        2.505659   \nmin       241.000000              238.000000                        0.000000   \n25%       241.000000              266.600000                        1.900000   \n50%       241.000000              272.300000                        3.600000   \n75%       241.000000              278.600000                        5.900000   \nmax       255.000000              298.300000                       15.100000   \n       mean_vapor_pressure_deficit_4  relative_humidity_rmax_4  \\\ncount                  767200.000000             767200.000000   \nmean                        0.646762                 70.048777   \nstd                         0.537535                 20.604025   \nmin                         0.000000                  8.200000   \n25%                         0.220000                 53.900000   \n50%                         0.480000                 71.000000   \n75%                         0.960000                 87.100000   \nmax                         3.870000                100.000000   \n       relative_humidity_rmin_4  precipitation_amount_4  \\\ncount             767200.000000           767200.000000   \nmean                  35.032820                2.485223   \nstd                   18.823806                7.038887   \nmin                    1.000000                0.000000   \n25%                   20.600000                0.000000   \n50%                   30.900000                0.000000   \n75%                   46.400000                2.000000   \nmax                  100.000000              504.200000   \n       air_temperature_tmmx_4   wind_speed_4         fsca_4         SWE_5  \\\ncount           767200.000000  767200.000000  536745.000000  713496.00000   \nmean               284.024386       4.223736     122.526909      50.31222   \nstd                  9.892878       2.041711     117.059882      95.55372   \nmin                248.700000       0.500000       0.000000       0.00000   \n25%                276.200000       2.800000       0.000000       0.00000   \n50%                283.300000       3.800000      64.000000       0.00000   \n75%                292.300000       5.200000     250.000000      35.00000   \nmax                314.400000      18.600000     255.000000     255.00000   \n              Flag_5  air_temperature_tmmn_5  potential_evapotranspiration_5  \\\ncount  713496.000000           767200.000000                   767200.000000   \nmean      243.446626              272.252317                        4.023200   \nstd         5.316244                8.333121                        2.505814   \nmin       241.000000              238.000000                        0.000000   \n25%       241.000000              266.600000                        1.900000   \n50%       241.000000              272.300000                        3.600000   \n75%       241.000000              278.600000                        5.900000   \nmax       255.000000              298.300000                       15.100000   \n       mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\ncount                  767200.000000             767200.000000   \nmean                        0.646653                 70.052329   \nstd                         0.537511                 20.603616   \nmin                         0.000000                  8.200000   \n25%                         0.220000                 53.900000   \n50%                         0.480000                 71.000000   \n75%                         0.960000                 87.100000   \nmax                         3.870000                100.000000   \n       relative_humidity_rmin_5  precipitation_amount_5  \\\ncount             767200.000000           767200.000000   \nmean                  35.036577                2.485695   \nstd                   18.825852                7.039300   \nmin                    1.000000                0.000000   \n25%                   20.600000                0.000000   \n50%                   30.900000                0.000000   \n75%                   46.400000                2.000000   \nmax                  100.000000              504.200000   \n       air_temperature_tmmx_5   wind_speed_5         fsca_5          SWE_6  \\\ncount           767200.000000  767200.000000  536988.000000  713496.000000   \nmean               284.022421       4.224254     122.525898      50.310791   \nstd                  9.892795       2.041994     117.063270      95.552565   \nmin                248.700000       0.500000       0.000000       0.000000   \n25%                276.200000       2.800000       0.000000       0.000000   \n50%                283.300000       3.800000      64.000000       0.000000   \n75%                292.300000       5.200000     250.000000      35.000000   \nmax                314.400000      18.600000     255.000000     255.000000   \n              Flag_6  air_temperature_tmmn_6  potential_evapotranspiration_6  \\\ncount  713496.000000           767200.000000                   767200.000000   \nmean      243.446548              272.250904                        4.022913   \nstd         5.316177                8.332727                        2.505968   \nmin       241.000000              238.000000                        0.000000   \n25%       241.000000              266.600000                        1.900000   \n50%       241.000000              272.300000                        3.600000   \n75%       241.000000              278.600000                        5.900000   \nmax       255.000000              298.300000                       15.100000   \n       mean_vapor_pressure_deficit_6  relative_humidity_rmax_6  \\\ncount                  767200.000000             767200.000000   \nmean                        0.646554                 70.055568   \nstd                         0.537508                 20.603884   \nmin                         0.000000                  8.200000   \n25%                         0.220000                 53.900000   \n50%                         0.480000                 71.000000   \n75%                         0.960000                 87.200000   \nmax                         3.870000                100.000000   \n       relative_humidity_rmin_6  precipitation_amount_6  \\\ncount             767200.000000           767200.000000   \nmean                  35.040710                2.486229   \nstd                   18.828492                7.039703   \nmin                    1.000000                0.000000   \n25%                   20.600000                0.000000   \n50%                   30.900000                0.000000   \n75%                   46.400000                2.000000   \nmax                  100.000000              504.200000   \n       air_temperature_tmmx_6   wind_speed_6         fsca_6          SWE_7  \\\ncount           767200.000000  767200.000000  537231.000000  713496.000000   \nmean               284.020433       4.224612     122.516556      50.315437   \nstd                  9.892841       2.042310     117.066434      95.556318   \nmin                248.700000       0.500000       0.000000       0.000000   \n25%                276.200000       2.800000       0.000000       0.000000   \n50%                283.300000       3.800000      64.000000       0.000000   \n75%                292.300000       5.200000     250.000000      35.000000   \nmax                314.400000      18.600000     255.000000     255.000000   \n              Flag_7  air_temperature_tmmn_7  potential_evapotranspiration_7  \\\ncount  713496.000000           767200.000000                   767200.000000   \nmean      243.446803              272.249559                        4.022624   \nstd         5.316396                8.332266                        2.506123   \nmin       241.000000              238.000000                        0.000000   \n25%       241.000000              266.600000                        1.900000   \n50%       241.000000              272.300000                        3.600000   \n75%       241.000000              278.600000                        5.900000   \nmax       255.000000              298.300000                       15.100000   \n       mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\ncount                  767200.000000             767200.000000   \nmean                        0.646440                 70.059453   \nstd                         0.537498                 20.604642   \nmin                         0.000000                  8.200000   \n25%                         0.220000                 53.900000   \n50%                         0.480000                 71.000000   \n75%                         0.960000                 87.200000   \nmax                         3.870000                100.000000   \n       relative_humidity_rmin_7  precipitation_amount_7  \\\ncount             767200.000000           767200.000000   \nmean                  35.045342                2.486815   \nstd                   18.831274                7.040030   \nmin                    1.000000                0.000000   \n25%                   20.600000                0.000000   \n50%                   30.900000                0.000000   \n75%                   46.400000                2.000000   \nmax                  100.000000              504.200000   \n       air_temperature_tmmx_7   wind_speed_7         fsca_7  \ncount           767200.000000  767200.000000  537474.000000  \nmean               284.018453       4.225047     122.506825  \nstd                  9.892653       2.042543     117.069695  \nmin                248.700000       0.500000       0.000000  \n25%                276.200000       2.800000       0.000000  \n50%                283.300000       3.800000      64.000000  \n75%                292.300000       5.200000     250.000000  \nmax                314.400000      18.600000     255.000000  \nhow many groups?  <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7f9c90fef610>\nAll the columns should have missing values filled:                   lat            lon            SWE           Flag  \\\ncount  797888.000000  797888.000000  713496.000000  713496.000000   \nmean       41.615630    -114.130327       7.053092     243.447882   \nstd         3.643291       5.447167      17.546653       5.317320   \nmin        33.358254    -123.448583       0.000000     241.000000   \n25%        38.911155    -119.666675       0.000000     241.000000   \n50%        40.939712    -113.585082       0.000000     241.000000   \n75%        44.613976    -110.000804       0.000000     241.000000   \nmax        48.971066    -105.194817     197.000000     255.000000   \n           swe_value  potential_evapotranspiration  precipitation_amount  \\\ncount  712845.000000                 767200.000000         767200.000000   \nmean        2.661918                      4.024112              2.485314   \nstd         3.989611                      2.504920              7.038737   \nmin         0.000000                      0.000000              0.000000   \n25%         0.000000                      1.900000              0.000000   \n50%         0.000000                      3.600000              0.000000   \n75%         5.900000                      5.900000              2.000000   \nmax        14.300000                     15.100000            504.200000   \n       relative_humidity_rmax  relative_humidity_rmin  air_temperature_tmmn  \\\ncount           767200.000000           767200.000000         767200.000000   \nmean                70.041987               35.022455            272.261304   \nstd                 20.604479               18.817779              8.334684   \nmin                  8.200000                1.000000            238.000000   \n25%                 53.900000               20.600000            266.600000   \n50%                 71.000000               30.900000            272.300000   \n75%                 87.100000               46.400000            278.600000   \nmax                100.000000              100.000000            298.300000   \n       air_temperature_tmmx  mean_vapor_pressure_deficit     wind_speed  \\\ncount         767200.000000                767200.000000  767200.000000   \nmean             284.033753                     0.647127       4.221713   \nstd                9.892099                     0.537530       2.039676   \nmin              248.700000                     0.000000       0.500000   \n25%              276.200000                     0.220000       2.800000   \n50%              283.300000                     0.480000       3.800000   \n75%              292.300000                     0.960000       5.200000   \nmax              314.400000                     3.870000      18.600000   \n           elevation          slope      curvature         aspect  \\\ncount  713496.000000  797888.000000  713496.000000  713496.000000   \nmean     2400.250366      89.980194   -3978.775967     173.841000   \nstd       657.753783       0.015543    4436.408493     102.096796   \nmin       758.443700      89.907196  -19177.676000       0.415929   \n25%      1948.688100      89.976875   -6479.865000     101.168440   \n50%      2468.187000      89.985710   -3720.545200     169.149630   \n75%      2924.415500      89.989990    -657.843500     254.958680   \nmax      3823.384800      89.996475    9069.726000     358.656280   \n            eastness      northness           fsca          SWE_1  \\\ncount  713496.000000  713496.000000  535773.000000  713496.000000   \nmean        0.061198      -0.052610     122.514533      50.326516   \nstd         0.524249       0.636747     117.046903      95.565266   \nmin        -0.785344      -0.785369       0.000000       0.000000   \n25%        -0.398911      -0.735620       0.000000       0.000000   \n50%         0.140316      -0.193049      64.000000       0.000000   \n75%         0.577196       0.649554     250.000000      35.000000   \nmax         0.785398       0.785385     255.000000     255.000000   \n              Flag_1  air_temperature_tmmn_1  potential_evapotranspiration_1  \\\ncount  713496.000000           767200.000000                   767200.000000   \nmean      243.447411              272.259492                        4.024137   \nstd         5.316916                8.334653                        2.505176   \nmin       241.000000              238.000000                        0.000000   \n25%       241.000000              266.600000                        1.900000   \n50%       241.000000              272.300000                        3.600000   \n75%       241.000000              278.600000                        5.900000   \nmax       255.000000              298.300000                       15.100000   \n       mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\ncount                  767200.000000             767200.000000   \nmean                        0.647076                 70.040419   \nstd                         0.537543                 20.604568   \nmin                         0.000000                  8.200000   \n25%                         0.220000                 53.900000   \n50%                         0.480000                 71.000000   \n75%                         0.960000                 87.100000   \nmax                         3.870000                100.000000   \n       relative_humidity_rmin_1  precipitation_amount_1  \\\ncount             767200.000000           767200.000000   \nmean                  35.022552                2.484736   \nstd                   18.818393                7.038488   \nmin                    1.000000                0.000000   \n25%                   20.600000                0.000000   \n50%                   30.900000                0.000000   \n75%                   46.400000                2.000000   \nmax                  100.000000              504.200000   \n       air_temperature_tmmx_1   wind_speed_1         fsca_1          SWE_2  \\\ncount           767200.000000  767200.000000  536016.000000  713496.000000   \nmean               284.031583       4.222192     122.512431      50.320798   \nstd                  9.892455       2.040115     117.050025      95.560648   \nmin                248.700000       0.500000       0.000000       0.000000   \n25%                276.200000       2.800000       0.000000       0.000000   \n50%                283.300000       3.800000      64.000000       0.000000   \n75%                292.300000       5.200000     250.000000      35.000000   \nmax                314.400000      18.600000     255.000000     255.000000   \n              Flag_2  air_temperature_tmmn_2  potential_evapotranspiration_2  \\\ncount  713496.000000           767200.000000                   767200.000000   \nmean      243.447097              272.257565                        4.023965   \nstd         5.316648                8.334572                        2.505408   \nmin       241.000000              238.000000                        0.000000   \n25%       241.000000              266.600000                        1.900000   \n50%       241.000000              272.300000                        3.600000   \n75%       241.000000              278.600000                        5.900000   \nmax       255.000000              298.300000                       15.100000   \n       mean_vapor_pressure_deficit_2  relative_humidity_rmax_2  \\\ncount                  767200.000000             767200.000000   \nmean                        0.646991                 70.041094   \nstd                         0.537558                 20.604445   \nmin                         0.000000                  8.200000   \n25%                         0.220000                 53.900000   \n50%                         0.480000                 71.000000   \n75%                         0.960000                 87.100000   \nmax                         3.870000                100.000000   \n       relative_humidity_rmin_2  precipitation_amount_2  \\\ncount             767200.000000           767200.000000   \nmean                  35.025048                2.484644   \nstd                   18.819945                7.038449   \nmin                    1.000000                0.000000   \n25%                   20.600000                0.000000   \n50%                   30.900000                0.000000   \n75%                   46.400000                2.000000   \nmax                  100.000000              504.200000   \n       air_temperature_tmmx_2   wind_speed_2         fsca_2          SWE_3  \\\ncount           767200.000000  767200.000000  536259.000000  713496.000000   \nmean               284.028983       4.222740     122.521101      50.318296   \nstd                  9.892864       2.040883     117.053468      95.558628   \nmin                248.700000       0.500000       0.000000       0.000000   \n25%                276.200000       2.800000       0.000000       0.000000   \n50%                283.300000       3.800000      64.000000       0.000000   \n75%                292.300000       5.200000     250.000000      35.000000   \nmax                314.400000      18.600000     255.000000     255.000000   \n             Flag_3  air_temperature_tmmn_3  potential_evapotranspiration_3  \\\ncount  713496.00000           767200.000000                   767200.000000   \nmean      243.44696              272.255493                        4.023631   \nstd         5.31653                8.334143                        2.505544   \nmin       241.00000              238.000000                        0.000000   \n25%       241.00000              266.600000                        1.900000   \n50%       241.00000              272.300000                        3.600000   \n75%       241.00000              278.600000                        5.900000   \nmax       255.00000              298.300000                       15.100000   \n       mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\ncount                  767200.000000             767200.000000   \nmean                        0.646874                 70.045193   \nstd                         0.537558                 20.604698   \nmin                         0.000000                  8.200000   \n25%                         0.220000                 53.900000   \n50%                         0.480000                 71.000000   \n75%                         0.960000                 87.100000   \nmax                         3.870000                100.000000   \n       relative_humidity_rmin_3  precipitation_amount_3  \\\ncount             767200.000000           767200.000000   \nmean                  35.029034                2.484949   \nstd                   18.822219                7.038722   \nmin                    1.000000                0.000000   \n25%                   20.600000                0.000000   \n50%                   30.900000                0.000000   \n75%                   46.400000                2.000000   \nmax                  100.000000              504.200000   \n       air_temperature_tmmx_3   wind_speed_3         fsca_3          SWE_4  \\\ncount           767200.000000  767200.000000  536502.000000  713496.000000   \nmean               284.026528       4.223269     122.526248      50.311148   \nstd                  9.892944       2.041410     117.056690      95.552854   \nmin                248.700000       0.500000       0.000000       0.000000   \n25%                276.200000       2.800000       0.000000       0.000000   \n50%                283.300000       3.800000      64.000000       0.000000   \n75%                292.300000       5.200000     250.000000      35.000000   \nmax                314.400000      18.600000     255.000000     255.000000   \n              Flag_4  air_temperature_tmmn_4  potential_evapotranspiration_4  \\\ncount  713496.000000           767200.000000                   767200.000000   \nmean      243.446567              272.253844                        4.023396   \nstd         5.316194                8.333654                        2.505659   \nmin       241.000000              238.000000                        0.000000   \n25%       241.000000              266.600000                        1.900000   \n50%       241.000000              272.300000                        3.600000   \n75%       241.000000              278.600000                        5.900000   \nmax       255.000000              298.300000                       15.100000   \n       mean_vapor_pressure_deficit_4  relative_humidity_rmax_4  \\\ncount                  767200.000000             767200.000000   \nmean                        0.646762                 70.048777   \nstd                         0.537535                 20.604025   \nmin                         0.000000                  8.200000   \n25%                         0.220000                 53.900000   \n50%                         0.480000                 71.000000   \n75%                         0.960000                 87.100000   \nmax                         3.870000                100.000000   \n       relative_humidity_rmin_4  precipitation_amount_4  \\\ncount             767200.000000           767200.000000   \nmean                  35.032820                2.485223   \nstd                   18.823806                7.038887   \nmin                    1.000000                0.000000   \n25%                   20.600000                0.000000   \n50%                   30.900000                0.000000   \n75%                   46.400000                2.000000   \nmax                  100.000000              504.200000   \n       air_temperature_tmmx_4   wind_speed_4         fsca_4         SWE_5  \\\ncount           767200.000000  767200.000000  536745.000000  713496.00000   \nmean               284.024386       4.223736     122.526909      50.31222   \nstd                  9.892878       2.041711     117.059882      95.55372   \nmin                248.700000       0.500000       0.000000       0.00000   \n25%                276.200000       2.800000       0.000000       0.00000   \n50%                283.300000       3.800000      64.000000       0.00000   \n75%                292.300000       5.200000     250.000000      35.00000   \nmax                314.400000      18.600000     255.000000     255.00000   \n              Flag_5  air_temperature_tmmn_5  potential_evapotranspiration_5  \\\ncount  713496.000000           767200.000000                   767200.000000   \nmean      243.446626              272.252317                        4.023200   \nstd         5.316244                8.333121                        2.505814   \nmin       241.000000              238.000000                        0.000000   \n25%       241.000000              266.600000                        1.900000   \n50%       241.000000              272.300000                        3.600000   \n75%       241.000000              278.600000                        5.900000   \nmax       255.000000              298.300000                       15.100000   \n       mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\ncount                  767200.000000             767200.000000   \nmean                        0.646653                 70.052329   \nstd                         0.537511                 20.603616   \nmin                         0.000000                  8.200000   \n25%                         0.220000                 53.900000   \n50%                         0.480000                 71.000000   \n75%                         0.960000                 87.100000   \nmax                         3.870000                100.000000   \n       relative_humidity_rmin_5  precipitation_amount_5  \\\ncount             767200.000000           767200.000000   \nmean                  35.036577                2.485695   \nstd                   18.825852                7.039300   \nmin                    1.000000                0.000000   \n25%                   20.600000                0.000000   \n50%                   30.900000                0.000000   \n75%                   46.400000                2.000000   \nmax                  100.000000              504.200000   \n       air_temperature_tmmx_5   wind_speed_5         fsca_5          SWE_6  \\\ncount           767200.000000  767200.000000  536988.000000  713496.000000   \nmean               284.022421       4.224254     122.525898      50.310791   \nstd                  9.892795       2.041994     117.063270      95.552565   \nmin                248.700000       0.500000       0.000000       0.000000   \n25%                276.200000       2.800000       0.000000       0.000000   \n50%                283.300000       3.800000      64.000000       0.000000   \n75%                292.300000       5.200000     250.000000      35.000000   \nmax                314.400000      18.600000     255.000000     255.000000   \n              Flag_6  air_temperature_tmmn_6  potential_evapotranspiration_6  \\\ncount  713496.000000           767200.000000                   767200.000000   \nmean      243.446548              272.250904                        4.022913   \nstd         5.316177                8.332727                        2.505968   \nmin       241.000000              238.000000                        0.000000   \n25%       241.000000              266.600000                        1.900000   \n50%       241.000000              272.300000                        3.600000   \n75%       241.000000              278.600000                        5.900000   \nmax       255.000000              298.300000                       15.100000   \n       mean_vapor_pressure_deficit_6  relative_humidity_rmax_6  \\\ncount                  767200.000000             767200.000000   \nmean                        0.646554                 70.055568   \nstd                         0.537508                 20.603884   \nmin                         0.000000                  8.200000   \n25%                         0.220000                 53.900000   \n50%                         0.480000                 71.000000   \n75%                         0.960000                 87.200000   \nmax                         3.870000                100.000000   \n       relative_humidity_rmin_6  precipitation_amount_6  \\\ncount             767200.000000           767200.000000   \nmean                  35.040710                2.486229   \nstd                   18.828492                7.039703   \nmin                    1.000000                0.000000   \n25%                   20.600000                0.000000   \n50%                   30.900000                0.000000   \n75%                   46.400000                2.000000   \nmax                  100.000000              504.200000   \n       air_temperature_tmmx_6   wind_speed_6         fsca_6          SWE_7  \\\ncount           767200.000000  767200.000000  537231.000000  713496.000000   \nmean               284.020433       4.224612     122.516556      50.315437   \nstd                  9.892841       2.042310     117.066434      95.556318   \nmin                248.700000       0.500000       0.000000       0.000000   \n25%                276.200000       2.800000       0.000000       0.000000   \n50%                283.300000       3.800000      64.000000       0.000000   \n75%                292.300000       5.200000     250.000000      35.000000   \nmax                314.400000      18.600000     255.000000     255.000000   \n              Flag_7  air_temperature_tmmn_7  potential_evapotranspiration_7  \\\ncount  713496.000000           767200.000000                   767200.000000   \nmean      243.446803              272.249559                        4.022624   \nstd         5.316396                8.332266                        2.506123   \nmin       241.000000              238.000000                        0.000000   \n25%       241.000000              266.600000                        1.900000   \n50%       241.000000              272.300000                        3.600000   \n75%       241.000000              278.600000                        5.900000   \nmax       255.000000              298.300000                       15.100000   \n       mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\ncount                  767200.000000             767200.000000   \nmean                        0.646440                 70.059453   \nstd                         0.537498                 20.604642   \nmin                         0.000000                  8.200000   \n25%                         0.220000                 53.900000   \n50%                         0.480000                 71.000000   \n75%                         0.960000                 87.200000   \nmax                         3.870000                100.000000   \n       relative_humidity_rmin_7  precipitation_amount_7  \\\ncount             767200.000000           767200.000000   \nmean                  35.045342                2.486815   \nstd                   18.831274                7.040030   \nmin                    1.000000                0.000000   \n25%                   20.600000                0.000000   \n50%                   30.900000                0.000000   \n75%                   46.400000                2.000000   \nmax                  100.000000              504.200000   \n       air_temperature_tmmx_7   wind_speed_7         fsca_7     water_year  \ncount           767200.000000  767200.000000  537474.000000  797888.000000  \nmean               284.018453       4.225047     122.506825    2020.999088  \nstd                  9.892653       2.042543     117.069695       0.816683  \nmin                248.700000       0.500000       0.000000    2020.000000  \n25%                276.200000       2.800000       0.000000    2020.000000  \n50%                283.300000       3.800000      64.000000    2021.000000  \n75%                292.300000       5.200000     250.000000    2022.000000  \nmax                314.400000      18.600000     255.000000    2022.000000  \nThis is the dataframe after cumulative columns are added\n                 lat            lon            SWE           Flag  \\\ncount  797888.000000  797888.000000  713496.000000  713496.000000   \nmean       41.615630    -114.130327       7.053092     243.447882   \nstd         3.643291       5.447167      17.546653       5.317320   \nmin        33.358254    -123.448583       0.000000     241.000000   \n25%        38.911155    -119.666675       0.000000     241.000000   \n50%        40.939712    -113.585082       0.000000     241.000000   \n75%        44.613976    -110.000804       0.000000     241.000000   \nmax        48.971066    -105.194817     197.000000     255.000000   \n           swe_value  potential_evapotranspiration  precipitation_amount  \\\ncount  712845.000000                 767200.000000         767200.000000   \nmean        2.661918                      4.024112              2.485314   \nstd         3.989611                      2.504920              7.038737   \nmin         0.000000                      0.000000              0.000000   \n25%         0.000000                      1.900000              0.000000   \n50%         0.000000                      3.600000              0.000000   \n75%         5.900000                      5.900000              2.000000   \nmax        14.300000                     15.100000            504.200000   \n       relative_humidity_rmax  relative_humidity_rmin  air_temperature_tmmn  \\\ncount           767200.000000           767200.000000         767200.000000   \nmean                70.041987               35.022455            272.261304   \nstd                 20.604479               18.817779              8.334684   \nmin                  8.200000                1.000000            238.000000   \n25%                 53.900000               20.600000            266.600000   \n50%                 71.000000               30.900000            272.300000   \n75%                 87.100000               46.400000            278.600000   \nmax                100.000000              100.000000            298.300000   \n       air_temperature_tmmx  mean_vapor_pressure_deficit     wind_speed  \\\ncount         767200.000000                767200.000000  767200.000000   \nmean             284.033753                     0.647127       4.221713   \nstd                9.892099                     0.537530       2.039676   \nmin              248.700000                     0.000000       0.500000   \n25%              276.200000                     0.220000       2.800000   \n50%              283.300000                     0.480000       3.800000   \n75%              292.300000                     0.960000       5.200000   \nmax              314.400000                     3.870000      18.600000   \n           elevation          slope      curvature         aspect  \\\ncount  713496.000000  797888.000000  713496.000000  713496.000000   \nmean     2400.250366      89.980194   -3978.775967     173.841000   \nstd       657.753783       0.015543    4436.408493     102.096796   \nmin       758.443700      89.907196  -19177.676000       0.415929   \n25%      1948.688100      89.976875   -6479.865000     101.168440   \n50%      2468.187000      89.985710   -3720.545200     169.149630   \n75%      2924.415500      89.989990    -657.843500     254.958680   \nmax      3823.384800      89.996475    9069.726000     358.656280   \n            eastness      northness           fsca          SWE_1  \\\ncount  713496.000000  713496.000000  535773.000000  713496.000000   \nmean        0.061198      -0.052610     122.514533      50.326516   \nstd         0.524249       0.636747     117.046903      95.565266   \nmin        -0.785344      -0.785369       0.000000       0.000000   \n25%        -0.398911      -0.735620       0.000000       0.000000   \n50%         0.140316      -0.193049      64.000000       0.000000   \n75%         0.577196       0.649554     250.000000      35.000000   \nmax         0.785398       0.785385     255.000000     255.000000   \n              Flag_1  air_temperature_tmmn_1  potential_evapotranspiration_1  \\\ncount  713496.000000           767200.000000                   767200.000000   \nmean      243.447411              272.259492                        4.024137   \nstd         5.316916                8.334653                        2.505176   \nmin       241.000000              238.000000                        0.000000   \n25%       241.000000              266.600000                        1.900000   \n50%       241.000000              272.300000                        3.600000   \n75%       241.000000              278.600000                        5.900000   \nmax       255.000000              298.300000                       15.100000   \n       mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\ncount                  767200.000000             767200.000000   \nmean                        0.647076                 70.040419   \nstd                         0.537543                 20.604568   \nmin                         0.000000                  8.200000   \n25%                         0.220000                 53.900000   \n50%                         0.480000                 71.000000   \n75%                         0.960000                 87.100000   \nmax                         3.870000                100.000000   \n       relative_humidity_rmin_1  precipitation_amount_1  \\\ncount             767200.000000           767200.000000   \nmean                  35.022552                2.484736   \nstd                   18.818393                7.038488   \nmin                    1.000000                0.000000   \n25%                   20.600000                0.000000   \n50%                   30.900000                0.000000   \n75%                   46.400000                2.000000   \nmax                  100.000000              504.200000   \n       air_temperature_tmmx_1   wind_speed_1         fsca_1          SWE_2  \\\ncount           767200.000000  767200.000000  536016.000000  713496.000000   \nmean               284.031583       4.222192     122.512431      50.320798   \nstd                  9.892455       2.040115     117.050025      95.560648   \nmin                248.700000       0.500000       0.000000       0.000000   \n25%                276.200000       2.800000       0.000000       0.000000   \n50%                283.300000       3.800000      64.000000       0.000000   \n75%                292.300000       5.200000     250.000000      35.000000   \nmax                314.400000      18.600000     255.000000     255.000000   \n              Flag_2  air_temperature_tmmn_2  potential_evapotranspiration_2  \\\ncount  713496.000000           767200.000000                   767200.000000   \nmean      243.447097              272.257565                        4.023965   \nstd         5.316648                8.334572                        2.505408   \nmin       241.000000              238.000000                        0.000000   \n25%       241.000000              266.600000                        1.900000   \n50%       241.000000              272.300000                        3.600000   \n75%       241.000000              278.600000                        5.900000   \nmax       255.000000              298.300000                       15.100000   \n       mean_vapor_pressure_deficit_2  relative_humidity_rmax_2  \\\ncount                  767200.000000             767200.000000   \nmean                        0.646991                 70.041094   \nstd                         0.537558                 20.604445   \nmin                         0.000000                  8.200000   \n25%                         0.220000                 53.900000   \n50%                         0.480000                 71.000000   \n75%                         0.960000                 87.100000   \nmax                         3.870000                100.000000   \n       relative_humidity_rmin_2  precipitation_amount_2  \\\ncount             767200.000000           767200.000000   \nmean                  35.025048                2.484644   \nstd                   18.819945                7.038449   \nmin                    1.000000                0.000000   \n25%                   20.600000                0.000000   \n50%                   30.900000                0.000000   \n75%                   46.400000                2.000000   \nmax                  100.000000              504.200000   \n       air_temperature_tmmx_2   wind_speed_2         fsca_2          SWE_3  \\\ncount           767200.000000  767200.000000  536259.000000  713496.000000   \nmean               284.028983       4.222740     122.521101      50.318296   \nstd                  9.892864       2.040883     117.053468      95.558628   \nmin                248.700000       0.500000       0.000000       0.000000   \n25%                276.200000       2.800000       0.000000       0.000000   \n50%                283.300000       3.800000      64.000000       0.000000   \n75%                292.300000       5.200000     250.000000      35.000000   \nmax                314.400000      18.600000     255.000000     255.000000   \n             Flag_3  air_temperature_tmmn_3  potential_evapotranspiration_3  \\\ncount  713496.00000           767200.000000                   767200.000000   \nmean      243.44696              272.255493                        4.023631   \nstd         5.31653                8.334143                        2.505544   \nmin       241.00000              238.000000                        0.000000   \n25%       241.00000              266.600000                        1.900000   \n50%       241.00000              272.300000                        3.600000   \n75%       241.00000              278.600000                        5.900000   \nmax       255.00000              298.300000                       15.100000   \n       mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\ncount                  767200.000000             767200.000000   \nmean                        0.646874                 70.045193   \nstd                         0.537558                 20.604698   \nmin                         0.000000                  8.200000   \n25%                         0.220000                 53.900000   \n50%                         0.480000                 71.000000   \n75%                         0.960000                 87.100000   \nmax                         3.870000                100.000000   \n       relative_humidity_rmin_3  precipitation_amount_3  \\\ncount             767200.000000           767200.000000   \nmean                  35.029034                2.484949   \nstd                   18.822219                7.038722   \nmin                    1.000000                0.000000   \n25%                   20.600000                0.000000   \n50%                   30.900000                0.000000   \n75%                   46.400000                2.000000   \nmax                  100.000000              504.200000   \n       air_temperature_tmmx_3   wind_speed_3         fsca_3          SWE_4  \\\ncount           767200.000000  767200.000000  536502.000000  713496.000000   \nmean               284.026528       4.223269     122.526248      50.311148   \nstd                  9.892944       2.041410     117.056690      95.552854   \nmin                248.700000       0.500000       0.000000       0.000000   \n25%                276.200000       2.800000       0.000000       0.000000   \n50%                283.300000       3.800000      64.000000       0.000000   \n75%                292.300000       5.200000     250.000000      35.000000   \nmax                314.400000      18.600000     255.000000     255.000000   \n              Flag_4  air_temperature_tmmn_4  potential_evapotranspiration_4  \\\ncount  713496.000000           767200.000000                   767200.000000   \nmean      243.446567              272.253844                        4.023396   \nstd         5.316194                8.333654                        2.505659   \nmin       241.000000              238.000000                        0.000000   \n25%       241.000000              266.600000                        1.900000   \n50%       241.000000              272.300000                        3.600000   \n75%       241.000000              278.600000                        5.900000   \nmax       255.000000              298.300000                       15.100000   \n       mean_vapor_pressure_deficit_4  relative_humidity_rmax_4  \\\ncount                  767200.000000             767200.000000   \nmean                        0.646762                 70.048777   \nstd                         0.537535                 20.604025   \nmin                         0.000000                  8.200000   \n25%                         0.220000                 53.900000   \n50%                         0.480000                 71.000000   \n75%                         0.960000                 87.100000   \nmax                         3.870000                100.000000   \n       relative_humidity_rmin_4  precipitation_amount_4  \\\ncount             767200.000000           767200.000000   \nmean                  35.032820                2.485223   \nstd                   18.823806                7.038887   \nmin                    1.000000                0.000000   \n25%                   20.600000                0.000000   \n50%                   30.900000                0.000000   \n75%                   46.400000                2.000000   \nmax                  100.000000              504.200000   \n       air_temperature_tmmx_4   wind_speed_4         fsca_4         SWE_5  \\\ncount           767200.000000  767200.000000  536745.000000  713496.00000   \nmean               284.024386       4.223736     122.526909      50.31222   \nstd                  9.892878       2.041711     117.059882      95.55372   \nmin                248.700000       0.500000       0.000000       0.00000   \n25%                276.200000       2.800000       0.000000       0.00000   \n50%                283.300000       3.800000      64.000000       0.00000   \n75%                292.300000       5.200000     250.000000      35.00000   \nmax                314.400000      18.600000     255.000000     255.00000   \n              Flag_5  air_temperature_tmmn_5  potential_evapotranspiration_5  \\\ncount  713496.000000           767200.000000                   767200.000000   \nmean      243.446626              272.252317                        4.023200   \nstd         5.316244                8.333121                        2.505814   \nmin       241.000000              238.000000                        0.000000   \n25%       241.000000              266.600000                        1.900000   \n50%       241.000000              272.300000                        3.600000   \n75%       241.000000              278.600000                        5.900000   \nmax       255.000000              298.300000                       15.100000   \n       mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\ncount                  767200.000000             767200.000000   \nmean                        0.646653                 70.052329   \nstd                         0.537511                 20.603616   \nmin                         0.000000                  8.200000   \n25%                         0.220000                 53.900000   \n50%                         0.480000                 71.000000   \n75%                         0.960000                 87.100000   \nmax                         3.870000                100.000000   \n       relative_humidity_rmin_5  precipitation_amount_5  \\\ncount             767200.000000           767200.000000   \nmean                  35.036577                2.485695   \nstd                   18.825852                7.039300   \nmin                    1.000000                0.000000   \n25%                   20.600000                0.000000   \n50%                   30.900000                0.000000   \n75%                   46.400000                2.000000   \nmax                  100.000000              504.200000   \n       air_temperature_tmmx_5   wind_speed_5         fsca_5          SWE_6  \\\ncount           767200.000000  767200.000000  536988.000000  713496.000000   \nmean               284.022421       4.224254     122.525898      50.310791   \nstd                  9.892795       2.041994     117.063270      95.552565   \nmin                248.700000       0.500000       0.000000       0.000000   \n25%                276.200000       2.800000       0.000000       0.000000   \n50%                283.300000       3.800000      64.000000       0.000000   \n75%                292.300000       5.200000     250.000000      35.000000   \nmax                314.400000      18.600000     255.000000     255.000000   \n              Flag_6  air_temperature_tmmn_6  potential_evapotranspiration_6  \\\ncount  713496.000000           767200.000000                   767200.000000   \nmean      243.446548              272.250904                        4.022913   \nstd         5.316177                8.332727                        2.505968   \nmin       241.000000              238.000000                        0.000000   \n25%       241.000000              266.600000                        1.900000   \n50%       241.000000              272.300000                        3.600000   \n75%       241.000000              278.600000                        5.900000   \nmax       255.000000              298.300000                       15.100000   \n       mean_vapor_pressure_deficit_6  relative_humidity_rmax_6  \\\ncount                  767200.000000             767200.000000   \nmean                        0.646554                 70.055568   \nstd                         0.537508                 20.603884   \nmin                         0.000000                  8.200000   \n25%                         0.220000                 53.900000   \n50%                         0.480000                 71.000000   \n75%                         0.960000                 87.200000   \nmax                         3.870000                100.000000   \n       relative_humidity_rmin_6  precipitation_amount_6  \\\ncount             767200.000000           767200.000000   \nmean                  35.040710                2.486229   \nstd                   18.828492                7.039703   \nmin                    1.000000                0.000000   \n25%                   20.600000                0.000000   \n50%                   30.900000                0.000000   \n75%                   46.400000                2.000000   \nmax                  100.000000              504.200000   \n       air_temperature_tmmx_6   wind_speed_6         fsca_6          SWE_7  \\\ncount           767200.000000  767200.000000  537231.000000  713496.000000   \nmean               284.020433       4.224612     122.516556      50.315437   \nstd                  9.892841       2.042310     117.066434      95.556318   \nmin                248.700000       0.500000       0.000000       0.000000   \n25%                276.200000       2.800000       0.000000       0.000000   \n50%                283.300000       3.800000      64.000000       0.000000   \n75%                292.300000       5.200000     250.000000      35.000000   \nmax                314.400000      18.600000     255.000000     255.000000   \n              Flag_7  air_temperature_tmmn_7  potential_evapotranspiration_7  \\\ncount  713496.000000           767200.000000                   767200.000000   \nmean      243.446803              272.249559                        4.022624   \nstd         5.316396                8.332266                        2.506123   \nmin       241.000000              238.000000                        0.000000   \n25%       241.000000              266.600000                        1.900000   \n50%       241.000000              272.300000                        3.600000   \n75%       241.000000              278.600000                        5.900000   \nmax       255.000000              298.300000                       15.100000   \n       mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\ncount                  767200.000000             767200.000000   \nmean                        0.646440                 70.059453   \nstd                         0.537498                 20.604642   \nmin                         0.000000                  8.200000   \n25%                         0.220000                 53.900000   \n50%                         0.480000                 71.000000   \n75%                         0.960000                 87.200000   \nmax                         3.870000                100.000000   \n       relative_humidity_rmin_7  precipitation_amount_7  \\\ncount             767200.000000           767200.000000   \nmean                  35.045342                2.486815   \nstd                   18.831274                7.040030   \nmin                    1.000000                0.000000   \n25%                   20.600000                0.000000   \n50%                   30.900000                0.000000   \n75%                   46.400000                2.000000   \nmax                  100.000000              504.200000   \n       air_temperature_tmmx_7   wind_speed_7         fsca_7     water_year  \\\ncount           767200.000000  767200.000000  537474.000000  797888.000000   \nmean               284.018453       4.225047     122.506825    2020.999088   \nstd                  9.892653       2.042543     117.069695       0.816683   \nmin                248.700000       0.500000       0.000000    2020.000000   \n25%                276.200000       2.800000       0.000000    2020.000000   \n50%                283.300000       3.800000      64.000000    2021.000000   \n75%                292.300000       5.200000     250.000000    2022.000000   \nmax                314.400000      18.600000     255.000000    2022.000000   \n       cumulative_SWE  cumulative_Flag  cumulative_air_temperature_tmmn  \\\ncount   713496.000000     7.134960e+05                     7.672000e+05   \nmean      6441.735519     2.063683e+05                     2.339183e+05   \nstd       9615.732478     1.962608e+05                     2.163938e+05   \nmin          0.000000     2.410000e+02                     2.613000e+02   \n25%          0.000000     5.970300e+04                     7.090738e+04   \n50%       1506.000000     1.486280e+05                     1.737617e+05   \n75%       9355.000000     2.980050e+05                     3.367690e+05   \nmax      57841.000000     1.250172e+06                     1.410108e+06   \n       cumulative_potential_evapotranspiration  \\\ncount                            767200.000000   \nmean                               2680.790546   \nstd                                3033.422391   \nmin                                   0.800000   \n25%                                 657.000000   \n50%                                1533.600000   \n75%                                3656.700000   \nmax                               23479.300000   \n       cumulative_mean_vapor_pressure_deficit  \\\ncount                           767200.000000   \nmean                               411.532369   \nstd                                488.720352   \nmin                                  0.000000   \n25%                                100.240000   \n50%                                233.760000   \n75%                                539.020000   \nmax                               4248.790000   \n       cumulative_relative_humidity_rmax  cumulative_relative_humidity_rmin  \\\ncount                      767200.000000                      767200.000000   \nmean                        63171.153850                       33192.557569   \nstd                         57129.887329                       31521.156536   \nmin                            18.500000                           1.000000   \n25%                         18084.475000                        8732.000000   \n50%                         47738.600000                       25043.400000   \n75%                         93047.275000                       48983.100000   \nmax                        330952.000000                      212666.000000   \n       cumulative_precipitation_amount  cumulative_air_temperature_tmmx  \\\ncount                    767200.000000                     7.672000e+05   \nmean                       2809.653087                     2.433647e+05   \nstd                        3839.971243                     2.251910e+05   \nmin                           0.000000                     2.697000e+02   \n25%                         560.000000                     7.376865e+04   \n50%                        1615.000000                     1.805070e+05   \n75%                        3477.600000                     3.502821e+05   \nmax                       31189.000000                     1.458642e+06   \n       cumulative_wind_speed  cumulative_fsca  \ncount          767200.000000    535773.000000  \nmean             3852.168646    104263.839807  \nstd              3529.475010    102147.595933  \nmin                 0.800000         0.000000  \n25%              1121.100000     24565.000000  \n50%              2852.200000     68453.000000  \n75%              5538.200000    160180.000000  \nmax             19442.800000    507258.000000  \nAll the cumulative variables are added successfully! /home/chetana/gridmet_test_run/final_merged_data_3yrs_cleaned_v4_slope_corrected_cumulative_v1.csv\ndouble check the swe_value statistics: count    712845.000000\nmean          2.661918\nstd           3.989611\nmin           0.000000\n25%           0.000000\n50%           0.000000\n75%           5.900000\nmax          14.300000\nName: swe_value, dtype: float64\n",
  "history_begin_time" : 1701222798715,
  "history_end_time" : 1701223052247,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "yauFsvD2gYU3",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n# Define file paths for various CSV files\n# current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected.csv'\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v1.csv'\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v1_bak.csv'\n# target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\ntarget_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_cumulative_v1.csv'\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef convert_to_time_series(input_csv, output_csv):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n\n    \n    columns_to_be_time_series = [\"SWE\", \n                                 \"Flag\", \n                                 'air_temperature_tmmn',\n                                 'potential_evapotranspiration', \n                                 'mean_vapor_pressure_deficit',\n                                 'relative_humidity_rmax', \n                                 'relative_humidity_rmin',\n                                 'precipitation_amount', \n                                 'air_temperature_tmmx', \n                                 'wind_speed', \n                                 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n    \n    # rename all columns to unified names\n    #     ['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n# 'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n# 'fsca']\n    data.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n                        }, inplace=True)\n\n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(df, column_name, degree=3):\n        x = df.index\n        y = df[column_name]\n\n        # Create a mask for missing values\n        \n        mask = y > 240\n        # Perform interpolation\n        new_y = np.interp(x, x[~mask], y[~mask])\n\n        if np.any(new_y > 240):\n            raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n        # Replace missing values with interpolated values\n        df[column_name] = new_y\n        return df\n\n    # Group the data by 'lat' and 'lon' and apply interpolation for each column\n#     grouped = df.groupby(['lat', 'lon'])\n#     filled_data = pd.DataFrame()\n#     for name, group in grouped:\n#         print(f\"Start filling missing values for {name}\")\n#         interpolate_missing_inplace(group, 'SWE')\n#         filled_data = pd.concat([filled_data, group], axis=0)\n\n#     filled_data = filled_data.reset_index()\n\n#     if any(filled_data['SWE'] > 240):\n#         raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n    # Create a new DataFrame to store the time series data for each location\n    result = pd.DataFrame()\n\n    # Define the number of days to consider (7 days in this case)\n    num_days = 7\n\n    grouped = df.groupby(['lat', 'lon'])\n    for name, group in grouped:\n        group = group.set_index('date')\n        for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n                new_column_name = f'{target_col}_{day}'\n                group[new_column_name] = group[target_col].shift(day)\n        result = pd.concat([result, group], axis=0)\n\n    # Reset the index of the result DataFrame\n    result = result.reset_index()\n    result.to_csv(output_csv, index=False)\n    print(f\"New data is saved to {output_csv}\")\n    shutil.copy(output_csv, backup_time_series_csv_path)\n    print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    columns_to_be_cumulated = [\n      \"SWE\", \n      \"Flag\", \n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv)\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2019-10-01')\n    end_date = pd.to_datetime('2022-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(group):\n        for column in columns_to_be_cumulated:\n          x = group.index\n          y = group[column]\n          \n\t\t  # Create a mask for missing values\n          if column == \"SWE\":\n          \tmask = y > 240\n            # Perform interpolation\n          \tnew_y = np.interp(x, x[~mask], y[~mask])\n\n          \tif np.any(new_y > 240):\n          \t    raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n          \t# Replace missing values with interpolated values\n          \tgroup[column] = new_y\n        \n        return group\n\n    \n    df = grouped.apply(interpolate_missing_inplace)\n        \n    print(\"All the columns should have missing values filled: \", df.describe())    \n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df.describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n    \n\n\n# Uncomment this line to execute the 'convert_to_time_series' function\nconvert_to_time_series(current_ready_csv_path, target_time_series_csv_path)\n\n# Uncomment this line to execute the 'add_cumulative_columns' function\nadd_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path)\n",
  "history_output" : "today date = 2023-11-29\ntest start date:  2022-11-15\ntest end date:  2023-10-07\n/home/chetana\n2022275\n/home/chetana/gw-workspace/yauFsvD2gYU3/convert_to_time_series.py:60: DtypeWarning: Columns (6,7) have mixed types. Specify dtype option on import or set low_memory=False.\n  df = pd.read_csv(input_csv)\nAll current columns:  Index(['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n       'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n       'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n       'fsca'],\n      dtype='object')\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/yauFsvD2gYU3/convert_to_time_series.py\", line 226, in <module>\n    convert_to_time_series(current_ready_csv_path, target_time_series_csv_path)\n  File \"/home/chetana/gw-workspace/yauFsvD2gYU3/convert_to_time_series.py\", line 69, in convert_to_time_series\n    data.rename(columns={'vpd': 'mean_vapor_pressure_deficit',\nNameError: name 'data' is not defined\n",
  "history_begin_time" : 1701222784287,
  "history_end_time" : 1701222788258,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "5SL0Or5WFKWL",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n# Define file paths for various CSV files\n# current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected.csv'\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v1.csv'\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v1_bak.csv'\n# target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\ntarget_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_cumulative_v1.csv'\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef convert_to_time_series(input_csv, output_csv):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n                                'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n                                'relative_humidity_rmax', 'relative_humidity_rmin',\n                                'precipitation_amount', 'air_temperature_tmmx', 'wind_speed', 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n    print(\"All current columns: \", df.columns)\n\n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(df, column_name, degree=3):\n        x = df.index\n        y = df[column_name]\n\n        # Create a mask for missing values\n        \n        mask = y > 240\n        # Perform interpolation\n        new_y = np.interp(x, x[~mask], y[~mask])\n\n        if np.any(new_y > 240):\n            raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n        # Replace missing values with interpolated values\n        df[column_name] = new_y\n        return df\n\n    # Group the data by 'lat' and 'lon' and apply interpolation for each column\n#     grouped = df.groupby(['lat', 'lon'])\n#     filled_data = pd.DataFrame()\n#     for name, group in grouped:\n#         print(f\"Start filling missing values for {name}\")\n#         interpolate_missing_inplace(group, 'SWE')\n#         filled_data = pd.concat([filled_data, group], axis=0)\n\n#     filled_data = filled_data.reset_index()\n\n#     if any(filled_data['SWE'] > 240):\n#         raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n    # Create a new DataFrame to store the time series data for each location\n    result = pd.DataFrame()\n\n    # Define the number of days to consider (7 days in this case)\n    num_days = 7\n\n    grouped = df.groupby(['lat', 'lon'])\n    for name, group in grouped:\n        group = group.set_index('date')\n        for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n                new_column_name = f'{target_col}_{day}'\n                group[new_column_name] = group[target_col].shift(day)\n        result = pd.concat([result, group], axis=0)\n\n    # Reset the index of the result DataFrame\n    result = result.reset_index()\n    result.to_csv(output_csv, index=False)\n    print(f\"New data is saved to {output_csv}\")\n    shutil.copy(output_csv, backup_time_series_csv_path)\n    print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    columns_to_be_cumulated = [\n      \"SWE\", \n      \"Flag\", \n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv)\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2019-10-01')\n    end_date = pd.to_datetime('2022-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(group):\n        for column in columns_to_be_cumulated:\n          x = group.index\n          y = group[column]\n          \n\t\t  # Create a mask for missing values\n          if column == \"SWE\":\n          \tmask = y > 240\n            # Perform interpolation\n          \tnew_y = np.interp(x, x[~mask], y[~mask])\n\n          \tif np.any(new_y > 240):\n          \t    raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n          \t# Replace missing values with interpolated values\n          \tgroup[column] = new_y\n        \n        return group\n\n    \n    df = grouped.apply(interpolate_missing_inplace)\n        \n    print(\"All the columns should have missing values filled: \", df.describe())    \n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df.describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n    \n\n\n# Uncomment this line to execute the 'convert_to_time_series' function\nconvert_to_time_series(current_ready_csv_path, target_time_series_csv_path)\n\n# Uncomment this line to execute the 'add_cumulative_columns' function\nadd_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path)\n",
  "history_output" : "today date = 2023-11-29\ntest start date:  2022-11-15\ntest end date:  2023-10-07\n/home/chetana\n2022275\n/home/chetana/gw-workspace/5SL0Or5WFKWL/convert_to_time_series.py:51: DtypeWarning: Columns (6,7) have mixed types. Specify dtype option on import or set low_memory=False.\n  df = pd.read_csv(input_csv)\nAll current columns:  Index(['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'cell_id',\n       'station_id', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs',\n       'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness',\n       'fsca'],\n      dtype='object')\nTraceback (most recent call last):\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3802, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 138, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 165, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5745, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5753, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'air_temperature_tmmn'\nThe above exception was the direct cause of the following exception:\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/5SL0Or5WFKWL/convert_to_time_series.py\", line 202, in <module>\n    convert_to_time_series(current_ready_csv_path, target_time_series_csv_path)\n  File \"/home/chetana/gw-workspace/5SL0Or5WFKWL/convert_to_time_series.py\", line 98, in convert_to_time_series\n    group[new_column_name] = group[target_col].shift(day)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/frame.py\", line 3807, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3804, in get_loc\n    raise KeyError(key) from err\nKeyError: 'air_temperature_tmmn'\n",
  "history_begin_time" : 1701217377283,
  "history_end_time" : 1701217381318,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "ZplGEquIdYmZ",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n# Define file paths for various CSV files\n# current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected.csv'\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v1.csv'\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v1_bak.csv'\n# target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\ntarget_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_cumulative_v1.csv'\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef convert_to_time_series(input_csv, output_csv):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n                                'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n                                'relative_humidity_rmax', 'relative_humidity_rmin',\n                                'precipitation_amount', 'air_temperature_tmmx', 'wind_speed', 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(input_csv)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(df, column_name, degree=3):\n        x = df.index\n        y = df[column_name]\n\n        # Create a mask for missing values\n        \n        mask = y > 240\n        # Perform interpolation\n        new_y = np.interp(x, x[~mask], y[~mask])\n\n        if np.any(new_y > 240):\n            raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n        # Replace missing values with interpolated values\n        df[column_name] = new_y\n        return df\n\n    # Group the data by 'lat' and 'lon' and apply interpolation for each column\n#     grouped = df.groupby(['lat', 'lon'])\n#     filled_data = pd.DataFrame()\n#     for name, group in grouped:\n#         print(f\"Start filling missing values for {name}\")\n#         interpolate_missing_inplace(group, 'SWE')\n#         filled_data = pd.concat([filled_data, group], axis=0)\n\n#     filled_data = filled_data.reset_index()\n\n#     if any(filled_data['SWE'] > 240):\n#         raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n    # Create a new DataFrame to store the time series data for each location\n    result = pd.DataFrame()\n\n    # Define the number of days to consider (7 days in this case)\n    num_days = 7\n\n    grouped = df.groupby(['lat', 'lon'])\n    for name, group in grouped:\n        group = group.set_index('date')\n        for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n                new_column_name = f'{target_col}_{day}'\n                group[new_column_name] = group[target_col].shift(day)\n        result = pd.concat([result, group], axis=0)\n\n    # Reset the index of the result DataFrame\n    result = result.reset_index()\n    result.to_csv(output_csv, index=False)\n    print(f\"New data is saved to {output_csv}\")\n    shutil.copy(output_csv, backup_time_series_csv_path)\n    print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    columns_to_be_cumulated = [\n      \"SWE\", \n      \"Flag\", \n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv)\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2019-10-01')\n    end_date = pd.to_datetime('2022-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(group):\n        for column in columns_to_be_cumulated:\n          x = group.index\n          y = group[column]\n          \n\t\t  # Create a mask for missing values\n          if column == \"SWE\":\n          \tmask = y > 240\n            # Perform interpolation\n          \tnew_y = np.interp(x, x[~mask], y[~mask])\n\n          \tif np.any(new_y > 240):\n          \t    raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n          \t# Replace missing values with interpolated values\n          \tgroup[column] = new_y\n        \n        return group\n\n    \n    df = grouped.apply(interpolate_missing_inplace)\n        \n    print(\"All the columns should have missing values filled: \", df.describe())    \n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df.describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n    \n\n\n# Uncomment this line to execute the 'convert_to_time_series' function\nconvert_to_time_series(current_ready_csv_path, target_time_series_csv_path)\n\n# Uncomment this line to execute the 'add_cumulative_columns' function\nadd_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path)\n",
  "history_output" : "today date = 2023-11-29\ntest start date:  2022-11-15\ntest end date:  2023-10-07\n/home/chetana\n2022275\n/home/chetana/gw-workspace/ZplGEquIdYmZ/convert_to_time_series.py:51: DtypeWarning: Columns (6,7) have mixed types. Specify dtype option on import or set low_memory=False.\n  df = pd.read_csv(input_csv)\nTraceback (most recent call last):\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3802, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 138, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 165, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5745, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5753, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'air_temperature_tmmn'\nThe above exception was the direct cause of the following exception:\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/ZplGEquIdYmZ/convert_to_time_series.py\", line 201, in <module>\n    convert_to_time_series(current_ready_csv_path, target_time_series_csv_path)\n  File \"/home/chetana/gw-workspace/ZplGEquIdYmZ/convert_to_time_series.py\", line 97, in convert_to_time_series\n    group[new_column_name] = group[target_col].shift(day)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/frame.py\", line 3807, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3804, in get_loc\n    raise KeyError(key) from err\nKeyError: 'air_temperature_tmmn'\n",
  "history_begin_time" : 1701216310993,
  "history_end_time" : 1701216315514,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "OPfuBEBevbYs",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n# Define file paths for various CSV files\n# current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected.csv'\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v1.csv'\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_time_series_v1_bak.csv'\n# target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\ntarget_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v4_slope_corrected_cumulative_v1.csv'\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef convert_to_time_series(input_csv, output_csv):\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n                                'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n                                'relative_humidity_rmax', 'relative_humidity_rmin',\n                                'precipitation_amount', 'air_temperature_tmmx', 'wind_speed', 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv()\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(df, column_name, degree=3):\n        x = df.index\n        y = df[column_name]\n\n        # Create a mask for missing values\n        \n        mask = y > 240\n        # Perform interpolation\n        new_y = np.interp(x, x[~mask], y[~mask])\n\n        if np.any(new_y > 240):\n            raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n        # Replace missing values with interpolated values\n        df[column_name] = new_y\n        return df\n\n    # Group the data by 'lat' and 'lon' and apply interpolation for each column\n#     grouped = df.groupby(['lat', 'lon'])\n#     filled_data = pd.DataFrame()\n#     for name, group in grouped:\n#         print(f\"Start filling missing values for {name}\")\n#         interpolate_missing_inplace(group, 'SWE')\n#         filled_data = pd.concat([filled_data, group], axis=0)\n\n#     filled_data = filled_data.reset_index()\n\n#     if any(filled_data['SWE'] > 240):\n#         raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n    # Create a new DataFrame to store the time series data for each location\n    result = pd.DataFrame()\n\n    # Define the number of days to consider (7 days in this case)\n    num_days = 7\n\n    grouped = df.groupby(['lat', 'lon'])\n    for name, group in grouped:\n        group = group.set_index('date')\n        for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n                new_column_name = f'{target_col}_{day}'\n                group[new_column_name] = group[target_col].shift(day)\n        result = pd.concat([result, group], axis=0)\n\n    # Reset the index of the result DataFrame\n    result = result.reset_index()\n    result.to_csv(output_csv, index=False)\n    print(f\"New data is saved to {output_csv}\")\n    shutil.copy(output_csv, backup_time_series_csv_path)\n    print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns(input_csv, output_csv):\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    columns_to_be_cumulated = [\n      \"SWE\", \n      \"Flag\", \n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(input_csv)\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2019-10-01')\n    end_date = pd.to_datetime('2022-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(group):\n        for column in columns_to_be_cumulated:\n          x = group.index\n          y = group[column]\n          \n\t\t  # Create a mask for missing values\n          if column == \"SWE\":\n          \tmask = y > 240\n            # Perform interpolation\n          \tnew_y = np.interp(x, x[~mask], y[~mask])\n\n          \tif np.any(new_y > 240):\n          \t    raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n          \t# Replace missing values with interpolated values\n          \tgroup[column] = new_y\n        \n        return group\n\n    \n    df = grouped.apply(interpolate_missing_inplace)\n        \n    print(\"All the columns should have missing values filled: \", df.describe())    \n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df.describe())\n    \n    df.to_csv(output_csv, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n    \n\n\n# Uncomment this line to execute the 'convert_to_time_series' function\nconvert_to_time_series(current_ready_csv_path, target_time_series_csv_path)\n\n# Uncomment this line to execute the 'add_cumulative_columns' function\nadd_cumulative_columns(target_time_series_csv_path, target_time_series_cumulative_csv_path)\n",
  "history_output" : "today date = 2023-11-28\ntest start date:  2022-11-15\ntest end date:  2023-10-07\n/home/chetana\n2022275\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/OPfuBEBevbYs/convert_to_time_series.py\", line 201, in <module>\n    convert_to_time_series(current_ready_csv_path, target_time_series_csv_path)\n  File \"/home/chetana/gw-workspace/OPfuBEBevbYs/convert_to_time_series.py\", line 51, in convert_to_time_series\n    df = pd.read_csv()\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/util/_decorators.py\", line 211, in wrapper\n    return func(*args, **kwargs)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/util/_decorators.py\", line 331, in wrapper\n    return func(*args, **kwargs)\nTypeError: read_csv() missing 1 required positional argument: 'filepath_or_buffer'\n",
  "history_begin_time" : 1701210931301,
  "history_end_time" : 1701210932126,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "p9gjy8qmo16",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701013937421,
  "history_end_time" : 1701015920043,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "wwcimwtbd9x",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700974688738,
  "history_end_time" : 1700974688738,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "sduas84dy2w",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700885116853,
  "history_end_time" : 1700885116853,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "zeTpFUJRo2T8",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n# Define file paths for various CSV files\n# current_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\ncurrent_ready_csv_path = f'{work_dir}/2019_only_with_fsca.csv'\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\n# target_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\ntarget_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_1yr_cummulative_v2.csv'\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef convert_to_time_series():\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n                                'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n                                'relative_humidity_rmax', 'relative_humidity_rmin',\n                                'precipitation_amount', 'air_temperature_tmmx', 'wind_speed', 'fsca']\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(current_ready_csv_path)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(df, column_name, degree=3):\n        x = df.index\n        y = df[column_name]\n\n        # Create a mask for missing values\n        \n        mask = y > 240\n        # Perform interpolation\n        new_y = np.interp(x, x[~mask], y[~mask])\n\n        if np.any(new_y > 240):\n            raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n        # Replace missing values with interpolated values\n        df[column_name] = new_y\n        return df\n\n    # Group the data by 'lat' and 'lon' and apply interpolation for each column\n    grouped = df.groupby(['lat', 'lon'])\n    filled_data = pd.DataFrame()\n    for name, group in grouped:\n        print(f\"Start filling missing values for {name}\")\n        interpolate_missing_inplace(group, 'SWE')\n        filled_data = pd.concat([filled_data, group], axis=0)\n\n    filled_data = filled_data.reset_index()\n\n    if any(filled_data['SWE'] > 240):\n        raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n    # Create a new DataFrame to store the time series data for each location\n    result = pd.DataFrame()\n\n    # Define the number of days to consider (7 days in this case)\n    num_days = 7\n\n    grouped = filled_data.groupby(['lat', 'lon'])\n    for name, group in grouped:\n        group = group.set_index('date')\n        for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n                new_column_name = f'{target_col}_{day}'\n                group[new_column_name] = group[target_col].shift(day)\n        result = pd.concat([result, group], axis=0)\n\n    # Reset the index of the result DataFrame\n    result = result.reset_index()\n    result.to_csv(target_time_series_csv_path, index=False)\n    print(f\"New data is saved to {target_time_series_csv_path}\")\n    shutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\n    print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns():\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    columns_to_be_cumulated = [\n      \"SWE\", \n      \"Flag\", \n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n      'fsca'\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(current_ready_csv_path)\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2019-10-01')\n    end_date = pd.to_datetime('2022-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(group):\n        for column in columns_to_be_cumulated:\n          x = group.index\n          y = group[column]\n          \n\t\t  # Create a mask for missing values\n          if column == \"SWE\":\n          \tmask = y > 240\n            # Perform interpolation\n          \tnew_y = np.interp(x, x[~mask], y[~mask])\n\n          \tif np.any(new_y > 240):\n          \t    raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n          \t# Replace missing values with interpolated values\n          \tgroup[column] = new_y\n        \n        return group\n\n    \n    df = grouped.apply(interpolate_missing_inplace)\n        \n    print(\"All the columns should have missing values filled: \", df.describe())    \n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df.describe())\n    \n    df.to_csv(target_time_series_cumulative_csv_path, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n    \n\n    # TODO: Calculate and add cumulative values for specified columns\n\n# Uncomment this line to execute the 'convert_to_time_series' function\n# convert_to_time_series()\n\n# Uncomment this line to execute the 'add_cumulative_columns' function\nadd_cumulative_columns()\n",
  "history_output" : "today date = 2023-11-22\ntest start date:  2022-12-15\ntest end date:  2023-10-07\n/home/chetana\nthe column statistics from time series before cumulative:                  lat           lon           SWE          Flag     swe_value  \\\ncount  1.212530e+06  1.212530e+06  1.212530e+06  1.212530e+06  1.212530e+06   \nmean   4.159848e+01 -1.148097e+02  5.032765e+01  2.434503e+02  4.993699e+00   \nstd    3.390821e+00  5.386757e+00  9.556597e+01  5.319821e+00  7.588090e+00   \nmin    3.335825e+01 -1.234486e+02  0.000000e+00  2.410000e+02  0.000000e+00   \n25%    3.891814e+01 -1.201787e+02  0.000000e+00  2.410000e+02  0.000000e+00   \n50%    4.084124e+01 -1.143307e+02  0.000000e+00  2.410000e+02  0.000000e+00   \n75%    4.458839e+01 -1.108542e+02  3.200000e+01  2.410000e+02  1.020000e+01   \nmax    4.897107e+01 -1.051948e+02  2.550000e+02  2.550000e+02  2.260000e+01   \n         Unnamed: 0  air_temperature_tmmn  potential_evapotranspiration  \\\ncount  1.212530e+06          1.212530e+06                  1.212530e+06   \nmean   6.352183e+05          2.715492e+02                  3.882606e+00   \nstd    7.390140e+04          8.070638e+00                  2.447026e+00   \nmin    5.110000e+05          2.384000e+02                  0.000000e+00   \n25%    5.690952e+05          2.663000e+02                  1.900000e+00   \n50%    6.355010e+05          2.719000e+02                  3.500000e+00   \n75%    6.998410e+05          2.777000e+02                  5.600000e+00   \nmax    7.664990e+05          2.948000e+02                  1.510000e+01   \n       mean_vapor_pressure_deficit  relative_humidity_rmax  \\\ncount                 1.212530e+06            1.212530e+06   \nmean                  5.604398e-01            6.870174e+01   \nstd                   4.674854e-01            2.006693e+01   \nmin                   0.000000e+00            1.090000e+01   \n25%                   1.900000e-01            5.300000e+01   \n50%                   4.200000e-01            6.910000e+01   \n75%                   8.400000e-01            8.470001e+01   \nmax                   2.960000e+00            1.000000e+02   \n       relative_humidity_rmin  precipitation_amount  air_temperature_tmmx  \\\ncount            1.212530e+06          1.212530e+06          1.212530e+06   \nmean             3.452247e+01          2.344106e+00          2.842849e+02   \nstd              1.941246e+01          6.308532e+00          9.943040e+00   \nmin              1.000000e+00          0.000000e+00          2.535000e+02   \n25%              1.970000e+01          0.000000e+00          2.762000e+02   \n50%              2.990000e+01          0.000000e+00          2.836000e+02   \n75%              4.600000e+01          1.900000e+00          2.929000e+02   \nmax              1.000000e+02          1.755000e+02          3.121000e+02   \n         wind_speed     elevation         slope     curvature        aspect  \\\ncount  1.212530e+06  1.212530e+06  1.212530e+06  1.212530e+06  1.212530e+06   \nmean   4.288842e+00  2.383688e+03  6.235563e+01 -4.494919e+03  1.626209e+02   \nstd    2.031935e+00  6.287118e+02  1.701403e+01  4.267611e+03  1.044673e+02   \nmin    6.000000e-01  7.584437e+02  4.277402e+00 -1.917768e+04  4.159291e-01   \n25%    2.800000e+00  2.024721e+03  5.107695e+01 -7.425798e+03  6.118938e+01   \n50%    3.800000e+00  2.481006e+03  6.826445e+01 -4.891342e+03  1.600284e+02   \n75%    5.300000e+00  2.812862e+03  7.590949e+01 -1.302632e+03  2.395450e+02   \nmax    1.780000e+01  3.823385e+03  8.368555e+01  9.069726e+03  3.586563e+02   \n           eastness     northness          fsca  \ncount  1.212530e+06  1.212530e+06  1.212530e+06  \nmean   1.079406e-01 -2.316123e-02  1.431164e+02  \nstd    4.902257e-01  6.613187e-01  1.150419e+02  \nmin   -7.853438e-01 -7.853694e-01  0.000000e+00  \n25%   -2.117035e-01 -7.384472e-01  0.000000e+00  \n50%    1.863901e-01 -1.913248e-01  2.500000e+02  \n75%    5.767317e-01  6.961547e-01  2.500000e+02  \nmax    7.853980e-01  7.853850e-01  2.550000e+02  \nThis is our unique years [2019]\nhow many rows are left in the three water years?                  lat            lon            SWE           Flag  \\\ncount  305624.000000  305624.000000  305624.000000  305624.000000   \nmean       41.598483    -114.809732      46.156594     243.440188   \nstd         3.390825       5.386763      96.110180       5.311140   \nmin        33.358254    -123.448583       0.000000     241.000000   \n25%        38.918144    -120.178715       0.000000     241.000000   \n50%        40.841244    -114.330683       0.000000     241.000000   \n75%        44.588392    -110.854202      12.000000     241.000000   \nmax        48.971066    -105.194817     255.000000     255.000000   \n           swe_value     Unnamed: 0  air_temperature_tmmn  \\\ncount  305624.000000  305624.000000         305624.000000   \nmean        0.813043  635354.773329            267.590959   \nstd         1.305277   73901.416699              6.238410   \nmin         0.000000  511273.000000            240.500000   \n25%         0.000000  569323.000000            263.700000   \n50%         0.000000  635747.000000            268.400000   \n75%         1.325000  700012.000000            272.100000   \nmax         3.400000  766499.000000            287.200000   \n       potential_evapotranspiration  mean_vapor_pressure_deficit  \\\ncount                 305624.000000                305624.000000   \nmean                       1.607363                     0.276856   \nstd                        0.998951                     0.243700   \nmin                        0.000000                     0.000000   \n25%                        0.900000                     0.110000   \n50%                        1.500000                     0.200000   \n75%                        2.200000                     0.370000   \nmax                        7.500000                     1.760000   \n       relative_humidity_rmax  relative_humidity_rmin  precipitation_amount  \\\ncount           305624.000000           305624.000000         305624.000000   \nmean                73.611995               33.396509              2.099999   \nstd                 19.774779               19.259105              5.837573   \nmin                 18.800001                1.000000              0.000000   \n25%                 58.600002               18.700000              0.000000   \n50%                 75.600000               28.800001              0.000000   \n75%                 90.400000               44.600002              1.700000   \nmax                100.000000              100.000000            128.500000   \n       air_temperature_tmmx     wind_speed      elevation          slope  \\\ncount         305624.000000  305624.000000  305624.000000  305624.000000   \nmean             284.930624       4.277796    2383.687895      62.355630   \nstd               10.135135       2.001312     628.712531      17.014054   \nmin              253.500000       0.600000     758.443700       4.277402   \n25%              276.500000       2.800000    2024.720700      51.076950   \n50%              284.800000       3.800000    2481.005900      68.264450   \n75%              293.900000       5.300000    2812.861600      75.909485   \nmax              308.900000      17.800001    3823.384800      83.685555   \n           curvature         aspect       eastness      northness  \\\ncount  305624.000000  305624.000000  305624.000000  305624.000000   \nmean    -4494.919062     162.620862       0.107941      -0.023161   \nstd      4267.616708     104.467384       0.490226       0.661320   \nmin    -19177.676000       0.415929      -0.785344      -0.785369   \n25%     -7425.798000      61.189377      -0.211703      -0.738447   \n50%     -4891.342000     160.028415       0.186390      -0.191325   \n75%     -1302.632000     239.545010       0.576732       0.696155   \nmax      9069.726000     358.656280       0.785398       0.785385   \n                fsca  \ncount  305624.000000  \nmean      141.237403  \nstd       115.558480  \nmin         0.000000  \n25%         0.000000  \n50%       250.000000  \n75%       250.000000  \nmax       250.000000  \nhow many groups?  <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7f4797c856a0>\nAll the columns should have missing values filled:                   lat            lon            SWE           Flag  \\\ncount  305624.000000  305624.000000  305624.000000  305624.000000   \nmean       41.598483    -114.809732       2.098491     243.440188   \nstd         3.390825       5.386763       5.915682       5.311140   \nmin        33.358254    -123.448583       0.000000     241.000000   \n25%        38.918144    -120.178715       0.000000     241.000000   \n50%        40.841244    -114.330683       0.000000     241.000000   \n75%        44.588392    -110.854202       0.000000     241.000000   \nmax        48.971066    -105.194817      49.000000     255.000000   \n           swe_value     Unnamed: 0  air_temperature_tmmn  \\\ncount  305624.000000  305624.000000         305624.000000   \nmean        0.813043  635354.773329            267.590959   \nstd         1.305277   73901.416699              6.238410   \nmin         0.000000  511273.000000            240.500000   \n25%         0.000000  569323.000000            263.700000   \n50%         0.000000  635747.000000            268.400000   \n75%         1.325000  700012.000000            272.100000   \nmax         3.400000  766499.000000            287.200000   \n       potential_evapotranspiration  mean_vapor_pressure_deficit  \\\ncount                 305624.000000                305624.000000   \nmean                       1.607363                     0.276856   \nstd                        0.998951                     0.243700   \nmin                        0.000000                     0.000000   \n25%                        0.900000                     0.110000   \n50%                        1.500000                     0.200000   \n75%                        2.200000                     0.370000   \nmax                        7.500000                     1.760000   \n       relative_humidity_rmax  relative_humidity_rmin  precipitation_amount  \\\ncount           305624.000000           305624.000000         305624.000000   \nmean                73.611995               33.396509              2.099999   \nstd                 19.774779               19.259105              5.837573   \nmin                 18.800001                1.000000              0.000000   \n25%                 58.600002               18.700000              0.000000   \n50%                 75.600000               28.800001              0.000000   \n75%                 90.400000               44.600002              1.700000   \nmax                100.000000              100.000000            128.500000   \n       air_temperature_tmmx     wind_speed      elevation          slope  \\\ncount         305624.000000  305624.000000  305624.000000  305624.000000   \nmean             284.930624       4.277796    2383.687895      62.355630   \nstd               10.135135       2.001312     628.712531      17.014054   \nmin              253.500000       0.600000     758.443700       4.277402   \n25%              276.500000       2.800000    2024.720700      51.076950   \n50%              284.800000       3.800000    2481.005900      68.264450   \n75%              293.900000       5.300000    2812.861600      75.909485   \nmax              308.900000      17.800001    3823.384800      83.685555   \n           curvature         aspect       eastness      northness  \\\ncount  305624.000000  305624.000000  305624.000000  305624.000000   \nmean    -4494.919062     162.620862       0.107941      -0.023161   \nstd      4267.616708     104.467384       0.490226       0.661320   \nmin    -19177.676000       0.415929      -0.785344      -0.785369   \n25%     -7425.798000      61.189377      -0.211703      -0.738447   \n50%     -4891.342000     160.028415       0.186390      -0.191325   \n75%     -1302.632000     239.545010       0.576732       0.696155   \nmax      9069.726000     358.656280       0.785398       0.785385   \n                fsca  water_year  \ncount  305624.000000    305624.0  \nmean      141.237403      2020.0  \nstd       115.558480         0.0  \nmin         0.000000      2020.0  \n25%         0.000000      2020.0  \n50%       250.000000      2020.0  \n75%       250.000000      2020.0  \nmax       250.000000      2020.0  \nThis is the dataframe after cumulative columns are added\n                 lat            lon            SWE           Flag  \\\ncount  305624.000000  305624.000000  305624.000000  305624.000000   \nmean       41.598483    -114.809732       2.098491     243.440188   \nstd         3.390825       5.386763       5.915682       5.311140   \nmin        33.358254    -123.448583       0.000000     241.000000   \n25%        38.918144    -120.178715       0.000000     241.000000   \n50%        40.841244    -114.330683       0.000000     241.000000   \n75%        44.588392    -110.854202       0.000000     241.000000   \nmax        48.971066    -105.194817      49.000000     255.000000   \n           swe_value     Unnamed: 0  air_temperature_tmmn  \\\ncount  305624.000000  305624.000000         305624.000000   \nmean        0.813043  635354.773329            267.590959   \nstd         1.305277   73901.416699              6.238410   \nmin         0.000000  511273.000000            240.500000   \n25%         0.000000  569323.000000            263.700000   \n50%         0.000000  635747.000000            268.400000   \n75%         1.325000  700012.000000            272.100000   \nmax         3.400000  766499.000000            287.200000   \n       potential_evapotranspiration  mean_vapor_pressure_deficit  \\\ncount                 305624.000000                305624.000000   \nmean                       1.607363                     0.276856   \nstd                        0.998951                     0.243700   \nmin                        0.000000                     0.000000   \n25%                        0.900000                     0.110000   \n50%                        1.500000                     0.200000   \n75%                        2.200000                     0.370000   \nmax                        7.500000                     1.760000   \n       relative_humidity_rmax  relative_humidity_rmin  precipitation_amount  \\\ncount           305624.000000           305624.000000         305624.000000   \nmean                73.611995               33.396509              2.099999   \nstd                 19.774779               19.259105              5.837573   \nmin                 18.800001                1.000000              0.000000   \n25%                 58.600002               18.700000              0.000000   \n50%                 75.600000               28.800001              0.000000   \n75%                 90.400000               44.600002              1.700000   \nmax                100.000000              100.000000            128.500000   \n       air_temperature_tmmx     wind_speed      elevation          slope  \\\ncount         305624.000000  305624.000000  305624.000000  305624.000000   \nmean             284.930624       4.277796    2383.687895      62.355630   \nstd               10.135135       2.001312     628.712531      17.014054   \nmin              253.500000       0.600000     758.443700       4.277402   \n25%              276.500000       2.800000    2024.720700      51.076950   \n50%              284.800000       3.800000    2481.005900      68.264450   \n75%              293.900000       5.300000    2812.861600      75.909485   \nmax              308.900000      17.800001    3823.384800      83.685555   \n           curvature         aspect       eastness      northness  \\\ncount  305624.000000  305624.000000  305624.000000  305624.000000   \nmean    -4494.919062     162.620862       0.107941      -0.023161   \nstd      4267.616708     104.467384       0.490226       0.661320   \nmin    -19177.676000       0.415929      -0.785344      -0.785369   \n25%     -7425.798000      61.189377      -0.211703      -0.738447   \n50%     -4891.342000     160.028415       0.186390      -0.191325   \n75%     -1302.632000     239.545010       0.576732       0.696155   \nmax      9069.726000     358.656280       0.785398       0.785385   \n                fsca  water_year  cumulative_SWE  cumulative_Flag  \\\ncount  305624.000000    305624.0   305624.000000     3.056240e+05   \nmean      141.237403      2020.0     2344.813309     6.019929e+05   \nstd       115.558480         0.0     6221.886651     7.611124e+05   \nmin         0.000000      2020.0        0.000000     2.410000e+02   \n25%         0.000000      2020.0        0.000000     1.246630e+05   \n50%       250.000000      2020.0      234.383333     3.307685e+05   \n75%       250.000000      2020.0     1576.631819     7.404872e+05   \nmax       250.000000      2020.0    70511.374238     4.392360e+06   \n       cumulative_air_temperature_tmmn  \\\ncount                     3.056240e+05   \nmean                      6.677710e+05   \nstd                       8.489832e+05   \nmin                       2.613000e+02   \n25%                       1.379741e+05   \n50%                       3.649580e+05   \n75%                       8.152470e+05   \nmax                       4.901294e+06   \n       cumulative_potential_evapotranspiration  \\\ncount                            305624.000000   \nmean                               3967.348750   \nstd                                5166.359963   \nmin                                   0.200000   \n25%                                 872.200010   \n50%                                2123.700022   \n75%                                4668.300053   \nmax                               30825.200339   \n       cumulative_mean_vapor_pressure_deficit  \\\ncount                           305624.000000   \nmean                               864.473445   \nstd                               1085.539993   \nmin                                  0.050000   \n25%                                199.839996   \n50%                                457.439993   \n75%                               1014.722486   \nmax                               5641.159911   \n       cumulative_relative_humidity_rmax  cumulative_relative_humidity_rmin  \\\ncount                       3.056240e+05                      305624.000000   \nmean                        1.767637e+05                       79025.138075   \nstd                         2.167024e+05                       93069.985218   \nmin                         2.160000e+01                           5.500000   \n25%                         3.631568e+04                       17203.200177   \n50%                         1.004895e+05                       46232.800478   \n75%                         2.178255e+05                       99478.601100   \nmax                         1.202499e+06                      499983.406136   \n       cumulative_precipitation_amount  cumulative_air_temperature_tmmx  \\\ncount                    305624.000000                     3.056240e+05   \nmean                       4383.487573                     7.080921e+05   \nstd                        5198.700156                     9.012363e+05   \nmin                           0.000000                     2.629000e+02   \n25%                         799.700006                     1.452631e+05   \n50%                        2478.000043                     3.861039e+05   \n75%                        5752.700030                     8.672114e+05   \nmax                       32273.000117                     5.166512e+06   \n       cumulative_wind_speed  cumulative_fsca  \ncount          305624.000000     3.056240e+05  \nmean             9990.389328     2.505078e+05  \nstd             11627.397574     3.060314e+05  \nmin                 0.900000     0.000000e+00  \n25%              2208.500026     4.239575e+04  \n50%              5876.150066     1.417075e+05  \n75%             12806.625121     3.319380e+05  \nmax             62682.200602     1.891400e+06  \nAll the cumulative variables are added successfully! /home/chetana/gridmet_test_run/final_merged_data_1yr_cummulative_v2.csv\ndouble check the swe_value statistics: count    305624.000000\nmean          0.813043\nstd           1.305277\nmin           0.000000\n25%           0.000000\n50%           0.000000\n75%           1.325000\nmax           3.400000\nName: swe_value, dtype: float64\n",
  "history_begin_time" : 1700670995149,
  "history_end_time" : 1700671020274,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "g3s8d9mxlfw",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700471590212,
  "history_end_time" : 1700471590212,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "efzy9s04iw8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700468936451,
  "history_end_time" : 1700468936451,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "f44b547orw6",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700461923051,
  "history_end_time" : 1700462913701,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "x865tyxph71",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700448500151,
  "history_end_time" : 1700448500151,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "s4ki9ynlp23",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700447319858,
  "history_end_time" : 1700447319858,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "f9d4p6gvo42",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700230067258,
  "history_end_time" : 1700230067258,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "j84t5ph527h",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700229012381,
  "history_end_time" : 1700229012381,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "hfh3ehdy0jx",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700210213824,
  "history_end_time" : 1700210213824,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "fujcphp1x7u",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700209780176,
  "history_end_time" : 1700209780176,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "4vo1kv7h3qn",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700209729261,
  "history_end_time" : 1700209729261,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "29vftkasr1t",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700203478694,
  "history_end_time" : 1700204245690,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "hno5jpvtm5s",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700201828280,
  "history_end_time" : 1700201828280,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "rocz1ia0py2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700200332870,
  "history_end_time" : 1700200332870,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "nns2udz1epi",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700145667881,
  "history_end_time" : 1700145667881,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "pie6hyh4ys8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700143295320,
  "history_end_time" : 1700143295320,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "6ygmxsiy7ah",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700141615824,
  "history_end_time" : 1700141615824,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "zvol4w4vxa5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700134126852,
  "history_end_time" : 1700134126852,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "blak6qc75d4",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700133783720,
  "history_end_time" : 1700133783720,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ndekakfvln7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1699992839774,
  "history_end_time" : 1699992839774,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "shgv79qjvsz",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1699982145470,
  "history_end_time" : 1699982145470,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "km3uxaxp7rt",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1699941614815,
  "history_end_time" : 1699941614815,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "k4zf6p2hmkf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1699939440623,
  "history_end_time" : 1699939440623,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "i07od2rcb82",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1699937910477,
  "history_end_time" : 1699937910477,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "Uuin2BsL6x8v",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n# Define file paths for various CSV files\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\ntarget_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef convert_to_time_series():\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n                                'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n                                'relative_humidity_rmax', 'relative_humidity_rmin',\n                                'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(current_ready_csv_path)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(df, column_name, degree=3):\n        x = df.index\n        y = df[column_name]\n\n        # Create a mask for missing values\n        \n        mask = y > 240\n        # Perform interpolation\n        new_y = np.interp(x, x[~mask], y[~mask])\n\n        if np.any(new_y > 240):\n            raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n        # Replace missing values with interpolated values\n        df[column_name] = new_y\n        return df\n\n    # Group the data by 'lat' and 'lon' and apply interpolation for each column\n    grouped = df.groupby(['lat', 'lon'])\n    filled_data = pd.DataFrame()\n    for name, group in grouped:\n        print(f\"Start filling missing values for {name}\")\n        interpolate_missing_inplace(group, 'SWE')\n        filled_data = pd.concat([filled_data, group], axis=0)\n\n    filled_data = filled_data.reset_index()\n\n    if any(filled_data['SWE'] > 240):\n        raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n    # Create a new DataFrame to store the time series data for each location\n    result = pd.DataFrame()\n\n    # Define the number of days to consider (7 days in this case)\n    num_days = 7\n\n    grouped = filled_data.groupby(['lat', 'lon'])\n    for name, group in grouped:\n        group = group.set_index('date')\n        for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n                new_column_name = f'{target_col}_{day}'\n                group[new_column_name] = group[target_col].shift(day)\n        result = pd.concat([result, group], axis=0)\n\n    # Reset the index of the result DataFrame\n    result = result.reset_index()\n    result.to_csv(target_time_series_csv_path, index=False)\n    print(f\"New data is saved to {target_time_series_csv_path}\")\n    shutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\n    print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns():\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    columns_to_be_cumulated = [\n      \"SWE\", \n      \"Flag\", \n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(current_ready_csv_path)\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2019-10-01')\n    end_date = pd.to_datetime('2022-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(group):\n        for column in columns_to_be_cumulated:\n          x = group.index\n          y = group[column]\n          \n\t\t  # Create a mask for missing values\n          if column == \"SWE\":\n          \tmask = y > 240\n            # Perform interpolation\n          \tnew_y = np.interp(x, x[~mask], y[~mask])\n\n          \tif np.any(new_y > 240):\n          \t    raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n          \t# Replace missing values with interpolated values\n          \tgroup[column] = new_y\n        \n        return group\n\n    \n    df = grouped.apply(interpolate_missing_inplace)\n        \n    print(\"All the columns should have missing values filled: \", df.describe())    \n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df.describe())\n    \n    df.to_csv(target_time_series_cumulative_csv_path, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n    \n\n    # TODO: Calculate and add cumulative values for specified columns\n\n# Uncomment this line to execute the 'convert_to_time_series' function\n# convert_to_time_series()\n\n# Uncomment this line to execute the 'add_cumulative_columns' function\nadd_cumulative_columns()\n",
  "history_output" : "today date = 2023-11-13\ntest start date:  2022-12-16\ntest end date:  2023-10-07\n/home/chetana\nthe column statistics from time series before cumulative:                  lat           lon           SWE          Flag     swe_value  \\\ncount  1.022700e+06  1.022700e+06  1.022700e+06  1.022700e+06  1.008700e+06   \nmean   4.165838e+01 -1.141534e+02  5.046323e+01  2.434436e+02  3.333796e+00   \nstd    3.632464e+00  5.423376e+00  9.547185e+01  5.313797e+00  5.245389e+00   \nmin    3.335825e+01 -1.234486e+02  0.000000e+00  2.410000e+02  0.000000e+00   \n25%    3.891814e+01 -1.197812e+02  0.000000e+00  2.410000e+02  0.000000e+00   \n50%    4.107190e+01 -1.137737e+02  0.000000e+00  2.410000e+02  0.000000e+00   \n75%    4.461398e+01 -1.100367e+02  3.500000e+01  2.410000e+02  6.300000e+00   \nmax    4.897107e+01 -1.051948e+02  2.550000e+02  2.550000e+02  2.260000e+01   \n         Unnamed: 0  air_temperature_tmmn  potential_evapotranspiration  \\\ncount  1.022700e+06          1.022700e+06                  1.022700e+06   \nmean   5.113495e+05          2.720187e+02                  3.943372e+00   \nstd    2.952282e+05          8.384982e+00                  2.478664e+00   \nmin    0.000000e+00          2.328000e+02                  0.000000e+00   \n25%    2.556748e+05          2.663000e+02                  1.900000e+00   \n50%    5.113495e+05          2.722000e+02                  3.500000e+00   \n75%    7.670242e+05          2.784000e+02                  5.800000e+00   \nmax    1.022699e+06          2.983000e+02                  1.510000e+01   \n       mean_vapor_pressure_deficit  relative_humidity_rmax  \\\ncount                 1.022700e+06            1.022700e+06   \nmean                  6.258550e-01            7.123571e+01   \nstd                   5.233133e-01            2.030150e+01   \nmin                   0.000000e+00            8.200000e+00   \n25%                   2.100000e-01            5.560000e+01   \n50%                   4.700000e-01            7.240000e+01   \n75%                   9.300000e-01            8.820001e+01   \nmax                   3.870000e+00            1.000000e+02   \n       relative_humidity_rmin  precipitation_amount  air_temperature_tmmx  \\\ncount            1.022700e+06          1.022700e+06          1.022700e+06   \nmean             3.578010e+01          2.689152e+00          2.837481e+02   \nstd              1.888091e+01          7.456402e+00          9.912702e+00   \nmin              1.000000e+00          0.000000e+00          2.444000e+02   \n25%              2.130000e+01          0.000000e+00          2.759000e+02   \n50%              3.160000e+01          0.000000e+00          2.831000e+02   \n75%              4.740000e+01          2.200000e+00          2.920000e+02   \nmax              1.000000e+02          5.042000e+02          3.144000e+02   \n         wind_speed     elevation         slope     curvature        aspect  \\\ncount  1.022700e+06  1.022700e+06  1.022700e+06  1.022700e+06  1.022700e+06   \nmean   4.214964e+00  2.397170e+03  6.243769e+01 -3.909783e+03  1.722213e+02   \nstd    2.043559e+00  6.647262e+02  1.650521e+01  4.385982e+03  1.031039e+02   \nmin    5.000000e-01  7.584437e+02  4.277402e+00 -1.917768e+04  4.159291e-01   \n25%    2.800000e+00  1.948688e+03  5.213456e+01 -6.479865e+03  9.217068e+01   \n50%    3.700000e+00  2.481006e+03  6.768107e+01 -3.710969e+03  1.691301e+02   \n75%    5.200000e+00  2.895791e+03  7.504661e+01 -5.754078e+02  2.498582e+02   \nmax    1.860000e+01  3.823385e+03  8.368555e+01  9.069726e+03  3.586563e+02   \n           eastness     northness  \ncount  1.022700e+06  1.022700e+06  \nmean   6.965357e-02 -4.509867e-02  \nstd    5.171924e-01  6.412035e-01  \nmin   -7.853438e-01 -7.853694e-01  \n25%   -3.907275e-01 -7.356204e-01  \n50%    1.334633e-01 -1.913248e-01  \n75%    5.767317e-01  6.495535e-01  \nmax    7.853980e-01  7.853850e-01  \nThis is our unique years [2020 2022 2019 2021]\nhow many rows are left in the three water years?                  lat            lon            SWE           Flag  \\\ncount  767200.000000  767200.000000  767200.000000  767200.000000   \nmean       41.658381    -114.153407      50.309287     243.444567   \nstd         3.632464       5.423377      95.539184       5.314503   \nmin        33.358254    -123.448583       0.000000     241.000000   \n25%        38.918144    -119.781211       0.000000     241.000000   \n50%        41.071904    -113.773728       0.000000     241.000000   \n75%        44.613976    -110.036736      35.000000     241.000000   \nmax        48.971066    -105.194817     255.000000     255.000000   \n           swe_value    Unnamed: 0  air_temperature_tmmn  \\\ncount  766500.000000  7.672000e+05         767200.000000   \nmean        2.661918  5.118157e+05            272.261304   \nstd         3.989610  3.130358e+05              8.334684   \nmin         0.000000  0.000000e+00            238.000000   \n25%         0.000000  2.561998e+05            266.600000   \n50%         0.000000  4.479995e+05            272.300000   \n75%         5.900000  8.308992e+05            278.600000   \nmax        14.300000  1.022699e+06            298.300000   \n       potential_evapotranspiration  mean_vapor_pressure_deficit  \\\ncount                 767200.000000                767200.000000   \nmean                       3.745021                     0.639996   \nstd                        2.475329                     0.539158   \nmin                        0.000000                     0.000000   \n25%                        1.700000                     0.210000   \n50%                        3.200000                     0.470000   \n75%                        5.600000                     0.950000   \nmax                       15.100000                     3.870000   \n       relative_humidity_rmax  relative_humidity_rmin  precipitation_amount  \\\ncount           767200.000000           767200.000000         767200.000000   \nmean                71.923917               35.503670              2.568437   \nstd                 20.097146               18.506739              6.952663   \nmin                  9.600000                1.000000              0.000000   \n25%                 56.500000               21.400000              0.000000   \n50%                 73.100000               31.500000              0.000000   \n75%                 88.900000               46.600002              2.100000   \nmax                100.000000              100.000000            188.800000   \n       air_temperature_tmmx     wind_speed      elevation          slope  \\\ncount         767200.000000  767200.000000  767200.000000  767200.000000   \nmean             284.183567       4.136627    2397.169757      62.437693   \nstd                9.953636       1.992837     664.726321      16.505208   \nmin              244.400000       0.500000     758.443700       4.277402   \n25%              276.200000       2.700000    1948.688100      52.134558   \n50%              283.700000       3.700000    2481.005900      67.681070   \n75%              292.600000       5.100000    2895.790575      75.046610   \nmax              314.400000      18.600000    3823.384800      83.685555   \n           curvature         aspect       eastness      northness  \ncount  767200.000000  767200.000000  767200.000000  767200.000000  \nmean    -3909.782674     172.221346       0.069654      -0.045099  \nstd      4385.982939     103.103919       0.517192       0.641204  \nmin    -19177.676000       0.415929      -0.785344      -0.785369  \n25%     -6479.865000      92.170681      -0.390727      -0.735620  \n50%     -3710.969200     169.130130       0.133463      -0.191325  \n75%      -575.407800     249.858220       0.576732       0.649554  \nmax      9069.726000     358.656280       0.785398       0.785385  \nhow many groups?  <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7fa3e2afb970>\nAll the columns should have missing values filled:                   lat            lon            SWE           Flag  \\\ncount  767200.000000  767200.000000  767200.000000  767200.000000   \nmean       41.658381    -114.153407       7.108080     243.444567   \nstd         3.632464       5.423377      17.416381       5.314503   \nmin        33.358254    -123.448583       0.000000     241.000000   \n25%        38.918144    -119.781211       0.000000     241.000000   \n50%        41.071904    -113.773728       0.000000     241.000000   \n75%        44.613976    -110.036736       0.000000     241.000000   \nmax        48.971066    -105.194817     197.000000     255.000000   \n           swe_value    Unnamed: 0  air_temperature_tmmn  \\\ncount  766500.000000  7.672000e+05         767200.000000   \nmean        2.661918  5.118157e+05            272.261304   \nstd         3.989610  3.130358e+05              8.334684   \nmin         0.000000  0.000000e+00            238.000000   \n25%         0.000000  2.561998e+05            266.600000   \n50%         0.000000  4.479995e+05            272.300000   \n75%         5.900000  8.308992e+05            278.600000   \nmax        14.300000  1.022699e+06            298.300000   \n       potential_evapotranspiration  mean_vapor_pressure_deficit  \\\ncount                 767200.000000                767200.000000   \nmean                       3.745021                     0.639996   \nstd                        2.475329                     0.539158   \nmin                        0.000000                     0.000000   \n25%                        1.700000                     0.210000   \n50%                        3.200000                     0.470000   \n75%                        5.600000                     0.950000   \nmax                       15.100000                     3.870000   \n       relative_humidity_rmax  relative_humidity_rmin  precipitation_amount  \\\ncount           767200.000000           767200.000000         767200.000000   \nmean                71.923917               35.503670              2.568437   \nstd                 20.097146               18.506739              6.952663   \nmin                  9.600000                1.000000              0.000000   \n25%                 56.500000               21.400000              0.000000   \n50%                 73.100000               31.500000              0.000000   \n75%                 88.900000               46.600002              2.100000   \nmax                100.000000              100.000000            188.800000   \n       air_temperature_tmmx     wind_speed      elevation          slope  \\\ncount         767200.000000  767200.000000  767200.000000  767200.000000   \nmean             284.183567       4.136627    2397.169757      62.437693   \nstd                9.953636       1.992837     664.726321      16.505208   \nmin              244.400000       0.500000     758.443700       4.277402   \n25%              276.200000       2.700000    1948.688100      52.134558   \n50%              283.700000       3.700000    2481.005900      67.681070   \n75%              292.600000       5.100000    2895.790575      75.046610   \nmax              314.400000      18.600000    3823.384800      83.685555   \n           curvature         aspect       eastness      northness  \\\ncount  767200.000000  767200.000000  767200.000000  767200.000000   \nmean    -3909.782674     172.221346       0.069654      -0.045099   \nstd      4385.982939     103.103919       0.517192       0.641204   \nmin    -19177.676000       0.415929      -0.785344      -0.785369   \n25%     -6479.865000      92.170681      -0.390727      -0.735620   \n50%     -3710.969200     169.130130       0.133463      -0.191325   \n75%      -575.407800     249.858220       0.576732       0.649554   \nmax      9069.726000     358.656280       0.785398       0.785385   \n          water_year  \ncount  767200.000000  \nmean     2020.999088  \nstd         0.816683  \nmin      2020.000000  \n25%      2020.000000  \n50%      2021.000000  \n75%      2022.000000  \nmax      2022.000000  \nThis is the dataframe after cumulative columns are added\n                 lat            lon            SWE           Flag  \\\ncount  767200.000000  767200.000000  767200.000000  767200.000000   \nmean       41.658381    -114.153407       7.108080     243.444567   \nstd         3.632464       5.423377      17.416381       5.314503   \nmin        33.358254    -123.448583       0.000000     241.000000   \n25%        38.918144    -119.781211       0.000000     241.000000   \n50%        41.071904    -113.773728       0.000000     241.000000   \n75%        44.613976    -110.036736       0.000000     241.000000   \nmax        48.971066    -105.194817     197.000000     255.000000   \n           swe_value    Unnamed: 0  air_temperature_tmmn  \\\ncount  766500.000000  7.672000e+05         767200.000000   \nmean        2.661918  5.118157e+05            272.261304   \nstd         3.989610  3.130358e+05              8.334684   \nmin         0.000000  0.000000e+00            238.000000   \n25%         0.000000  2.561998e+05            266.600000   \n50%         0.000000  4.479995e+05            272.300000   \n75%         5.900000  8.308992e+05            278.600000   \nmax        14.300000  1.022699e+06            298.300000   \n       potential_evapotranspiration  mean_vapor_pressure_deficit  \\\ncount                 767200.000000                767200.000000   \nmean                       3.745021                     0.639996   \nstd                        2.475329                     0.539158   \nmin                        0.000000                     0.000000   \n25%                        1.700000                     0.210000   \n50%                        3.200000                     0.470000   \n75%                        5.600000                     0.950000   \nmax                       15.100000                     3.870000   \n       relative_humidity_rmax  relative_humidity_rmin  precipitation_amount  \\\ncount           767200.000000           767200.000000         767200.000000   \nmean                71.923917               35.503670              2.568437   \nstd                 20.097146               18.506739              6.952663   \nmin                  9.600000                1.000000              0.000000   \n25%                 56.500000               21.400000              0.000000   \n50%                 73.100000               31.500000              0.000000   \n75%                 88.900000               46.600002              2.100000   \nmax                100.000000              100.000000            188.800000   \n       air_temperature_tmmx     wind_speed      elevation          slope  \\\ncount         767200.000000  767200.000000  767200.000000  767200.000000   \nmean             284.183567       4.136627    2397.169757      62.437693   \nstd                9.953636       1.992837     664.726321      16.505208   \nmin              244.400000       0.500000     758.443700       4.277402   \n25%              276.200000       2.700000    1948.688100      52.134558   \n50%              283.700000       3.700000    2481.005900      67.681070   \n75%              292.600000       5.100000    2895.790575      75.046610   \nmax              314.400000      18.600000    3823.384800      83.685555   \n           curvature         aspect       eastness      northness  \\\ncount  767200.000000  767200.000000  767200.000000  767200.000000   \nmean    -3909.782674     172.221346       0.069654      -0.045099   \nstd      4385.982939     103.103919       0.517192       0.641204   \nmin    -19177.676000       0.415929      -0.785344      -0.785369   \n25%     -6479.865000      92.170681      -0.390727      -0.735620   \n50%     -3710.969200     169.130130       0.133463      -0.191325   \n75%      -575.407800     249.858220       0.576732       0.649554   \nmax      9069.726000     358.656280       0.785398       0.785385   \n          water_year  cumulative_SWE  cumulative_Flag  \\\ncount  767200.000000   767200.000000     7.672000e+05   \nmean     2020.999088     6508.039491     2.111647e+05   \nstd         0.816683     9519.964870     1.940340e+05   \nmin      2020.000000        0.000000     2.410000e+02   \n25%      2020.000000      118.090909     6.418700e+04   \n50%      2021.000000     1660.203271     1.574510e+05   \n75%      2022.000000     9398.890869     3.050698e+05   \nmax      2022.000000    59342.526835     1.250172e+06   \n       cumulative_air_temperature_tmmn  \\\ncount                     7.672000e+05   \nmean                      2.339183e+05   \nstd                       2.163938e+05   \nmin                       2.613000e+02   \n25%                       7.090738e+04   \n50%                       1.737617e+05   \n75%                       3.367690e+05   \nmax                       1.410108e+06   \n       cumulative_potential_evapotranspiration  \\\ncount                            767200.000000   \nmean                               2907.574447   \nstd                                3057.023539   \nmin                                   0.200000   \n25%                                 660.400006   \n50%                                1913.100017   \n75%                                4188.725050   \nmax                               22122.400244   \n       cumulative_mean_vapor_pressure_deficit  \\\ncount                           767200.000000   \nmean                               511.382255   \nstd                                537.384418   \nmin                                  0.000000   \n25%                                127.639998   \n50%                                339.999994   \n75%                                713.772487   \nmax                               4289.899921   \n       cumulative_relative_humidity_rmax  cumulative_relative_humidity_rmin  \\\ncount                      767200.000000                      767200.000000   \nmean                        64459.466861                       32220.556940   \nstd                         58779.187037                       30396.586644   \nmin                            18.500000                           2.100000   \n25%                         18499.250143                        8815.250068   \n50%                         48330.150431                       23883.850213   \n75%                         94819.425597                       47321.100414   \nmax                        356601.702938                      204964.202248   \n       cumulative_precipitation_amount  cumulative_air_temperature_tmmx  \\\ncount                    767200.000000                     7.672000e+05   \nmean                       2532.180869                     2.449608e+05   \nstd                        3087.409297                     2.259285e+05   \nmin                           0.000000                     2.606000e+02   \n25%                         571.400009                     7.439160e+04   \n50%                        1586.000022                     1.822517e+05   \n75%                        3332.700075                     3.530678e+05   \nmax                       23237.400254                     1.458587e+06   \n       cumulative_wind_speed  \ncount          767200.000000  \nmean             3676.593925  \nstd              3335.952118  \nmin                 0.800000  \n25%              1082.200009  \n50%              2751.600027  \n75%              5308.900052  \nmax             19606.100210  \nAll the cumulative variables are added successfully! /home/chetana/gridmet_test_run/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv\ndouble check the swe_value statistics: count    766500.000000\nmean          2.661918\nstd           3.989610\nmin           0.000000\n25%           0.000000\n50%           0.000000\n75%           5.900000\nmax          14.300000\nName: swe_value, dtype: float64\n",
  "history_begin_time" : 1699882291911,
  "history_end_time" : 1699882338246,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "n992TQUTcfAM",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n# Define file paths for various CSV files\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\ntarget_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef convert_to_time_series():\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n                                'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n                                'relative_humidity_rmax', 'relative_humidity_rmin',\n                                'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(current_ready_csv_path)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(df, column_name, degree=3):\n        x = df.index\n        y = df[column_name]\n\n        # Create a mask for missing values\n        \n        mask = y > 240\n        # Perform interpolation\n        new_y = np.interp(x, x[~mask], y[~mask])\n\n        if np.any(new_y > 240):\n            raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n        # Replace missing values with interpolated values\n        df[column_name] = new_y\n        return df\n\n    # Group the data by 'lat' and 'lon' and apply interpolation for each column\n    grouped = df.groupby(['lat', 'lon'])\n    filled_data = pd.DataFrame()\n    for name, group in grouped:\n        print(f\"Start filling missing values for {name}\")\n        interpolate_missing_inplace(group, 'SWE')\n        filled_data = pd.concat([filled_data, group], axis=0)\n\n    filled_data = filled_data.reset_index()\n\n    if any(filled_data['SWE'] > 240):\n        raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n    # Create a new DataFrame to store the time series data for each location\n    result = pd.DataFrame()\n\n    # Define the number of days to consider (7 days in this case)\n    num_days = 7\n\n    grouped = filled_data.groupby(['lat', 'lon'])\n    for name, group in grouped:\n        group = group.set_index('date')\n        for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n                new_column_name = f'{target_col}_{day}'\n                group[new_column_name] = group[target_col].shift(day)\n        result = pd.concat([result, group], axis=0)\n\n    # Reset the index of the result DataFrame\n    result = result.reset_index()\n    result.to_csv(target_time_series_csv_path, index=False)\n    print(f\"New data is saved to {target_time_series_csv_path}\")\n    shutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\n    print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns():\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    columns_to_be_cumulated = [\n      \"SWE\", \n      \"Flag\", \n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(current_ready_csv_path)\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2019-10-01')\n    end_date = pd.to_datetime('2022-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(group):\n        for column in columns_to_be_cumulated:\n          x = group.index\n          y = group[column]\n          \n\t\t  # Create a mask for missing values\n          if column == \"SWE\":\n          \tmask = y > 240\n            # Perform interpolation\n          \tnew_y = np.interp(x, x[~mask], y[~mask])\n\n          \tif np.any(new_y > 240):\n                raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n          \t# Replace missing values with interpolated values\n          \tgroup[column] = new_y\n        \n        return group\n\n    \n    df = grouped.apply(interpolate_missing_inplace)\n        \n    print(\"All the columns should have missing values filled: \", df.describe())    \n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df.describe())\n    \n    df.to_csv(target_time_series_cumulative_csv_path, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n    \n\n    # TODO: Calculate and add cumulative values for specified columns\n\n# Uncomment this line to execute the 'convert_to_time_series' function\n# convert_to_time_series()\n\n# Uncomment this line to execute the 'add_cumulative_columns' function\nadd_cumulative_columns()\n",
  "history_output" : "  File \"/home/chetana/gw-workspace/n992TQUTcfAM/convert_to_time_series.py\", line 171\n    raise ValueError(\"Single group: shouldn't have values > 240 here\")\nTabError: inconsistent use of tabs and spaces in indentation\n",
  "history_begin_time" : 1699882281454,
  "history_end_time" : 1699882281511,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "5YQ934R1Z83p",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n# Define file paths for various CSV files\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\ntarget_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef convert_to_time_series():\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n                                'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n                                'relative_humidity_rmax', 'relative_humidity_rmin',\n                                'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(current_ready_csv_path)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(df, column_name, degree=3):\n        x = df.index\n        y = df[column_name]\n\n        # Create a mask for missing values\n        \n        mask = y > 240\n        # Perform interpolation\n        new_y = np.interp(x, x[~mask], y[~mask])\n\n        if np.any(new_y > 240):\n            raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n        # Replace missing values with interpolated values\n        df[column_name] = new_y\n        return df\n\n    # Group the data by 'lat' and 'lon' and apply interpolation for each column\n    grouped = df.groupby(['lat', 'lon'])\n    filled_data = pd.DataFrame()\n    for name, group in grouped:\n        print(f\"Start filling missing values for {name}\")\n        interpolate_missing_inplace(group, 'SWE')\n        filled_data = pd.concat([filled_data, group], axis=0)\n\n    filled_data = filled_data.reset_index()\n\n    if any(filled_data['SWE'] > 240):\n        raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n    # Create a new DataFrame to store the time series data for each location\n    result = pd.DataFrame()\n\n    # Define the number of days to consider (7 days in this case)\n    num_days = 7\n\n    grouped = filled_data.groupby(['lat', 'lon'])\n    for name, group in grouped:\n        group = group.set_index('date')\n        for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n                new_column_name = f'{target_col}_{day}'\n                group[new_column_name] = group[target_col].shift(day)\n        result = pd.concat([result, group], axis=0)\n\n    # Reset the index of the result DataFrame\n    result = result.reset_index()\n    result.to_csv(target_time_series_csv_path, index=False)\n    print(f\"New data is saved to {target_time_series_csv_path}\")\n    shutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\n    print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns():\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    columns_to_be_cumulated = [\n      \"SWE\", \n      \"Flag\", \n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(current_ready_csv_path)\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2019-10-01')\n    end_date = pd.to_datetime('2022-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(group):\n        for column in columns_to_be_cumulated:\n          x = group.index\n          y = group[column]\n          \n\t\t  # Create a mask for missing values\n          if column == \"SWE\":\n          \tmask = y > 240\n            # Perform interpolation\n          \tnew_y = np.interp(x, x[~mask], y[~mask])\n\n          \tif np.any(new_y > 240):\n              raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n          \t# Replace missing values with interpolated values\n          \tgroup[column] = new_y\n        \n        return group\n\n    \n    df = grouped.apply(interpolate_missing_inplace)\n        \n    print(\"All the columns should have missing values filled: \", df.describe())    \n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df.describe())\n    \n    df.to_csv(target_time_series_cumulative_csv_path, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n    \n\n    # TODO: Calculate and add cumulative values for specified columns\n\n# Uncomment this line to execute the 'convert_to_time_series' function\n# convert_to_time_series()\n\n# Uncomment this line to execute the 'add_cumulative_columns' function\nadd_cumulative_columns()\n",
  "history_output" : "  File \"/home/chetana/gw-workspace/5YQ934R1Z83p/convert_to_time_series.py\", line 171\n    raise ValueError(\"Single group: shouldn't have values > 240 here\")\n                                                                      ^\nIndentationError: unindent does not match any outer indentation level\n",
  "history_begin_time" : 1699882266936,
  "history_end_time" : 1699882266985,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "CkSppVrAs3vX",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n# Define file paths for various CSV files\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\ntarget_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef convert_to_time_series():\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n                                'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n                                'relative_humidity_rmax', 'relative_humidity_rmin',\n                                'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(current_ready_csv_path)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(df, column_name, degree=3):\n        x = df.index\n        y = df[column_name]\n\n        # Create a mask for missing values\n        \n        mask = y > 240\n        # Perform interpolation\n        new_y = np.interp(x, x[~mask], y[~mask])\n\n        if np.any(new_y > 240):\n            raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n        # Replace missing values with interpolated values\n        df[column_name] = new_y\n        return df\n\n    # Group the data by 'lat' and 'lon' and apply interpolation for each column\n    grouped = df.groupby(['lat', 'lon'])\n    filled_data = pd.DataFrame()\n    for name, group in grouped:\n        print(f\"Start filling missing values for {name}\")\n        interpolate_missing_inplace(group, 'SWE')\n        filled_data = pd.concat([filled_data, group], axis=0)\n\n    filled_data = filled_data.reset_index()\n\n    if any(filled_data['SWE'] > 240):\n        raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n    # Create a new DataFrame to store the time series data for each location\n    result = pd.DataFrame()\n\n    # Define the number of days to consider (7 days in this case)\n    num_days = 7\n\n    grouped = filled_data.groupby(['lat', 'lon'])\n    for name, group in grouped:\n        group = group.set_index('date')\n        for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n                new_column_name = f'{target_col}_{day}'\n                group[new_column_name] = group[target_col].shift(day)\n        result = pd.concat([result, group], axis=0)\n\n    # Reset the index of the result DataFrame\n    result = result.reset_index()\n    result.to_csv(target_time_series_csv_path, index=False)\n    print(f\"New data is saved to {target_time_series_csv_path}\")\n    shutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\n    print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns():\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    columns_to_be_cumulated = [\n      \"SWE\", \n      \"Flag\", \n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(current_ready_csv_path)\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2019-10-01')\n    end_date = pd.to_datetime('2022-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(group):\n        for column in columns_to_be_cumulated:\n          x = group.index\n          y = group[column]\n          \n\t\t  # Create a mask for missing values\n          if column == \"SWE\":\n          \tmask = y > 240\n            # Perform interpolation\n          \tnew_y = np.interp(x, x[~mask], y[~mask])\n\n          \tif np.any(new_y > 240):\n              raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n          \t# Replace missing values with interpolated values\n          \tgroup[column] = new_y\n        \n        return group\n\n    \n    df = grouped.apply(interpolate_missing_inplace)\n        \n    print(\"All the columns should have missing values filled: \", df.describe())    \n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df.describe())\n    \n    df.to_csv(target_time_series_cumulative_csv_path, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n    \n\n    # TODO: Calculate and add cumulative values for specified columns\n\n# Uncomment this line to execute the 'convert_to_time_series' function\n# convert_to_time_series()\n\n# Uncomment this line to execute the 'add_cumulative_columns' function\nadd_cumulative_columns()\n",
  "history_output" : "  File \"/home/chetana/gw-workspace/CkSppVrAs3vX/convert_to_time_series.py\", line 171\n    raise ValueError(\"Single group: shouldn't have values > 240 here\")\n                                                                      ^\nIndentationError: unindent does not match any outer indentation level\n",
  "history_begin_time" : 1699882260376,
  "history_end_time" : 1699882260431,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "dPpWjy7ckNYc",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n# Define file paths for various CSV files\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\ntarget_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef convert_to_time_series():\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n                                'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n                                'relative_humidity_rmax', 'relative_humidity_rmin',\n                                'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(current_ready_csv_path)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(df, column_name, degree=3):\n        x = df.index\n        y = df[column_name]\n\n        # Create a mask for missing values\n        \n        mask = y > 240\n        # Perform interpolation\n        new_y = np.interp(x, x[~mask], y[~mask])\n\n        if np.any(new_y > 240):\n            raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n        # Replace missing values with interpolated values\n        df[column_name] = new_y\n        return df\n\n    # Group the data by 'lat' and 'lon' and apply interpolation for each column\n    grouped = df.groupby(['lat', 'lon'])\n    filled_data = pd.DataFrame()\n    for name, group in grouped:\n        print(f\"Start filling missing values for {name}\")\n        interpolate_missing_inplace(group, 'SWE')\n        filled_data = pd.concat([filled_data, group], axis=0)\n\n    filled_data = filled_data.reset_index()\n\n    if any(filled_data['SWE'] > 240):\n        raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n    # Create a new DataFrame to store the time series data for each location\n    result = pd.DataFrame()\n\n    # Define the number of days to consider (7 days in this case)\n    num_days = 7\n\n    grouped = filled_data.groupby(['lat', 'lon'])\n    for name, group in grouped:\n        group = group.set_index('date')\n        for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n                new_column_name = f'{target_col}_{day}'\n                group[new_column_name] = group[target_col].shift(day)\n        result = pd.concat([result, group], axis=0)\n\n    # Reset the index of the result DataFrame\n    result = result.reset_index()\n    result.to_csv(target_time_series_csv_path, index=False)\n    print(f\"New data is saved to {target_time_series_csv_path}\")\n    shutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\n    print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns():\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    columns_to_be_cumulated = [\n      \"SWE\", \n      \"Flag\", \n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(current_ready_csv_path)\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2019-10-01')\n    end_date = pd.to_datetime('2022-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(group):\n        for column in columns_to_be_cumulated:\n          x = group.index\n          y = group[column]\n          \n\t\t  # Create a mask for missing values\n          if column == \"SWE\":\n          \tmask = y > 240\n            # Perform interpolation\n          \tnew_y = np.interp(x, x[~mask], y[~mask])\n\n            if np.any(new_y > 240):\n                raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n            # Replace missing values with interpolated values\n            group[column] = new_y\n        \n        return group\n\n    \n    df = grouped.apply(interpolate_missing_inplace)\n        \n    print(\"All the columns should have missing values filled: \", df.describe())    \n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df.describe())\n    \n    df.to_csv(target_time_series_cumulative_csv_path, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n    \n\n    # TODO: Calculate and add cumulative values for specified columns\n\n# Uncomment this line to execute the 'convert_to_time_series' function\n# convert_to_time_series()\n\n# Uncomment this line to execute the 'add_cumulative_columns' function\nadd_cumulative_columns()\n",
  "history_output" : "  File \"/home/chetana/gw-workspace/dPpWjy7ckNYc/convert_to_time_series.py\", line 170\n    if np.any(new_y > 240):\n                           ^\nIndentationError: unindent does not match any outer indentation level\n",
  "history_begin_time" : 1699882216496,
  "history_end_time" : 1699882216554,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "DOaIkQcvGDXl",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n# Define file paths for various CSV files\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\ntarget_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef convert_to_time_series():\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n                                'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n                                'relative_humidity_rmax', 'relative_humidity_rmin',\n                                'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(current_ready_csv_path)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(df, column_name, degree=3):\n        x = df.index\n        y = df[column_name]\n\n        # Create a mask for missing values\n        \n        mask = y > 240\n        # Perform interpolation\n        new_y = np.interp(x, x[~mask], y[~mask])\n\n        if np.any(new_y > 240):\n            raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n        # Replace missing values with interpolated values\n        df[column_name] = new_y\n        return df\n\n    # Group the data by 'lat' and 'lon' and apply interpolation for each column\n    grouped = df.groupby(['lat', 'lon'])\n    filled_data = pd.DataFrame()\n    for name, group in grouped:\n        print(f\"Start filling missing values for {name}\")\n        interpolate_missing_inplace(group, 'SWE')\n        filled_data = pd.concat([filled_data, group], axis=0)\n\n    filled_data = filled_data.reset_index()\n\n    if any(filled_data['SWE'] > 240):\n        raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n    # Create a new DataFrame to store the time series data for each location\n    result = pd.DataFrame()\n\n    # Define the number of days to consider (7 days in this case)\n    num_days = 7\n\n    grouped = filled_data.groupby(['lat', 'lon'])\n    for name, group in grouped:\n        group = group.set_index('date')\n        for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n                new_column_name = f'{target_col}_{day}'\n                group[new_column_name] = group[target_col].shift(day)\n        result = pd.concat([result, group], axis=0)\n\n    # Reset the index of the result DataFrame\n    result = result.reset_index()\n    result.to_csv(target_time_series_csv_path, index=False)\n    print(f\"New data is saved to {target_time_series_csv_path}\")\n    shutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\n    print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns():\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    columns_to_be_cumulated = [\n      \"SWE\", \n      \"Flag\", \n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(current_ready_csv_path)\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2019-10-01')\n    end_date = pd.to_datetime('2022-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(group):\n        for column in columns_to_be_cumulated:\n          x = group.index\n          y = group[column]\n          \n\t\t  # Create a mask for missing values\n          if column == \"SWE\":\n          \tmask = y > 240\n            # Perform interpolation\n            new_y = np.interp(x, x[~mask], y[~mask])\n\n            if np.any(new_y > 240):\n                raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n            # Replace missing values with interpolated values\n            group[column] = new_y\n        \n        return group\n\n    \n    df = grouped.apply(interpolate_missing_inplace)\n        \n    print(\"All the columns should have missing values filled: \", df.describe())    \n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df.describe())\n    \n    df.to_csv(target_time_series_cumulative_csv_path, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n    \n\n    # TODO: Calculate and add cumulative values for specified columns\n\n# Uncomment this line to execute the 'convert_to_time_series' function\n# convert_to_time_series()\n\n# Uncomment this line to execute the 'add_cumulative_columns' function\nadd_cumulative_columns()\n",
  "history_output" : "  File \"/home/chetana/gw-workspace/DOaIkQcvGDXl/convert_to_time_series.py\", line 168\n    new_y = np.interp(x, x[~mask], y[~mask])\n                                            ^\nIndentationError: unindent does not match any outer indentation level\n",
  "history_begin_time" : 1699882102590,
  "history_end_time" : 1699882102881,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "PZ0lvSfGfwIR",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n# Define file paths for various CSV files\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\ntarget_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef convert_to_time_series():\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n                                'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n                                'relative_humidity_rmax', 'relative_humidity_rmin',\n                                'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(current_ready_csv_path)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(df, column_name, degree=3):\n        x = df.index\n        y = df[column_name]\n\n        # Create a mask for missing values\n        \n        mask = y > 240\n        # Perform interpolation\n        new_y = np.interp(x, x[~mask], y[~mask])\n\n        if np.any(new_y > 240):\n            raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n        # Replace missing values with interpolated values\n        df[column_name] = new_y\n        return df\n\n    # Group the data by 'lat' and 'lon' and apply interpolation for each column\n    grouped = df.groupby(['lat', 'lon'])\n    filled_data = pd.DataFrame()\n    for name, group in grouped:\n        print(f\"Start filling missing values for {name}\")\n        interpolate_missing_inplace(group, 'SWE')\n        filled_data = pd.concat([filled_data, group], axis=0)\n\n    filled_data = filled_data.reset_index()\n\n    if any(filled_data['SWE'] > 240):\n        raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n    # Create a new DataFrame to store the time series data for each location\n    result = pd.DataFrame()\n\n    # Define the number of days to consider (7 days in this case)\n    num_days = 7\n\n    grouped = filled_data.groupby(['lat', 'lon'])\n    for name, group in grouped:\n        group = group.set_index('date')\n        for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n                new_column_name = f'{target_col}_{day}'\n                group[new_column_name] = group[target_col].shift(day)\n        result = pd.concat([result, group], axis=0)\n\n    # Reset the index of the result DataFrame\n    result = result.reset_index()\n    result.to_csv(target_time_series_csv_path, index=False)\n    print(f\"New data is saved to {target_time_series_csv_path}\")\n    shutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\n    print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns():\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    columns_to_be_cumulated = [\n      \"SWE\", \n      \"Flag\", \n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(current_ready_csv_path)\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2019-10-01')\n    end_date = pd.to_datetime('2022-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(group):\n        for column in columns_to_be_cumulated:\n          x = group.index\n          y = group[column]\n          \n\t\t  # Create a mask for missing values\n          if column == \"SWE\":\n          \tmask = y > 240\n          elif column == \"Flag\"\n            mask = y != 241\n          else:\n            mask = None \n          \n          if mask is not None:\n            # Perform interpolation\n            new_y = np.interp(x, x[~mask], y[~mask])\n\n            if np.any(new_y > 240):\n                raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n            # Replace missing values with interpolated values\n            group[column] = new_y\n        \n        return group\n\n    \n    df = grouped.apply(interpolate_missing_inplace)\n        \n    print(\"All the columns should have missing values filled: \", df.describe())    \n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df.describe())\n    \n    df.to_csv(target_time_series_cumulative_csv_path, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n    \n\n    # TODO: Calculate and add cumulative values for specified columns\n\n# Uncomment this line to execute the 'convert_to_time_series' function\n# convert_to_time_series()\n\n# Uncomment this line to execute the 'add_cumulative_columns' function\nadd_cumulative_columns()\n",
  "history_output" : "  File \"/home/chetana/gw-workspace/PZ0lvSfGfwIR/convert_to_time_series.py\", line 167\n    elif column == \"Flag\"\n                         ^\nSyntaxError: invalid syntax\n",
  "history_begin_time" : 1699849279733,
  "history_end_time" : 1699849279785,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "gEUohEw9BFtO",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n# Define file paths for various CSV files\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\ntarget_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef convert_to_time_series():\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n                                'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n                                'relative_humidity_rmax', 'relative_humidity_rmin',\n                                'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(current_ready_csv_path)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(df, column_name, degree=3):\n        x = df.index\n        y = df[column_name]\n\n        # Create a mask for missing values\n        mask = y > 240\n        # Perform interpolation\n        new_y = np.interp(x, x[~mask], y[~mask])\n\n        if np.any(new_y > 240):\n            raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n        # Replace missing values with interpolated values\n        df[column_name] = new_y\n        return df\n\n    # Group the data by 'lat' and 'lon' and apply interpolation for each column\n    grouped = df.groupby(['lat', 'lon'])\n    filled_data = pd.DataFrame()\n    for name, group in grouped:\n        print(f\"Start filling missing values for {name}\")\n        interpolate_missing_inplace(group, 'SWE')\n        filled_data = pd.concat([filled_data, group], axis=0)\n\n    filled_data = filled_data.reset_index()\n\n    if any(filled_data['SWE'] > 240):\n        raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n    # Create a new DataFrame to store the time series data for each location\n    result = pd.DataFrame()\n\n    # Define the number of days to consider (7 days in this case)\n    num_days = 7\n\n    grouped = filled_data.groupby(['lat', 'lon'])\n    for name, group in grouped:\n        group = group.set_index('date')\n        for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n                new_column_name = f'{target_col}_{day}'\n                group[new_column_name] = group[target_col].shift(day)\n        result = pd.concat([result, group], axis=0)\n\n    # Reset the index of the result DataFrame\n    result = result.reset_index()\n    result.to_csv(target_time_series_csv_path, index=False)\n    print(f\"New data is saved to {target_time_series_csv_path}\")\n    shutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\n    print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns():\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    columns_to_be_cumulated = [\n      \"SWE\", \n      \"Flag\", \n      'air_temperature_tmmn',\n      'potential_evapotranspiration', \n      'mean_vapor_pressure_deficit',\n      'relative_humidity_rmax', \n      'relative_humidity_rmin',\n      'precipitation_amount', \n      'air_temperature_tmmx', \n      'wind_speed',\n    ]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(current_ready_csv_path)\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2019-10-01')\n    end_date = pd.to_datetime('2022-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(group):\n        print(group.head())\n        for column in columns_to_be_cumulated:\n          x = group.index\n          y = group[column]\n\n          # Create a mask for missing values\n          mask = y > 240\n          # Perform interpolation\n          new_y = np.interp(x, x[~mask], y[~mask])\n\n          if np.any(new_y > 240):\n              raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n          # Replace missing values with interpolated values\n          group[column] = new_y\n        \n        return group\n\n    \n    df = grouped.apply(interpolate_missing_inplace)\n        \n    print(\"All the columns should have missing values filled: \", df.describe())    \n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df.describe())\n    \n    df.to_csv(target_time_series_cumulative_csv_path, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n    \n\n    # TODO: Calculate and add cumulative values for specified columns\n\n# Uncomment this line to execute the 'convert_to_time_series' function\n# convert_to_time_series()\n\n# Uncomment this line to execute the 'add_cumulative_columns' function\nadd_cumulative_columns()\n",
  "history_output" : "today date = 2023-11-13\ntest start date:  2022-12-16\ntest end date:  2023-10-07\n/home/chetana\nthe column statistics from time series before cumulative:                  lat           lon           SWE          Flag     swe_value  \\\ncount  1.022700e+06  1.022700e+06  1.022700e+06  1.022700e+06  1.008700e+06   \nmean   4.165838e+01 -1.141534e+02  5.046323e+01  2.434436e+02  3.333796e+00   \nstd    3.632464e+00  5.423376e+00  9.547185e+01  5.313797e+00  5.245389e+00   \nmin    3.335825e+01 -1.234486e+02  0.000000e+00  2.410000e+02  0.000000e+00   \n25%    3.891814e+01 -1.197812e+02  0.000000e+00  2.410000e+02  0.000000e+00   \n50%    4.107190e+01 -1.137737e+02  0.000000e+00  2.410000e+02  0.000000e+00   \n75%    4.461398e+01 -1.100367e+02  3.500000e+01  2.410000e+02  6.300000e+00   \nmax    4.897107e+01 -1.051948e+02  2.550000e+02  2.550000e+02  2.260000e+01   \n         Unnamed: 0  air_temperature_tmmn  potential_evapotranspiration  \\\ncount  1.022700e+06          1.022700e+06                  1.022700e+06   \nmean   5.113495e+05          2.720187e+02                  3.943372e+00   \nstd    2.952282e+05          8.384982e+00                  2.478664e+00   \nmin    0.000000e+00          2.328000e+02                  0.000000e+00   \n25%    2.556748e+05          2.663000e+02                  1.900000e+00   \n50%    5.113495e+05          2.722000e+02                  3.500000e+00   \n75%    7.670242e+05          2.784000e+02                  5.800000e+00   \nmax    1.022699e+06          2.983000e+02                  1.510000e+01   \n       mean_vapor_pressure_deficit  relative_humidity_rmax  \\\ncount                 1.022700e+06            1.022700e+06   \nmean                  6.258550e-01            7.123571e+01   \nstd                   5.233133e-01            2.030150e+01   \nmin                   0.000000e+00            8.200000e+00   \n25%                   2.100000e-01            5.560000e+01   \n50%                   4.700000e-01            7.240000e+01   \n75%                   9.300000e-01            8.820001e+01   \nmax                   3.870000e+00            1.000000e+02   \n       relative_humidity_rmin  precipitation_amount  air_temperature_tmmx  \\\ncount            1.022700e+06          1.022700e+06          1.022700e+06   \nmean             3.578010e+01          2.689152e+00          2.837481e+02   \nstd              1.888091e+01          7.456402e+00          9.912702e+00   \nmin              1.000000e+00          0.000000e+00          2.444000e+02   \n25%              2.130000e+01          0.000000e+00          2.759000e+02   \n50%              3.160000e+01          0.000000e+00          2.831000e+02   \n75%              4.740000e+01          2.200000e+00          2.920000e+02   \nmax              1.000000e+02          5.042000e+02          3.144000e+02   \n         wind_speed     elevation         slope     curvature        aspect  \\\ncount  1.022700e+06  1.022700e+06  1.022700e+06  1.022700e+06  1.022700e+06   \nmean   4.214964e+00  2.397170e+03  6.243769e+01 -3.909783e+03  1.722213e+02   \nstd    2.043559e+00  6.647262e+02  1.650521e+01  4.385982e+03  1.031039e+02   \nmin    5.000000e-01  7.584437e+02  4.277402e+00 -1.917768e+04  4.159291e-01   \n25%    2.800000e+00  1.948688e+03  5.213456e+01 -6.479865e+03  9.217068e+01   \n50%    3.700000e+00  2.481006e+03  6.768107e+01 -3.710969e+03  1.691301e+02   \n75%    5.200000e+00  2.895791e+03  7.504661e+01 -5.754078e+02  2.498582e+02   \nmax    1.860000e+01  3.823385e+03  8.368555e+01  9.069726e+03  3.586563e+02   \n           eastness     northness  \ncount  1.022700e+06  1.022700e+06  \nmean   6.965357e-02 -4.509867e-02  \nstd    5.171924e-01  6.412035e-01  \nmin   -7.853438e-01 -7.853694e-01  \n25%   -3.907275e-01 -7.356204e-01  \n50%    1.334633e-01 -1.913248e-01  \n75%    5.767317e-01  6.495535e-01  \nmax    7.853980e-01  7.853850e-01  \nThis is our unique years [2020 2022 2019 2021]\nhow many rows are left in the three water years?                  lat            lon            SWE           Flag  \\\ncount  767200.000000  767200.000000  767200.000000  767200.000000   \nmean       41.658381    -114.153407      50.309287     243.444567   \nstd         3.632464       5.423377      95.539184       5.314503   \nmin        33.358254    -123.448583       0.000000     241.000000   \n25%        38.918144    -119.781211       0.000000     241.000000   \n50%        41.071904    -113.773728       0.000000     241.000000   \n75%        44.613976    -110.036736      35.000000     241.000000   \nmax        48.971066    -105.194817     255.000000     255.000000   \n           swe_value    Unnamed: 0  air_temperature_tmmn  \\\ncount  766500.000000  7.672000e+05         767200.000000   \nmean        2.661918  5.118157e+05            272.261304   \nstd         3.989610  3.130358e+05              8.334684   \nmin         0.000000  0.000000e+00            238.000000   \n25%         0.000000  2.561998e+05            266.600000   \n50%         0.000000  4.479995e+05            272.300000   \n75%         5.900000  8.308992e+05            278.600000   \nmax        14.300000  1.022699e+06            298.300000   \n       potential_evapotranspiration  mean_vapor_pressure_deficit  \\\ncount                 767200.000000                767200.000000   \nmean                       3.745021                     0.639996   \nstd                        2.475329                     0.539158   \nmin                        0.000000                     0.000000   \n25%                        1.700000                     0.210000   \n50%                        3.200000                     0.470000   \n75%                        5.600000                     0.950000   \nmax                       15.100000                     3.870000   \n       relative_humidity_rmax  relative_humidity_rmin  precipitation_amount  \\\ncount           767200.000000           767200.000000         767200.000000   \nmean                71.923917               35.503670              2.568437   \nstd                 20.097146               18.506739              6.952663   \nmin                  9.600000                1.000000              0.000000   \n25%                 56.500000               21.400000              0.000000   \n50%                 73.100000               31.500000              0.000000   \n75%                 88.900000               46.600002              2.100000   \nmax                100.000000              100.000000            188.800000   \n       air_temperature_tmmx     wind_speed      elevation          slope  \\\ncount         767200.000000  767200.000000  767200.000000  767200.000000   \nmean             284.183567       4.136627    2397.169757      62.437693   \nstd                9.953636       1.992837     664.726321      16.505208   \nmin              244.400000       0.500000     758.443700       4.277402   \n25%              276.200000       2.700000    1948.688100      52.134558   \n50%              283.700000       3.700000    2481.005900      67.681070   \n75%              292.600000       5.100000    2895.790575      75.046610   \nmax              314.400000      18.600000    3823.384800      83.685555   \n           curvature         aspect       eastness      northness  \ncount  767200.000000  767200.000000  767200.000000  767200.000000  \nmean    -3909.782674     172.221346       0.069654      -0.045099  \nstd      4385.982939     103.103919       0.517192       0.641204  \nmin    -19177.676000       0.415929      -0.785344      -0.785369  \n25%     -6479.865000      92.170681      -0.390727      -0.735620  \n50%     -3710.969200     169.130130       0.133463      -0.191325  \n75%      -575.407800     249.858220       0.576732       0.649554  \nmax      9069.726000     358.656280       0.785398       0.785385  \nhow many groups?  <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7feeb33c99a0>\n             date        lat         lon  SWE  Flag  swe_value  Unnamed: 0  \\\n509898 2019-11-22  33.358254 -107.826881  255   255        0.0      555490   \n509899 2019-11-22  33.358254 -107.826881  255   255        0.0      558045   \n509900 2019-11-22  33.358254 -107.826881  255   255        0.0      716820   \n509907 2020-04-28  33.358254 -107.826881    0   241        0.0      810904   \n509908 2020-04-28  33.358254 -107.826881    0   241        0.0      813466   \n        air_temperature_tmmn  potential_evapotranspiration  \\\n509898                 268.2                           0.4   \n509899                 268.2                           0.4   \n509900                 268.2                           0.6   \n509907                 282.1                           4.2   \n509908                 282.1                           5.0   \n        mean_vapor_pressure_deficit  relative_humidity_rmax  \\\n509898                         0.53                    62.3   \n509899                         0.48                    62.3   \n509900                         0.18                    62.3   \n509907                         0.95                    38.0   \n509908                         0.95                    38.0   \n        relative_humidity_rmin  precipitation_amount  air_temperature_tmmx  \\\n509898                    44.3                  14.1                 294.3   \n509899                    23.0                   7.7                 298.9   \n509900                    37.3                   8.1                 279.6   \n509907                    22.4                   0.0                 287.9   \n509908                    33.5                   0.0                 281.1   \n        wind_speed  elevation     slope  curvature   aspect  eastness  \\\n509898         2.3  2419.5283  51.38327 -2909.2551  276.389 -0.782283   \n509899         2.4  2419.5283  51.38327 -2909.2551  276.389 -0.782283   \n509900         3.4  2419.5283  51.38327 -2909.2551  276.389 -0.782283   \n509907         2.7  2419.5283  51.38327 -2909.2551  276.389 -0.782283   \n509908         3.7  2419.5283  51.38327 -2909.2551  276.389 -0.782283   \n        northness  water_year  \n509898   0.110823        2020  \n509899   0.110823        2020  \n509900   0.110823        2020  \n509907   0.110823        2020  \n509908   0.110823        2020  \nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/gEUohEw9BFtO/convert_to_time_series.py\", line 201, in <module>\n    add_cumulative_columns()\n  File \"/home/chetana/gw-workspace/gEUohEw9BFtO/convert_to_time_series.py\", line 178, in add_cumulative_columns\n    df = grouped.apply(interpolate_missing_inplace)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/groupby/groupby.py\", line 1567, in apply\n    result = self._python_apply_general(f, self._selected_obj)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/groupby/groupby.py\", line 1629, in _python_apply_general\n    values, mutated = self.grouper.apply(f, data, self.axis)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/groupby/ops.py\", line 839, in apply\n    res = f(group)\n  File \"/home/chetana/gw-workspace/gEUohEw9BFtO/convert_to_time_series.py\", line 167, in interpolate_missing_inplace\n    new_y = np.interp(x, x[~mask], y[~mask])\n  File \"<__array_function__ internals>\", line 200, in interp\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/numpy/lib/function_base.py\", line 1595, in interp\n    return interp_func(x, xp, fp, left, right)\nValueError: array of sample points is empty\n",
  "history_begin_time" : 1699847745090,
  "history_end_time" : 1699847760653,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "hzeC91EPGWGd",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n# Define file paths for various CSV files\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\ntarget_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef convert_to_time_series():\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n                                'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n                                'relative_humidity_rmax', 'relative_humidity_rmin',\n                                'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(current_ready_csv_path)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(df, column_name, degree=3):\n        x = df.index\n        y = df[column_name]\n\n        # Create a mask for missing values\n        mask = y > 240\n        # Perform interpolation\n        new_y = np.interp(x, x[~mask], y[~mask])\n\n        if np.any(new_y > 240):\n            raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n        # Replace missing values with interpolated values\n        df[column_name] = new_y\n        return df\n\n    # Group the data by 'lat' and 'lon' and apply interpolation for each column\n    grouped = df.groupby(['lat', 'lon'])\n    filled_data = pd.DataFrame()\n    for name, group in grouped:\n        print(f\"Start filling missing values for {name}\")\n        interpolate_missing_inplace(group, 'SWE')\n        filled_data = pd.concat([filled_data, group], axis=0)\n\n    filled_data = filled_data.reset_index()\n\n    if any(filled_data['SWE'] > 240):\n        raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n    # Create a new DataFrame to store the time series data for each location\n    result = pd.DataFrame()\n\n    # Define the number of days to consider (7 days in this case)\n    num_days = 7\n\n    grouped = filled_data.groupby(['lat', 'lon'])\n    for name, group in grouped:\n        group = group.set_index('date')\n        for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n                new_column_name = f'{target_col}_{day}'\n                group[new_column_name] = group[target_col].shift(day)\n        result = pd.concat([result, group], axis=0)\n\n    # Reset the index of the result DataFrame\n    result = result.reset_index()\n    result.to_csv(target_time_series_csv_path, index=False)\n    print(f\"New data is saved to {target_time_series_csv_path}\")\n    shutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\n    print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns():\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    columns_to_be_cumulated = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n                            'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n                            'relative_humidity_rmax', 'relative_humidity_rmin',\n                            'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(current_ready_csv_path)\n    print(\"the column statistics from time series before cumulative: \", df[\"swe_value\"].describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2019-10-01')\n    end_date = pd.to_datetime('2022-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(group):\n        print(group.head())\n        for column in columns_to_be_cumulated:\n          x = group.index\n          y = group[column]\n\n          # Create a mask for missing values\n          mask = y > 240\n          # Perform interpolation\n          new_y = np.interp(x, x[~mask], y[~mask])\n\n          if np.any(new_y > 240):\n              raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n          # Replace missing values with interpolated values\n          group[column] = new_y\n        \n        return group\n\n    \n    df = grouped.apply(interpolate_missing_inplace)\n        \n    print(\"All the columns should have missing values filled: \", df.describe())    \n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df.describe())\n    \n    df.to_csv(target_time_series_cumulative_csv_path, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n    \n\n    # TODO: Calculate and add cumulative values for specified columns\n\n# Uncomment this line to execute the 'convert_to_time_series' function\n# convert_to_time_series()\n\n# Uncomment this line to execute the 'add_cumulative_columns' function\nadd_cumulative_columns()\n",
  "history_output" : "today date = 2023-11-13\ntest start date:  2022-12-16\ntest end date:  2023-10-07\n/home/chetana\nthe column statistics from time series before cumulative:  count    1.008700e+06\nmean     3.333796e+00\nstd      5.245389e+00\nmin      0.000000e+00\n25%      0.000000e+00\n50%      0.000000e+00\n75%      6.300000e+00\nmax      2.260000e+01\nName: swe_value, dtype: float64\nThis is our unique years [2020 2022 2019 2021]\nhow many rows are left in the three water years?                  lat            lon            SWE           Flag  \\\ncount  767200.000000  767200.000000  767200.000000  767200.000000   \nmean       41.658381    -114.153407      50.309287     243.444567   \nstd         3.632464       5.423377      95.539184       5.314503   \nmin        33.358254    -123.448583       0.000000     241.000000   \n25%        38.918144    -119.781211       0.000000     241.000000   \n50%        41.071904    -113.773728       0.000000     241.000000   \n75%        44.613976    -110.036736      35.000000     241.000000   \nmax        48.971066    -105.194817     255.000000     255.000000   \n           swe_value    Unnamed: 0  air_temperature_tmmn  \\\ncount  766500.000000  7.672000e+05         767200.000000   \nmean        2.661918  5.118157e+05            272.261304   \nstd         3.989610  3.130358e+05              8.334684   \nmin         0.000000  0.000000e+00            238.000000   \n25%         0.000000  2.561998e+05            266.600000   \n50%         0.000000  4.479995e+05            272.300000   \n75%         5.900000  8.308992e+05            278.600000   \nmax        14.300000  1.022699e+06            298.300000   \n       potential_evapotranspiration  mean_vapor_pressure_deficit  \\\ncount                 767200.000000                767200.000000   \nmean                       3.745021                     0.639996   \nstd                        2.475329                     0.539158   \nmin                        0.000000                     0.000000   \n25%                        1.700000                     0.210000   \n50%                        3.200000                     0.470000   \n75%                        5.600000                     0.950000   \nmax                       15.100000                     3.870000   \n       relative_humidity_rmax  relative_humidity_rmin  precipitation_amount  \\\ncount           767200.000000           767200.000000         767200.000000   \nmean                71.923917               35.503670              2.568437   \nstd                 20.097146               18.506739              6.952663   \nmin                  9.600000                1.000000              0.000000   \n25%                 56.500000               21.400000              0.000000   \n50%                 73.100000               31.500000              0.000000   \n75%                 88.900000               46.600002              2.100000   \nmax                100.000000              100.000000            188.800000   \n       air_temperature_tmmx     wind_speed      elevation          slope  \\\ncount         767200.000000  767200.000000  767200.000000  767200.000000   \nmean             284.183567       4.136627    2397.169757      62.437693   \nstd                9.953636       1.992837     664.726321      16.505208   \nmin              244.400000       0.500000     758.443700       4.277402   \n25%              276.200000       2.700000    1948.688100      52.134558   \n50%              283.700000       3.700000    2481.005900      67.681070   \n75%              292.600000       5.100000    2895.790575      75.046610   \nmax              314.400000      18.600000    3823.384800      83.685555   \n           curvature         aspect       eastness      northness  \ncount  767200.000000  767200.000000  767200.000000  767200.000000  \nmean    -3909.782674     172.221346       0.069654      -0.045099  \nstd      4385.982939     103.103919       0.517192       0.641204  \nmin    -19177.676000       0.415929      -0.785344      -0.785369  \n25%     -6479.865000      92.170681      -0.390727      -0.735620  \n50%     -3710.969200     169.130130       0.133463      -0.191325  \n75%      -575.407800     249.858220       0.576732       0.649554  \nmax      9069.726000     358.656280       0.785398       0.785385  \nhow many groups?  <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7f076a00ce80>\n             date        lat         lon  SWE  Flag  swe_value  Unnamed: 0  \\\n509898 2019-11-22  33.358254 -107.826881  255   255        0.0      555490   \n509899 2019-11-22  33.358254 -107.826881  255   255        0.0      558045   \n509900 2019-11-22  33.358254 -107.826881  255   255        0.0      716820   \n509907 2020-04-28  33.358254 -107.826881    0   241        0.0      810904   \n509908 2020-04-28  33.358254 -107.826881    0   241        0.0      813466   \n        air_temperature_tmmn  potential_evapotranspiration  \\\n509898                 268.2                           0.4   \n509899                 268.2                           0.4   \n509900                 268.2                           0.6   \n509907                 282.1                           4.2   \n509908                 282.1                           5.0   \n        mean_vapor_pressure_deficit  relative_humidity_rmax  \\\n509898                         0.53                    62.3   \n509899                         0.48                    62.3   \n509900                         0.18                    62.3   \n509907                         0.95                    38.0   \n509908                         0.95                    38.0   \n        relative_humidity_rmin  precipitation_amount  air_temperature_tmmx  \\\n509898                    44.3                  14.1                 294.3   \n509899                    23.0                   7.7                 298.9   \n509900                    37.3                   8.1                 279.6   \n509907                    22.4                   0.0                 287.9   \n509908                    33.5                   0.0                 281.1   \n        wind_speed  elevation     slope  curvature   aspect  eastness  \\\n509898         2.3  2419.5283  51.38327 -2909.2551  276.389 -0.782283   \n509899         2.4  2419.5283  51.38327 -2909.2551  276.389 -0.782283   \n509900         3.4  2419.5283  51.38327 -2909.2551  276.389 -0.782283   \n509907         2.7  2419.5283  51.38327 -2909.2551  276.389 -0.782283   \n509908         3.7  2419.5283  51.38327 -2909.2551  276.389 -0.782283   \n        northness  water_year  \n509898   0.110823        2020  \n509899   0.110823        2020  \n509900   0.110823        2020  \n509907   0.110823        2020  \n509908   0.110823        2020  \nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/hzeC91EPGWGd/convert_to_time_series.py\", line 193, in <module>\n    add_cumulative_columns()\n  File \"/home/chetana/gw-workspace/hzeC91EPGWGd/convert_to_time_series.py\", line 170, in add_cumulative_columns\n    df = grouped.apply(interpolate_missing_inplace)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/groupby/groupby.py\", line 1567, in apply\n    result = self._python_apply_general(f, self._selected_obj)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/groupby/groupby.py\", line 1629, in _python_apply_general\n    values, mutated = self.grouper.apply(f, data, self.axis)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/groupby/ops.py\", line 839, in apply\n    res = f(group)\n  File \"/home/chetana/gw-workspace/hzeC91EPGWGd/convert_to_time_series.py\", line 159, in interpolate_missing_inplace\n    new_y = np.interp(x, x[~mask], y[~mask])\n  File \"<__array_function__ internals>\", line 200, in interp\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/numpy/lib/function_base.py\", line 1595, in interp\n    return interp_func(x, xp, fp, left, right)\nValueError: array of sample points is empty\n",
  "history_begin_time" : 1699847601955,
  "history_end_time" : 1699847617120,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "X5k7aUqQsrs2",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n# Define file paths for various CSV files\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\ntarget_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef convert_to_time_series():\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n                                'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n                                'relative_humidity_rmax', 'relative_humidity_rmin',\n                                'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(current_ready_csv_path)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(df, column_name, degree=3):\n        x = df.index\n        y = df[column_name]\n\n        # Create a mask for missing values\n        mask = y > 240\n        # Perform interpolation\n        new_y = np.interp(x, x[~mask], y[~mask])\n\n        if np.any(new_y > 240):\n            raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n        # Replace missing values with interpolated values\n        df[column_name] = new_y\n        return df\n\n    # Group the data by 'lat' and 'lon' and apply interpolation for each column\n    grouped = df.groupby(['lat', 'lon'])\n    filled_data = pd.DataFrame()\n    for name, group in grouped:\n        print(f\"Start filling missing values for {name}\")\n        interpolate_missing_inplace(group, 'SWE')\n        filled_data = pd.concat([filled_data, group], axis=0)\n\n    filled_data = filled_data.reset_index()\n\n    if any(filled_data['SWE'] > 240):\n        raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n    # Create a new DataFrame to store the time series data for each location\n    result = pd.DataFrame()\n\n    # Define the number of days to consider (7 days in this case)\n    num_days = 7\n\n    grouped = filled_data.groupby(['lat', 'lon'])\n    for name, group in grouped:\n        group = group.set_index('date')\n        for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n                new_column_name = f'{target_col}_{day}'\n                group[new_column_name] = group[target_col].shift(day)\n        result = pd.concat([result, group], axis=0)\n\n    # Reset the index of the result DataFrame\n    result = result.reset_index()\n    result.to_csv(target_time_series_csv_path, index=False)\n    print(f\"New data is saved to {target_time_series_csv_path}\")\n    shutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\n    print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns():\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    columns_to_be_cumulated = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n                            'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n                            'relative_humidity_rmax', 'relative_humidity_rmin',\n                            'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(current_ready_csv_path)\n    print(\"the column statistics from time series before cumulative: \", df[\"swe_value\"].describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2019-10-01')\n    end_date = pd.to_datetime('2022-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(group):\n        print(group.head())\n        for column in columns_to_be_cumulated:\n          x = group.index\n          y = group[column_name]\n\n          # Create a mask for missing values\n          mask = y > 240\n          # Perform interpolation\n          new_y = np.interp(x, x[~mask], y[~mask])\n\n          if np.any(new_y > 240):\n              raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n          # Replace missing values with interpolated values\n          group[column_name] = new_y\n        \n        return group\n\n    \n    df = grouped.apply(interpolate_missing_inplace)\n        \n    print(\"All the columns should have missing values filled: \", df.describe())    \n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df.describe())\n    \n    df.to_csv(target_time_series_cumulative_csv_path, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n    \n\n    # TODO: Calculate and add cumulative values for specified columns\n\n# Uncomment this line to execute the 'convert_to_time_series' function\n# convert_to_time_series()\n\n# Uncomment this line to execute the 'add_cumulative_columns' function\nadd_cumulative_columns()\n",
  "history_output" : "today date = 2023-11-13\ntest start date:  2022-12-16\ntest end date:  2023-10-07\n/home/chetana\nthe column statistics from time series before cumulative:  count    1.008700e+06\nmean     3.333796e+00\nstd      5.245389e+00\nmin      0.000000e+00\n25%      0.000000e+00\n50%      0.000000e+00\n75%      6.300000e+00\nmax      2.260000e+01\nName: swe_value, dtype: float64\nThis is our unique years [2020 2022 2019 2021]\nhow many rows are left in the three water years?                  lat            lon            SWE           Flag  \\\ncount  767200.000000  767200.000000  767200.000000  767200.000000   \nmean       41.658381    -114.153407      50.309287     243.444567   \nstd         3.632464       5.423377      95.539184       5.314503   \nmin        33.358254    -123.448583       0.000000     241.000000   \n25%        38.918144    -119.781211       0.000000     241.000000   \n50%        41.071904    -113.773728       0.000000     241.000000   \n75%        44.613976    -110.036736      35.000000     241.000000   \nmax        48.971066    -105.194817     255.000000     255.000000   \n           swe_value    Unnamed: 0  air_temperature_tmmn  \\\ncount  766500.000000  7.672000e+05         767200.000000   \nmean        2.661918  5.118157e+05            272.261304   \nstd         3.989610  3.130358e+05              8.334684   \nmin         0.000000  0.000000e+00            238.000000   \n25%         0.000000  2.561998e+05            266.600000   \n50%         0.000000  4.479995e+05            272.300000   \n75%         5.900000  8.308992e+05            278.600000   \nmax        14.300000  1.022699e+06            298.300000   \n       potential_evapotranspiration  mean_vapor_pressure_deficit  \\\ncount                 767200.000000                767200.000000   \nmean                       3.745021                     0.639996   \nstd                        2.475329                     0.539158   \nmin                        0.000000                     0.000000   \n25%                        1.700000                     0.210000   \n50%                        3.200000                     0.470000   \n75%                        5.600000                     0.950000   \nmax                       15.100000                     3.870000   \n       relative_humidity_rmax  relative_humidity_rmin  precipitation_amount  \\\ncount           767200.000000           767200.000000         767200.000000   \nmean                71.923917               35.503670              2.568437   \nstd                 20.097146               18.506739              6.952663   \nmin                  9.600000                1.000000              0.000000   \n25%                 56.500000               21.400000              0.000000   \n50%                 73.100000               31.500000              0.000000   \n75%                 88.900000               46.600002              2.100000   \nmax                100.000000              100.000000            188.800000   \n       air_temperature_tmmx     wind_speed      elevation          slope  \\\ncount         767200.000000  767200.000000  767200.000000  767200.000000   \nmean             284.183567       4.136627    2397.169757      62.437693   \nstd                9.953636       1.992837     664.726321      16.505208   \nmin              244.400000       0.500000     758.443700       4.277402   \n25%              276.200000       2.700000    1948.688100      52.134558   \n50%              283.700000       3.700000    2481.005900      67.681070   \n75%              292.600000       5.100000    2895.790575      75.046610   \nmax              314.400000      18.600000    3823.384800      83.685555   \n           curvature         aspect       eastness      northness  \ncount  767200.000000  767200.000000  767200.000000  767200.000000  \nmean    -3909.782674     172.221346       0.069654      -0.045099  \nstd      4385.982939     103.103919       0.517192       0.641204  \nmin    -19177.676000       0.415929      -0.785344      -0.785369  \n25%     -6479.865000      92.170681      -0.390727      -0.735620  \n50%     -3710.969200     169.130130       0.133463      -0.191325  \n75%      -575.407800     249.858220       0.576732       0.649554  \nmax      9069.726000     358.656280       0.785398       0.785385  \nhow many groups?  <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7f0340ae9e80>\n             date        lat         lon  SWE  Flag  swe_value  Unnamed: 0  \\\n509898 2019-11-22  33.358254 -107.826881  255   255        0.0      555490   \n509899 2019-11-22  33.358254 -107.826881  255   255        0.0      558045   \n509900 2019-11-22  33.358254 -107.826881  255   255        0.0      716820   \n509907 2020-04-28  33.358254 -107.826881    0   241        0.0      810904   \n509908 2020-04-28  33.358254 -107.826881    0   241        0.0      813466   \n        air_temperature_tmmn  potential_evapotranspiration  \\\n509898                 268.2                           0.4   \n509899                 268.2                           0.4   \n509900                 268.2                           0.6   \n509907                 282.1                           4.2   \n509908                 282.1                           5.0   \n        mean_vapor_pressure_deficit  relative_humidity_rmax  \\\n509898                         0.53                    62.3   \n509899                         0.48                    62.3   \n509900                         0.18                    62.3   \n509907                         0.95                    38.0   \n509908                         0.95                    38.0   \n        relative_humidity_rmin  precipitation_amount  air_temperature_tmmx  \\\n509898                    44.3                  14.1                 294.3   \n509899                    23.0                   7.7                 298.9   \n509900                    37.3                   8.1                 279.6   \n509907                    22.4                   0.0                 287.9   \n509908                    33.5                   0.0                 281.1   \n        wind_speed  elevation     slope  curvature   aspect  eastness  \\\n509898         2.3  2419.5283  51.38327 -2909.2551  276.389 -0.782283   \n509899         2.4  2419.5283  51.38327 -2909.2551  276.389 -0.782283   \n509900         3.4  2419.5283  51.38327 -2909.2551  276.389 -0.782283   \n509907         2.7  2419.5283  51.38327 -2909.2551  276.389 -0.782283   \n509908         3.7  2419.5283  51.38327 -2909.2551  276.389 -0.782283   \n        northness  water_year  \n509898   0.110823        2020  \n509899   0.110823        2020  \n509900   0.110823        2020  \n509907   0.110823        2020  \n509908   0.110823        2020  \nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/X5k7aUqQsrs2/convert_to_time_series.py\", line 193, in <module>\n    add_cumulative_columns()\n  File \"/home/chetana/gw-workspace/X5k7aUqQsrs2/convert_to_time_series.py\", line 170, in add_cumulative_columns\n    df = grouped.apply(interpolate_missing_inplace)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/groupby/groupby.py\", line 1567, in apply\n    result = self._python_apply_general(f, self._selected_obj)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/groupby/groupby.py\", line 1629, in _python_apply_general\n    values, mutated = self.grouper.apply(f, data, self.axis)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/groupby/ops.py\", line 839, in apply\n    res = f(group)\n  File \"/home/chetana/gw-workspace/X5k7aUqQsrs2/convert_to_time_series.py\", line 154, in interpolate_missing_inplace\n    y = group[column_name]\nNameError: name 'column_name' is not defined\n",
  "history_begin_time" : 1699847551436,
  "history_end_time" : 1699847566607,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "GZ96YjSZCvCV",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n# Define file paths for various CSV files\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\ntarget_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef convert_to_time_series():\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n                                'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n                                'relative_humidity_rmax', 'relative_humidity_rmin',\n                                'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(current_ready_csv_path)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(df, column_name, degree=3):\n        x = df.index\n        y = df[column_name]\n\n        # Create a mask for missing values\n        mask = y > 240\n        # Perform interpolation\n        new_y = np.interp(x, x[~mask], y[~mask])\n\n        if np.any(new_y > 240):\n            raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n        # Replace missing values with interpolated values\n        df[column_name] = new_y\n        return df\n\n    # Group the data by 'lat' and 'lon' and apply interpolation for each column\n    grouped = df.groupby(['lat', 'lon'])\n    filled_data = pd.DataFrame()\n    for name, group in grouped:\n        print(f\"Start filling missing values for {name}\")\n        interpolate_missing_inplace(group, 'SWE')\n        filled_data = pd.concat([filled_data, group], axis=0)\n\n    filled_data = filled_data.reset_index()\n\n    if any(filled_data['SWE'] > 240):\n        raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n    # Create a new DataFrame to store the time series data for each location\n    result = pd.DataFrame()\n\n    # Define the number of days to consider (7 days in this case)\n    num_days = 7\n\n    grouped = filled_data.groupby(['lat', 'lon'])\n    for name, group in grouped:\n        group = group.set_index('date')\n        for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n                new_column_name = f'{target_col}_{day}'\n                group[new_column_name] = group[target_col].shift(day)\n        result = pd.concat([result, group], axis=0)\n\n    # Reset the index of the result DataFrame\n    result = result.reset_index()\n    result.to_csv(target_time_series_csv_path, index=False)\n    print(f\"New data is saved to {target_time_series_csv_path}\")\n    shutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\n    print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns():\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    columns_to_be_cumulated = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n                            'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n                            'relative_humidity_rmax', 'relative_humidity_rmin',\n                            'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(current_ready_csv_path)\n    print(\"the column statistics from time series before cumulative: \", df[\"swe_value\"].describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2019-10-01')\n    end_date = pd.to_datetime('2022-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(group):\n\t\tprint(group.head())\n        for column in columns_to_be_cumulated:\n          x = group.index\n          y = group[column_name]\n\n          # Create a mask for missing values\n          mask = y > 240\n          # Perform interpolation\n          new_y = np.interp(x, x[~mask], y[~mask])\n\n          if np.any(new_y > 240):\n              raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n          # Replace missing values with interpolated values\n          group[column_name] = new_y\n        \n        return group\n\n    \n    df = grouped.apply(interpolate_missing_inplace)\n        \n    print(\"All the columns should have missing values filled: \", df.describe())    \n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df.describe())\n    \n    df.to_csv(target_time_series_cumulative_csv_path, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n    \n\n    # TODO: Calculate and add cumulative values for specified columns\n\n# Uncomment this line to execute the 'convert_to_time_series' function\n# convert_to_time_series()\n\n# Uncomment this line to execute the 'add_cumulative_columns' function\nadd_cumulative_columns()\n",
  "history_output" : "  File \"/home/chetana/gw-workspace/GZ96YjSZCvCV/convert_to_time_series.py\", line 151\n    print(group.head())\nTabError: inconsistent use of tabs and spaces in indentation\n",
  "history_begin_time" : 1699847534255,
  "history_end_time" : 1699847534310,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "oDmymPBhP7VD",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n# Define file paths for various CSV files\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\ntarget_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef convert_to_time_series():\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n                                'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n                                'relative_humidity_rmax', 'relative_humidity_rmin',\n                                'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(current_ready_csv_path)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(df, column_name, degree=3):\n        x = df.index\n        y = df[column_name]\n\n        # Create a mask for missing values\n        mask = y > 240\n        # Perform interpolation\n        new_y = np.interp(x, x[~mask], y[~mask])\n\n        if np.any(new_y > 240):\n            raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n        # Replace missing values with interpolated values\n        df[column_name] = new_y\n        return df\n\n    # Group the data by 'lat' and 'lon' and apply interpolation for each column\n    grouped = df.groupby(['lat', 'lon'])\n    filled_data = pd.DataFrame()\n    for name, group in grouped:\n        print(f\"Start filling missing values for {name}\")\n        interpolate_missing_inplace(group, 'SWE')\n        filled_data = pd.concat([filled_data, group], axis=0)\n\n    filled_data = filled_data.reset_index()\n\n    if any(filled_data['SWE'] > 240):\n        raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n    # Create a new DataFrame to store the time series data for each location\n    result = pd.DataFrame()\n\n    # Define the number of days to consider (7 days in this case)\n    num_days = 7\n\n    grouped = filled_data.groupby(['lat', 'lon'])\n    for name, group in grouped:\n        group = group.set_index('date')\n        for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n                new_column_name = f'{target_col}_{day}'\n                group[new_column_name] = group[target_col].shift(day)\n        result = pd.concat([result, group], axis=0)\n\n    # Reset the index of the result DataFrame\n    result = result.reset_index()\n    result.to_csv(target_time_series_csv_path, index=False)\n    print(f\"New data is saved to {target_time_series_csv_path}\")\n    shutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\n    print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns():\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    columns_to_be_cumulated = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n                            'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n                            'relative_humidity_rmax', 'relative_humidity_rmin',\n                            'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(current_ready_csv_path)\n    print(\"the column statistics from time series before cumulative: \", df[\"swe_value\"].describe())\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2019-10-01')\n    end_date = pd.to_datetime('2022-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n    \n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(group, column_name, degree=3):\n        x = group.index\n        y = group[column_name]\n\n        # Create a mask for missing values\n        mask = y > 240\n        # Perform interpolation\n        new_y = np.interp(x, x[~mask], y[~mask])\n\n        if np.any(new_y > 240):\n            raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n        # Replace missing values with interpolated values\n        group[column_name] = new_y\n        return group\n\n    for column in columns_to_be_cumulated:\n        df = grouped.apply(lambda group: interpolate_missing_inplace(group, column))\n        \n    print(\"All the columns should have missing values filled: \", df.describe())    \n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df.describe())\n    \n    df.to_csv(target_time_series_cumulative_csv_path, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n    \n\n    # TODO: Calculate and add cumulative values for specified columns\n\n# Uncomment this line to execute the 'convert_to_time_series' function\n# convert_to_time_series()\n\n# Uncomment this line to execute the 'add_cumulative_columns' function\nadd_cumulative_columns()\n",
  "history_output" : "today date = 2023-11-13\ntest start date:  2022-12-16\ntest end date:  2023-10-07\n/home/chetana\nthe column statistics from time series before cumulative:  count    1.008700e+06\nmean     3.333796e+00\nstd      5.245389e+00\nmin      0.000000e+00\n25%      0.000000e+00\n50%      0.000000e+00\n75%      6.300000e+00\nmax      2.260000e+01\nName: swe_value, dtype: float64\nThis is our unique years [2020 2022 2019 2021]\nhow many rows are left in the three water years?                  lat            lon            SWE           Flag  \\\ncount  767200.000000  767200.000000  767200.000000  767200.000000   \nmean       41.658381    -114.153407      50.309287     243.444567   \nstd         3.632464       5.423377      95.539184       5.314503   \nmin        33.358254    -123.448583       0.000000     241.000000   \n25%        38.918144    -119.781211       0.000000     241.000000   \n50%        41.071904    -113.773728       0.000000     241.000000   \n75%        44.613976    -110.036736      35.000000     241.000000   \nmax        48.971066    -105.194817     255.000000     255.000000   \n           swe_value    Unnamed: 0  air_temperature_tmmn  \\\ncount  766500.000000  7.672000e+05         767200.000000   \nmean        2.661918  5.118157e+05            272.261304   \nstd         3.989610  3.130358e+05              8.334684   \nmin         0.000000  0.000000e+00            238.000000   \n25%         0.000000  2.561998e+05            266.600000   \n50%         0.000000  4.479995e+05            272.300000   \n75%         5.900000  8.308992e+05            278.600000   \nmax        14.300000  1.022699e+06            298.300000   \n       potential_evapotranspiration  mean_vapor_pressure_deficit  \\\ncount                 767200.000000                767200.000000   \nmean                       3.745021                     0.639996   \nstd                        2.475329                     0.539158   \nmin                        0.000000                     0.000000   \n25%                        1.700000                     0.210000   \n50%                        3.200000                     0.470000   \n75%                        5.600000                     0.950000   \nmax                       15.100000                     3.870000   \n       relative_humidity_rmax  relative_humidity_rmin  precipitation_amount  \\\ncount           767200.000000           767200.000000         767200.000000   \nmean                71.923917               35.503670              2.568437   \nstd                 20.097146               18.506739              6.952663   \nmin                  9.600000                1.000000              0.000000   \n25%                 56.500000               21.400000              0.000000   \n50%                 73.100000               31.500000              0.000000   \n75%                 88.900000               46.600002              2.100000   \nmax                100.000000              100.000000            188.800000   \n       air_temperature_tmmx     wind_speed      elevation          slope  \\\ncount         767200.000000  767200.000000  767200.000000  767200.000000   \nmean             284.183567       4.136627    2397.169757      62.437693   \nstd                9.953636       1.992837     664.726321      16.505208   \nmin              244.400000       0.500000     758.443700       4.277402   \n25%              276.200000       2.700000    1948.688100      52.134558   \n50%              283.700000       3.700000    2481.005900      67.681070   \n75%              292.600000       5.100000    2895.790575      75.046610   \nmax              314.400000      18.600000    3823.384800      83.685555   \n           curvature         aspect       eastness      northness  \ncount  767200.000000  767200.000000  767200.000000  767200.000000  \nmean    -3909.782674     172.221346       0.069654      -0.045099  \nstd      4385.982939     103.103919       0.517192       0.641204  \nmin    -19177.676000       0.415929      -0.785344      -0.785369  \n25%     -6479.865000      92.170681      -0.390727      -0.735620  \n50%     -3710.969200     169.130130       0.133463      -0.191325  \n75%      -575.407800     249.858220       0.576732       0.649554  \nmax      9069.726000     358.656280       0.785398       0.785385  \nhow many groups?  <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7f2a164bbf70>\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/oDmymPBhP7VD/convert_to_time_series.py\", line 190, in <module>\n    add_cumulative_columns()\n  File \"/home/chetana/gw-workspace/oDmymPBhP7VD/convert_to_time_series.py\", line 167, in add_cumulative_columns\n    df = grouped.apply(lambda group: interpolate_missing_inplace(group, column))\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/groupby/groupby.py\", line 1567, in apply\n    result = self._python_apply_general(f, self._selected_obj)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/groupby/groupby.py\", line 1629, in _python_apply_general\n    values, mutated = self.grouper.apply(f, data, self.axis)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/groupby/ops.py\", line 839, in apply\n    res = f(group)\n  File \"/home/chetana/gw-workspace/oDmymPBhP7VD/convert_to_time_series.py\", line 167, in <lambda>\n    df = grouped.apply(lambda group: interpolate_missing_inplace(group, column))\n  File \"/home/chetana/gw-workspace/oDmymPBhP7VD/convert_to_time_series.py\", line 157, in interpolate_missing_inplace\n    new_y = np.interp(x, x[~mask], y[~mask])\n  File \"<__array_function__ internals>\", line 200, in interp\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/numpy/lib/function_base.py\", line 1595, in interp\n    return interp_func(x, xp, fp, left, right)\nValueError: array of sample points is empty\n",
  "history_begin_time" : 1699847130928,
  "history_end_time" : 1699847147534,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "zwgDeOrtSZMQ",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n# Define file paths for various CSV files\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\ntarget_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef convert_to_time_series():\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n                                'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n                                'relative_humidity_rmax', 'relative_humidity_rmin',\n                                'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(current_ready_csv_path)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(df, column_name, degree=3):\n        x = df.index\n        y = df[column_name]\n\n        # Create a mask for missing values\n        mask = y > 240\n        # Perform interpolation\n        new_y = np.interp(x, x[~mask], y[~mask])\n\n        if np.any(new_y > 240):\n            raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n        # Replace missing values with interpolated values\n        df[column_name] = new_y\n        return df\n\n    # Group the data by 'lat' and 'lon' and apply interpolation for each column\n    grouped = df.groupby(['lat', 'lon'])\n    filled_data = pd.DataFrame()\n    for name, group in grouped:\n        print(f\"Start filling missing values for {name}\")\n        interpolate_missing_inplace(group, 'SWE')\n        filled_data = pd.concat([filled_data, group], axis=0)\n\n    filled_data = filled_data.reset_index()\n\n    if any(filled_data['SWE'] > 240):\n        raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n    # Create a new DataFrame to store the time series data for each location\n    result = pd.DataFrame()\n\n    # Define the number of days to consider (7 days in this case)\n    num_days = 7\n\n    grouped = filled_data.groupby(['lat', 'lon'])\n    for name, group in grouped:\n        group = group.set_index('date')\n        for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n                new_column_name = f'{target_col}_{day}'\n                group[new_column_name] = group[target_col].shift(day)\n        result = pd.concat([result, group], axis=0)\n\n    # Reset the index of the result DataFrame\n    result = result.reset_index()\n    result.to_csv(target_time_series_csv_path, index=False)\n    print(f\"New data is saved to {target_time_series_csv_path}\")\n    shutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\n    print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns():\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    columns_to_be_cumulated = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n                            'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n                            'relative_humidity_rmax', 'relative_humidity_rmin',\n                            'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(current_ready_csv_path)\n    print(\"the column statistics from time series before cumulative: \", df[\"swe_value\"].describe())\n    # Assuming 'df' is your DataFrame, and you want to convert all columns to numeric\n    df = df.apply(pd.to_numeric, errors='coerce')\n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2019-10-01')\n    end_date = pd.to_datetime('2022-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(group, column_name, degree=3):\n        x = group.index\n        y = group[column_name]\n\n        # Create a mask for missing values\n        mask = y > 240\n        # Perform interpolation\n        new_y = np.interp(x, x[~mask], y[~mask])\n\n        if np.any(new_y > 240):\n            raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n        # Replace missing values with interpolated values\n        group[column_name] = new_y\n        return group\n    \n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n\n    for column in columns_to_be_cumulated:\n        df = grouped.apply(lambda group: interpolate_missing_inplace(group, column))\n        \n    print(\"All the columns should have missing values filled: \", df.describe())    \n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df.describe())\n    \n    df.to_csv(target_time_series_cumulative_csv_path, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n    \n\n    # TODO: Calculate and add cumulative values for specified columns\n\n# Uncomment this line to execute the 'convert_to_time_series' function\n# convert_to_time_series()\n\n# Uncomment this line to execute the 'add_cumulative_columns' function\nadd_cumulative_columns()\n",
  "history_output" : "today date = 2023-11-13\ntest start date:  2022-12-16\ntest end date:  2023-10-07\n/home/chetana\nthe column statistics from time series before cumulative:  count    1.008700e+06\nmean     3.333796e+00\nstd      5.245389e+00\nmin      0.000000e+00\n25%      0.000000e+00\n50%      0.000000e+00\n75%      6.300000e+00\nmax      2.260000e+01\nName: swe_value, dtype: float64\nThis is our unique years [nan]\nhow many rows are left in the three water years?        lat  lon  SWE  Flag  swe_value  Unnamed: 0  air_temperature_tmmn  \\\ncount  0.0  0.0  0.0   0.0        0.0         0.0                   0.0   \nmean   NaN  NaN  NaN   NaN        NaN         NaN                   NaN   \nstd    NaN  NaN  NaN   NaN        NaN         NaN                   NaN   \nmin    NaN  NaN  NaN   NaN        NaN         NaN                   NaN   \n25%    NaN  NaN  NaN   NaN        NaN         NaN                   NaN   \n50%    NaN  NaN  NaN   NaN        NaN         NaN                   NaN   \n75%    NaN  NaN  NaN   NaN        NaN         NaN                   NaN   \nmax    NaN  NaN  NaN   NaN        NaN         NaN                   NaN   \n       potential_evapotranspiration  mean_vapor_pressure_deficit  \\\ncount                           0.0                          0.0   \nmean                            NaN                          NaN   \nstd                             NaN                          NaN   \nmin                             NaN                          NaN   \n25%                             NaN                          NaN   \n50%                             NaN                          NaN   \n75%                             NaN                          NaN   \nmax                             NaN                          NaN   \n       relative_humidity_rmax  relative_humidity_rmin  precipitation_amount  \\\ncount                     0.0                     0.0                   0.0   \nmean                      NaN                     NaN                   NaN   \nstd                       NaN                     NaN                   NaN   \nmin                       NaN                     NaN                   NaN   \n25%                       NaN                     NaN                   NaN   \n50%                       NaN                     NaN                   NaN   \n75%                       NaN                     NaN                   NaN   \nmax                       NaN                     NaN                   NaN   \n       air_temperature_tmmx  wind_speed  elevation  slope  curvature  aspect  \\\ncount                   0.0         0.0        0.0    0.0        0.0     0.0   \nmean                    NaN         NaN        NaN    NaN        NaN     NaN   \nstd                     NaN         NaN        NaN    NaN        NaN     NaN   \nmin                     NaN         NaN        NaN    NaN        NaN     NaN   \n25%                     NaN         NaN        NaN    NaN        NaN     NaN   \n50%                     NaN         NaN        NaN    NaN        NaN     NaN   \n75%                     NaN         NaN        NaN    NaN        NaN     NaN   \nmax                     NaN         NaN        NaN    NaN        NaN     NaN   \n       eastness  northness  \ncount       0.0        0.0  \nmean        NaN        NaN  \nstd         NaN        NaN  \nmin         NaN        NaN  \n25%         NaN        NaN  \n50%         NaN        NaN  \n75%         NaN        NaN  \nmax         NaN        NaN  \nhow many groups?  <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7fbcd65447f0>\nAll the columns should have missing values filled:         lat  lon  SWE  Flag  swe_value  Unnamed: 0  air_temperature_tmmn  \\\ncount  0.0  0.0  0.0   0.0        0.0         0.0                   0.0   \nmean   NaN  NaN  NaN   NaN        NaN         NaN                   NaN   \nstd    NaN  NaN  NaN   NaN        NaN         NaN                   NaN   \nmin    NaN  NaN  NaN   NaN        NaN         NaN                   NaN   \n25%    NaN  NaN  NaN   NaN        NaN         NaN                   NaN   \n50%    NaN  NaN  NaN   NaN        NaN         NaN                   NaN   \n75%    NaN  NaN  NaN   NaN        NaN         NaN                   NaN   \nmax    NaN  NaN  NaN   NaN        NaN         NaN                   NaN   \n       potential_evapotranspiration  mean_vapor_pressure_deficit  \\\ncount                           0.0                          0.0   \nmean                            NaN                          NaN   \nstd                             NaN                          NaN   \nmin                             NaN                          NaN   \n25%                             NaN                          NaN   \n50%                             NaN                          NaN   \n75%                             NaN                          NaN   \nmax                             NaN                          NaN   \n       relative_humidity_rmax  relative_humidity_rmin  precipitation_amount  \\\ncount                     0.0                     0.0                   0.0   \nmean                      NaN                     NaN                   NaN   \nstd                       NaN                     NaN                   NaN   \nmin                       NaN                     NaN                   NaN   \n25%                       NaN                     NaN                   NaN   \n50%                       NaN                     NaN                   NaN   \n75%                       NaN                     NaN                   NaN   \nmax                       NaN                     NaN                   NaN   \n       air_temperature_tmmx  wind_speed  elevation  slope  curvature  aspect  \\\ncount                   0.0         0.0        0.0    0.0        0.0     0.0   \nmean                    NaN         NaN        NaN    NaN        NaN     NaN   \nstd                     NaN         NaN        NaN    NaN        NaN     NaN   \nmin                     NaN         NaN        NaN    NaN        NaN     NaN   \n25%                     NaN         NaN        NaN    NaN        NaN     NaN   \n50%                     NaN         NaN        NaN    NaN        NaN     NaN   \n75%                     NaN         NaN        NaN    NaN        NaN     NaN   \nmax                     NaN         NaN        NaN    NaN        NaN     NaN   \n       eastness  northness  \ncount       0.0        0.0  \nmean        NaN        NaN  \nstd         NaN        NaN  \nmin         NaN        NaN  \n25%         NaN        NaN  \n50%         NaN        NaN  \n75%         NaN        NaN  \nmax         NaN        NaN  \nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/zwgDeOrtSZMQ/convert_to_time_series.py\", line 192, in <module>\n    add_cumulative_columns()\n  File \"/home/chetana/gw-workspace/zwgDeOrtSZMQ/convert_to_time_series.py\", line 173, in add_cumulative_columns\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/frame.py\", line 8402, in groupby\n    return DataFrameGroupBy(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/groupby/groupby.py\", line 965, in __init__\n    grouper, exclusions, obj = get_grouper(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/groupby/grouper.py\", line 878, in get_grouper\n    obj._check_label_or_level_ambiguity(gpr, axis=axis)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/generic.py\", line 1797, in _check_label_or_level_ambiguity\n    raise ValueError(msg)\nValueError: 'lat' is both an index level and a column label, which is ambiguous.\n",
  "history_begin_time" : 1699846989013,
  "history_end_time" : 1699846992975,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "q0CaGwkxtZ3c",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n# Define file paths for various CSV files\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\ntarget_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef convert_to_time_series():\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n                                'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n                                'relative_humidity_rmax', 'relative_humidity_rmin',\n                                'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(current_ready_csv_path)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(df, column_name, degree=3):\n        x = df.index\n        y = df[column_name]\n\n        # Create a mask for missing values\n        mask = y > 240\n        # Perform interpolation\n        new_y = np.interp(x, x[~mask], y[~mask])\n\n        if np.any(new_y > 240):\n            raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n        # Replace missing values with interpolated values\n        df[column_name] = new_y\n        return df\n\n    # Group the data by 'lat' and 'lon' and apply interpolation for each column\n    grouped = df.groupby(['lat', 'lon'])\n    filled_data = pd.DataFrame()\n    for name, group in grouped:\n        print(f\"Start filling missing values for {name}\")\n        interpolate_missing_inplace(group, 'SWE')\n        filled_data = pd.concat([filled_data, group], axis=0)\n\n    filled_data = filled_data.reset_index()\n\n    if any(filled_data['SWE'] > 240):\n        raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n    # Create a new DataFrame to store the time series data for each location\n    result = pd.DataFrame()\n\n    # Define the number of days to consider (7 days in this case)\n    num_days = 7\n\n    grouped = filled_data.groupby(['lat', 'lon'])\n    for name, group in grouped:\n        group = group.set_index('date')\n        for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n                new_column_name = f'{target_col}_{day}'\n                group[new_column_name] = group[target_col].shift(day)\n        result = pd.concat([result, group], axis=0)\n\n    # Reset the index of the result DataFrame\n    result = result.reset_index()\n    result.to_csv(target_time_series_csv_path, index=False)\n    print(f\"New data is saved to {target_time_series_csv_path}\")\n    shutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\n    print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns():\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    columns_to_be_cumulated = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n                            'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n                            'relative_humidity_rmax', 'relative_humidity_rmin',\n                            'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(current_ready_csv_path)\n    print(\"the column statistics from time series before cumulative: \", df[\"swe_value\"].describe())\n    df['date'] = pd.to_datetime(df['date'])\n    # Assuming 'df' is your DataFrame, and you want to convert all columns to numeric\n    df = df.apply(pd.to_numeric, errors='coerce')\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2019-10-01')\n    end_date = pd.to_datetime('2022-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(group, column_name, degree=3):\n        x = group.index\n        y = group[column_name]\n\n        # Create a mask for missing values\n        mask = y > 240\n        # Perform interpolation\n        new_y = np.interp(x, x[~mask], y[~mask])\n\n        if np.any(new_y > 240):\n            raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n        # Replace missing values with interpolated values\n        group[column_name] = new_y\n        return group\n    \n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n\n    for column in columns_to_be_cumulated:\n        df = grouped.apply(lambda group: interpolate_missing_inplace(group, column))\n        \n    print(\"All the columns should have missing values filled: \", df.describe())    \n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df.describe())\n    \n    df.to_csv(target_time_series_cumulative_csv_path, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n    \n\n    # TODO: Calculate and add cumulative values for specified columns\n\n# Uncomment this line to execute the 'convert_to_time_series' function\n# convert_to_time_series()\n\n# Uncomment this line to execute the 'add_cumulative_columns' function\nadd_cumulative_columns()\n",
  "history_output" : "today date = 2023-11-13\ntest start date:  2022-12-16\ntest end date:  2023-10-07\n/home/chetana\nthe column statistics from time series before cumulative:  count    1.008700e+06\nmean     3.333796e+00\nstd      5.245389e+00\nmin      0.000000e+00\n25%      0.000000e+00\n50%      0.000000e+00\n75%      6.300000e+00\nmax      2.260000e+01\nName: swe_value, dtype: float64\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/q0CaGwkxtZ3c/convert_to_time_series.py\", line 192, in <module>\n    add_cumulative_columns()\n  File \"/home/chetana/gw-workspace/q0CaGwkxtZ3c/convert_to_time_series.py\", line 123, in add_cumulative_columns\n    unique_years = df['date'].dt.year.unique()\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/generic.py\", line 5902, in __getattr__\n    return object.__getattribute__(self, name)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/accessor.py\", line 182, in __get__\n    accessor_obj = self._accessor(obj)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/accessors.py\", line 512, in __new__\n    raise AttributeError(\"Can only use .dt accessor with datetimelike values\")\nAttributeError: Can only use .dt accessor with datetimelike values\n",
  "history_begin_time" : 1699846957708,
  "history_end_time" : 1699846961193,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "6iYYOw1PUazE",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n# Define file paths for various CSV files\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\ntarget_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef convert_to_time_series():\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n                                'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n                                'relative_humidity_rmax', 'relative_humidity_rmin',\n                                'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(current_ready_csv_path)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(df, column_name, degree=3):\n        x = df.index\n        y = df[column_name]\n\n        # Create a mask for missing values\n        mask = y > 240\n        # Perform interpolation\n        new_y = np.interp(x, x[~mask], y[~mask])\n\n        if np.any(new_y > 240):\n            raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n        # Replace missing values with interpolated values\n        df[column_name] = new_y\n        return df\n\n    # Group the data by 'lat' and 'lon' and apply interpolation for each column\n    grouped = df.groupby(['lat', 'lon'])\n    filled_data = pd.DataFrame()\n    for name, group in grouped:\n        print(f\"Start filling missing values for {name}\")\n        interpolate_missing_inplace(group, 'SWE')\n        filled_data = pd.concat([filled_data, group], axis=0)\n\n    filled_data = filled_data.reset_index()\n\n    if any(filled_data['SWE'] > 240):\n        raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n    # Create a new DataFrame to store the time series data for each location\n    result = pd.DataFrame()\n\n    # Define the number of days to consider (7 days in this case)\n    num_days = 7\n\n    grouped = filled_data.groupby(['lat', 'lon'])\n    for name, group in grouped:\n        group = group.set_index('date')\n        for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n                new_column_name = f'{target_col}_{day}'\n                group[new_column_name] = group[target_col].shift(day)\n        result = pd.concat([result, group], axis=0)\n\n    # Reset the index of the result DataFrame\n    result = result.reset_index()\n    result.to_csv(target_time_series_csv_path, index=False)\n    print(f\"New data is saved to {target_time_series_csv_path}\")\n    shutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\n    print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns():\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    columns_to_be_cumulated = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n                            'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n                            'relative_humidity_rmax', 'relative_humidity_rmin',\n                            'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(current_ready_csv_path)\n    print(\"the column statistics from time series before cumulative: \", df[\"swe_value\"].describe())\n    df['date'] = pd.to_datetime(df['date'])\n    # Assuming 'df' is your DataFrame, and you want to convert all columns to numeric\n\tdf = df.apply(pd.to_numeric, errors='coerce')\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2019-10-01')\n    end_date = pd.to_datetime('2022-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(group, column_name, degree=3):\n        x = group.index\n        y = group[column_name]\n\n        # Create a mask for missing values\n        mask = y > 240\n        # Perform interpolation\n        new_y = np.interp(x, x[~mask], y[~mask])\n\n        if np.any(new_y > 240):\n            raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n        # Replace missing values with interpolated values\n        group[column_name] = new_y\n        return group\n    \n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n\n    for column in columns_to_be_cumulated:\n        df = grouped.apply(lambda group: interpolate_missing_inplace(group, column))\n        \n    print(\"All the columns should have missing values filled: \", df.describe())    \n    \n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    for column in columns_to_be_cumulated:\n        df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df.describe())\n    \n    df.to_csv(target_time_series_cumulative_csv_path, index=False)\n    \n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n    \n\n    # TODO: Calculate and add cumulative values for specified columns\n\n# Uncomment this line to execute the 'convert_to_time_series' function\n# convert_to_time_series()\n\n# Uncomment this line to execute the 'add_cumulative_columns' function\nadd_cumulative_columns()\n",
  "history_output" : "  File \"/home/chetana/gw-workspace/6iYYOw1PUazE/convert_to_time_series.py\", line 121\n    df = df.apply(pd.to_numeric, errors='coerce')\nTabError: inconsistent use of tabs and spaces in indentation\n",
  "history_begin_time" : 1699846924211,
  "history_end_time" : 1699846924266,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "0k9utelhdcu",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1699805634680,
  "history_end_time" : 1699806085203,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "uV1bXtBzbb2W",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n# Define file paths for various CSV files\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\ntarget_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef convert_to_time_series():\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n                                'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n                                'relative_humidity_rmax', 'relative_humidity_rmin',\n                                'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(current_ready_csv_path)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(df, column_name, degree=3):\n        x = df.index\n        y = df[column_name]\n\n        # Create a mask for missing values\n        mask = y > 240\n        # Perform interpolation\n        new_y = np.interp(x, x[~mask], y[~mask])\n\n        if np.any(new_y > 240):\n            raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n        # Replace missing values with interpolated values\n        df[column_name] = new_y\n\n    # Group the data by 'lat' and 'lon' and apply interpolation for each column\n    grouped = df.groupby(['lat', 'lon'])\n    filled_data = pd.DataFrame()\n    for name, group in grouped:\n        print(f\"Start filling missing values for {name}\")\n        new_df = interpolate_missing_inplace(group, 'SWE')\n        filled_data = pd.concat([filled_data, group], axis=0)\n\n    filled_data = filled_data.reset_index()\n\n    if any(filled_data['SWE'] > 240):\n        raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n    # Create a new DataFrame to store the time series data for each location\n    result = pd.DataFrame()\n\n    # Define the number of days to consider (7 days in this case)\n    num_days = 7\n\n    grouped = filled_data.groupby(['lat', 'lon'])\n    for name, group in grouped:\n        group = group.set_index('date')\n        for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n                new_column_name = f'{target_col}_{day}'\n                group[new_column_name] = group[target_col].shift(day)\n        result = pd.concat([result, group], axis=0)\n\n    # Reset the index of the result DataFrame\n    result = result.reset_index()\n    result.to_csv(target_time_series_csv_path, index=False)\n    print(f\"New data is saved to {target_time_series_csv_path}\")\n    shutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\n    print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns():\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    columns_to_be_cumulated = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n                            'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n                            'relative_humidity_rmax', 'relative_humidity_rmin',\n                            'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(current_ready_csv_path)\n    print(\"the column statistics from time series before cumulative: \", df[\"swe_value\"].describe())\n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2019-10-01')\n    end_date = pd.to_datetime('2022-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n    df.to_csv(f\"{current_ready_csv_path}.test_check.csv\")\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n\n    # Sort each group by date and calculate cumulative precipitation\n    for column in columns_to_be_cumulated:\n      df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df.head())\n    df.to_csv(target_time_series_cumulative_csv_path, index=False)\n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n    \n\n    # TODO: Calculate and add cumulative values for specified columns\n\n# Uncomment this line to execute the 'convert_to_time_series' function\n# convert_to_time_series()\n\n# Uncomment this line to execute the 'add_cumulative_columns' function\nadd_cumulative_columns()\n",
  "history_output" : "today date = 2023-11-12\ntest start date:  2022-10-16\ntest end date:  2023-10-07\n/home/chetana\nthe column statistics from time series before cumulative:  count    1.008700e+06\nmean     3.333796e+00\nstd      5.245389e+00\nmin      0.000000e+00\n25%      0.000000e+00\n50%      0.000000e+00\n75%      6.300000e+00\nmax      2.260000e+01\nName: swe_value, dtype: float64\nThis is our unique years [2020 2022 2019 2021]\nhow many rows are left in the three water years?                  lat            lon            SWE           Flag  \\\ncount  767200.000000  767200.000000  767200.000000  767200.000000   \nmean       41.658381    -114.153407      50.309287     243.444567   \nstd         3.632464       5.423377      95.539184       5.314503   \nmin        33.358254    -123.448583       0.000000     241.000000   \n25%        38.918144    -119.781211       0.000000     241.000000   \n50%        41.071904    -113.773728       0.000000     241.000000   \n75%        44.613976    -110.036736      35.000000     241.000000   \nmax        48.971066    -105.194817     255.000000     255.000000   \n           swe_value    Unnamed: 0  air_temperature_tmmn  \\\ncount  766500.000000  7.672000e+05         767200.000000   \nmean        2.661918  5.118157e+05            272.261304   \nstd         3.989610  3.130358e+05              8.334684   \nmin         0.000000  0.000000e+00            238.000000   \n25%         0.000000  2.561998e+05            266.600000   \n50%         0.000000  4.479995e+05            272.300000   \n75%         5.900000  8.308992e+05            278.600000   \nmax        14.300000  1.022699e+06            298.300000   \n       potential_evapotranspiration  mean_vapor_pressure_deficit  \\\ncount                 767200.000000                767200.000000   \nmean                       3.745021                     0.639996   \nstd                        2.475329                     0.539158   \nmin                        0.000000                     0.000000   \n25%                        1.700000                     0.210000   \n50%                        3.200000                     0.470000   \n75%                        5.600000                     0.950000   \nmax                       15.100000                     3.870000   \n       relative_humidity_rmax  relative_humidity_rmin  precipitation_amount  \\\ncount           767200.000000           767200.000000         767200.000000   \nmean                71.923917               35.503670              2.568437   \nstd                 20.097146               18.506739              6.952663   \nmin                  9.600000                1.000000              0.000000   \n25%                 56.500000               21.400000              0.000000   \n50%                 73.100000               31.500000              0.000000   \n75%                 88.900000               46.600002              2.100000   \nmax                100.000000              100.000000            188.800000   \n       air_temperature_tmmx     wind_speed      elevation          slope  \\\ncount         767200.000000  767200.000000  767200.000000  767200.000000   \nmean             284.183567       4.136627    2397.169757      62.437693   \nstd                9.953636       1.992837     664.726321      16.505208   \nmin              244.400000       0.500000     758.443700       4.277402   \n25%              276.200000       2.700000    1948.688100      52.134558   \n50%              283.700000       3.700000    2481.005900      67.681070   \n75%              292.600000       5.100000    2895.790575      75.046610   \nmax              314.400000      18.600000    3823.384800      83.685555   \n           curvature         aspect       eastness      northness  \ncount  767200.000000  767200.000000  767200.000000  767200.000000  \nmean    -3909.782674     172.221346       0.069654      -0.045099  \nstd      4385.982939     103.103919       0.517192       0.641204  \nmin    -19177.676000       0.415929      -0.785344      -0.785369  \n25%     -6479.865000      92.170681      -0.390727      -0.735620  \n50%     -3710.969200     169.130130       0.133463      -0.191325  \n75%      -575.407800     249.858220       0.576732       0.649554  \nmax      9069.726000     358.656280       0.785398       0.785385  \nhow many groups?  <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7fe9f1a56760>\nThis is the dataframe after cumulative columns are added\n        date       lat         lon  SWE  Flag  swe_value  Unnamed: 0  \\\n0 2020-11-25  37.19236 -118.939041  255   255        2.0      802331   \n1 2020-10-18  37.19236 -118.939041    0   241        0.0      802293   \n2 2020-09-21  37.19236 -118.939041    0   241        0.0      802266   \n3 2022-09-01  37.19236 -118.939041    0   241        0.0       35648   \n4 2019-10-03  37.19236 -118.939041    0   241        0.0      546680   \n   air_temperature_tmmn  potential_evapotranspiration  \\\n0                 263.5                           4.6   \n1                 278.8                           3.5   \n2                 278.3                           1.1   \n3                 283.6                           5.5   \n4                 267.1                           0.7   \n   mean_vapor_pressure_deficit  relative_humidity_rmax  \\\n0                         0.66                    67.3   \n1                         0.48                    22.2   \n2                         0.08                    34.0   \n3                         1.48                    50.2   \n4                         0.95                    26.6   \n   relative_humidity_rmin  precipitation_amount  air_temperature_tmmx  \\\n0               14.900001                   0.0                 282.8   \n1               33.900000                   0.0                 263.9   \n2               18.400000                   0.0                 273.0   \n3               13.000000                   0.0                 293.1   \n4               29.300001                   0.0                 295.2   \n   wind_speed  elevation     slope  curvature     aspect  eastness  northness  \\\n0         1.6  3030.4348  76.84091  -84.35688  24.605782  0.394541   0.737872   \n1         3.5  3030.4348  76.84091  -84.35688  24.605782  0.394541   0.737872   \n2         3.3  3030.4348  76.84091  -84.35688  24.605782  0.394541   0.737872   \n3         2.6  3030.4348  76.84091  -84.35688  24.605782  0.394541   0.737872   \n4         2.5  3030.4348  76.84091  -84.35688  24.605782  0.394541   0.737872   \n   water_year  cumulative_SWE  cumulative_Flag  \\\n0        2021            2805            13650   \n1        2021            1020             4394   \n2        2020           22698            86989   \n3        2022           21724            81914   \n4        2020               0              723   \n   cumulative_air_temperature_tmmn  cumulative_potential_evapotranspiration  \\\n0                          15306.9                               157.800001   \n1                           5030.3                                44.100000   \n2                          95979.1                              1280.300014   \n3                          91061.1                               929.600009   \n4                            797.9                                 7.200000   \n   cumulative_mean_vapor_pressure_deficit  cumulative_relative_humidity_rmax  \\\n0                               19.560000                        2290.500021   \n1                                6.060000                         466.200007   \n2                              233.249996                       22579.700204   \n3                              253.289996                       23188.400244   \n4                                2.830000                          71.600001   \n   cumulative_relative_humidity_rmin  cumulative_precipitation_amount  \\\n0                        1284.800018                        31.100000   \n1                         373.400005                         4.900000   \n2                        8971.500088                       718.400014   \n3                        8809.900098                       770.500007   \n4                          99.300001                         0.000000   \n   cumulative_air_temperature_tmmx  cumulative_wind_speed  \n0                          15589.2             208.000003  \n1                           5001.6              72.700001  \n2                         102150.4             977.200008  \n3                          94640.4             811.300009  \n4                            880.5               6.800000  \nAll the cumulative variables are added successfully! /home/chetana/gridmet_test_run/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv\ndouble check the swe_value statistics: count    766500.000000\nmean          2.661918\nstd           3.989610\nmin           0.000000\n25%           0.000000\n50%           0.000000\n75%           5.900000\nmax          14.300000\nName: swe_value, dtype: float64\n",
  "history_begin_time" : 1699801958230,
  "history_end_time" : 1699801997813,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "nNXjAT4yF9vT",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n# Define file paths for various CSV files\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\ntarget_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef convert_to_time_series():\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n                                'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n                                'relative_humidity_rmax', 'relative_humidity_rmin',\n                                'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(current_ready_csv_path)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(df, column_name, degree=3):\n        x = df.index\n        y = df[column_name]\n\n        # Create a mask for missing values\n        mask = y > 240\n        # Perform interpolation\n        new_y = np.interp(x, x[~mask], y[~mask])\n\n        if np.any(new_y > 240):\n            raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n        # Replace missing values with interpolated values\n        df[column_name] = new_y\n\n    # Group the data by 'lat' and 'lon' and apply interpolation for each column\n    grouped = df.groupby(['lat', 'lon'])\n    filled_data = pd.DataFrame()\n    for name, group in grouped:\n        print(f\"Start filling missing values for {name}\")\n        new_df = interpolate_missing_inplace(group, 'SWE')\n        filled_data = pd.concat([filled_data, group], axis=0)\n\n    filled_data = filled_data.reset_index()\n\n    if any(filled_data['SWE'] > 240):\n        raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n    # Create a new DataFrame to store the time series data for each location\n    result = pd.DataFrame()\n\n    # Define the number of days to consider (7 days in this case)\n    num_days = 7\n\n    grouped = filled_data.groupby(['lat', 'lon'])\n    for name, group in grouped:\n        group = group.set_index('date')\n        for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n                new_column_name = f'{target_col}_{day}'\n                group[new_column_name] = group[target_col].shift(day)\n        result = pd.concat([result, group], axis=0)\n\n    # Reset the index of the result DataFrame\n    result = result.reset_index()\n    result.to_csv(target_time_series_csv_path, index=False)\n    print(f\"New data is saved to {target_time_series_csv_path}\")\n    shutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\n    print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns():\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    columns_to_be_cumulated = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n                            'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n                            'relative_humidity_rmax', 'relative_humidity_rmin',\n                            'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(current_ready_csv_path)\n    print(\"the column statistics from time series before cumulative: \", df[\"swe_value\"].describe())\n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2019-10-01')\n    end_date = pd.to_datetime('2022-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n    print(\"how many rows are left in the three water years?\", df.describe())\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n    print(\"how many groups? \", grouped)\n\n    # Sort each group by date and calculate cumulative precipitation\n    for column in columns_to_be_cumulated:\n      df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df.head())\n    df.to_csv(target_time_series_cumulative_csv_path, index=False)\n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n    \n\n    # TODO: Calculate and add cumulative values for specified columns\n\n# Uncomment this line to execute the 'convert_to_time_series' function\n# convert_to_time_series()\n\n# Uncomment this line to execute the 'add_cumulative_columns' function\nadd_cumulative_columns()\n",
  "history_output" : "today date = 2023-11-12\ntest start date:  2022-10-16\ntest end date:  2023-10-07\n/home/chetana\nthe column statistics from time series before cumulative:  count    1.008700e+06\nmean     3.333796e+00\nstd      5.245389e+00\nmin      0.000000e+00\n25%      0.000000e+00\n50%      0.000000e+00\n75%      6.300000e+00\nmax      2.260000e+01\nName: swe_value, dtype: float64\nThis is our unique years [2020 2022 2019 2021]\nhow many rows are left in the three water years?                  lat            lon            SWE           Flag  \\\ncount  767200.000000  767200.000000  767200.000000  767200.000000   \nmean       41.658381    -114.153407      50.309287     243.444567   \nstd         3.632464       5.423377      95.539184       5.314503   \nmin        33.358254    -123.448583       0.000000     241.000000   \n25%        38.918144    -119.781211       0.000000     241.000000   \n50%        41.071904    -113.773728       0.000000     241.000000   \n75%        44.613976    -110.036736      35.000000     241.000000   \nmax        48.971066    -105.194817     255.000000     255.000000   \n           swe_value    Unnamed: 0  air_temperature_tmmn  \\\ncount  766500.000000  7.672000e+05         767200.000000   \nmean        2.661918  5.118157e+05            272.261304   \nstd         3.989610  3.130358e+05              8.334684   \nmin         0.000000  0.000000e+00            238.000000   \n25%         0.000000  2.561998e+05            266.600000   \n50%         0.000000  4.479995e+05            272.300000   \n75%         5.900000  8.308992e+05            278.600000   \nmax        14.300000  1.022699e+06            298.300000   \n       potential_evapotranspiration  mean_vapor_pressure_deficit  \\\ncount                 767200.000000                767200.000000   \nmean                       3.745021                     0.639996   \nstd                        2.475329                     0.539158   \nmin                        0.000000                     0.000000   \n25%                        1.700000                     0.210000   \n50%                        3.200000                     0.470000   \n75%                        5.600000                     0.950000   \nmax                       15.100000                     3.870000   \n       relative_humidity_rmax  relative_humidity_rmin  precipitation_amount  \\\ncount           767200.000000           767200.000000         767200.000000   \nmean                71.923917               35.503670              2.568437   \nstd                 20.097146               18.506739              6.952663   \nmin                  9.600000                1.000000              0.000000   \n25%                 56.500000               21.400000              0.000000   \n50%                 73.100000               31.500000              0.000000   \n75%                 88.900000               46.600002              2.100000   \nmax                100.000000              100.000000            188.800000   \n       air_temperature_tmmx     wind_speed      elevation          slope  \\\ncount         767200.000000  767200.000000  767200.000000  767200.000000   \nmean             284.183567       4.136627    2397.169757      62.437693   \nstd                9.953636       1.992837     664.726321      16.505208   \nmin              244.400000       0.500000     758.443700       4.277402   \n25%              276.200000       2.700000    1948.688100      52.134558   \n50%              283.700000       3.700000    2481.005900      67.681070   \n75%              292.600000       5.100000    2895.790575      75.046610   \nmax              314.400000      18.600000    3823.384800      83.685555   \n           curvature         aspect       eastness      northness  \ncount  767200.000000  767200.000000  767200.000000  767200.000000  \nmean    -3909.782674     172.221346       0.069654      -0.045099  \nstd      4385.982939     103.103919       0.517192       0.641204  \nmin    -19177.676000       0.415929      -0.785344      -0.785369  \n25%     -6479.865000      92.170681      -0.390727      -0.735620  \n50%     -3710.969200     169.130130       0.133463      -0.191325  \n75%      -575.407800     249.858220       0.576732       0.649554  \nmax      9069.726000     358.656280       0.785398       0.785385  \nhow many groups?  <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7f76442fe700>\nThis is the dataframe after cumulative columns are added\n        date       lat         lon  SWE  Flag  swe_value  Unnamed: 0  \\\n0 2020-11-25  37.19236 -118.939041  255   255        2.0      802331   \n1 2020-10-18  37.19236 -118.939041    0   241        0.0      802293   \n2 2020-09-21  37.19236 -118.939041    0   241        0.0      802266   \n3 2022-09-01  37.19236 -118.939041    0   241        0.0       35648   \n4 2019-10-03  37.19236 -118.939041    0   241        0.0      546680   \n   air_temperature_tmmn  potential_evapotranspiration  \\\n0                 263.5                           4.6   \n1                 278.8                           3.5   \n2                 278.3                           1.1   \n3                 283.6                           5.5   \n4                 267.1                           0.7   \n   mean_vapor_pressure_deficit  relative_humidity_rmax  \\\n0                         0.66                    67.3   \n1                         0.48                    22.2   \n2                         0.08                    34.0   \n3                         1.48                    50.2   \n4                         0.95                    26.6   \n   relative_humidity_rmin  precipitation_amount  air_temperature_tmmx  \\\n0               14.900001                   0.0                 282.8   \n1               33.900000                   0.0                 263.9   \n2               18.400000                   0.0                 273.0   \n3               13.000000                   0.0                 293.1   \n4               29.300001                   0.0                 295.2   \n   wind_speed  elevation     slope  curvature     aspect  eastness  northness  \\\n0         1.6  3030.4348  76.84091  -84.35688  24.605782  0.394541   0.737872   \n1         3.5  3030.4348  76.84091  -84.35688  24.605782  0.394541   0.737872   \n2         3.3  3030.4348  76.84091  -84.35688  24.605782  0.394541   0.737872   \n3         2.6  3030.4348  76.84091  -84.35688  24.605782  0.394541   0.737872   \n4         2.5  3030.4348  76.84091  -84.35688  24.605782  0.394541   0.737872   \n   water_year  cumulative_SWE  cumulative_Flag  \\\n0        2021            2805            13650   \n1        2021            1020             4394   \n2        2020           22698            86989   \n3        2022           21724            81914   \n4        2020               0              723   \n   cumulative_air_temperature_tmmn  cumulative_potential_evapotranspiration  \\\n0                          15306.9                               157.800001   \n1                           5030.3                                44.100000   \n2                          95979.1                              1280.300014   \n3                          91061.1                               929.600009   \n4                            797.9                                 7.200000   \n   cumulative_mean_vapor_pressure_deficit  cumulative_relative_humidity_rmax  \\\n0                               19.560000                        2290.500021   \n1                                6.060000                         466.200007   \n2                              233.249996                       22579.700204   \n3                              253.289996                       23188.400244   \n4                                2.830000                          71.600001   \n   cumulative_relative_humidity_rmin  cumulative_precipitation_amount  \\\n0                        1284.800018                        31.100000   \n1                         373.400005                         4.900000   \n2                        8971.500088                       718.400014   \n3                        8809.900098                       770.500007   \n4                          99.300001                         0.000000   \n   cumulative_air_temperature_tmmx  cumulative_wind_speed  \n0                          15589.2             208.000003  \n1                           5001.6              72.700001  \n2                         102150.4             977.200008  \n3                          94640.4             811.300009  \n4                            880.5               6.800000  \nAll the cumulative variables are added successfully! /home/chetana/gridmet_test_run/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv\ndouble check the swe_value statistics: count    766500.000000\nmean          2.661918\nstd           3.989610\nmin           0.000000\n25%           0.000000\n50%           0.000000\n75%           5.900000\nmax          14.300000\nName: swe_value, dtype: float64\n",
  "history_begin_time" : 1699801666316,
  "history_end_time" : 1699801696232,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "N423kFpxSbfU",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n# Define file paths for various CSV files\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\ntarget_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef convert_to_time_series():\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n                                'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n                                'relative_humidity_rmax', 'relative_humidity_rmin',\n                                'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(current_ready_csv_path)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(df, column_name, degree=3):\n        x = df.index\n        y = df[column_name]\n\n        # Create a mask for missing values\n        mask = y > 240\n        # Perform interpolation\n        new_y = np.interp(x, x[~mask], y[~mask])\n\n        if np.any(new_y > 240):\n            raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n        # Replace missing values with interpolated values\n        df[column_name] = new_y\n\n    # Group the data by 'lat' and 'lon' and apply interpolation for each column\n    grouped = df.groupby(['lat', 'lon'])\n    filled_data = pd.DataFrame()\n    for name, group in grouped:\n        print(f\"Start filling missing values for {name}\")\n        new_df = interpolate_missing_inplace(group, 'SWE')\n        filled_data = pd.concat([filled_data, group], axis=0)\n\n    filled_data = filled_data.reset_index()\n\n    if any(filled_data['SWE'] > 240):\n        raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n    # Create a new DataFrame to store the time series data for each location\n    result = pd.DataFrame()\n\n    # Define the number of days to consider (7 days in this case)\n    num_days = 7\n\n    grouped = filled_data.groupby(['lat', 'lon'])\n    for name, group in grouped:\n        group = group.set_index('date')\n        for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n                new_column_name = f'{target_col}_{day}'\n                group[new_column_name] = group[target_col].shift(day)\n        result = pd.concat([result, group], axis=0)\n\n    # Reset the index of the result DataFrame\n    result = result.reset_index()\n    result.to_csv(target_time_series_csv_path, index=False)\n    print(f\"New data is saved to {target_time_series_csv_path}\")\n    shutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\n    print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns():\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    columns_to_be_cumulated = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n                            'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n                            'relative_humidity_rmax', 'relative_humidity_rmin',\n                            'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(current_ready_csv_path)\n    print(\"the column statistics from time series before cumulative: \", df[\"swe_value\"].describe())\n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2019-10-01')\n    end_date = pd.to_datetime('2022-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n\n    # Sort each group by date and calculate cumulative precipitation\n    for column in columns_to_be_cumulated:\n      df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df.head())\n    df.to_csv(target_time_series_cumulative_csv_path, index=False)\n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    print(\"double check the swe_value statistics:\", df[\"swe_value\"].describe())\n    \n\n    # TODO: Calculate and add cumulative values for specified columns\n\n# Uncomment this line to execute the 'convert_to_time_series' function\n# convert_to_time_series()\n\n# Uncomment this line to execute the 'add_cumulative_columns' function\nadd_cumulative_columns()\n",
  "history_output" : "today date = 2023-11-12\ntest start date:  2022-10-16\ntest end date:  2023-10-07\n/home/chetana\nthe column statistics from time series before cumulative:  count    1.008700e+06\nmean     3.333796e+00\nstd      5.245389e+00\nmin      0.000000e+00\n25%      0.000000e+00\n50%      0.000000e+00\n75%      6.300000e+00\nmax      2.260000e+01\nName: swe_value, dtype: float64\nThis is our unique years [2020 2022 2019 2021]\nThis is the dataframe after cumulative columns are added\n        date       lat         lon  SWE  Flag  swe_value  Unnamed: 0  \\\n0 2020-11-25  37.19236 -118.939041  255   255        2.0      802331   \n1 2020-10-18  37.19236 -118.939041    0   241        0.0      802293   \n2 2020-09-21  37.19236 -118.939041    0   241        0.0      802266   \n3 2022-09-01  37.19236 -118.939041    0   241        0.0       35648   \n4 2019-10-03  37.19236 -118.939041    0   241        0.0      546680   \n   air_temperature_tmmn  potential_evapotranspiration  \\\n0                 263.5                           4.6   \n1                 278.8                           3.5   \n2                 278.3                           1.1   \n3                 283.6                           5.5   \n4                 267.1                           0.7   \n   mean_vapor_pressure_deficit  relative_humidity_rmax  \\\n0                         0.66                    67.3   \n1                         0.48                    22.2   \n2                         0.08                    34.0   \n3                         1.48                    50.2   \n4                         0.95                    26.6   \n   relative_humidity_rmin  precipitation_amount  air_temperature_tmmx  \\\n0               14.900001                   0.0                 282.8   \n1               33.900000                   0.0                 263.9   \n2               18.400000                   0.0                 273.0   \n3               13.000000                   0.0                 293.1   \n4               29.300001                   0.0                 295.2   \n   wind_speed  elevation     slope  curvature     aspect  eastness  northness  \\\n0         1.6  3030.4348  76.84091  -84.35688  24.605782  0.394541   0.737872   \n1         3.5  3030.4348  76.84091  -84.35688  24.605782  0.394541   0.737872   \n2         3.3  3030.4348  76.84091  -84.35688  24.605782  0.394541   0.737872   \n3         2.6  3030.4348  76.84091  -84.35688  24.605782  0.394541   0.737872   \n4         2.5  3030.4348  76.84091  -84.35688  24.605782  0.394541   0.737872   \n   water_year  cumulative_SWE  cumulative_Flag  \\\n0        2021            2805            13650   \n1        2021            1020             4394   \n2        2020           22698            86989   \n3        2022           21724            81914   \n4        2020               0              723   \n   cumulative_air_temperature_tmmn  cumulative_potential_evapotranspiration  \\\n0                          15306.9                               157.800001   \n1                           5030.3                                44.100000   \n2                          95979.1                              1280.300014   \n3                          91061.1                               929.600009   \n4                            797.9                                 7.200000   \n   cumulative_mean_vapor_pressure_deficit  cumulative_relative_humidity_rmax  \\\n0                               19.560000                        2290.500021   \n1                                6.060000                         466.200007   \n2                              233.249996                       22579.700204   \n3                              253.289996                       23188.400244   \n4                                2.830000                          71.600001   \n   cumulative_relative_humidity_rmin  cumulative_precipitation_amount  \\\n0                        1284.800018                        31.100000   \n1                         373.400005                         4.900000   \n2                        8971.500088                       718.400014   \n3                        8809.900098                       770.500007   \n4                          99.300001                         0.000000   \n   cumulative_air_temperature_tmmx  cumulative_wind_speed  \n0                          15589.2             208.000003  \n1                           5001.6              72.700001  \n2                         102150.4             977.200008  \n3                          94640.4             811.300009  \n4                            880.5               6.800000  \nAll the cumulative variables are added successfully! /home/chetana/gridmet_test_run/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv\ndouble check the swe_value statistics: count    766500.000000\nmean          2.661918\nstd           3.989610\nmin           0.000000\n25%           0.000000\n50%           0.000000\n75%           5.900000\nmax          14.300000\nName: swe_value, dtype: float64\n",
  "history_begin_time" : 1699801527338,
  "history_end_time" : 1699801557124,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "d8NhJuWTaf4f",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n# Define file paths for various CSV files\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\ntarget_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef convert_to_time_series():\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n                                'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n                                'relative_humidity_rmax', 'relative_humidity_rmin',\n                                'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(current_ready_csv_path)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(df, column_name, degree=3):\n        x = df.index\n        y = df[column_name]\n\n        # Create a mask for missing values\n        mask = y > 240\n        # Perform interpolation\n        new_y = np.interp(x, x[~mask], y[~mask])\n\n        if np.any(new_y > 240):\n            raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n        # Replace missing values with interpolated values\n        df[column_name] = new_y\n\n    # Group the data by 'lat' and 'lon' and apply interpolation for each column\n    grouped = df.groupby(['lat', 'lon'])\n    filled_data = pd.DataFrame()\n    for name, group in grouped:\n        print(f\"Start filling missing values for {name}\")\n        new_df = interpolate_missing_inplace(group, 'SWE')\n        filled_data = pd.concat([filled_data, group], axis=0)\n\n    filled_data = filled_data.reset_index()\n\n    if any(filled_data['SWE'] > 240):\n        raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n    # Create a new DataFrame to store the time series data for each location\n    result = pd.DataFrame()\n\n    # Define the number of days to consider (7 days in this case)\n    num_days = 7\n\n    grouped = filled_data.groupby(['lat', 'lon'])\n    for name, group in grouped:\n        group = group.set_index('date')\n        for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n                new_column_name = f'{target_col}_{day}'\n                group[new_column_name] = group[target_col].shift(day)\n        result = pd.concat([result, group], axis=0)\n\n    # Reset the index of the result DataFrame\n    result = result.reset_index()\n    result.to_csv(target_time_series_csv_path, index=False)\n    print(f\"New data is saved to {target_time_series_csv_path}\")\n    shutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\n    print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns():\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    columns_to_be_cumulated = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n                            'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n                            'relative_humidity_rmax', 'relative_humidity_rmin',\n                            'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    # directly read from original file\n    df = pd.read_csv(current_ready_csv_path)\n    print(\"the column statistics from time series before cumulative: \", df[df['swe_value'] <= 200].describe())\n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2019-10-01')\n    end_date = pd.to_datetime('2022-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n\n    # Sort each group by date and calculate cumulative precipitation\n    for column in columns_to_be_cumulated:\n      df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df.head())\n    df.to_csv(target_time_series_cumulative_csv_path, index=False)\n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    \n\n    # TODO: Calculate and add cumulative values for specified columns\n\n# Uncomment this line to execute the 'convert_to_time_series' function\n# convert_to_time_series()\n\n# Uncomment this line to execute the 'add_cumulative_columns' function\nadd_cumulative_columns()\n",
  "history_output" : "today date = 2023-11-12\ntest start date:  2022-10-16\ntest end date:  2023-10-07\n/home/chetana\nthe column statistics from time series before cumulative:                  lat           lon           SWE          Flag     swe_value  \\\ncount  1.008700e+06  1.008700e+06  1.008700e+06  1.008700e+06  1.008700e+06   \nmean   4.165838e+01 -1.141534e+02  5.049100e+01  2.434455e+02  3.333796e+00   \nstd    3.632464e+00  5.423377e+00  9.551420e+01  5.315359e+00  5.245389e+00   \nmin    3.335825e+01 -1.234486e+02  0.000000e+00  2.410000e+02  0.000000e+00   \n25%    3.891814e+01 -1.197812e+02  0.000000e+00  2.410000e+02  0.000000e+00   \n50%    4.107190e+01 -1.137737e+02  0.000000e+00  2.410000e+02  0.000000e+00   \n75%    4.461398e+01 -1.100367e+02  3.600000e+01  2.410000e+02  6.300000e+00   \nmax    4.897107e+01 -1.051948e+02  2.550000e+02  2.550000e+02  2.260000e+01   \n         Unnamed: 0  air_temperature_tmmn  potential_evapotranspiration  \\\ncount  1.008700e+06          1.008700e+06                  1.008700e+06   \nmean   5.164940e+05          2.721254e+02                  3.937009e+00   \nstd    2.937986e+05          8.333993e+00                  2.476735e+00   \nmin    0.000000e+00          2.380000e+02                  0.000000e+00   \n25%    2.655018e+05          2.664000e+02                  1.800000e+00   \n50%    5.183495e+05          2.723000e+02                  3.500000e+00   \n75%    7.705242e+05          2.785000e+02                  5.800000e+00   \nmax    1.022699e+06          2.983000e+02                  1.510000e+01   \n       mean_vapor_pressure_deficit  relative_humidity_rmax  \\\ncount                 1.008700e+06            1.008700e+06   \nmean                  6.318230e-01            7.107944e+01   \nstd                   5.238681e-01            2.027642e+01   \nmin                   0.000000e+00            8.200000e+00   \n25%                   2.100000e-01            5.540000e+01   \n50%                   4.800000e-01            7.220001e+01   \n75%                   9.400000e-01            8.800000e+01   \nmax                   3.870000e+00            1.000000e+02   \n       relative_humidity_rmin  precipitation_amount  air_temperature_tmmx  \\\ncount            1.008700e+06          1.008700e+06          1.008700e+06   \nmean             3.555765e+01          2.606782e+00          2.838897e+02   \nstd              1.877470e+01          7.298533e+00          9.873665e+00   \nmin              1.000000e+00          0.000000e+00          2.444000e+02   \n25%              2.120000e+01          0.000000e+00          2.760000e+02   \n50%              3.150000e+01          0.000000e+00          2.833000e+02   \n75%              4.690000e+01          2.100000e+00          2.921000e+02   \nmax              1.000000e+02          5.042000e+02          3.144000e+02   \n         wind_speed     elevation         slope     curvature        aspect  \\\ncount  1.008700e+06  1.008700e+06  1.008700e+06  1.008700e+06  1.008700e+06   \nmean   4.192890e+00  2.397170e+03  6.243769e+01 -3.909783e+03  1.722213e+02   \nstd    2.023231e+00  6.647262e+02  1.650521e+01  4.385982e+03  1.031039e+02   \nmin    5.000000e-01  7.584437e+02  4.277402e+00 -1.917768e+04  4.159291e-01   \n25%    2.700000e+00  1.948688e+03  5.213456e+01 -6.479865e+03  9.217068e+01   \n50%    3.700000e+00  2.481006e+03  6.768107e+01 -3.710969e+03  1.691301e+02   \n75%    5.200000e+00  2.895791e+03  7.504661e+01 -5.754078e+02  2.498582e+02   \nmax    1.860000e+01  3.823385e+03  8.368555e+01  9.069726e+03  3.586563e+02   \n           eastness     northness  \ncount  1.008700e+06  1.008700e+06  \nmean   6.965357e-02 -4.509867e-02  \nstd    5.171924e-01  6.412035e-01  \nmin   -7.853438e-01 -7.853694e-01  \n25%   -3.907275e-01 -7.356204e-01  \n50%    1.334633e-01 -1.913248e-01  \n75%    5.767317e-01  6.495535e-01  \nmax    7.853980e-01  7.853850e-01  \nThis is our unique years [2020 2022 2019 2021]\nThis is the dataframe after cumulative columns are added\n        date       lat         lon  SWE  Flag  swe_value  Unnamed: 0  \\\n0 2020-11-25  37.19236 -118.939041  255   255        2.0      802331   \n1 2020-10-18  37.19236 -118.939041    0   241        0.0      802293   \n2 2020-09-21  37.19236 -118.939041    0   241        0.0      802266   \n3 2022-09-01  37.19236 -118.939041    0   241        0.0       35648   \n4 2019-10-03  37.19236 -118.939041    0   241        0.0      546680   \n   air_temperature_tmmn  potential_evapotranspiration  \\\n0                 263.5                           4.6   \n1                 278.8                           3.5   \n2                 278.3                           1.1   \n3                 283.6                           5.5   \n4                 267.1                           0.7   \n   mean_vapor_pressure_deficit  relative_humidity_rmax  \\\n0                         0.66                    67.3   \n1                         0.48                    22.2   \n2                         0.08                    34.0   \n3                         1.48                    50.2   \n4                         0.95                    26.6   \n   relative_humidity_rmin  precipitation_amount  air_temperature_tmmx  \\\n0               14.900001                   0.0                 282.8   \n1               33.900000                   0.0                 263.9   \n2               18.400000                   0.0                 273.0   \n3               13.000000                   0.0                 293.1   \n4               29.300001                   0.0                 295.2   \n   wind_speed  elevation     slope  curvature     aspect  eastness  northness  \\\n0         1.6  3030.4348  76.84091  -84.35688  24.605782  0.394541   0.737872   \n1         3.5  3030.4348  76.84091  -84.35688  24.605782  0.394541   0.737872   \n2         3.3  3030.4348  76.84091  -84.35688  24.605782  0.394541   0.737872   \n3         2.6  3030.4348  76.84091  -84.35688  24.605782  0.394541   0.737872   \n4         2.5  3030.4348  76.84091  -84.35688  24.605782  0.394541   0.737872   \n   water_year  cumulative_SWE  cumulative_Flag  \\\n0        2021            2805            13650   \n1        2021            1020             4394   \n2        2020           22698            86989   \n3        2022           21724            81914   \n4        2020               0              723   \n   cumulative_air_temperature_tmmn  cumulative_potential_evapotranspiration  \\\n0                          15306.9                               157.800001   \n1                           5030.3                                44.100000   \n2                          95979.1                              1280.300014   \n3                          91061.1                               929.600009   \n4                            797.9                                 7.200000   \n   cumulative_mean_vapor_pressure_deficit  cumulative_relative_humidity_rmax  \\\n0                               19.560000                        2290.500021   \n1                                6.060000                         466.200007   \n2                              233.249996                       22579.700204   \n3                              253.289996                       23188.400244   \n4                                2.830000                          71.600001   \n   cumulative_relative_humidity_rmin  cumulative_precipitation_amount  \\\n0                        1284.800018                        31.100000   \n1                         373.400005                         4.900000   \n2                        8971.500088                       718.400014   \n3                        8809.900098                       770.500007   \n4                          99.300001                         0.000000   \n   cumulative_air_temperature_tmmx  cumulative_wind_speed  \n0                          15589.2             208.000003  \n1                           5001.6              72.700001  \n2                         102150.4             977.200008  \n3                          94640.4             811.300009  \n4                            880.5               6.800000  \nAll the cumulative variables are added successfully! /home/chetana/gridmet_test_run/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv\n",
  "history_begin_time" : 1699801103139,
  "history_end_time" : 1699801132668,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "bR9V9XehrN9j",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n# Define file paths for various CSV files\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\ntarget_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef convert_to_time_series():\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n                                'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n                                'relative_humidity_rmax', 'relative_humidity_rmin',\n                                'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(current_ready_csv_path)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(df, column_name, degree=3):\n        x = df.index\n        y = df[column_name]\n\n        # Create a mask for missing values\n        mask = y > 240\n        # Perform interpolation\n        new_y = np.interp(x, x[~mask], y[~mask])\n\n        if np.any(new_y > 240):\n            raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n        # Replace missing values with interpolated values\n        df[column_name] = new_y\n\n    # Group the data by 'lat' and 'lon' and apply interpolation for each column\n    grouped = df.groupby(['lat', 'lon'])\n    filled_data = pd.DataFrame()\n    for name, group in grouped:\n        print(f\"Start filling missing values for {name}\")\n        new_df = interpolate_missing_inplace(group, 'SWE')\n        filled_data = pd.concat([filled_data, group], axis=0)\n\n    filled_data = filled_data.reset_index()\n\n    if any(filled_data['SWE'] > 240):\n        raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n    # Create a new DataFrame to store the time series data for each location\n    result = pd.DataFrame()\n\n    # Define the number of days to consider (7 days in this case)\n    num_days = 7\n\n    grouped = filled_data.groupby(['lat', 'lon'])\n    for name, group in grouped:\n        group = group.set_index('date')\n        for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n                new_column_name = f'{target_col}_{day}'\n                group[new_column_name] = group[target_col].shift(day)\n        result = pd.concat([result, group], axis=0)\n\n    # Reset the index of the result DataFrame\n    result = result.reset_index()\n    result.to_csv(target_time_series_csv_path, index=False)\n    print(f\"New data is saved to {target_time_series_csv_path}\")\n    shutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\n    print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns():\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    columns_to_be_cumulated = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n                            'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n                            'relative_humidity_rmax', 'relative_humidity_rmin',\n                            'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    df = pd.read_csv(target_time_series_csv_path)\n    print(\"the column statistics from time series before cumulative: \", df[df['swe_value'] <= 200].describe())\n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2019-10-01')\n    end_date = pd.to_datetime('2022-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n\n    # Sort each group by date and calculate cumulative precipitation\n    for column in columns_to_be_cumulated:\n      df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df.head())\n    df.to_csv(target_time_series_cumulative_csv_path, index=False)\n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    \n\n    # TODO: Calculate and add cumulative values for specified columns\n\n# Uncomment this line to execute the 'convert_to_time_series' function\n# convert_to_time_series()\n\n# Uncomment this line to execute the 'add_cumulative_columns' function\nadd_cumulative_columns()\n",
  "history_output" : "today date = 2023-11-12\ntest start date:  2022-10-16\ntest end date:  2023-10-07\n/home/chetana\nthe column statistics from time series before cumulative:              level_0         index           lat           lon           SWE  \\\ncount  1.008700e+06  1.008700e+06  1.008700e+06  1.008700e+06  1.008700e+06   \nmean   5.113038e+05  5.113464e+05  4.165838e+01 -1.141534e+02  1.137163e+01   \nstd    2.952286e+05  2.952311e+05  3.632464e+00  5.423377e+00  1.386859e+01   \nmin    0.000000e+00  0.000000e+00  3.335825e+01 -1.234486e+02  0.000000e+00   \n25%    2.556348e+05  2.556628e+05  3.891814e+01 -1.197812e+02  0.000000e+00   \n50%    5.113095e+05  5.113415e+05  4.107190e+01 -1.137737e+02  0.000000e+00   \n75%    7.668942e+05  7.670042e+05  4.461398e+01 -1.100367e+02  2.200000e+01   \nmax    1.022642e+06  1.022699e+06  4.897107e+01 -1.051948e+02  1.096857e+02   \n               Flag     swe_value    Unnamed: 0  air_temperature_tmmn  \\\ncount  1.008700e+06  1.008700e+06  1.008700e+06          1.008700e+06   \nmean   2.434455e+02  3.333796e+00  5.164940e+05          2.721254e+02   \nstd    5.315359e+00  5.245389e+00  2.937986e+05          8.333993e+00   \nmin    2.410000e+02  0.000000e+00  0.000000e+00          2.380000e+02   \n25%    2.410000e+02  0.000000e+00  2.655018e+05          2.664000e+02   \n50%    2.410000e+02  0.000000e+00  5.183495e+05          2.723000e+02   \n75%    2.410000e+02  6.300000e+00  7.705242e+05          2.785000e+02   \nmax    2.550000e+02  2.260000e+01  1.022699e+06          2.983000e+02   \n       potential_evapotranspiration  mean_vapor_pressure_deficit  \\\ncount                  1.008700e+06                 1.008700e+06   \nmean                   3.937009e+00                 6.318230e-01   \nstd                    2.476735e+00                 5.238681e-01   \nmin                    0.000000e+00                 0.000000e+00   \n25%                    1.800000e+00                 2.100000e-01   \n50%                    3.500000e+00                 4.800000e-01   \n75%                    5.800000e+00                 9.400000e-01   \nmax                    1.510000e+01                 3.870000e+00   \n       relative_humidity_rmax  relative_humidity_rmin  precipitation_amount  \\\ncount            1.008700e+06            1.008700e+06          1.008700e+06   \nmean             7.107944e+01            3.555765e+01          2.606782e+00   \nstd              2.027642e+01            1.877470e+01          7.298533e+00   \nmin              8.200000e+00            1.000000e+00          0.000000e+00   \n25%              5.540000e+01            2.120000e+01          0.000000e+00   \n50%              7.220001e+01            3.150000e+01          0.000000e+00   \n75%              8.800000e+01            4.690000e+01          2.100000e+00   \nmax              1.000000e+02            1.000000e+02          5.042000e+02   \n       air_temperature_tmmx    wind_speed     elevation         slope  \\\ncount          1.008700e+06  1.008700e+06  1.008700e+06  1.008700e+06   \nmean           2.838897e+02  4.192890e+00  2.397170e+03  6.243769e+01   \nstd            9.873665e+00  2.023231e+00  6.647262e+02  1.650521e+01   \nmin            2.444000e+02  5.000000e-01  7.584437e+02  4.277402e+00   \n25%            2.760000e+02  2.700000e+00  1.948688e+03  5.213456e+01   \n50%            2.833000e+02  3.700000e+00  2.481006e+03  6.768107e+01   \n75%            2.921000e+02  5.200000e+00  2.895791e+03  7.504661e+01   \nmax            3.144000e+02  1.860000e+01  3.823385e+03  8.368555e+01   \n          curvature        aspect      eastness     northness         SWE_1  \\\ncount  1.008700e+06  1.008700e+06  1.008700e+06  1.008700e+06  1.008457e+06   \nmean  -3.909783e+03  1.722213e+02  6.965357e-02 -4.509867e-02  1.137088e+01   \nstd    4.385982e+03  1.031039e+02  5.171924e-01  6.412035e-01  1.386810e+01   \nmin   -1.917768e+04  4.159291e-01 -7.853438e-01 -7.853694e-01  0.000000e+00   \n25%   -6.479865e+03  9.217068e+01 -3.907275e-01 -7.356204e-01  0.000000e+00   \n50%   -3.710969e+03  1.691301e+02  1.334633e-01 -1.913248e-01  0.000000e+00   \n75%   -5.754078e+02  2.498582e+02  5.767317e-01  6.495535e-01  2.200000e+01   \nmax    9.069726e+03  3.586563e+02  7.853980e-01  7.853850e-01  1.096857e+02   \n             Flag_1  air_temperature_tmmn_1  potential_evapotranspiration_1  \\\ncount  1.008457e+06            1.008457e+06                    1.008457e+06   \nmean   2.434452e+02            2.721280e+02                    3.936809e+00   \nstd    5.315102e+00            8.332916e+00                    2.476501e+00   \nmin    2.410000e+02            2.380000e+02                    0.000000e+00   \n25%    2.410000e+02            2.664000e+02                    1.800000e+00   \n50%    2.410000e+02            2.723000e+02                    3.500000e+00   \n75%    2.410000e+02            2.785000e+02                    5.800000e+00   \nmax    2.550000e+02            2.983000e+02                    1.510000e+01   \n       mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\ncount                   1.008457e+06              1.008457e+06   \nmean                    6.319538e-01              7.107654e+01   \nstd                     5.238613e-01              2.027664e+01   \nmin                     0.000000e+00              8.200000e+00   \n25%                     2.100000e-01              5.540000e+01   \n50%                     4.800000e-01              7.220001e+01   \n75%                     9.400000e-01              8.800000e+01   \nmax                     3.870000e+00              1.000000e+02   \n       relative_humidity_rmin_1  precipitation_amount_1  \\\ncount              1.008457e+06            1.008457e+06   \nmean               3.555579e+01            2.605446e+00   \nstd                1.877334e+01            7.296288e+00   \nmin                1.000000e+00            0.000000e+00   \n25%                2.120000e+01            0.000000e+00   \n50%                3.150000e+01            0.000000e+00   \n75%                4.690000e+01            2.100000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_1  wind_speed_1         SWE_2        Flag_2  \\\ncount            1.008457e+06  1.008457e+06  1.008214e+06  1.008214e+06   \nmean             2.838917e+02  4.192444e+00  1.137009e+01  2.434450e+02   \nstd              9.873479e+00  2.022943e+00  1.386717e+01  5.314953e+00   \nmin              2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%              2.761000e+02  2.700000e+00  0.000000e+00  2.410000e+02   \n50%              2.833000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%              2.921000e+02  5.200000e+00  2.200000e+01  2.410000e+02   \nmax              3.144000e+02  1.860000e+01  1.096857e+02  2.550000e+02   \n       air_temperature_tmmn_2  potential_evapotranspiration_2  \\\ncount            1.008214e+06                    1.008214e+06   \nmean             2.721300e+02                    3.936655e+00   \nstd              8.332206e+00                    2.476331e+00   \nmin              2.380000e+02                    0.000000e+00   \n25%              2.665000e+02                    1.800000e+00   \n50%              2.723000e+02                    3.500000e+00   \n75%              2.785000e+02                    5.800000e+00   \nmax              2.983000e+02                    1.510000e+01   \n       mean_vapor_pressure_deficit_2  relative_humidity_rmax_2  \\\ncount                   1.008214e+06              1.008214e+06   \nmean                    6.320670e-01              7.107505e+01   \nstd                     5.238589e-01              2.027713e+01   \nmin                     0.000000e+00              8.200000e+00   \n25%                     2.100000e-01              5.540000e+01   \n50%                     4.800000e-01              7.210000e+01   \n75%                     9.400000e-01              8.800000e+01   \nmax                     3.870000e+00              1.000000e+02   \n       relative_humidity_rmin_2  precipitation_amount_2  \\\ncount              1.008214e+06            1.008214e+06   \nmean               3.555484e+01            2.604157e+00   \nstd                1.877180e+01            7.293352e+00   \nmin                1.000000e+00            0.000000e+00   \n25%                2.120000e+01            0.000000e+00   \n50%                3.150000e+01            0.000000e+00   \n75%                4.690000e+01            2.100000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_2  wind_speed_2         SWE_3        Flag_3  \\\ncount            1.008214e+06  1.008214e+06  1.007971e+06  1.007971e+06   \nmean             2.838936e+02  4.191988e+00  1.136954e+01  2.434448e+02   \nstd              9.873139e+00  2.022520e+00  1.386670e+01  5.314803e+00   \nmin              2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%              2.761000e+02  2.700000e+00  0.000000e+00  2.410000e+02   \n50%              2.833000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%              2.921000e+02  5.200000e+00  2.200000e+01  2.410000e+02   \nmax              3.144000e+02  1.860000e+01  1.096857e+02  2.550000e+02   \n       air_temperature_tmmn_3  potential_evapotranspiration_3  \\\ncount            1.007971e+06                    1.007971e+06   \nmean             2.721320e+02                    3.936477e+00   \nstd              8.331623e+00                    2.476227e+00   \nmin              2.380000e+02                    0.000000e+00   \n25%              2.665000e+02                    1.800000e+00   \n50%              2.723000e+02                    3.500000e+00   \n75%              2.785000e+02                    5.800000e+00   \nmax              2.983000e+02                    1.510000e+01   \n       mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\ncount                   1.007971e+06              1.007971e+06   \nmean                    6.321792e-01              7.107450e+01   \nstd                     5.238622e-01              2.027696e+01   \nmin                     0.000000e+00              8.200000e+00   \n25%                     2.100000e-01              5.540000e+01   \n50%                     4.800000e-01              7.210000e+01   \n75%                     9.400000e-01              8.800000e+01   \nmax                     3.870000e+00              1.000000e+02   \n       relative_humidity_rmin_3  precipitation_amount_3  \\\ncount              1.007971e+06            1.007971e+06   \nmean               3.555222e+01            2.602876e+00   \nstd                1.877049e+01            7.290509e+00   \nmin                1.000000e+00            0.000000e+00   \n25%                2.120000e+01            0.000000e+00   \n50%                3.150000e+01            0.000000e+00   \n75%                4.690000e+01            2.100000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_3  wind_speed_3         SWE_4        Flag_4  \\\ncount            1.007971e+06  1.007971e+06  1.007728e+06  1.007728e+06   \nmean             2.838956e+02  4.191490e+00  1.136903e+01  2.434445e+02   \nstd              9.872754e+00  2.022034e+00  1.386618e+01  5.314499e+00   \nmin              2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%              2.761000e+02  2.700000e+00  0.000000e+00  2.410000e+02   \n50%              2.833000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%              2.921000e+02  5.200000e+00  2.200000e+01  2.410000e+02   \nmax              3.144000e+02  1.860000e+01  1.096857e+02  2.550000e+02   \n       air_temperature_tmmn_4  potential_evapotranspiration_4  \\\ncount            1.007728e+06                    1.007728e+06   \nmean             2.721341e+02                    3.936337e+00   \nstd              8.331052e+00                    2.476146e+00   \nmin              2.380000e+02                    0.000000e+00   \n25%              2.665000e+02                    1.800000e+00   \n50%              2.723000e+02                    3.500000e+00   \n75%              2.785000e+02                    5.800000e+00   \nmax              2.983000e+02                    1.510000e+01   \n       mean_vapor_pressure_deficit_4  relative_humidity_rmax_4  \\\ncount                   1.007728e+06              1.007728e+06   \nmean                    6.322948e-01              7.107144e+01   \nstd                     5.238693e-01              2.027701e+01   \nmin                     0.000000e+00              8.200000e+00   \n25%                     2.100000e-01              5.540000e+01   \n50%                     4.800000e-01              7.210000e+01   \n75%                     9.400000e-01              8.800000e+01   \nmax                     3.870000e+00              1.000000e+02   \n       relative_humidity_rmin_4  precipitation_amount_4  \\\ncount              1.007728e+06            1.007728e+06   \nmean               3.554717e+01            2.600369e+00   \nstd                1.876756e+01            7.286053e+00   \nmin                1.000000e+00            0.000000e+00   \n25%                2.120000e+01            0.000000e+00   \n50%                3.150000e+01            0.000000e+00   \n75%                4.690000e+01            2.100000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_4  wind_speed_4         SWE_5        Flag_5  \\\ncount            1.007728e+06  1.007728e+06  1.007485e+06  1.007485e+06   \nmean             2.838979e+02  4.190814e+00  1.136854e+01  2.434443e+02   \nstd              9.872280e+00  2.021491e+00  1.386563e+01  5.314349e+00   \nmin              2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%              2.761000e+02  2.700000e+00  0.000000e+00  2.410000e+02   \n50%              2.833000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%              2.921000e+02  5.200000e+00  2.200000e+01  2.410000e+02   \nmax              3.144000e+02  1.860000e+01  1.096857e+02  2.550000e+02   \n       air_temperature_tmmn_5  potential_evapotranspiration_5  \\\ncount            1.007485e+06                    1.007485e+06   \nmean             2.721364e+02                    3.936230e+00   \nstd              8.330541e+00                    2.476117e+00   \nmin              2.380000e+02                    0.000000e+00   \n25%              2.665000e+02                    1.800000e+00   \n50%              2.723000e+02                    3.500000e+00   \n75%              2.785000e+02                    5.800000e+00   \nmax              2.983000e+02                    1.510000e+01   \n       mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\ncount                   1.007485e+06              1.007485e+06   \nmean                    6.324157e-01              7.106733e+01   \nstd                     5.238745e-01              2.027695e+01   \nmin                     0.000000e+00              8.200000e+00   \n25%                     2.100000e-01              5.540000e+01   \n50%                     4.800000e-01              7.210000e+01   \n75%                     9.400000e-01              8.800000e+01   \nmax                     3.870000e+00              1.000000e+02   \n       relative_humidity_rmin_5  precipitation_amount_5  \\\ncount              1.007485e+06            1.007485e+06   \nmean               3.554374e+01            2.599283e+00   \nstd                1.876656e+01            7.284156e+00   \nmin                1.000000e+00            0.000000e+00   \n25%                2.120000e+01            0.000000e+00   \n50%                3.140000e+01            0.000000e+00   \n75%                4.690000e+01            2.100000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_5  wind_speed_5         SWE_6        Flag_6  \\\ncount            1.007485e+06  1.007485e+06  1.007242e+06  1.007242e+06   \nmean             2.839003e+02  4.190275e+00  1.136897e+01  2.434443e+02   \nstd              9.872076e+00  2.021030e+00  1.386544e+01  5.314342e+00   \nmin              2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%              2.761000e+02  2.700000e+00  0.000000e+00  2.410000e+02   \n50%              2.833000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%              2.921000e+02  5.200000e+00  2.200000e+01  2.410000e+02   \nmax              3.144000e+02  1.860000e+01  1.096857e+02  2.550000e+02   \n       air_temperature_tmmn_6  potential_evapotranspiration_6  \\\ncount            1.007242e+06                    1.007242e+06   \nmean             2.721385e+02                    3.936095e+00   \nstd              8.330435e+00                    2.476085e+00   \nmin              2.380000e+02                    0.000000e+00   \n25%              2.665000e+02                    1.800000e+00   \n50%              2.723000e+02                    3.500000e+00   \n75%              2.785000e+02                    5.800000e+00   \nmax              2.983000e+02                    1.510000e+01   \n       mean_vapor_pressure_deficit_6  relative_humidity_rmax_6  \\\ncount                   1.007242e+06              1.007242e+06   \nmean                    6.325301e-01              7.106523e+01   \nstd                     5.238803e-01              2.027776e+01   \nmin                     0.000000e+00              8.200000e+00   \n25%                     2.100000e-01              5.540000e+01   \n50%                     4.800000e-01              7.210000e+01   \n75%                     9.400000e-01              8.800000e+01   \nmax                     3.870000e+00              1.000000e+02   \n       relative_humidity_rmin_6  precipitation_amount_6  \\\ncount              1.007242e+06            1.007242e+06   \nmean               3.554053e+01            2.598512e+00   \nstd                1.876535e+01            7.282172e+00   \nmin                1.000000e+00            0.000000e+00   \n25%                2.120000e+01            0.000000e+00   \n50%                3.140000e+01            0.000000e+00   \n75%                4.690000e+01            2.100000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_6  wind_speed_6         SWE_7        Flag_7  \\\ncount            1.007242e+06  1.007242e+06  1.006999e+06  1.006999e+06   \nmean             2.839025e+02  4.189967e+00  1.136899e+01  2.434446e+02   \nstd              9.872161e+00  2.020620e+00  1.386538e+01  5.314657e+00   \nmin              2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%              2.761000e+02  2.700000e+00  0.000000e+00  2.410000e+02   \n50%              2.833000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%              2.922000e+02  5.200000e+00  2.200000e+01  2.410000e+02   \nmax              3.125000e+02  1.860000e+01  1.096857e+02  2.550000e+02   \n       air_temperature_tmmn_7  potential_evapotranspiration_7  \\\ncount            1.006999e+06                    1.006999e+06   \nmean             2.721404e+02                    3.936076e+00   \nstd              8.330215e+00                    2.476097e+00   \nmin              2.380000e+02                    0.000000e+00   \n25%              2.665000e+02                    1.800000e+00   \n50%              2.723000e+02                    3.500000e+00   \n75%              2.785000e+02                    5.800000e+00   \nmax              2.983000e+02                    1.510000e+01   \n       mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\ncount                   1.006999e+06              1.006999e+06   \nmean                    6.326479e-01              7.106197e+01   \nstd                     5.238867e-01              2.027865e+01   \nmin                     0.000000e+00              8.200000e+00   \n25%                     2.100000e-01              5.540000e+01   \n50%                     4.800000e-01              7.210000e+01   \n75%                     9.400000e-01              8.790000e+01   \nmax                     3.870000e+00              1.000000e+02   \n       relative_humidity_rmin_7  precipitation_amount_7  \\\ncount              1.006999e+06            1.006999e+06   \nmean               3.553880e+01            2.597547e+00   \nstd                1.876437e+01            7.280596e+00   \nmin                1.000000e+00            0.000000e+00   \n25%                2.120000e+01            0.000000e+00   \n50%                3.140000e+01            0.000000e+00   \n75%                4.690000e+01            2.100000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_7  wind_speed_7  \ncount            1.006999e+06  1.006999e+06  \nmean             2.839046e+02  4.189478e+00  \nstd              9.872139e+00  2.020151e+00  \nmin              2.444000e+02  5.000000e-01  \n25%              2.761000e+02  2.700000e+00  \n50%              2.833000e+02  3.700000e+00  \n75%              2.922000e+02  5.100000e+00  \nmax              3.144000e+02  1.860000e+01  \nThis is our unique years [2019 2020 2021 2022]\nThis is the dataframe after cumulative columns are added\n          date  level_0   index        lat         lon  SWE  Flag  swe_value  \\\n819 2019-10-01      819  514134  33.358254 -107.826881  0.0   241        0.0   \n820 2019-10-01      820  514135  33.358254 -107.826881  0.0   241        0.0   \n821 2019-10-01      821  514136  33.358254 -107.826881  0.0   241        0.0   \n822 2019-10-02      822  511836  33.358254 -107.826881  0.0   241        0.0   \n823 2019-10-02      823  511837  33.358254 -107.826881  0.0   241        0.0   \n     Unnamed: 0  air_temperature_tmmn  potential_evapotranspiration  \\\n819      555438                 283.9                           2.6   \n820      557993                 283.9                           3.1   \n821      716768                 283.9                           0.6   \n822      555439                 280.7                           3.3   \n823      557994                 280.7                           3.9   \n     mean_vapor_pressure_deficit  relative_humidity_rmax  \\\n819                         0.20               83.500000   \n820                         0.26               83.500000   \n821                         0.33               83.500000   \n822                         0.16               84.200005   \n823                         0.16               84.200005   \n     relative_humidity_rmin  precipitation_amount  air_temperature_tmmx  \\\n819                    18.5                   0.0                 299.2   \n820                    12.3                   0.0                 295.3   \n821                    25.9                   7.2                 281.0   \n822                    22.1                   0.0                 297.8   \n823                     8.6                   0.0                 299.4   \n     wind_speed  elevation     slope  curvature   aspect  eastness  northness  \\\n819         2.2  2419.5283  51.38327 -2909.2551  276.389 -0.782283   0.110823   \n820         3.6  2419.5283  51.38327 -2909.2551  276.389 -0.782283   0.110823   \n821         2.3  2419.5283  51.38327 -2909.2551  276.389 -0.782283   0.110823   \n822         2.5  2419.5283  51.38327 -2909.2551  276.389 -0.782283   0.110823   \n823         2.6  2419.5283  51.38327 -2909.2551  276.389 -0.782283   0.110823   \n     SWE_1  Flag_1  air_temperature_tmmn_1  potential_evapotranspiration_1  \\\n819    0.0   255.0                   284.5                             1.2   \n820    0.0   241.0                   283.9                             2.6   \n821    0.0   241.0                   283.9                             3.1   \n822    0.0   241.0                   283.9                             0.6   \n823    0.0   241.0                   280.7                             3.3   \n     mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\n819                           0.26                100.000000   \n820                           0.20                 83.500000   \n821                           0.26                 83.500000   \n822                           0.33                 83.500000   \n823                           0.16                 84.200005   \n     relative_humidity_rmin_1  precipitation_amount_1  air_temperature_tmmx_1  \\\n819                      34.4                     2.3                   276.5   \n820                      18.5                     0.0                   299.2   \n821                      12.3                     0.0                   295.3   \n822                      25.9                     7.2                   281.0   \n823                      22.1                     0.0                   297.8   \n     wind_speed_1  SWE_2  Flag_2  air_temperature_tmmn_2  \\\n819           1.9    0.0   255.0                   284.5   \n820           2.2    0.0   255.0                   284.5   \n821           3.6    0.0   241.0                   283.9   \n822           2.3    0.0   241.0                   283.9   \n823           2.5    0.0   241.0                   283.9   \n     potential_evapotranspiration_2  mean_vapor_pressure_deficit_2  \\\n819                             2.6                           0.08   \n820                             1.2                           0.26   \n821                             2.6                           0.20   \n822                             3.1                           0.26   \n823                             0.6                           0.33   \n     relative_humidity_rmax_2  relative_humidity_rmin_2  \\\n819                     100.0                      11.8   \n820                     100.0                      34.4   \n821                      83.5                      18.5   \n822                      83.5                      12.3   \n823                      83.5                      25.9   \n     precipitation_amount_2  air_temperature_tmmx_2  wind_speed_2  SWE_3  \\\n819                     0.0                   296.6           4.2    0.0   \n820                     2.3                   276.5           1.9    0.0   \n821                     0.0                   299.2           2.2    0.0   \n822                     0.0                   295.3           3.6    0.0   \n823                     7.2                   281.0           2.3    0.0   \n     Flag_3  air_temperature_tmmn_3  potential_evapotranspiration_3  \\\n819   255.0                   284.5                             1.8   \n820   255.0                   284.5                             2.6   \n821   255.0                   284.5                             1.2   \n822   241.0                   283.9                             2.6   \n823   241.0                   283.9                             3.1   \n     mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\n819                           0.04                     100.0   \n820                           0.08                     100.0   \n821                           0.26                     100.0   \n822                           0.20                      83.5   \n823                           0.26                      83.5   \n     relative_humidity_rmin_3  precipitation_amount_3  air_temperature_tmmx_3  \\\n819                      20.2                     0.0                   297.5   \n820                      11.8                     0.0                   296.6   \n821                      34.4                     2.3                   276.5   \n822                      18.5                     0.0                   299.2   \n823                      12.3                     0.0                   295.3   \n     wind_speed_3  SWE_4  Flag_4  air_temperature_tmmn_4  \\\n819           3.7    0.0   241.0                   282.6   \n820           4.2    0.0   255.0                   284.5   \n821           1.9    0.0   255.0                   284.5   \n822           2.2    0.0   255.0                   284.5   \n823           3.6    0.0   241.0                   283.9   \n     potential_evapotranspiration_4  mean_vapor_pressure_deficit_4  \\\n819                             1.5                           0.21   \n820                             1.8                           0.04   \n821                             2.6                           0.08   \n822                             1.2                           0.26   \n823                             2.6                           0.20   \n     relative_humidity_rmax_4  relative_humidity_rmin_4  \\\n819                      89.5                      57.5   \n820                     100.0                      20.2   \n821                     100.0                      11.8   \n822                     100.0                      34.4   \n823                      83.5                      18.5   \n     precipitation_amount_4  air_temperature_tmmx_4  wind_speed_4  SWE_5  \\\n819                     3.1                   271.4           2.2    0.0   \n820                     0.0                   297.5           3.7    0.0   \n821                     0.0                   296.6           4.2    0.0   \n822                     2.3                   276.5           1.9    0.0   \n823                     0.0                   299.2           2.2    0.0   \n     Flag_5  air_temperature_tmmn_5  potential_evapotranspiration_5  \\\n819   241.0                   282.6                             2.6   \n820   241.0                   282.6                             1.5   \n821   255.0                   284.5                             1.8   \n822   255.0                   284.5                             2.6   \n823   255.0                   284.5                             1.2   \n     mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\n819                           0.02                      89.5   \n820                           0.21                      89.5   \n821                           0.04                     100.0   \n822                           0.08                     100.0   \n823                           0.26                     100.0   \n     relative_humidity_rmin_5  precipitation_amount_5  air_temperature_tmmx_5  \\\n819                       9.3                     0.0                   296.8   \n820                      57.5                     3.1                   271.4   \n821                      20.2                     0.0                   297.5   \n822                      11.8                     0.0                   296.6   \n823                      34.4                     2.3                   276.5   \n     wind_speed_5  SWE_6  Flag_6  air_temperature_tmmn_6  \\\n819           4.7    0.0   241.0                   282.6   \n820           2.2    0.0   241.0                   282.6   \n821           3.7    0.0   241.0                   282.6   \n822           4.2    0.0   255.0                   284.5   \n823           1.9    0.0   255.0                   284.5   \n     potential_evapotranspiration_6  mean_vapor_pressure_deficit_6  \\\n819                             2.0                           0.03   \n820                             2.6                           0.02   \n821                             1.5                           0.21   \n822                             1.8                           0.04   \n823                             2.6                           0.08   \n     relative_humidity_rmax_6  relative_humidity_rmin_6  \\\n819                      89.5                      19.1   \n820                      89.5                       9.3   \n821                      89.5                      57.5   \n822                     100.0                      20.2   \n823                     100.0                      11.8   \n     precipitation_amount_6  air_temperature_tmmx_6  wind_speed_6  SWE_7  \\\n819                     0.0                   299.6           4.6    0.0   \n820                     0.0                   296.8           4.7    0.0   \n821                     3.1                   271.4           2.2    0.0   \n822                     0.0                   297.5           3.7    0.0   \n823                     0.0                   296.6           4.2    0.0   \n     Flag_7  air_temperature_tmmn_7  potential_evapotranspiration_7  \\\n819   255.0                   281.3                             2.2   \n820   241.0                   282.6                             2.0   \n821   241.0                   282.6                             2.6   \n822   241.0                   282.6                             1.5   \n823   255.0                   284.5                             1.8   \n     mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\n819                           0.14                 97.700005   \n820                           0.03                 89.500000   \n821                           0.02                 89.500000   \n822                           0.21                 89.500000   \n823                           0.04                100.000000   \n     relative_humidity_rmin_7  precipitation_amount_7  air_temperature_tmmx_7  \\\n819                      52.3                     0.9                   272.3   \n820                      19.1                     0.0                   299.6   \n821                       9.3                     0.0                   296.8   \n822                      57.5                     3.1                   271.4   \n823                      20.2                     0.0                   297.5   \n     wind_speed_7  water_year  cumulative_SWE  cumulative_Flag  \\\n819           4.0        2020             0.0              241   \n820           4.6        2020             0.0              482   \n821           4.7        2020             0.0              723   \n822           2.2        2020             0.0              964   \n823           3.7        2020             0.0             1205   \n     cumulative_air_temperature_tmmn  cumulative_potential_evapotranspiration  \\\n819                            283.9                                      2.6   \n820                            567.8                                      5.7   \n821                            851.7                                      6.3   \n822                           1132.4                                      9.6   \n823                           1413.1                                     13.5   \n     cumulative_mean_vapor_pressure_deficit  \\\n819                                    0.20   \n820                                    0.46   \n821                                    0.79   \n822                                    0.95   \n823                                    1.11   \n     cumulative_relative_humidity_rmax  cumulative_relative_humidity_rmin  \\\n819                          83.500000                               18.5   \n820                         167.000000                               30.8   \n821                         250.500000                               56.7   \n822                         334.700005                               78.8   \n823                         418.900010                               87.4   \n     cumulative_precipitation_amount  cumulative_air_temperature_tmmx  \\\n819                              0.0                            299.2   \n820                              0.0                            594.5   \n821                              7.2                            875.5   \n822                              7.2                           1173.3   \n823                              7.2                           1472.7   \n     cumulative_wind_speed  \n819                    2.2  \n820                    5.8  \n821                    8.1  \n822                   10.6  \n823                   13.2  \nAll the cumulative variables are added successfully! /home/chetana/gridmet_test_run/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv\n",
  "history_begin_time" : 1699800956552,
  "history_end_time" : 1699801040748,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "I2WOlCsQsO8b",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n# Define file paths for various CSV files\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\ntarget_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef convert_to_time_series():\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n                                'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n                                'relative_humidity_rmax', 'relative_humidity_rmin',\n                                'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(current_ready_csv_path)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(df, column_name, degree=3):\n        x = df.index\n        y = df[column_name]\n\n        # Create a mask for missing values\n        mask = y > 240\n        # Perform interpolation\n        new_y = np.interp(x, x[~mask], y[~mask])\n\n        if np.any(new_y > 240):\n            raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n        # Replace missing values with interpolated values\n        df[column_name] = new_y\n\n    # Group the data by 'lat' and 'lon' and apply interpolation for each column\n    grouped = df.groupby(['lat', 'lon'])\n    filled_data = pd.DataFrame()\n    for name, group in grouped:\n        print(f\"Start filling missing values for {name}\")\n        new_df = interpolate_missing_inplace(group, 'SWE')\n        filled_data = pd.concat([filled_data, group], axis=0)\n\n    filled_data = filled_data.reset_index()\n\n    if any(filled_data['SWE'] > 240):\n        raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n    # Create a new DataFrame to store the time series data for each location\n    result = pd.DataFrame()\n\n    # Define the number of days to consider (7 days in this case)\n    num_days = 7\n\n    grouped = filled_data.groupby(['lat', 'lon'])\n    for name, group in grouped:\n        group = group.set_index('date')\n        for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n                new_column_name = f'{target_col}_{day}'\n                group[new_column_name] = group[target_col].shift(day)\n        result = pd.concat([result, group], axis=0)\n\n    # Reset the index of the result DataFrame\n    result = result.reset_index()\n    result.to_csv(target_time_series_csv_path, index=False)\n    print(f\"New data is saved to {target_time_series_csv_path}\")\n    shutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\n    print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns():\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    columns_to_be_cumulated = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n                            'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n                            'relative_humidity_rmax', 'relative_humidity_rmin',\n                            'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    df = pd.read_csv(target_time_series_csv_path)\n    print(\"the column statistics from time series before cumulative: \", df.describe())\n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2019-10-01')\n    end_date = pd.to_datetime('2022-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n\n    # Sort each group by date and calculate cumulative precipitation\n    for column in columns_to_be_cumulated:\n      df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df.head())\n    df.to_csv(target_time_series_cumulative_csv_path, index=False)\n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    \n\n    # TODO: Calculate and add cumulative values for specified columns\n\n# Uncomment this line to execute the 'convert_to_time_series' function\n# convert_to_time_series()\n\n# Uncomment this line to execute the 'add_cumulative_columns' function\nadd_cumulative_columns()\n",
  "history_output" : "today date = 2023-11-12\ntest start date:  2022-10-16\ntest end date:  2023-10-07\n/home/chetana\nthe column statistics from time series before cumulative:              level_0         index           lat           lon           SWE  \\\ncount  1.022700e+06  1.022700e+06  1.022700e+06  1.022700e+06  1.022700e+06   \nmean   5.113495e+05  5.113495e+05  4.165838e+01 -1.141534e+02  1.136036e+01   \nstd    2.952282e+05  2.952282e+05  3.632464e+00  5.423376e+00  1.386943e+01   \nmin    0.000000e+00  0.000000e+00  3.335825e+01 -1.234486e+02  0.000000e+00   \n25%    2.556748e+05  2.556748e+05  3.891814e+01 -1.197812e+02  0.000000e+00   \n50%    5.113495e+05  5.113495e+05  4.107190e+01 -1.137737e+02  0.000000e+00   \n75%    7.670242e+05  7.670242e+05  4.461398e+01 -1.100367e+02  2.200000e+01   \nmax    1.022699e+06  1.022699e+06  4.897107e+01 -1.051948e+02  1.096857e+02   \n               Flag     swe_value    Unnamed: 0  air_temperature_tmmn  \\\ncount  1.022700e+06  1.008700e+06  1.022700e+06          1.022700e+06   \nmean   2.434436e+02  3.333796e+00  5.113495e+05          2.720187e+02   \nstd    5.313797e+00  5.245389e+00  2.952282e+05          8.384982e+00   \nmin    2.410000e+02  0.000000e+00  0.000000e+00          2.328000e+02   \n25%    2.410000e+02  0.000000e+00  2.556748e+05          2.663000e+02   \n50%    2.410000e+02  0.000000e+00  5.113495e+05          2.722000e+02   \n75%    2.410000e+02  6.300000e+00  7.670242e+05          2.784000e+02   \nmax    2.550000e+02  2.260000e+01  1.022699e+06          2.983000e+02   \n       potential_evapotranspiration  mean_vapor_pressure_deficit  \\\ncount                  1.022700e+06                 1.022700e+06   \nmean                   3.943372e+00                 6.258550e-01   \nstd                    2.478664e+00                 5.233133e-01   \nmin                    0.000000e+00                 0.000000e+00   \n25%                    1.900000e+00                 2.100000e-01   \n50%                    3.500000e+00                 4.700000e-01   \n75%                    5.800000e+00                 9.300000e-01   \nmax                    1.510000e+01                 3.870000e+00   \n       relative_humidity_rmax  relative_humidity_rmin  precipitation_amount  \\\ncount            1.022700e+06            1.022700e+06          1.022700e+06   \nmean             7.123571e+01            3.578010e+01          2.689152e+00   \nstd              2.030150e+01            1.888091e+01          7.456402e+00   \nmin              8.200000e+00            1.000000e+00          0.000000e+00   \n25%              5.560000e+01            2.130000e+01          0.000000e+00   \n50%              7.240000e+01            3.160000e+01          0.000000e+00   \n75%              8.820001e+01            4.740000e+01          2.200000e+00   \nmax              1.000000e+02            1.000000e+02          5.042000e+02   \n       air_temperature_tmmx    wind_speed     elevation         slope  \\\ncount          1.022700e+06  1.022700e+06  1.022700e+06  1.022700e+06   \nmean           2.837481e+02  4.214964e+00  2.397170e+03  6.243769e+01   \nstd            9.912702e+00  2.043559e+00  6.647262e+02  1.650521e+01   \nmin            2.444000e+02  5.000000e-01  7.584437e+02  4.277402e+00   \n25%            2.759000e+02  2.800000e+00  1.948688e+03  5.213456e+01   \n50%            2.831000e+02  3.700000e+00  2.481006e+03  6.768107e+01   \n75%            2.920000e+02  5.200000e+00  2.895791e+03  7.504661e+01   \nmax            3.144000e+02  1.860000e+01  3.823385e+03  8.368555e+01   \n          curvature        aspect      eastness     northness         SWE_1  \\\ncount  1.022700e+06  1.022700e+06  1.022700e+06  1.022700e+06  1.022457e+06   \nmean  -3.909783e+03  1.722213e+02  6.965357e-02 -4.509867e-02  1.135946e+01   \nstd    4.385982e+03  1.031039e+02  5.171924e-01  6.412035e-01  1.386858e+01   \nmin   -1.917768e+04  4.159291e-01 -7.853438e-01 -7.853694e-01  0.000000e+00   \n25%   -6.479865e+03  9.217068e+01 -3.907275e-01 -7.356204e-01  0.000000e+00   \n50%   -3.710969e+03  1.691301e+02  1.334633e-01 -1.913248e-01  0.000000e+00   \n75%   -5.754078e+02  2.498582e+02  5.767317e-01  6.495535e-01  2.200000e+01   \nmax    9.069726e+03  3.586563e+02  7.853980e-01  7.853850e-01  1.096857e+02   \n             Flag_1  air_temperature_tmmn_1  potential_evapotranspiration_1  \\\ncount  1.022457e+06            1.022457e+06                    1.022457e+06   \nmean   2.434439e+02            2.720198e+02                    3.943422e+00   \nstd    5.314013e+00            8.385519e+00                    2.478670e+00   \nmin    2.410000e+02            2.328000e+02                    0.000000e+00   \n25%    2.410000e+02            2.663000e+02                    1.900000e+00   \n50%    2.410000e+02            2.722000e+02                    3.500000e+00   \n75%    2.410000e+02            2.784000e+02                    5.800000e+00   \nmax    2.550000e+02            2.983000e+02                    1.510000e+01   \n       mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\ncount                   1.022457e+06              1.022457e+06   \nmean                    6.259842e-01              7.123178e+01   \nstd                     5.233073e-01              2.030135e+01   \nmin                     0.000000e+00              8.200000e+00   \n25%                     2.100000e-01              5.560000e+01   \n50%                     4.700000e-01              7.240000e+01   \n75%                     9.300000e-01              8.820001e+01   \nmax                     3.870000e+00              1.000000e+02   \n       relative_humidity_rmin_1  precipitation_amount_1  \\\ncount              1.022457e+06            1.022457e+06   \nmean               3.577455e+01            2.688369e+00   \nstd                1.887860e+01            7.455937e+00   \nmin                1.000000e+00            0.000000e+00   \n25%                2.130000e+01            0.000000e+00   \n50%                3.160000e+01            0.000000e+00   \n75%                4.740000e+01            2.200000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_1  wind_speed_1         SWE_2        Flag_2  \\\ncount            1.022457e+06  1.022457e+06  1.022214e+06  1.022214e+06   \nmean             2.837507e+02  4.214984e+00  1.135967e+01  2.434441e+02   \nstd              9.912255e+00  2.043594e+00  1.386838e+01  5.314206e+00   \nmin              2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%              2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%              2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%              2.920000e+02  5.200000e+00  2.200000e+01  2.410000e+02   \nmax              3.144000e+02  1.860000e+01  1.096857e+02  2.550000e+02   \n       air_temperature_tmmn_2  potential_evapotranspiration_2  \\\ncount            1.022214e+06                    1.022214e+06   \nmean             2.720209e+02                    3.943420e+00   \nstd              8.385815e+00                    2.478640e+00   \nmin              2.328000e+02                    0.000000e+00   \n25%              2.663000e+02                    1.900000e+00   \n50%              2.722000e+02                    3.500000e+00   \n75%              2.784000e+02                    5.800000e+00   \nmax              2.983000e+02                    1.510000e+01   \n       mean_vapor_pressure_deficit_2  relative_humidity_rmax_2  \\\ncount                   1.022214e+06              1.022214e+06   \nmean                    6.261075e-01              7.122720e+01   \nstd                     5.233070e-01              2.030094e+01   \nmin                     0.000000e+00              8.200000e+00   \n25%                     2.100000e-01              5.560000e+01   \n50%                     4.700000e-01              7.240000e+01   \n75%                     9.300000e-01              8.820001e+01   \nmax                     3.870000e+00              1.000000e+02   \n       relative_humidity_rmin_2  precipitation_amount_2  \\\ncount              1.022214e+06            1.022214e+06   \nmean               3.576907e+01            2.687716e+00   \nstd                1.887661e+01            7.456001e+00   \nmin                1.000000e+00            0.000000e+00   \n25%                2.130000e+01            0.000000e+00   \n50%                3.160000e+01            0.000000e+00   \n75%                4.740000e+01            2.200000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_2  wind_speed_2         SWE_3        Flag_3  \\\ncount            1.022214e+06  1.022214e+06  1.021971e+06  1.021971e+06   \nmean             2.837536e+02  4.214784e+00  1.135990e+01  2.434443e+02   \nstd              9.911446e+00  2.043331e+00  1.386832e+01  5.314398e+00   \nmin              2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%              2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%              2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%              2.920000e+02  5.200000e+00  2.200000e+01  2.410000e+02   \nmax              3.144000e+02  1.860000e+01  1.096857e+02  2.550000e+02   \n       air_temperature_tmmn_3  potential_evapotranspiration_3  \\\ncount            1.021971e+06                    1.021971e+06   \nmean             2.720225e+02                    3.943376e+00   \nstd              8.385741e+00                    2.478685e+00   \nmin              2.328000e+02                    0.000000e+00   \n25%              2.663000e+02                    1.900000e+00   \n50%              2.722000e+02                    3.500000e+00   \n75%              2.784000e+02                    5.800000e+00   \nmax              2.983000e+02                    1.510000e+01   \n       mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\ncount                   1.021971e+06              1.021971e+06   \nmean                    6.262307e-01              7.122289e+01   \nstd                     5.233067e-01              2.030066e+01   \nmin                     0.000000e+00              8.200000e+00   \n25%                     2.100000e-01              5.550000e+01   \n50%                     4.700000e-01              7.230000e+01   \n75%                     9.300000e-01              8.820001e+01   \nmax                     3.870000e+00              1.000000e+02   \n       relative_humidity_rmin_3  precipitation_amount_3  \\\ncount              1.021971e+06            1.021971e+06   \nmean               3.576342e+01            2.686752e+00   \nstd                1.887456e+01            7.455918e+00   \nmin                1.000000e+00            0.000000e+00   \n25%                2.130000e+01            0.000000e+00   \n50%                3.160000e+01            0.000000e+00   \n75%                4.730000e+01            2.200000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_3  wind_speed_3         SWE_4        Flag_4  \\\ncount            1.021971e+06  1.021971e+06  1.021728e+06  1.021728e+06   \nmean             2.837567e+02  4.214625e+00  1.135977e+01  2.434443e+02   \nstd              9.910225e+00  2.043209e+00  1.386802e+01  5.314356e+00   \nmin              2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%              2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%              2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%              2.920000e+02  5.200000e+00  2.200000e+01  2.410000e+02   \nmax              3.144000e+02  1.860000e+01  1.096857e+02  2.550000e+02   \n       air_temperature_tmmn_4  potential_evapotranspiration_4  \\\ncount            1.021728e+06                    1.021728e+06   \nmean             2.720240e+02                    3.943264e+00   \nstd              8.385866e+00                    2.478656e+00   \nmin              2.328000e+02                    0.000000e+00   \n25%              2.663000e+02                    1.900000e+00   \n50%              2.722000e+02                    3.500000e+00   \n75%              2.784000e+02                    5.800000e+00   \nmax              2.983000e+02                    1.510000e+01   \n       mean_vapor_pressure_deficit_4  relative_humidity_rmax_4  \\\ncount                   1.021728e+06              1.021728e+06   \nmean                    6.263553e-01              7.121851e+01   \nstd                     5.233051e-01              2.030000e+01   \nmin                     0.000000e+00              8.200000e+00   \n25%                     2.100000e-01              5.550000e+01   \n50%                     4.700000e-01              7.230000e+01   \n75%                     9.300000e-01              8.820001e+01   \nmax                     3.870000e+00              1.000000e+02   \n       relative_humidity_rmin_4  precipitation_amount_4  \\\ncount              1.021728e+06            1.021728e+06   \nmean               3.575787e+01            2.686033e+00   \nstd                1.887263e+01            7.455973e+00   \nmin                1.000000e+00            0.000000e+00   \n25%                2.130000e+01            0.000000e+00   \n50%                3.160000e+01            0.000000e+00   \n75%                4.730000e+01            2.200000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_4  wind_speed_4         SWE_5        Flag_5  \\\ncount            1.021728e+06  1.021728e+06  1.021485e+06  1.021485e+06   \nmean             2.837597e+02  4.214386e+00  1.136011e+01  2.434443e+02   \nstd              9.909216e+00  2.042915e+00  1.386792e+01  5.314338e+00   \nmin              2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%              2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%              2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%              2.920000e+02  5.200000e+00  2.200000e+01  2.410000e+02   \nmax              3.144000e+02  1.860000e+01  1.096857e+02  2.550000e+02   \n       air_temperature_tmmn_5  potential_evapotranspiration_5  \\\ncount            1.021485e+06                    1.021485e+06   \nmean             2.720251e+02                    3.943198e+00   \nstd              8.386260e+00                    2.478648e+00   \nmin              2.328000e+02                    0.000000e+00   \n25%              2.663000e+02                    1.900000e+00   \n50%              2.722000e+02                    3.500000e+00   \n75%              2.784000e+02                    5.800000e+00   \nmax              2.983000e+02                    1.510000e+01   \n       mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\ncount                   1.021485e+06              1.021485e+06   \nmean                    6.264743e-01              7.121428e+01   \nstd                     5.233079e-01              2.029947e+01   \nmin                     0.000000e+00              8.200000e+00   \n25%                     2.100000e-01              5.550000e+01   \n50%                     4.700000e-01              7.230000e+01   \n75%                     9.300000e-01              8.820001e+01   \nmax                     3.870000e+00              1.000000e+02   \n       relative_humidity_rmin_5  precipitation_amount_5  \\\ncount              1.021485e+06            1.021485e+06   \nmean               3.575236e+01            2.684510e+00   \nstd                1.887073e+01            7.454676e+00   \nmin                1.000000e+00            0.000000e+00   \n25%                2.130000e+01            0.000000e+00   \n50%                3.160000e+01            0.000000e+00   \n75%                4.730000e+01            2.200000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_5  wind_speed_5         SWE_6        Flag_6  \\\ncount            1.021485e+06  1.021485e+06  1.021242e+06  1.021242e+06   \nmean             2.837628e+02  4.213888e+00  1.136056e+01  2.434440e+02   \nstd              9.908198e+00  2.042324e+00  1.386792e+01  5.314084e+00   \nmin              2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%              2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%              2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%              2.920000e+02  5.200000e+00  2.200000e+01  2.410000e+02   \nmax              3.144000e+02  1.860000e+01  1.096857e+02  2.550000e+02   \n       air_temperature_tmmn_6  potential_evapotranspiration_6  \\\ncount            1.021242e+06                    1.021242e+06   \nmean             2.720261e+02                    3.943110e+00   \nstd              8.386646e+00                    2.478642e+00   \nmin              2.328000e+02                    0.000000e+00   \n25%              2.663000e+02                    1.900000e+00   \n50%              2.722000e+02                    3.500000e+00   \n75%              2.784000e+02                    5.800000e+00   \nmax              2.983000e+02                    1.510000e+01   \n       mean_vapor_pressure_deficit_6  relative_humidity_rmax_6  \\\ncount                   1.021242e+06              1.021242e+06   \nmean                    6.265698e-01              7.120906e+01   \nstd                     5.233230e-01              2.029860e+01   \nmin                     0.000000e+00              8.200000e+00   \n25%                     2.100000e-01              5.550000e+01   \n50%                     4.700000e-01              7.230000e+01   \n75%                     9.300000e-01              8.820001e+01   \nmax                     3.870000e+00              1.000000e+02   \n       relative_humidity_rmin_6  precipitation_amount_6  \\\ncount              1.021242e+06            1.021242e+06   \nmean               3.574670e+01            2.683368e+00   \nstd                1.886860e+01            7.454296e+00   \nmin                1.000000e+00            0.000000e+00   \n25%                2.130000e+01            0.000000e+00   \n50%                3.160000e+01            0.000000e+00   \n75%                4.730000e+01            2.200000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_6  wind_speed_6         SWE_7        Flag_7  \\\ncount            1.021242e+06  1.021242e+06  1.020999e+06  1.020999e+06   \nmean             2.837659e+02  4.213170e+00  1.136047e+01  2.434436e+02   \nstd              9.907047e+00  2.041234e+00  1.386762e+01  5.313772e+00   \nmin              2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%              2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%              2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%              2.920000e+02  5.200000e+00  2.200000e+01  2.410000e+02   \nmax              3.144000e+02  1.860000e+01  1.096857e+02  2.550000e+02   \n       air_temperature_tmmn_7  potential_evapotranspiration_7  \\\ncount            1.020999e+06                    1.020999e+06   \nmean             2.720272e+02                    3.943113e+00   \nstd              8.386879e+00                    2.478654e+00   \nmin              2.328000e+02                    0.000000e+00   \n25%              2.663000e+02                    1.900000e+00   \n50%              2.722000e+02                    3.500000e+00   \n75%              2.784000e+02                    5.800000e+00   \nmax              2.983000e+02                    1.510000e+01   \n       mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\ncount                   1.020999e+06              1.020999e+06   \nmean                    6.266652e-01              7.120386e+01   \nstd                     5.233356e-01              2.029766e+01   \nmin                     0.000000e+00              8.200000e+00   \n25%                     2.100000e-01              5.550000e+01   \n50%                     4.700000e-01              7.230000e+01   \n75%                     9.300000e-01              8.820001e+01   \nmax                     3.870000e+00              1.000000e+02   \n       relative_humidity_rmin_7  precipitation_amount_7  \\\ncount              1.020999e+06            1.020999e+06   \nmean               3.574126e+01            2.681174e+00   \nstd                1.886665e+01            7.449998e+00   \nmin                1.000000e+00            0.000000e+00   \n25%                2.120000e+01            0.000000e+00   \n50%                3.160000e+01            0.000000e+00   \n75%                4.730000e+01            2.200000e+00   \nmax                1.000000e+02            5.042000e+02   \n       air_temperature_tmmx_7  wind_speed_7  \ncount            1.020999e+06  1.020999e+06  \nmean             2.837691e+02  4.212599e+00  \nstd              9.905842e+00  2.040713e+00  \nmin              2.444000e+02  5.000000e-01  \n25%              2.759000e+02  2.800000e+00  \n50%              2.831000e+02  3.700000e+00  \n75%              2.920000e+02  5.200000e+00  \nmax              3.144000e+02  1.860000e+01  \nThis is our unique years [2019 2020 2021 2022]\nThis is the dataframe after cumulative columns are added\n          date  level_0   index        lat         lon  SWE  Flag  swe_value  \\\n819 2019-10-01      819  514134  33.358254 -107.826881  0.0   241        0.0   \n820 2019-10-01      820  514135  33.358254 -107.826881  0.0   241        0.0   \n821 2019-10-01      821  514136  33.358254 -107.826881  0.0   241        0.0   \n822 2019-10-02      822  511836  33.358254 -107.826881  0.0   241        0.0   \n823 2019-10-02      823  511837  33.358254 -107.826881  0.0   241        0.0   \n     Unnamed: 0  air_temperature_tmmn  potential_evapotranspiration  \\\n819      555438                 283.9                           2.6   \n820      557993                 283.9                           3.1   \n821      716768                 283.9                           0.6   \n822      555439                 280.7                           3.3   \n823      557994                 280.7                           3.9   \n     mean_vapor_pressure_deficit  relative_humidity_rmax  \\\n819                         0.20               83.500000   \n820                         0.26               83.500000   \n821                         0.33               83.500000   \n822                         0.16               84.200005   \n823                         0.16               84.200005   \n     relative_humidity_rmin  precipitation_amount  air_temperature_tmmx  \\\n819                    18.5                   0.0                 299.2   \n820                    12.3                   0.0                 295.3   \n821                    25.9                   7.2                 281.0   \n822                    22.1                   0.0                 297.8   \n823                     8.6                   0.0                 299.4   \n     wind_speed  elevation     slope  curvature   aspect  eastness  northness  \\\n819         2.2  2419.5283  51.38327 -2909.2551  276.389 -0.782283   0.110823   \n820         3.6  2419.5283  51.38327 -2909.2551  276.389 -0.782283   0.110823   \n821         2.3  2419.5283  51.38327 -2909.2551  276.389 -0.782283   0.110823   \n822         2.5  2419.5283  51.38327 -2909.2551  276.389 -0.782283   0.110823   \n823         2.6  2419.5283  51.38327 -2909.2551  276.389 -0.782283   0.110823   \n     SWE_1  Flag_1  air_temperature_tmmn_1  potential_evapotranspiration_1  \\\n819    0.0   255.0                   284.5                             1.2   \n820    0.0   241.0                   283.9                             2.6   \n821    0.0   241.0                   283.9                             3.1   \n822    0.0   241.0                   283.9                             0.6   \n823    0.0   241.0                   280.7                             3.3   \n     mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\n819                           0.26                100.000000   \n820                           0.20                 83.500000   \n821                           0.26                 83.500000   \n822                           0.33                 83.500000   \n823                           0.16                 84.200005   \n     relative_humidity_rmin_1  precipitation_amount_1  air_temperature_tmmx_1  \\\n819                      34.4                     2.3                   276.5   \n820                      18.5                     0.0                   299.2   \n821                      12.3                     0.0                   295.3   \n822                      25.9                     7.2                   281.0   \n823                      22.1                     0.0                   297.8   \n     wind_speed_1  SWE_2  Flag_2  air_temperature_tmmn_2  \\\n819           1.9    0.0   255.0                   284.5   \n820           2.2    0.0   255.0                   284.5   \n821           3.6    0.0   241.0                   283.9   \n822           2.3    0.0   241.0                   283.9   \n823           2.5    0.0   241.0                   283.9   \n     potential_evapotranspiration_2  mean_vapor_pressure_deficit_2  \\\n819                             2.6                           0.08   \n820                             1.2                           0.26   \n821                             2.6                           0.20   \n822                             3.1                           0.26   \n823                             0.6                           0.33   \n     relative_humidity_rmax_2  relative_humidity_rmin_2  \\\n819                     100.0                      11.8   \n820                     100.0                      34.4   \n821                      83.5                      18.5   \n822                      83.5                      12.3   \n823                      83.5                      25.9   \n     precipitation_amount_2  air_temperature_tmmx_2  wind_speed_2  SWE_3  \\\n819                     0.0                   296.6           4.2    0.0   \n820                     2.3                   276.5           1.9    0.0   \n821                     0.0                   299.2           2.2    0.0   \n822                     0.0                   295.3           3.6    0.0   \n823                     7.2                   281.0           2.3    0.0   \n     Flag_3  air_temperature_tmmn_3  potential_evapotranspiration_3  \\\n819   255.0                   284.5                             1.8   \n820   255.0                   284.5                             2.6   \n821   255.0                   284.5                             1.2   \n822   241.0                   283.9                             2.6   \n823   241.0                   283.9                             3.1   \n     mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\n819                           0.04                     100.0   \n820                           0.08                     100.0   \n821                           0.26                     100.0   \n822                           0.20                      83.5   \n823                           0.26                      83.5   \n     relative_humidity_rmin_3  precipitation_amount_3  air_temperature_tmmx_3  \\\n819                      20.2                     0.0                   297.5   \n820                      11.8                     0.0                   296.6   \n821                      34.4                     2.3                   276.5   \n822                      18.5                     0.0                   299.2   \n823                      12.3                     0.0                   295.3   \n     wind_speed_3  SWE_4  Flag_4  air_temperature_tmmn_4  \\\n819           3.7    0.0   241.0                   282.6   \n820           4.2    0.0   255.0                   284.5   \n821           1.9    0.0   255.0                   284.5   \n822           2.2    0.0   255.0                   284.5   \n823           3.6    0.0   241.0                   283.9   \n     potential_evapotranspiration_4  mean_vapor_pressure_deficit_4  \\\n819                             1.5                           0.21   \n820                             1.8                           0.04   \n821                             2.6                           0.08   \n822                             1.2                           0.26   \n823                             2.6                           0.20   \n     relative_humidity_rmax_4  relative_humidity_rmin_4  \\\n819                      89.5                      57.5   \n820                     100.0                      20.2   \n821                     100.0                      11.8   \n822                     100.0                      34.4   \n823                      83.5                      18.5   \n     precipitation_amount_4  air_temperature_tmmx_4  wind_speed_4  SWE_5  \\\n819                     3.1                   271.4           2.2    0.0   \n820                     0.0                   297.5           3.7    0.0   \n821                     0.0                   296.6           4.2    0.0   \n822                     2.3                   276.5           1.9    0.0   \n823                     0.0                   299.2           2.2    0.0   \n     Flag_5  air_temperature_tmmn_5  potential_evapotranspiration_5  \\\n819   241.0                   282.6                             2.6   \n820   241.0                   282.6                             1.5   \n821   255.0                   284.5                             1.8   \n822   255.0                   284.5                             2.6   \n823   255.0                   284.5                             1.2   \n     mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\n819                           0.02                      89.5   \n820                           0.21                      89.5   \n821                           0.04                     100.0   \n822                           0.08                     100.0   \n823                           0.26                     100.0   \n     relative_humidity_rmin_5  precipitation_amount_5  air_temperature_tmmx_5  \\\n819                       9.3                     0.0                   296.8   \n820                      57.5                     3.1                   271.4   \n821                      20.2                     0.0                   297.5   \n822                      11.8                     0.0                   296.6   \n823                      34.4                     2.3                   276.5   \n     wind_speed_5  SWE_6  Flag_6  air_temperature_tmmn_6  \\\n819           4.7    0.0   241.0                   282.6   \n820           2.2    0.0   241.0                   282.6   \n821           3.7    0.0   241.0                   282.6   \n822           4.2    0.0   255.0                   284.5   \n823           1.9    0.0   255.0                   284.5   \n     potential_evapotranspiration_6  mean_vapor_pressure_deficit_6  \\\n819                             2.0                           0.03   \n820                             2.6                           0.02   \n821                             1.5                           0.21   \n822                             1.8                           0.04   \n823                             2.6                           0.08   \n     relative_humidity_rmax_6  relative_humidity_rmin_6  \\\n819                      89.5                      19.1   \n820                      89.5                       9.3   \n821                      89.5                      57.5   \n822                     100.0                      20.2   \n823                     100.0                      11.8   \n     precipitation_amount_6  air_temperature_tmmx_6  wind_speed_6  SWE_7  \\\n819                     0.0                   299.6           4.6    0.0   \n820                     0.0                   296.8           4.7    0.0   \n821                     3.1                   271.4           2.2    0.0   \n822                     0.0                   297.5           3.7    0.0   \n823                     0.0                   296.6           4.2    0.0   \n     Flag_7  air_temperature_tmmn_7  potential_evapotranspiration_7  \\\n819   255.0                   281.3                             2.2   \n820   241.0                   282.6                             2.0   \n821   241.0                   282.6                             2.6   \n822   241.0                   282.6                             1.5   \n823   255.0                   284.5                             1.8   \n     mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\n819                           0.14                 97.700005   \n820                           0.03                 89.500000   \n821                           0.02                 89.500000   \n822                           0.21                 89.500000   \n823                           0.04                100.000000   \n     relative_humidity_rmin_7  precipitation_amount_7  air_temperature_tmmx_7  \\\n819                      52.3                     0.9                   272.3   \n820                      19.1                     0.0                   299.6   \n821                       9.3                     0.0                   296.8   \n822                      57.5                     3.1                   271.4   \n823                      20.2                     0.0                   297.5   \n     wind_speed_7  water_year  cumulative_SWE  cumulative_Flag  \\\n819           4.0        2020             0.0              241   \n820           4.6        2020             0.0              482   \n821           4.7        2020             0.0              723   \n822           2.2        2020             0.0              964   \n823           3.7        2020             0.0             1205   \n     cumulative_air_temperature_tmmn  cumulative_potential_evapotranspiration  \\\n819                            283.9                                      2.6   \n820                            567.8                                      5.7   \n821                            851.7                                      6.3   \n822                           1132.4                                      9.6   \n823                           1413.1                                     13.5   \n     cumulative_mean_vapor_pressure_deficit  \\\n819                                    0.20   \n820                                    0.46   \n821                                    0.79   \n822                                    0.95   \n823                                    1.11   \n     cumulative_relative_humidity_rmax  cumulative_relative_humidity_rmin  \\\n819                          83.500000                               18.5   \n820                         167.000000                               30.8   \n821                         250.500000                               56.7   \n822                         334.700005                               78.8   \n823                         418.900010                               87.4   \n     cumulative_precipitation_amount  cumulative_air_temperature_tmmx  \\\n819                              0.0                            299.2   \n820                              0.0                            594.5   \n821                              7.2                            875.5   \n822                              7.2                           1173.3   \n823                              7.2                           1472.7   \n     cumulative_wind_speed  \n819                    2.2  \n820                    5.8  \n821                    8.1  \n822                   10.6  \n823                   13.2  \nAll the cumulative variables are added successfully! /home/chetana/gridmet_test_run/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv\n",
  "history_begin_time" : 1699800828431,
  "history_end_time" : 1699800928598,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "2u88c7mkinr",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1699684154078,
  "history_end_time" : 1705789690247,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "68xphjar03r",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1699681071379,
  "history_end_time" : 1699681071379,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "SGXuo861kuA0",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n# Define file paths for various CSV files\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\ntarget_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef convert_to_time_series():\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n                                'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n                                'relative_humidity_rmax', 'relative_humidity_rmin',\n                                'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(current_ready_csv_path)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(df, column_name, degree=3):\n        x = df.index\n        y = df[column_name]\n\n        # Create a mask for missing values\n        mask = y > 240\n        # Perform interpolation\n        new_y = np.interp(x, x[~mask], y[~mask])\n\n        if np.any(new_y > 240):\n            raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n        # Replace missing values with interpolated values\n        df[column_name] = new_y\n\n    # Group the data by 'lat' and 'lon' and apply interpolation for each column\n    grouped = df.groupby(['lat', 'lon'])\n    filled_data = pd.DataFrame()\n    for name, group in grouped:\n        print(f\"Start filling missing values for {name}\")\n        new_df = interpolate_missing_inplace(group, 'SWE')\n        filled_data = pd.concat([filled_data, group], axis=0)\n\n    filled_data = filled_data.reset_index()\n\n    if any(filled_data['SWE'] > 240):\n        raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n    # Create a new DataFrame to store the time series data for each location\n    result = pd.DataFrame()\n\n    # Define the number of days to consider (7 days in this case)\n    num_days = 7\n\n    grouped = filled_data.groupby(['lat', 'lon'])\n    for name, group in grouped:\n        group = group.set_index('date')\n        for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n                new_column_name = f'{target_col}_{day}'\n                group[new_column_name] = group[target_col].shift(day)\n        result = pd.concat([result, group], axis=0)\n\n    # Reset the index of the result DataFrame\n    result = result.reset_index()\n    result.to_csv(target_time_series_csv_path, index=False)\n    print(f\"New data is saved to {target_time_series_csv_path}\")\n    shutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\n    print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns():\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    columns_to_be_cumulated = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n                            'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n                            'relative_humidity_rmax', 'relative_humidity_rmin',\n                            'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    df = pd.read_csv(target_time_series_csv_path)\n    print(df.head())\n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2019-10-01')\n    end_date = pd.to_datetime('2022-09-30')\n    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n\n    # Sort each group by date and calculate cumulative precipitation\n    for column in columns_to_be_cumulated:\n      df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df.head())\n    df.to_csv(target_time_series_cumulative_csv_path, index=False)\n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    \n\n    # TODO: Calculate and add cumulative values for specified columns\n\n# Uncomment this line to execute the 'convert_to_time_series' function\n# convert_to_time_series()\n\n# Uncomment this line to execute the 'add_cumulative_columns' function\nadd_cumulative_columns()\n",
  "history_output" : "today date = 2023-11-08\ntest start date:  2018-01-01\ntest end date:  2023-11-08\n/home/chetana\n         date  level_0   index        lat         lon  SWE  Flag  swe_value  \\\n0  2019-01-01        0  511662  33.358254 -107.826881  0.0   255        4.7   \n1  2019-01-01        1  511663  33.358254 -107.826881  0.0   255        4.7   \n2  2019-01-01        2  511664  33.358254 -107.826881  0.0   255        4.7   \n3  2019-01-02        3  512553  33.358254 -107.826881  0.0   241        4.6   \n4  2019-01-02        4  512554  33.358254 -107.826881  0.0   241        4.6   \n   Unnamed: 0  air_temperature_tmmn  potential_evapotranspiration  \\\n0      555165                 266.5                           3.0   \n1      557720                 266.5                           2.8   \n2      716495                 266.5                           1.2   \n3      555166                 262.7                           0.8   \n4      557721                 262.7                           0.9   \n   mean_vapor_pressure_deficit  relative_humidity_rmax  \\\n0                         0.23                    41.8   \n1                         0.18                    41.8   \n2                         0.30                    41.8   \n3                         0.31                    48.4   \n4                         0.29                    48.4   \n   relative_humidity_rmin  precipitation_amount  air_temperature_tmmx  \\\n0               16.500000                   0.0                 294.5   \n1               18.800001                   0.0                 296.1   \n2               41.300000                   2.2                 293.5   \n3               10.000000                   0.0                 297.0   \n4               15.800000                   1.2                 295.7   \n   wind_speed  elevation     slope  curvature   aspect  eastness  northness  \\\n0         6.5  2419.5283  51.38327 -2909.2551  276.389 -0.782283   0.110823   \n1         3.9  2419.5283  51.38327 -2909.2551  276.389 -0.782283   0.110823   \n2         1.5  2419.5283  51.38327 -2909.2551  276.389 -0.782283   0.110823   \n3         4.9  2419.5283  51.38327 -2909.2551  276.389 -0.782283   0.110823   \n4         3.6  2419.5283  51.38327 -2909.2551  276.389 -0.782283   0.110823   \n   SWE_1  Flag_1  air_temperature_tmmn_1  potential_evapotranspiration_1  \\\n0    NaN     NaN                     NaN                             NaN   \n1    0.0   255.0                   266.5                             3.0   \n2    0.0   255.0                   266.5                             2.8   \n3    0.0   255.0                   266.5                             1.2   \n4    0.0   241.0                   262.7                             0.8   \n   mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\n0                            NaN                       NaN   \n1                           0.23                      41.8   \n2                           0.18                      41.8   \n3                           0.30                      41.8   \n4                           0.31                      48.4   \n   relative_humidity_rmin_1  precipitation_amount_1  air_temperature_tmmx_1  \\\n0                       NaN                     NaN                     NaN   \n1                 16.500000                     0.0                   294.5   \n2                 18.800001                     0.0                   296.1   \n3                 41.300000                     2.2                   293.5   \n4                 10.000000                     0.0                   297.0   \n   wind_speed_1  SWE_2  Flag_2  air_temperature_tmmn_2  \\\n0           NaN    NaN     NaN                     NaN   \n1           6.5    NaN     NaN                     NaN   \n2           3.9    0.0   255.0                   266.5   \n3           1.5    0.0   255.0                   266.5   \n4           4.9    0.0   255.0                   266.5   \n   potential_evapotranspiration_2  mean_vapor_pressure_deficit_2  \\\n0                             NaN                            NaN   \n1                             NaN                            NaN   \n2                             3.0                           0.23   \n3                             2.8                           0.18   \n4                             1.2                           0.30   \n   relative_humidity_rmax_2  relative_humidity_rmin_2  precipitation_amount_2  \\\n0                       NaN                       NaN                     NaN   \n1                       NaN                       NaN                     NaN   \n2                      41.8                 16.500000                     0.0   \n3                      41.8                 18.800001                     0.0   \n4                      41.8                 41.300000                     2.2   \n   air_temperature_tmmx_2  wind_speed_2  SWE_3  Flag_3  \\\n0                     NaN           NaN    NaN     NaN   \n1                     NaN           NaN    NaN     NaN   \n2                   294.5           6.5    NaN     NaN   \n3                   296.1           3.9    0.0   255.0   \n4                   293.5           1.5    0.0   255.0   \n   air_temperature_tmmn_3  potential_evapotranspiration_3  \\\n0                     NaN                             NaN   \n1                     NaN                             NaN   \n2                     NaN                             NaN   \n3                   266.5                             3.0   \n4                   266.5                             2.8   \n   mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\n0                            NaN                       NaN   \n1                            NaN                       NaN   \n2                            NaN                       NaN   \n3                           0.23                      41.8   \n4                           0.18                      41.8   \n   relative_humidity_rmin_3  precipitation_amount_3  air_temperature_tmmx_3  \\\n0                       NaN                     NaN                     NaN   \n1                       NaN                     NaN                     NaN   \n2                       NaN                     NaN                     NaN   \n3                 16.500000                     0.0                   294.5   \n4                 18.800001                     0.0                   296.1   \n   wind_speed_3  SWE_4  Flag_4  air_temperature_tmmn_4  \\\n0           NaN    NaN     NaN                     NaN   \n1           NaN    NaN     NaN                     NaN   \n2           NaN    NaN     NaN                     NaN   \n3           6.5    NaN     NaN                     NaN   \n4           3.9    0.0   255.0                   266.5   \n   potential_evapotranspiration_4  mean_vapor_pressure_deficit_4  \\\n0                             NaN                            NaN   \n1                             NaN                            NaN   \n2                             NaN                            NaN   \n3                             NaN                            NaN   \n4                             3.0                           0.23   \n   relative_humidity_rmax_4  relative_humidity_rmin_4  precipitation_amount_4  \\\n0                       NaN                       NaN                     NaN   \n1                       NaN                       NaN                     NaN   \n2                       NaN                       NaN                     NaN   \n3                       NaN                       NaN                     NaN   \n4                      41.8                      16.5                     0.0   \n   air_temperature_tmmx_4  wind_speed_4  SWE_5  Flag_5  \\\n0                     NaN           NaN    NaN     NaN   \n1                     NaN           NaN    NaN     NaN   \n2                     NaN           NaN    NaN     NaN   \n3                     NaN           NaN    NaN     NaN   \n4                   294.5           6.5    NaN     NaN   \n   air_temperature_tmmn_5  potential_evapotranspiration_5  \\\n0                     NaN                             NaN   \n1                     NaN                             NaN   \n2                     NaN                             NaN   \n3                     NaN                             NaN   \n4                     NaN                             NaN   \n   mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\n0                            NaN                       NaN   \n1                            NaN                       NaN   \n2                            NaN                       NaN   \n3                            NaN                       NaN   \n4                            NaN                       NaN   \n   relative_humidity_rmin_5  precipitation_amount_5  air_temperature_tmmx_5  \\\n0                       NaN                     NaN                     NaN   \n1                       NaN                     NaN                     NaN   \n2                       NaN                     NaN                     NaN   \n3                       NaN                     NaN                     NaN   \n4                       NaN                     NaN                     NaN   \n   wind_speed_5  SWE_6  Flag_6  air_temperature_tmmn_6  \\\n0           NaN    NaN     NaN                     NaN   \n1           NaN    NaN     NaN                     NaN   \n2           NaN    NaN     NaN                     NaN   \n3           NaN    NaN     NaN                     NaN   \n4           NaN    NaN     NaN                     NaN   \n   potential_evapotranspiration_6  mean_vapor_pressure_deficit_6  \\\n0                             NaN                            NaN   \n1                             NaN                            NaN   \n2                             NaN                            NaN   \n3                             NaN                            NaN   \n4                             NaN                            NaN   \n   relative_humidity_rmax_6  relative_humidity_rmin_6  precipitation_amount_6  \\\n0                       NaN                       NaN                     NaN   \n1                       NaN                       NaN                     NaN   \n2                       NaN                       NaN                     NaN   \n3                       NaN                       NaN                     NaN   \n4                       NaN                       NaN                     NaN   \n   air_temperature_tmmx_6  wind_speed_6  SWE_7  Flag_7  \\\n0                     NaN           NaN    NaN     NaN   \n1                     NaN           NaN    NaN     NaN   \n2                     NaN           NaN    NaN     NaN   \n3                     NaN           NaN    NaN     NaN   \n4                     NaN           NaN    NaN     NaN   \n   air_temperature_tmmn_7  potential_evapotranspiration_7  \\\n0                     NaN                             NaN   \n1                     NaN                             NaN   \n2                     NaN                             NaN   \n3                     NaN                             NaN   \n4                     NaN                             NaN   \n   mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\n0                            NaN                       NaN   \n1                            NaN                       NaN   \n2                            NaN                       NaN   \n3                            NaN                       NaN   \n4                            NaN                       NaN   \n   relative_humidity_rmin_7  precipitation_amount_7  air_temperature_tmmx_7  \\\n0                       NaN                     NaN                     NaN   \n1                       NaN                     NaN                     NaN   \n2                       NaN                     NaN                     NaN   \n3                       NaN                     NaN                     NaN   \n4                       NaN                     NaN                     NaN   \n   wind_speed_7  \n0           NaN  \n1           NaN  \n2           NaN  \n3           NaN  \n4           NaN  \nThis is our unique years [2019 2020 2021 2022]\nThis is the dataframe after cumulative columns are added\n          date  level_0   index        lat         lon  SWE  Flag  swe_value  \\\n819 2019-10-01      819  514134  33.358254 -107.826881  0.0   241        0.0   \n820 2019-10-01      820  514135  33.358254 -107.826881  0.0   241        0.0   \n821 2019-10-01      821  514136  33.358254 -107.826881  0.0   241        0.0   \n822 2019-10-02      822  511836  33.358254 -107.826881  0.0   241        0.0   \n823 2019-10-02      823  511837  33.358254 -107.826881  0.0   241        0.0   \n     Unnamed: 0  air_temperature_tmmn  potential_evapotranspiration  \\\n819      555438                 283.9                           2.6   \n820      557993                 283.9                           3.1   \n821      716768                 283.9                           0.6   \n822      555439                 280.7                           3.3   \n823      557994                 280.7                           3.9   \n     mean_vapor_pressure_deficit  relative_humidity_rmax  \\\n819                         0.20               83.500000   \n820                         0.26               83.500000   \n821                         0.33               83.500000   \n822                         0.16               84.200005   \n823                         0.16               84.200005   \n     relative_humidity_rmin  precipitation_amount  air_temperature_tmmx  \\\n819                    18.5                   0.0                 299.2   \n820                    12.3                   0.0                 295.3   \n821                    25.9                   7.2                 281.0   \n822                    22.1                   0.0                 297.8   \n823                     8.6                   0.0                 299.4   \n     wind_speed  elevation     slope  curvature   aspect  eastness  northness  \\\n819         2.2  2419.5283  51.38327 -2909.2551  276.389 -0.782283   0.110823   \n820         3.6  2419.5283  51.38327 -2909.2551  276.389 -0.782283   0.110823   \n821         2.3  2419.5283  51.38327 -2909.2551  276.389 -0.782283   0.110823   \n822         2.5  2419.5283  51.38327 -2909.2551  276.389 -0.782283   0.110823   \n823         2.6  2419.5283  51.38327 -2909.2551  276.389 -0.782283   0.110823   \n     SWE_1  Flag_1  air_temperature_tmmn_1  potential_evapotranspiration_1  \\\n819    0.0   255.0                   284.5                             1.2   \n820    0.0   241.0                   283.9                             2.6   \n821    0.0   241.0                   283.9                             3.1   \n822    0.0   241.0                   283.9                             0.6   \n823    0.0   241.0                   280.7                             3.3   \n     mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\n819                           0.26                100.000000   \n820                           0.20                 83.500000   \n821                           0.26                 83.500000   \n822                           0.33                 83.500000   \n823                           0.16                 84.200005   \n     relative_humidity_rmin_1  precipitation_amount_1  air_temperature_tmmx_1  \\\n819                      34.4                     2.3                   276.5   \n820                      18.5                     0.0                   299.2   \n821                      12.3                     0.0                   295.3   \n822                      25.9                     7.2                   281.0   \n823                      22.1                     0.0                   297.8   \n     wind_speed_1  SWE_2  Flag_2  air_temperature_tmmn_2  \\\n819           1.9    0.0   255.0                   284.5   \n820           2.2    0.0   255.0                   284.5   \n821           3.6    0.0   241.0                   283.9   \n822           2.3    0.0   241.0                   283.9   \n823           2.5    0.0   241.0                   283.9   \n     potential_evapotranspiration_2  mean_vapor_pressure_deficit_2  \\\n819                             2.6                           0.08   \n820                             1.2                           0.26   \n821                             2.6                           0.20   \n822                             3.1                           0.26   \n823                             0.6                           0.33   \n     relative_humidity_rmax_2  relative_humidity_rmin_2  \\\n819                     100.0                      11.8   \n820                     100.0                      34.4   \n821                      83.5                      18.5   \n822                      83.5                      12.3   \n823                      83.5                      25.9   \n     precipitation_amount_2  air_temperature_tmmx_2  wind_speed_2  SWE_3  \\\n819                     0.0                   296.6           4.2    0.0   \n820                     2.3                   276.5           1.9    0.0   \n821                     0.0                   299.2           2.2    0.0   \n822                     0.0                   295.3           3.6    0.0   \n823                     7.2                   281.0           2.3    0.0   \n     Flag_3  air_temperature_tmmn_3  potential_evapotranspiration_3  \\\n819   255.0                   284.5                             1.8   \n820   255.0                   284.5                             2.6   \n821   255.0                   284.5                             1.2   \n822   241.0                   283.9                             2.6   \n823   241.0                   283.9                             3.1   \n     mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\n819                           0.04                     100.0   \n820                           0.08                     100.0   \n821                           0.26                     100.0   \n822                           0.20                      83.5   \n823                           0.26                      83.5   \n     relative_humidity_rmin_3  precipitation_amount_3  air_temperature_tmmx_3  \\\n819                      20.2                     0.0                   297.5   \n820                      11.8                     0.0                   296.6   \n821                      34.4                     2.3                   276.5   \n822                      18.5                     0.0                   299.2   \n823                      12.3                     0.0                   295.3   \n     wind_speed_3  SWE_4  Flag_4  air_temperature_tmmn_4  \\\n819           3.7    0.0   241.0                   282.6   \n820           4.2    0.0   255.0                   284.5   \n821           1.9    0.0   255.0                   284.5   \n822           2.2    0.0   255.0                   284.5   \n823           3.6    0.0   241.0                   283.9   \n     potential_evapotranspiration_4  mean_vapor_pressure_deficit_4  \\\n819                             1.5                           0.21   \n820                             1.8                           0.04   \n821                             2.6                           0.08   \n822                             1.2                           0.26   \n823                             2.6                           0.20   \n     relative_humidity_rmax_4  relative_humidity_rmin_4  \\\n819                      89.5                      57.5   \n820                     100.0                      20.2   \n821                     100.0                      11.8   \n822                     100.0                      34.4   \n823                      83.5                      18.5   \n     precipitation_amount_4  air_temperature_tmmx_4  wind_speed_4  SWE_5  \\\n819                     3.1                   271.4           2.2    0.0   \n820                     0.0                   297.5           3.7    0.0   \n821                     0.0                   296.6           4.2    0.0   \n822                     2.3                   276.5           1.9    0.0   \n823                     0.0                   299.2           2.2    0.0   \n     Flag_5  air_temperature_tmmn_5  potential_evapotranspiration_5  \\\n819   241.0                   282.6                             2.6   \n820   241.0                   282.6                             1.5   \n821   255.0                   284.5                             1.8   \n822   255.0                   284.5                             2.6   \n823   255.0                   284.5                             1.2   \n     mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\n819                           0.02                      89.5   \n820                           0.21                      89.5   \n821                           0.04                     100.0   \n822                           0.08                     100.0   \n823                           0.26                     100.0   \n     relative_humidity_rmin_5  precipitation_amount_5  air_temperature_tmmx_5  \\\n819                       9.3                     0.0                   296.8   \n820                      57.5                     3.1                   271.4   \n821                      20.2                     0.0                   297.5   \n822                      11.8                     0.0                   296.6   \n823                      34.4                     2.3                   276.5   \n     wind_speed_5  SWE_6  Flag_6  air_temperature_tmmn_6  \\\n819           4.7    0.0   241.0                   282.6   \n820           2.2    0.0   241.0                   282.6   \n821           3.7    0.0   241.0                   282.6   \n822           4.2    0.0   255.0                   284.5   \n823           1.9    0.0   255.0                   284.5   \n     potential_evapotranspiration_6  mean_vapor_pressure_deficit_6  \\\n819                             2.0                           0.03   \n820                             2.6                           0.02   \n821                             1.5                           0.21   \n822                             1.8                           0.04   \n823                             2.6                           0.08   \n     relative_humidity_rmax_6  relative_humidity_rmin_6  \\\n819                      89.5                      19.1   \n820                      89.5                       9.3   \n821                      89.5                      57.5   \n822                     100.0                      20.2   \n823                     100.0                      11.8   \n     precipitation_amount_6  air_temperature_tmmx_6  wind_speed_6  SWE_7  \\\n819                     0.0                   299.6           4.6    0.0   \n820                     0.0                   296.8           4.7    0.0   \n821                     3.1                   271.4           2.2    0.0   \n822                     0.0                   297.5           3.7    0.0   \n823                     0.0                   296.6           4.2    0.0   \n     Flag_7  air_temperature_tmmn_7  potential_evapotranspiration_7  \\\n819   255.0                   281.3                             2.2   \n820   241.0                   282.6                             2.0   \n821   241.0                   282.6                             2.6   \n822   241.0                   282.6                             1.5   \n823   255.0                   284.5                             1.8   \n     mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\n819                           0.14                 97.700005   \n820                           0.03                 89.500000   \n821                           0.02                 89.500000   \n822                           0.21                 89.500000   \n823                           0.04                100.000000   \n     relative_humidity_rmin_7  precipitation_amount_7  air_temperature_tmmx_7  \\\n819                      52.3                     0.9                   272.3   \n820                      19.1                     0.0                   299.6   \n821                       9.3                     0.0                   296.8   \n822                      57.5                     3.1                   271.4   \n823                      20.2                     0.0                   297.5   \n     wind_speed_7  water_year  cumulative_SWE  cumulative_Flag  \\\n819           4.0        2020             0.0              241   \n820           4.6        2020             0.0              482   \n821           4.7        2020             0.0              723   \n822           2.2        2020             0.0              964   \n823           3.7        2020             0.0             1205   \n     cumulative_air_temperature_tmmn  cumulative_potential_evapotranspiration  \\\n819                            283.9                                      2.6   \n820                            567.8                                      5.7   \n821                            851.7                                      6.3   \n822                           1132.4                                      9.6   \n823                           1413.1                                     13.5   \n     cumulative_mean_vapor_pressure_deficit  \\\n819                                    0.20   \n820                                    0.46   \n821                                    0.79   \n822                                    0.95   \n823                                    1.11   \n     cumulative_relative_humidity_rmax  cumulative_relative_humidity_rmin  \\\n819                          83.500000                               18.5   \n820                         167.000000                               30.8   \n821                         250.500000                               56.7   \n822                         334.700005                               78.8   \n823                         418.900010                               87.4   \n     cumulative_precipitation_amount  cumulative_air_temperature_tmmx  \\\n819                              0.0                            299.2   \n820                              0.0                            594.5   \n821                              7.2                            875.5   \n822                              7.2                           1173.3   \n823                              7.2                           1472.7   \n     cumulative_wind_speed  \n819                    2.2  \n820                    5.8  \n821                    8.1  \n822                   10.6  \n823                   13.2  \nAll the cumulative variables are added successfully! /home/chetana/gridmet_test_run/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv\n",
  "history_begin_time" : 1699458768615,
  "history_end_time" : 1699458845506,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "GU1ioY4XCP2O",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n# Define file paths for various CSV files\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\ntarget_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef convert_to_time_series():\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n                                'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n                                'relative_humidity_rmax', 'relative_humidity_rmin',\n                                'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(current_ready_csv_path)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(df, column_name, degree=3):\n        x = df.index\n        y = df[column_name]\n\n        # Create a mask for missing values\n        mask = y > 240\n        # Perform interpolation\n        new_y = np.interp(x, x[~mask], y[~mask])\n\n        if np.any(new_y > 240):\n            raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n        # Replace missing values with interpolated values\n        df[column_name] = new_y\n\n    # Group the data by 'lat' and 'lon' and apply interpolation for each column\n    grouped = df.groupby(['lat', 'lon'])\n    filled_data = pd.DataFrame()\n    for name, group in grouped:\n        print(f\"Start filling missing values for {name}\")\n        new_df = interpolate_missing_inplace(group, 'SWE')\n        filled_data = pd.concat([filled_data, group], axis=0)\n\n    filled_data = filled_data.reset_index()\n\n    if any(filled_data['SWE'] > 240):\n        raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n    # Create a new DataFrame to store the time series data for each location\n    result = pd.DataFrame()\n\n    # Define the number of days to consider (7 days in this case)\n    num_days = 7\n\n    grouped = filled_data.groupby(['lat', 'lon'])\n    for name, group in grouped:\n        group = group.set_index('date')\n        for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n                new_column_name = f'{target_col}_{day}'\n                group[new_column_name] = group[target_col].shift(day)\n        result = pd.concat([result, group], axis=0)\n\n    # Reset the index of the result DataFrame\n    result = result.reset_index()\n    result.to_csv(target_time_series_csv_path, index=False)\n    print(f\"New data is saved to {target_time_series_csv_path}\")\n    shutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\n    print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns():\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    columns_to_be_cumulated = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n                            'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n                            'relative_humidity_rmax', 'relative_humidity_rmin',\n                            'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    df = pd.read_csv(target_time_series_csv_path)\n    print(df.head())\n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n    start_date = pd.to_datetime('2019-10-01')\n    end_date = pd.to_datetime('2022-09-30')\n    df = df[(filtered_df['date'] >= start_date) & (filtered_df['date'] <= end_date)]\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n\n    # Sort each group by date and calculate cumulative precipitation\n    for column in columns_to_be_cumulated:\n      df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df.head())\n    df.to_csv(target_time_series_cumulative_csv_path, index=False)\n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    \n\n    # TODO: Calculate and add cumulative values for specified columns\n\n# Uncomment this line to execute the 'convert_to_time_series' function\n# convert_to_time_series()\n\n# Uncomment this line to execute the 'add_cumulative_columns' function\nadd_cumulative_columns()\n",
  "history_output" : "today date = 2023-11-08\ntest start date:  2018-01-01\ntest end date:  2023-11-08\n/home/chetana\n         date  level_0   index        lat         lon  SWE  Flag  swe_value  \\\n0  2019-01-01        0  511662  33.358254 -107.826881  0.0   255        4.7   \n1  2019-01-01        1  511663  33.358254 -107.826881  0.0   255        4.7   \n2  2019-01-01        2  511664  33.358254 -107.826881  0.0   255        4.7   \n3  2019-01-02        3  512553  33.358254 -107.826881  0.0   241        4.6   \n4  2019-01-02        4  512554  33.358254 -107.826881  0.0   241        4.6   \n   Unnamed: 0  air_temperature_tmmn  potential_evapotranspiration  \\\n0      555165                 266.5                           3.0   \n1      557720                 266.5                           2.8   \n2      716495                 266.5                           1.2   \n3      555166                 262.7                           0.8   \n4      557721                 262.7                           0.9   \n   mean_vapor_pressure_deficit  relative_humidity_rmax  \\\n0                         0.23                    41.8   \n1                         0.18                    41.8   \n2                         0.30                    41.8   \n3                         0.31                    48.4   \n4                         0.29                    48.4   \n   relative_humidity_rmin  precipitation_amount  air_temperature_tmmx  \\\n0               16.500000                   0.0                 294.5   \n1               18.800001                   0.0                 296.1   \n2               41.300000                   2.2                 293.5   \n3               10.000000                   0.0                 297.0   \n4               15.800000                   1.2                 295.7   \n   wind_speed  elevation     slope  curvature   aspect  eastness  northness  \\\n0         6.5  2419.5283  51.38327 -2909.2551  276.389 -0.782283   0.110823   \n1         3.9  2419.5283  51.38327 -2909.2551  276.389 -0.782283   0.110823   \n2         1.5  2419.5283  51.38327 -2909.2551  276.389 -0.782283   0.110823   \n3         4.9  2419.5283  51.38327 -2909.2551  276.389 -0.782283   0.110823   \n4         3.6  2419.5283  51.38327 -2909.2551  276.389 -0.782283   0.110823   \n   SWE_1  Flag_1  air_temperature_tmmn_1  potential_evapotranspiration_1  \\\n0    NaN     NaN                     NaN                             NaN   \n1    0.0   255.0                   266.5                             3.0   \n2    0.0   255.0                   266.5                             2.8   \n3    0.0   255.0                   266.5                             1.2   \n4    0.0   241.0                   262.7                             0.8   \n   mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\n0                            NaN                       NaN   \n1                           0.23                      41.8   \n2                           0.18                      41.8   \n3                           0.30                      41.8   \n4                           0.31                      48.4   \n   relative_humidity_rmin_1  precipitation_amount_1  air_temperature_tmmx_1  \\\n0                       NaN                     NaN                     NaN   \n1                 16.500000                     0.0                   294.5   \n2                 18.800001                     0.0                   296.1   \n3                 41.300000                     2.2                   293.5   \n4                 10.000000                     0.0                   297.0   \n   wind_speed_1  SWE_2  Flag_2  air_temperature_tmmn_2  \\\n0           NaN    NaN     NaN                     NaN   \n1           6.5    NaN     NaN                     NaN   \n2           3.9    0.0   255.0                   266.5   \n3           1.5    0.0   255.0                   266.5   \n4           4.9    0.0   255.0                   266.5   \n   potential_evapotranspiration_2  mean_vapor_pressure_deficit_2  \\\n0                             NaN                            NaN   \n1                             NaN                            NaN   \n2                             3.0                           0.23   \n3                             2.8                           0.18   \n4                             1.2                           0.30   \n   relative_humidity_rmax_2  relative_humidity_rmin_2  precipitation_amount_2  \\\n0                       NaN                       NaN                     NaN   \n1                       NaN                       NaN                     NaN   \n2                      41.8                 16.500000                     0.0   \n3                      41.8                 18.800001                     0.0   \n4                      41.8                 41.300000                     2.2   \n   air_temperature_tmmx_2  wind_speed_2  SWE_3  Flag_3  \\\n0                     NaN           NaN    NaN     NaN   \n1                     NaN           NaN    NaN     NaN   \n2                   294.5           6.5    NaN     NaN   \n3                   296.1           3.9    0.0   255.0   \n4                   293.5           1.5    0.0   255.0   \n   air_temperature_tmmn_3  potential_evapotranspiration_3  \\\n0                     NaN                             NaN   \n1                     NaN                             NaN   \n2                     NaN                             NaN   \n3                   266.5                             3.0   \n4                   266.5                             2.8   \n   mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\n0                            NaN                       NaN   \n1                            NaN                       NaN   \n2                            NaN                       NaN   \n3                           0.23                      41.8   \n4                           0.18                      41.8   \n   relative_humidity_rmin_3  precipitation_amount_3  air_temperature_tmmx_3  \\\n0                       NaN                     NaN                     NaN   \n1                       NaN                     NaN                     NaN   \n2                       NaN                     NaN                     NaN   \n3                 16.500000                     0.0                   294.5   \n4                 18.800001                     0.0                   296.1   \n   wind_speed_3  SWE_4  Flag_4  air_temperature_tmmn_4  \\\n0           NaN    NaN     NaN                     NaN   \n1           NaN    NaN     NaN                     NaN   \n2           NaN    NaN     NaN                     NaN   \n3           6.5    NaN     NaN                     NaN   \n4           3.9    0.0   255.0                   266.5   \n   potential_evapotranspiration_4  mean_vapor_pressure_deficit_4  \\\n0                             NaN                            NaN   \n1                             NaN                            NaN   \n2                             NaN                            NaN   \n3                             NaN                            NaN   \n4                             3.0                           0.23   \n   relative_humidity_rmax_4  relative_humidity_rmin_4  precipitation_amount_4  \\\n0                       NaN                       NaN                     NaN   \n1                       NaN                       NaN                     NaN   \n2                       NaN                       NaN                     NaN   \n3                       NaN                       NaN                     NaN   \n4                      41.8                      16.5                     0.0   \n   air_temperature_tmmx_4  wind_speed_4  SWE_5  Flag_5  \\\n0                     NaN           NaN    NaN     NaN   \n1                     NaN           NaN    NaN     NaN   \n2                     NaN           NaN    NaN     NaN   \n3                     NaN           NaN    NaN     NaN   \n4                   294.5           6.5    NaN     NaN   \n   air_temperature_tmmn_5  potential_evapotranspiration_5  \\\n0                     NaN                             NaN   \n1                     NaN                             NaN   \n2                     NaN                             NaN   \n3                     NaN                             NaN   \n4                     NaN                             NaN   \n   mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\n0                            NaN                       NaN   \n1                            NaN                       NaN   \n2                            NaN                       NaN   \n3                            NaN                       NaN   \n4                            NaN                       NaN   \n   relative_humidity_rmin_5  precipitation_amount_5  air_temperature_tmmx_5  \\\n0                       NaN                     NaN                     NaN   \n1                       NaN                     NaN                     NaN   \n2                       NaN                     NaN                     NaN   \n3                       NaN                     NaN                     NaN   \n4                       NaN                     NaN                     NaN   \n   wind_speed_5  SWE_6  Flag_6  air_temperature_tmmn_6  \\\n0           NaN    NaN     NaN                     NaN   \n1           NaN    NaN     NaN                     NaN   \n2           NaN    NaN     NaN                     NaN   \n3           NaN    NaN     NaN                     NaN   \n4           NaN    NaN     NaN                     NaN   \n   potential_evapotranspiration_6  mean_vapor_pressure_deficit_6  \\\n0                             NaN                            NaN   \n1                             NaN                            NaN   \n2                             NaN                            NaN   \n3                             NaN                            NaN   \n4                             NaN                            NaN   \n   relative_humidity_rmax_6  relative_humidity_rmin_6  precipitation_amount_6  \\\n0                       NaN                       NaN                     NaN   \n1                       NaN                       NaN                     NaN   \n2                       NaN                       NaN                     NaN   \n3                       NaN                       NaN                     NaN   \n4                       NaN                       NaN                     NaN   \n   air_temperature_tmmx_6  wind_speed_6  SWE_7  Flag_7  \\\n0                     NaN           NaN    NaN     NaN   \n1                     NaN           NaN    NaN     NaN   \n2                     NaN           NaN    NaN     NaN   \n3                     NaN           NaN    NaN     NaN   \n4                     NaN           NaN    NaN     NaN   \n   air_temperature_tmmn_7  potential_evapotranspiration_7  \\\n0                     NaN                             NaN   \n1                     NaN                             NaN   \n2                     NaN                             NaN   \n3                     NaN                             NaN   \n4                     NaN                             NaN   \n   mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\n0                            NaN                       NaN   \n1                            NaN                       NaN   \n2                            NaN                       NaN   \n3                            NaN                       NaN   \n4                            NaN                       NaN   \n   relative_humidity_rmin_7  precipitation_amount_7  air_temperature_tmmx_7  \\\n0                       NaN                     NaN                     NaN   \n1                       NaN                     NaN                     NaN   \n2                       NaN                     NaN                     NaN   \n3                       NaN                     NaN                     NaN   \n4                       NaN                     NaN                     NaN   \n   wind_speed_7  \n0           NaN  \n1           NaN  \n2           NaN  \n3           NaN  \n4           NaN  \nThis is our unique years [2019 2020 2021 2022]\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/GU1ioY4XCP2O/convert_to_time_series.py\", line 160, in <module>\n    add_cumulative_columns()\n  File \"/home/chetana/gw-workspace/GU1ioY4XCP2O/convert_to_time_series.py\", line 127, in add_cumulative_columns\n    df = df[(filtered_df['date'] >= start_date) & (filtered_df['date'] <= end_date)]\nNameError: name 'filtered_df' is not defined\n",
  "history_begin_time" : 1699458730729,
  "history_end_time" : 1699458751356,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "gQojxjHZRETU",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n# Define file paths for various CSV files\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\ntarget_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef convert_to_time_series():\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n                                'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n                                'relative_humidity_rmax', 'relative_humidity_rmin',\n                                'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(current_ready_csv_path)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(df, column_name, degree=3):\n        x = df.index\n        y = df[column_name]\n\n        # Create a mask for missing values\n        mask = y > 240\n        # Perform interpolation\n        new_y = np.interp(x, x[~mask], y[~mask])\n\n        if np.any(new_y > 240):\n            raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n        # Replace missing values with interpolated values\n        df[column_name] = new_y\n\n    # Group the data by 'lat' and 'lon' and apply interpolation for each column\n    grouped = df.groupby(['lat', 'lon'])\n    filled_data = pd.DataFrame()\n    for name, group in grouped:\n        print(f\"Start filling missing values for {name}\")\n        new_df = interpolate_missing_inplace(group, 'SWE')\n        filled_data = pd.concat([filled_data, group], axis=0)\n\n    filled_data = filled_data.reset_index()\n\n    if any(filled_data['SWE'] > 240):\n        raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n    # Create a new DataFrame to store the time series data for each location\n    result = pd.DataFrame()\n\n    # Define the number of days to consider (7 days in this case)\n    num_days = 7\n\n    grouped = filled_data.groupby(['lat', 'lon'])\n    for name, group in grouped:\n        group = group.set_index('date')\n        for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n                new_column_name = f'{target_col}_{day}'\n                group[new_column_name] = group[target_col].shift(day)\n        result = pd.concat([result, group], axis=0)\n\n    # Reset the index of the result DataFrame\n    result = result.reset_index()\n    result.to_csv(target_time_series_csv_path, index=False)\n    print(f\"New data is saved to {target_time_series_csv_path}\")\n    shutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\n    print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns():\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    columns_to_be_cumulated = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n                            'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n                            'relative_humidity_rmax', 'relative_humidity_rmin',\n                            'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    df = pd.read_csv(target_time_series_csv_path)\n    print(df.head())\n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n    \n    # only start from the water year 10-01\n    # Filter rows based on the date range (2019 to 2022)\n  \tstart_date = pd.to_datetime('2019-10-01')\n  \tend_date = pd.to_datetime('2022-09-30')\n  \tdf = df[(filtered_df['date'] >= start_date) & (filtered_df['date'] <= end_date)]\n\n    # Define a function to calculate the water year\n    def calculate_water_year(date):\n        year = date.year\n        if date.month >= 10:  # Water year starts in October\n            return year + 1\n        else:\n            return year\n    \n    # every water year starts at Oct 1, and ends at Sep 30. \n    df['water_year'] = df['date'].apply(calculate_water_year)\n    \n    \n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon', 'water_year'], group_keys=False)\n\n    # Sort each group by date and calculate cumulative precipitation\n    for column in columns_to_be_cumulated:\n      df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df.head())\n    df.to_csv(target_time_series_cumulative_csv_path, index=False)\n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    \n\n    # TODO: Calculate and add cumulative values for specified columns\n\n# Uncomment this line to execute the 'convert_to_time_series' function\n# convert_to_time_series()\n\n# Uncomment this line to execute the 'add_cumulative_columns' function\nadd_cumulative_columns()\n",
  "history_output" : "  File \"/home/chetana/gw-workspace/gQojxjHZRETU/convert_to_time_series.py\", line 125\n    start_date = pd.to_datetime('2019-10-01')\nTabError: inconsistent use of tabs and spaces in indentation\n",
  "history_begin_time" : 1699458709615,
  "history_end_time" : 1699458709787,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "GMYa2dzRHcx8",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n# Define file paths for various CSV files\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\ntarget_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef convert_to_time_series():\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n                                'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n                                'relative_humidity_rmax', 'relative_humidity_rmin',\n                                'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(current_ready_csv_path)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(df, column_name, degree=3):\n        x = df.index\n        y = df[column_name]\n\n        # Create a mask for missing values\n        mask = y > 240\n        # Perform interpolation\n        new_y = np.interp(x, x[~mask], y[~mask])\n\n        if np.any(new_y > 240):\n            raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n        # Replace missing values with interpolated values\n        df[column_name] = new_y\n\n    # Group the data by 'lat' and 'lon' and apply interpolation for each column\n    grouped = df.groupby(['lat', 'lon'])\n    filled_data = pd.DataFrame()\n    for name, group in grouped:\n        print(f\"Start filling missing values for {name}\")\n        new_df = interpolate_missing_inplace(group, 'SWE')\n        filled_data = pd.concat([filled_data, group], axis=0)\n\n    filled_data = filled_data.reset_index()\n\n    if any(filled_data['SWE'] > 240):\n        raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n    # Create a new DataFrame to store the time series data for each location\n    result = pd.DataFrame()\n\n    # Define the number of days to consider (7 days in this case)\n    num_days = 7\n\n    grouped = filled_data.groupby(['lat', 'lon'])\n    for name, group in grouped:\n        group = group.set_index('date')\n        for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n                new_column_name = f'{target_col}_{day}'\n                group[new_column_name] = group[target_col].shift(day)\n        result = pd.concat([result, group], axis=0)\n\n    # Reset the index of the result DataFrame\n    result = result.reset_index()\n    result.to_csv(target_time_series_csv_path, index=False)\n    print(f\"New data is saved to {target_time_series_csv_path}\")\n    shutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\n    print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns():\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    columns_to_be_cumulated = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n                            'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n                            'relative_humidity_rmax', 'relative_humidity_rmin',\n                            'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    df = pd.read_csv(target_time_series_csv_path)\n    print(df.head())\n    df['date'] = pd.to_datetime(df['date'])\n    \n    unique_years = df['date'].dt.year.unique()\n    print(\"This is our unique years\", unique_years)\n    #current_df['fSCA'] = current_df['fSCA'].fillna(0)\n\n    # Group the DataFrame by 'lat' and 'lon'\n    grouped = df.groupby(['lat', 'lon'], group_keys=False)\n\n    # Sort each group by date and calculate cumulative precipitation\n\n    \n    for column in cum_columns:\n      df[f'cumulative_{column}'] = grouped.apply(lambda group: group.sort_values('date')[column].cumsum())\n\n    print(\"This is the dataframe after cumulative columns are added\")\n    print(df.head())\n    df.to_csv(target_time_series_cumulative_csv_path, index=False)\n    print(f\"All the cumulative variables are added successfully! {target_time_series_cumulative_csv_path}\")\n    \n\n    # TODO: Calculate and add cumulative values for specified columns\n\n# Uncomment this line to execute the 'convert_to_time_series' function\n# convert_to_time_series()\n\n# Uncomment this line to execute the 'add_cumulative_columns' function\nadd_cumulative_columns()\n",
  "history_output" : "today date = 2023-11-08\ntest start date:  2018-01-01\ntest end date:  2023-11-08\n/home/chetana\n         date  level_0   index        lat         lon  SWE  Flag  swe_value  \\\n0  2019-01-01        0  511662  33.358254 -107.826881  0.0   255        4.7   \n1  2019-01-01        1  511663  33.358254 -107.826881  0.0   255        4.7   \n2  2019-01-01        2  511664  33.358254 -107.826881  0.0   255        4.7   \n3  2019-01-02        3  512553  33.358254 -107.826881  0.0   241        4.6   \n4  2019-01-02        4  512554  33.358254 -107.826881  0.0   241        4.6   \n   Unnamed: 0  air_temperature_tmmn  potential_evapotranspiration  \\\n0      555165                 266.5                           3.0   \n1      557720                 266.5                           2.8   \n2      716495                 266.5                           1.2   \n3      555166                 262.7                           0.8   \n4      557721                 262.7                           0.9   \n   mean_vapor_pressure_deficit  relative_humidity_rmax  \\\n0                         0.23                    41.8   \n1                         0.18                    41.8   \n2                         0.30                    41.8   \n3                         0.31                    48.4   \n4                         0.29                    48.4   \n   relative_humidity_rmin  precipitation_amount  air_temperature_tmmx  \\\n0               16.500000                   0.0                 294.5   \n1               18.800001                   0.0                 296.1   \n2               41.300000                   2.2                 293.5   \n3               10.000000                   0.0                 297.0   \n4               15.800000                   1.2                 295.7   \n   wind_speed  elevation     slope  curvature   aspect  eastness  northness  \\\n0         6.5  2419.5283  51.38327 -2909.2551  276.389 -0.782283   0.110823   \n1         3.9  2419.5283  51.38327 -2909.2551  276.389 -0.782283   0.110823   \n2         1.5  2419.5283  51.38327 -2909.2551  276.389 -0.782283   0.110823   \n3         4.9  2419.5283  51.38327 -2909.2551  276.389 -0.782283   0.110823   \n4         3.6  2419.5283  51.38327 -2909.2551  276.389 -0.782283   0.110823   \n   SWE_1  Flag_1  air_temperature_tmmn_1  potential_evapotranspiration_1  \\\n0    NaN     NaN                     NaN                             NaN   \n1    0.0   255.0                   266.5                             3.0   \n2    0.0   255.0                   266.5                             2.8   \n3    0.0   255.0                   266.5                             1.2   \n4    0.0   241.0                   262.7                             0.8   \n   mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\n0                            NaN                       NaN   \n1                           0.23                      41.8   \n2                           0.18                      41.8   \n3                           0.30                      41.8   \n4                           0.31                      48.4   \n   relative_humidity_rmin_1  precipitation_amount_1  air_temperature_tmmx_1  \\\n0                       NaN                     NaN                     NaN   \n1                 16.500000                     0.0                   294.5   \n2                 18.800001                     0.0                   296.1   \n3                 41.300000                     2.2                   293.5   \n4                 10.000000                     0.0                   297.0   \n   wind_speed_1  SWE_2  Flag_2  air_temperature_tmmn_2  \\\n0           NaN    NaN     NaN                     NaN   \n1           6.5    NaN     NaN                     NaN   \n2           3.9    0.0   255.0                   266.5   \n3           1.5    0.0   255.0                   266.5   \n4           4.9    0.0   255.0                   266.5   \n   potential_evapotranspiration_2  mean_vapor_pressure_deficit_2  \\\n0                             NaN                            NaN   \n1                             NaN                            NaN   \n2                             3.0                           0.23   \n3                             2.8                           0.18   \n4                             1.2                           0.30   \n   relative_humidity_rmax_2  relative_humidity_rmin_2  precipitation_amount_2  \\\n0                       NaN                       NaN                     NaN   \n1                       NaN                       NaN                     NaN   \n2                      41.8                 16.500000                     0.0   \n3                      41.8                 18.800001                     0.0   \n4                      41.8                 41.300000                     2.2   \n   air_temperature_tmmx_2  wind_speed_2  SWE_3  Flag_3  \\\n0                     NaN           NaN    NaN     NaN   \n1                     NaN           NaN    NaN     NaN   \n2                   294.5           6.5    NaN     NaN   \n3                   296.1           3.9    0.0   255.0   \n4                   293.5           1.5    0.0   255.0   \n   air_temperature_tmmn_3  potential_evapotranspiration_3  \\\n0                     NaN                             NaN   \n1                     NaN                             NaN   \n2                     NaN                             NaN   \n3                   266.5                             3.0   \n4                   266.5                             2.8   \n   mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\n0                            NaN                       NaN   \n1                            NaN                       NaN   \n2                            NaN                       NaN   \n3                           0.23                      41.8   \n4                           0.18                      41.8   \n   relative_humidity_rmin_3  precipitation_amount_3  air_temperature_tmmx_3  \\\n0                       NaN                     NaN                     NaN   \n1                       NaN                     NaN                     NaN   \n2                       NaN                     NaN                     NaN   \n3                 16.500000                     0.0                   294.5   \n4                 18.800001                     0.0                   296.1   \n   wind_speed_3  SWE_4  Flag_4  air_temperature_tmmn_4  \\\n0           NaN    NaN     NaN                     NaN   \n1           NaN    NaN     NaN                     NaN   \n2           NaN    NaN     NaN                     NaN   \n3           6.5    NaN     NaN                     NaN   \n4           3.9    0.0   255.0                   266.5   \n   potential_evapotranspiration_4  mean_vapor_pressure_deficit_4  \\\n0                             NaN                            NaN   \n1                             NaN                            NaN   \n2                             NaN                            NaN   \n3                             NaN                            NaN   \n4                             3.0                           0.23   \n   relative_humidity_rmax_4  relative_humidity_rmin_4  precipitation_amount_4  \\\n0                       NaN                       NaN                     NaN   \n1                       NaN                       NaN                     NaN   \n2                       NaN                       NaN                     NaN   \n3                       NaN                       NaN                     NaN   \n4                      41.8                      16.5                     0.0   \n   air_temperature_tmmx_4  wind_speed_4  SWE_5  Flag_5  \\\n0                     NaN           NaN    NaN     NaN   \n1                     NaN           NaN    NaN     NaN   \n2                     NaN           NaN    NaN     NaN   \n3                     NaN           NaN    NaN     NaN   \n4                   294.5           6.5    NaN     NaN   \n   air_temperature_tmmn_5  potential_evapotranspiration_5  \\\n0                     NaN                             NaN   \n1                     NaN                             NaN   \n2                     NaN                             NaN   \n3                     NaN                             NaN   \n4                     NaN                             NaN   \n   mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\n0                            NaN                       NaN   \n1                            NaN                       NaN   \n2                            NaN                       NaN   \n3                            NaN                       NaN   \n4                            NaN                       NaN   \n   relative_humidity_rmin_5  precipitation_amount_5  air_temperature_tmmx_5  \\\n0                       NaN                     NaN                     NaN   \n1                       NaN                     NaN                     NaN   \n2                       NaN                     NaN                     NaN   \n3                       NaN                     NaN                     NaN   \n4                       NaN                     NaN                     NaN   \n   wind_speed_5  SWE_6  Flag_6  air_temperature_tmmn_6  \\\n0           NaN    NaN     NaN                     NaN   \n1           NaN    NaN     NaN                     NaN   \n2           NaN    NaN     NaN                     NaN   \n3           NaN    NaN     NaN                     NaN   \n4           NaN    NaN     NaN                     NaN   \n   potential_evapotranspiration_6  mean_vapor_pressure_deficit_6  \\\n0                             NaN                            NaN   \n1                             NaN                            NaN   \n2                             NaN                            NaN   \n3                             NaN                            NaN   \n4                             NaN                            NaN   \n   relative_humidity_rmax_6  relative_humidity_rmin_6  precipitation_amount_6  \\\n0                       NaN                       NaN                     NaN   \n1                       NaN                       NaN                     NaN   \n2                       NaN                       NaN                     NaN   \n3                       NaN                       NaN                     NaN   \n4                       NaN                       NaN                     NaN   \n   air_temperature_tmmx_6  wind_speed_6  SWE_7  Flag_7  \\\n0                     NaN           NaN    NaN     NaN   \n1                     NaN           NaN    NaN     NaN   \n2                     NaN           NaN    NaN     NaN   \n3                     NaN           NaN    NaN     NaN   \n4                     NaN           NaN    NaN     NaN   \n   air_temperature_tmmn_7  potential_evapotranspiration_7  \\\n0                     NaN                             NaN   \n1                     NaN                             NaN   \n2                     NaN                             NaN   \n3                     NaN                             NaN   \n4                     NaN                             NaN   \n   mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\n0                            NaN                       NaN   \n1                            NaN                       NaN   \n2                            NaN                       NaN   \n3                            NaN                       NaN   \n4                            NaN                       NaN   \n   relative_humidity_rmin_7  precipitation_amount_7  air_temperature_tmmx_7  \\\n0                       NaN                     NaN                     NaN   \n1                       NaN                     NaN                     NaN   \n2                       NaN                     NaN                     NaN   \n3                       NaN                     NaN                     NaN   \n4                       NaN                     NaN                     NaN   \n   wind_speed_7  \n0           NaN  \n1           NaN  \n2           NaN  \n3           NaN  \n4           NaN  \nThis is our unique years [2019 2020 2021 2022]\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/GMYa2dzRHcx8/convert_to_time_series.py\", line 144, in <module>\n    add_cumulative_columns()\n  File \"/home/chetana/gw-workspace/GMYa2dzRHcx8/convert_to_time_series.py\", line 129, in add_cumulative_columns\n    for column in cum_columns:\nNameError: name 'cum_columns' is not defined\n",
  "history_begin_time" : 1699458201578,
  "history_end_time" : 1699458225694,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "OJ78lNVx4EhW",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\n# Set Pandas options to display all columns\npd.set_option('display.max_columns', None)\n\n# Define file paths for various CSV files\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\ntarget_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n\ndef array_describe(arr):\n    \"\"\"\n    Calculate descriptive statistics for a given NumPy array.\n\n    Args:\n        arr (numpy.ndarray): The input array for which statistics are calculated.\n\n    Returns:\n        dict: A dictionary containing descriptive statistics such as Mean, Median, Standard Deviation, Variance, Minimum, Maximum, and Sum.\n    \"\"\"\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    return stats\n\ndef convert_to_time_series():\n    \"\"\"\n    Convert the data from the ready CSV file into a time series format.\n\n    This function reads the cleaned CSV file, sorts the data, fills in missing values using polynomial interpolation, and creates a time series dataset for specific columns. The resulting time series data is saved to a new CSV file.\n    \"\"\"\n    columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n                                'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n                                'relative_humidity_rmax', 'relative_humidity_rmin',\n                                'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\n    # Read the cleaned ready CSV\n    df = pd.read_csv(current_ready_csv_path)\n    df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n    # Function to perform polynomial interpolation and fill in missing values\n    def interpolate_missing_inplace(df, column_name, degree=3):\n        x = df.index\n        y = df[column_name]\n\n        # Create a mask for missing values\n        mask = y > 240\n        # Perform interpolation\n        new_y = np.interp(x, x[~mask], y[~mask])\n\n        if np.any(new_y > 240):\n            raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n        # Replace missing values with interpolated values\n        df[column_name] = new_y\n\n    # Group the data by 'lat' and 'lon' and apply interpolation for each column\n    grouped = df.groupby(['lat', 'lon'])\n    filled_data = pd.DataFrame()\n    for name, group in grouped:\n        print(f\"Start filling missing values for {name}\")\n        new_df = interpolate_missing_inplace(group, 'SWE')\n        filled_data = pd.concat([filled_data, group], axis=0)\n\n    filled_data = filled_data.reset_index()\n\n    if any(filled_data['SWE'] > 240):\n        raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n    # Create a new DataFrame to store the time series data for each location\n    result = pd.DataFrame()\n\n    # Define the number of days to consider (7 days in this case)\n    num_days = 7\n\n    grouped = filled_data.groupby(['lat', 'lon'])\n    for name, group in grouped:\n        group = group.set_index('date')\n        for day in range(1, num_days + 1):\n            for target_col in columns_to_be_time_series:\n                new_column_name = f'{target_col}_{day}'\n                group[new_column_name] = group[target_col].shift(day)\n        result = pd.concat([result, group], axis=0)\n\n    # Reset the index of the result DataFrame\n    result = result.reset_index()\n    result.to_csv(target_time_series_csv_path, index=False)\n    print(f\"New data is saved to {target_time_series_csv_path}\")\n    shutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\n    print(f\"File is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns():\n    \"\"\"\n    Add cumulative columns to the time series dataset.\n\n    This function reads the time series CSV file created by `convert_to_time_series`, calculates cumulative values for specific columns, and saves the data to a new CSV file.\n    \"\"\"\n    columns_to_be_cumulated = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n                            'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n                            'relative_humidity_rmax', 'relative_humidity_rmin',\n                            'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\n    # Read the time series CSV (ensure it was created using `convert_to_time_series` function)\n    df = pd.read_csv(target_time_series_csv_path)\n    print(df.head())\n\n    # TODO: Calculate and add cumulative values for specified columns\n\n# Uncomment this line to execute the 'convert_to_time_series' function\n# convert_to_time_series()\n\n# Uncomment this line to execute the 'add_cumulative_columns' function\nadd_cumulative_columns()\n",
  "history_output" : "today date = 2023-11-08\ntest start date:  2018-01-01\ntest end date:  2023-11-08\n/home/chetana\n         date  level_0   index        lat         lon  SWE  Flag  swe_value  \\\n0  2019-01-01        0  511662  33.358254 -107.826881  0.0   255        4.7   \n1  2019-01-01        1  511663  33.358254 -107.826881  0.0   255        4.7   \n2  2019-01-01        2  511664  33.358254 -107.826881  0.0   255        4.7   \n3  2019-01-02        3  512553  33.358254 -107.826881  0.0   241        4.6   \n4  2019-01-02        4  512554  33.358254 -107.826881  0.0   241        4.6   \n   Unnamed: 0  air_temperature_tmmn  potential_evapotranspiration  \\\n0      555165                 266.5                           3.0   \n1      557720                 266.5                           2.8   \n2      716495                 266.5                           1.2   \n3      555166                 262.7                           0.8   \n4      557721                 262.7                           0.9   \n   mean_vapor_pressure_deficit  relative_humidity_rmax  \\\n0                         0.23                    41.8   \n1                         0.18                    41.8   \n2                         0.30                    41.8   \n3                         0.31                    48.4   \n4                         0.29                    48.4   \n   relative_humidity_rmin  precipitation_amount  air_temperature_tmmx  \\\n0               16.500000                   0.0                 294.5   \n1               18.800001                   0.0                 296.1   \n2               41.300000                   2.2                 293.5   \n3               10.000000                   0.0                 297.0   \n4               15.800000                   1.2                 295.7   \n   wind_speed  elevation     slope  curvature   aspect  eastness  northness  \\\n0         6.5  2419.5283  51.38327 -2909.2551  276.389 -0.782283   0.110823   \n1         3.9  2419.5283  51.38327 -2909.2551  276.389 -0.782283   0.110823   \n2         1.5  2419.5283  51.38327 -2909.2551  276.389 -0.782283   0.110823   \n3         4.9  2419.5283  51.38327 -2909.2551  276.389 -0.782283   0.110823   \n4         3.6  2419.5283  51.38327 -2909.2551  276.389 -0.782283   0.110823   \n   SWE_1  Flag_1  air_temperature_tmmn_1  potential_evapotranspiration_1  \\\n0    NaN     NaN                     NaN                             NaN   \n1    0.0   255.0                   266.5                             3.0   \n2    0.0   255.0                   266.5                             2.8   \n3    0.0   255.0                   266.5                             1.2   \n4    0.0   241.0                   262.7                             0.8   \n   mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\n0                            NaN                       NaN   \n1                           0.23                      41.8   \n2                           0.18                      41.8   \n3                           0.30                      41.8   \n4                           0.31                      48.4   \n   relative_humidity_rmin_1  precipitation_amount_1  air_temperature_tmmx_1  \\\n0                       NaN                     NaN                     NaN   \n1                 16.500000                     0.0                   294.5   \n2                 18.800001                     0.0                   296.1   \n3                 41.300000                     2.2                   293.5   \n4                 10.000000                     0.0                   297.0   \n   wind_speed_1  SWE_2  Flag_2  air_temperature_tmmn_2  \\\n0           NaN    NaN     NaN                     NaN   \n1           6.5    NaN     NaN                     NaN   \n2           3.9    0.0   255.0                   266.5   \n3           1.5    0.0   255.0                   266.5   \n4           4.9    0.0   255.0                   266.5   \n   potential_evapotranspiration_2  mean_vapor_pressure_deficit_2  \\\n0                             NaN                            NaN   \n1                             NaN                            NaN   \n2                             3.0                           0.23   \n3                             2.8                           0.18   \n4                             1.2                           0.30   \n   relative_humidity_rmax_2  relative_humidity_rmin_2  precipitation_amount_2  \\\n0                       NaN                       NaN                     NaN   \n1                       NaN                       NaN                     NaN   \n2                      41.8                 16.500000                     0.0   \n3                      41.8                 18.800001                     0.0   \n4                      41.8                 41.300000                     2.2   \n   air_temperature_tmmx_2  wind_speed_2  SWE_3  Flag_3  \\\n0                     NaN           NaN    NaN     NaN   \n1                     NaN           NaN    NaN     NaN   \n2                   294.5           6.5    NaN     NaN   \n3                   296.1           3.9    0.0   255.0   \n4                   293.5           1.5    0.0   255.0   \n   air_temperature_tmmn_3  potential_evapotranspiration_3  \\\n0                     NaN                             NaN   \n1                     NaN                             NaN   \n2                     NaN                             NaN   \n3                   266.5                             3.0   \n4                   266.5                             2.8   \n   mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\n0                            NaN                       NaN   \n1                            NaN                       NaN   \n2                            NaN                       NaN   \n3                           0.23                      41.8   \n4                           0.18                      41.8   \n   relative_humidity_rmin_3  precipitation_amount_3  air_temperature_tmmx_3  \\\n0                       NaN                     NaN                     NaN   \n1                       NaN                     NaN                     NaN   \n2                       NaN                     NaN                     NaN   \n3                 16.500000                     0.0                   294.5   \n4                 18.800001                     0.0                   296.1   \n   wind_speed_3  SWE_4  Flag_4  air_temperature_tmmn_4  \\\n0           NaN    NaN     NaN                     NaN   \n1           NaN    NaN     NaN                     NaN   \n2           NaN    NaN     NaN                     NaN   \n3           6.5    NaN     NaN                     NaN   \n4           3.9    0.0   255.0                   266.5   \n   potential_evapotranspiration_4  mean_vapor_pressure_deficit_4  \\\n0                             NaN                            NaN   \n1                             NaN                            NaN   \n2                             NaN                            NaN   \n3                             NaN                            NaN   \n4                             3.0                           0.23   \n   relative_humidity_rmax_4  relative_humidity_rmin_4  precipitation_amount_4  \\\n0                       NaN                       NaN                     NaN   \n1                       NaN                       NaN                     NaN   \n2                       NaN                       NaN                     NaN   \n3                       NaN                       NaN                     NaN   \n4                      41.8                      16.5                     0.0   \n   air_temperature_tmmx_4  wind_speed_4  SWE_5  Flag_5  \\\n0                     NaN           NaN    NaN     NaN   \n1                     NaN           NaN    NaN     NaN   \n2                     NaN           NaN    NaN     NaN   \n3                     NaN           NaN    NaN     NaN   \n4                   294.5           6.5    NaN     NaN   \n   air_temperature_tmmn_5  potential_evapotranspiration_5  \\\n0                     NaN                             NaN   \n1                     NaN                             NaN   \n2                     NaN                             NaN   \n3                     NaN                             NaN   \n4                     NaN                             NaN   \n   mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\n0                            NaN                       NaN   \n1                            NaN                       NaN   \n2                            NaN                       NaN   \n3                            NaN                       NaN   \n4                            NaN                       NaN   \n   relative_humidity_rmin_5  precipitation_amount_5  air_temperature_tmmx_5  \\\n0                       NaN                     NaN                     NaN   \n1                       NaN                     NaN                     NaN   \n2                       NaN                     NaN                     NaN   \n3                       NaN                     NaN                     NaN   \n4                       NaN                     NaN                     NaN   \n   wind_speed_5  SWE_6  Flag_6  air_temperature_tmmn_6  \\\n0           NaN    NaN     NaN                     NaN   \n1           NaN    NaN     NaN                     NaN   \n2           NaN    NaN     NaN                     NaN   \n3           NaN    NaN     NaN                     NaN   \n4           NaN    NaN     NaN                     NaN   \n   potential_evapotranspiration_6  mean_vapor_pressure_deficit_6  \\\n0                             NaN                            NaN   \n1                             NaN                            NaN   \n2                             NaN                            NaN   \n3                             NaN                            NaN   \n4                             NaN                            NaN   \n   relative_humidity_rmax_6  relative_humidity_rmin_6  precipitation_amount_6  \\\n0                       NaN                       NaN                     NaN   \n1                       NaN                       NaN                     NaN   \n2                       NaN                       NaN                     NaN   \n3                       NaN                       NaN                     NaN   \n4                       NaN                       NaN                     NaN   \n   air_temperature_tmmx_6  wind_speed_6  SWE_7  Flag_7  \\\n0                     NaN           NaN    NaN     NaN   \n1                     NaN           NaN    NaN     NaN   \n2                     NaN           NaN    NaN     NaN   \n3                     NaN           NaN    NaN     NaN   \n4                     NaN           NaN    NaN     NaN   \n   air_temperature_tmmn_7  potential_evapotranspiration_7  \\\n0                     NaN                             NaN   \n1                     NaN                             NaN   \n2                     NaN                             NaN   \n3                     NaN                             NaN   \n4                     NaN                             NaN   \n   mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\n0                            NaN                       NaN   \n1                            NaN                       NaN   \n2                            NaN                       NaN   \n3                            NaN                       NaN   \n4                            NaN                       NaN   \n   relative_humidity_rmin_7  precipitation_amount_7  air_temperature_tmmx_7  \\\n0                       NaN                     NaN                     NaN   \n1                       NaN                     NaN                     NaN   \n2                       NaN                     NaN                     NaN   \n3                       NaN                     NaN                     NaN   \n4                       NaN                     NaN                     NaN   \n   wind_speed_7  \n0           NaN  \n1           NaN  \n2           NaN  \n3           NaN  \n4           NaN  \n",
  "history_begin_time" : 1699457799141,
  "history_end_time" : 1699457826880,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "13a6Dyx2IEyi",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\npd.set_option('display.max_columns', None)\n\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\n\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\n\ntarget_time_series_cumulative_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv'\n\ndef array_describe(arr):\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    \n    return stats\n\n\ndef convert_to_time_series():\n  columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n  'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  'relative_humidity_rmax', 'relative_humidity_rmin',\n  'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n  # Read the cleaned ready CSV and DEM slope CSV\n  df = pd.read_csv(current_ready_csv_path)\n  # df['location'] = df['lat'].astype(str) + ',' + df['lon'].astype(str)\n  # unique_location_pairs = df.drop_duplicates(subset='location')[['lat', 'lon']]\n\n  # print(unique_location_pairs)\n  # unique_date = df.drop_duplicates(subset='date')[['date']]\n  # print(unique_date)\n\n  # add a 7 days time series to each row\n  df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n  \n  \n  # fill in the missing values of AMSR and gridMet using polynomial values\n  # Function to perform polynomial interpolation\n  def interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    mask = y > 240\n    # Perform interpolation\n    new_y = np.interp(x, x[~mask], y[~mask])\n    \n    if np.any(new_y > 240):\n      print(\"mask: \", mask)\n      print(\"x[~mask]: \", x[~mask])\n      print(\"y[~mask]: \", y[~mask])\n      print(\"new_y: \", new_y)\n      raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n    # Replace missing values with interpolated values\n    df[column_name] = new_y\n    #print(df[column_name].describe())\n    return df\n    \n\n  # Group by location and apply interpolation for each column\n  # Group the data by 'lat' and 'lon'\n  grouped = df.groupby(['lat', 'lon'])\n  filled_data = pd.DataFrame()\n  for name, group in grouped:\n    print(f\"Start to filling missing values..{name}\")\n    new_df = interpolate_missing_inplace(group, 'SWE')\n    filled_data = pd.concat([filled_data, group], axis=0)\n\n  filled_data = filled_data.reset_index()\n  \n  filled_data.reset_index(inplace=True)\n  \n  if any(filled_data['SWE'] > 240):\n    raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n    \n\n  # Create a new DataFrame to store the time series data for each location\n  result = pd.DataFrame()\n\n  # Define the number of days to consider (7 days in this case)\n  num_days = 7\n  \n  grouped = filled_data.groupby(['lat', 'lon'])\n  for name, group in grouped:\n      group = group.set_index('date')\n      for day in range(1, num_days + 1):\n        for target_col in columns_to_be_time_series:\n          new_column_name = f'{target_col}_{day}'\n          group[new_column_name] = group[target_col].shift(day)\n      result = pd.concat([result, group], axis=0)\n\n  # Reset the index of the result DataFrame\n  result = result.reset_index()\n  result.to_csv(target_time_series_csv_path, index=False)\n  print(f\"new data is saved to {target_time_series_csv_path}\")\n  shutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\n  print(f\"file is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns():\n  columns_to_be_cumulated = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n  'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  'relative_humidity_rmax', 'relative_humidity_rmin',\n  'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n  # read the time series csv. so this function has to be run after the convert_to_time_series function\n  df = pd.read_csv(target_time_series_csv_path)\n  print(df.head())\n  \n  # target_time_series_cumulative_csv_path\n  \n  pass\n  \n\n#convert_to_time_series()\n\nadd_cumulative_columns()\n\n# df = pd.read_csv(target_time_series_csv_path)\n\n# print(df.columns)\n\n# df.head()\n\n# description = df.describe(include='all')\n# # Print the description\n# print(description)\n\n",
  "history_output" : "today date = 2023-11-08\ntest start date:  2018-01-01\ntest end date:  2023-11-08\n/home/chetana\n         date  level_0   index        lat         lon  SWE  Flag  swe_value  \\\n0  2019-01-01        0  511662  33.358254 -107.826881  0.0   255        4.7   \n1  2019-01-01        1  511663  33.358254 -107.826881  0.0   255        4.7   \n2  2019-01-01        2  511664  33.358254 -107.826881  0.0   255        4.7   \n3  2019-01-02        3  512553  33.358254 -107.826881  0.0   241        4.6   \n4  2019-01-02        4  512554  33.358254 -107.826881  0.0   241        4.6   \n   Unnamed: 0  air_temperature_tmmn  potential_evapotranspiration  \\\n0      555165                 266.5                           3.0   \n1      557720                 266.5                           2.8   \n2      716495                 266.5                           1.2   \n3      555166                 262.7                           0.8   \n4      557721                 262.7                           0.9   \n   mean_vapor_pressure_deficit  relative_humidity_rmax  \\\n0                         0.23                    41.8   \n1                         0.18                    41.8   \n2                         0.30                    41.8   \n3                         0.31                    48.4   \n4                         0.29                    48.4   \n   relative_humidity_rmin  precipitation_amount  air_temperature_tmmx  \\\n0               16.500000                   0.0                 294.5   \n1               18.800001                   0.0                 296.1   \n2               41.300000                   2.2                 293.5   \n3               10.000000                   0.0                 297.0   \n4               15.800000                   1.2                 295.7   \n   wind_speed  elevation     slope  curvature   aspect  eastness  northness  \\\n0         6.5  2419.5283  51.38327 -2909.2551  276.389 -0.782283   0.110823   \n1         3.9  2419.5283  51.38327 -2909.2551  276.389 -0.782283   0.110823   \n2         1.5  2419.5283  51.38327 -2909.2551  276.389 -0.782283   0.110823   \n3         4.9  2419.5283  51.38327 -2909.2551  276.389 -0.782283   0.110823   \n4         3.6  2419.5283  51.38327 -2909.2551  276.389 -0.782283   0.110823   \n   SWE_1  Flag_1  air_temperature_tmmn_1  potential_evapotranspiration_1  \\\n0    NaN     NaN                     NaN                             NaN   \n1    0.0   255.0                   266.5                             3.0   \n2    0.0   255.0                   266.5                             2.8   \n3    0.0   255.0                   266.5                             1.2   \n4    0.0   241.0                   262.7                             0.8   \n   mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\n0                            NaN                       NaN   \n1                           0.23                      41.8   \n2                           0.18                      41.8   \n3                           0.30                      41.8   \n4                           0.31                      48.4   \n   relative_humidity_rmin_1  precipitation_amount_1  air_temperature_tmmx_1  \\\n0                       NaN                     NaN                     NaN   \n1                 16.500000                     0.0                   294.5   \n2                 18.800001                     0.0                   296.1   \n3                 41.300000                     2.2                   293.5   \n4                 10.000000                     0.0                   297.0   \n   wind_speed_1  SWE_2  Flag_2  air_temperature_tmmn_2  \\\n0           NaN    NaN     NaN                     NaN   \n1           6.5    NaN     NaN                     NaN   \n2           3.9    0.0   255.0                   266.5   \n3           1.5    0.0   255.0                   266.5   \n4           4.9    0.0   255.0                   266.5   \n   potential_evapotranspiration_2  mean_vapor_pressure_deficit_2  \\\n0                             NaN                            NaN   \n1                             NaN                            NaN   \n2                             3.0                           0.23   \n3                             2.8                           0.18   \n4                             1.2                           0.30   \n   relative_humidity_rmax_2  relative_humidity_rmin_2  precipitation_amount_2  \\\n0                       NaN                       NaN                     NaN   \n1                       NaN                       NaN                     NaN   \n2                      41.8                 16.500000                     0.0   \n3                      41.8                 18.800001                     0.0   \n4                      41.8                 41.300000                     2.2   \n   air_temperature_tmmx_2  wind_speed_2  SWE_3  Flag_3  \\\n0                     NaN           NaN    NaN     NaN   \n1                     NaN           NaN    NaN     NaN   \n2                   294.5           6.5    NaN     NaN   \n3                   296.1           3.9    0.0   255.0   \n4                   293.5           1.5    0.0   255.0   \n   air_temperature_tmmn_3  potential_evapotranspiration_3  \\\n0                     NaN                             NaN   \n1                     NaN                             NaN   \n2                     NaN                             NaN   \n3                   266.5                             3.0   \n4                   266.5                             2.8   \n   mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\n0                            NaN                       NaN   \n1                            NaN                       NaN   \n2                            NaN                       NaN   \n3                           0.23                      41.8   \n4                           0.18                      41.8   \n   relative_humidity_rmin_3  precipitation_amount_3  air_temperature_tmmx_3  \\\n0                       NaN                     NaN                     NaN   \n1                       NaN                     NaN                     NaN   \n2                       NaN                     NaN                     NaN   \n3                 16.500000                     0.0                   294.5   \n4                 18.800001                     0.0                   296.1   \n   wind_speed_3  SWE_4  Flag_4  air_temperature_tmmn_4  \\\n0           NaN    NaN     NaN                     NaN   \n1           NaN    NaN     NaN                     NaN   \n2           NaN    NaN     NaN                     NaN   \n3           6.5    NaN     NaN                     NaN   \n4           3.9    0.0   255.0                   266.5   \n   potential_evapotranspiration_4  mean_vapor_pressure_deficit_4  \\\n0                             NaN                            NaN   \n1                             NaN                            NaN   \n2                             NaN                            NaN   \n3                             NaN                            NaN   \n4                             3.0                           0.23   \n   relative_humidity_rmax_4  relative_humidity_rmin_4  precipitation_amount_4  \\\n0                       NaN                       NaN                     NaN   \n1                       NaN                       NaN                     NaN   \n2                       NaN                       NaN                     NaN   \n3                       NaN                       NaN                     NaN   \n4                      41.8                      16.5                     0.0   \n   air_temperature_tmmx_4  wind_speed_4  SWE_5  Flag_5  \\\n0                     NaN           NaN    NaN     NaN   \n1                     NaN           NaN    NaN     NaN   \n2                     NaN           NaN    NaN     NaN   \n3                     NaN           NaN    NaN     NaN   \n4                   294.5           6.5    NaN     NaN   \n   air_temperature_tmmn_5  potential_evapotranspiration_5  \\\n0                     NaN                             NaN   \n1                     NaN                             NaN   \n2                     NaN                             NaN   \n3                     NaN                             NaN   \n4                     NaN                             NaN   \n   mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\n0                            NaN                       NaN   \n1                            NaN                       NaN   \n2                            NaN                       NaN   \n3                            NaN                       NaN   \n4                            NaN                       NaN   \n   relative_humidity_rmin_5  precipitation_amount_5  air_temperature_tmmx_5  \\\n0                       NaN                     NaN                     NaN   \n1                       NaN                     NaN                     NaN   \n2                       NaN                     NaN                     NaN   \n3                       NaN                     NaN                     NaN   \n4                       NaN                     NaN                     NaN   \n   wind_speed_5  SWE_6  Flag_6  air_temperature_tmmn_6  \\\n0           NaN    NaN     NaN                     NaN   \n1           NaN    NaN     NaN                     NaN   \n2           NaN    NaN     NaN                     NaN   \n3           NaN    NaN     NaN                     NaN   \n4           NaN    NaN     NaN                     NaN   \n   potential_evapotranspiration_6  mean_vapor_pressure_deficit_6  \\\n0                             NaN                            NaN   \n1                             NaN                            NaN   \n2                             NaN                            NaN   \n3                             NaN                            NaN   \n4                             NaN                            NaN   \n   relative_humidity_rmax_6  relative_humidity_rmin_6  precipitation_amount_6  \\\n0                       NaN                       NaN                     NaN   \n1                       NaN                       NaN                     NaN   \n2                       NaN                       NaN                     NaN   \n3                       NaN                       NaN                     NaN   \n4                       NaN                       NaN                     NaN   \n   air_temperature_tmmx_6  wind_speed_6  SWE_7  Flag_7  \\\n0                     NaN           NaN    NaN     NaN   \n1                     NaN           NaN    NaN     NaN   \n2                     NaN           NaN    NaN     NaN   \n3                     NaN           NaN    NaN     NaN   \n4                     NaN           NaN    NaN     NaN   \n   air_temperature_tmmn_7  potential_evapotranspiration_7  \\\n0                     NaN                             NaN   \n1                     NaN                             NaN   \n2                     NaN                             NaN   \n3                     NaN                             NaN   \n4                     NaN                             NaN   \n   mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\n0                            NaN                       NaN   \n1                            NaN                       NaN   \n2                            NaN                       NaN   \n3                            NaN                       NaN   \n4                            NaN                       NaN   \n   relative_humidity_rmin_7  precipitation_amount_7  air_temperature_tmmx_7  \\\n0                       NaN                     NaN                     NaN   \n1                       NaN                     NaN                     NaN   \n2                       NaN                     NaN                     NaN   \n3                       NaN                     NaN                     NaN   \n4                       NaN                     NaN                     NaN   \n   wind_speed_7  \n0           NaN  \n1           NaN  \n2           NaN  \n3           NaN  \n4           NaN  \n",
  "history_begin_time" : 1699404652099,
  "history_end_time" : 1699404670979,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "oq5yVx5g0uVX",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\npd.set_option('display.max_columns', None)\n\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\n\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\n\ndef array_describe(arr):\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    \n    return stats\n\n\ndef convert_to_time_series():\n  columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n  'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  'relative_humidity_rmax', 'relative_humidity_rmin',\n  'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n  # Read the cleaned ready CSV and DEM slope CSV\n  df = pd.read_csv(current_ready_csv_path)\n  # df['location'] = df['lat'].astype(str) + ',' + df['lon'].astype(str)\n  # unique_location_pairs = df.drop_duplicates(subset='location')[['lat', 'lon']]\n\n  # print(unique_location_pairs)\n  # unique_date = df.drop_duplicates(subset='date')[['date']]\n  # print(unique_date)\n\n  # add a 7 days time series to each row\n  df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n  \n  \n  # fill in the missing values of AMSR and gridMet using polynomial values\n  # Function to perform polynomial interpolation\n  def interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    mask = y > 240\n    # Perform interpolation\n    new_y = np.interp(x, x[~mask], y[~mask])\n    \n    if np.any(new_y > 240):\n      print(\"mask: \", mask)\n      print(\"x[~mask]: \", x[~mask])\n      print(\"y[~mask]: \", y[~mask])\n      print(\"new_y: \", new_y)\n      raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n    # Replace missing values with interpolated values\n    df[column_name] = new_y\n    #print(df[column_name].describe())\n    return df\n    \n\n  # Group by location and apply interpolation for each column\n  # Group the data by 'lat' and 'lon'\n  grouped = df.groupby(['lat', 'lon'])\n  filled_data = pd.DataFrame()\n  for name, group in grouped:\n    print(f\"Start to filling missing values..{name}\")\n    new_df = interpolate_missing_inplace(group, 'SWE')\n    filled_data = pd.concat([filled_data, group], axis=0)\n\n  filled_data = filled_data.reset_index()\n  \n  filled_data.reset_index(inplace=True)\n  \n  if any(filled_data['SWE'] > 240):\n    raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n    \n\n  # Create a new DataFrame to store the time series data for each location\n  result = pd.DataFrame()\n\n  # Define the number of days to consider (7 days in this case)\n  num_days = 7\n  \n  grouped = filled_data.groupby(['lat', 'lon'])\n  for name, group in grouped:\n      group = group.set_index('date')\n      for day in range(1, num_days + 1):\n        for target_col in columns_to_be_time_series:\n          new_column_name = f'{target_col}_{day}'\n          group[new_column_name] = group[target_col].shift(day)\n      result = pd.concat([result, group], axis=0)\n\n  # Reset the index of the result DataFrame\n  result = result.reset_index()\n  result.to_csv(target_time_series_csv_path, index=False)\n  print(f\"new data is saved to {target_time_series_csv_path}\")\n  shutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\n  print(f\"file is backed up to {backup_time_series_csv_path}\")\n\ndef add_cumulative_columns():\n  pass\n  \n\nconvert_to_time_series()\n\nadd_cumulative_columns()\n\n# df = pd.read_csv(target_time_series_csv_path)\n\n# print(df.columns)\n\n# df.head()\n\n# description = df.describe(include='all')\n# # Print the description\n# print(description)\n\n",
  "history_output" : "today date = 2023-11-08\ntest start date:  2018-01-01\ntest end date:  2023-11-08\n/home/chetana\nStart to filling missing values..(33.358253500000004, -107.8268805)\nStart to filling missing values..(33.650385, -109.3091005)\nStart to filling missing values..(33.9787815, -109.50673)\nStart to filling missing values..(34.3652575, -111.0069165)\nStart to filling missing values..(34.742577999999995, -111.4111585)\nStart to filling missing values..(34.860599500000006, -111.6087875)\nStart to filling missing values..(34.9710915, -111.509973)\nStart to filling missing values..(35.2356645, -108.2670545)\nStart to filling missing values..(36.002412, -106.5512725)\nStart to filling missing values..(36.125859, -105.5271935)\nStart to filling missing values..(36.3070475, -115.678156)\nStart to filling missing values..(36.314286, -118.6156465)\nStart to filling missing values..(36.3432345, -118.5886975)\nStart to filling missing values..(36.364939, -118.2922535)\nStart to filling missing values..(36.408329, -118.5797145)\nStart to filling missing values..(36.466145, -118.5437815)\nStart to filling missing values..(36.473369000000005, -105.1948165)\nStart to filling missing values..(36.5672195, -118.7683605)\nStart to filling missing values..(36.682572, -118.4270005)\nStart to filling missing values..(36.725784, -118.8402255)\nStart to filling missing values..(36.740183, -118.7054785)\nStart to filling missing values..(36.7833635, -118.4270005)\nStart to filling missing values..(37.006073, -106.2727945)\nStart to filling missing values..(37.0347625, -118.912091)\nStart to filling missing values..(37.0706085, -118.7683605)\nStart to filling missing values..(37.0777755, -106.452458)\nStart to filling missing values..(37.092108, -118.498866)\nStart to filling missing values..(37.156571, -119.1995515)\nStart to filling missing values..(37.1780465, -118.561748)\nStart to filling missing values..(37.19236, -118.9390405)\nStart to filling missing values..(37.2209785, -119.2175185)\nStart to filling missing values..(37.35677, -105.2307495)\nStart to filling missing values..(37.36391, -106.5422895)\nStart to filling missing values..(37.385326, -118.912091)\nStart to filling missing values..(37.4067365, -119.4870125)\nStart to filling missing values..(37.4281405, -106.6231375)\nStart to filling missing values..(37.4495385, -118.7593775)\nStart to filling missing values..(37.4566695, -108.4467175)\nStart to filling missing values..(37.4566695, -108.0155265)\nStart to filling missing values..(37.4709305, -119.2893835)\nStart to filling missing values..(37.4780595, -108.096375)\nStart to filling missing values..(37.492316, -107.7011165)\nStart to filling missing values..(37.4994435, -106.865683)\nStart to filling missing values..(37.527945, -113.0550755)\nStart to filling missing values..(37.5564365, -119.2354845)\nStart to filling missing values..(37.5777975, -112.9023615)\nStart to filling missing values..(37.5991525, -107.2339925)\nStart to filling missing values..(37.6205015, -119.028872)\nStart to filling missing values..(37.634731, -119.0827705)\nStart to filling missing values..(37.641844500000005, -108.0065435)\nStart to filling missing values..(37.6631815, -107.7999305)\nStart to filling missing values..(37.698729, -107.7819645)\nStart to filling missing values..(37.720049, -107.5214535)\nStart to filling missing values..(37.7271545, -119.1366695)\nStart to filling missing values..(37.7271545, -107.2699245)\nStart to filling missing values..(37.7626715, -119.7744735)\nStart to filling missing values..(37.7910725, -108.1772235)\nStart to filling missing values..(37.7910725, -108.0155265)\nStart to filling missing values..(37.798171, -119.1995515)\nStart to filling missing values..(37.833654, -119.4510805)\nStart to filling missing values..(37.833654, -108.2221395)\nStart to filling missing values..(37.8478425, -108.2670545)\nStart to filling missing values..(37.8549355, -107.7280655)\nStart to filling missing values..(37.8549355, -105.4373615)\nStart to filling missing values..(37.862028, -119.6576925)\nStart to filling missing values..(37.8691195, -109.4438475)\nStart to filling missing values..(37.8691195, -106.6051715)\nStart to filling missing values..(37.8762105, -119.3432825)\nStart to filling missing values..(37.89748, -119.2624335)\nStart to filling missing values..(37.89748, -107.7190825)\nStart to filling missing values..(37.932915, -107.2070425)\nStart to filling missing values..(37.9754145, -111.8333665)\nStart to filling missing values..(38.0391175, -119.3073495)\nStart to filling missing values..(38.0603395, -119.6666755)\nStart to filling missing values..(38.152231, -119.6666755)\nStart to filling missing values..(38.1663575, -120.0529515)\nStart to filling missing values..(38.194603, -119.8912545)\nStart to filling missing values..(38.279274, -119.6127765)\nStart to filling missing values..(38.483487, -112.390322)\nStart to filling missing values..(38.4905185, -119.8014235)\nStart to filling missing values..(38.4905185, -106.335677)\nStart to filling missing values..(38.50458, -119.62176)\nStart to filling missing values..(38.708156, -120.0439685)\nStart to filling missing values..(38.708156, -106.4255085)\nStart to filling missing values..(38.8202275, -106.5961885)\nStart to filling missing values..(38.890182, -106.9555145)\nStart to filling missing values..(38.911155, -120.3763445)\nStart to filling missing values..(38.9181445, -120.205665)\nStart to filling missing values..(38.9251335, -119.9182045)\nStart to filling missing values..(38.994985, -106.7578855)\nStart to filling missing values..(39.0229065, -107.9975605)\nStart to filling missing values..(39.0438405, -106.6500875)\nStart to filling missing values..(39.050817, -108.0514595)\nStart to filling missing values..(39.0717425, -107.1531435)\nStart to filling missing values..(39.134482, -111.4381075)\nStart to filling missing values..(39.294562, -106.5512725)\nStart to filling missing values..(39.3015135, -106.1110985)\nStart to filling missing values..(39.322364500000006, -111.4920065)\nStart to filling missing values..(39.357102, -106.0571995)\nStart to filling missing values..(39.3848805, -106.1919465)\nStart to filling missing values..(39.4612125, -105.9134685)\nStart to filling missing values..(39.4889485, -106.1649975)\nStart to filling missing values..(39.495881, -111.7255685)\nStart to filling missing values..(39.565167, -115.8398525)\nStart to filling missing values..(39.5859395, -105.805671)\nStart to filling missing values..(39.599784, -106.51534)\nStart to filling missing values..(39.627465, -105.7787215)\nStart to filling missing values..(39.655135, -105.868553)\nStart to filling missing values..(39.67588, -120.61889)\nStart to filling missing values..(39.67588, -110.4319945)\nStart to filling missing values..(39.7657045, -105.9044855)\nStart to filling missing values..(39.7864165, -120.8794015)\nStart to filling missing values..(39.814023, -121.3195755)\nStart to filling missing values..(39.876097, -107.6023015)\nStart to filling missing values..(39.889883, -111.2494615)\nStart to filling missing values..(40.199347, -105.5990585)\nStart to filling missing values..(40.295338, -111.2584445)\nStart to filling missing values..(40.3569745, -116.8639325)\nStart to filling missing values..(40.3980345, -106.6051715)\nStart to filling missing values..(40.3980345, -105.8505865)\nStart to filling missing values..(40.432232, -105.7338055)\nStart to filling missing values..(40.4937435, -112.6149005)\nStart to filling missing values..(40.5347195, -105.8865195)\nStart to filling missing values..(40.548373, -110.3511465)\nStart to filling missing values..(40.5620235, -111.6537035)\nStart to filling missing values..(40.6779395, -110.9530175)\nStart to filling missing values..(40.739226, -110.6206405)\nStart to filling missing values..(40.780052, -121.7866995)\nStart to filling missing values..(40.7936545, -110.8811525)\nStart to filling missing values..(40.8140545, -106.748902)\nStart to filling missing values..(40.841244, -110.0008035)\nStart to filling missing values..(40.882007, -110.5397925)\nStart to filling missing values..(40.895589, -115.211032)\nStart to filling missing values..(40.936319, -111.8154005)\nStart to filling missing values..(40.943105, -115.094251)\nStart to filling missing values..(41.071904, -106.9465315)\nStart to filling missing values..(41.1666475, -121.9394135)\nStart to filling missing values..(41.2004515, -122.5233185)\nStart to filling missing values..(41.227482, -122.8017965)\nStart to filling missing values..(41.328746, -106.3716095)\nStart to filling missing values..(41.3557235, -111.4830235)\nStart to filling missing values..(41.3557235, -106.2278795)\nStart to filling missing values..(41.4635215, -111.5009895)\nStart to filling missing values..(41.6651605, -115.327813)\nStart to filling missing values..(41.6852895, -111.4201415)\nStart to filling missing values..(41.7791425, -116.0284985)\nStart to filling missing values..(41.8929225, -115.857819)\nStart to filling missing values..(41.9664375, -118.1934385)\nStart to filling missing values..(41.993149, -120.1787155)\nStart to filling missing values..(42.079884500000006, -123.3407855)\nStart to filling missing values..(42.1665015, -114.1959355)\nStart to filling missing values..(42.299527, -110.6745395)\nStart to filling missing values..(42.359297, -111.563872)\nStart to filling missing values..(42.379208, -122.3526385)\nStart to filling missing values..(42.5713525, -108.8419765)\nStart to filling missing values..(42.5713525, -106.0931315)\nStart to filling missing values..(42.696921, -120.798553)\nStart to filling missing values..(42.756312, -118.6875125)\nStart to filling missing values..(42.7629075, -116.8998645)\nStart to filling missing values..(42.7892825, -121.9753465)\nStart to filling missing values..(42.96702, -110.6116575)\nStart to filling missing values..(43.0064475, -109.7582585)\nStart to filling missing values..(43.190109, -122.1370425)\nStart to filling missing values..(43.2686525, -115.3457795)\nStart to filling missing values..(43.275193, -109.4438475)\nStart to filling missing values..(43.3862775, -110.1265675)\nStart to filling missing values..(43.3862775, -109.8750395)\nStart to filling missing values..(43.464568, -107.2429755)\nStart to filling missing values..(43.484125, -114.8247565)\nStart to filling missing values..(43.51019049999999, -121.9753465)\nStart to filling missing values..(43.5687975, -111.213529)\nStart to filling missing values..(43.607837, -113.9264415)\nStart to filling missing values..(43.672847, -109.3809655)\nStart to filling missing values..(43.8221025, -114.267801)\nStart to filling missing values..(43.8998275, -122.029245)\nStart to filling missing values..(43.9386515, -110.4409775)\nStart to filling missing values..(43.9515875, -115.273914)\nStart to filling missing values..(44.164622, -107.1261945)\nStart to filling missing values..(44.2483345, -118.5168325)\nStart to filling missing values..(44.2612025, -119.0198885)\nStart to filling missing values..(44.3768905, -116.3339265)\nStart to filling missing values..(44.415402, -113.3964355)\nStart to filling missing values..(44.4474755, -119.9271875)\nStart to filling missing values..(44.473122, -112.9832105)\nStart to filling missing values..(44.479532, -110.036736)\nStart to filling missing values..(44.581994, -107.1980595)\nStart to filling missing values..(44.5883915, -111.1147145)\nStart to filling missing values..(44.613976, -122.2268745)\nStart to filling missing values..(44.7225845, -110.512843)\nStart to filling missing values..(44.7863765, -111.7076025)\nStart to filling missing values..(44.799126, -107.8448465)\nStart to filling missing values..(44.8055, -109.6594435)\nStart to filling missing values..(44.830989, -118.1844555)\nStart to filling missing values..(44.843729, -114.267801)\nStart to filling missing values..(44.97733, -111.9501475)\nStart to filling missing values..(45.0408405, -121.9304305)\nStart to filling missing values..(45.1042805, -119.4959955)\nStart to filling missing values..(45.186647, -115.9746)\nStart to filling missing values..(45.218295, -110.2343655)\nStart to filling missing values..(45.262572500000005, -117.1693595)\nStart to filling missing values..(45.363648, -118.4629335)\nStart to filling missing values..(45.407812, -112.9562605)\nStart to filling missing values..(45.426729, -121.8585655)\nStart to filling missing values..(45.502333, -110.9620005)\nStart to filling missing values..(45.5966955, -111.9591305)\nStart to filling missing values..(45.621832, -121.7058515)\nStart to filling missing values..(45.6720715, -113.9533905)\nStart to filling missing values..(46.091057500000005, -110.4319945)\nStart to filling missing values..(46.1408745, -114.5013625)\nStart to filling missing values..(46.178208, -121.9304305)\nStart to filling missing values..(46.23416, -117.3939385)\nStart to filling missing values..(46.2403735, -113.7737275)\nStart to filling missing values..(46.3582945, -121.0770305)\nStart to filling missing values..(46.3582945, -112.2645575)\nStart to filling missing values..(46.482148, -110.7104725)\nStart to filling missing values..(46.494518, -115.7949365)\nStart to filling missing values..(46.5625015, -115.2918805)\nStart to filling missing values..(46.624231, -121.382458)\nStart to filling missing values..(46.7843995, -121.7507675)\nStart to filling missing values..(46.79055, -109.5157135)\nStart to filling missing values..(46.8397315, -112.507103)\nStart to filling missing values..(46.913419, -110.8542025)\nStart to filling missing values..(47.0666095, -121.5890705)\nStart to filling missing values..(47.1766355, -114.330683)\nStart to filling missing values..(47.2010545, -121.7777165)\nStart to filling missing values..(47.2742445, -121.3375425)\nStart to filling missing values..(47.347334, -120.681772)\nStart to filling missing values..(47.3595055, -121.5711045)\nStart to filling missing values..(47.456778, -115.7051055)\nStart to filling missing values..(47.7112645, -123.4485835)\nStart to filling missing values..(47.7777115, -121.6968685)\nStart to filling missing values..(47.801853, -123.1251895)\nStart to filling missing values..(47.880235, -117.088511)\nStart to filling missing values..(47.93443, -123.4216335)\nStart to filling missing values..(48.126665, -115.624257)\nStart to filling missing values..(48.1326605, -113.0191425)\nStart to filling missing values..(48.306233500000005, -116.0734145)\nStart to filling missing values..(48.4315575, -113.9354245)\nStart to filling missing values..(48.5208855, -120.735671)\nStart to filling missing values..(48.693141, -121.912464)\nStart to filling missing values..(48.7227805, -120.6548225)\nStart to filling missing values..(48.929770000000005, -121.1938115)\nStart to filling missing values..(48.9710655, -115.9566335)\nnew data is saved to /home/chetana/gridmet_test_run/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv\nfile is backed up to /home/chetana/gridmet_test_run/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv\n",
  "history_begin_time" : 1699403865241,
  "history_end_time" : 1699403980612,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "50jm8pr8jib",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698762678711,
  "history_end_time" : 1698762678711,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "h6i3k8pdkbn",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698762637996,
  "history_end_time" : 1698762637996,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "a2mw7q7uf4b",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698276496969,
  "history_end_time" : 1698276496969,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "jiag9zvcgbk",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698252277370,
  "history_end_time" : 1698252277370,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "smu8nakg36a",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698251392476,
  "history_end_time" : 1698251392476,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "zqz00rri59r",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698228211027,
  "history_end_time" : 1698228211027,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "qpqk7i5s3qe",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698227897149,
  "history_end_time" : 1698227897149,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "hx92jjzew1z",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698163737299,
  "history_end_time" : 1698163737299,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "5bh4jsptvl6",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698163445837,
  "history_end_time" : 1698163445837,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "w3dmeeb2hhw",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698163121550,
  "history_end_time" : 1698163121550,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "z0lon9j8gh6",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698160809418,
  "history_end_time" : 1698160809418,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ikukh68ai87",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698157805198,
  "history_end_time" : 1698157805198,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "piaqei8zorf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698152099760,
  "history_end_time" : 1698152099760,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "obedd4zrwx9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698095495804,
  "history_end_time" : 1698095495804,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "16m3mnghxq3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698075453653,
  "history_end_time" : 1698075453653,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "mxXLuqQG43bY",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\npd.set_option('display.max_columns', None)\n\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\n\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\n\ndef array_describe(arr):\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    \n    return stats\n\ndef convert_to_time_series():\n  columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n  'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  'relative_humidity_rmax', 'relative_humidity_rmin',\n  'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n  # Read the cleaned ready CSV and DEM slope CSV\n  df = pd.read_csv(current_ready_csv_path)\n  # df['location'] = df['lat'].astype(str) + ',' + df['lon'].astype(str)\n  # unique_location_pairs = df.drop_duplicates(subset='location')[['lat', 'lon']]\n\n  # print(unique_location_pairs)\n  # unique_date = df.drop_duplicates(subset='date')[['date']]\n  # print(unique_date)\n\n  # add a 7 days time series to each row\n  df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n  \n  \n  # fill in the missing values of AMSR and gridMet using polynomial values\n  # Function to perform polynomial interpolation\n  def interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    mask = y > 240\n    # Perform interpolation\n    new_y = np.interp(x, x[~mask], y[~mask])\n    \n    if np.any(new_y > 240):\n      print(\"mask: \", mask)\n      print(\"x[~mask]: \", x[~mask])\n      print(\"y[~mask]: \", y[~mask])\n      print(\"new_y: \", new_y)\n      raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n    # Replace missing values with interpolated values\n    df[column_name] = new_y\n    #print(df[column_name].describe())\n    return df\n    \n\n  # Group by location and apply interpolation for each column\n  # Group the data by 'lat' and 'lon'\n  grouped = df.groupby(['lat', 'lon'])\n  filled_data = pd.DataFrame()\n  for name, group in grouped:\n    print(f\"Start to filling missing values..{name}\")\n    new_df = interpolate_missing_inplace(group, 'SWE')\n    filled_data = pd.concat([filled_data, group], axis=0)\n\n  filled_data = filled_data.reset_index()\n  \n  filled_data.reset_index(inplace=True)\n  \n  if any(filled_data['SWE'] > 240):\n    raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n    \n\n  # Create a new DataFrame to store the time series data for each location\n  result = pd.DataFrame()\n\n  # Define the number of days to consider (7 days in this case)\n  num_days = 7\n  \n  grouped = filled_data.groupby(['lat', 'lon'])\n  for name, group in grouped:\n      group = group.set_index('date')\n      for day in range(1, num_days + 1):\n        for target_col in columns_to_be_time_series:\n          new_column_name = f'{target_col}_{day}'\n          group[new_column_name] = group[target_col].shift(day)\n      result = pd.concat([result, group], axis=0)\n\n  # Reset the index of the result DataFrame\n  result = result.reset_index()\n  result.to_csv(target_time_series_csv_path, index=False)\n  print(f\"new data is saved to {target_time_series_csv_path}\")\n  shutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\n  print(f\"file is backed up to {backup_time_series_csv_path}\")\n\n\nconvert_to_time_series()\n\n# df = pd.read_csv(target_time_series_csv_path)\n\n# print(df.columns)\n\n# df.head()\n\n# description = df.describe(include='all')\n# # Print the description\n# print(description)\n\n",
  "history_output" : "today date = 2023-10-16\ntest start date:  2023-05-17\ntest end date:  2023-10-16\n/home/chetana\nStart to filling missing values..(33.358253500000004, -107.8268805)\nStart to filling missing values..(33.650385, -109.3091005)\nStart to filling missing values..(33.9787815, -109.50673)\nStart to filling missing values..(34.3652575, -111.0069165)\nStart to filling missing values..(34.742577999999995, -111.4111585)\nStart to filling missing values..(34.860599500000006, -111.6087875)\nStart to filling missing values..(34.9710915, -111.509973)\nStart to filling missing values..(35.2356645, -108.2670545)\nStart to filling missing values..(36.002412, -106.5512725)\nStart to filling missing values..(36.125859, -105.5271935)\nStart to filling missing values..(36.3070475, -115.678156)\nStart to filling missing values..(36.314286, -118.6156465)\nStart to filling missing values..(36.3432345, -118.5886975)\nStart to filling missing values..(36.364939, -118.2922535)\nStart to filling missing values..(36.408329, -118.5797145)\nStart to filling missing values..(36.466145, -118.5437815)\nStart to filling missing values..(36.473369000000005, -105.1948165)\nStart to filling missing values..(36.5672195, -118.7683605)\nStart to filling missing values..(36.682572, -118.4270005)\nStart to filling missing values..(36.725784, -118.8402255)\nStart to filling missing values..(36.740183, -118.7054785)\nStart to filling missing values..(36.7833635, -118.4270005)\nStart to filling missing values..(37.006073, -106.2727945)\nStart to filling missing values..(37.0347625, -118.912091)\nStart to filling missing values..(37.0706085, -118.7683605)\nStart to filling missing values..(37.0777755, -106.452458)\nStart to filling missing values..(37.092108, -118.498866)\nStart to filling missing values..(37.156571, -119.1995515)\nStart to filling missing values..(37.1780465, -118.561748)\nStart to filling missing values..(37.19236, -118.9390405)\nStart to filling missing values..(37.2209785, -119.2175185)\nStart to filling missing values..(37.35677, -105.2307495)\nStart to filling missing values..(37.36391, -106.5422895)\nStart to filling missing values..(37.385326, -118.912091)\nStart to filling missing values..(37.4067365, -119.4870125)\nStart to filling missing values..(37.4281405, -106.6231375)\nStart to filling missing values..(37.4495385, -118.7593775)\nStart to filling missing values..(37.4566695, -108.4467175)\nStart to filling missing values..(37.4566695, -108.0155265)\nStart to filling missing values..(37.4709305, -119.2893835)\nStart to filling missing values..(37.4780595, -108.096375)\nStart to filling missing values..(37.492316, -107.7011165)\nStart to filling missing values..(37.4994435, -106.865683)\nStart to filling missing values..(37.527945, -113.0550755)\nStart to filling missing values..(37.5564365, -119.2354845)\nStart to filling missing values..(37.5777975, -112.9023615)\nStart to filling missing values..(37.5991525, -107.2339925)\nStart to filling missing values..(37.6205015, -119.028872)\nStart to filling missing values..(37.634731, -119.0827705)\nStart to filling missing values..(37.641844500000005, -108.0065435)\nStart to filling missing values..(37.6631815, -107.7999305)\nStart to filling missing values..(37.698729, -107.7819645)\nStart to filling missing values..(37.720049, -107.5214535)\nStart to filling missing values..(37.7271545, -119.1366695)\nStart to filling missing values..(37.7271545, -107.2699245)\nStart to filling missing values..(37.7626715, -119.7744735)\nStart to filling missing values..(37.7910725, -108.1772235)\nStart to filling missing values..(37.7910725, -108.0155265)\nStart to filling missing values..(37.798171, -119.1995515)\nStart to filling missing values..(37.833654, -119.4510805)\nStart to filling missing values..(37.833654, -108.2221395)\nStart to filling missing values..(37.8478425, -108.2670545)\nStart to filling missing values..(37.8549355, -107.7280655)\nStart to filling missing values..(37.8549355, -105.4373615)\nStart to filling missing values..(37.862028, -119.6576925)\nStart to filling missing values..(37.8691195, -109.4438475)\nStart to filling missing values..(37.8691195, -106.6051715)\nStart to filling missing values..(37.8762105, -119.3432825)\nStart to filling missing values..(37.89748, -119.2624335)\nStart to filling missing values..(37.89748, -107.7190825)\nStart to filling missing values..(37.932915, -107.2070425)\nStart to filling missing values..(37.9754145, -111.8333665)\nStart to filling missing values..(38.0391175, -119.3073495)\nStart to filling missing values..(38.0603395, -119.6666755)\nStart to filling missing values..(38.152231, -119.6666755)\nStart to filling missing values..(38.1663575, -120.0529515)\nStart to filling missing values..(38.194603, -119.8912545)\nStart to filling missing values..(38.279274, -119.6127765)\nStart to filling missing values..(38.483487, -112.390322)\nStart to filling missing values..(38.4905185, -119.8014235)\nStart to filling missing values..(38.4905185, -106.335677)\nStart to filling missing values..(38.50458, -119.62176)\nStart to filling missing values..(38.708156, -120.0439685)\nStart to filling missing values..(38.708156, -106.4255085)\nStart to filling missing values..(38.8202275, -106.5961885)\nStart to filling missing values..(38.890182, -106.9555145)\nStart to filling missing values..(38.911155, -120.3763445)\nStart to filling missing values..(38.9181445, -120.205665)\nStart to filling missing values..(38.9251335, -119.9182045)\nStart to filling missing values..(38.994985, -106.7578855)\nStart to filling missing values..(39.0229065, -107.9975605)\nStart to filling missing values..(39.0438405, -106.6500875)\nStart to filling missing values..(39.050817, -108.0514595)\nStart to filling missing values..(39.0717425, -107.1531435)\nStart to filling missing values..(39.134482, -111.4381075)\nStart to filling missing values..(39.294562, -106.5512725)\nStart to filling missing values..(39.3015135, -106.1110985)\nStart to filling missing values..(39.322364500000006, -111.4920065)\nStart to filling missing values..(39.357102, -106.0571995)\nStart to filling missing values..(39.3848805, -106.1919465)\nStart to filling missing values..(39.4612125, -105.9134685)\nStart to filling missing values..(39.4889485, -106.1649975)\nStart to filling missing values..(39.495881, -111.7255685)\nStart to filling missing values..(39.565167, -115.8398525)\nStart to filling missing values..(39.5859395, -105.805671)\nStart to filling missing values..(39.599784, -106.51534)\nStart to filling missing values..(39.627465, -105.7787215)\nStart to filling missing values..(39.655135, -105.868553)\nStart to filling missing values..(39.67588, -120.61889)\nStart to filling missing values..(39.67588, -110.4319945)\nStart to filling missing values..(39.7657045, -105.9044855)\nStart to filling missing values..(39.7864165, -120.8794015)\nStart to filling missing values..(39.814023, -121.3195755)\nStart to filling missing values..(39.876097, -107.6023015)\nStart to filling missing values..(39.889883, -111.2494615)\nStart to filling missing values..(40.199347, -105.5990585)\nStart to filling missing values..(40.295338, -111.2584445)\nStart to filling missing values..(40.3569745, -116.8639325)\nStart to filling missing values..(40.3980345, -106.6051715)\nStart to filling missing values..(40.3980345, -105.8505865)\nStart to filling missing values..(40.432232, -105.7338055)\nStart to filling missing values..(40.4937435, -112.6149005)\nStart to filling missing values..(40.5347195, -105.8865195)\nStart to filling missing values..(40.548373, -110.3511465)\nStart to filling missing values..(40.5620235, -111.6537035)\nStart to filling missing values..(40.6779395, -110.9530175)\nStart to filling missing values..(40.739226, -110.6206405)\nStart to filling missing values..(40.780052, -121.7866995)\nStart to filling missing values..(40.7936545, -110.8811525)\nStart to filling missing values..(40.8140545, -106.748902)\nStart to filling missing values..(40.841244, -110.0008035)\nStart to filling missing values..(40.882007, -110.5397925)\nStart to filling missing values..(40.895589, -115.211032)\nStart to filling missing values..(40.936319, -111.8154005)\nStart to filling missing values..(40.943105, -115.094251)\nStart to filling missing values..(41.071904, -106.9465315)\nStart to filling missing values..(41.1666475, -121.9394135)\nStart to filling missing values..(41.2004515, -122.5233185)\nStart to filling missing values..(41.227482, -122.8017965)\nStart to filling missing values..(41.328746, -106.3716095)\nStart to filling missing values..(41.3557235, -111.4830235)\nStart to filling missing values..(41.3557235, -106.2278795)\nStart to filling missing values..(41.4635215, -111.5009895)\nStart to filling missing values..(41.6651605, -115.327813)\nStart to filling missing values..(41.6852895, -111.4201415)\nStart to filling missing values..(41.7791425, -116.0284985)\nStart to filling missing values..(41.8929225, -115.857819)\nStart to filling missing values..(41.9664375, -118.1934385)\nStart to filling missing values..(41.993149, -120.1787155)\nStart to filling missing values..(42.079884500000006, -123.3407855)\nStart to filling missing values..(42.1665015, -114.1959355)\nStart to filling missing values..(42.299527, -110.6745395)\nStart to filling missing values..(42.359297, -111.563872)\nStart to filling missing values..(42.379208, -122.3526385)\nStart to filling missing values..(42.5713525, -108.8419765)\nStart to filling missing values..(42.5713525, -106.0931315)\nStart to filling missing values..(42.696921, -120.798553)\nStart to filling missing values..(42.756312, -118.6875125)\nStart to filling missing values..(42.7629075, -116.8998645)\nStart to filling missing values..(42.7892825, -121.9753465)\nStart to filling missing values..(42.96702, -110.6116575)\nStart to filling missing values..(43.0064475, -109.7582585)\nStart to filling missing values..(43.190109, -122.1370425)\nStart to filling missing values..(43.2686525, -115.3457795)\nStart to filling missing values..(43.275193, -109.4438475)\nStart to filling missing values..(43.3862775, -110.1265675)\nStart to filling missing values..(43.3862775, -109.8750395)\nStart to filling missing values..(43.464568, -107.2429755)\nStart to filling missing values..(43.484125, -114.8247565)\nStart to filling missing values..(43.51019049999999, -121.9753465)\nStart to filling missing values..(43.5687975, -111.213529)\nStart to filling missing values..(43.607837, -113.9264415)\nStart to filling missing values..(43.672847, -109.3809655)\nStart to filling missing values..(43.8221025, -114.267801)\nStart to filling missing values..(43.8998275, -122.029245)\nStart to filling missing values..(43.9386515, -110.4409775)\nStart to filling missing values..(43.9515875, -115.273914)\nStart to filling missing values..(44.164622, -107.1261945)\nStart to filling missing values..(44.2483345, -118.5168325)\nStart to filling missing values..(44.2612025, -119.0198885)\nStart to filling missing values..(44.3768905, -116.3339265)\nStart to filling missing values..(44.415402, -113.3964355)\nStart to filling missing values..(44.4474755, -119.9271875)\nStart to filling missing values..(44.473122, -112.9832105)\nStart to filling missing values..(44.479532, -110.036736)\nStart to filling missing values..(44.581994, -107.1980595)\nStart to filling missing values..(44.5883915, -111.1147145)\nStart to filling missing values..(44.613976, -122.2268745)\nStart to filling missing values..(44.7225845, -110.512843)\nStart to filling missing values..(44.7863765, -111.7076025)\nStart to filling missing values..(44.799126, -107.8448465)\nStart to filling missing values..(44.8055, -109.6594435)\nStart to filling missing values..(44.830989, -118.1844555)\nStart to filling missing values..(44.843729, -114.267801)\nStart to filling missing values..(44.97733, -111.9501475)\nStart to filling missing values..(45.0408405, -121.9304305)\nStart to filling missing values..(45.1042805, -119.4959955)\nStart to filling missing values..(45.186647, -115.9746)\nStart to filling missing values..(45.218295, -110.2343655)\nStart to filling missing values..(45.262572500000005, -117.1693595)\nStart to filling missing values..(45.363648, -118.4629335)\nStart to filling missing values..(45.407812, -112.9562605)\nStart to filling missing values..(45.426729, -121.8585655)\nStart to filling missing values..(45.502333, -110.9620005)\nStart to filling missing values..(45.5966955, -111.9591305)\nStart to filling missing values..(45.621832, -121.7058515)\nStart to filling missing values..(45.6720715, -113.9533905)\nStart to filling missing values..(46.091057500000005, -110.4319945)\nStart to filling missing values..(46.1408745, -114.5013625)\nStart to filling missing values..(46.178208, -121.9304305)\nStart to filling missing values..(46.23416, -117.3939385)\nStart to filling missing values..(46.2403735, -113.7737275)\nStart to filling missing values..(46.3582945, -121.0770305)\nStart to filling missing values..(46.3582945, -112.2645575)\nStart to filling missing values..(46.482148, -110.7104725)\nStart to filling missing values..(46.494518, -115.7949365)\nStart to filling missing values..(46.5625015, -115.2918805)\nStart to filling missing values..(46.624231, -121.382458)\nStart to filling missing values..(46.7843995, -121.7507675)\nStart to filling missing values..(46.79055, -109.5157135)\nStart to filling missing values..(46.8397315, -112.507103)\nStart to filling missing values..(46.913419, -110.8542025)\nStart to filling missing values..(47.0666095, -121.5890705)\nStart to filling missing values..(47.1766355, -114.330683)\nStart to filling missing values..(47.2010545, -121.7777165)\nStart to filling missing values..(47.2742445, -121.3375425)\nStart to filling missing values..(47.347334, -120.681772)\nStart to filling missing values..(47.3595055, -121.5711045)\nStart to filling missing values..(47.456778, -115.7051055)\nStart to filling missing values..(47.7112645, -123.4485835)\nStart to filling missing values..(47.7777115, -121.6968685)\nStart to filling missing values..(47.801853, -123.1251895)\nStart to filling missing values..(47.880235, -117.088511)\nStart to filling missing values..(47.93443, -123.4216335)\nStart to filling missing values..(48.126665, -115.624257)\nStart to filling missing values..(48.1326605, -113.0191425)\nStart to filling missing values..(48.306233500000005, -116.0734145)\nStart to filling missing values..(48.4315575, -113.9354245)\nStart to filling missing values..(48.5208855, -120.735671)\nStart to filling missing values..(48.693141, -121.912464)\nStart to filling missing values..(48.7227805, -120.6548225)\nStart to filling missing values..(48.929770000000005, -121.1938115)\nStart to filling missing values..(48.9710655, -115.9566335)\nnew data is saved to /home/chetana/gridmet_test_run/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv\nfile is backed up to /home/chetana/gridmet_test_run/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv\n",
  "history_begin_time" : 1697423286598,
  "history_end_time" : 1697423384665,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "NRInwApxpZLb",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\npd.set_option('display.max_columns', None)\n\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\n\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\n\ndef array_describe(arr):\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    \n    return stats\n\ndef convert_to_time_series():\n  columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n  'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  'relative_humidity_rmax', 'relative_humidity_rmin',\n  'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n  # Read the cleaned ready CSV and DEM slope CSV\n  df = pd.read_csv(current_ready_csv_path)\n  # df['location'] = df['lat'].astype(str) + ',' + df['lon'].astype(str)\n  # unique_location_pairs = df.drop_duplicates(subset='location')[['lat', 'lon']]\n\n  # print(unique_location_pairs)\n  # unique_date = df.drop_duplicates(subset='date')[['date']]\n  # print(unique_date)\n\n  # add a 7 days time series to each row\n  df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n  \n  \n  # fill in the missing values of AMSR and gridMet using polynomial values\n  # Function to perform polynomial interpolation\n  def interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    mask = y > 240\n    # Perform interpolation\n    new_y = np.interp(x, x[~mask], y[~mask])\n    \n    \n    if np.any(new_y > 240):\n      print(\"mask: \", mask)\n      print(\"x[~mask]: \", x[~mask])\n      print(\"y[~mask]: \", y[~mask])\n      print(\"new_y: \", new_y)\n      raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n    # Replace missing values with interpolated values\n    df[column_name] = new_y\n    \n    #print(df[column_name].describe())\n    return df\n    \n\n  # Group by location and apply interpolation for each column\n  # Group the data by 'lat' and 'lon'\n  grouped = df.groupby(['lat', 'lon'])\n  filled_data = pd.DataFrame()\n  for name, group in grouped:\n    print(f\"Start to filling missing values..{name}\")\n    new_df = interpolate_missing_inplace(group, 'SWE')\n    filled_data = pd.concat([filled_data, group], axis=0)\n\n  filled_data = filled_data.reset_index()\n  \n  filled_data.reset_index(inplace=True)\n  \n  print(filled_data.head())\n  \n  if any(filled_data['SWE'] > 240):\n    raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n    \n\n  # Create a new DataFrame to store the time series data for each location\n  result = pd.DataFrame()\n\n  # Define the number of days to consider (7 days in this case)\n  num_days = 7\n  \n  grouped = filled_data.groupby(['lat', 'lon'])\n  for name, group in grouped:\n      group = group.set_index('date')\n      for day in range(1, num_days + 1):\n        for target_col in columns_to_be_time_series:\n          new_column_name = f'{target_col}_{day}'\n          group[new_column_name] = group[target_col].shift(day)\n      result = pd.concat([result, group], axis=0)\n\n  # Reset the index of the result DataFrame\n  result = result.reset_index()\n\n  print(result.describe)\n\n  result.to_csv(target_time_series_csv_path, index=False)\n\n\nconvert_to_time_series()\n\ndf = pd.read_csv(target_time_series_csv_path)\nshutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\nprint(df.columns)\n\ndf.head()\n\ndescription = df.describe(include='all')\n# Print the description\nprint(description)\n\n",
  "history_output" : "today date = 2023-10-16\ntest start date:  2023-05-17\ntest end date:  2023-10-16\n/home/chetana\nStart to filling missing values..(33.358253500000004, -107.8268805)\nStart to filling missing values..(33.650385, -109.3091005)\nStart to filling missing values..(33.9787815, -109.50673)\nStart to filling missing values..(34.3652575, -111.0069165)\nStart to filling missing values..(34.742577999999995, -111.4111585)\nStart to filling missing values..(34.860599500000006, -111.6087875)\nStart to filling missing values..(34.9710915, -111.509973)\nStart to filling missing values..(35.2356645, -108.2670545)\nStart to filling missing values..(36.002412, -106.5512725)\nStart to filling missing values..(36.125859, -105.5271935)\nStart to filling missing values..(36.3070475, -115.678156)\nStart to filling missing values..(36.314286, -118.6156465)\nStart to filling missing values..(36.3432345, -118.5886975)\nStart to filling missing values..(36.364939, -118.2922535)\nStart to filling missing values..(36.408329, -118.5797145)\nStart to filling missing values..(36.466145, -118.5437815)\nStart to filling missing values..(36.473369000000005, -105.1948165)\nStart to filling missing values..(36.5672195, -118.7683605)\nStart to filling missing values..(36.682572, -118.4270005)\nStart to filling missing values..(36.725784, -118.8402255)\nStart to filling missing values..(36.740183, -118.7054785)\nStart to filling missing values..(36.7833635, -118.4270005)\nStart to filling missing values..(37.006073, -106.2727945)\nStart to filling missing values..(37.0347625, -118.912091)\nStart to filling missing values..(37.0706085, -118.7683605)\nStart to filling missing values..(37.0777755, -106.452458)\nStart to filling missing values..(37.092108, -118.498866)\nStart to filling missing values..(37.156571, -119.1995515)\nStart to filling missing values..(37.1780465, -118.561748)\nStart to filling missing values..(37.19236, -118.9390405)\nStart to filling missing values..(37.2209785, -119.2175185)\nStart to filling missing values..(37.35677, -105.2307495)\nStart to filling missing values..(37.36391, -106.5422895)\nStart to filling missing values..(37.385326, -118.912091)\nStart to filling missing values..(37.4067365, -119.4870125)\nStart to filling missing values..(37.4281405, -106.6231375)\nStart to filling missing values..(37.4495385, -118.7593775)\nStart to filling missing values..(37.4566695, -108.4467175)\nStart to filling missing values..(37.4566695, -108.0155265)\nStart to filling missing values..(37.4709305, -119.2893835)\nStart to filling missing values..(37.4780595, -108.096375)\nStart to filling missing values..(37.492316, -107.7011165)\nStart to filling missing values..(37.4994435, -106.865683)\nStart to filling missing values..(37.527945, -113.0550755)\nStart to filling missing values..(37.5564365, -119.2354845)\nStart to filling missing values..(37.5777975, -112.9023615)\nStart to filling missing values..(37.5991525, -107.2339925)\nStart to filling missing values..(37.6205015, -119.028872)\nStart to filling missing values..(37.634731, -119.0827705)\nStart to filling missing values..(37.641844500000005, -108.0065435)\nStart to filling missing values..(37.6631815, -107.7999305)\nStart to filling missing values..(37.698729, -107.7819645)\nStart to filling missing values..(37.720049, -107.5214535)\nStart to filling missing values..(37.7271545, -119.1366695)\nStart to filling missing values..(37.7271545, -107.2699245)\nStart to filling missing values..(37.7626715, -119.7744735)\nStart to filling missing values..(37.7910725, -108.1772235)\nStart to filling missing values..(37.7910725, -108.0155265)\nStart to filling missing values..(37.798171, -119.1995515)\nStart to filling missing values..(37.833654, -119.4510805)\nStart to filling missing values..(37.833654, -108.2221395)\nStart to filling missing values..(37.8478425, -108.2670545)\nStart to filling missing values..(37.8549355, -107.7280655)\nStart to filling missing values..(37.8549355, -105.4373615)\nStart to filling missing values..(37.862028, -119.6576925)\nStart to filling missing values..(37.8691195, -109.4438475)\nStart to filling missing values..(37.8691195, -106.6051715)\nStart to filling missing values..(37.8762105, -119.3432825)\nStart to filling missing values..(37.89748, -119.2624335)\nStart to filling missing values..(37.89748, -107.7190825)\nStart to filling missing values..(37.932915, -107.2070425)\nStart to filling missing values..(37.9754145, -111.8333665)\nStart to filling missing values..(38.0391175, -119.3073495)\nStart to filling missing values..(38.0603395, -119.6666755)\nStart to filling missing values..(38.152231, -119.6666755)\nStart to filling missing values..(38.1663575, -120.0529515)\nStart to filling missing values..(38.194603, -119.8912545)\nStart to filling missing values..(38.279274, -119.6127765)\nStart to filling missing values..(38.483487, -112.390322)\nStart to filling missing values..(38.4905185, -119.8014235)\nStart to filling missing values..(38.4905185, -106.335677)\nStart to filling missing values..(38.50458, -119.62176)\nStart to filling missing values..(38.708156, -120.0439685)\nStart to filling missing values..(38.708156, -106.4255085)\nStart to filling missing values..(38.8202275, -106.5961885)\nStart to filling missing values..(38.890182, -106.9555145)\nStart to filling missing values..(38.911155, -120.3763445)\nStart to filling missing values..(38.9181445, -120.205665)\nStart to filling missing values..(38.9251335, -119.9182045)\nStart to filling missing values..(38.994985, -106.7578855)\nStart to filling missing values..(39.0229065, -107.9975605)\nStart to filling missing values..(39.0438405, -106.6500875)\nStart to filling missing values..(39.050817, -108.0514595)\nStart to filling missing values..(39.0717425, -107.1531435)\nStart to filling missing values..(39.134482, -111.4381075)\nStart to filling missing values..(39.294562, -106.5512725)\nStart to filling missing values..(39.3015135, -106.1110985)\nStart to filling missing values..(39.322364500000006, -111.4920065)\nStart to filling missing values..(39.357102, -106.0571995)\nStart to filling missing values..(39.3848805, -106.1919465)\nStart to filling missing values..(39.4612125, -105.9134685)\nStart to filling missing values..(39.4889485, -106.1649975)\nStart to filling missing values..(39.495881, -111.7255685)\nStart to filling missing values..(39.565167, -115.8398525)\nStart to filling missing values..(39.5859395, -105.805671)\nStart to filling missing values..(39.599784, -106.51534)\nStart to filling missing values..(39.627465, -105.7787215)\nStart to filling missing values..(39.655135, -105.868553)\nStart to filling missing values..(39.67588, -120.61889)\nStart to filling missing values..(39.67588, -110.4319945)\nStart to filling missing values..(39.7657045, -105.9044855)\nStart to filling missing values..(39.7864165, -120.8794015)\nStart to filling missing values..(39.814023, -121.3195755)\nStart to filling missing values..(39.876097, -107.6023015)\nStart to filling missing values..(39.889883, -111.2494615)\nStart to filling missing values..(40.199347, -105.5990585)\nStart to filling missing values..(40.295338, -111.2584445)\nStart to filling missing values..(40.3569745, -116.8639325)\nStart to filling missing values..(40.3980345, -106.6051715)\nStart to filling missing values..(40.3980345, -105.8505865)\nStart to filling missing values..(40.432232, -105.7338055)\nStart to filling missing values..(40.4937435, -112.6149005)\nStart to filling missing values..(40.5347195, -105.8865195)\nStart to filling missing values..(40.548373, -110.3511465)\nStart to filling missing values..(40.5620235, -111.6537035)\nStart to filling missing values..(40.6779395, -110.9530175)\nStart to filling missing values..(40.739226, -110.6206405)\nStart to filling missing values..(40.780052, -121.7866995)\nStart to filling missing values..(40.7936545, -110.8811525)\nStart to filling missing values..(40.8140545, -106.748902)\nStart to filling missing values..(40.841244, -110.0008035)\nStart to filling missing values..(40.882007, -110.5397925)\nStart to filling missing values..(40.895589, -115.211032)\nStart to filling missing values..(40.936319, -111.8154005)\nStart to filling missing values..(40.943105, -115.094251)\nStart to filling missing values..(41.071904, -106.9465315)\nStart to filling missing values..(41.1666475, -121.9394135)\nStart to filling missing values..(41.2004515, -122.5233185)\nStart to filling missing values..(41.227482, -122.8017965)\nStart to filling missing values..(41.328746, -106.3716095)\nStart to filling missing values..(41.3557235, -111.4830235)\nStart to filling missing values..(41.3557235, -106.2278795)\nStart to filling missing values..(41.4635215, -111.5009895)\nStart to filling missing values..(41.6651605, -115.327813)\nStart to filling missing values..(41.6852895, -111.4201415)\nStart to filling missing values..(41.7791425, -116.0284985)\nStart to filling missing values..(41.8929225, -115.857819)\nStart to filling missing values..(41.9664375, -118.1934385)\nStart to filling missing values..(41.993149, -120.1787155)\nStart to filling missing values..(42.079884500000006, -123.3407855)\nStart to filling missing values..(42.1665015, -114.1959355)\nStart to filling missing values..(42.299527, -110.6745395)\nStart to filling missing values..(42.359297, -111.563872)\nStart to filling missing values..(42.379208, -122.3526385)\nStart to filling missing values..(42.5713525, -108.8419765)\nStart to filling missing values..(42.5713525, -106.0931315)\nStart to filling missing values..(42.696921, -120.798553)\nStart to filling missing values..(42.756312, -118.6875125)\nStart to filling missing values..(42.7629075, -116.8998645)\nStart to filling missing values..(42.7892825, -121.9753465)\nStart to filling missing values..(42.96702, -110.6116575)\nStart to filling missing values..(43.0064475, -109.7582585)\nStart to filling missing values..(43.190109, -122.1370425)\nStart to filling missing values..(43.2686525, -115.3457795)\nStart to filling missing values..(43.275193, -109.4438475)\nStart to filling missing values..(43.3862775, -110.1265675)\nStart to filling missing values..(43.3862775, -109.8750395)\nStart to filling missing values..(43.464568, -107.2429755)\nStart to filling missing values..(43.484125, -114.8247565)\nStart to filling missing values..(43.51019049999999, -121.9753465)\nStart to filling missing values..(43.5687975, -111.213529)\nStart to filling missing values..(43.607837, -113.9264415)\nStart to filling missing values..(43.672847, -109.3809655)\nStart to filling missing values..(43.8221025, -114.267801)\nStart to filling missing values..(43.8998275, -122.029245)\nStart to filling missing values..(43.9386515, -110.4409775)\nStart to filling missing values..(43.9515875, -115.273914)\nStart to filling missing values..(44.164622, -107.1261945)\nStart to filling missing values..(44.2483345, -118.5168325)\nStart to filling missing values..(44.2612025, -119.0198885)\nStart to filling missing values..(44.3768905, -116.3339265)\nStart to filling missing values..(44.415402, -113.3964355)\nStart to filling missing values..(44.4474755, -119.9271875)\nStart to filling missing values..(44.473122, -112.9832105)\nStart to filling missing values..(44.479532, -110.036736)\nStart to filling missing values..(44.581994, -107.1980595)\nStart to filling missing values..(44.5883915, -111.1147145)\nStart to filling missing values..(44.613976, -122.2268745)\nStart to filling missing values..(44.7225845, -110.512843)\nStart to filling missing values..(44.7863765, -111.7076025)\nStart to filling missing values..(44.799126, -107.8448465)\nStart to filling missing values..(44.8055, -109.6594435)\nStart to filling missing values..(44.830989, -118.1844555)\nStart to filling missing values..(44.843729, -114.267801)\nStart to filling missing values..(44.97733, -111.9501475)\nStart to filling missing values..(45.0408405, -121.9304305)\nStart to filling missing values..(45.1042805, -119.4959955)\nStart to filling missing values..(45.186647, -115.9746)\nStart to filling missing values..(45.218295, -110.2343655)\nStart to filling missing values..(45.262572500000005, -117.1693595)\nStart to filling missing values..(45.363648, -118.4629335)\nStart to filling missing values..(45.407812, -112.9562605)\nStart to filling missing values..(45.426729, -121.8585655)\nStart to filling missing values..(45.502333, -110.9620005)\nStart to filling missing values..(45.5966955, -111.9591305)\nStart to filling missing values..(45.621832, -121.7058515)\nStart to filling missing values..(45.6720715, -113.9533905)\nStart to filling missing values..(46.091057500000005, -110.4319945)\nStart to filling missing values..(46.1408745, -114.5013625)\nStart to filling missing values..(46.178208, -121.9304305)\nStart to filling missing values..(46.23416, -117.3939385)\nStart to filling missing values..(46.2403735, -113.7737275)\nStart to filling missing values..(46.3582945, -121.0770305)\nStart to filling missing values..(46.3582945, -112.2645575)\nStart to filling missing values..(46.482148, -110.7104725)\nStart to filling missing values..(46.494518, -115.7949365)\nStart to filling missing values..(46.5625015, -115.2918805)\nStart to filling missing values..(46.624231, -121.382458)\nStart to filling missing values..(46.7843995, -121.7507675)\nStart to filling missing values..(46.79055, -109.5157135)\nStart to filling missing values..(46.8397315, -112.507103)\nStart to filling missing values..(46.913419, -110.8542025)\nStart to filling missing values..(47.0666095, -121.5890705)\nStart to filling missing values..(47.1766355, -114.330683)\nStart to filling missing values..(47.2010545, -121.7777165)\nStart to filling missing values..(47.2742445, -121.3375425)\nStart to filling missing values..(47.347334, -120.681772)\nStart to filling missing values..(47.3595055, -121.5711045)\nStart to filling missing values..(47.456778, -115.7051055)\nStart to filling missing values..(47.7112645, -123.4485835)\nStart to filling missing values..(47.7777115, -121.6968685)\nStart to filling missing values..(47.801853, -123.1251895)\nStart to filling missing values..(47.880235, -117.088511)\nStart to filling missing values..(47.93443, -123.4216335)\nStart to filling missing values..(48.126665, -115.624257)\nStart to filling missing values..(48.1326605, -113.0191425)\nStart to filling missing values..(48.306233500000005, -116.0734145)\nStart to filling missing values..(48.4315575, -113.9354245)\nStart to filling missing values..(48.5208855, -120.735671)\nStart to filling missing values..(48.693141, -121.912464)\nStart to filling missing values..(48.7227805, -120.6548225)\nStart to filling missing values..(48.929770000000005, -121.1938115)\nStart to filling missing values..(48.9710655, -115.9566335)\n   level_0   index        date        lat         lon  SWE  Flag  swe_value  \\\n0        0  511662  2019-01-01  33.358254 -107.826881  0.0   255        4.7   \n1        1  511663  2019-01-01  33.358254 -107.826881  0.0   255        4.7   \n2        2  511664  2019-01-01  33.358254 -107.826881  0.0   255        4.7   \n3        3  512553  2019-01-02  33.358254 -107.826881  0.0   241        4.6   \n4        4  512554  2019-01-02  33.358254 -107.826881  0.0   241        4.6   \n   Unnamed: 0  air_temperature_tmmn  potential_evapotranspiration  \\\n0      555165                 266.5                           3.0   \n1      557720                 266.5                           2.8   \n2      716495                 266.5                           1.2   \n3      555166                 262.7                           0.8   \n4      557721                 262.7                           0.9   \n   mean_vapor_pressure_deficit  relative_humidity_rmax  \\\n0                         0.23                    41.8   \n1                         0.18                    41.8   \n2                         0.30                    41.8   \n3                         0.31                    48.4   \n4                         0.29                    48.4   \n   relative_humidity_rmin  precipitation_amount  air_temperature_tmmx  \\\n0               16.500000                   0.0                 294.5   \n1               18.800001                   0.0                 296.1   \n2               41.300000                   2.2                 293.5   \n3               10.000000                   0.0                 297.0   \n4               15.800000                   1.2                 295.7   \n   wind_speed  elevation     slope  curvature   aspect  eastness  northness  \n0         6.5  2419.5283  51.38327 -2909.2551  276.389 -0.782283   0.110823  \n1         3.9  2419.5283  51.38327 -2909.2551  276.389 -0.782283   0.110823  \n2         1.5  2419.5283  51.38327 -2909.2551  276.389 -0.782283   0.110823  \n3         4.9  2419.5283  51.38327 -2909.2551  276.389 -0.782283   0.110823  \n4         3.6  2419.5283  51.38327 -2909.2551  276.389 -0.782283   0.110823  \n<bound method NDFrame.describe of                date  level_0   index        lat         lon  SWE  Flag  \\\n0        2019-01-01        0  511662  33.358254 -107.826881  0.0   255   \n1        2019-01-01        1  511663  33.358254 -107.826881  0.0   255   \n2        2019-01-01        2  511664  33.358254 -107.826881  0.0   255   \n3        2019-01-02        3  512553  33.358254 -107.826881  0.0   241   \n4        2019-01-02        4  512554  33.358254 -107.826881  0.0   241   \n...             ...      ...     ...        ...         ...  ...   ...   \n1022695  2022-12-30  1022695  753091  48.971066 -115.956633  0.0   241   \n1022696  2022-12-30  1022696  753092  48.971066 -115.956633  0.0   241   \n1022697  2022-12-31  1022697  752748  48.971066 -115.956633  0.0   241   \n1022698  2022-12-31  1022698  752749  48.971066 -115.956633  0.0   241   \n1022699  2022-12-31  1022699  752750  48.971066 -115.956633  0.0   241   \n         swe_value  Unnamed: 0  air_temperature_tmmn  \\\n0              4.7      555165                 266.5   \n1              4.7      557720                 266.5   \n2              4.7      716495                 266.5   \n3              4.6      555166                 262.7   \n4              4.6      557721                 262.7   \n...            ...         ...                   ...   \n1022695        NaN      253673                 266.5   \n1022696        NaN       48543                 266.5   \n1022697        NaN      244184                 267.1   \n1022698        NaN      253674                 267.1   \n1022699        NaN       48544                 267.1   \n         potential_evapotranspiration  mean_vapor_pressure_deficit  \\\n0                                 3.0                         0.23   \n1                                 2.8                         0.18   \n2                                 1.2                         0.30   \n3                                 0.8                         0.31   \n4                                 0.9                         0.29   \n...                               ...                          ...   \n1022695                           0.9                         0.00   \n1022696                           6.6                         0.00   \n1022697                           3.3                         0.00   \n1022698                           0.2                         0.00   \n1022699                           5.2                         0.00   \n         relative_humidity_rmax  relative_humidity_rmin  precipitation_amount  \\\n0                          41.8               16.500000                   0.0   \n1                          41.8               18.800001                   0.0   \n2                          41.8               41.300000                   2.2   \n3                          48.4               10.000000                   0.0   \n4                          48.4               15.800000                   1.2   \n...                         ...                     ...                   ...   \n1022695                    94.1               54.900000                   0.0   \n1022696                    94.1               54.900000                   0.0   \n1022697                   100.0               62.300000                   3.9   \n1022698                   100.0               62.300000                   3.9   \n1022699                   100.0               62.300000                   3.9   \n         air_temperature_tmmx  wind_speed  elevation     slope   curvature  \\\n0                       294.5         6.5  2419.5283  51.38327  -2909.2551   \n1                       296.1         3.9  2419.5283  51.38327  -2909.2551   \n2                       293.5         1.5  2419.5283  51.38327  -2909.2551   \n3                       297.0         4.9  2419.5283  51.38327  -2909.2551   \n4                       295.7         3.6  2419.5283  51.38327  -2909.2551   \n...                       ...         ...        ...       ...         ...   \n1022695                 268.7         1.9  1756.9988  60.60032 -11614.7705   \n1022696                 268.7         1.9  1756.9988  60.60032 -11614.7705   \n1022697                 267.2         1.7  1756.9988  60.60032 -11614.7705   \n1022698                 267.2         1.7  1756.9988  60.60032 -11614.7705   \n1022699                 267.2         1.7  1756.9988  60.60032 -11614.7705   \n            aspect  eastness  northness  SWE_1  Flag_1  \\\n0        276.38900 -0.782283   0.110823    NaN     NaN   \n1        276.38900 -0.782283   0.110823    0.0   255.0   \n2        276.38900 -0.782283   0.110823    0.0   255.0   \n3        276.38900 -0.782283   0.110823    0.0   255.0   \n4        276.38900 -0.782283   0.110823    0.0   241.0   \n...            ...       ...        ...    ...     ...   \n1022695  345.47733 -0.245697   0.769164    0.0   241.0   \n1022696  345.47733 -0.245697   0.769164    0.0   241.0   \n1022697  345.47733 -0.245697   0.769164    0.0   241.0   \n1022698  345.47733 -0.245697   0.769164    0.0   241.0   \n1022699  345.47733 -0.245697   0.769164    0.0   241.0   \n         air_temperature_tmmn_1  potential_evapotranspiration_1  \\\n0                           NaN                             NaN   \n1                         266.5                             3.0   \n2                         266.5                             2.8   \n3                         266.5                             1.2   \n4                         262.7                             0.8   \n...                         ...                             ...   \n1022695                   266.5                             2.9   \n1022696                   266.5                             0.9   \n1022697                   266.5                             6.6   \n1022698                   267.1                             3.3   \n1022699                   267.1                             0.2   \n         mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\n0                                  NaN                       NaN   \n1                                 0.23                      41.8   \n2                                 0.18                      41.8   \n3                                 0.30                      41.8   \n4                                 0.31                      48.4   \n...                                ...                       ...   \n1022695                           0.00                      94.1   \n1022696                           0.00                      94.1   \n1022697                           0.00                      94.1   \n1022698                           0.00                     100.0   \n1022699                           0.00                     100.0   \n         relative_humidity_rmin_1  precipitation_amount_1  \\\n0                             NaN                     NaN   \n1                       16.500000                     0.0   \n2                       18.800001                     0.0   \n3                       41.300000                     2.2   \n4                       10.000000                     0.0   \n...                           ...                     ...   \n1022695                 54.900000                     0.0   \n1022696                 54.900000                     0.0   \n1022697                 54.900000                     0.0   \n1022698                 62.300000                     3.9   \n1022699                 62.300000                     3.9   \n         air_temperature_tmmx_1  wind_speed_1  SWE_2  Flag_2  \\\n0                           NaN           NaN    NaN     NaN   \n1                         294.5           6.5    NaN     NaN   \n2                         296.1           3.9    0.0   255.0   \n3                         293.5           1.5    0.0   255.0   \n4                         297.0           4.9    0.0   255.0   \n...                         ...           ...    ...     ...   \n1022695                   268.7           1.9    0.0   241.0   \n1022696                   268.7           1.9    0.0   241.0   \n1022697                   268.7           1.9    0.0   241.0   \n1022698                   267.2           1.7    0.0   241.0   \n1022699                   267.2           1.7    0.0   241.0   \n         air_temperature_tmmn_2  potential_evapotranspiration_2  \\\n0                           NaN                             NaN   \n1                           NaN                             NaN   \n2                         266.5                             3.0   \n3                         266.5                             2.8   \n4                         266.5                             1.2   \n...                         ...                             ...   \n1022695                   264.6                             6.7   \n1022696                   266.5                             2.9   \n1022697                   266.5                             0.9   \n1022698                   266.5                             6.6   \n1022699                   267.1                             3.3   \n         mean_vapor_pressure_deficit_2  relative_humidity_rmax_2  \\\n0                                  NaN                       NaN   \n1                                  NaN                       NaN   \n2                                 0.23                      41.8   \n3                                 0.18                      41.8   \n4                                 0.30                      41.8   \n...                                ...                       ...   \n1022695                           0.00                     100.0   \n1022696                           0.00                      94.1   \n1022697                           0.00                      94.1   \n1022698                           0.00                      94.1   \n1022699                           0.00                     100.0   \n         relative_humidity_rmin_2  precipitation_amount_2  \\\n0                             NaN                     NaN   \n1                             NaN                     NaN   \n2                       16.500000                     0.0   \n3                       18.800001                     0.0   \n4                       41.300000                     2.2   \n...                           ...                     ...   \n1022695                 68.200005                     2.4   \n1022696                 54.900000                     0.0   \n1022697                 54.900000                     0.0   \n1022698                 54.900000                     0.0   \n1022699                 62.300000                     3.9   \n         air_temperature_tmmx_2  wind_speed_2  SWE_3  Flag_3  \\\n0                           NaN           NaN    NaN     NaN   \n1                           NaN           NaN    NaN     NaN   \n2                         294.5           6.5    NaN     NaN   \n3                         296.1           3.9    0.0   255.0   \n4                         293.5           1.5    0.0   255.0   \n...                         ...           ...    ...     ...   \n1022695                   268.7           2.8    0.0   241.0   \n1022696                   268.7           1.9    0.0   241.0   \n1022697                   268.7           1.9    0.0   241.0   \n1022698                   268.7           1.9    0.0   241.0   \n1022699                   267.2           1.7    0.0   241.0   \n         air_temperature_tmmn_3  potential_evapotranspiration_3  \\\n0                           NaN                             NaN   \n1                           NaN                             NaN   \n2                           NaN                             NaN   \n3                         266.5                             3.0   \n4                         266.5                             2.8   \n...                         ...                             ...   \n1022695                   264.6                             1.2   \n1022696                   264.6                             6.7   \n1022697                   266.5                             2.9   \n1022698                   266.5                             0.9   \n1022699                   266.5                             6.6   \n         mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\n0                                  NaN                       NaN   \n1                                  NaN                       NaN   \n2                                  NaN                       NaN   \n3                                 0.23                      41.8   \n4                                 0.18                      41.8   \n...                                ...                       ...   \n1022695                           0.00                     100.0   \n1022696                           0.00                     100.0   \n1022697                           0.00                      94.1   \n1022698                           0.00                      94.1   \n1022699                           0.00                      94.1   \n         relative_humidity_rmin_3  precipitation_amount_3  \\\n0                             NaN                     NaN   \n1                             NaN                     NaN   \n2                             NaN                     NaN   \n3                       16.500000                     0.0   \n4                       18.800001                     0.0   \n...                           ...                     ...   \n1022695                 68.200005                     2.4   \n1022696                 68.200005                     2.4   \n1022697                 54.900000                     0.0   \n1022698                 54.900000                     0.0   \n1022699                 54.900000                     0.0   \n         air_temperature_tmmx_3  wind_speed_3  SWE_4  Flag_4  \\\n0                           NaN           NaN    NaN     NaN   \n1                           NaN           NaN    NaN     NaN   \n2                           NaN           NaN    NaN     NaN   \n3                         294.5           6.5    NaN     NaN   \n4                         296.1           3.9    0.0   255.0   \n...                         ...           ...    ...     ...   \n1022695                   268.7           2.8    0.0   241.0   \n1022696                   268.7           2.8    0.0   241.0   \n1022697                   268.7           1.9    0.0   241.0   \n1022698                   268.7           1.9    0.0   241.0   \n1022699                   268.7           1.9    0.0   241.0   \n         air_temperature_tmmn_4  potential_evapotranspiration_4  \\\n0                           NaN                             NaN   \n1                           NaN                             NaN   \n2                           NaN                             NaN   \n3                           NaN                             NaN   \n4                         266.5                             3.0   \n...                         ...                             ...   \n1022695                   264.6                             1.5   \n1022696                   264.6                             1.2   \n1022697                   264.6                             6.7   \n1022698                   266.5                             2.9   \n1022699                   266.5                             0.9   \n         mean_vapor_pressure_deficit_4  relative_humidity_rmax_4  \\\n0                                  NaN                       NaN   \n1                                  NaN                       NaN   \n2                                  NaN                       NaN   \n3                                  NaN                       NaN   \n4                                 0.23                      41.8   \n...                                ...                       ...   \n1022695                           0.00                     100.0   \n1022696                           0.00                     100.0   \n1022697                           0.00                     100.0   \n1022698                           0.00                      94.1   \n1022699                           0.00                      94.1   \n         relative_humidity_rmin_4  precipitation_amount_4  \\\n0                             NaN                     NaN   \n1                             NaN                     NaN   \n2                             NaN                     NaN   \n3                             NaN                     NaN   \n4                       16.500000                     0.0   \n...                           ...                     ...   \n1022695                 68.200005                     2.4   \n1022696                 68.200005                     2.4   \n1022697                 68.200005                     2.4   \n1022698                 54.900000                     0.0   \n1022699                 54.900000                     0.0   \n         air_temperature_tmmx_4  wind_speed_4  SWE_5  Flag_5  \\\n0                           NaN           NaN    NaN     NaN   \n1                           NaN           NaN    NaN     NaN   \n2                           NaN           NaN    NaN     NaN   \n3                           NaN           NaN    NaN     NaN   \n4                         294.5           6.5    NaN     NaN   \n...                         ...           ...    ...     ...   \n1022695                   268.7           2.8    0.0   241.0   \n1022696                   268.7           2.8    0.0   241.0   \n1022697                   268.7           2.8    0.0   241.0   \n1022698                   268.7           1.9    0.0   241.0   \n1022699                   268.7           1.9    0.0   241.0   \n         air_temperature_tmmn_5  potential_evapotranspiration_5  \\\n0                           NaN                             NaN   \n1                           NaN                             NaN   \n2                           NaN                             NaN   \n3                           NaN                             NaN   \n4                           NaN                             NaN   \n...                         ...                             ...   \n1022695                   266.2                             6.6   \n1022696                   264.6                             1.5   \n1022697                   264.6                             1.2   \n1022698                   264.6                             6.7   \n1022699                   266.5                             2.9   \n         mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\n0                                  NaN                       NaN   \n1                                  NaN                       NaN   \n2                                  NaN                       NaN   \n3                                  NaN                       NaN   \n4                                  NaN                       NaN   \n...                                ...                       ...   \n1022695                            0.0                     100.0   \n1022696                            0.0                     100.0   \n1022697                            0.0                     100.0   \n1022698                            0.0                     100.0   \n1022699                            0.0                      94.1   \n         relative_humidity_rmin_5  precipitation_amount_5  \\\n0                             NaN                     NaN   \n1                             NaN                     NaN   \n2                             NaN                     NaN   \n3                             NaN                     NaN   \n4                             NaN                     NaN   \n...                           ...                     ...   \n1022695                 77.100000                     0.0   \n1022696                 68.200005                     2.4   \n1022697                 68.200005                     2.4   \n1022698                 68.200005                     2.4   \n1022699                 54.900000                     0.0   \n         air_temperature_tmmx_5  wind_speed_5  SWE_6  Flag_6  \\\n0                           NaN           NaN    NaN     NaN   \n1                           NaN           NaN    NaN     NaN   \n2                           NaN           NaN    NaN     NaN   \n3                           NaN           NaN    NaN     NaN   \n4                           NaN           NaN    NaN     NaN   \n...                         ...           ...    ...     ...   \n1022695                   267.8           3.1    0.0   241.0   \n1022696                   268.7           2.8    0.0   241.0   \n1022697                   268.7           2.8    0.0   241.0   \n1022698                   268.7           2.8    0.0   241.0   \n1022699                   268.7           1.9    0.0   241.0   \n         air_temperature_tmmn_6  potential_evapotranspiration_6  \\\n0                           NaN                             NaN   \n1                           NaN                             NaN   \n2                           NaN                             NaN   \n3                           NaN                             NaN   \n4                           NaN                             NaN   \n...                         ...                             ...   \n1022695                   266.2                             1.1   \n1022696                   266.2                             6.6   \n1022697                   264.6                             1.5   \n1022698                   264.6                             1.2   \n1022699                   264.6                             6.7   \n         mean_vapor_pressure_deficit_6  relative_humidity_rmax_6  \\\n0                                  NaN                       NaN   \n1                                  NaN                       NaN   \n2                                  NaN                       NaN   \n3                                  NaN                       NaN   \n4                                  NaN                       NaN   \n...                                ...                       ...   \n1022695                            0.0                     100.0   \n1022696                            0.0                     100.0   \n1022697                            0.0                     100.0   \n1022698                            0.0                     100.0   \n1022699                            0.0                     100.0   \n         relative_humidity_rmin_6  precipitation_amount_6  \\\n0                             NaN                     NaN   \n1                             NaN                     NaN   \n2                             NaN                     NaN   \n3                             NaN                     NaN   \n4                             NaN                     NaN   \n...                           ...                     ...   \n1022695                 77.100000                     0.0   \n1022696                 77.100000                     0.0   \n1022697                 68.200005                     2.4   \n1022698                 68.200005                     2.4   \n1022699                 68.200005                     2.4   \n         air_temperature_tmmx_6  wind_speed_6  SWE_7  Flag_7  \\\n0                           NaN           NaN    NaN     NaN   \n1                           NaN           NaN    NaN     NaN   \n2                           NaN           NaN    NaN     NaN   \n3                           NaN           NaN    NaN     NaN   \n4                           NaN           NaN    NaN     NaN   \n...                         ...           ...    ...     ...   \n1022695                   267.8           3.1    0.0   241.0   \n1022696                   267.8           3.1    0.0   241.0   \n1022697                   268.7           2.8    0.0   241.0   \n1022698                   268.7           2.8    0.0   241.0   \n1022699                   268.7           2.8    0.0   241.0   \n         air_temperature_tmmn_7  potential_evapotranspiration_7  \\\n0                           NaN                             NaN   \n1                           NaN                             NaN   \n2                           NaN                             NaN   \n3                           NaN                             NaN   \n4                           NaN                             NaN   \n...                         ...                             ...   \n1022695                   266.2                             3.5   \n1022696                   266.2                             1.1   \n1022697                   266.2                             6.6   \n1022698                   264.6                             1.5   \n1022699                   264.6                             1.2   \n         mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\n0                                  NaN                       NaN   \n1                                  NaN                       NaN   \n2                                  NaN                       NaN   \n3                                  NaN                       NaN   \n4                                  NaN                       NaN   \n...                                ...                       ...   \n1022695                            0.0                     100.0   \n1022696                            0.0                     100.0   \n1022697                            0.0                     100.0   \n1022698                            0.0                     100.0   \n1022699                            0.0                     100.0   \n         relative_humidity_rmin_7  precipitation_amount_7  \\\n0                             NaN                     NaN   \n1                             NaN                     NaN   \n2                             NaN                     NaN   \n3                             NaN                     NaN   \n4                             NaN                     NaN   \n...                           ...                     ...   \n1022695                 77.100000                     0.0   \n1022696                 77.100000                     0.0   \n1022697                 77.100000                     0.0   \n1022698                 68.200005                     2.4   \n1022699                 68.200005                     2.4   \n         air_temperature_tmmx_7  wind_speed_7  \n0                           NaN           NaN  \n1                           NaN           NaN  \n2                           NaN           NaN  \n3                           NaN           NaN  \n4                           NaN           NaN  \n...                         ...           ...  \n1022695                   267.8           3.1  \n1022696                   267.8           3.1  \n1022697                   267.8           3.1  \n1022698                   268.7           2.8  \n1022699                   268.7           2.8  \n[1022700 rows x 93 columns]>\nIndex(['date', 'level_0', 'index', 'lat', 'lon', 'SWE', 'Flag', 'swe_value',\n       'Unnamed: 0', 'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'elevation', 'slope', 'curvature',\n       'aspect', 'eastness', 'northness', 'SWE_1', 'Flag_1',\n       'air_temperature_tmmn_1', 'potential_evapotranspiration_1',\n       'mean_vapor_pressure_deficit_1', 'relative_humidity_rmax_1',\n       'relative_humidity_rmin_1', 'precipitation_amount_1',\n       'air_temperature_tmmx_1', 'wind_speed_1', 'SWE_2', 'Flag_2',\n       'air_temperature_tmmn_2', 'potential_evapotranspiration_2',\n       'mean_vapor_pressure_deficit_2', 'relative_humidity_rmax_2',\n       'relative_humidity_rmin_2', 'precipitation_amount_2',\n       'air_temperature_tmmx_2', 'wind_speed_2', 'SWE_3', 'Flag_3',\n       'air_temperature_tmmn_3', 'potential_evapotranspiration_3',\n       'mean_vapor_pressure_deficit_3', 'relative_humidity_rmax_3',\n       'relative_humidity_rmin_3', 'precipitation_amount_3',\n       'air_temperature_tmmx_3', 'wind_speed_3', 'SWE_4', 'Flag_4',\n       'air_temperature_tmmn_4', 'potential_evapotranspiration_4',\n       'mean_vapor_pressure_deficit_4', 'relative_humidity_rmax_4',\n       'relative_humidity_rmin_4', 'precipitation_amount_4',\n       'air_temperature_tmmx_4', 'wind_speed_4', 'SWE_5', 'Flag_5',\n       'air_temperature_tmmn_5', 'potential_evapotranspiration_5',\n       'mean_vapor_pressure_deficit_5', 'relative_humidity_rmax_5',\n       'relative_humidity_rmin_5', 'precipitation_amount_5',\n       'air_temperature_tmmx_5', 'wind_speed_5', 'SWE_6', 'Flag_6',\n       'air_temperature_tmmn_6', 'potential_evapotranspiration_6',\n       'mean_vapor_pressure_deficit_6', 'relative_humidity_rmax_6',\n       'relative_humidity_rmin_6', 'precipitation_amount_6',\n       'air_temperature_tmmx_6', 'wind_speed_6', 'SWE_7', 'Flag_7',\n       'air_temperature_tmmn_7', 'potential_evapotranspiration_7',\n       'mean_vapor_pressure_deficit_7', 'relative_humidity_rmax_7',\n       'relative_humidity_rmin_7', 'precipitation_amount_7',\n       'air_temperature_tmmx_7', 'wind_speed_7'],\n      dtype='object')\n              date       level_0         index           lat           lon  \\\ncount      1022700  1.022700e+06  1.022700e+06  1.022700e+06  1.022700e+06   \nunique        1461           NaN           NaN           NaN           NaN   \ntop     2019-01-01           NaN           NaN           NaN           NaN   \nfreq           700           NaN           NaN           NaN           NaN   \nmean           NaN  5.113495e+05  5.113495e+05  4.165838e+01 -1.141534e+02   \nstd            NaN  2.952282e+05  2.952282e+05  3.632464e+00  5.423376e+00   \nmin            NaN  0.000000e+00  0.000000e+00  3.335825e+01 -1.234486e+02   \n25%            NaN  2.556748e+05  2.556748e+05  3.891814e+01 -1.197812e+02   \n50%            NaN  5.113495e+05  5.113495e+05  4.107190e+01 -1.137737e+02   \n75%            NaN  7.670242e+05  7.670242e+05  4.461398e+01 -1.100367e+02   \nmax            NaN  1.022699e+06  1.022699e+06  4.897107e+01 -1.051948e+02   \n                 SWE          Flag     swe_value    Unnamed: 0  \\\ncount   1.022700e+06  1.022700e+06  1.008700e+06  1.022700e+06   \nunique           NaN           NaN           NaN           NaN   \ntop              NaN           NaN           NaN           NaN   \nfreq             NaN           NaN           NaN           NaN   \nmean    1.136036e+01  2.434436e+02  3.333796e+00  5.113495e+05   \nstd     1.386943e+01  5.313797e+00  5.245389e+00  2.952282e+05   \nmin     0.000000e+00  2.410000e+02  0.000000e+00  0.000000e+00   \n25%     0.000000e+00  2.410000e+02  0.000000e+00  2.556748e+05   \n50%     0.000000e+00  2.410000e+02  0.000000e+00  5.113495e+05   \n75%     2.200000e+01  2.410000e+02  6.300000e+00  7.670242e+05   \nmax     1.096857e+02  2.550000e+02  2.260000e+01  1.022699e+06   \n        air_temperature_tmmn  potential_evapotranspiration  \\\ncount           1.022700e+06                  1.022700e+06   \nunique                   NaN                           NaN   \ntop                      NaN                           NaN   \nfreq                     NaN                           NaN   \nmean            2.720187e+02                  3.943372e+00   \nstd             8.384982e+00                  2.478664e+00   \nmin             2.328000e+02                  0.000000e+00   \n25%             2.663000e+02                  1.900000e+00   \n50%             2.722000e+02                  3.500000e+00   \n75%             2.784000e+02                  5.800000e+00   \nmax             2.983000e+02                  1.510000e+01   \n        mean_vapor_pressure_deficit  relative_humidity_rmax  \\\ncount                  1.022700e+06            1.022700e+06   \nunique                          NaN                     NaN   \ntop                             NaN                     NaN   \nfreq                            NaN                     NaN   \nmean                   6.258550e-01            7.123571e+01   \nstd                    5.233133e-01            2.030150e+01   \nmin                    0.000000e+00            8.200000e+00   \n25%                    2.100000e-01            5.560000e+01   \n50%                    4.700000e-01            7.240000e+01   \n75%                    9.300000e-01            8.820001e+01   \nmax                    3.870000e+00            1.000000e+02   \n        relative_humidity_rmin  precipitation_amount  air_temperature_tmmx  \\\ncount             1.022700e+06          1.022700e+06          1.022700e+06   \nunique                     NaN                   NaN                   NaN   \ntop                        NaN                   NaN                   NaN   \nfreq                       NaN                   NaN                   NaN   \nmean              3.578010e+01          2.689152e+00          2.837481e+02   \nstd               1.888091e+01          7.456402e+00          9.912702e+00   \nmin               1.000000e+00          0.000000e+00          2.444000e+02   \n25%               2.130000e+01          0.000000e+00          2.759000e+02   \n50%               3.160000e+01          0.000000e+00          2.831000e+02   \n75%               4.740000e+01          2.200000e+00          2.920000e+02   \nmax               1.000000e+02          5.042000e+02          3.144000e+02   \n          wind_speed     elevation         slope     curvature        aspect  \\\ncount   1.022700e+06  1.022700e+06  1.022700e+06  1.022700e+06  1.022700e+06   \nunique           NaN           NaN           NaN           NaN           NaN   \ntop              NaN           NaN           NaN           NaN           NaN   \nfreq             NaN           NaN           NaN           NaN           NaN   \nmean    4.214964e+00  2.397170e+03  6.243769e+01 -3.909783e+03  1.722213e+02   \nstd     2.043559e+00  6.647262e+02  1.650521e+01  4.385982e+03  1.031039e+02   \nmin     5.000000e-01  7.584437e+02  4.277402e+00 -1.917768e+04  4.159291e-01   \n25%     2.800000e+00  1.948688e+03  5.213456e+01 -6.479865e+03  9.217068e+01   \n50%     3.700000e+00  2.481006e+03  6.768107e+01 -3.710969e+03  1.691301e+02   \n75%     5.200000e+00  2.895791e+03  7.504661e+01 -5.754078e+02  2.498582e+02   \nmax     1.860000e+01  3.823385e+03  8.368555e+01  9.069726e+03  3.586563e+02   \n            eastness     northness         SWE_1        Flag_1  \\\ncount   1.022700e+06  1.022700e+06  1.022457e+06  1.022457e+06   \nunique           NaN           NaN           NaN           NaN   \ntop              NaN           NaN           NaN           NaN   \nfreq             NaN           NaN           NaN           NaN   \nmean    6.965357e-02 -4.509867e-02  1.135946e+01  2.434439e+02   \nstd     5.171924e-01  6.412035e-01  1.386858e+01  5.314013e+00   \nmin    -7.853438e-01 -7.853694e-01  0.000000e+00  2.410000e+02   \n25%    -3.907275e-01 -7.356204e-01  0.000000e+00  2.410000e+02   \n50%     1.334633e-01 -1.913248e-01  0.000000e+00  2.410000e+02   \n75%     5.767317e-01  6.495535e-01  2.200000e+01  2.410000e+02   \nmax     7.853980e-01  7.853850e-01  1.096857e+02  2.550000e+02   \n        air_temperature_tmmn_1  potential_evapotranspiration_1  \\\ncount             1.022457e+06                    1.022457e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720198e+02                    3.943422e+00   \nstd               8.385519e+00                    2.478670e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\ncount                    1.022457e+06              1.022457e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.259842e-01              7.123178e+01   \nstd                      5.233073e-01              2.030135e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.560000e+01   \n50%                      4.700000e-01              7.240000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_1  precipitation_amount_1  \\\ncount               1.022457e+06            1.022457e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.577455e+01            2.688369e+00   \nstd                 1.887860e+01            7.455937e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.740000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_1  wind_speed_1         SWE_2        Flag_2  \\\ncount             1.022457e+06  1.022457e+06  1.022214e+06  1.022214e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837507e+02  4.214984e+00  1.135967e+01  2.434441e+02   \nstd               9.912255e+00  2.043594e+00  1.386838e+01  5.314206e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  2.200000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  1.096857e+02  2.550000e+02   \n        air_temperature_tmmn_2  potential_evapotranspiration_2  \\\ncount             1.022214e+06                    1.022214e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720209e+02                    3.943420e+00   \nstd               8.385815e+00                    2.478640e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_2  relative_humidity_rmax_2  \\\ncount                    1.022214e+06              1.022214e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.261075e-01              7.122720e+01   \nstd                      5.233070e-01              2.030094e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.560000e+01   \n50%                      4.700000e-01              7.240000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_2  precipitation_amount_2  \\\ncount               1.022214e+06            1.022214e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.576907e+01            2.687716e+00   \nstd                 1.887661e+01            7.456001e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.740000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_2  wind_speed_2         SWE_3        Flag_3  \\\ncount             1.022214e+06  1.022214e+06  1.021971e+06  1.021971e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837536e+02  4.214784e+00  1.135990e+01  2.434443e+02   \nstd               9.911446e+00  2.043331e+00  1.386832e+01  5.314398e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  2.200000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  1.096857e+02  2.550000e+02   \n        air_temperature_tmmn_3  potential_evapotranspiration_3  \\\ncount             1.021971e+06                    1.021971e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720225e+02                    3.943376e+00   \nstd               8.385741e+00                    2.478685e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\ncount                    1.021971e+06              1.021971e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.262307e-01              7.122289e+01   \nstd                      5.233067e-01              2.030066e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.550000e+01   \n50%                      4.700000e-01              7.230000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_3  precipitation_amount_3  \\\ncount               1.021971e+06            1.021971e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.576342e+01            2.686752e+00   \nstd                 1.887456e+01            7.455918e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.730000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_3  wind_speed_3         SWE_4        Flag_4  \\\ncount             1.021971e+06  1.021971e+06  1.021728e+06  1.021728e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837567e+02  4.214625e+00  1.135977e+01  2.434443e+02   \nstd               9.910225e+00  2.043209e+00  1.386802e+01  5.314356e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  2.200000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  1.096857e+02  2.550000e+02   \n        air_temperature_tmmn_4  potential_evapotranspiration_4  \\\ncount             1.021728e+06                    1.021728e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720240e+02                    3.943264e+00   \nstd               8.385866e+00                    2.478656e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_4  relative_humidity_rmax_4  \\\ncount                    1.021728e+06              1.021728e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.263553e-01              7.121851e+01   \nstd                      5.233051e-01              2.030000e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.550000e+01   \n50%                      4.700000e-01              7.230000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_4  precipitation_amount_4  \\\ncount               1.021728e+06            1.021728e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.575787e+01            2.686033e+00   \nstd                 1.887263e+01            7.455973e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.730000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_4  wind_speed_4         SWE_5        Flag_5  \\\ncount             1.021728e+06  1.021728e+06  1.021485e+06  1.021485e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837597e+02  4.214386e+00  1.136011e+01  2.434443e+02   \nstd               9.909216e+00  2.042915e+00  1.386792e+01  5.314338e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  2.200000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  1.096857e+02  2.550000e+02   \n        air_temperature_tmmn_5  potential_evapotranspiration_5  \\\ncount             1.021485e+06                    1.021485e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720251e+02                    3.943198e+00   \nstd               8.386260e+00                    2.478648e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\ncount                    1.021485e+06              1.021485e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.264743e-01              7.121428e+01   \nstd                      5.233079e-01              2.029947e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.550000e+01   \n50%                      4.700000e-01              7.230000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_5  precipitation_amount_5  \\\ncount               1.021485e+06            1.021485e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.575236e+01            2.684510e+00   \nstd                 1.887073e+01            7.454676e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.730000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_5  wind_speed_5         SWE_6        Flag_6  \\\ncount             1.021485e+06  1.021485e+06  1.021242e+06  1.021242e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837628e+02  4.213888e+00  1.136056e+01  2.434440e+02   \nstd               9.908198e+00  2.042324e+00  1.386792e+01  5.314084e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  2.200000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  1.096857e+02  2.550000e+02   \n        air_temperature_tmmn_6  potential_evapotranspiration_6  \\\ncount             1.021242e+06                    1.021242e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720261e+02                    3.943110e+00   \nstd               8.386646e+00                    2.478642e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_6  relative_humidity_rmax_6  \\\ncount                    1.021242e+06              1.021242e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.265698e-01              7.120906e+01   \nstd                      5.233230e-01              2.029860e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.550000e+01   \n50%                      4.700000e-01              7.230000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_6  precipitation_amount_6  \\\ncount               1.021242e+06            1.021242e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.574670e+01            2.683368e+00   \nstd                 1.886860e+01            7.454296e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.730000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_6  wind_speed_6         SWE_7        Flag_7  \\\ncount             1.021242e+06  1.021242e+06  1.020999e+06  1.020999e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837659e+02  4.213170e+00  1.136047e+01  2.434436e+02   \nstd               9.907047e+00  2.041234e+00  1.386762e+01  5.313772e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  2.200000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  1.096857e+02  2.550000e+02   \n        air_temperature_tmmn_7  potential_evapotranspiration_7  \\\ncount             1.020999e+06                    1.020999e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720272e+02                    3.943113e+00   \nstd               8.386879e+00                    2.478654e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\ncount                    1.020999e+06              1.020999e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.266652e-01              7.120386e+01   \nstd                      5.233356e-01              2.029766e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.550000e+01   \n50%                      4.700000e-01              7.230000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_7  precipitation_amount_7  \\\ncount               1.020999e+06            1.020999e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.574126e+01            2.681174e+00   \nstd                 1.886665e+01            7.449998e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.120000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.730000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_7  wind_speed_7  \ncount             1.020999e+06  1.020999e+06  \nunique                     NaN           NaN  \ntop                        NaN           NaN  \nfreq                       NaN           NaN  \nmean              2.837691e+02  4.212599e+00  \nstd               9.905842e+00  2.040713e+00  \nmin               2.444000e+02  5.000000e-01  \n25%               2.759000e+02  2.800000e+00  \n50%               2.831000e+02  3.700000e+00  \n75%               2.920000e+02  5.200000e+00  \nmax               3.144000e+02  1.860000e+01  \n",
  "history_begin_time" : 1697422919933,
  "history_end_time" : 1697423026582,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "vpHPArLRd2cS",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\npd.set_option('display.max_columns', None)\n\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\n\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\n\ndef array_describe(arr):\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    \n    return stats\n\ndef convert_to_time_series():\n  columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n  'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  'relative_humidity_rmax', 'relative_humidity_rmin',\n  'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n  # Read the cleaned ready CSV and DEM slope CSV\n  df = pd.read_csv(current_ready_csv_path)\n  # df['location'] = df['lat'].astype(str) + ',' + df['lon'].astype(str)\n  # unique_location_pairs = df.drop_duplicates(subset='location')[['lat', 'lon']]\n\n  # print(unique_location_pairs)\n  # unique_date = df.drop_duplicates(subset='date')[['date']]\n  # print(unique_date)\n\n  # add a 7 days time series to each row\n  df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n  \n  \n  # fill in the missing values of AMSR and gridMet using polynomial values\n  # Function to perform polynomial interpolation\n  def interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    mask = y > 240\n    # Perform interpolation\n    new_y = np.interp(x, x[~mask], y[~mask])\n    \n    \n    if np.any(new_y > 240):\n      print(\"mask: \", mask)\n      print(\"x[~mask]: \", x[~mask])\n      print(\"y[~mask]: \", y[~mask])\n      print(\"new_y: \", new_y)\n      raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n    # Replace missing values with interpolated values\n    df[column_name] = new_y\n    \n    #print(df[column_name].describe())\n    return df\n    \n\n  # Group by location and apply interpolation for each column\n  # Group the data by 'lat' and 'lon'\n  grouped = df.groupby(['lat', 'lon'])\n  filled_data = pd.DataFrame()\n  for name, group in grouped:\n    print(f\"Start to filling missing values..{name}\")\n    new_df = interpolate_missing_inplace(group, 'SWE')\n    filled_data = pd.concat([filled_data, group], axis=0)\n\n  filled_data = filled_data.reset_index()\n  \n  filled_data.reset_index(inplace=True)\n  \n  if any(df['SWE'] > 240):\n    raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n    \n  print(filled_data.head())\n\n  # Create a new DataFrame to store the time series data for each location\n  result = pd.DataFrame()\n\n  # Define the number of days to consider (7 days in this case)\n  num_days = 7\n  \n  grouped = filled_data.groupby(['lat', 'lon'])\n  for name, group in grouped:\n      group = group.set_index('date')\n      for day in range(1, num_days + 1):\n        for target_col in columns_to_be_time_series:\n          new_column_name = f'{target_col}_{day}'\n          group[new_column_name] = group[target_col].shift(day)\n      result = pd.concat([result, group], axis=0)\n\n  # Reset the index of the result DataFrame\n  result = result.reset_index()\n\n  print(result.describe)\n\n  result.to_csv(target_time_series_csv_path, index=False)\n\n\nconvert_to_time_series()\n\ndf = pd.read_csv(target_time_series_csv_path)\nshutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\nprint(df.columns)\n\ndf.head()\n\ndescription = df.describe(include='all')\n# Print the description\nprint(description)\n\n",
  "history_output" : "today date = 2023-10-16\ntest start date:  2023-05-17\ntest end date:  2023-10-16\n/home/chetana\nStart to filling missing values..(33.358253500000004, -107.8268805)\nStart to filling missing values..(33.650385, -109.3091005)\nStart to filling missing values..(33.9787815, -109.50673)\nStart to filling missing values..(34.3652575, -111.0069165)\nStart to filling missing values..(34.742577999999995, -111.4111585)\nStart to filling missing values..(34.860599500000006, -111.6087875)\nStart to filling missing values..(34.9710915, -111.509973)\nStart to filling missing values..(35.2356645, -108.2670545)\nStart to filling missing values..(36.002412, -106.5512725)\nStart to filling missing values..(36.125859, -105.5271935)\nStart to filling missing values..(36.3070475, -115.678156)\nStart to filling missing values..(36.314286, -118.6156465)\nStart to filling missing values..(36.3432345, -118.5886975)\nStart to filling missing values..(36.364939, -118.2922535)\nStart to filling missing values..(36.408329, -118.5797145)\nStart to filling missing values..(36.466145, -118.5437815)\nStart to filling missing values..(36.473369000000005, -105.1948165)\nStart to filling missing values..(36.5672195, -118.7683605)\nStart to filling missing values..(36.682572, -118.4270005)\nStart to filling missing values..(36.725784, -118.8402255)\nStart to filling missing values..(36.740183, -118.7054785)\nStart to filling missing values..(36.7833635, -118.4270005)\nStart to filling missing values..(37.006073, -106.2727945)\nStart to filling missing values..(37.0347625, -118.912091)\nStart to filling missing values..(37.0706085, -118.7683605)\nStart to filling missing values..(37.0777755, -106.452458)\nStart to filling missing values..(37.092108, -118.498866)\nStart to filling missing values..(37.156571, -119.1995515)\nStart to filling missing values..(37.1780465, -118.561748)\nStart to filling missing values..(37.19236, -118.9390405)\nStart to filling missing values..(37.2209785, -119.2175185)\nStart to filling missing values..(37.35677, -105.2307495)\nStart to filling missing values..(37.36391, -106.5422895)\nStart to filling missing values..(37.385326, -118.912091)\nStart to filling missing values..(37.4067365, -119.4870125)\nStart to filling missing values..(37.4281405, -106.6231375)\nStart to filling missing values..(37.4495385, -118.7593775)\nStart to filling missing values..(37.4566695, -108.4467175)\nStart to filling missing values..(37.4566695, -108.0155265)\nStart to filling missing values..(37.4709305, -119.2893835)\nStart to filling missing values..(37.4780595, -108.096375)\nStart to filling missing values..(37.492316, -107.7011165)\nStart to filling missing values..(37.4994435, -106.865683)\nStart to filling missing values..(37.527945, -113.0550755)\nStart to filling missing values..(37.5564365, -119.2354845)\nStart to filling missing values..(37.5777975, -112.9023615)\nStart to filling missing values..(37.5991525, -107.2339925)\nStart to filling missing values..(37.6205015, -119.028872)\nStart to filling missing values..(37.634731, -119.0827705)\nStart to filling missing values..(37.641844500000005, -108.0065435)\nStart to filling missing values..(37.6631815, -107.7999305)\nStart to filling missing values..(37.698729, -107.7819645)\nStart to filling missing values..(37.720049, -107.5214535)\nStart to filling missing values..(37.7271545, -119.1366695)\nStart to filling missing values..(37.7271545, -107.2699245)\nStart to filling missing values..(37.7626715, -119.7744735)\nStart to filling missing values..(37.7910725, -108.1772235)\nStart to filling missing values..(37.7910725, -108.0155265)\nStart to filling missing values..(37.798171, -119.1995515)\nStart to filling missing values..(37.833654, -119.4510805)\nStart to filling missing values..(37.833654, -108.2221395)\nStart to filling missing values..(37.8478425, -108.2670545)\nStart to filling missing values..(37.8549355, -107.7280655)\nStart to filling missing values..(37.8549355, -105.4373615)\nStart to filling missing values..(37.862028, -119.6576925)\nStart to filling missing values..(37.8691195, -109.4438475)\nStart to filling missing values..(37.8691195, -106.6051715)\nStart to filling missing values..(37.8762105, -119.3432825)\nStart to filling missing values..(37.89748, -119.2624335)\nStart to filling missing values..(37.89748, -107.7190825)\nStart to filling missing values..(37.932915, -107.2070425)\nStart to filling missing values..(37.9754145, -111.8333665)\nStart to filling missing values..(38.0391175, -119.3073495)\nStart to filling missing values..(38.0603395, -119.6666755)\nStart to filling missing values..(38.152231, -119.6666755)\nStart to filling missing values..(38.1663575, -120.0529515)\nStart to filling missing values..(38.194603, -119.8912545)\nStart to filling missing values..(38.279274, -119.6127765)\nStart to filling missing values..(38.483487, -112.390322)\nStart to filling missing values..(38.4905185, -119.8014235)\nStart to filling missing values..(38.4905185, -106.335677)\nStart to filling missing values..(38.50458, -119.62176)\nStart to filling missing values..(38.708156, -120.0439685)\nStart to filling missing values..(38.708156, -106.4255085)\nStart to filling missing values..(38.8202275, -106.5961885)\nStart to filling missing values..(38.890182, -106.9555145)\nStart to filling missing values..(38.911155, -120.3763445)\nStart to filling missing values..(38.9181445, -120.205665)\nStart to filling missing values..(38.9251335, -119.9182045)\nStart to filling missing values..(38.994985, -106.7578855)\nStart to filling missing values..(39.0229065, -107.9975605)\nStart to filling missing values..(39.0438405, -106.6500875)\nStart to filling missing values..(39.050817, -108.0514595)\nStart to filling missing values..(39.0717425, -107.1531435)\nStart to filling missing values..(39.134482, -111.4381075)\nStart to filling missing values..(39.294562, -106.5512725)\nStart to filling missing values..(39.3015135, -106.1110985)\nStart to filling missing values..(39.322364500000006, -111.4920065)\nStart to filling missing values..(39.357102, -106.0571995)\nStart to filling missing values..(39.3848805, -106.1919465)\nStart to filling missing values..(39.4612125, -105.9134685)\nStart to filling missing values..(39.4889485, -106.1649975)\nStart to filling missing values..(39.495881, -111.7255685)\nStart to filling missing values..(39.565167, -115.8398525)\nStart to filling missing values..(39.5859395, -105.805671)\nStart to filling missing values..(39.599784, -106.51534)\nStart to filling missing values..(39.627465, -105.7787215)\nStart to filling missing values..(39.655135, -105.868553)\nStart to filling missing values..(39.67588, -120.61889)\nStart to filling missing values..(39.67588, -110.4319945)\nStart to filling missing values..(39.7657045, -105.9044855)\nStart to filling missing values..(39.7864165, -120.8794015)\nStart to filling missing values..(39.814023, -121.3195755)\nStart to filling missing values..(39.876097, -107.6023015)\nStart to filling missing values..(39.889883, -111.2494615)\nStart to filling missing values..(40.199347, -105.5990585)\nStart to filling missing values..(40.295338, -111.2584445)\nStart to filling missing values..(40.3569745, -116.8639325)\nStart to filling missing values..(40.3980345, -106.6051715)\nStart to filling missing values..(40.3980345, -105.8505865)\nStart to filling missing values..(40.432232, -105.7338055)\nStart to filling missing values..(40.4937435, -112.6149005)\nStart to filling missing values..(40.5347195, -105.8865195)\nStart to filling missing values..(40.548373, -110.3511465)\nStart to filling missing values..(40.5620235, -111.6537035)\nStart to filling missing values..(40.6779395, -110.9530175)\nStart to filling missing values..(40.739226, -110.6206405)\nStart to filling missing values..(40.780052, -121.7866995)\nStart to filling missing values..(40.7936545, -110.8811525)\nStart to filling missing values..(40.8140545, -106.748902)\nStart to filling missing values..(40.841244, -110.0008035)\nStart to filling missing values..(40.882007, -110.5397925)\nStart to filling missing values..(40.895589, -115.211032)\nStart to filling missing values..(40.936319, -111.8154005)\nStart to filling missing values..(40.943105, -115.094251)\nStart to filling missing values..(41.071904, -106.9465315)\nStart to filling missing values..(41.1666475, -121.9394135)\nStart to filling missing values..(41.2004515, -122.5233185)\nStart to filling missing values..(41.227482, -122.8017965)\nStart to filling missing values..(41.328746, -106.3716095)\nStart to filling missing values..(41.3557235, -111.4830235)\nStart to filling missing values..(41.3557235, -106.2278795)\nStart to filling missing values..(41.4635215, -111.5009895)\nStart to filling missing values..(41.6651605, -115.327813)\nStart to filling missing values..(41.6852895, -111.4201415)\nStart to filling missing values..(41.7791425, -116.0284985)\nStart to filling missing values..(41.8929225, -115.857819)\nStart to filling missing values..(41.9664375, -118.1934385)\nStart to filling missing values..(41.993149, -120.1787155)\nStart to filling missing values..(42.079884500000006, -123.3407855)\nStart to filling missing values..(42.1665015, -114.1959355)\nStart to filling missing values..(42.299527, -110.6745395)\nStart to filling missing values..(42.359297, -111.563872)\nStart to filling missing values..(42.379208, -122.3526385)\nStart to filling missing values..(42.5713525, -108.8419765)\nStart to filling missing values..(42.5713525, -106.0931315)\nStart to filling missing values..(42.696921, -120.798553)\nStart to filling missing values..(42.756312, -118.6875125)\nStart to filling missing values..(42.7629075, -116.8998645)\nStart to filling missing values..(42.7892825, -121.9753465)\nStart to filling missing values..(42.96702, -110.6116575)\nStart to filling missing values..(43.0064475, -109.7582585)\nStart to filling missing values..(43.190109, -122.1370425)\nStart to filling missing values..(43.2686525, -115.3457795)\nStart to filling missing values..(43.275193, -109.4438475)\nStart to filling missing values..(43.3862775, -110.1265675)\nStart to filling missing values..(43.3862775, -109.8750395)\nStart to filling missing values..(43.464568, -107.2429755)\nStart to filling missing values..(43.484125, -114.8247565)\nStart to filling missing values..(43.51019049999999, -121.9753465)\nStart to filling missing values..(43.5687975, -111.213529)\nStart to filling missing values..(43.607837, -113.9264415)\nStart to filling missing values..(43.672847, -109.3809655)\nStart to filling missing values..(43.8221025, -114.267801)\nStart to filling missing values..(43.8998275, -122.029245)\nStart to filling missing values..(43.9386515, -110.4409775)\nStart to filling missing values..(43.9515875, -115.273914)\nStart to filling missing values..(44.164622, -107.1261945)\nStart to filling missing values..(44.2483345, -118.5168325)\nStart to filling missing values..(44.2612025, -119.0198885)\nStart to filling missing values..(44.3768905, -116.3339265)\nStart to filling missing values..(44.415402, -113.3964355)\nStart to filling missing values..(44.4474755, -119.9271875)\nStart to filling missing values..(44.473122, -112.9832105)\nStart to filling missing values..(44.479532, -110.036736)\nStart to filling missing values..(44.581994, -107.1980595)\nStart to filling missing values..(44.5883915, -111.1147145)\nStart to filling missing values..(44.613976, -122.2268745)\nStart to filling missing values..(44.7225845, -110.512843)\nStart to filling missing values..(44.7863765, -111.7076025)\nStart to filling missing values..(44.799126, -107.8448465)\nStart to filling missing values..(44.8055, -109.6594435)\nStart to filling missing values..(44.830989, -118.1844555)\nStart to filling missing values..(44.843729, -114.267801)\nStart to filling missing values..(44.97733, -111.9501475)\nStart to filling missing values..(45.0408405, -121.9304305)\nStart to filling missing values..(45.1042805, -119.4959955)\nStart to filling missing values..(45.186647, -115.9746)\nStart to filling missing values..(45.218295, -110.2343655)\nStart to filling missing values..(45.262572500000005, -117.1693595)\nStart to filling missing values..(45.363648, -118.4629335)\nStart to filling missing values..(45.407812, -112.9562605)\nStart to filling missing values..(45.426729, -121.8585655)\nStart to filling missing values..(45.502333, -110.9620005)\nStart to filling missing values..(45.5966955, -111.9591305)\nStart to filling missing values..(45.621832, -121.7058515)\nStart to filling missing values..(45.6720715, -113.9533905)\nStart to filling missing values..(46.091057500000005, -110.4319945)\nStart to filling missing values..(46.1408745, -114.5013625)\nStart to filling missing values..(46.178208, -121.9304305)\nStart to filling missing values..(46.23416, -117.3939385)\nStart to filling missing values..(46.2403735, -113.7737275)\nStart to filling missing values..(46.3582945, -121.0770305)\nStart to filling missing values..(46.3582945, -112.2645575)\nStart to filling missing values..(46.482148, -110.7104725)\nStart to filling missing values..(46.494518, -115.7949365)\nStart to filling missing values..(46.5625015, -115.2918805)\nStart to filling missing values..(46.624231, -121.382458)\nStart to filling missing values..(46.7843995, -121.7507675)\nStart to filling missing values..(46.79055, -109.5157135)\nStart to filling missing values..(46.8397315, -112.507103)\nStart to filling missing values..(46.913419, -110.8542025)\nStart to filling missing values..(47.0666095, -121.5890705)\nStart to filling missing values..(47.1766355, -114.330683)\nStart to filling missing values..(47.2010545, -121.7777165)\nStart to filling missing values..(47.2742445, -121.3375425)\nStart to filling missing values..(47.347334, -120.681772)\nStart to filling missing values..(47.3595055, -121.5711045)\nStart to filling missing values..(47.456778, -115.7051055)\nStart to filling missing values..(47.7112645, -123.4485835)\nStart to filling missing values..(47.7777115, -121.6968685)\nStart to filling missing values..(47.801853, -123.1251895)\nStart to filling missing values..(47.880235, -117.088511)\nStart to filling missing values..(47.93443, -123.4216335)\nStart to filling missing values..(48.126665, -115.624257)\nStart to filling missing values..(48.1326605, -113.0191425)\nStart to filling missing values..(48.306233500000005, -116.0734145)\nStart to filling missing values..(48.4315575, -113.9354245)\nStart to filling missing values..(48.5208855, -120.735671)\nStart to filling missing values..(48.693141, -121.912464)\nStart to filling missing values..(48.7227805, -120.6548225)\nStart to filling missing values..(48.929770000000005, -121.1938115)\nStart to filling missing values..(48.9710655, -115.9566335)\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/vpHPArLRd2cS/convert_to_time_series.py\", line 114, in <module>\n    convert_to_time_series()\n  File \"/home/chetana/gw-workspace/vpHPArLRd2cS/convert_to_time_series.py\", line 87, in convert_to_time_series\n    raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\nValueError: Error: shouldn't have SWE>240 at this point\n",
  "history_begin_time" : 1697422872913,
  "history_end_time" : 1697422883601,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "nrFRPggWc3R7",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\npd.set_option('display.max_columns', None)\n\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\n\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\n\ndef array_describe(arr):\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    \n    return stats\n\ndef convert_to_time_series():\n  columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n  'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  'relative_humidity_rmax', 'relative_humidity_rmin',\n  'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n  # Read the cleaned ready CSV and DEM slope CSV\n  df = pd.read_csv(current_ready_csv_path)\n  # df['location'] = df['lat'].astype(str) + ',' + df['lon'].astype(str)\n  # unique_location_pairs = df.drop_duplicates(subset='location')[['lat', 'lon']]\n\n  # print(unique_location_pairs)\n  # unique_date = df.drop_duplicates(subset='date')[['date']]\n  # print(unique_date)\n\n  # add a 7 days time series to each row\n  df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n  \n  \n  # fill in the missing values of AMSR and gridMet using polynomial values\n  # Function to perform polynomial interpolation\n  def interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    mask = y > 240\n    # Perform interpolation\n    new_y = np.interp(x, x[~mask], y[~mask])\n    \n    \n    if np.any(new_y > 240):\n      print(\"mask: \", mask)\n      print(\"x[~mask]: \", x[~mask])\n      print(\"y[~mask]: \", y[~mask])\n      print(\"new_y: \", new_y)\n      raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n    # Replace missing values with interpolated values\n    df[column_name] = new_y\n    \n    #print(df[column_name].describe())\n    \n\n  # Group by location and apply interpolation for each column\n  # Group the data by 'lat' and 'lon'\n  grouped = df.groupby(['lat', 'lon'])\n  for name, group in grouped:\n    print(f\"Start to filling missing values..{name}\")\n    interpolate_missing_inplace(group, 'SWE')\n    #print(\"interpolated group: \", group.describe())\n    #exit(1)\n\n  df.reset_index(inplace=True)\n  \n  if any(df['SWE'] > 240):\n    raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n  # Create a new DataFrame to store the time series data for each location\n  result = pd.DataFrame()\n\n  # Define the number of days to consider (7 days in this case)\n  num_days = 7\n  \n  grouped = df.groupby(['lat', 'lon'])\n  for name, group in grouped:\n      group = group.set_index('date')\n      for day in range(1, num_days + 1):\n        for target_col in columns_to_be_time_series:\n          new_column_name = f'{target_col}_{day}'\n          group[new_column_name] = group[target_col].shift(day)\n      result = pd.concat([result, group], axis=0)\n\n  # Reset the index of the result DataFrame\n  result = result.reset_index()\n\n  print(result.describe)\n\n  result.to_csv(target_time_series_csv_path, index=False)\n\n\nconvert_to_time_series()\n\ndf = pd.read_csv(target_time_series_csv_path)\nshutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\nprint(df.columns)\n\ndf.head()\n\ndescription = df.describe(include='all')\n# Print the description\nprint(description)\n\n",
  "history_output" : "today date = 2023-10-16\ntest start date:  2023-05-17\ntest end date:  2023-10-16\n/home/chetana\nStart to filling missing values..(33.358253500000004, -107.8268805)\nStart to filling missing values..(33.650385, -109.3091005)\nStart to filling missing values..(33.9787815, -109.50673)\nStart to filling missing values..(34.3652575, -111.0069165)\nStart to filling missing values..(34.742577999999995, -111.4111585)\nStart to filling missing values..(34.860599500000006, -111.6087875)\nStart to filling missing values..(34.9710915, -111.509973)\nStart to filling missing values..(35.2356645, -108.2670545)\nStart to filling missing values..(36.002412, -106.5512725)\nStart to filling missing values..(36.125859, -105.5271935)\nStart to filling missing values..(36.3070475, -115.678156)\nStart to filling missing values..(36.314286, -118.6156465)\nStart to filling missing values..(36.3432345, -118.5886975)\nStart to filling missing values..(36.364939, -118.2922535)\nStart to filling missing values..(36.408329, -118.5797145)\nStart to filling missing values..(36.466145, -118.5437815)\nStart to filling missing values..(36.473369000000005, -105.1948165)\nStart to filling missing values..(36.5672195, -118.7683605)\nStart to filling missing values..(36.682572, -118.4270005)\nStart to filling missing values..(36.725784, -118.8402255)\nStart to filling missing values..(36.740183, -118.7054785)\nStart to filling missing values..(36.7833635, -118.4270005)\nStart to filling missing values..(37.006073, -106.2727945)\nStart to filling missing values..(37.0347625, -118.912091)\nStart to filling missing values..(37.0706085, -118.7683605)\nStart to filling missing values..(37.0777755, -106.452458)\nStart to filling missing values..(37.092108, -118.498866)\nStart to filling missing values..(37.156571, -119.1995515)\nStart to filling missing values..(37.1780465, -118.561748)\nStart to filling missing values..(37.19236, -118.9390405)\nStart to filling missing values..(37.2209785, -119.2175185)\nStart to filling missing values..(37.35677, -105.2307495)\nStart to filling missing values..(37.36391, -106.5422895)\nStart to filling missing values..(37.385326, -118.912091)\nStart to filling missing values..(37.4067365, -119.4870125)\nStart to filling missing values..(37.4281405, -106.6231375)\nStart to filling missing values..(37.4495385, -118.7593775)\nStart to filling missing values..(37.4566695, -108.4467175)\nStart to filling missing values..(37.4566695, -108.0155265)\nStart to filling missing values..(37.4709305, -119.2893835)\nStart to filling missing values..(37.4780595, -108.096375)\nStart to filling missing values..(37.492316, -107.7011165)\nStart to filling missing values..(37.4994435, -106.865683)\nStart to filling missing values..(37.527945, -113.0550755)\nStart to filling missing values..(37.5564365, -119.2354845)\nStart to filling missing values..(37.5777975, -112.9023615)\nStart to filling missing values..(37.5991525, -107.2339925)\nStart to filling missing values..(37.6205015, -119.028872)\nStart to filling missing values..(37.634731, -119.0827705)\nStart to filling missing values..(37.641844500000005, -108.0065435)\nStart to filling missing values..(37.6631815, -107.7999305)\nStart to filling missing values..(37.698729, -107.7819645)\nStart to filling missing values..(37.720049, -107.5214535)\nStart to filling missing values..(37.7271545, -119.1366695)\nStart to filling missing values..(37.7271545, -107.2699245)\nStart to filling missing values..(37.7626715, -119.7744735)\nStart to filling missing values..(37.7910725, -108.1772235)\nStart to filling missing values..(37.7910725, -108.0155265)\nStart to filling missing values..(37.798171, -119.1995515)\nStart to filling missing values..(37.833654, -119.4510805)\nStart to filling missing values..(37.833654, -108.2221395)\nStart to filling missing values..(37.8478425, -108.2670545)\nStart to filling missing values..(37.8549355, -107.7280655)\nStart to filling missing values..(37.8549355, -105.4373615)\nStart to filling missing values..(37.862028, -119.6576925)\nStart to filling missing values..(37.8691195, -109.4438475)\nStart to filling missing values..(37.8691195, -106.6051715)\nStart to filling missing values..(37.8762105, -119.3432825)\nStart to filling missing values..(37.89748, -119.2624335)\nStart to filling missing values..(37.89748, -107.7190825)\nStart to filling missing values..(37.932915, -107.2070425)\nStart to filling missing values..(37.9754145, -111.8333665)\nStart to filling missing values..(38.0391175, -119.3073495)\nStart to filling missing values..(38.0603395, -119.6666755)\nStart to filling missing values..(38.152231, -119.6666755)\nStart to filling missing values..(38.1663575, -120.0529515)\nStart to filling missing values..(38.194603, -119.8912545)\nStart to filling missing values..(38.279274, -119.6127765)\nStart to filling missing values..(38.483487, -112.390322)\nStart to filling missing values..(38.4905185, -119.8014235)\nStart to filling missing values..(38.4905185, -106.335677)\nStart to filling missing values..(38.50458, -119.62176)\nStart to filling missing values..(38.708156, -120.0439685)\nStart to filling missing values..(38.708156, -106.4255085)\nStart to filling missing values..(38.8202275, -106.5961885)\nStart to filling missing values..(38.890182, -106.9555145)\nStart to filling missing values..(38.911155, -120.3763445)\nStart to filling missing values..(38.9181445, -120.205665)\nStart to filling missing values..(38.9251335, -119.9182045)\nStart to filling missing values..(38.994985, -106.7578855)\nStart to filling missing values..(39.0229065, -107.9975605)\nStart to filling missing values..(39.0438405, -106.6500875)\nStart to filling missing values..(39.050817, -108.0514595)\nStart to filling missing values..(39.0717425, -107.1531435)\nStart to filling missing values..(39.134482, -111.4381075)\nStart to filling missing values..(39.294562, -106.5512725)\nStart to filling missing values..(39.3015135, -106.1110985)\nStart to filling missing values..(39.322364500000006, -111.4920065)\nStart to filling missing values..(39.357102, -106.0571995)\nStart to filling missing values..(39.3848805, -106.1919465)\nStart to filling missing values..(39.4612125, -105.9134685)\nStart to filling missing values..(39.4889485, -106.1649975)\nStart to filling missing values..(39.495881, -111.7255685)\nStart to filling missing values..(39.565167, -115.8398525)\nStart to filling missing values..(39.5859395, -105.805671)\nStart to filling missing values..(39.599784, -106.51534)\nStart to filling missing values..(39.627465, -105.7787215)\nStart to filling missing values..(39.655135, -105.868553)\nStart to filling missing values..(39.67588, -120.61889)\nStart to filling missing values..(39.67588, -110.4319945)\nStart to filling missing values..(39.7657045, -105.9044855)\nStart to filling missing values..(39.7864165, -120.8794015)\nStart to filling missing values..(39.814023, -121.3195755)\nStart to filling missing values..(39.876097, -107.6023015)\nStart to filling missing values..(39.889883, -111.2494615)\nStart to filling missing values..(40.199347, -105.5990585)\nStart to filling missing values..(40.295338, -111.2584445)\nStart to filling missing values..(40.3569745, -116.8639325)\nStart to filling missing values..(40.3980345, -106.6051715)\nStart to filling missing values..(40.3980345, -105.8505865)\nStart to filling missing values..(40.432232, -105.7338055)\nStart to filling missing values..(40.4937435, -112.6149005)\nStart to filling missing values..(40.5347195, -105.8865195)\nStart to filling missing values..(40.548373, -110.3511465)\nStart to filling missing values..(40.5620235, -111.6537035)\nStart to filling missing values..(40.6779395, -110.9530175)\nStart to filling missing values..(40.739226, -110.6206405)\nStart to filling missing values..(40.780052, -121.7866995)\nStart to filling missing values..(40.7936545, -110.8811525)\nStart to filling missing values..(40.8140545, -106.748902)\nStart to filling missing values..(40.841244, -110.0008035)\nStart to filling missing values..(40.882007, -110.5397925)\nStart to filling missing values..(40.895589, -115.211032)\nStart to filling missing values..(40.936319, -111.8154005)\nStart to filling missing values..(40.943105, -115.094251)\nStart to filling missing values..(41.071904, -106.9465315)\nStart to filling missing values..(41.1666475, -121.9394135)\nStart to filling missing values..(41.2004515, -122.5233185)\nStart to filling missing values..(41.227482, -122.8017965)\nStart to filling missing values..(41.328746, -106.3716095)\nStart to filling missing values..(41.3557235, -111.4830235)\nStart to filling missing values..(41.3557235, -106.2278795)\nStart to filling missing values..(41.4635215, -111.5009895)\nStart to filling missing values..(41.6651605, -115.327813)\nStart to filling missing values..(41.6852895, -111.4201415)\nStart to filling missing values..(41.7791425, -116.0284985)\nStart to filling missing values..(41.8929225, -115.857819)\nStart to filling missing values..(41.9664375, -118.1934385)\nStart to filling missing values..(41.993149, -120.1787155)\nStart to filling missing values..(42.079884500000006, -123.3407855)\nStart to filling missing values..(42.1665015, -114.1959355)\nStart to filling missing values..(42.299527, -110.6745395)\nStart to filling missing values..(42.359297, -111.563872)\nStart to filling missing values..(42.379208, -122.3526385)\nStart to filling missing values..(42.5713525, -108.8419765)\nStart to filling missing values..(42.5713525, -106.0931315)\nStart to filling missing values..(42.696921, -120.798553)\nStart to filling missing values..(42.756312, -118.6875125)\nStart to filling missing values..(42.7629075, -116.8998645)\nStart to filling missing values..(42.7892825, -121.9753465)\nStart to filling missing values..(42.96702, -110.6116575)\nStart to filling missing values..(43.0064475, -109.7582585)\nStart to filling missing values..(43.190109, -122.1370425)\nStart to filling missing values..(43.2686525, -115.3457795)\nStart to filling missing values..(43.275193, -109.4438475)\nStart to filling missing values..(43.3862775, -110.1265675)\nStart to filling missing values..(43.3862775, -109.8750395)\nStart to filling missing values..(43.464568, -107.2429755)\nStart to filling missing values..(43.484125, -114.8247565)\nStart to filling missing values..(43.51019049999999, -121.9753465)\nStart to filling missing values..(43.5687975, -111.213529)\nStart to filling missing values..(43.607837, -113.9264415)\nStart to filling missing values..(43.672847, -109.3809655)\nStart to filling missing values..(43.8221025, -114.267801)\nStart to filling missing values..(43.8998275, -122.029245)\nStart to filling missing values..(43.9386515, -110.4409775)\nStart to filling missing values..(43.9515875, -115.273914)\nStart to filling missing values..(44.164622, -107.1261945)\nStart to filling missing values..(44.2483345, -118.5168325)\nStart to filling missing values..(44.2612025, -119.0198885)\nStart to filling missing values..(44.3768905, -116.3339265)\nStart to filling missing values..(44.415402, -113.3964355)\nStart to filling missing values..(44.4474755, -119.9271875)\nStart to filling missing values..(44.473122, -112.9832105)\nStart to filling missing values..(44.479532, -110.036736)\nStart to filling missing values..(44.581994, -107.1980595)\nStart to filling missing values..(44.5883915, -111.1147145)\nStart to filling missing values..(44.613976, -122.2268745)\nStart to filling missing values..(44.7225845, -110.512843)\nStart to filling missing values..(44.7863765, -111.7076025)\nStart to filling missing values..(44.799126, -107.8448465)\nStart to filling missing values..(44.8055, -109.6594435)\nStart to filling missing values..(44.830989, -118.1844555)\nStart to filling missing values..(44.843729, -114.267801)\nStart to filling missing values..(44.97733, -111.9501475)\nStart to filling missing values..(45.0408405, -121.9304305)\nStart to filling missing values..(45.1042805, -119.4959955)\nStart to filling missing values..(45.186647, -115.9746)\nStart to filling missing values..(45.218295, -110.2343655)\nStart to filling missing values..(45.262572500000005, -117.1693595)\nStart to filling missing values..(45.363648, -118.4629335)\nStart to filling missing values..(45.407812, -112.9562605)\nStart to filling missing values..(45.426729, -121.8585655)\nStart to filling missing values..(45.502333, -110.9620005)\nStart to filling missing values..(45.5966955, -111.9591305)\nStart to filling missing values..(45.621832, -121.7058515)\nStart to filling missing values..(45.6720715, -113.9533905)\nStart to filling missing values..(46.091057500000005, -110.4319945)\nStart to filling missing values..(46.1408745, -114.5013625)\nStart to filling missing values..(46.178208, -121.9304305)\nStart to filling missing values..(46.23416, -117.3939385)\nStart to filling missing values..(46.2403735, -113.7737275)\nStart to filling missing values..(46.3582945, -121.0770305)\nStart to filling missing values..(46.3582945, -112.2645575)\nStart to filling missing values..(46.482148, -110.7104725)\nStart to filling missing values..(46.494518, -115.7949365)\nStart to filling missing values..(46.5625015, -115.2918805)\nStart to filling missing values..(46.624231, -121.382458)\nStart to filling missing values..(46.7843995, -121.7507675)\nStart to filling missing values..(46.79055, -109.5157135)\nStart to filling missing values..(46.8397315, -112.507103)\nStart to filling missing values..(46.913419, -110.8542025)\nStart to filling missing values..(47.0666095, -121.5890705)\nStart to filling missing values..(47.1766355, -114.330683)\nStart to filling missing values..(47.2010545, -121.7777165)\nStart to filling missing values..(47.2742445, -121.3375425)\nStart to filling missing values..(47.347334, -120.681772)\nStart to filling missing values..(47.3595055, -121.5711045)\nStart to filling missing values..(47.456778, -115.7051055)\nStart to filling missing values..(47.7112645, -123.4485835)\nStart to filling missing values..(47.7777115, -121.6968685)\nStart to filling missing values..(47.801853, -123.1251895)\nStart to filling missing values..(47.880235, -117.088511)\nStart to filling missing values..(47.93443, -123.4216335)\nStart to filling missing values..(48.126665, -115.624257)\nStart to filling missing values..(48.1326605, -113.0191425)\nStart to filling missing values..(48.306233500000005, -116.0734145)\nStart to filling missing values..(48.4315575, -113.9354245)\nStart to filling missing values..(48.5208855, -120.735671)\nStart to filling missing values..(48.693141, -121.912464)\nStart to filling missing values..(48.7227805, -120.6548225)\nStart to filling missing values..(48.929770000000005, -121.1938115)\nStart to filling missing values..(48.9710655, -115.9566335)\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/nrFRPggWc3R7/convert_to_time_series.py\", line 109, in <module>\n    convert_to_time_series()\n  File \"/home/chetana/gw-workspace/nrFRPggWc3R7/convert_to_time_series.py\", line 84, in convert_to_time_series\n    raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\nValueError: Error: shouldn't have SWE>240 at this point\n",
  "history_begin_time" : 1697422670213,
  "history_end_time" : 1697422673400,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "fImybZROndSN",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\npd.set_option('display.max_columns', None)\n\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\n\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\n\ndef array_describe(arr):\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    \n    return stats\n\ndef convert_to_time_series():\n  columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n  'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  'relative_humidity_rmax', 'relative_humidity_rmin',\n  'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n  # Read the cleaned ready CSV and DEM slope CSV\n  df = pd.read_csv(current_ready_csv_path)\n  # df['location'] = df['lat'].astype(str) + ',' + df['lon'].astype(str)\n  # unique_location_pairs = df.drop_duplicates(subset='location')[['lat', 'lon']]\n\n  # print(unique_location_pairs)\n  # unique_date = df.drop_duplicates(subset='date')[['date']]\n  # print(unique_date)\n\n  # add a 7 days time series to each row\n  df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n  \n  \n  # fill in the missing values of AMSR and gridMet using polynomial values\n  # Function to perform polynomial interpolation\n  def interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    mask = y > 240\n    #print(\"mask: \", mask)\n    #print(\"x[~mask]: \", x[~mask])\n    #print(\"y[~mask]: \", y[~mask])\n    \n    #y_interp = y.copy()\n\n    # Perform interpolation\n    new_y = np.interp(x, x[~mask], y[~mask])\n    #print(\"new_y: \", new_y)\n    \n    if np.any(new_y > 240):\n      raise ValueError(\"Single group: shouldn't have values > 240 here\")\n\n    # Replace missing values with interpolated values\n    df[column_name] = new_y\n    \n    #print(df[column_name].describe())\n    \n\n  # Group by location and apply interpolation for each column\n  # Group the data by 'lat' and 'lon'\n  grouped = df.groupby(['lat', 'lon'])\n  for name, group in grouped:\n    print(f\"Start to filling missing values..{name}\")\n    interpolate_missing_inplace(group, 'SWE')\n    #print(\"interpolated group: \", group.describe())\n    #exit(1)\n\n  df.reset_index(inplace=True)\n  \n  if any(df['SWE'] > 240):\n    raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n  # Create a new DataFrame to store the time series data for each location\n  result = pd.DataFrame()\n\n  # Define the number of days to consider (7 days in this case)\n  num_days = 7\n  \n  grouped = df.groupby(['lat', 'lon'])\n  for name, group in grouped:\n      group = group.set_index('date')\n      for day in range(1, num_days + 1):\n        for target_col in columns_to_be_time_series:\n          new_column_name = f'{target_col}_{day}'\n          group[new_column_name] = group[target_col].shift(day)\n      result = pd.concat([result, group], axis=0)\n\n  # Reset the index of the result DataFrame\n  result = result.reset_index()\n\n  print(result.describe)\n\n  result.to_csv(target_time_series_csv_path, index=False)\n\n\nconvert_to_time_series()\n\ndf = pd.read_csv(target_time_series_csv_path)\nshutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\nprint(df.columns)\n\ndf.head()\n\ndescription = df.describe(include='all')\n# Print the description\nprint(description)\n\n",
  "history_output" : "today date = 2023-10-16\ntest start date:  2023-05-17\ntest end date:  2023-10-16\n/home/chetana\nStart to filling missing values..(33.358253500000004, -107.8268805)\nStart to filling missing values..(33.650385, -109.3091005)\nStart to filling missing values..(33.9787815, -109.50673)\nStart to filling missing values..(34.3652575, -111.0069165)\nStart to filling missing values..(34.742577999999995, -111.4111585)\nStart to filling missing values..(34.860599500000006, -111.6087875)\nStart to filling missing values..(34.9710915, -111.509973)\nStart to filling missing values..(35.2356645, -108.2670545)\nStart to filling missing values..(36.002412, -106.5512725)\nStart to filling missing values..(36.125859, -105.5271935)\nStart to filling missing values..(36.3070475, -115.678156)\nStart to filling missing values..(36.314286, -118.6156465)\nStart to filling missing values..(36.3432345, -118.5886975)\nStart to filling missing values..(36.364939, -118.2922535)\nStart to filling missing values..(36.408329, -118.5797145)\nStart to filling missing values..(36.466145, -118.5437815)\nStart to filling missing values..(36.473369000000005, -105.1948165)\nStart to filling missing values..(36.5672195, -118.7683605)\nStart to filling missing values..(36.682572, -118.4270005)\nStart to filling missing values..(36.725784, -118.8402255)\nStart to filling missing values..(36.740183, -118.7054785)\nStart to filling missing values..(36.7833635, -118.4270005)\nStart to filling missing values..(37.006073, -106.2727945)\nStart to filling missing values..(37.0347625, -118.912091)\nStart to filling missing values..(37.0706085, -118.7683605)\nStart to filling missing values..(37.0777755, -106.452458)\nStart to filling missing values..(37.092108, -118.498866)\nStart to filling missing values..(37.156571, -119.1995515)\nStart to filling missing values..(37.1780465, -118.561748)\nStart to filling missing values..(37.19236, -118.9390405)\nStart to filling missing values..(37.2209785, -119.2175185)\nStart to filling missing values..(37.35677, -105.2307495)\nStart to filling missing values..(37.36391, -106.5422895)\nStart to filling missing values..(37.385326, -118.912091)\nStart to filling missing values..(37.4067365, -119.4870125)\nStart to filling missing values..(37.4281405, -106.6231375)\nStart to filling missing values..(37.4495385, -118.7593775)\nStart to filling missing values..(37.4566695, -108.4467175)\nStart to filling missing values..(37.4566695, -108.0155265)\nStart to filling missing values..(37.4709305, -119.2893835)\nStart to filling missing values..(37.4780595, -108.096375)\nStart to filling missing values..(37.492316, -107.7011165)\nStart to filling missing values..(37.4994435, -106.865683)\nStart to filling missing values..(37.527945, -113.0550755)\nStart to filling missing values..(37.5564365, -119.2354845)\nStart to filling missing values..(37.5777975, -112.9023615)\nStart to filling missing values..(37.5991525, -107.2339925)\nStart to filling missing values..(37.6205015, -119.028872)\nStart to filling missing values..(37.634731, -119.0827705)\nStart to filling missing values..(37.641844500000005, -108.0065435)\nStart to filling missing values..(37.6631815, -107.7999305)\nStart to filling missing values..(37.698729, -107.7819645)\nStart to filling missing values..(37.720049, -107.5214535)\nStart to filling missing values..(37.7271545, -119.1366695)\nStart to filling missing values..(37.7271545, -107.2699245)\nStart to filling missing values..(37.7626715, -119.7744735)\nStart to filling missing values..(37.7910725, -108.1772235)\nStart to filling missing values..(37.7910725, -108.0155265)\nStart to filling missing values..(37.798171, -119.1995515)\nStart to filling missing values..(37.833654, -119.4510805)\nStart to filling missing values..(37.833654, -108.2221395)\nStart to filling missing values..(37.8478425, -108.2670545)\nStart to filling missing values..(37.8549355, -107.7280655)\nStart to filling missing values..(37.8549355, -105.4373615)\nStart to filling missing values..(37.862028, -119.6576925)\nStart to filling missing values..(37.8691195, -109.4438475)\nStart to filling missing values..(37.8691195, -106.6051715)\nStart to filling missing values..(37.8762105, -119.3432825)\nStart to filling missing values..(37.89748, -119.2624335)\nStart to filling missing values..(37.89748, -107.7190825)\nStart to filling missing values..(37.932915, -107.2070425)\nStart to filling missing values..(37.9754145, -111.8333665)\nStart to filling missing values..(38.0391175, -119.3073495)\nStart to filling missing values..(38.0603395, -119.6666755)\nStart to filling missing values..(38.152231, -119.6666755)\nStart to filling missing values..(38.1663575, -120.0529515)\nStart to filling missing values..(38.194603, -119.8912545)\nStart to filling missing values..(38.279274, -119.6127765)\nStart to filling missing values..(38.483487, -112.390322)\nStart to filling missing values..(38.4905185, -119.8014235)\nStart to filling missing values..(38.4905185, -106.335677)\nStart to filling missing values..(38.50458, -119.62176)\nStart to filling missing values..(38.708156, -120.0439685)\nStart to filling missing values..(38.708156, -106.4255085)\nStart to filling missing values..(38.8202275, -106.5961885)\nStart to filling missing values..(38.890182, -106.9555145)\nStart to filling missing values..(38.911155, -120.3763445)\nStart to filling missing values..(38.9181445, -120.205665)\nStart to filling missing values..(38.9251335, -119.9182045)\nStart to filling missing values..(38.994985, -106.7578855)\nStart to filling missing values..(39.0229065, -107.9975605)\nStart to filling missing values..(39.0438405, -106.6500875)\nStart to filling missing values..(39.050817, -108.0514595)\nStart to filling missing values..(39.0717425, -107.1531435)\nStart to filling missing values..(39.134482, -111.4381075)\nStart to filling missing values..(39.294562, -106.5512725)\nStart to filling missing values..(39.3015135, -106.1110985)\nStart to filling missing values..(39.322364500000006, -111.4920065)\nStart to filling missing values..(39.357102, -106.0571995)\nStart to filling missing values..(39.3848805, -106.1919465)\nStart to filling missing values..(39.4612125, -105.9134685)\nStart to filling missing values..(39.4889485, -106.1649975)\nStart to filling missing values..(39.495881, -111.7255685)\nStart to filling missing values..(39.565167, -115.8398525)\nStart to filling missing values..(39.5859395, -105.805671)\nStart to filling missing values..(39.599784, -106.51534)\nStart to filling missing values..(39.627465, -105.7787215)\nStart to filling missing values..(39.655135, -105.868553)\nStart to filling missing values..(39.67588, -120.61889)\nStart to filling missing values..(39.67588, -110.4319945)\nStart to filling missing values..(39.7657045, -105.9044855)\nStart to filling missing values..(39.7864165, -120.8794015)\nStart to filling missing values..(39.814023, -121.3195755)\nStart to filling missing values..(39.876097, -107.6023015)\nStart to filling missing values..(39.889883, -111.2494615)\nStart to filling missing values..(40.199347, -105.5990585)\nStart to filling missing values..(40.295338, -111.2584445)\nStart to filling missing values..(40.3569745, -116.8639325)\nStart to filling missing values..(40.3980345, -106.6051715)\nStart to filling missing values..(40.3980345, -105.8505865)\nStart to filling missing values..(40.432232, -105.7338055)\nStart to filling missing values..(40.4937435, -112.6149005)\nStart to filling missing values..(40.5347195, -105.8865195)\nStart to filling missing values..(40.548373, -110.3511465)\nStart to filling missing values..(40.5620235, -111.6537035)\nStart to filling missing values..(40.6779395, -110.9530175)\nStart to filling missing values..(40.739226, -110.6206405)\nStart to filling missing values..(40.780052, -121.7866995)\nStart to filling missing values..(40.7936545, -110.8811525)\nStart to filling missing values..(40.8140545, -106.748902)\nStart to filling missing values..(40.841244, -110.0008035)\nStart to filling missing values..(40.882007, -110.5397925)\nStart to filling missing values..(40.895589, -115.211032)\nStart to filling missing values..(40.936319, -111.8154005)\nStart to filling missing values..(40.943105, -115.094251)\nStart to filling missing values..(41.071904, -106.9465315)\nStart to filling missing values..(41.1666475, -121.9394135)\nStart to filling missing values..(41.2004515, -122.5233185)\nStart to filling missing values..(41.227482, -122.8017965)\nStart to filling missing values..(41.328746, -106.3716095)\nStart to filling missing values..(41.3557235, -111.4830235)\nStart to filling missing values..(41.3557235, -106.2278795)\nStart to filling missing values..(41.4635215, -111.5009895)\nStart to filling missing values..(41.6651605, -115.327813)\nStart to filling missing values..(41.6852895, -111.4201415)\nStart to filling missing values..(41.7791425, -116.0284985)\nStart to filling missing values..(41.8929225, -115.857819)\nStart to filling missing values..(41.9664375, -118.1934385)\nStart to filling missing values..(41.993149, -120.1787155)\nStart to filling missing values..(42.079884500000006, -123.3407855)\nStart to filling missing values..(42.1665015, -114.1959355)\nStart to filling missing values..(42.299527, -110.6745395)\nStart to filling missing values..(42.359297, -111.563872)\nStart to filling missing values..(42.379208, -122.3526385)\nStart to filling missing values..(42.5713525, -108.8419765)\nStart to filling missing values..(42.5713525, -106.0931315)\nStart to filling missing values..(42.696921, -120.798553)\nStart to filling missing values..(42.756312, -118.6875125)\nStart to filling missing values..(42.7629075, -116.8998645)\nStart to filling missing values..(42.7892825, -121.9753465)\nStart to filling missing values..(42.96702, -110.6116575)\nStart to filling missing values..(43.0064475, -109.7582585)\nStart to filling missing values..(43.190109, -122.1370425)\nStart to filling missing values..(43.2686525, -115.3457795)\nStart to filling missing values..(43.275193, -109.4438475)\nStart to filling missing values..(43.3862775, -110.1265675)\nStart to filling missing values..(43.3862775, -109.8750395)\nStart to filling missing values..(43.464568, -107.2429755)\nStart to filling missing values..(43.484125, -114.8247565)\nStart to filling missing values..(43.51019049999999, -121.9753465)\nStart to filling missing values..(43.5687975, -111.213529)\nStart to filling missing values..(43.607837, -113.9264415)\nStart to filling missing values..(43.672847, -109.3809655)\nStart to filling missing values..(43.8221025, -114.267801)\nStart to filling missing values..(43.8998275, -122.029245)\nStart to filling missing values..(43.9386515, -110.4409775)\nStart to filling missing values..(43.9515875, -115.273914)\nStart to filling missing values..(44.164622, -107.1261945)\nStart to filling missing values..(44.2483345, -118.5168325)\nStart to filling missing values..(44.2612025, -119.0198885)\nStart to filling missing values..(44.3768905, -116.3339265)\nStart to filling missing values..(44.415402, -113.3964355)\nStart to filling missing values..(44.4474755, -119.9271875)\nStart to filling missing values..(44.473122, -112.9832105)\nStart to filling missing values..(44.479532, -110.036736)\nStart to filling missing values..(44.581994, -107.1980595)\nStart to filling missing values..(44.5883915, -111.1147145)\nStart to filling missing values..(44.613976, -122.2268745)\nStart to filling missing values..(44.7225845, -110.512843)\nStart to filling missing values..(44.7863765, -111.7076025)\nStart to filling missing values..(44.799126, -107.8448465)\nStart to filling missing values..(44.8055, -109.6594435)\nStart to filling missing values..(44.830989, -118.1844555)\nStart to filling missing values..(44.843729, -114.267801)\nStart to filling missing values..(44.97733, -111.9501475)\nStart to filling missing values..(45.0408405, -121.9304305)\nStart to filling missing values..(45.1042805, -119.4959955)\nStart to filling missing values..(45.186647, -115.9746)\nStart to filling missing values..(45.218295, -110.2343655)\nStart to filling missing values..(45.262572500000005, -117.1693595)\nStart to filling missing values..(45.363648, -118.4629335)\nStart to filling missing values..(45.407812, -112.9562605)\nStart to filling missing values..(45.426729, -121.8585655)\nStart to filling missing values..(45.502333, -110.9620005)\nStart to filling missing values..(45.5966955, -111.9591305)\nStart to filling missing values..(45.621832, -121.7058515)\nStart to filling missing values..(45.6720715, -113.9533905)\nStart to filling missing values..(46.091057500000005, -110.4319945)\nStart to filling missing values..(46.1408745, -114.5013625)\nStart to filling missing values..(46.178208, -121.9304305)\nStart to filling missing values..(46.23416, -117.3939385)\nStart to filling missing values..(46.2403735, -113.7737275)\nStart to filling missing values..(46.3582945, -121.0770305)\nStart to filling missing values..(46.3582945, -112.2645575)\nStart to filling missing values..(46.482148, -110.7104725)\nStart to filling missing values..(46.494518, -115.7949365)\nStart to filling missing values..(46.5625015, -115.2918805)\nStart to filling missing values..(46.624231, -121.382458)\nStart to filling missing values..(46.7843995, -121.7507675)\nStart to filling missing values..(46.79055, -109.5157135)\nStart to filling missing values..(46.8397315, -112.507103)\nStart to filling missing values..(46.913419, -110.8542025)\nStart to filling missing values..(47.0666095, -121.5890705)\nStart to filling missing values..(47.1766355, -114.330683)\nStart to filling missing values..(47.2010545, -121.7777165)\nStart to filling missing values..(47.2742445, -121.3375425)\nStart to filling missing values..(47.347334, -120.681772)\nStart to filling missing values..(47.3595055, -121.5711045)\nStart to filling missing values..(47.456778, -115.7051055)\nStart to filling missing values..(47.7112645, -123.4485835)\nStart to filling missing values..(47.7777115, -121.6968685)\nStart to filling missing values..(47.801853, -123.1251895)\nStart to filling missing values..(47.880235, -117.088511)\nStart to filling missing values..(47.93443, -123.4216335)\nStart to filling missing values..(48.126665, -115.624257)\nStart to filling missing values..(48.1326605, -113.0191425)\nStart to filling missing values..(48.306233500000005, -116.0734145)\nStart to filling missing values..(48.4315575, -113.9354245)\nStart to filling missing values..(48.5208855, -120.735671)\nStart to filling missing values..(48.693141, -121.912464)\nStart to filling missing values..(48.7227805, -120.6548225)\nStart to filling missing values..(48.929770000000005, -121.1938115)\nStart to filling missing values..(48.9710655, -115.9566335)\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/fImybZROndSN/convert_to_time_series.py\", line 111, in <module>\n    convert_to_time_series()\n  File \"/home/chetana/gw-workspace/fImybZROndSN/convert_to_time_series.py\", line 86, in convert_to_time_series\n    raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\nValueError: Error: shouldn't have SWE>240 at this point\n",
  "history_begin_time" : 1697422552583,
  "history_end_time" : 1697422555778,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "Rk0mEyQwT3ur",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\npd.set_option('display.max_columns', None)\n\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\n\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\n\ndef array_describe(arr):\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    \n    return stats\n\ndef convert_to_time_series():\n  columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n  'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  'relative_humidity_rmax', 'relative_humidity_rmin',\n  'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n  # Read the cleaned ready CSV and DEM slope CSV\n  df = pd.read_csv(current_ready_csv_path)\n  # df['location'] = df['lat'].astype(str) + ',' + df['lon'].astype(str)\n  # unique_location_pairs = df.drop_duplicates(subset='location')[['lat', 'lon']]\n\n  # print(unique_location_pairs)\n  # unique_date = df.drop_duplicates(subset='date')[['date']]\n  # print(unique_date)\n\n  # add a 7 days time series to each row\n  df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n  \n  \n  # fill in the missing values of AMSR and gridMet using polynomial values\n  # Function to perform polynomial interpolation\n  def interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    mask = y > 240\n    #print(\"mask: \", mask)\n    #print(\"x[~mask]: \", x[~mask])\n    #print(\"y[~mask]: \", y[~mask])\n    \n    #y_interp = y.copy()\n\n    # Perform interpolation\n    new_y = np.interp(x, x[~mask], y[~mask])\n    #print(\"new_y: \", new_y)\n\n    # Replace missing values with interpolated values\n    df[column_name] = new_y\n    #print(df[column_name].describe())\n    \n\n  # Group by location and apply interpolation for each column\n  # Group the data by 'lat' and 'lon'\n  grouped = df.groupby(['lat', 'lon'])\n  for name, group in grouped:\n    print(f\"Start to filling missing values..{name}\")\n    interpolate_missing_inplace(group, 'SWE')\n    #print(\"interpolated group: \", group.describe())\n    #exit(1)\n\n  df.reset_index(inplace=True)\n  \n  if any(df['SWE'] > 240):\n    raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\n\n  # Create a new DataFrame to store the time series data for each location\n  result = pd.DataFrame()\n\n  # Define the number of days to consider (7 days in this case)\n  num_days = 7\n  \n  grouped = df.groupby(['lat', 'lon'])\n  for name, group in grouped:\n      group = group.set_index('date')\n      for day in range(1, num_days + 1):\n        for target_col in columns_to_be_time_series:\n          new_column_name = f'{target_col}_{day}'\n          group[new_column_name] = group[target_col].shift(day)\n      result = pd.concat([result, group], axis=0)\n\n  # Reset the index of the result DataFrame\n  result = result.reset_index()\n\n  print(result.describe)\n\n  result.to_csv(target_time_series_csv_path, index=False)\n\n\nconvert_to_time_series()\n\ndf = pd.read_csv(target_time_series_csv_path)\nshutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\nprint(df.columns)\n\ndf.head()\n\ndescription = df.describe(include='all')\n# Print the description\nprint(description)\n\n",
  "history_output" : "today date = 2023-10-16\ntest start date:  2023-05-17\ntest end date:  2023-10-16\n/home/chetana\nStart to filling missing values..(33.358253500000004, -107.8268805)\nStart to filling missing values..(33.650385, -109.3091005)\nStart to filling missing values..(33.9787815, -109.50673)\nStart to filling missing values..(34.3652575, -111.0069165)\nStart to filling missing values..(34.742577999999995, -111.4111585)\nStart to filling missing values..(34.860599500000006, -111.6087875)\nStart to filling missing values..(34.9710915, -111.509973)\nStart to filling missing values..(35.2356645, -108.2670545)\nStart to filling missing values..(36.002412, -106.5512725)\nStart to filling missing values..(36.125859, -105.5271935)\nStart to filling missing values..(36.3070475, -115.678156)\nStart to filling missing values..(36.314286, -118.6156465)\nStart to filling missing values..(36.3432345, -118.5886975)\nStart to filling missing values..(36.364939, -118.2922535)\nStart to filling missing values..(36.408329, -118.5797145)\nStart to filling missing values..(36.466145, -118.5437815)\nStart to filling missing values..(36.473369000000005, -105.1948165)\nStart to filling missing values..(36.5672195, -118.7683605)\nStart to filling missing values..(36.682572, -118.4270005)\nStart to filling missing values..(36.725784, -118.8402255)\nStart to filling missing values..(36.740183, -118.7054785)\nStart to filling missing values..(36.7833635, -118.4270005)\nStart to filling missing values..(37.006073, -106.2727945)\nStart to filling missing values..(37.0347625, -118.912091)\nStart to filling missing values..(37.0706085, -118.7683605)\nStart to filling missing values..(37.0777755, -106.452458)\nStart to filling missing values..(37.092108, -118.498866)\nStart to filling missing values..(37.156571, -119.1995515)\nStart to filling missing values..(37.1780465, -118.561748)\nStart to filling missing values..(37.19236, -118.9390405)\nStart to filling missing values..(37.2209785, -119.2175185)\nStart to filling missing values..(37.35677, -105.2307495)\nStart to filling missing values..(37.36391, -106.5422895)\nStart to filling missing values..(37.385326, -118.912091)\nStart to filling missing values..(37.4067365, -119.4870125)\nStart to filling missing values..(37.4281405, -106.6231375)\nStart to filling missing values..(37.4495385, -118.7593775)\nStart to filling missing values..(37.4566695, -108.4467175)\nStart to filling missing values..(37.4566695, -108.0155265)\nStart to filling missing values..(37.4709305, -119.2893835)\nStart to filling missing values..(37.4780595, -108.096375)\nStart to filling missing values..(37.492316, -107.7011165)\nStart to filling missing values..(37.4994435, -106.865683)\nStart to filling missing values..(37.527945, -113.0550755)\nStart to filling missing values..(37.5564365, -119.2354845)\nStart to filling missing values..(37.5777975, -112.9023615)\nStart to filling missing values..(37.5991525, -107.2339925)\nStart to filling missing values..(37.6205015, -119.028872)\nStart to filling missing values..(37.634731, -119.0827705)\nStart to filling missing values..(37.641844500000005, -108.0065435)\nStart to filling missing values..(37.6631815, -107.7999305)\nStart to filling missing values..(37.698729, -107.7819645)\nStart to filling missing values..(37.720049, -107.5214535)\nStart to filling missing values..(37.7271545, -119.1366695)\nStart to filling missing values..(37.7271545, -107.2699245)\nStart to filling missing values..(37.7626715, -119.7744735)\nStart to filling missing values..(37.7910725, -108.1772235)\nStart to filling missing values..(37.7910725, -108.0155265)\nStart to filling missing values..(37.798171, -119.1995515)\nStart to filling missing values..(37.833654, -119.4510805)\nStart to filling missing values..(37.833654, -108.2221395)\nStart to filling missing values..(37.8478425, -108.2670545)\nStart to filling missing values..(37.8549355, -107.7280655)\nStart to filling missing values..(37.8549355, -105.4373615)\nStart to filling missing values..(37.862028, -119.6576925)\nStart to filling missing values..(37.8691195, -109.4438475)\nStart to filling missing values..(37.8691195, -106.6051715)\nStart to filling missing values..(37.8762105, -119.3432825)\nStart to filling missing values..(37.89748, -119.2624335)\nStart to filling missing values..(37.89748, -107.7190825)\nStart to filling missing values..(37.932915, -107.2070425)\nStart to filling missing values..(37.9754145, -111.8333665)\nStart to filling missing values..(38.0391175, -119.3073495)\nStart to filling missing values..(38.0603395, -119.6666755)\nStart to filling missing values..(38.152231, -119.6666755)\nStart to filling missing values..(38.1663575, -120.0529515)\nStart to filling missing values..(38.194603, -119.8912545)\nStart to filling missing values..(38.279274, -119.6127765)\nStart to filling missing values..(38.483487, -112.390322)\nStart to filling missing values..(38.4905185, -119.8014235)\nStart to filling missing values..(38.4905185, -106.335677)\nStart to filling missing values..(38.50458, -119.62176)\nStart to filling missing values..(38.708156, -120.0439685)\nStart to filling missing values..(38.708156, -106.4255085)\nStart to filling missing values..(38.8202275, -106.5961885)\nStart to filling missing values..(38.890182, -106.9555145)\nStart to filling missing values..(38.911155, -120.3763445)\nStart to filling missing values..(38.9181445, -120.205665)\nStart to filling missing values..(38.9251335, -119.9182045)\nStart to filling missing values..(38.994985, -106.7578855)\nStart to filling missing values..(39.0229065, -107.9975605)\nStart to filling missing values..(39.0438405, -106.6500875)\nStart to filling missing values..(39.050817, -108.0514595)\nStart to filling missing values..(39.0717425, -107.1531435)\nStart to filling missing values..(39.134482, -111.4381075)\nStart to filling missing values..(39.294562, -106.5512725)\nStart to filling missing values..(39.3015135, -106.1110985)\nStart to filling missing values..(39.322364500000006, -111.4920065)\nStart to filling missing values..(39.357102, -106.0571995)\nStart to filling missing values..(39.3848805, -106.1919465)\nStart to filling missing values..(39.4612125, -105.9134685)\nStart to filling missing values..(39.4889485, -106.1649975)\nStart to filling missing values..(39.495881, -111.7255685)\nStart to filling missing values..(39.565167, -115.8398525)\nStart to filling missing values..(39.5859395, -105.805671)\nStart to filling missing values..(39.599784, -106.51534)\nStart to filling missing values..(39.627465, -105.7787215)\nStart to filling missing values..(39.655135, -105.868553)\nStart to filling missing values..(39.67588, -120.61889)\nStart to filling missing values..(39.67588, -110.4319945)\nStart to filling missing values..(39.7657045, -105.9044855)\nStart to filling missing values..(39.7864165, -120.8794015)\nStart to filling missing values..(39.814023, -121.3195755)\nStart to filling missing values..(39.876097, -107.6023015)\nStart to filling missing values..(39.889883, -111.2494615)\nStart to filling missing values..(40.199347, -105.5990585)\nStart to filling missing values..(40.295338, -111.2584445)\nStart to filling missing values..(40.3569745, -116.8639325)\nStart to filling missing values..(40.3980345, -106.6051715)\nStart to filling missing values..(40.3980345, -105.8505865)\nStart to filling missing values..(40.432232, -105.7338055)\nStart to filling missing values..(40.4937435, -112.6149005)\nStart to filling missing values..(40.5347195, -105.8865195)\nStart to filling missing values..(40.548373, -110.3511465)\nStart to filling missing values..(40.5620235, -111.6537035)\nStart to filling missing values..(40.6779395, -110.9530175)\nStart to filling missing values..(40.739226, -110.6206405)\nStart to filling missing values..(40.780052, -121.7866995)\nStart to filling missing values..(40.7936545, -110.8811525)\nStart to filling missing values..(40.8140545, -106.748902)\nStart to filling missing values..(40.841244, -110.0008035)\nStart to filling missing values..(40.882007, -110.5397925)\nStart to filling missing values..(40.895589, -115.211032)\nStart to filling missing values..(40.936319, -111.8154005)\nStart to filling missing values..(40.943105, -115.094251)\nStart to filling missing values..(41.071904, -106.9465315)\nStart to filling missing values..(41.1666475, -121.9394135)\nStart to filling missing values..(41.2004515, -122.5233185)\nStart to filling missing values..(41.227482, -122.8017965)\nStart to filling missing values..(41.328746, -106.3716095)\nStart to filling missing values..(41.3557235, -111.4830235)\nStart to filling missing values..(41.3557235, -106.2278795)\nStart to filling missing values..(41.4635215, -111.5009895)\nStart to filling missing values..(41.6651605, -115.327813)\nStart to filling missing values..(41.6852895, -111.4201415)\nStart to filling missing values..(41.7791425, -116.0284985)\nStart to filling missing values..(41.8929225, -115.857819)\nStart to filling missing values..(41.9664375, -118.1934385)\nStart to filling missing values..(41.993149, -120.1787155)\nStart to filling missing values..(42.079884500000006, -123.3407855)\nStart to filling missing values..(42.1665015, -114.1959355)\nStart to filling missing values..(42.299527, -110.6745395)\nStart to filling missing values..(42.359297, -111.563872)\nStart to filling missing values..(42.379208, -122.3526385)\nStart to filling missing values..(42.5713525, -108.8419765)\nStart to filling missing values..(42.5713525, -106.0931315)\nStart to filling missing values..(42.696921, -120.798553)\nStart to filling missing values..(42.756312, -118.6875125)\nStart to filling missing values..(42.7629075, -116.8998645)\nStart to filling missing values..(42.7892825, -121.9753465)\nStart to filling missing values..(42.96702, -110.6116575)\nStart to filling missing values..(43.0064475, -109.7582585)\nStart to filling missing values..(43.190109, -122.1370425)\nStart to filling missing values..(43.2686525, -115.3457795)\nStart to filling missing values..(43.275193, -109.4438475)\nStart to filling missing values..(43.3862775, -110.1265675)\nStart to filling missing values..(43.3862775, -109.8750395)\nStart to filling missing values..(43.464568, -107.2429755)\nStart to filling missing values..(43.484125, -114.8247565)\nStart to filling missing values..(43.51019049999999, -121.9753465)\nStart to filling missing values..(43.5687975, -111.213529)\nStart to filling missing values..(43.607837, -113.9264415)\nStart to filling missing values..(43.672847, -109.3809655)\nStart to filling missing values..(43.8221025, -114.267801)\nStart to filling missing values..(43.8998275, -122.029245)\nStart to filling missing values..(43.9386515, -110.4409775)\nStart to filling missing values..(43.9515875, -115.273914)\nStart to filling missing values..(44.164622, -107.1261945)\nStart to filling missing values..(44.2483345, -118.5168325)\nStart to filling missing values..(44.2612025, -119.0198885)\nStart to filling missing values..(44.3768905, -116.3339265)\nStart to filling missing values..(44.415402, -113.3964355)\nStart to filling missing values..(44.4474755, -119.9271875)\nStart to filling missing values..(44.473122, -112.9832105)\nStart to filling missing values..(44.479532, -110.036736)\nStart to filling missing values..(44.581994, -107.1980595)\nStart to filling missing values..(44.5883915, -111.1147145)\nStart to filling missing values..(44.613976, -122.2268745)\nStart to filling missing values..(44.7225845, -110.512843)\nStart to filling missing values..(44.7863765, -111.7076025)\nStart to filling missing values..(44.799126, -107.8448465)\nStart to filling missing values..(44.8055, -109.6594435)\nStart to filling missing values..(44.830989, -118.1844555)\nStart to filling missing values..(44.843729, -114.267801)\nStart to filling missing values..(44.97733, -111.9501475)\nStart to filling missing values..(45.0408405, -121.9304305)\nStart to filling missing values..(45.1042805, -119.4959955)\nStart to filling missing values..(45.186647, -115.9746)\nStart to filling missing values..(45.218295, -110.2343655)\nStart to filling missing values..(45.262572500000005, -117.1693595)\nStart to filling missing values..(45.363648, -118.4629335)\nStart to filling missing values..(45.407812, -112.9562605)\nStart to filling missing values..(45.426729, -121.8585655)\nStart to filling missing values..(45.502333, -110.9620005)\nStart to filling missing values..(45.5966955, -111.9591305)\nStart to filling missing values..(45.621832, -121.7058515)\nStart to filling missing values..(45.6720715, -113.9533905)\nStart to filling missing values..(46.091057500000005, -110.4319945)\nStart to filling missing values..(46.1408745, -114.5013625)\nStart to filling missing values..(46.178208, -121.9304305)\nStart to filling missing values..(46.23416, -117.3939385)\nStart to filling missing values..(46.2403735, -113.7737275)\nStart to filling missing values..(46.3582945, -121.0770305)\nStart to filling missing values..(46.3582945, -112.2645575)\nStart to filling missing values..(46.482148, -110.7104725)\nStart to filling missing values..(46.494518, -115.7949365)\nStart to filling missing values..(46.5625015, -115.2918805)\nStart to filling missing values..(46.624231, -121.382458)\nStart to filling missing values..(46.7843995, -121.7507675)\nStart to filling missing values..(46.79055, -109.5157135)\nStart to filling missing values..(46.8397315, -112.507103)\nStart to filling missing values..(46.913419, -110.8542025)\nStart to filling missing values..(47.0666095, -121.5890705)\nStart to filling missing values..(47.1766355, -114.330683)\nStart to filling missing values..(47.2010545, -121.7777165)\nStart to filling missing values..(47.2742445, -121.3375425)\nStart to filling missing values..(47.347334, -120.681772)\nStart to filling missing values..(47.3595055, -121.5711045)\nStart to filling missing values..(47.456778, -115.7051055)\nStart to filling missing values..(47.7112645, -123.4485835)\nStart to filling missing values..(47.7777115, -121.6968685)\nStart to filling missing values..(47.801853, -123.1251895)\nStart to filling missing values..(47.880235, -117.088511)\nStart to filling missing values..(47.93443, -123.4216335)\nStart to filling missing values..(48.126665, -115.624257)\nStart to filling missing values..(48.1326605, -113.0191425)\nStart to filling missing values..(48.306233500000005, -116.0734145)\nStart to filling missing values..(48.4315575, -113.9354245)\nStart to filling missing values..(48.5208855, -120.735671)\nStart to filling missing values..(48.693141, -121.912464)\nStart to filling missing values..(48.7227805, -120.6548225)\nStart to filling missing values..(48.929770000000005, -121.1938115)\nStart to filling missing values..(48.9710655, -115.9566335)\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/Rk0mEyQwT3ur/convert_to_time_series.py\", line 107, in <module>\n    convert_to_time_series()\n  File \"/home/chetana/gw-workspace/Rk0mEyQwT3ur/convert_to_time_series.py\", line 82, in convert_to_time_series\n    raise ValueError(\"Error: shouldn't have SWE>240 at this point\")\nValueError: Error: shouldn't have SWE>240 at this point\n",
  "history_begin_time" : 1697422472052,
  "history_end_time" : 1697422475303,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "uQ8yQKpzhGf4",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\npd.set_option('display.max_columns', None)\n\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\n\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\n\ndef array_describe(arr):\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    \n    return stats\n\ndef convert_to_time_series():\n  columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n  'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  'relative_humidity_rmax', 'relative_humidity_rmin',\n  'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n  # Read the cleaned ready CSV and DEM slope CSV\n  df = pd.read_csv(current_ready_csv_path)\n  # df['location'] = df['lat'].astype(str) + ',' + df['lon'].astype(str)\n  # unique_location_pairs = df.drop_duplicates(subset='location')[['lat', 'lon']]\n\n  # print(unique_location_pairs)\n  # unique_date = df.drop_duplicates(subset='date')[['date']]\n  # print(unique_date)\n\n  # add a 7 days time series to each row\n  df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n  \n  \n  # fill in the missing values of AMSR and gridMet using polynomial values\n  # Function to perform polynomial interpolation\n  def interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    mask = y > 240\n    #print(\"mask: \", mask)\n    #print(\"x[~mask]: \", x[~mask])\n    #print(\"y[~mask]: \", y[~mask])\n    \n    #y_interp = y.copy()\n\n    # Perform interpolation\n    new_y = np.interp(x, x[~mask], y[~mask])\n    #print(\"new_y: \", new_y)\n\n    # Replace missing values with interpolated values\n    df[column_name] = new_y\n    #print(df[column_name].describe())\n    \n\n  # Group by location and apply interpolation for each column\n  # Group the data by 'lat' and 'lon'\n  grouped = df.groupby(['lat', 'lon'])\n  for name, group in grouped:\n    print(f\"Start to filling missing values..{name}\")\n    interpolate_missing_inplace(group, 'SWE')\n    #print(\"interpolated group: \", group.describe())\n    #exit(1)\n\n  df.reset_index(inplace=True)\n  \n  if any(df['SWE'] > 240):\n    print(\"Error: shouldn't have SWE>240 at this point\")\n    exit(1)\n\n  # Create a new DataFrame to store the time series data for each location\n  result = pd.DataFrame()\n\n  # Define the number of days to consider (7 days in this case)\n  num_days = 7\n  \n  grouped = df.groupby(['lat', 'lon'])\n  for name, group in grouped:\n      group = group.set_index('date')\n      for day in range(1, num_days + 1):\n        for target_col in columns_to_be_time_series:\n          new_column_name = f'{target_col}_{day}'\n          group[new_column_name] = group[target_col].shift(day)\n      result = pd.concat([result, group], axis=0)\n\n  # Reset the index of the result DataFrame\n  result = result.reset_index()\n\n  print(result.describe)\n\n  result.to_csv(target_time_series_csv_path, index=False)\n\n\nconvert_to_time_series()\n\ndf = pd.read_csv(target_time_series_csv_path)\nshutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\nprint(df.columns)\n\ndf.head()\n\ndescription = df.describe(include='all')\n# Print the description\nprint(description)\n\n",
  "history_output" : "today date = 2023-10-16\ntest start date:  2023-05-17\ntest end date:  2023-10-16\n/home/chetana\nStart to filling missing values..(33.358253500000004, -107.8268805)\nStart to filling missing values..(33.650385, -109.3091005)\nStart to filling missing values..(33.9787815, -109.50673)\nStart to filling missing values..(34.3652575, -111.0069165)\nStart to filling missing values..(34.742577999999995, -111.4111585)\nStart to filling missing values..(34.860599500000006, -111.6087875)\nStart to filling missing values..(34.9710915, -111.509973)\nStart to filling missing values..(35.2356645, -108.2670545)\nStart to filling missing values..(36.002412, -106.5512725)\nStart to filling missing values..(36.125859, -105.5271935)\nStart to filling missing values..(36.3070475, -115.678156)\nStart to filling missing values..(36.314286, -118.6156465)\nStart to filling missing values..(36.3432345, -118.5886975)\nStart to filling missing values..(36.364939, -118.2922535)\nStart to filling missing values..(36.408329, -118.5797145)\nStart to filling missing values..(36.466145, -118.5437815)\nStart to filling missing values..(36.473369000000005, -105.1948165)\nStart to filling missing values..(36.5672195, -118.7683605)\nStart to filling missing values..(36.682572, -118.4270005)\nStart to filling missing values..(36.725784, -118.8402255)\nStart to filling missing values..(36.740183, -118.7054785)\nStart to filling missing values..(36.7833635, -118.4270005)\nStart to filling missing values..(37.006073, -106.2727945)\nStart to filling missing values..(37.0347625, -118.912091)\nStart to filling missing values..(37.0706085, -118.7683605)\nStart to filling missing values..(37.0777755, -106.452458)\nStart to filling missing values..(37.092108, -118.498866)\nStart to filling missing values..(37.156571, -119.1995515)\nStart to filling missing values..(37.1780465, -118.561748)\nStart to filling missing values..(37.19236, -118.9390405)\nStart to filling missing values..(37.2209785, -119.2175185)\nStart to filling missing values..(37.35677, -105.2307495)\nStart to filling missing values..(37.36391, -106.5422895)\nStart to filling missing values..(37.385326, -118.912091)\nStart to filling missing values..(37.4067365, -119.4870125)\nStart to filling missing values..(37.4281405, -106.6231375)\nStart to filling missing values..(37.4495385, -118.7593775)\nStart to filling missing values..(37.4566695, -108.4467175)\nStart to filling missing values..(37.4566695, -108.0155265)\nStart to filling missing values..(37.4709305, -119.2893835)\nStart to filling missing values..(37.4780595, -108.096375)\nStart to filling missing values..(37.492316, -107.7011165)\nStart to filling missing values..(37.4994435, -106.865683)\nStart to filling missing values..(37.527945, -113.0550755)\nStart to filling missing values..(37.5564365, -119.2354845)\nStart to filling missing values..(37.5777975, -112.9023615)\nStart to filling missing values..(37.5991525, -107.2339925)\nStart to filling missing values..(37.6205015, -119.028872)\nStart to filling missing values..(37.634731, -119.0827705)\nStart to filling missing values..(37.641844500000005, -108.0065435)\nStart to filling missing values..(37.6631815, -107.7999305)\nStart to filling missing values..(37.698729, -107.7819645)\nStart to filling missing values..(37.720049, -107.5214535)\nStart to filling missing values..(37.7271545, -119.1366695)\nStart to filling missing values..(37.7271545, -107.2699245)\nStart to filling missing values..(37.7626715, -119.7744735)\nStart to filling missing values..(37.7910725, -108.1772235)\nStart to filling missing values..(37.7910725, -108.0155265)\nStart to filling missing values..(37.798171, -119.1995515)\nStart to filling missing values..(37.833654, -119.4510805)\nStart to filling missing values..(37.833654, -108.2221395)\nStart to filling missing values..(37.8478425, -108.2670545)\nStart to filling missing values..(37.8549355, -107.7280655)\nStart to filling missing values..(37.8549355, -105.4373615)\nStart to filling missing values..(37.862028, -119.6576925)\nStart to filling missing values..(37.8691195, -109.4438475)\nStart to filling missing values..(37.8691195, -106.6051715)\nStart to filling missing values..(37.8762105, -119.3432825)\nStart to filling missing values..(37.89748, -119.2624335)\nStart to filling missing values..(37.89748, -107.7190825)\nStart to filling missing values..(37.932915, -107.2070425)\nStart to filling missing values..(37.9754145, -111.8333665)\nStart to filling missing values..(38.0391175, -119.3073495)\nStart to filling missing values..(38.0603395, -119.6666755)\nStart to filling missing values..(38.152231, -119.6666755)\nStart to filling missing values..(38.1663575, -120.0529515)\nStart to filling missing values..(38.194603, -119.8912545)\nStart to filling missing values..(38.279274, -119.6127765)\nStart to filling missing values..(38.483487, -112.390322)\nStart to filling missing values..(38.4905185, -119.8014235)\nStart to filling missing values..(38.4905185, -106.335677)\nStart to filling missing values..(38.50458, -119.62176)\nStart to filling missing values..(38.708156, -120.0439685)\nStart to filling missing values..(38.708156, -106.4255085)\nStart to filling missing values..(38.8202275, -106.5961885)\nStart to filling missing values..(38.890182, -106.9555145)\nStart to filling missing values..(38.911155, -120.3763445)\nStart to filling missing values..(38.9181445, -120.205665)\nStart to filling missing values..(38.9251335, -119.9182045)\nStart to filling missing values..(38.994985, -106.7578855)\nStart to filling missing values..(39.0229065, -107.9975605)\nStart to filling missing values..(39.0438405, -106.6500875)\nStart to filling missing values..(39.050817, -108.0514595)\nStart to filling missing values..(39.0717425, -107.1531435)\nStart to filling missing values..(39.134482, -111.4381075)\nStart to filling missing values..(39.294562, -106.5512725)\nStart to filling missing values..(39.3015135, -106.1110985)\nStart to filling missing values..(39.322364500000006, -111.4920065)\nStart to filling missing values..(39.357102, -106.0571995)\nStart to filling missing values..(39.3848805, -106.1919465)\nStart to filling missing values..(39.4612125, -105.9134685)\nStart to filling missing values..(39.4889485, -106.1649975)\nStart to filling missing values..(39.495881, -111.7255685)\nStart to filling missing values..(39.565167, -115.8398525)\nStart to filling missing values..(39.5859395, -105.805671)\nStart to filling missing values..(39.599784, -106.51534)\nStart to filling missing values..(39.627465, -105.7787215)\nStart to filling missing values..(39.655135, -105.868553)\nStart to filling missing values..(39.67588, -120.61889)\nStart to filling missing values..(39.67588, -110.4319945)\nStart to filling missing values..(39.7657045, -105.9044855)\nStart to filling missing values..(39.7864165, -120.8794015)\nStart to filling missing values..(39.814023, -121.3195755)\nStart to filling missing values..(39.876097, -107.6023015)\nStart to filling missing values..(39.889883, -111.2494615)\nStart to filling missing values..(40.199347, -105.5990585)\nStart to filling missing values..(40.295338, -111.2584445)\nStart to filling missing values..(40.3569745, -116.8639325)\nStart to filling missing values..(40.3980345, -106.6051715)\nStart to filling missing values..(40.3980345, -105.8505865)\nStart to filling missing values..(40.432232, -105.7338055)\nStart to filling missing values..(40.4937435, -112.6149005)\nStart to filling missing values..(40.5347195, -105.8865195)\nStart to filling missing values..(40.548373, -110.3511465)\nStart to filling missing values..(40.5620235, -111.6537035)\nStart to filling missing values..(40.6779395, -110.9530175)\nStart to filling missing values..(40.739226, -110.6206405)\nStart to filling missing values..(40.780052, -121.7866995)\nStart to filling missing values..(40.7936545, -110.8811525)\nStart to filling missing values..(40.8140545, -106.748902)\nStart to filling missing values..(40.841244, -110.0008035)\nStart to filling missing values..(40.882007, -110.5397925)\nStart to filling missing values..(40.895589, -115.211032)\nStart to filling missing values..(40.936319, -111.8154005)\nStart to filling missing values..(40.943105, -115.094251)\nStart to filling missing values..(41.071904, -106.9465315)\nStart to filling missing values..(41.1666475, -121.9394135)\nStart to filling missing values..(41.2004515, -122.5233185)\nStart to filling missing values..(41.227482, -122.8017965)\nStart to filling missing values..(41.328746, -106.3716095)\nStart to filling missing values..(41.3557235, -111.4830235)\nStart to filling missing values..(41.3557235, -106.2278795)\nStart to filling missing values..(41.4635215, -111.5009895)\nStart to filling missing values..(41.6651605, -115.327813)\nStart to filling missing values..(41.6852895, -111.4201415)\nStart to filling missing values..(41.7791425, -116.0284985)\nStart to filling missing values..(41.8929225, -115.857819)\nStart to filling missing values..(41.9664375, -118.1934385)\nStart to filling missing values..(41.993149, -120.1787155)\nStart to filling missing values..(42.079884500000006, -123.3407855)\nStart to filling missing values..(42.1665015, -114.1959355)\nStart to filling missing values..(42.299527, -110.6745395)\nStart to filling missing values..(42.359297, -111.563872)\nStart to filling missing values..(42.379208, -122.3526385)\nStart to filling missing values..(42.5713525, -108.8419765)\nStart to filling missing values..(42.5713525, -106.0931315)\nStart to filling missing values..(42.696921, -120.798553)\nStart to filling missing values..(42.756312, -118.6875125)\nStart to filling missing values..(42.7629075, -116.8998645)\nStart to filling missing values..(42.7892825, -121.9753465)\nStart to filling missing values..(42.96702, -110.6116575)\nStart to filling missing values..(43.0064475, -109.7582585)\nStart to filling missing values..(43.190109, -122.1370425)\nStart to filling missing values..(43.2686525, -115.3457795)\nStart to filling missing values..(43.275193, -109.4438475)\nStart to filling missing values..(43.3862775, -110.1265675)\nStart to filling missing values..(43.3862775, -109.8750395)\nStart to filling missing values..(43.464568, -107.2429755)\nStart to filling missing values..(43.484125, -114.8247565)\nStart to filling missing values..(43.51019049999999, -121.9753465)\nStart to filling missing values..(43.5687975, -111.213529)\nStart to filling missing values..(43.607837, -113.9264415)\nStart to filling missing values..(43.672847, -109.3809655)\nStart to filling missing values..(43.8221025, -114.267801)\nStart to filling missing values..(43.8998275, -122.029245)\nStart to filling missing values..(43.9386515, -110.4409775)\nStart to filling missing values..(43.9515875, -115.273914)\nStart to filling missing values..(44.164622, -107.1261945)\nStart to filling missing values..(44.2483345, -118.5168325)\nStart to filling missing values..(44.2612025, -119.0198885)\nStart to filling missing values..(44.3768905, -116.3339265)\nStart to filling missing values..(44.415402, -113.3964355)\nStart to filling missing values..(44.4474755, -119.9271875)\nStart to filling missing values..(44.473122, -112.9832105)\nStart to filling missing values..(44.479532, -110.036736)\nStart to filling missing values..(44.581994, -107.1980595)\nStart to filling missing values..(44.5883915, -111.1147145)\nStart to filling missing values..(44.613976, -122.2268745)\nStart to filling missing values..(44.7225845, -110.512843)\nStart to filling missing values..(44.7863765, -111.7076025)\nStart to filling missing values..(44.799126, -107.8448465)\nStart to filling missing values..(44.8055, -109.6594435)\nStart to filling missing values..(44.830989, -118.1844555)\nStart to filling missing values..(44.843729, -114.267801)\nStart to filling missing values..(44.97733, -111.9501475)\nStart to filling missing values..(45.0408405, -121.9304305)\nStart to filling missing values..(45.1042805, -119.4959955)\nStart to filling missing values..(45.186647, -115.9746)\nStart to filling missing values..(45.218295, -110.2343655)\nStart to filling missing values..(45.262572500000005, -117.1693595)\nStart to filling missing values..(45.363648, -118.4629335)\nStart to filling missing values..(45.407812, -112.9562605)\nStart to filling missing values..(45.426729, -121.8585655)\nStart to filling missing values..(45.502333, -110.9620005)\nStart to filling missing values..(45.5966955, -111.9591305)\nStart to filling missing values..(45.621832, -121.7058515)\nStart to filling missing values..(45.6720715, -113.9533905)\nStart to filling missing values..(46.091057500000005, -110.4319945)\nStart to filling missing values..(46.1408745, -114.5013625)\nStart to filling missing values..(46.178208, -121.9304305)\nStart to filling missing values..(46.23416, -117.3939385)\nStart to filling missing values..(46.2403735, -113.7737275)\nStart to filling missing values..(46.3582945, -121.0770305)\nStart to filling missing values..(46.3582945, -112.2645575)\nStart to filling missing values..(46.482148, -110.7104725)\nStart to filling missing values..(46.494518, -115.7949365)\nStart to filling missing values..(46.5625015, -115.2918805)\nStart to filling missing values..(46.624231, -121.382458)\nStart to filling missing values..(46.7843995, -121.7507675)\nStart to filling missing values..(46.79055, -109.5157135)\nStart to filling missing values..(46.8397315, -112.507103)\nStart to filling missing values..(46.913419, -110.8542025)\nStart to filling missing values..(47.0666095, -121.5890705)\nStart to filling missing values..(47.1766355, -114.330683)\nStart to filling missing values..(47.2010545, -121.7777165)\nStart to filling missing values..(47.2742445, -121.3375425)\nStart to filling missing values..(47.347334, -120.681772)\nStart to filling missing values..(47.3595055, -121.5711045)\nStart to filling missing values..(47.456778, -115.7051055)\nStart to filling missing values..(47.7112645, -123.4485835)\nStart to filling missing values..(47.7777115, -121.6968685)\nStart to filling missing values..(47.801853, -123.1251895)\nStart to filling missing values..(47.880235, -117.088511)\nStart to filling missing values..(47.93443, -123.4216335)\nStart to filling missing values..(48.126665, -115.624257)\nStart to filling missing values..(48.1326605, -113.0191425)\nStart to filling missing values..(48.306233500000005, -116.0734145)\nStart to filling missing values..(48.4315575, -113.9354245)\nStart to filling missing values..(48.5208855, -120.735671)\nStart to filling missing values..(48.693141, -121.912464)\nStart to filling missing values..(48.7227805, -120.6548225)\nStart to filling missing values..(48.929770000000005, -121.1938115)\nStart to filling missing values..(48.9710655, -115.9566335)\nError: shouldn't have SWE>240 at this point\n",
  "history_begin_time" : 1697422327440,
  "history_end_time" : 1697422330666,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "5t41xoZ2a9d0",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\npd.set_option('display.max_columns', None)\n\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\n\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\n\ndef array_describe(arr):\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    \n    return stats\n\ndef convert_to_time_series():\n  columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n  'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  'relative_humidity_rmax', 'relative_humidity_rmin',\n  'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n  # Read the cleaned ready CSV and DEM slope CSV\n  df = pd.read_csv(current_ready_csv_path)\n  # df['location'] = df['lat'].astype(str) + ',' + df['lon'].astype(str)\n  # unique_location_pairs = df.drop_duplicates(subset='location')[['lat', 'lon']]\n\n  # print(unique_location_pairs)\n  # unique_date = df.drop_duplicates(subset='date')[['date']]\n  # print(unique_date)\n\n  # add a 7 days time series to each row\n  df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n  \n  \n  # fill in the missing values of AMSR and gridMet using polynomial values\n  # Function to perform polynomial interpolation\n  def interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    mask = y > 240\n    #print(\"mask: \", mask)\n    #print(\"x[~mask]: \", x[~mask])\n    #print(\"y[~mask]: \", y[~mask])\n    \n    #y_interp = y.copy()\n\n    # Perform interpolation\n    new_y = np.interp(x, x[~mask], y[~mask])\n    #print(\"new_y: \", new_y)\n\n    # Replace missing values with interpolated values\n    df[column_name] = new_y\n    #print(df[column_name].describe())\n    \n\n  # Group by location and apply interpolation for each column\n  # Group the data by 'lat' and 'lon'\n  grouped = df.groupby(['lat', 'lon'])\n  for name, group in grouped:\n    print(f\"Start to filling missing values..{name}\")\n    group = group.set_index('date')\n    interpolate_missing_inplace(group, 'SWE')\n    #print(\"interpolated group: \", group.describe())\n    #exit(1)\n\n  df.reset_index(inplace=True)\n  \n  if any(df['SWE'] > 240):\n    print(\"Error: shouldn't have SWE>240 at this point\")\n    exit(1)\n\n  # Create a new DataFrame to store the time series data for each location\n  result = pd.DataFrame()\n\n  # Define the number of days to consider (7 days in this case)\n  num_days = 7\n  \n  grouped = df.groupby(['lat', 'lon'])\n  for name, group in grouped:\n      group = group.set_index('date')\n      for day in range(1, num_days + 1):\n        for target_col in columns_to_be_time_series:\n          new_column_name = f'{target_col}_{day}'\n          group[new_column_name] = group[target_col].shift(day)\n      result = pd.concat([result, group], axis=0)\n\n  # Reset the index of the result DataFrame\n  result = result.reset_index()\n\n  print(result.describe)\n\n  result.to_csv(target_time_series_csv_path, index=False)\n\n\nconvert_to_time_series()\n\ndf = pd.read_csv(target_time_series_csv_path)\nshutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\nprint(df.columns)\n\ndf.head()\n\ndescription = df.describe(include='all')\n# Print the description\nprint(description)\n\n",
  "history_output" : "today date = 2023-10-16\ntest start date:  2023-05-17\ntest end date:  2023-10-16\n/home/chetana\nStart to filling missing values..(33.358253500000004, -107.8268805)\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/5t41xoZ2a9d0/convert_to_time_series.py\", line 109, in <module>\n    convert_to_time_series()\n  File \"/home/chetana/gw-workspace/5t41xoZ2a9d0/convert_to_time_series.py\", line 76, in convert_to_time_series\n    interpolate_missing_inplace(group, 'SWE')\n  File \"/home/chetana/gw-workspace/5t41xoZ2a9d0/convert_to_time_series.py\", line 62, in interpolate_missing_inplace\n    new_y = np.interp(x, x[~mask], y[~mask])\n  File \"<__array_function__ internals>\", line 200, in interp\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/numpy/lib/function_base.py\", line 1595, in interp\n    return interp_func(x, xp, fp, left, right)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 935, in __array__\n    return np.asarray(self._data, dtype=dtype)\nValueError: could not convert string to float: '2019-01-02'\n",
  "history_begin_time" : 1697422272439,
  "history_end_time" : 1697422275535,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "u6A26GucoGAA",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\npd.set_option('display.max_columns', None)\n\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\n\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\n\ndef array_describe(arr):\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    \n    return stats\n\ndef convert_to_time_series():\n  columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n  'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  'relative_humidity_rmax', 'relative_humidity_rmin',\n  'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n  # Read the cleaned ready CSV and DEM slope CSV\n  df = pd.read_csv(current_ready_csv_path)\n  # df['location'] = df['lat'].astype(str) + ',' + df['lon'].astype(str)\n  # unique_location_pairs = df.drop_duplicates(subset='location')[['lat', 'lon']]\n\n  # print(unique_location_pairs)\n  # unique_date = df.drop_duplicates(subset='date')[['date']]\n  # print(unique_date)\n\n  # add a 7 days time series to each row\n  df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n  \n  \n  # fill in the missing values of AMSR and gridMet using polynomial values\n  # Function to perform polynomial interpolation\n  def interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    mask = y > 240\n    #print(\"mask: \", mask)\n    #print(\"x[~mask]: \", x[~mask])\n    #print(\"y[~mask]: \", y[~mask])\n    \n    #y_interp = y.copy()\n\n    # Perform interpolation\n    new_y = np.interp(x, x[~mask], y[~mask])\n    #print(\"new_y: \", new_y)\n\n    # Replace missing values with interpolated values\n    df[column_name] = new_y\n    #print(df[column_name].describe())\n    \n\n  # Group by location and apply interpolation for each column\n  # Group the data by 'lat' and 'lon'\n  grouped = df.groupby(['lat', 'lon'])\n  for name, group in grouped:\n    print(f\"Start to filling missing values..{name}\")\n    group = group.set_index('date')\n    interpolate_missing_inplace(group, 'SWE')\n    #print(\"interpolated group: \", group.describe())\n    #exit(1)\n\n  df.reset_index(inplace=True)\n\n  # Create a new DataFrame to store the time series data for each location\n  result = pd.DataFrame()\n\n  # Define the number of days to consider (7 days in this case)\n  num_days = 7\n  \n  grouped = df.groupby(['lat', 'lon'])\n  for name, group in grouped:\n      group = group.set_index('date')\n      for day in range(1, num_days + 1):\n        for target_col in columns_to_be_time_series:\n          new_column_name = f'{target_col}_{day}'\n          group[new_column_name] = group[target_col].shift(day)\n      result = pd.concat([result, group], axis=0)\n\n  # Reset the index of the result DataFrame\n  result = result.reset_index()\n\n  print(result.describe)\n\n  result.to_csv(target_time_series_csv_path, index=False)\n\n\nconvert_to_time_series()\n\ndf = pd.read_csv(target_time_series_csv_path)\nshutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\nprint(df.columns)\n\ndf.head()\n\ndescription = df.describe(include='all')\n# Print the description\nprint(description)\n\n",
  "history_output" : "today date = 2023-10-16\ntest start date:  2023-05-17\ntest end date:  2023-10-16\n/home/chetana\nStart to filling missing values..(33.358253500000004, -107.8268805)\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/u6A26GucoGAA/convert_to_time_series.py\", line 105, in <module>\n    convert_to_time_series()\n  File \"/home/chetana/gw-workspace/u6A26GucoGAA/convert_to_time_series.py\", line 76, in convert_to_time_series\n    interpolate_missing_inplace(group, 'SWE')\n  File \"/home/chetana/gw-workspace/u6A26GucoGAA/convert_to_time_series.py\", line 62, in interpolate_missing_inplace\n    new_y = np.interp(x, x[~mask], y[~mask])\n  File \"<__array_function__ internals>\", line 200, in interp\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/numpy/lib/function_base.py\", line 1595, in interp\n    return interp_func(x, xp, fp, left, right)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 935, in __array__\n    return np.asarray(self._data, dtype=dtype)\nValueError: could not convert string to float: '2019-01-02'\n",
  "history_begin_time" : 1697422191976,
  "history_end_time" : 1697422195243,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "s9XnypwG0uUX",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\npd.set_option('display.max_columns', None)\n\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\n\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\n\ndef array_describe(arr):\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    \n    return stats\n\ndef convert_to_time_series():\n  columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n  'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  'relative_humidity_rmax', 'relative_humidity_rmin',\n  'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n  # Read the cleaned ready CSV and DEM slope CSV\n  df = pd.read_csv(current_ready_csv_path)\n  # df['location'] = df['lat'].astype(str) + ',' + df['lon'].astype(str)\n  # unique_location_pairs = df.drop_duplicates(subset='location')[['lat', 'lon']]\n\n  # print(unique_location_pairs)\n  # unique_date = df.drop_duplicates(subset='date')[['date']]\n  # print(unique_date)\n\n  # add a 7 days time series to each row\n  df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n  # Group the data by 'lat' and 'lon'\n  grouped = df.groupby(['lat', 'lon'])\n  \n  # fill in the missing values of AMSR and gridMet using polynomial values\n  # Function to perform polynomial interpolation\n  def interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    mask = y > 240\n    #print(\"mask: \", mask)\n    #print(\"x[~mask]: \", x[~mask])\n    #print(\"y[~mask]: \", y[~mask])\n    \n    #y_interp = y.copy()\n\n    # Perform interpolation\n    new_y = np.interp(x, x[~mask], y[~mask])\n    #print(\"new_y: \", new_y)\n\n    # Replace missing values with interpolated values\n    df[column_name] = new_y\n    #print(df[column_name].describe())\n    \n\n  # Group by location and apply interpolation for each column\n  \n  for name, group in grouped:\n    print(f\"Start to filling missing values..{name}\")\n    interpolate_missing_inplace(group, 'SWE')\n    #print(\"interpolated group: \", group.describe())\n    #exit(1)\n\n  \n\n  # Create a new DataFrame to store the time series data for each location\n  result = pd.DataFrame()\n\n  # Define the number of days to consider (7 days in this case)\n  num_days = 7\n\n  # ['date', 'lat', 'lon', 'SWE', 'Flag', 'air_temperature_tmmn',\n  # 'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  # 'relative_humidity_rmax', 'relative_humidity_rmin',\n  # 'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',\n  # 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness']\n  \n\n  for name, group in grouped:\n      group = group.set_index('date')\n      for day in range(1, num_days + 1):\n        for target_col in columns_to_be_time_series:\n          new_column_name = f'{target_col}_{day}'\n          group[new_column_name] = group[target_col].shift(day)\n      result = pd.concat([result, group], axis=0)\n\n  # Reset the index of the result DataFrame\n  result = result.reset_index()\n\n  print(result.describe)\n\n  result.to_csv(target_time_series_csv_path, index=False)\n\n\nconvert_to_time_series()\n\ndf = pd.read_csv(target_time_series_csv_path)\nshutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\nprint(df.columns)\n\ndf.head()\n\ndescription = df.describe(include='all')\n# Print the description\nprint(description)\n\n",
  "history_output" : "today date = 2023-10-16\ntest start date:  2023-05-17\ntest end date:  2023-10-16\n/home/chetana\nStart to filling missing values..(33.358253500000004, -107.8268805)\nStart to filling missing values..(33.650385, -109.3091005)\nStart to filling missing values..(33.9787815, -109.50673)\nStart to filling missing values..(34.3652575, -111.0069165)\nStart to filling missing values..(34.742577999999995, -111.4111585)\nStart to filling missing values..(34.860599500000006, -111.6087875)\nStart to filling missing values..(34.9710915, -111.509973)\nStart to filling missing values..(35.2356645, -108.2670545)\nStart to filling missing values..(36.002412, -106.5512725)\nStart to filling missing values..(36.125859, -105.5271935)\nStart to filling missing values..(36.3070475, -115.678156)\nStart to filling missing values..(36.314286, -118.6156465)\nStart to filling missing values..(36.3432345, -118.5886975)\nStart to filling missing values..(36.364939, -118.2922535)\nStart to filling missing values..(36.408329, -118.5797145)\nStart to filling missing values..(36.466145, -118.5437815)\nStart to filling missing values..(36.473369000000005, -105.1948165)\nStart to filling missing values..(36.5672195, -118.7683605)\nStart to filling missing values..(36.682572, -118.4270005)\nStart to filling missing values..(36.725784, -118.8402255)\nStart to filling missing values..(36.740183, -118.7054785)\nStart to filling missing values..(36.7833635, -118.4270005)\nStart to filling missing values..(37.006073, -106.2727945)\nStart to filling missing values..(37.0347625, -118.912091)\nStart to filling missing values..(37.0706085, -118.7683605)\nStart to filling missing values..(37.0777755, -106.452458)\nStart to filling missing values..(37.092108, -118.498866)\nStart to filling missing values..(37.156571, -119.1995515)\nStart to filling missing values..(37.1780465, -118.561748)\nStart to filling missing values..(37.19236, -118.9390405)\nStart to filling missing values..(37.2209785, -119.2175185)\nStart to filling missing values..(37.35677, -105.2307495)\nStart to filling missing values..(37.36391, -106.5422895)\nStart to filling missing values..(37.385326, -118.912091)\nStart to filling missing values..(37.4067365, -119.4870125)\nStart to filling missing values..(37.4281405, -106.6231375)\nStart to filling missing values..(37.4495385, -118.7593775)\nStart to filling missing values..(37.4566695, -108.4467175)\nStart to filling missing values..(37.4566695, -108.0155265)\nStart to filling missing values..(37.4709305, -119.2893835)\nStart to filling missing values..(37.4780595, -108.096375)\nStart to filling missing values..(37.492316, -107.7011165)\nStart to filling missing values..(37.4994435, -106.865683)\nStart to filling missing values..(37.527945, -113.0550755)\nStart to filling missing values..(37.5564365, -119.2354845)\nStart to filling missing values..(37.5777975, -112.9023615)\nStart to filling missing values..(37.5991525, -107.2339925)\nStart to filling missing values..(37.6205015, -119.028872)\nStart to filling missing values..(37.634731, -119.0827705)\nStart to filling missing values..(37.641844500000005, -108.0065435)\nStart to filling missing values..(37.6631815, -107.7999305)\nStart to filling missing values..(37.698729, -107.7819645)\nStart to filling missing values..(37.720049, -107.5214535)\nStart to filling missing values..(37.7271545, -119.1366695)\nStart to filling missing values..(37.7271545, -107.2699245)\nStart to filling missing values..(37.7626715, -119.7744735)\nStart to filling missing values..(37.7910725, -108.1772235)\nStart to filling missing values..(37.7910725, -108.0155265)\nStart to filling missing values..(37.798171, -119.1995515)\nStart to filling missing values..(37.833654, -119.4510805)\nStart to filling missing values..(37.833654, -108.2221395)\nStart to filling missing values..(37.8478425, -108.2670545)\nStart to filling missing values..(37.8549355, -107.7280655)\nStart to filling missing values..(37.8549355, -105.4373615)\nStart to filling missing values..(37.862028, -119.6576925)\nStart to filling missing values..(37.8691195, -109.4438475)\nStart to filling missing values..(37.8691195, -106.6051715)\nStart to filling missing values..(37.8762105, -119.3432825)\nStart to filling missing values..(37.89748, -119.2624335)\nStart to filling missing values..(37.89748, -107.7190825)\nStart to filling missing values..(37.932915, -107.2070425)\nStart to filling missing values..(37.9754145, -111.8333665)\nStart to filling missing values..(38.0391175, -119.3073495)\nStart to filling missing values..(38.0603395, -119.6666755)\nStart to filling missing values..(38.152231, -119.6666755)\nStart to filling missing values..(38.1663575, -120.0529515)\nStart to filling missing values..(38.194603, -119.8912545)\nStart to filling missing values..(38.279274, -119.6127765)\nStart to filling missing values..(38.483487, -112.390322)\nStart to filling missing values..(38.4905185, -119.8014235)\nStart to filling missing values..(38.4905185, -106.335677)\nStart to filling missing values..(38.50458, -119.62176)\nStart to filling missing values..(38.708156, -120.0439685)\nStart to filling missing values..(38.708156, -106.4255085)\nStart to filling missing values..(38.8202275, -106.5961885)\nStart to filling missing values..(38.890182, -106.9555145)\nStart to filling missing values..(38.911155, -120.3763445)\nStart to filling missing values..(38.9181445, -120.205665)\nStart to filling missing values..(38.9251335, -119.9182045)\nStart to filling missing values..(38.994985, -106.7578855)\nStart to filling missing values..(39.0229065, -107.9975605)\nStart to filling missing values..(39.0438405, -106.6500875)\nStart to filling missing values..(39.050817, -108.0514595)\nStart to filling missing values..(39.0717425, -107.1531435)\nStart to filling missing values..(39.134482, -111.4381075)\nStart to filling missing values..(39.294562, -106.5512725)\nStart to filling missing values..(39.3015135, -106.1110985)\nStart to filling missing values..(39.322364500000006, -111.4920065)\nStart to filling missing values..(39.357102, -106.0571995)\nStart to filling missing values..(39.3848805, -106.1919465)\nStart to filling missing values..(39.4612125, -105.9134685)\nStart to filling missing values..(39.4889485, -106.1649975)\nStart to filling missing values..(39.495881, -111.7255685)\nStart to filling missing values..(39.565167, -115.8398525)\nStart to filling missing values..(39.5859395, -105.805671)\nStart to filling missing values..(39.599784, -106.51534)\nStart to filling missing values..(39.627465, -105.7787215)\nStart to filling missing values..(39.655135, -105.868553)\nStart to filling missing values..(39.67588, -120.61889)\nStart to filling missing values..(39.67588, -110.4319945)\nStart to filling missing values..(39.7657045, -105.9044855)\nStart to filling missing values..(39.7864165, -120.8794015)\nStart to filling missing values..(39.814023, -121.3195755)\nStart to filling missing values..(39.876097, -107.6023015)\nStart to filling missing values..(39.889883, -111.2494615)\nStart to filling missing values..(40.199347, -105.5990585)\nStart to filling missing values..(40.295338, -111.2584445)\nStart to filling missing values..(40.3569745, -116.8639325)\nStart to filling missing values..(40.3980345, -106.6051715)\nStart to filling missing values..(40.3980345, -105.8505865)\nStart to filling missing values..(40.432232, -105.7338055)\nStart to filling missing values..(40.4937435, -112.6149005)\nStart to filling missing values..(40.5347195, -105.8865195)\nStart to filling missing values..(40.548373, -110.3511465)\nStart to filling missing values..(40.5620235, -111.6537035)\nStart to filling missing values..(40.6779395, -110.9530175)\nStart to filling missing values..(40.739226, -110.6206405)\nStart to filling missing values..(40.780052, -121.7866995)\nStart to filling missing values..(40.7936545, -110.8811525)\nStart to filling missing values..(40.8140545, -106.748902)\nStart to filling missing values..(40.841244, -110.0008035)\nStart to filling missing values..(40.882007, -110.5397925)\nStart to filling missing values..(40.895589, -115.211032)\nStart to filling missing values..(40.936319, -111.8154005)\nStart to filling missing values..(40.943105, -115.094251)\nStart to filling missing values..(41.071904, -106.9465315)\nStart to filling missing values..(41.1666475, -121.9394135)\nStart to filling missing values..(41.2004515, -122.5233185)\nStart to filling missing values..(41.227482, -122.8017965)\nStart to filling missing values..(41.328746, -106.3716095)\nStart to filling missing values..(41.3557235, -111.4830235)\nStart to filling missing values..(41.3557235, -106.2278795)\nStart to filling missing values..(41.4635215, -111.5009895)\nStart to filling missing values..(41.6651605, -115.327813)\nStart to filling missing values..(41.6852895, -111.4201415)\nStart to filling missing values..(41.7791425, -116.0284985)\nStart to filling missing values..(41.8929225, -115.857819)\nStart to filling missing values..(41.9664375, -118.1934385)\nStart to filling missing values..(41.993149, -120.1787155)\nStart to filling missing values..(42.079884500000006, -123.3407855)\nStart to filling missing values..(42.1665015, -114.1959355)\nStart to filling missing values..(42.299527, -110.6745395)\nStart to filling missing values..(42.359297, -111.563872)\nStart to filling missing values..(42.379208, -122.3526385)\nStart to filling missing values..(42.5713525, -108.8419765)\nStart to filling missing values..(42.5713525, -106.0931315)\nStart to filling missing values..(42.696921, -120.798553)\nStart to filling missing values..(42.756312, -118.6875125)\nStart to filling missing values..(42.7629075, -116.8998645)\nStart to filling missing values..(42.7892825, -121.9753465)\nStart to filling missing values..(42.96702, -110.6116575)\nStart to filling missing values..(43.0064475, -109.7582585)\nStart to filling missing values..(43.190109, -122.1370425)\nStart to filling missing values..(43.2686525, -115.3457795)\nStart to filling missing values..(43.275193, -109.4438475)\nStart to filling missing values..(43.3862775, -110.1265675)\nStart to filling missing values..(43.3862775, -109.8750395)\nStart to filling missing values..(43.464568, -107.2429755)\nStart to filling missing values..(43.484125, -114.8247565)\nStart to filling missing values..(43.51019049999999, -121.9753465)\nStart to filling missing values..(43.5687975, -111.213529)\nStart to filling missing values..(43.607837, -113.9264415)\nStart to filling missing values..(43.672847, -109.3809655)\nStart to filling missing values..(43.8221025, -114.267801)\nStart to filling missing values..(43.8998275, -122.029245)\nStart to filling missing values..(43.9386515, -110.4409775)\nStart to filling missing values..(43.9515875, -115.273914)\nStart to filling missing values..(44.164622, -107.1261945)\nStart to filling missing values..(44.2483345, -118.5168325)\nStart to filling missing values..(44.2612025, -119.0198885)\nStart to filling missing values..(44.3768905, -116.3339265)\nStart to filling missing values..(44.415402, -113.3964355)\nStart to filling missing values..(44.4474755, -119.9271875)\nStart to filling missing values..(44.473122, -112.9832105)\nStart to filling missing values..(44.479532, -110.036736)\nStart to filling missing values..(44.581994, -107.1980595)\nStart to filling missing values..(44.5883915, -111.1147145)\nStart to filling missing values..(44.613976, -122.2268745)\nStart to filling missing values..(44.7225845, -110.512843)\nStart to filling missing values..(44.7863765, -111.7076025)\nStart to filling missing values..(44.799126, -107.8448465)\nStart to filling missing values..(44.8055, -109.6594435)\nStart to filling missing values..(44.830989, -118.1844555)\nStart to filling missing values..(44.843729, -114.267801)\nStart to filling missing values..(44.97733, -111.9501475)\nStart to filling missing values..(45.0408405, -121.9304305)\nStart to filling missing values..(45.1042805, -119.4959955)\nStart to filling missing values..(45.186647, -115.9746)\nStart to filling missing values..(45.218295, -110.2343655)\nStart to filling missing values..(45.262572500000005, -117.1693595)\nStart to filling missing values..(45.363648, -118.4629335)\nStart to filling missing values..(45.407812, -112.9562605)\nStart to filling missing values..(45.426729, -121.8585655)\nStart to filling missing values..(45.502333, -110.9620005)\nStart to filling missing values..(45.5966955, -111.9591305)\nStart to filling missing values..(45.621832, -121.7058515)\nStart to filling missing values..(45.6720715, -113.9533905)\nStart to filling missing values..(46.091057500000005, -110.4319945)\nStart to filling missing values..(46.1408745, -114.5013625)\nStart to filling missing values..(46.178208, -121.9304305)\nStart to filling missing values..(46.23416, -117.3939385)\nStart to filling missing values..(46.2403735, -113.7737275)\nStart to filling missing values..(46.3582945, -121.0770305)\nStart to filling missing values..(46.3582945, -112.2645575)\nStart to filling missing values..(46.482148, -110.7104725)\nStart to filling missing values..(46.494518, -115.7949365)\nStart to filling missing values..(46.5625015, -115.2918805)\nStart to filling missing values..(46.624231, -121.382458)\nStart to filling missing values..(46.7843995, -121.7507675)\nStart to filling missing values..(46.79055, -109.5157135)\nStart to filling missing values..(46.8397315, -112.507103)\nStart to filling missing values..(46.913419, -110.8542025)\nStart to filling missing values..(47.0666095, -121.5890705)\nStart to filling missing values..(47.1766355, -114.330683)\nStart to filling missing values..(47.2010545, -121.7777165)\nStart to filling missing values..(47.2742445, -121.3375425)\nStart to filling missing values..(47.347334, -120.681772)\nStart to filling missing values..(47.3595055, -121.5711045)\nStart to filling missing values..(47.456778, -115.7051055)\nStart to filling missing values..(47.7112645, -123.4485835)\nStart to filling missing values..(47.7777115, -121.6968685)\nStart to filling missing values..(47.801853, -123.1251895)\nStart to filling missing values..(47.880235, -117.088511)\nStart to filling missing values..(47.93443, -123.4216335)\nStart to filling missing values..(48.126665, -115.624257)\nStart to filling missing values..(48.1326605, -113.0191425)\nStart to filling missing values..(48.306233500000005, -116.0734145)\nStart to filling missing values..(48.4315575, -113.9354245)\nStart to filling missing values..(48.5208855, -120.735671)\nStart to filling missing values..(48.693141, -121.912464)\nStart to filling missing values..(48.7227805, -120.6548225)\nStart to filling missing values..(48.929770000000005, -121.1938115)\nStart to filling missing values..(48.9710655, -115.9566335)\n<bound method NDFrame.describe of                date        lat         lon  SWE  Flag  swe_value  Unnamed: 0  \\\n0        2019-01-01  33.358254 -107.826881  255   255        4.7      555165   \n1        2019-01-01  33.358254 -107.826881  255   255        4.7      557720   \n2        2019-01-01  33.358254 -107.826881  255   255        4.7      716495   \n3        2019-01-02  33.358254 -107.826881    0   241        4.6      555166   \n4        2019-01-02  33.358254 -107.826881    0   241        4.6      557721   \n...             ...        ...         ...  ...   ...        ...         ...   \n1022695  2022-12-30  48.971066 -115.956633    0   241        NaN      253673   \n1022696  2022-12-30  48.971066 -115.956633    0   241        NaN       48543   \n1022697  2022-12-31  48.971066 -115.956633    0   241        NaN      244184   \n1022698  2022-12-31  48.971066 -115.956633    0   241        NaN      253674   \n1022699  2022-12-31  48.971066 -115.956633    0   241        NaN       48544   \n         air_temperature_tmmn  potential_evapotranspiration  \\\n0                       266.5                           3.0   \n1                       266.5                           2.8   \n2                       266.5                           1.2   \n3                       262.7                           0.8   \n4                       262.7                           0.9   \n...                       ...                           ...   \n1022695                 266.5                           0.9   \n1022696                 266.5                           6.6   \n1022697                 267.1                           3.3   \n1022698                 267.1                           0.2   \n1022699                 267.1                           5.2   \n         mean_vapor_pressure_deficit  relative_humidity_rmax  \\\n0                               0.23                    41.8   \n1                               0.18                    41.8   \n2                               0.30                    41.8   \n3                               0.31                    48.4   \n4                               0.29                    48.4   \n...                              ...                     ...   \n1022695                         0.00                    94.1   \n1022696                         0.00                    94.1   \n1022697                         0.00                   100.0   \n1022698                         0.00                   100.0   \n1022699                         0.00                   100.0   \n         relative_humidity_rmin  precipitation_amount  air_temperature_tmmx  \\\n0                     16.500000                   0.0                 294.5   \n1                     18.800001                   0.0                 296.1   \n2                     41.300000                   2.2                 293.5   \n3                     10.000000                   0.0                 297.0   \n4                     15.800000                   1.2                 295.7   \n...                         ...                   ...                   ...   \n1022695               54.900000                   0.0                 268.7   \n1022696               54.900000                   0.0                 268.7   \n1022697               62.300000                   3.9                 267.2   \n1022698               62.300000                   3.9                 267.2   \n1022699               62.300000                   3.9                 267.2   \n         wind_speed  elevation     slope   curvature     aspect  eastness  \\\n0               6.5  2419.5283  51.38327  -2909.2551  276.38900 -0.782283   \n1               3.9  2419.5283  51.38327  -2909.2551  276.38900 -0.782283   \n2               1.5  2419.5283  51.38327  -2909.2551  276.38900 -0.782283   \n3               4.9  2419.5283  51.38327  -2909.2551  276.38900 -0.782283   \n4               3.6  2419.5283  51.38327  -2909.2551  276.38900 -0.782283   \n...             ...        ...       ...         ...        ...       ...   \n1022695         1.9  1756.9988  60.60032 -11614.7705  345.47733 -0.245697   \n1022696         1.9  1756.9988  60.60032 -11614.7705  345.47733 -0.245697   \n1022697         1.7  1756.9988  60.60032 -11614.7705  345.47733 -0.245697   \n1022698         1.7  1756.9988  60.60032 -11614.7705  345.47733 -0.245697   \n1022699         1.7  1756.9988  60.60032 -11614.7705  345.47733 -0.245697   \n         northness  SWE_1  Flag_1  air_temperature_tmmn_1  \\\n0         0.110823    NaN     NaN                     NaN   \n1         0.110823  255.0   255.0                   266.5   \n2         0.110823  255.0   255.0                   266.5   \n3         0.110823  255.0   255.0                   266.5   \n4         0.110823    0.0   241.0                   262.7   \n...            ...    ...     ...                     ...   \n1022695   0.769164    0.0   241.0                   266.5   \n1022696   0.769164    0.0   241.0                   266.5   \n1022697   0.769164    0.0   241.0                   266.5   \n1022698   0.769164    0.0   241.0                   267.1   \n1022699   0.769164    0.0   241.0                   267.1   \n         potential_evapotranspiration_1  mean_vapor_pressure_deficit_1  \\\n0                                   NaN                            NaN   \n1                                   3.0                           0.23   \n2                                   2.8                           0.18   \n3                                   1.2                           0.30   \n4                                   0.8                           0.31   \n...                                 ...                            ...   \n1022695                             2.9                           0.00   \n1022696                             0.9                           0.00   \n1022697                             6.6                           0.00   \n1022698                             3.3                           0.00   \n1022699                             0.2                           0.00   \n         relative_humidity_rmax_1  relative_humidity_rmin_1  \\\n0                             NaN                       NaN   \n1                            41.8                 16.500000   \n2                            41.8                 18.800001   \n3                            41.8                 41.300000   \n4                            48.4                 10.000000   \n...                           ...                       ...   \n1022695                      94.1                 54.900000   \n1022696                      94.1                 54.900000   \n1022697                      94.1                 54.900000   \n1022698                     100.0                 62.300000   \n1022699                     100.0                 62.300000   \n         precipitation_amount_1  air_temperature_tmmx_1  wind_speed_1  SWE_2  \\\n0                           NaN                     NaN           NaN    NaN   \n1                           0.0                   294.5           6.5    NaN   \n2                           0.0                   296.1           3.9  255.0   \n3                           2.2                   293.5           1.5  255.0   \n4                           0.0                   297.0           4.9  255.0   \n...                         ...                     ...           ...    ...   \n1022695                     0.0                   268.7           1.9    0.0   \n1022696                     0.0                   268.7           1.9    0.0   \n1022697                     0.0                   268.7           1.9    0.0   \n1022698                     3.9                   267.2           1.7    0.0   \n1022699                     3.9                   267.2           1.7    0.0   \n         Flag_2  air_temperature_tmmn_2  potential_evapotranspiration_2  \\\n0           NaN                     NaN                             NaN   \n1           NaN                     NaN                             NaN   \n2         255.0                   266.5                             3.0   \n3         255.0                   266.5                             2.8   \n4         255.0                   266.5                             1.2   \n...         ...                     ...                             ...   \n1022695   241.0                   264.6                             6.7   \n1022696   241.0                   266.5                             2.9   \n1022697   241.0                   266.5                             0.9   \n1022698   241.0                   266.5                             6.6   \n1022699   241.0                   267.1                             3.3   \n         mean_vapor_pressure_deficit_2  relative_humidity_rmax_2  \\\n0                                  NaN                       NaN   \n1                                  NaN                       NaN   \n2                                 0.23                      41.8   \n3                                 0.18                      41.8   \n4                                 0.30                      41.8   \n...                                ...                       ...   \n1022695                           0.00                     100.0   \n1022696                           0.00                      94.1   \n1022697                           0.00                      94.1   \n1022698                           0.00                      94.1   \n1022699                           0.00                     100.0   \n         relative_humidity_rmin_2  precipitation_amount_2  \\\n0                             NaN                     NaN   \n1                             NaN                     NaN   \n2                       16.500000                     0.0   \n3                       18.800001                     0.0   \n4                       41.300000                     2.2   \n...                           ...                     ...   \n1022695                 68.200005                     2.4   \n1022696                 54.900000                     0.0   \n1022697                 54.900000                     0.0   \n1022698                 54.900000                     0.0   \n1022699                 62.300000                     3.9   \n         air_temperature_tmmx_2  wind_speed_2  SWE_3  Flag_3  \\\n0                           NaN           NaN    NaN     NaN   \n1                           NaN           NaN    NaN     NaN   \n2                         294.5           6.5    NaN     NaN   \n3                         296.1           3.9  255.0   255.0   \n4                         293.5           1.5  255.0   255.0   \n...                         ...           ...    ...     ...   \n1022695                   268.7           2.8    0.0   241.0   \n1022696                   268.7           1.9    0.0   241.0   \n1022697                   268.7           1.9    0.0   241.0   \n1022698                   268.7           1.9    0.0   241.0   \n1022699                   267.2           1.7    0.0   241.0   \n         air_temperature_tmmn_3  potential_evapotranspiration_3  \\\n0                           NaN                             NaN   \n1                           NaN                             NaN   \n2                           NaN                             NaN   \n3                         266.5                             3.0   \n4                         266.5                             2.8   \n...                         ...                             ...   \n1022695                   264.6                             1.2   \n1022696                   264.6                             6.7   \n1022697                   266.5                             2.9   \n1022698                   266.5                             0.9   \n1022699                   266.5                             6.6   \n         mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\n0                                  NaN                       NaN   \n1                                  NaN                       NaN   \n2                                  NaN                       NaN   \n3                                 0.23                      41.8   \n4                                 0.18                      41.8   \n...                                ...                       ...   \n1022695                           0.00                     100.0   \n1022696                           0.00                     100.0   \n1022697                           0.00                      94.1   \n1022698                           0.00                      94.1   \n1022699                           0.00                      94.1   \n         relative_humidity_rmin_3  precipitation_amount_3  \\\n0                             NaN                     NaN   \n1                             NaN                     NaN   \n2                             NaN                     NaN   \n3                       16.500000                     0.0   \n4                       18.800001                     0.0   \n...                           ...                     ...   \n1022695                 68.200005                     2.4   \n1022696                 68.200005                     2.4   \n1022697                 54.900000                     0.0   \n1022698                 54.900000                     0.0   \n1022699                 54.900000                     0.0   \n         air_temperature_tmmx_3  wind_speed_3  SWE_4  Flag_4  \\\n0                           NaN           NaN    NaN     NaN   \n1                           NaN           NaN    NaN     NaN   \n2                           NaN           NaN    NaN     NaN   \n3                         294.5           6.5    NaN     NaN   \n4                         296.1           3.9  255.0   255.0   \n...                         ...           ...    ...     ...   \n1022695                   268.7           2.8    0.0   241.0   \n1022696                   268.7           2.8    0.0   241.0   \n1022697                   268.7           1.9    0.0   241.0   \n1022698                   268.7           1.9    0.0   241.0   \n1022699                   268.7           1.9    0.0   241.0   \n         air_temperature_tmmn_4  potential_evapotranspiration_4  \\\n0                           NaN                             NaN   \n1                           NaN                             NaN   \n2                           NaN                             NaN   \n3                           NaN                             NaN   \n4                         266.5                             3.0   \n...                         ...                             ...   \n1022695                   264.6                             1.5   \n1022696                   264.6                             1.2   \n1022697                   264.6                             6.7   \n1022698                   266.5                             2.9   \n1022699                   266.5                             0.9   \n         mean_vapor_pressure_deficit_4  relative_humidity_rmax_4  \\\n0                                  NaN                       NaN   \n1                                  NaN                       NaN   \n2                                  NaN                       NaN   \n3                                  NaN                       NaN   \n4                                 0.23                      41.8   \n...                                ...                       ...   \n1022695                           0.00                     100.0   \n1022696                           0.00                     100.0   \n1022697                           0.00                     100.0   \n1022698                           0.00                      94.1   \n1022699                           0.00                      94.1   \n         relative_humidity_rmin_4  precipitation_amount_4  \\\n0                             NaN                     NaN   \n1                             NaN                     NaN   \n2                             NaN                     NaN   \n3                             NaN                     NaN   \n4                       16.500000                     0.0   \n...                           ...                     ...   \n1022695                 68.200005                     2.4   \n1022696                 68.200005                     2.4   \n1022697                 68.200005                     2.4   \n1022698                 54.900000                     0.0   \n1022699                 54.900000                     0.0   \n         air_temperature_tmmx_4  wind_speed_4  SWE_5  Flag_5  \\\n0                           NaN           NaN    NaN     NaN   \n1                           NaN           NaN    NaN     NaN   \n2                           NaN           NaN    NaN     NaN   \n3                           NaN           NaN    NaN     NaN   \n4                         294.5           6.5    NaN     NaN   \n...                         ...           ...    ...     ...   \n1022695                   268.7           2.8    0.0   241.0   \n1022696                   268.7           2.8    0.0   241.0   \n1022697                   268.7           2.8    0.0   241.0   \n1022698                   268.7           1.9    0.0   241.0   \n1022699                   268.7           1.9    0.0   241.0   \n         air_temperature_tmmn_5  potential_evapotranspiration_5  \\\n0                           NaN                             NaN   \n1                           NaN                             NaN   \n2                           NaN                             NaN   \n3                           NaN                             NaN   \n4                           NaN                             NaN   \n...                         ...                             ...   \n1022695                   266.2                             6.6   \n1022696                   264.6                             1.5   \n1022697                   264.6                             1.2   \n1022698                   264.6                             6.7   \n1022699                   266.5                             2.9   \n         mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\n0                                  NaN                       NaN   \n1                                  NaN                       NaN   \n2                                  NaN                       NaN   \n3                                  NaN                       NaN   \n4                                  NaN                       NaN   \n...                                ...                       ...   \n1022695                            0.0                     100.0   \n1022696                            0.0                     100.0   \n1022697                            0.0                     100.0   \n1022698                            0.0                     100.0   \n1022699                            0.0                      94.1   \n         relative_humidity_rmin_5  precipitation_amount_5  \\\n0                             NaN                     NaN   \n1                             NaN                     NaN   \n2                             NaN                     NaN   \n3                             NaN                     NaN   \n4                             NaN                     NaN   \n...                           ...                     ...   \n1022695                 77.100000                     0.0   \n1022696                 68.200005                     2.4   \n1022697                 68.200005                     2.4   \n1022698                 68.200005                     2.4   \n1022699                 54.900000                     0.0   \n         air_temperature_tmmx_5  wind_speed_5  SWE_6  Flag_6  \\\n0                           NaN           NaN    NaN     NaN   \n1                           NaN           NaN    NaN     NaN   \n2                           NaN           NaN    NaN     NaN   \n3                           NaN           NaN    NaN     NaN   \n4                           NaN           NaN    NaN     NaN   \n...                         ...           ...    ...     ...   \n1022695                   267.8           3.1    0.0   241.0   \n1022696                   268.7           2.8    0.0   241.0   \n1022697                   268.7           2.8    0.0   241.0   \n1022698                   268.7           2.8    0.0   241.0   \n1022699                   268.7           1.9    0.0   241.0   \n         air_temperature_tmmn_6  potential_evapotranspiration_6  \\\n0                           NaN                             NaN   \n1                           NaN                             NaN   \n2                           NaN                             NaN   \n3                           NaN                             NaN   \n4                           NaN                             NaN   \n...                         ...                             ...   \n1022695                   266.2                             1.1   \n1022696                   266.2                             6.6   \n1022697                   264.6                             1.5   \n1022698                   264.6                             1.2   \n1022699                   264.6                             6.7   \n         mean_vapor_pressure_deficit_6  relative_humidity_rmax_6  \\\n0                                  NaN                       NaN   \n1                                  NaN                       NaN   \n2                                  NaN                       NaN   \n3                                  NaN                       NaN   \n4                                  NaN                       NaN   \n...                                ...                       ...   \n1022695                            0.0                     100.0   \n1022696                            0.0                     100.0   \n1022697                            0.0                     100.0   \n1022698                            0.0                     100.0   \n1022699                            0.0                     100.0   \n         relative_humidity_rmin_6  precipitation_amount_6  \\\n0                             NaN                     NaN   \n1                             NaN                     NaN   \n2                             NaN                     NaN   \n3                             NaN                     NaN   \n4                             NaN                     NaN   \n...                           ...                     ...   \n1022695                 77.100000                     0.0   \n1022696                 77.100000                     0.0   \n1022697                 68.200005                     2.4   \n1022698                 68.200005                     2.4   \n1022699                 68.200005                     2.4   \n         air_temperature_tmmx_6  wind_speed_6  SWE_7  Flag_7  \\\n0                           NaN           NaN    NaN     NaN   \n1                           NaN           NaN    NaN     NaN   \n2                           NaN           NaN    NaN     NaN   \n3                           NaN           NaN    NaN     NaN   \n4                           NaN           NaN    NaN     NaN   \n...                         ...           ...    ...     ...   \n1022695                   267.8           3.1    0.0   241.0   \n1022696                   267.8           3.1    0.0   241.0   \n1022697                   268.7           2.8    0.0   241.0   \n1022698                   268.7           2.8    0.0   241.0   \n1022699                   268.7           2.8    0.0   241.0   \n         air_temperature_tmmn_7  potential_evapotranspiration_7  \\\n0                           NaN                             NaN   \n1                           NaN                             NaN   \n2                           NaN                             NaN   \n3                           NaN                             NaN   \n4                           NaN                             NaN   \n...                         ...                             ...   \n1022695                   266.2                             3.5   \n1022696                   266.2                             1.1   \n1022697                   266.2                             6.6   \n1022698                   264.6                             1.5   \n1022699                   264.6                             1.2   \n         mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\n0                                  NaN                       NaN   \n1                                  NaN                       NaN   \n2                                  NaN                       NaN   \n3                                  NaN                       NaN   \n4                                  NaN                       NaN   \n...                                ...                       ...   \n1022695                            0.0                     100.0   \n1022696                            0.0                     100.0   \n1022697                            0.0                     100.0   \n1022698                            0.0                     100.0   \n1022699                            0.0                     100.0   \n         relative_humidity_rmin_7  precipitation_amount_7  \\\n0                             NaN                     NaN   \n1                             NaN                     NaN   \n2                             NaN                     NaN   \n3                             NaN                     NaN   \n4                             NaN                     NaN   \n...                           ...                     ...   \n1022695                 77.100000                     0.0   \n1022696                 77.100000                     0.0   \n1022697                 77.100000                     0.0   \n1022698                 68.200005                     2.4   \n1022699                 68.200005                     2.4   \n         air_temperature_tmmx_7  wind_speed_7  \n0                           NaN           NaN  \n1                           NaN           NaN  \n2                           NaN           NaN  \n3                           NaN           NaN  \n4                           NaN           NaN  \n...                         ...           ...  \n1022695                   267.8           3.1  \n1022696                   267.8           3.1  \n1022697                   267.8           3.1  \n1022698                   268.7           2.8  \n1022699                   268.7           2.8  \n[1022700 rows x 91 columns]>\nIndex(['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'Unnamed: 0',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'elevation', 'slope', 'curvature',\n       'aspect', 'eastness', 'northness', 'SWE_1', 'Flag_1',\n       'air_temperature_tmmn_1', 'potential_evapotranspiration_1',\n       'mean_vapor_pressure_deficit_1', 'relative_humidity_rmax_1',\n       'relative_humidity_rmin_1', 'precipitation_amount_1',\n       'air_temperature_tmmx_1', 'wind_speed_1', 'SWE_2', 'Flag_2',\n       'air_temperature_tmmn_2', 'potential_evapotranspiration_2',\n       'mean_vapor_pressure_deficit_2', 'relative_humidity_rmax_2',\n       'relative_humidity_rmin_2', 'precipitation_amount_2',\n       'air_temperature_tmmx_2', 'wind_speed_2', 'SWE_3', 'Flag_3',\n       'air_temperature_tmmn_3', 'potential_evapotranspiration_3',\n       'mean_vapor_pressure_deficit_3', 'relative_humidity_rmax_3',\n       'relative_humidity_rmin_3', 'precipitation_amount_3',\n       'air_temperature_tmmx_3', 'wind_speed_3', 'SWE_4', 'Flag_4',\n       'air_temperature_tmmn_4', 'potential_evapotranspiration_4',\n       'mean_vapor_pressure_deficit_4', 'relative_humidity_rmax_4',\n       'relative_humidity_rmin_4', 'precipitation_amount_4',\n       'air_temperature_tmmx_4', 'wind_speed_4', 'SWE_5', 'Flag_5',\n       'air_temperature_tmmn_5', 'potential_evapotranspiration_5',\n       'mean_vapor_pressure_deficit_5', 'relative_humidity_rmax_5',\n       'relative_humidity_rmin_5', 'precipitation_amount_5',\n       'air_temperature_tmmx_5', 'wind_speed_5', 'SWE_6', 'Flag_6',\n       'air_temperature_tmmn_6', 'potential_evapotranspiration_6',\n       'mean_vapor_pressure_deficit_6', 'relative_humidity_rmax_6',\n       'relative_humidity_rmin_6', 'precipitation_amount_6',\n       'air_temperature_tmmx_6', 'wind_speed_6', 'SWE_7', 'Flag_7',\n       'air_temperature_tmmn_7', 'potential_evapotranspiration_7',\n       'mean_vapor_pressure_deficit_7', 'relative_humidity_rmax_7',\n       'relative_humidity_rmin_7', 'precipitation_amount_7',\n       'air_temperature_tmmx_7', 'wind_speed_7'],\n      dtype='object')\n              date           lat           lon           SWE          Flag  \\\ncount      1022700  1.022700e+06  1.022700e+06  1.022700e+06  1.022700e+06   \nunique        1461           NaN           NaN           NaN           NaN   \ntop     2019-01-01           NaN           NaN           NaN           NaN   \nfreq           700           NaN           NaN           NaN           NaN   \nmean           NaN  4.165838e+01 -1.141534e+02  5.046323e+01  2.434436e+02   \nstd            NaN  3.632464e+00  5.423376e+00  9.547185e+01  5.313797e+00   \nmin            NaN  3.335825e+01 -1.234486e+02  0.000000e+00  2.410000e+02   \n25%            NaN  3.891814e+01 -1.197812e+02  0.000000e+00  2.410000e+02   \n50%            NaN  4.107190e+01 -1.137737e+02  0.000000e+00  2.410000e+02   \n75%            NaN  4.461398e+01 -1.100367e+02  3.500000e+01  2.410000e+02   \nmax            NaN  4.897107e+01 -1.051948e+02  2.550000e+02  2.550000e+02   \n           swe_value    Unnamed: 0  air_temperature_tmmn  \\\ncount   1.008700e+06  1.022700e+06          1.022700e+06   \nunique           NaN           NaN                   NaN   \ntop              NaN           NaN                   NaN   \nfreq             NaN           NaN                   NaN   \nmean    3.333796e+00  5.113495e+05          2.720187e+02   \nstd     5.245389e+00  2.952282e+05          8.384982e+00   \nmin     0.000000e+00  0.000000e+00          2.328000e+02   \n25%     0.000000e+00  2.556748e+05          2.663000e+02   \n50%     0.000000e+00  5.113495e+05          2.722000e+02   \n75%     6.300000e+00  7.670242e+05          2.784000e+02   \nmax     2.260000e+01  1.022699e+06          2.983000e+02   \n        potential_evapotranspiration  mean_vapor_pressure_deficit  \\\ncount                   1.022700e+06                 1.022700e+06   \nunique                           NaN                          NaN   \ntop                              NaN                          NaN   \nfreq                             NaN                          NaN   \nmean                    3.943372e+00                 6.258550e-01   \nstd                     2.478664e+00                 5.233133e-01   \nmin                     0.000000e+00                 0.000000e+00   \n25%                     1.900000e+00                 2.100000e-01   \n50%                     3.500000e+00                 4.700000e-01   \n75%                     5.800000e+00                 9.300000e-01   \nmax                     1.510000e+01                 3.870000e+00   \n        relative_humidity_rmax  relative_humidity_rmin  precipitation_amount  \\\ncount             1.022700e+06            1.022700e+06          1.022700e+06   \nunique                     NaN                     NaN                   NaN   \ntop                        NaN                     NaN                   NaN   \nfreq                       NaN                     NaN                   NaN   \nmean              7.123571e+01            3.578010e+01          2.689152e+00   \nstd               2.030150e+01            1.888091e+01          7.456402e+00   \nmin               8.200000e+00            1.000000e+00          0.000000e+00   \n25%               5.560000e+01            2.130000e+01          0.000000e+00   \n50%               7.240000e+01            3.160000e+01          0.000000e+00   \n75%               8.820001e+01            4.740000e+01          2.200000e+00   \nmax               1.000000e+02            1.000000e+02          5.042000e+02   \n        air_temperature_tmmx    wind_speed     elevation         slope  \\\ncount           1.022700e+06  1.022700e+06  1.022700e+06  1.022700e+06   \nunique                   NaN           NaN           NaN           NaN   \ntop                      NaN           NaN           NaN           NaN   \nfreq                     NaN           NaN           NaN           NaN   \nmean            2.837481e+02  4.214964e+00  2.397170e+03  6.243769e+01   \nstd             9.912702e+00  2.043559e+00  6.647262e+02  1.650521e+01   \nmin             2.444000e+02  5.000000e-01  7.584437e+02  4.277402e+00   \n25%             2.759000e+02  2.800000e+00  1.948688e+03  5.213456e+01   \n50%             2.831000e+02  3.700000e+00  2.481006e+03  6.768107e+01   \n75%             2.920000e+02  5.200000e+00  2.895791e+03  7.504661e+01   \nmax             3.144000e+02  1.860000e+01  3.823385e+03  8.368555e+01   \n           curvature        aspect      eastness     northness         SWE_1  \\\ncount   1.022700e+06  1.022700e+06  1.022700e+06  1.022700e+06  1.022457e+06   \nunique           NaN           NaN           NaN           NaN           NaN   \ntop              NaN           NaN           NaN           NaN           NaN   \nfreq             NaN           NaN           NaN           NaN           NaN   \nmean   -3.909783e+03  1.722213e+02  6.965357e-02 -4.509867e-02  5.046829e+01   \nstd     4.385982e+03  1.031039e+02  5.171924e-01  6.412035e-01  9.547557e+01   \nmin    -1.917768e+04  4.159291e-01 -7.853438e-01 -7.853694e-01  0.000000e+00   \n25%    -6.479865e+03  9.217068e+01 -3.907275e-01 -7.356204e-01  0.000000e+00   \n50%    -3.710969e+03  1.691301e+02  1.334633e-01 -1.913248e-01  0.000000e+00   \n75%    -5.754078e+02  2.498582e+02  5.767317e-01  6.495535e-01  3.500000e+01   \nmax     9.069726e+03  3.586563e+02  7.853980e-01  7.853850e-01  2.550000e+02   \n              Flag_1  air_temperature_tmmn_1  potential_evapotranspiration_1  \\\ncount   1.022457e+06            1.022457e+06                    1.022457e+06   \nunique           NaN                     NaN                             NaN   \ntop              NaN                     NaN                             NaN   \nfreq             NaN                     NaN                             NaN   \nmean    2.434439e+02            2.720198e+02                    3.943422e+00   \nstd     5.314013e+00            8.385519e+00                    2.478670e+00   \nmin     2.410000e+02            2.328000e+02                    0.000000e+00   \n25%     2.410000e+02            2.663000e+02                    1.900000e+00   \n50%     2.410000e+02            2.722000e+02                    3.500000e+00   \n75%     2.410000e+02            2.784000e+02                    5.800000e+00   \nmax     2.550000e+02            2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\ncount                    1.022457e+06              1.022457e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.259842e-01              7.123178e+01   \nstd                      5.233073e-01              2.030135e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.560000e+01   \n50%                      4.700000e-01              7.240000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_1  precipitation_amount_1  \\\ncount               1.022457e+06            1.022457e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.577455e+01            2.688369e+00   \nstd                 1.887860e+01            7.455937e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.740000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_1  wind_speed_1         SWE_2        Flag_2  \\\ncount             1.022457e+06  1.022457e+06  1.022214e+06  1.022214e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837507e+02  4.214984e+00  5.047216e+01  2.434441e+02   \nstd               9.912255e+00  2.043594e+00  9.547914e+01  5.314206e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  3.500000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  2.550000e+02  2.550000e+02   \n        air_temperature_tmmn_2  potential_evapotranspiration_2  \\\ncount             1.022214e+06                    1.022214e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720209e+02                    3.943420e+00   \nstd               8.385815e+00                    2.478640e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_2  relative_humidity_rmax_2  \\\ncount                    1.022214e+06              1.022214e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.261075e-01              7.122720e+01   \nstd                      5.233070e-01              2.030094e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.560000e+01   \n50%                      4.700000e-01              7.240000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_2  precipitation_amount_2  \\\ncount               1.022214e+06            1.022214e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.576907e+01            2.687716e+00   \nstd                 1.887661e+01            7.456001e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.740000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_2  wind_speed_2         SWE_3        Flag_3  \\\ncount             1.022214e+06  1.022214e+06  1.021971e+06  1.021971e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837536e+02  4.214784e+00  5.047569e+01  2.434443e+02   \nstd               9.911446e+00  2.043331e+00  9.548285e+01  5.314398e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  3.500000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  2.550000e+02  2.550000e+02   \n        air_temperature_tmmn_3  potential_evapotranspiration_3  \\\ncount             1.021971e+06                    1.021971e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720225e+02                    3.943376e+00   \nstd               8.385741e+00                    2.478685e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\ncount                    1.021971e+06              1.021971e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.262307e-01              7.122289e+01   \nstd                      5.233067e-01              2.030066e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.550000e+01   \n50%                      4.700000e-01              7.230000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_3  precipitation_amount_3  \\\ncount               1.021971e+06            1.021971e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.576342e+01            2.686752e+00   \nstd                 1.887456e+01            7.455918e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.730000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_3  wind_speed_3         SWE_4        Flag_4  \\\ncount             1.021971e+06  1.021971e+06  1.021728e+06  1.021728e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837567e+02  4.214625e+00  5.047501e+01  2.434443e+02   \nstd               9.910225e+00  2.043209e+00  9.548223e+01  5.314356e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  3.500000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  2.550000e+02  2.550000e+02   \n        air_temperature_tmmn_4  potential_evapotranspiration_4  \\\ncount             1.021728e+06                    1.021728e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720240e+02                    3.943264e+00   \nstd               8.385866e+00                    2.478656e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_4  relative_humidity_rmax_4  \\\ncount                    1.021728e+06              1.021728e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.263553e-01              7.121851e+01   \nstd                      5.233051e-01              2.030000e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.550000e+01   \n50%                      4.700000e-01              7.230000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_4  precipitation_amount_4  \\\ncount               1.021728e+06            1.021728e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.575787e+01            2.686033e+00   \nstd                 1.887263e+01            7.455973e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.730000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_4  wind_speed_4         SWE_5        Flag_5  \\\ncount             1.021728e+06  1.021728e+06  1.021485e+06  1.021485e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837597e+02  4.214386e+00  5.047484e+01  2.434443e+02   \nstd               9.909216e+00  2.042915e+00  9.548200e+01  5.314338e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  3.500000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  2.550000e+02  2.550000e+02   \n        air_temperature_tmmn_5  potential_evapotranspiration_5  \\\ncount             1.021485e+06                    1.021485e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720251e+02                    3.943198e+00   \nstd               8.386260e+00                    2.478648e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\ncount                    1.021485e+06              1.021485e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.264743e-01              7.121428e+01   \nstd                      5.233079e-01              2.029947e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.550000e+01   \n50%                      4.700000e-01              7.230000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_5  precipitation_amount_5  \\\ncount               1.021485e+06            1.021485e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.575236e+01            2.684510e+00   \nstd                 1.887073e+01            7.454676e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.730000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_5  wind_speed_5         SWE_6        Flag_6  \\\ncount             1.021485e+06  1.021485e+06  1.021242e+06  1.021242e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837628e+02  4.213888e+00  5.046933e+01  2.434440e+02   \nstd               9.908198e+00  2.042324e+00  9.547787e+01  5.314084e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  3.500000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  2.550000e+02  2.550000e+02   \n        air_temperature_tmmn_6  potential_evapotranspiration_6  \\\ncount             1.021242e+06                    1.021242e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720261e+02                    3.943110e+00   \nstd               8.386646e+00                    2.478642e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_6  relative_humidity_rmax_6  \\\ncount                    1.021242e+06              1.021242e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.265698e-01              7.120906e+01   \nstd                      5.233230e-01              2.029860e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.550000e+01   \n50%                      4.700000e-01              7.230000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_6  precipitation_amount_6  \\\ncount               1.021242e+06            1.021242e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.574670e+01            2.683368e+00   \nstd                 1.886860e+01            7.454296e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.730000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_6  wind_speed_6         SWE_7        Flag_7  \\\ncount             1.021242e+06  1.021242e+06  1.020999e+06  1.020999e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837659e+02  4.213170e+00  5.046308e+01  2.434436e+02   \nstd               9.907047e+00  2.041234e+00  9.547252e+01  5.313772e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  3.500000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  2.550000e+02  2.550000e+02   \n        air_temperature_tmmn_7  potential_evapotranspiration_7  \\\ncount             1.020999e+06                    1.020999e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720272e+02                    3.943113e+00   \nstd               8.386879e+00                    2.478654e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\ncount                    1.020999e+06              1.020999e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.266652e-01              7.120386e+01   \nstd                      5.233356e-01              2.029766e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.550000e+01   \n50%                      4.700000e-01              7.230000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_7  precipitation_amount_7  \\\ncount               1.020999e+06            1.020999e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.574126e+01            2.681174e+00   \nstd                 1.886665e+01            7.449998e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.120000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.730000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_7  wind_speed_7  \ncount             1.020999e+06  1.020999e+06  \nunique                     NaN           NaN  \ntop                        NaN           NaN  \nfreq                       NaN           NaN  \nmean              2.837691e+02  4.212599e+00  \nstd               9.905842e+00  2.040713e+00  \nmin               2.444000e+02  5.000000e-01  \n25%               2.759000e+02  2.800000e+00  \n50%               2.831000e+02  3.700000e+00  \n75%               2.920000e+02  5.200000e+00  \nmax               3.144000e+02  1.860000e+01  \n",
  "history_begin_time" : 1697421831419,
  "history_end_time" : 1697421930648,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "ZepcBh4usTxf",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\npd.set_option('display.max_columns', None)\n\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\n\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\n\ndef array_describe(arr):\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    \n    return stats\n\ndef convert_to_time_series():\n  columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n  'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  'relative_humidity_rmax', 'relative_humidity_rmin',\n  'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n  # Read the cleaned ready CSV and DEM slope CSV\n  df = pd.read_csv(current_ready_csv_path)\n  # df['location'] = df['lat'].astype(str) + ',' + df['lon'].astype(str)\n  # unique_location_pairs = df.drop_duplicates(subset='location')[['lat', 'lon']]\n\n  # print(unique_location_pairs)\n  # unique_date = df.drop_duplicates(subset='date')[['date']]\n  # print(unique_date)\n\n  # add a 7 days time series to each row\n  df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n  # Group the data by 'lat' and 'lon'\n  grouped = df.groupby(['lat', 'lon'])\n  \n  # fill in the missing values of AMSR and gridMet using polynomial values\n  # Function to perform polynomial interpolation\n  def interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    mask = y > 240\n    print(\"mask: \", mask)\n    print(\"x[~mask]: \", x[~mask])\n    print(\"y[~mask]: \", y[~mask])\n    \n    #y_interp = y.copy()\n\n    # Perform interpolation\n    new_y = np.interp(x, x[~mask], y[~mask])\n    print(\"new_y: \", new_y)\n\n    # Replace missing values with interpolated values\n    df[column_name] = new_y\n    print(df[column_name].describe())\n    \n\n  # Group by location and apply interpolation for each column\n  \n  for name, group in grouped:\n    print(\"Start to filling missing values..\")\n    interpolate_missing_inplace(group, 'SWE')\n    #print(\"interpolated group: \", group.describe())\n    exit(1)\n\n  \n\n  # Create a new DataFrame to store the time series data for each location\n  result = pd.DataFrame()\n\n  # Define the number of days to consider (7 days in this case)\n  num_days = 7\n\n  # ['date', 'lat', 'lon', 'SWE', 'Flag', 'air_temperature_tmmn',\n  # 'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  # 'relative_humidity_rmax', 'relative_humidity_rmin',\n  # 'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',\n  # 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness']\n  \n\n  for name, group in grouped:\n      group = group.set_index('date')\n      for day in range(1, num_days + 1):\n        for target_col in columns_to_be_time_series:\n          new_column_name = f'{target_col}_{day}'\n          group[new_column_name] = group[target_col].shift(day)\n      result = pd.concat([result, group], axis=0)\n\n  # Reset the index of the result DataFrame\n  result = result.reset_index()\n\n  print(result.describe)\n\n  result.to_csv(target_time_series_csv_path, index=False)\n\n\nconvert_to_time_series()\n\ndf = pd.read_csv(target_time_series_csv_path)\nshutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\nprint(df.columns)\n\ndf.head()\n\ndescription = df.describe(include='all')\n# Print the description\nprint(description)\n\n",
  "history_output" : "today date = 2023-10-16\ntest start date:  2023-05-17\ntest end date:  2023-10-16\n/home/chetana\nStart to filling missing values..\nmask:  511662     True\n511663     True\n511664     True\n512553    False\n512554    False\n          ...  \n512815    False\n512816    False\n512532    False\n512533    False\n512534    False\nName: SWE, Length: 4383, dtype: bool\nx[~mask]:  Int64Index([512553, 512554, 512555, 511956, 511957, 511958, 512130, 512131,\n            512132, 512211,\n            ...\n            510290, 511755, 511756, 511757, 512814, 512815, 512816, 512532,\n            512533, 512534],\n           dtype='int64', length=3072)\ny[~mask]:  512553    0\n512554    0\n512555    0\n511956    0\n511957    0\n         ..\n512815    0\n512816    0\n512532    0\n512533    0\n512534    0\nName: SWE, Length: 3072, dtype: int64\nnew_y:  [0. 0. 0. ... 0. 0. 0.]\ncount    4383.0\nmean        0.0\nstd         0.0\nmin         0.0\n25%         0.0\n50%         0.0\n75%         0.0\nmax         0.0\nName: SWE, dtype: float64\n",
  "history_begin_time" : 1697421744443,
  "history_end_time" : 1697421747581,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "tFAtyPLXZ9Ct",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\npd.set_option('display.max_columns', None)\n\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\n\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\n\ndef array_describe(arr):\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    \n    return stats\n\ndef convert_to_time_series():\n  columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n  'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  'relative_humidity_rmax', 'relative_humidity_rmin',\n  'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n  # Read the cleaned ready CSV and DEM slope CSV\n  df = pd.read_csv(current_ready_csv_path)\n  # df['location'] = df['lat'].astype(str) + ',' + df['lon'].astype(str)\n  # unique_location_pairs = df.drop_duplicates(subset='location')[['lat', 'lon']]\n\n  # print(unique_location_pairs)\n  # unique_date = df.drop_duplicates(subset='date')[['date']]\n  # print(unique_date)\n\n  # add a 7 days time series to each row\n  df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n  # Group the data by 'lat' and 'lon'\n  grouped = df.groupby(['lat', 'lon'])\n  \n  # fill in the missing values of AMSR and gridMet using polynomial values\n  # Function to perform polynomial interpolation\n  def interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    mask = y > 240\n    print(\"mask: \", mask)\n    \n    #y_interp = y.copy()\n\n    # Perform interpolation\n    new_y = np.interp(x, x[~mask], y[~mask])\n    print(\"new_y: \", new_y)\n\n    # Replace missing values with interpolated values\n    df[column_name] = new_y\n    print(df[column_name].describe())\n    \n\n  # Group by location and apply interpolation for each column\n  \n  for name, group in grouped:\n    print(\"Start to filling missing values..\")\n    interpolate_missing_inplace(group, 'SWE')\n    #print(\"interpolated group: \", group.describe())\n    exit(1)\n\n  \n\n  # Create a new DataFrame to store the time series data for each location\n  result = pd.DataFrame()\n\n  # Define the number of days to consider (7 days in this case)\n  num_days = 7\n\n  # ['date', 'lat', 'lon', 'SWE', 'Flag', 'air_temperature_tmmn',\n  # 'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  # 'relative_humidity_rmax', 'relative_humidity_rmin',\n  # 'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',\n  # 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness']\n  \n\n  for name, group in grouped:\n      group = group.set_index('date')\n      for day in range(1, num_days + 1):\n        for target_col in columns_to_be_time_series:\n          new_column_name = f'{target_col}_{day}'\n          group[new_column_name] = group[target_col].shift(day)\n      result = pd.concat([result, group], axis=0)\n\n  # Reset the index of the result DataFrame\n  result = result.reset_index()\n\n  print(result.describe)\n\n  result.to_csv(target_time_series_csv_path, index=False)\n\n\nconvert_to_time_series()\n\ndf = pd.read_csv(target_time_series_csv_path)\nshutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\nprint(df.columns)\n\ndf.head()\n\ndescription = df.describe(include='all')\n# Print the description\nprint(description)\n\n",
  "history_output" : "today date = 2023-10-16\ntest start date:  2023-05-17\ntest end date:  2023-10-16\n/home/chetana\nStart to filling missing values..\nmask:  511662     True\n511663     True\n511664     True\n512553    False\n512554    False\n          ...  \n512815    False\n512816    False\n512532    False\n512533    False\n512534    False\nName: SWE, Length: 4383, dtype: bool\nnew_y:  [0. 0. 0. ... 0. 0. 0.]\ncount    4383.0\nmean        0.0\nstd         0.0\nmin         0.0\n25%         0.0\n50%         0.0\n75%         0.0\nmax         0.0\nName: SWE, dtype: float64\n",
  "history_begin_time" : 1697421094653,
  "history_end_time" : 1697421097782,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "Q4vxPPHWeyDp",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\npd.set_option('display.max_columns', None)\n\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\n\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\n\ndef array_describe(arr):\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    \n    return stats\n\ndef convert_to_time_series():\n  columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n  'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  'relative_humidity_rmax', 'relative_humidity_rmin',\n  'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n  # Read the cleaned ready CSV and DEM slope CSV\n  df = pd.read_csv(current_ready_csv_path)\n  # df['location'] = df['lat'].astype(str) + ',' + df['lon'].astype(str)\n  # unique_location_pairs = df.drop_duplicates(subset='location')[['lat', 'lon']]\n\n  # print(unique_location_pairs)\n  # unique_date = df.drop_duplicates(subset='date')[['date']]\n  # print(unique_date)\n\n  # add a 7 days time series to each row\n  df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n  # Group the data by 'lat' and 'lon'\n  grouped = df.groupby(['lat', 'lon'])\n  \n  # fill in the missing values of AMSR and gridMet using polynomial values\n  # Function to perform polynomial interpolation\n  def interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    mask = y > 240\n    \n    #y_interp = y.copy()\n\n    # Perform interpolation\n    new_y = np.interp(x, x[~mask], y[~mask])\n    print(new_y)\n\n    # Replace missing values with interpolated values\n    df[column_name] = new_y\n    print(df[column_name].describe())\n    \n\n  # Group by location and apply interpolation for each column\n  \n  for name, group in grouped:\n    print(\"Start to filling missing values..\")\n    interpolate_missing_inplace(group, 'SWE')\n    #print(\"interpolated group: \", group.describe())\n    exit(1)\n\n  \n\n  # Create a new DataFrame to store the time series data for each location\n  result = pd.DataFrame()\n\n  # Define the number of days to consider (7 days in this case)\n  num_days = 7\n\n  # ['date', 'lat', 'lon', 'SWE', 'Flag', 'air_temperature_tmmn',\n  # 'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  # 'relative_humidity_rmax', 'relative_humidity_rmin',\n  # 'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',\n  # 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness']\n  \n\n  for name, group in grouped:\n      group = group.set_index('date')\n      for day in range(1, num_days + 1):\n        for target_col in columns_to_be_time_series:\n          new_column_name = f'{target_col}_{day}'\n          group[new_column_name] = group[target_col].shift(day)\n      result = pd.concat([result, group], axis=0)\n\n  # Reset the index of the result DataFrame\n  result = result.reset_index()\n\n  print(result.describe)\n\n  result.to_csv(target_time_series_csv_path, index=False)\n\n\nconvert_to_time_series()\n\ndf = pd.read_csv(target_time_series_csv_path)\nshutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\nprint(df.columns)\n\ndf.head()\n\ndescription = df.describe(include='all')\n# Print the description\nprint(description)\n\n",
  "history_output" : "today date = 2023-10-16\ntest start date:  2023-05-17\ntest end date:  2023-10-16\n/home/chetana\nStart to filling missing values..\n[0. 0. 0. ... 0. 0. 0.]\ncount    4383.0\nmean        0.0\nstd         0.0\nmin         0.0\n25%         0.0\n50%         0.0\n75%         0.0\nmax         0.0\nName: SWE, dtype: float64\n",
  "history_begin_time" : 1697421054925,
  "history_end_time" : 1697421058176,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "gkc9Yf28OvhZ",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\npd.set_option('display.max_columns', None)\n\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\n\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\n\ndef array_describe(arr):\n    stats = {\n        'Mean': np.mean(arr),\n        'Median': np.median(arr),\n        'Standard Deviation': np.std(arr),\n        'Variance': np.var(arr),\n        'Minimum': np.min(arr),\n        'Maximum': np.max(arr),\n        'Sum': np.sum(arr),\n    }\n    \n    return stats\n\ndef convert_to_time_series():\n  columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n  'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  'relative_humidity_rmax', 'relative_humidity_rmin',\n  'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n  # Read the cleaned ready CSV and DEM slope CSV\n  df = pd.read_csv(current_ready_csv_path)\n  # df['location'] = df['lat'].astype(str) + ',' + df['lon'].astype(str)\n  # unique_location_pairs = df.drop_duplicates(subset='location')[['lat', 'lon']]\n\n  # print(unique_location_pairs)\n  # unique_date = df.drop_duplicates(subset='date')[['date']]\n  # print(unique_date)\n\n  # add a 7 days time series to each row\n  df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n  # Group the data by 'lat' and 'lon'\n  grouped = df.groupby(['lat', 'lon'])\n  \n  # fill in the missing values of AMSR and gridMet using polynomial values\n  # Function to perform polynomial interpolation\n  def interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    mask = y > 240\n    \n    #y_interp = y.copy()\n\n    # Perform interpolation\n    new_y = np.interp(x, x[~mask], y[~mask])\n\n    # Replace missing values with interpolated values\n    df[column_name] = new_y\n    print(df[column_name].describe())\n    \n\n  # Group by location and apply interpolation for each column\n  \n  for name, group in grouped:\n    print(\"Start to filling missing values..\")\n    interpolate_missing_inplace(group, 'SWE')\n    #print(\"interpolated group: \", group.describe())\n    exit(1)\n\n  \n\n  # Create a new DataFrame to store the time series data for each location\n  result = pd.DataFrame()\n\n  # Define the number of days to consider (7 days in this case)\n  num_days = 7\n\n  # ['date', 'lat', 'lon', 'SWE', 'Flag', 'air_temperature_tmmn',\n  # 'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  # 'relative_humidity_rmax', 'relative_humidity_rmin',\n  # 'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',\n  # 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness']\n  \n\n  for name, group in grouped:\n      group = group.set_index('date')\n      for day in range(1, num_days + 1):\n        for target_col in columns_to_be_time_series:\n          new_column_name = f'{target_col}_{day}'\n          group[new_column_name] = group[target_col].shift(day)\n      result = pd.concat([result, group], axis=0)\n\n  # Reset the index of the result DataFrame\n  result = result.reset_index()\n\n  print(result.describe)\n\n  result.to_csv(target_time_series_csv_path, index=False)\n\n\nconvert_to_time_series()\n\ndf = pd.read_csv(target_time_series_csv_path)\nshutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\nprint(df.columns)\n\ndf.head()\n\ndescription = df.describe(include='all')\n# Print the description\nprint(description)\n\n",
  "history_output" : "today date = 2023-10-16\ntest start date:  2023-05-17\ntest end date:  2023-10-16\n/home/chetana\nStart to filling missing values..\ncount    4383.0\nmean        0.0\nstd         0.0\nmin         0.0\n25%         0.0\n50%         0.0\n75%         0.0\nmax         0.0\nName: SWE, dtype: float64\n",
  "history_begin_time" : 1697420980574,
  "history_end_time" : 1697420983741,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "RwasAE31NJNB",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\npd.set_option('display.max_columns', None)\n\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\n\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\n\ndef convert_to_time_series():\n  columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n  'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  'relative_humidity_rmax', 'relative_humidity_rmin',\n  'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n  # Read the cleaned ready CSV and DEM slope CSV\n  df = pd.read_csv(current_ready_csv_path)\n  # df['location'] = df['lat'].astype(str) + ',' + df['lon'].astype(str)\n  # unique_location_pairs = df.drop_duplicates(subset='location')[['lat', 'lon']]\n\n  # print(unique_location_pairs)\n  # unique_date = df.drop_duplicates(subset='date')[['date']]\n  # print(unique_date)\n\n  # add a 7 days time series to each row\n  df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n  # Group the data by 'lat' and 'lon'\n  grouped = df.groupby(['lat', 'lon'])\n  \n  # fill in the missing values of AMSR and gridMet using polynomial values\n  # Function to perform polynomial interpolation\n  def interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    mask = y > 240\n    \n    #y_interp = y.copy()\n\n    # Perform interpolation\n    new_y = np.interp(x, x[~mask], y[~mask])\n    print(new_y.describe())\n\n    # Replace missing values with interpolated values\n    df[column_name] = new_y\n\n  # Group by location and apply interpolation for each column\n  \n  for name, group in grouped:\n    print(\"Start to filling missing values..\")\n    interpolate_missing_inplace(group, 'SWE')\n    #print(\"interpolated group: \", group.describe())\n    exit(1)\n\n  \n\n  # Create a new DataFrame to store the time series data for each location\n  result = pd.DataFrame()\n\n  # Define the number of days to consider (7 days in this case)\n  num_days = 7\n\n  # ['date', 'lat', 'lon', 'SWE', 'Flag', 'air_temperature_tmmn',\n  # 'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  # 'relative_humidity_rmax', 'relative_humidity_rmin',\n  # 'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',\n  # 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness']\n  \n\n  for name, group in grouped:\n      group = group.set_index('date')\n      for day in range(1, num_days + 1):\n        for target_col in columns_to_be_time_series:\n          new_column_name = f'{target_col}_{day}'\n          group[new_column_name] = group[target_col].shift(day)\n      result = pd.concat([result, group], axis=0)\n\n  # Reset the index of the result DataFrame\n  result = result.reset_index()\n\n  print(result.describe)\n\n  result.to_csv(target_time_series_csv_path, index=False)\n\n\nconvert_to_time_series()\n\ndf = pd.read_csv(target_time_series_csv_path)\nshutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\nprint(df.columns)\n\ndf.head()\n\ndescription = df.describe(include='all')\n# Print the description\nprint(description)\n\n",
  "history_output" : "today date = 2023-10-16\ntest start date:  2023-05-17\ntest end date:  2023-10-16\n/home/chetana\nStart to filling missing values..\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/RwasAE31NJNB/convert_to_time_series.py\", line 92, in <module>\n    convert_to_time_series()\n  File \"/home/chetana/gw-workspace/RwasAE31NJNB/convert_to_time_series.py\", line 57, in convert_to_time_series\n    interpolate_missing_inplace(group, 'SWE')\n  File \"/home/chetana/gw-workspace/RwasAE31NJNB/convert_to_time_series.py\", line 48, in interpolate_missing_inplace\n    print(new_y.describe())\nAttributeError: 'numpy.ndarray' object has no attribute 'describe'\n",
  "history_begin_time" : 1697420779331,
  "history_end_time" : 1697420782470,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "IzmD7vA46w3W",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\npd.set_option('display.max_columns', None)\n\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\n\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\n\ndef convert_to_time_series():\n  columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n  'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  'relative_humidity_rmax', 'relative_humidity_rmin',\n  'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n  # Read the cleaned ready CSV and DEM slope CSV\n  df = pd.read_csv(current_ready_csv_path)\n  # df['location'] = df['lat'].astype(str) + ',' + df['lon'].astype(str)\n  # unique_location_pairs = df.drop_duplicates(subset='location')[['lat', 'lon']]\n\n  # print(unique_location_pairs)\n  # unique_date = df.drop_duplicates(subset='date')[['date']]\n  # print(unique_date)\n\n  # add a 7 days time series to each row\n  df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n  # Group the data by 'lat' and 'lon'\n  grouped = df.groupby(['lat', 'lon'])\n  \n  # fill in the missing values of AMSR and gridMet using polynomial values\n  # Function to perform polynomial interpolation\n  def interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    mask = y > 240\n    \n    y_interp = y.copy()\n\n    # Perform interpolation\n    y_interp[mask] = np.interp(x, x[~mask], y[~mask])\n\n    # Replace missing values with interpolated values\n    df[column_name] = y_interp\n\n  # Group by location and apply interpolation for each column\n  \n  for name, group in grouped:\n    print(\"Start to filling missing values..\")\n    interpolate_missing_inplace(group, 'SWE')\n    print(\"interpolated group: \", group.describe())\n    exit(1)\n\n  \n\n  # Create a new DataFrame to store the time series data for each location\n  result = pd.DataFrame()\n\n  # Define the number of days to consider (7 days in this case)\n  num_days = 7\n\n  # ['date', 'lat', 'lon', 'SWE', 'Flag', 'air_temperature_tmmn',\n  # 'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  # 'relative_humidity_rmax', 'relative_humidity_rmin',\n  # 'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',\n  # 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness']\n  \n\n  for name, group in grouped:\n      group = group.set_index('date')\n      for day in range(1, num_days + 1):\n        for target_col in columns_to_be_time_series:\n          new_column_name = f'{target_col}_{day}'\n          group[new_column_name] = group[target_col].shift(day)\n      result = pd.concat([result, group], axis=0)\n\n  # Reset the index of the result DataFrame\n  result = result.reset_index()\n\n  print(result.describe)\n\n  result.to_csv(target_time_series_csv_path, index=False)\n\n\nconvert_to_time_series()\n\ndf = pd.read_csv(target_time_series_csv_path)\nshutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\nprint(df.columns)\n\ndf.head()\n\ndescription = df.describe(include='all')\n# Print the description\nprint(description)\n\n",
  "history_output" : "today date = 2023-10-16\ntest start date:  2023-05-17\ntest end date:  2023-10-16\n/home/chetana\nStart to filling missing values..\ninterpolated group:                  lat           lon     SWE         Flag    swe_value  \\\ncount  4.383000e+03  4.383000e+03  4383.0  4383.000000  4323.000000   \nmean   3.335825e+01 -1.078269e+02     0.0   245.187543     3.333796   \nstd    1.634435e-13  7.816862e-12     0.0     6.410886     5.245993   \nmin    3.335825e+01 -1.078269e+02     0.0   241.000000     0.000000   \n25%    3.335825e+01 -1.078269e+02     0.0   241.000000     0.000000   \n50%    3.335825e+01 -1.078269e+02     0.0   241.000000     0.000000   \n75%    3.335825e+01 -1.078269e+02     0.0   255.000000     6.300000   \nmax    3.335825e+01 -1.078269e+02     0.0   255.000000    22.600000   \n          Unnamed: 0  air_temperature_tmmn  potential_evapotranspiration  \\\ncount    4383.000000           4383.000000                   4383.000000   \nmean   482555.584531            278.040931                      4.129318   \nstd    295666.139314              7.376893                      2.581458   \nmin     44165.000000            257.200000                      0.000000   \n25%    299665.500000            272.400000                      2.000000   \n50%    555166.000000            278.500000                      3.800000   \n75%    810787.500000            284.700000                      6.000000   \nmax    972923.000000            293.400000                     13.500000   \n       mean_vapor_pressure_deficit  relative_humidity_rmax  \\\ncount                  4383.000000             4383.000000   \nmean                      0.759019               60.719781   \nstd                       0.586579               22.437812   \nmin                       0.000000               11.900001   \n25%                       0.280000               42.000000   \n50%                       0.620000               58.100002   \n75%                       1.075000               78.500000   \nmax                       3.250000              100.000000   \n       relative_humidity_rmin  precipitation_amount  air_temperature_tmmx  \\\ncount             4383.000000           4383.000000           4383.000000   \nmean                26.994616              1.505088            287.955168   \nstd                 15.676675              3.669876             10.058009   \nmin                  1.000000              0.000000            252.100000   \n25%                 15.450000              0.000000            281.400000   \n50%                 23.100000              0.000000            288.700000   \n75%                 35.700000              1.400000            296.000000   \nmax                100.000000             45.800000            312.100000   \n        wind_speed     elevation         slope     curvature        aspect  \\\ncount  4383.000000  4.383000e+03  4.383000e+03  4.383000e+03  4.383000e+03   \nmean      4.116199  2.419528e+03  5.138327e+01 -2.909255e+03  2.763890e+02   \nstd       1.808157  1.819197e-10  2.359271e-12  1.541769e-10  1.432618e-11   \nmin       0.900000  2.419528e+03  5.138327e+01 -2.909255e+03  2.763890e+02   \n25%       2.800000  2.419528e+03  5.138327e+01 -2.909255e+03  2.763890e+02   \n50%       3.800000  2.419528e+03  5.138327e+01 -2.909255e+03  2.763890e+02   \n75%       5.100000  2.419528e+03  5.138327e+01 -2.909255e+03  2.763890e+02   \nmax      14.300000  2.419528e+03  5.138327e+01 -2.909255e+03  2.763890e+02   \n           eastness     northness  \ncount  4.383000e+03  4.383000e+03  \nmean  -7.822831e-01  1.108226e-01  \nstd    3.741878e-14  1.011806e-14  \nmin   -7.822831e-01  1.108226e-01  \n25%   -7.822831e-01  1.108226e-01  \n50%   -7.822831e-01  1.108226e-01  \n75%   -7.822831e-01  1.108226e-01  \nmax   -7.822831e-01  1.108226e-01  \n",
  "history_begin_time" : 1697420697396,
  "history_end_time" : 1697420700509,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "BJ9ndfH0ldcF",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\n\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\n\ndef convert_to_time_series():\n  columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n  'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  'relative_humidity_rmax', 'relative_humidity_rmin',\n  'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n  # Read the cleaned ready CSV and DEM slope CSV\n  df = pd.read_csv(current_ready_csv_path)\n  # df['location'] = df['lat'].astype(str) + ',' + df['lon'].astype(str)\n  # unique_location_pairs = df.drop_duplicates(subset='location')[['lat', 'lon']]\n\n  # print(unique_location_pairs)\n  # unique_date = df.drop_duplicates(subset='date')[['date']]\n  # print(unique_date)\n\n  # add a 7 days time series to each row\n  df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n  # Group the data by 'lat' and 'lon'\n  grouped = df.groupby(['lat', 'lon'])\n  \n  # fill in the missing values of AMSR and gridMet using polynomial values\n  # Function to perform polynomial interpolation\n  def interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    mask = y > 240\n    \n    y_interp = y.copy()\n\n    # Perform interpolation\n    y_interp[mask] = np.interp(x, x[~mask], y[~mask])\n\n    # Replace missing values with interpolated values\n    df[column_name] = y_interp\n\n  # Group by location and apply interpolation for each column\n  \n  for name, group in grouped:\n    print(\"Start to filling missing values..\")\n    interpolate_missing_inplace(group, 'SWE')\n    print(\"interpolated group: \", group)\n    exit(1)\n\n  \n\n  # Create a new DataFrame to store the time series data for each location\n  result = pd.DataFrame()\n\n  # Define the number of days to consider (7 days in this case)\n  num_days = 7\n\n  # ['date', 'lat', 'lon', 'SWE', 'Flag', 'air_temperature_tmmn',\n  # 'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  # 'relative_humidity_rmax', 'relative_humidity_rmin',\n  # 'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',\n  # 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness']\n  \n\n  for name, group in grouped:\n      group = group.set_index('date')\n      for day in range(1, num_days + 1):\n        for target_col in columns_to_be_time_series:\n          new_column_name = f'{target_col}_{day}'\n          group[new_column_name] = group[target_col].shift(day)\n      result = pd.concat([result, group], axis=0)\n\n  # Reset the index of the result DataFrame\n  result = result.reset_index()\n\n  print(result.describe)\n\n  result.to_csv(target_time_series_csv_path, index=False)\n\n\nconvert_to_time_series()\n\ndf = pd.read_csv(target_time_series_csv_path)\nshutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\nprint(df.columns)\n\ndf.head()\n\npd.set_option('display.max_columns', None)\ndescription = df.describe(include='all')\n# Print the description\nprint(description)\n\n",
  "history_output" : "today date = 2023-10-16\ntest start date:  2023-05-17\ntest end date:  2023-10-16\n/home/chetana\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...   aspect  eastness  northness\n511662  2019-01-01  33.358254 -107.826881  ...  276.389 -0.782283   0.110823\n511663  2019-01-01  33.358254 -107.826881  ...  276.389 -0.782283   0.110823\n511664  2019-01-01  33.358254 -107.826881  ...  276.389 -0.782283   0.110823\n512553  2019-01-02  33.358254 -107.826881  ...  276.389 -0.782283   0.110823\n512554  2019-01-02  33.358254 -107.826881  ...  276.389 -0.782283   0.110823\n...            ...        ...         ...  ...      ...       ...        ...\n512815  2022-12-30  33.358254 -107.826881  ...  276.389 -0.782283   0.110823\n512816  2022-12-30  33.358254 -107.826881  ...  276.389 -0.782283   0.110823\n512532  2022-12-31  33.358254 -107.826881  ...  276.389 -0.782283   0.110823\n512533  2022-12-31  33.358254 -107.826881  ...  276.389 -0.782283   0.110823\n512534  2022-12-31  33.358254 -107.826881  ...  276.389 -0.782283   0.110823\n[4383 rows x 21 columns]\n",
  "history_begin_time" : 1697420627455,
  "history_end_time" : 1697420630591,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "et0XHAHW8kAm",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\n\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\n\ndef convert_to_time_series():\n  columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n  'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  'relative_humidity_rmax', 'relative_humidity_rmin',\n  'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n  # Read the cleaned ready CSV and DEM slope CSV\n  df = pd.read_csv(current_ready_csv_path)\n  # df['location'] = df['lat'].astype(str) + ',' + df['lon'].astype(str)\n  # unique_location_pairs = df.drop_duplicates(subset='location')[['lat', 'lon']]\n\n  # print(unique_location_pairs)\n  # unique_date = df.drop_duplicates(subset='date')[['date']]\n  # print(unique_date)\n\n  # add a 7 days time series to each row\n  df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n  # Group the data by 'lat' and 'lon'\n  grouped = df.groupby(['lat', 'lon'])\n  \n  # fill in the missing values of AMSR and gridMet using polynomial values\n  # Function to perform polynomial interpolation\n  def interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    mask = y > 240\n    \n    y_interp = y.copy()\n\n    # Perform interpolation\n    y_interp[mask] = np.interp(x, x[~mask], y[~mask])\n\n    # Replace missing values with interpolated values\n    df[column_name] = y_interp\n\n  # Group by location and apply interpolation for each column\n  \n  for name, group in grouped:\n    #print(\"Start to filling missing values..\")\n    interpolate_missing_inplace(group, 'SWE')\n    #print(\"interpolated group: \", group)\n\n  \n\n  # Create a new DataFrame to store the time series data for each location\n  result = pd.DataFrame()\n\n  # Define the number of days to consider (7 days in this case)\n  num_days = 7\n\n  # ['date', 'lat', 'lon', 'SWE', 'Flag', 'air_temperature_tmmn',\n  # 'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  # 'relative_humidity_rmax', 'relative_humidity_rmin',\n  # 'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',\n  # 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness']\n  \n\n  for name, group in grouped:\n      group = group.set_index('date')\n      for day in range(1, num_days + 1):\n        for target_col in columns_to_be_time_series:\n          new_column_name = f'{target_col}_{day}'\n          group[new_column_name] = group[target_col].shift(day)\n      result = pd.concat([result, group], axis=0)\n\n  # Reset the index of the result DataFrame\n  result = result.reset_index()\n\n  print(result.describe)\n\n  result.to_csv(target_time_series_csv_path, index=False)\n\n\nconvert_to_time_series()\n\ndf = pd.read_csv(target_time_series_csv_path)\nshutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\nprint(df.columns)\n\ndf.head()\n\npd.set_option('display.max_columns', None)\ndescription = df.describe(include='all')\n# Print the description\nprint(description)\n\n",
  "history_output" : "today date = 2023-10-16\ntest start date:  2023-05-17\ntest end date:  2023-10-16\n/home/chetana\n<bound method NDFrame.describe of                date        lat  ...  air_temperature_tmmx_7  wind_speed_7\n0        2019-01-01  33.358254  ...                     NaN           NaN\n1        2019-01-01  33.358254  ...                     NaN           NaN\n2        2019-01-01  33.358254  ...                     NaN           NaN\n3        2019-01-02  33.358254  ...                     NaN           NaN\n4        2019-01-02  33.358254  ...                     NaN           NaN\n...             ...        ...  ...                     ...           ...\n1022695  2022-12-30  48.971066  ...                   267.8           3.1\n1022696  2022-12-30  48.971066  ...                   267.8           3.1\n1022697  2022-12-31  48.971066  ...                   267.8           3.1\n1022698  2022-12-31  48.971066  ...                   268.7           2.8\n1022699  2022-12-31  48.971066  ...                   268.7           2.8\n[1022700 rows x 91 columns]>\nIndex(['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'Unnamed: 0',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'elevation', 'slope', 'curvature',\n       'aspect', 'eastness', 'northness', 'SWE_1', 'Flag_1',\n       'air_temperature_tmmn_1', 'potential_evapotranspiration_1',\n       'mean_vapor_pressure_deficit_1', 'relative_humidity_rmax_1',\n       'relative_humidity_rmin_1', 'precipitation_amount_1',\n       'air_temperature_tmmx_1', 'wind_speed_1', 'SWE_2', 'Flag_2',\n       'air_temperature_tmmn_2', 'potential_evapotranspiration_2',\n       'mean_vapor_pressure_deficit_2', 'relative_humidity_rmax_2',\n       'relative_humidity_rmin_2', 'precipitation_amount_2',\n       'air_temperature_tmmx_2', 'wind_speed_2', 'SWE_3', 'Flag_3',\n       'air_temperature_tmmn_3', 'potential_evapotranspiration_3',\n       'mean_vapor_pressure_deficit_3', 'relative_humidity_rmax_3',\n       'relative_humidity_rmin_3', 'precipitation_amount_3',\n       'air_temperature_tmmx_3', 'wind_speed_3', 'SWE_4', 'Flag_4',\n       'air_temperature_tmmn_4', 'potential_evapotranspiration_4',\n       'mean_vapor_pressure_deficit_4', 'relative_humidity_rmax_4',\n       'relative_humidity_rmin_4', 'precipitation_amount_4',\n       'air_temperature_tmmx_4', 'wind_speed_4', 'SWE_5', 'Flag_5',\n       'air_temperature_tmmn_5', 'potential_evapotranspiration_5',\n       'mean_vapor_pressure_deficit_5', 'relative_humidity_rmax_5',\n       'relative_humidity_rmin_5', 'precipitation_amount_5',\n       'air_temperature_tmmx_5', 'wind_speed_5', 'SWE_6', 'Flag_6',\n       'air_temperature_tmmn_6', 'potential_evapotranspiration_6',\n       'mean_vapor_pressure_deficit_6', 'relative_humidity_rmax_6',\n       'relative_humidity_rmin_6', 'precipitation_amount_6',\n       'air_temperature_tmmx_6', 'wind_speed_6', 'SWE_7', 'Flag_7',\n       'air_temperature_tmmn_7', 'potential_evapotranspiration_7',\n       'mean_vapor_pressure_deficit_7', 'relative_humidity_rmax_7',\n       'relative_humidity_rmin_7', 'precipitation_amount_7',\n       'air_temperature_tmmx_7', 'wind_speed_7'],\n      dtype='object')\n              date           lat           lon           SWE          Flag  \\\ncount      1022700  1.022700e+06  1.022700e+06  1.022700e+06  1.022700e+06   \nunique        1461           NaN           NaN           NaN           NaN   \ntop     2019-01-01           NaN           NaN           NaN           NaN   \nfreq           700           NaN           NaN           NaN           NaN   \nmean           NaN  4.165838e+01 -1.141534e+02  5.046323e+01  2.434436e+02   \nstd            NaN  3.632464e+00  5.423376e+00  9.547185e+01  5.313797e+00   \nmin            NaN  3.335825e+01 -1.234486e+02  0.000000e+00  2.410000e+02   \n25%            NaN  3.891814e+01 -1.197812e+02  0.000000e+00  2.410000e+02   \n50%            NaN  4.107190e+01 -1.137737e+02  0.000000e+00  2.410000e+02   \n75%            NaN  4.461398e+01 -1.100367e+02  3.500000e+01  2.410000e+02   \nmax            NaN  4.897107e+01 -1.051948e+02  2.550000e+02  2.550000e+02   \n           swe_value    Unnamed: 0  air_temperature_tmmn  \\\ncount   1.008700e+06  1.022700e+06          1.022700e+06   \nunique           NaN           NaN                   NaN   \ntop              NaN           NaN                   NaN   \nfreq             NaN           NaN                   NaN   \nmean    3.333796e+00  5.113495e+05          2.720187e+02   \nstd     5.245389e+00  2.952282e+05          8.384982e+00   \nmin     0.000000e+00  0.000000e+00          2.328000e+02   \n25%     0.000000e+00  2.556748e+05          2.663000e+02   \n50%     0.000000e+00  5.113495e+05          2.722000e+02   \n75%     6.300000e+00  7.670242e+05          2.784000e+02   \nmax     2.260000e+01  1.022699e+06          2.983000e+02   \n        potential_evapotranspiration  mean_vapor_pressure_deficit  \\\ncount                   1.022700e+06                 1.022700e+06   \nunique                           NaN                          NaN   \ntop                              NaN                          NaN   \nfreq                             NaN                          NaN   \nmean                    3.943372e+00                 6.258550e-01   \nstd                     2.478664e+00                 5.233133e-01   \nmin                     0.000000e+00                 0.000000e+00   \n25%                     1.900000e+00                 2.100000e-01   \n50%                     3.500000e+00                 4.700000e-01   \n75%                     5.800000e+00                 9.300000e-01   \nmax                     1.510000e+01                 3.870000e+00   \n        relative_humidity_rmax  relative_humidity_rmin  precipitation_amount  \\\ncount             1.022700e+06            1.022700e+06          1.022700e+06   \nunique                     NaN                     NaN                   NaN   \ntop                        NaN                     NaN                   NaN   \nfreq                       NaN                     NaN                   NaN   \nmean              7.123571e+01            3.578010e+01          2.689152e+00   \nstd               2.030150e+01            1.888091e+01          7.456402e+00   \nmin               8.200000e+00            1.000000e+00          0.000000e+00   \n25%               5.560000e+01            2.130000e+01          0.000000e+00   \n50%               7.240000e+01            3.160000e+01          0.000000e+00   \n75%               8.820001e+01            4.740000e+01          2.200000e+00   \nmax               1.000000e+02            1.000000e+02          5.042000e+02   \n        air_temperature_tmmx    wind_speed     elevation         slope  \\\ncount           1.022700e+06  1.022700e+06  1.022700e+06  1.022700e+06   \nunique                   NaN           NaN           NaN           NaN   \ntop                      NaN           NaN           NaN           NaN   \nfreq                     NaN           NaN           NaN           NaN   \nmean            2.837481e+02  4.214964e+00  2.397170e+03  6.243769e+01   \nstd             9.912702e+00  2.043559e+00  6.647262e+02  1.650521e+01   \nmin             2.444000e+02  5.000000e-01  7.584437e+02  4.277402e+00   \n25%             2.759000e+02  2.800000e+00  1.948688e+03  5.213456e+01   \n50%             2.831000e+02  3.700000e+00  2.481006e+03  6.768107e+01   \n75%             2.920000e+02  5.200000e+00  2.895791e+03  7.504661e+01   \nmax             3.144000e+02  1.860000e+01  3.823385e+03  8.368555e+01   \n           curvature        aspect      eastness     northness         SWE_1  \\\ncount   1.022700e+06  1.022700e+06  1.022700e+06  1.022700e+06  1.022457e+06   \nunique           NaN           NaN           NaN           NaN           NaN   \ntop              NaN           NaN           NaN           NaN           NaN   \nfreq             NaN           NaN           NaN           NaN           NaN   \nmean   -3.909783e+03  1.722213e+02  6.965357e-02 -4.509867e-02  5.046829e+01   \nstd     4.385982e+03  1.031039e+02  5.171924e-01  6.412035e-01  9.547557e+01   \nmin    -1.917768e+04  4.159291e-01 -7.853438e-01 -7.853694e-01  0.000000e+00   \n25%    -6.479865e+03  9.217068e+01 -3.907275e-01 -7.356204e-01  0.000000e+00   \n50%    -3.710969e+03  1.691301e+02  1.334633e-01 -1.913248e-01  0.000000e+00   \n75%    -5.754078e+02  2.498582e+02  5.767317e-01  6.495535e-01  3.500000e+01   \nmax     9.069726e+03  3.586563e+02  7.853980e-01  7.853850e-01  2.550000e+02   \n              Flag_1  air_temperature_tmmn_1  potential_evapotranspiration_1  \\\ncount   1.022457e+06            1.022457e+06                    1.022457e+06   \nunique           NaN                     NaN                             NaN   \ntop              NaN                     NaN                             NaN   \nfreq             NaN                     NaN                             NaN   \nmean    2.434439e+02            2.720198e+02                    3.943422e+00   \nstd     5.314013e+00            8.385519e+00                    2.478670e+00   \nmin     2.410000e+02            2.328000e+02                    0.000000e+00   \n25%     2.410000e+02            2.663000e+02                    1.900000e+00   \n50%     2.410000e+02            2.722000e+02                    3.500000e+00   \n75%     2.410000e+02            2.784000e+02                    5.800000e+00   \nmax     2.550000e+02            2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\ncount                    1.022457e+06              1.022457e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.259842e-01              7.123178e+01   \nstd                      5.233073e-01              2.030135e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.560000e+01   \n50%                      4.700000e-01              7.240000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_1  precipitation_amount_1  \\\ncount               1.022457e+06            1.022457e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.577455e+01            2.688369e+00   \nstd                 1.887860e+01            7.455937e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.740000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_1  wind_speed_1         SWE_2        Flag_2  \\\ncount             1.022457e+06  1.022457e+06  1.022214e+06  1.022214e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837507e+02  4.214984e+00  5.047216e+01  2.434441e+02   \nstd               9.912255e+00  2.043594e+00  9.547914e+01  5.314206e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  3.500000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  2.550000e+02  2.550000e+02   \n        air_temperature_tmmn_2  potential_evapotranspiration_2  \\\ncount             1.022214e+06                    1.022214e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720209e+02                    3.943420e+00   \nstd               8.385815e+00                    2.478640e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_2  relative_humidity_rmax_2  \\\ncount                    1.022214e+06              1.022214e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.261075e-01              7.122720e+01   \nstd                      5.233070e-01              2.030094e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.560000e+01   \n50%                      4.700000e-01              7.240000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_2  precipitation_amount_2  \\\ncount               1.022214e+06            1.022214e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.576907e+01            2.687716e+00   \nstd                 1.887661e+01            7.456001e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.740000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_2  wind_speed_2         SWE_3        Flag_3  \\\ncount             1.022214e+06  1.022214e+06  1.021971e+06  1.021971e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837536e+02  4.214784e+00  5.047569e+01  2.434443e+02   \nstd               9.911446e+00  2.043331e+00  9.548285e+01  5.314398e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  3.500000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  2.550000e+02  2.550000e+02   \n        air_temperature_tmmn_3  potential_evapotranspiration_3  \\\ncount             1.021971e+06                    1.021971e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720225e+02                    3.943376e+00   \nstd               8.385741e+00                    2.478685e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\ncount                    1.021971e+06              1.021971e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.262307e-01              7.122289e+01   \nstd                      5.233067e-01              2.030066e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.550000e+01   \n50%                      4.700000e-01              7.230000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_3  precipitation_amount_3  \\\ncount               1.021971e+06            1.021971e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.576342e+01            2.686752e+00   \nstd                 1.887456e+01            7.455918e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.730000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_3  wind_speed_3         SWE_4        Flag_4  \\\ncount             1.021971e+06  1.021971e+06  1.021728e+06  1.021728e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837567e+02  4.214625e+00  5.047501e+01  2.434443e+02   \nstd               9.910225e+00  2.043209e+00  9.548223e+01  5.314356e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  3.500000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  2.550000e+02  2.550000e+02   \n        air_temperature_tmmn_4  potential_evapotranspiration_4  \\\ncount             1.021728e+06                    1.021728e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720240e+02                    3.943264e+00   \nstd               8.385866e+00                    2.478656e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_4  relative_humidity_rmax_4  \\\ncount                    1.021728e+06              1.021728e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.263553e-01              7.121851e+01   \nstd                      5.233051e-01              2.030000e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.550000e+01   \n50%                      4.700000e-01              7.230000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_4  precipitation_amount_4  \\\ncount               1.021728e+06            1.021728e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.575787e+01            2.686033e+00   \nstd                 1.887263e+01            7.455973e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.730000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_4  wind_speed_4         SWE_5        Flag_5  \\\ncount             1.021728e+06  1.021728e+06  1.021485e+06  1.021485e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837597e+02  4.214386e+00  5.047484e+01  2.434443e+02   \nstd               9.909216e+00  2.042915e+00  9.548200e+01  5.314338e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  3.500000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  2.550000e+02  2.550000e+02   \n        air_temperature_tmmn_5  potential_evapotranspiration_5  \\\ncount             1.021485e+06                    1.021485e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720251e+02                    3.943198e+00   \nstd               8.386260e+00                    2.478648e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\ncount                    1.021485e+06              1.021485e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.264743e-01              7.121428e+01   \nstd                      5.233079e-01              2.029947e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.550000e+01   \n50%                      4.700000e-01              7.230000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_5  precipitation_amount_5  \\\ncount               1.021485e+06            1.021485e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.575236e+01            2.684510e+00   \nstd                 1.887073e+01            7.454676e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.730000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_5  wind_speed_5         SWE_6        Flag_6  \\\ncount             1.021485e+06  1.021485e+06  1.021242e+06  1.021242e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837628e+02  4.213888e+00  5.046933e+01  2.434440e+02   \nstd               9.908198e+00  2.042324e+00  9.547787e+01  5.314084e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  3.500000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  2.550000e+02  2.550000e+02   \n        air_temperature_tmmn_6  potential_evapotranspiration_6  \\\ncount             1.021242e+06                    1.021242e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720261e+02                    3.943110e+00   \nstd               8.386646e+00                    2.478642e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_6  relative_humidity_rmax_6  \\\ncount                    1.021242e+06              1.021242e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.265698e-01              7.120906e+01   \nstd                      5.233230e-01              2.029860e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.550000e+01   \n50%                      4.700000e-01              7.230000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_6  precipitation_amount_6  \\\ncount               1.021242e+06            1.021242e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.574670e+01            2.683368e+00   \nstd                 1.886860e+01            7.454296e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.730000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_6  wind_speed_6         SWE_7        Flag_7  \\\ncount             1.021242e+06  1.021242e+06  1.020999e+06  1.020999e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837659e+02  4.213170e+00  5.046308e+01  2.434436e+02   \nstd               9.907047e+00  2.041234e+00  9.547252e+01  5.313772e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  3.500000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  2.550000e+02  2.550000e+02   \n        air_temperature_tmmn_7  potential_evapotranspiration_7  \\\ncount             1.020999e+06                    1.020999e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720272e+02                    3.943113e+00   \nstd               8.386879e+00                    2.478654e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\ncount                    1.020999e+06              1.020999e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.266652e-01              7.120386e+01   \nstd                      5.233356e-01              2.029766e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.550000e+01   \n50%                      4.700000e-01              7.230000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_7  precipitation_amount_7  \\\ncount               1.020999e+06            1.020999e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.574126e+01            2.681174e+00   \nstd                 1.886665e+01            7.449998e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.120000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.730000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_7  wind_speed_7  \ncount             1.020999e+06  1.020999e+06  \nunique                     NaN           NaN  \ntop                        NaN           NaN  \nfreq                       NaN           NaN  \nmean              2.837691e+02  4.212599e+00  \nstd               9.905842e+00  2.040713e+00  \nmin               2.444000e+02  5.000000e-01  \n25%               2.759000e+02  2.800000e+00  \n50%               2.831000e+02  3.700000e+00  \n75%               2.920000e+02  5.200000e+00  \nmax               3.144000e+02  1.860000e+01  \n",
  "history_begin_time" : 1697420231079,
  "history_end_time" : 1697420332446,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "nD29BSILZlo7",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\nimport numpy as np\n\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\n\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\n\ndef convert_to_time_series():\n  columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n  'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  'relative_humidity_rmax', 'relative_humidity_rmin',\n  'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n  # Read the cleaned ready CSV and DEM slope CSV\n  df = pd.read_csv(current_ready_csv_path)\n  # df['location'] = df['lat'].astype(str) + ',' + df['lon'].astype(str)\n  # unique_location_pairs = df.drop_duplicates(subset='location')[['lat', 'lon']]\n\n  # print(unique_location_pairs)\n  # unique_date = df.drop_duplicates(subset='date')[['date']]\n  # print(unique_date)\n\n  # add a 7 days time series to each row\n  df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n  # Group the data by 'lat' and 'lon'\n  grouped = df.groupby(['lat', 'lon'])\n  \n  # fill in the missing values of AMSR and gridMet using polynomial values\n  # Function to perform polynomial interpolation\n  def interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    mask = y > 240\n    \n    y_interp = y.copy()\n\n    # Perform interpolation\n    y_interp[mask] = np.interp(x, x[~mask], y[~mask])\n\n    # Replace missing values with interpolated values\n    df[column_name] = y_interp\n\n  # Group by location and apply interpolation for each column\n  \n  for name, group in grouped:\n    print(\"Start to filling missing values..\")\n    interpolate_missing_inplace(group, 'SWE')\n    print(\"interpolated group: \", group)\n\n  \n\n  # Create a new DataFrame to store the time series data for each location\n  result = pd.DataFrame()\n\n  # Define the number of days to consider (7 days in this case)\n  num_days = 7\n\n  # ['date', 'lat', 'lon', 'SWE', 'Flag', 'air_temperature_tmmn',\n  # 'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  # 'relative_humidity_rmax', 'relative_humidity_rmin',\n  # 'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',\n  # 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness']\n  \n\n  for name, group in grouped:\n      group = group.set_index('date')\n      for day in range(1, num_days + 1):\n        for target_col in columns_to_be_time_series:\n          new_column_name = f'{target_col}_{day}'\n          group[new_column_name] = group[target_col].shift(day)\n      result = pd.concat([result, group], axis=0)\n\n  # Reset the index of the result DataFrame\n  result = result.reset_index()\n\n  print(result.describe)\n\n  result.to_csv(target_time_series_csv_path, index=False)\n\n\nconvert_to_time_series()\n\ndf = pd.read_csv(target_time_series_csv_path)\nshutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\nprint(df.columns)\n\ndf.head()\n\npd.set_option('display.max_columns', None)\ndescription = df.describe(include='all')\n# Print the description\nprint(description)\n\n",
  "history_output" : "today date = 2023-10-16\ntest start date:  2023-05-17\ntest end date:  2023-10-16\n/home/chetana\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...   aspect  eastness  northness\n511662  2019-01-01  33.358254 -107.826881  ...  276.389 -0.782283   0.110823\n511663  2019-01-01  33.358254 -107.826881  ...  276.389 -0.782283   0.110823\n511664  2019-01-01  33.358254 -107.826881  ...  276.389 -0.782283   0.110823\n512553  2019-01-02  33.358254 -107.826881  ...  276.389 -0.782283   0.110823\n512554  2019-01-02  33.358254 -107.826881  ...  276.389 -0.782283   0.110823\n...            ...        ...         ...  ...      ...       ...        ...\n512815  2022-12-30  33.358254 -107.826881  ...  276.389 -0.782283   0.110823\n512816  2022-12-30  33.358254 -107.826881  ...  276.389 -0.782283   0.110823\n512532  2022-12-31  33.358254 -107.826881  ...  276.389 -0.782283   0.110823\n512533  2022-12-31  33.358254 -107.826881  ...  276.389 -0.782283   0.110823\n512534  2022-12-31  33.358254 -107.826881  ...  276.389 -0.782283   0.110823\n[4383 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat       lon  ...    aspect  eastness  northness\n871710  2019-01-01  33.650385 -109.3091  ...  80.32056  0.778229   0.166578\n871711  2019-01-01  33.650385 -109.3091  ...  80.32056  0.778229   0.166578\n871712  2019-01-01  33.650385 -109.3091  ...  80.32056  0.778229   0.166578\n871713  2019-01-01  33.650385 -109.3091  ...  80.32056  0.778229   0.166578\n871714  2019-01-01  33.650385 -109.3091  ...  80.32056  0.778229   0.166578\n...            ...        ...       ...  ...       ...       ...        ...\n874125  2022-12-31  33.650385 -109.3091  ...  80.32056  0.778229   0.166578\n874126  2022-12-31  33.650385 -109.3091  ...  80.32056  0.778229   0.166578\n874127  2022-12-31  33.650385 -109.3091  ...  80.32056  0.778229   0.166578\n874128  2022-12-31  33.650385 -109.3091  ...  80.32056  0.778229   0.166578\n874129  2022-12-31  33.650385 -109.3091  ...  80.32056  0.778229   0.166578\n[7305 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat        lon  ...    aspect  eastness  northness\n710035  2019-01-01  33.978781 -109.50673  ...  295.7811  -0.73307   0.410255\n710036  2019-01-01  33.978781 -109.50673  ...  295.7811  -0.73307   0.410255\n709075  2019-01-02  33.978781 -109.50673  ...  295.7811  -0.73307   0.410255\n709076  2019-01-02  33.978781 -109.50673  ...  295.7811  -0.73307   0.410255\n709721  2019-01-03  33.978781 -109.50673  ...  295.7811  -0.73307   0.410255\n...            ...        ...        ...  ...       ...       ...        ...\n709090  2022-12-29  33.978781 -109.50673  ...  295.7811  -0.73307   0.410255\n710761  2022-12-30  33.978781 -109.50673  ...  295.7811  -0.73307   0.410255\n710762  2022-12-30  33.978781 -109.50673  ...  295.7811  -0.73307   0.410255\n709063  2022-12-31  33.978781 -109.50673  ...  295.7811  -0.73307   0.410255\n709064  2022-12-31  33.978781 -109.50673  ...  295.7811  -0.73307   0.410255\n[2922 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n904573  2019-01-01  34.365257 -111.006917  ...  179.38535  0.010727  -0.785369\n904574  2019-01-01  34.365257 -111.006917  ...  179.38535  0.010727  -0.785369\n904635  2019-01-02  34.365257 -111.006917  ...  179.38535  0.010727  -0.785369\n904636  2019-01-02  34.365257 -111.006917  ...  179.38535  0.010727  -0.785369\n905275  2019-01-03  34.365257 -111.006917  ...  179.38535  0.010727  -0.785369\n...            ...        ...         ...  ...        ...       ...        ...\n904642  2022-12-29  34.365257 -111.006917  ...  179.38535  0.010727  -0.785369\n906745  2022-12-30  34.365257 -111.006917  ...  179.38535  0.010727  -0.785369\n906746  2022-12-30  34.365257 -111.006917  ...  179.38535  0.010727  -0.785369\n904623  2022-12-31  34.365257 -111.006917  ...  179.38535  0.010727  -0.785369\n904624  2022-12-31  34.365257 -111.006917  ...  179.38535  0.010727  -0.785369\n[2922 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n855644  2019-01-01  34.742578 -111.411158  ...  167.37495  0.215186  -0.773161\n855645  2019-01-01  34.742578 -111.411158  ...  167.37495  0.215186  -0.773161\n854200  2019-01-02  34.742578 -111.411158  ...  167.37495  0.215186  -0.773161\n854201  2019-01-02  34.742578 -111.411158  ...  167.37495  0.215186  -0.773161\n855340  2019-01-03  34.742578 -111.411158  ...  167.37495  0.215186  -0.773161\n...            ...        ...         ...  ...        ...       ...        ...\n855209  2022-12-29  34.742578 -111.411158  ...  167.37495  0.215186  -0.773161\n855406  2022-12-30  34.742578 -111.411158  ...  167.37495  0.215186  -0.773161\n855407  2022-12-30  34.742578 -111.411158  ...  167.37495  0.215186  -0.773161\n855186  2022-12-31  34.742578 -111.411158  ...  167.37495  0.215186  -0.773161\n855187  2022-12-31  34.742578 -111.411158  ...  167.37495  0.215186  -0.773161\n[2922 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                 date      lat         lon  ...     aspect  eastness  northness\n1007337  2019-01-01  34.8606 -111.608788  ...  136.70627   0.60109  -0.629172\n1007338  2019-01-01  34.8606 -111.608788  ...  136.70627   0.60109  -0.629172\n1007339  2019-01-01  34.8606 -111.608788  ...  136.70627   0.60109  -0.629172\n1006662  2019-01-02  34.8606 -111.608788  ...  136.70627   0.60109  -0.629172\n1006663  2019-01-02  34.8606 -111.608788  ...  136.70627   0.60109  -0.629172\n...             ...      ...         ...  ...        ...       ...        ...\n1007761  2022-12-30  34.8606 -111.608788  ...  136.70627   0.60109  -0.629172\n1007762  2022-12-30  34.8606 -111.608788  ...  136.70627   0.60109  -0.629172\n1006644  2022-12-31  34.8606 -111.608788  ...  136.70627   0.60109  -0.629172\n1006645  2022-12-31  34.8606 -111.608788  ...  136.70627   0.60109  -0.629172\n1006646  2022-12-31  34.8606 -111.608788  ...  136.70627   0.60109  -0.629172\n[4383 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n495219  2019-01-01  34.971091 -111.509973  ...  343.42395 -0.277905   0.764181\n495220  2019-01-01  34.971091 -111.509973  ...  343.42395 -0.277905   0.764181\n495221  2019-01-01  34.971091 -111.509973  ...  343.42395 -0.277905   0.764181\n492390  2019-01-02  34.971091 -111.509973  ...  343.42395 -0.277905   0.764181\n492391  2019-01-02  34.971091 -111.509973  ...  343.42395 -0.277905   0.764181\n...            ...        ...         ...  ...        ...       ...        ...\n494800  2022-12-30  34.971091 -111.509973  ...  343.42395 -0.277905   0.764181\n494801  2022-12-30  34.971091 -111.509973  ...  343.42395 -0.277905   0.764181\n494409  2022-12-31  34.971091 -111.509973  ...  343.42395 -0.277905   0.764181\n494410  2022-12-31  34.971091 -111.509973  ...  343.42395 -0.277905   0.764181\n494411  2022-12-31  34.971091 -111.509973  ...  343.42395 -0.277905   0.764181\n[4383 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n998096  2019-01-01  35.235664 -108.267055  ...  129.55807  0.656793  -0.567082\n998856  2019-01-02  35.235664 -108.267055  ...  129.55807  0.656793  -0.567082\n997947  2019-01-03  35.235664 -108.267055  ...  129.55807  0.656793  -0.567082\n998229  2019-01-04  35.235664 -108.267055  ...  129.55807  0.656793  -0.567082\n998027  2019-01-05  35.235664 -108.267055  ...  129.55807  0.656793  -0.567082\n...            ...        ...         ...  ...        ...       ...        ...\n998855  2022-12-27  35.235664 -108.267055  ...  129.55807  0.656793  -0.567082\n999110  2022-12-28  35.235664 -108.267055  ...  129.55807  0.656793  -0.567082\n998126  2022-12-29  35.235664 -108.267055  ...  129.55807  0.656793  -0.567082\n998956  2022-12-30  35.235664 -108.267055  ...  129.55807  0.656793  -0.567082\n998117  2022-12-31  35.235664 -108.267055  ...  129.55807  0.656793  -0.567082\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...    aspect  eastness  northness\n605199  2019-01-01  36.002412 -106.551272  ...  163.9975  0.268998  -0.765643\n605200  2019-01-01  36.002412 -106.551272  ...  163.9975  0.268998  -0.765643\n605201  2019-01-01  36.002412 -106.551272  ...  163.9975  0.268998  -0.765643\n605946  2019-01-02  36.002412 -106.551272  ...  163.9975  0.268998  -0.765643\n605947  2019-01-02  36.002412 -106.551272  ...  163.9975  0.268998  -0.765643\n...            ...        ...         ...  ...       ...       ...        ...\n605551  2022-12-30  36.002412 -106.551272  ...  163.9975  0.268998  -0.765643\n605552  2022-12-30  36.002412 -106.551272  ...  163.9975  0.268998  -0.765643\n603828  2022-12-31  36.002412 -106.551272  ...  163.9975  0.268998  -0.765643\n603829  2022-12-31  36.002412 -106.551272  ...  163.9975  0.268998  -0.765643\n603830  2022-12-31  36.002412 -106.551272  ...  163.9975  0.268998  -0.765643\n[4383 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n687348  2019-01-01  36.125859 -105.527193  ...  327.60434 -0.491847   0.701216\n687349  2019-01-01  36.125859 -105.527193  ...  327.60434 -0.491847   0.701216\n687350  2019-01-01  36.125859 -105.527193  ...  327.60434 -0.491847   0.701216\n687351  2019-01-01  36.125859 -105.527193  ...  327.60434 -0.491847   0.701216\n687352  2019-01-01  36.125859 -105.527193  ...  327.60434 -0.491847   0.701216\n...            ...        ...         ...  ...        ...       ...        ...\n688673  2022-12-31  36.125859 -105.527193  ...  327.60434 -0.491847   0.701216\n688674  2022-12-31  36.125859 -105.527193  ...  327.60434 -0.491847   0.701216\n688675  2022-12-31  36.125859 -105.527193  ...  327.60434 -0.491847   0.701216\n688676  2022-12-31  36.125859 -105.527193  ...  327.60434 -0.491847   0.701216\n688677  2022-12-31  36.125859 -105.527193  ...  327.60434 -0.491847   0.701216\n[7305 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...   aspect  eastness  northness\n895793  2019-01-01  36.307048 -115.678156  ...  41.2881  0.583265   0.644397\n895794  2019-01-01  36.307048 -115.678156  ...  41.2881  0.583265   0.644397\n897817  2019-01-02  36.307048 -115.678156  ...  41.2881  0.583265   0.644397\n897818  2019-01-02  36.307048 -115.678156  ...  41.2881  0.583265   0.644397\n896491  2019-01-03  36.307048 -115.678156  ...  41.2881  0.583265   0.644397\n...            ...        ...         ...  ...      ...       ...        ...\n897826  2022-12-29  36.307048 -115.678156  ...  41.2881  0.583265   0.644397\n896021  2022-12-30  36.307048 -115.678156  ...  41.2881  0.583265   0.644397\n896022  2022-12-30  36.307048 -115.678156  ...  41.2881  0.583265   0.644397\n896327  2022-12-31  36.307048 -115.678156  ...  41.2881  0.583265   0.644397\n896328  2022-12-31  36.307048 -115.678156  ...  41.2881  0.583265   0.644397\n[2922 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n558693  2019-01-01  36.314286 -118.615646  ...  246.76215 -0.743146  -0.375799\n558720  2019-01-02  36.314286 -118.615646  ...  246.76215 -0.743146  -0.375799\n559520  2019-01-03  36.314286 -118.615646  ...  246.76215 -0.743146  -0.375799\n559067  2019-01-04  36.314286 -118.615646  ...  246.76215 -0.743146  -0.375799\n559354  2019-01-05  36.314286 -118.615646  ...  246.76215 -0.743146  -0.375799\n...            ...        ...         ...  ...        ...       ...        ...\n559191  2022-12-27  36.314286 -118.615646  ...  246.76215 -0.743146  -0.375799\n558253  2022-12-28  36.314286 -118.615646  ...  246.76215 -0.743146  -0.375799\n559195  2022-12-29  36.314286 -118.615646  ...  246.76215 -0.743146  -0.375799\n559305  2022-12-30  36.314286 -118.615646  ...  246.76215 -0.743146  -0.375799\n558715  2022-12-31  36.314286 -118.615646  ...  246.76215 -0.743146  -0.375799\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n105929  2019-01-01  36.343235 -118.588697  ...  222.91547 -0.597804  -0.632115\n105449  2019-01-02  36.343235 -118.588697  ...  222.91547 -0.597804  -0.632115\n106256  2019-01-03  36.343235 -118.588697  ...  222.91547 -0.597804  -0.632115\n105837  2019-01-04  36.343235 -118.588697  ...  222.91547 -0.597804  -0.632115\n105609  2019-01-05  36.343235 -118.588697  ...  222.91547 -0.597804  -0.632115\n...            ...        ...         ...  ...        ...       ...        ...\n106197  2022-12-27  36.343235 -118.588697  ...  222.91547 -0.597804  -0.632115\n105965  2022-12-28  36.343235 -118.588697  ...  222.91547 -0.597804  -0.632115\n105718  2022-12-29  36.343235 -118.588697  ...  222.91547 -0.597804  -0.632115\n106284  2022-12-30  36.343235 -118.588697  ...  222.91547 -0.597804  -0.632115\n105444  2022-12-31  36.343235 -118.588697  ...  222.91547 -0.597804  -0.632115\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...   aspect  eastness  northness\n414848  2019-01-01  36.364939 -118.292254  ...  123.959  0.692435  -0.509422\n414849  2019-01-01  36.364939 -118.292254  ...  123.959  0.692435  -0.509422\n414850  2019-01-01  36.364939 -118.292254  ...  123.959  0.692435  -0.509422\n414851  2019-01-01  36.364939 -118.292254  ...  123.959  0.692435  -0.509422\n413908  2019-01-02  36.364939 -118.292254  ...  123.959  0.692435  -0.509422\n...            ...        ...         ...  ...      ...       ...        ...\n412335  2022-12-30  36.364939 -118.292254  ...  123.959  0.692435  -0.509422\n413880  2022-12-31  36.364939 -118.292254  ...  123.959  0.692435  -0.509422\n413881  2022-12-31  36.364939 -118.292254  ...  123.959  0.692435  -0.509422\n413882  2022-12-31  36.364939 -118.292254  ...  123.959  0.692435  -0.509422\n413883  2022-12-31  36.364939 -118.292254  ...  123.959  0.692435  -0.509422\n[5844 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n204408  2019-01-01  36.408329 -118.579714  ...  136.56012  0.602351  -0.628026\n203709  2019-01-02  36.408329 -118.579714  ...  136.56012  0.602351  -0.628026\n204499  2019-01-03  36.408329 -118.579714  ...  136.56012  0.602351  -0.628026\n204314  2019-01-04  36.408329 -118.579714  ...  136.56012  0.602351  -0.628026\n204336  2019-01-05  36.408329 -118.579714  ...  136.56012  0.602351  -0.628026\n...            ...        ...         ...  ...        ...       ...        ...\n204186  2022-12-27  36.408329 -118.579714  ...  136.56012  0.602351  -0.628026\n203473  2022-12-28  36.408329 -118.579714  ...  136.56012  0.602351  -0.628026\n204441  2022-12-29  36.408329 -118.579714  ...  136.56012  0.602351  -0.628026\n203802  2022-12-30  36.408329 -118.579714  ...  136.56012  0.602351  -0.628026\n203702  2022-12-31  36.408329 -118.579714  ...  136.56012  0.602351  -0.628026\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...    aspect  eastness  northness\n848062  2019-01-01  36.466145 -118.543781  ...  308.7936 -0.662058   0.559689\n848340  2019-01-02  36.466145 -118.543781  ...  308.7936 -0.662058   0.559689\n848416  2019-01-03  36.466145 -118.543781  ...  308.7936 -0.662058   0.559689\n847745  2019-01-04  36.466145 -118.543781  ...  308.7936 -0.662058   0.559689\n848489  2019-01-05  36.466145 -118.543781  ...  308.7936 -0.662058   0.559689\n...            ...        ...         ...  ...       ...       ...        ...\n847617  2022-12-27  36.466145 -118.543781  ...  308.7936 -0.662058   0.559689\n847398  2022-12-28  36.466145 -118.543781  ...  308.7936 -0.662058   0.559689\n848343  2022-12-29  36.466145 -118.543781  ...  308.7936 -0.662058   0.559689\n847723  2022-12-30  36.466145 -118.543781  ...  308.7936 -0.662058   0.559689\n847859  2022-12-31  36.466145 -118.543781  ...  308.7936 -0.662058   0.559689\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n772768  2019-01-01  36.473369 -105.194817  ...  16.374525  0.274784   0.764701\n772769  2019-01-01  36.473369 -105.194817  ...  16.374525  0.274784   0.764701\n772770  2019-01-01  36.473369 -105.194817  ...  16.374525  0.274784   0.764701\n772771  2019-01-01  36.473369 -105.194817  ...  16.374525  0.274784   0.764701\n772868  2019-01-02  36.473369 -105.194817  ...  16.374525  0.274784   0.764701\n...            ...        ...         ...  ...        ...       ...        ...\n776191  2022-12-30  36.473369 -105.194817  ...  16.374525  0.274784   0.764701\n772852  2022-12-31  36.473369 -105.194817  ...  16.374525  0.274784   0.764701\n772853  2022-12-31  36.473369 -105.194817  ...  16.374525  0.274784   0.764701\n772854  2022-12-31  36.473369 -105.194817  ...  16.374525  0.274784   0.764701\n772855  2022-12-31  36.473369 -105.194817  ...  16.374525  0.274784   0.764701\n[5844 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date       lat         lon  ...    aspect  eastness  northness\n308969  2019-01-01  36.56722 -118.768361  ...  163.0093  0.284301  -0.763091\n309495  2019-01-02  36.56722 -118.768361  ...  163.0093  0.284301  -0.763091\n309317  2019-01-03  36.56722 -118.768361  ...  163.0093  0.284301  -0.763091\n309618  2019-01-04  36.56722 -118.768361  ...  163.0093  0.284301  -0.763091\n309396  2019-01-05  36.56722 -118.768361  ...  163.0093  0.284301  -0.763091\n...            ...       ...         ...  ...       ...       ...        ...\n309494  2022-12-27  36.56722 -118.768361  ...  163.0093  0.284301  -0.763091\n309012  2022-12-28  36.56722 -118.768361  ...  163.0093  0.284301  -0.763091\n309500  2022-12-29  36.56722 -118.768361  ...  163.0093  0.284301  -0.763091\n309355  2022-12-30  36.56722 -118.768361  ...  163.0093  0.284301  -0.763091\n309488  2022-12-31  36.56722 -118.768361  ...  163.0093  0.284301  -0.763091\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                 date        lat         lon  ...     aspect  eastness  northness\n1021715  2019-01-01  36.682572 -118.427001  ...  194.28731  -0.24195  -0.769692\n1021247  2019-01-02  36.682572 -118.427001  ...  194.28731  -0.24195  -0.769692\n1021320  2019-01-03  36.682572 -118.427001  ...  194.28731  -0.24195  -0.769692\n1022354  2019-01-04  36.682572 -118.427001  ...  194.28731  -0.24195  -0.769692\n1022373  2019-01-05  36.682572 -118.427001  ...  194.28731  -0.24195  -0.769692\n...             ...        ...         ...  ...        ...       ...        ...\n1021511  2022-12-27  36.682572 -118.427001  ...  194.28731  -0.24195  -0.769692\n1021994  2022-12-28  36.682572 -118.427001  ...  194.28731  -0.24195  -0.769692\n1022234  2022-12-29  36.682572 -118.427001  ...  194.28731  -0.24195  -0.769692\n1021352  2022-12-30  36.682572 -118.427001  ...  194.28731  -0.24195  -0.769692\n1021507  2022-12-31  36.682572 -118.427001  ...  194.28731  -0.24195  -0.769692\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n910289  2019-01-01  36.725784 -118.840226  ...  335.07007 -0.398911   0.736572\n910317  2019-01-02  36.725784 -118.840226  ...  335.07007 -0.398911   0.736572\n910635  2019-01-03  36.725784 -118.840226  ...  335.07007 -0.398911   0.736572\n910438  2019-01-04  36.725784 -118.840226  ...  335.07007 -0.398911   0.736572\n911208  2019-01-05  36.725784 -118.840226  ...  335.07007 -0.398911   0.736572\n...            ...        ...         ...  ...        ...       ...        ...\n910564  2022-12-27  36.725784 -118.840226  ...  335.07007 -0.398911   0.736572\n911574  2022-12-28  36.725784 -118.840226  ...  335.07007 -0.398911   0.736572\n910322  2022-12-29  36.725784 -118.840226  ...  335.07007 -0.398911   0.736572\n910414  2022-12-30  36.725784 -118.840226  ...  335.07007 -0.398911   0.736572\n911314  2022-12-31  36.725784 -118.840226  ...  335.07007 -0.398911   0.736572\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n344302  2019-01-01  36.740183 -118.705478  ...  44.612373  0.612272   0.618651\n344077  2019-01-02  36.740183 -118.705478  ...  44.612373  0.612272   0.618651\n343887  2019-01-03  36.740183 -118.705478  ...  44.612373  0.612272   0.618651\n343945  2019-01-04  36.740183 -118.705478  ...  44.612373  0.612272   0.618651\n343973  2019-01-05  36.740183 -118.705478  ...  44.612373  0.612272   0.618651\n...            ...        ...         ...  ...        ...       ...        ...\n344589  2022-12-27  36.740183 -118.705478  ...  44.612373  0.612272   0.618651\n344349  2022-12-28  36.740183 -118.705478  ...  44.612373  0.612272   0.618651\n344080  2022-12-29  36.740183 -118.705478  ...  44.612373  0.612272   0.618651\n343920  2022-12-30  36.740183 -118.705478  ...  44.612373  0.612272   0.618651\n344586  2022-12-31  36.740183 -118.705478  ...  44.612373  0.612272   0.618651\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n713563  2019-01-01  36.783364 -118.427001  ...  117.91524  0.723703  -0.437857\n714063  2019-01-02  36.783364 -118.427001  ...  117.91524  0.723703  -0.437857\n713664  2019-01-03  36.783364 -118.427001  ...  117.91524  0.723703  -0.437857\n713222  2019-01-04  36.783364 -118.427001  ...  117.91524  0.723703  -0.437857\n713246  2019-01-05  36.783364 -118.427001  ...  117.91524  0.723703  -0.437857\n...            ...        ...         ...  ...        ...       ...        ...\n713593  2022-12-27  36.783364 -118.427001  ...  117.91524  0.723703  -0.437857\n714323  2022-12-28  36.783364 -118.427001  ...  117.91524  0.723703  -0.437857\n714067  2022-12-29  36.783364 -118.427001  ...  117.91524  0.723703  -0.437857\n714169  2022-12-30  36.783364 -118.427001  ...  117.91524  0.723703  -0.437857\n714056  2022-12-31  36.783364 -118.427001  ...  117.91524  0.723703  -0.437857\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                 date        lat         lon  ...     aspect  eastness  northness\n1017900  2019-01-01  37.006073 -106.272795  ...  192.08386 -0.206363  -0.774196\n1017901  2019-01-01  37.006073 -106.272795  ...  192.08386 -0.206363  -0.774196\n1017902  2019-01-01  37.006073 -106.272795  ...  192.08386 -0.206363  -0.774196\n1017264  2019-01-02  37.006073 -106.272795  ...  192.08386 -0.206363  -0.774196\n1017265  2019-01-02  37.006073 -106.272795  ...  192.08386 -0.206363  -0.774196\n...             ...        ...         ...  ...        ...       ...        ...\n1020481  2022-12-30  37.006073 -106.272795  ...  192.08386 -0.206363  -0.774196\n1020482  2022-12-30  37.006073 -106.272795  ...  192.08386 -0.206363  -0.774196\n1017252  2022-12-31  37.006073 -106.272795  ...  192.08386 -0.206363  -0.774196\n1017253  2022-12-31  37.006073 -106.272795  ...  192.08386 -0.206363  -0.774196\n1017254  2022-12-31  37.006073 -106.272795  ...  192.08386 -0.206363  -0.774196\n[4383 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n868300  2019-01-01  37.034762 -118.912091  ...  88.578835  0.785244   0.024796\n867846  2019-01-02  37.034762 -118.912091  ...  88.578835  0.785244   0.024796\n868881  2019-01-03  37.034762 -118.912091  ...  88.578835  0.785244   0.024796\n867968  2019-01-04  37.034762 -118.912091  ...  88.578835  0.785244   0.024796\n868218  2019-01-05  37.034762 -118.912091  ...  88.578835  0.785244   0.024796\n...            ...        ...         ...  ...        ...       ...        ...\n868080  2022-12-27  37.034762 -118.912091  ...  88.578835  0.785244   0.024796\n869064  2022-12-28  37.034762 -118.912091  ...  88.578835  0.785244   0.024796\n868816  2022-12-29  37.034762 -118.912091  ...  88.578835  0.785244   0.024796\n868182  2022-12-30  37.034762 -118.912091  ...  88.578835  0.785244   0.024796\n868807  2022-12-31  37.034762 -118.912091  ...  88.578835  0.785244   0.024796\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...    aspect  eastness  northness\n858088  2019-01-01  37.070608 -118.768361  ...  78.69852  0.775608   0.193519\n857874  2019-01-02  37.070608 -118.768361  ...  78.69852  0.775608   0.193519\n857942  2019-01-03  37.070608 -118.768361  ...  78.69852  0.775608   0.193519\n857732  2019-01-04  37.070608 -118.768361  ...  78.69852  0.775608   0.193519\n857765  2019-01-05  37.070608 -118.768361  ...  78.69852  0.775608   0.193519\n...            ...        ...         ...  ...       ...       ...        ...\n858599  2022-12-27  37.070608 -118.768361  ...  78.69852  0.775608   0.193519\n858361  2022-12-28  37.070608 -118.768361  ...  78.69852  0.775608   0.193519\n857878  2022-12-29  37.070608 -118.768361  ...  78.69852  0.775608   0.193519\n858704  2022-12-30  37.070608 -118.768361  ...  78.69852  0.775608   0.193519\n858597  2022-12-31  37.070608 -118.768361  ...  78.69852  0.775608   0.193519\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...    aspect  eastness  northness\n468210  2019-01-01  37.077776 -106.452458  ...  174.9554  0.087706  -0.783458\n468008  2019-01-02  37.077776 -106.452458  ...  174.9554  0.087706  -0.783458\n468314  2019-01-03  37.077776 -106.452458  ...  174.9554  0.087706  -0.783458\n468872  2019-01-04  37.077776 -106.452458  ...  174.9554  0.087706  -0.783458\n468892  2019-01-05  37.077776 -106.452458  ...  174.9554  0.087706  -0.783458\n...            ...        ...         ...  ...       ...       ...        ...\n468241  2022-12-27  37.077776 -106.452458  ...  174.9554  0.087706  -0.783458\n467536  2022-12-28  37.077776 -106.452458  ...  174.9554  0.087706  -0.783458\n468012  2022-12-29  37.077776 -106.452458  ...  174.9554  0.087706  -0.783458\n468849  2022-12-30  37.077776 -106.452458  ...  174.9554  0.087706  -0.783458\n468743  2022-12-31  37.077776 -106.452458  ...  174.9554  0.087706  -0.783458\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n480544  2019-01-01  37.092108 -118.498866  ...  248.30103 -0.748683  -0.354142\n479813  2019-01-02  37.092108 -118.498866  ...  248.30103 -0.748683  -0.354142\n480155  2019-01-03  37.092108 -118.498866  ...  248.30103 -0.748683  -0.354142\n479936  2019-01-04  37.092108 -118.498866  ...  248.30103 -0.748683  -0.354142\n479964  2019-01-05  37.092108 -118.498866  ...  248.30103 -0.748683  -0.354142\n...            ...        ...         ...  ...        ...       ...        ...\n480563  2022-12-27  37.092108 -118.498866  ...  248.30103 -0.748683  -0.354142\n479592  2022-12-28  37.092108 -118.498866  ...  248.30103 -0.748683  -0.354142\n480569  2022-12-29  37.092108 -118.498866  ...  248.30103 -0.748683  -0.354142\n479920  2022-12-30  37.092108 -118.498866  ...  248.30103 -0.748683  -0.354142\n480561  2022-12-31  37.092108 -118.498866  ...  248.30103 -0.748683  -0.354142\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...    aspect  eastness  northness\n371712  2019-01-01  37.156571 -119.199551  ...  127.4153  0.671226   -0.54598\n372446  2019-01-02  37.156571 -119.199551  ...  127.4153  0.671226   -0.54598\n372511  2019-01-03  37.156571 -119.199551  ...  127.4153  0.671226   -0.54598\n371853  2019-01-04  37.156571 -119.199551  ...  127.4153  0.671226   -0.54598\n371636  2019-01-05  37.156571 -119.199551  ...  127.4153  0.671226   -0.54598\n...            ...        ...         ...  ...       ...       ...        ...\n371734  2022-12-27  37.156571 -119.199551  ...  127.4153  0.671226   -0.54598\n371498  2022-12-28  37.156571 -119.199551  ...  127.4153  0.671226   -0.54598\n372449  2022-12-29  37.156571 -119.199551  ...  127.4153  0.671226   -0.54598\n371831  2022-12-30  37.156571 -119.199551  ...  127.4153  0.671226   -0.54598\n372441  2022-12-31  37.156571 -119.199551  ...  127.4153  0.671226   -0.54598\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...    aspect  eastness  northness\n749818  2019-01-01  37.178047 -118.561748  ...  1.035605  0.018072   0.785316\n750108  2019-01-02  37.178047 -118.561748  ...  1.035605  0.018072   0.785316\n750682  2019-01-03  37.178047 -118.561748  ...  1.035605  0.018072   0.785316\n750491  2019-01-04  37.178047 -118.561748  ...  1.035605  0.018072   0.785316\n750521  2019-01-05  37.178047 -118.561748  ...  1.035605  0.018072   0.785316\n...            ...        ...         ...  ...       ...       ...        ...\n750106  2022-12-27  37.178047 -118.561748  ...  1.035605  0.018072   0.785316\n750857  2022-12-28  37.178047 -118.561748  ...  1.035605  0.018072   0.785316\n750622  2022-12-29  37.178047 -118.561748  ...  1.035605  0.018072   0.785316\n750715  2022-12-30  37.178047 -118.561748  ...  1.035605  0.018072   0.785316\n749836  2022-12-31  37.178047 -118.561748  ...  1.035605  0.018072   0.785316\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:              date       lat         lon  ...     aspect  eastness  northness\n1209  2019-01-01  37.19236 -118.939041  ...  24.605782  0.394541   0.737872\n993   2019-01-02  37.19236 -118.939041  ...  24.605782  0.394541   0.737872\n567   2019-01-03  37.19236 -118.939041  ...  24.605782  0.394541   0.737872\n1117  2019-01-04  37.19236 -118.939041  ...  24.605782  0.394541   0.737872\n645   2019-01-05  37.19236 -118.939041  ...  24.605782  0.394541   0.737872\n...          ...       ...         ...  ...        ...       ...        ...\n496   2022-12-27  37.19236 -118.939041  ...  24.605782  0.394541   0.737872\n1239  2022-12-28  37.19236 -118.939041  ...  24.605782  0.394541   0.737872\n270   2022-12-29  37.19236 -118.939041  ...  24.605782  0.394541   0.737872\n1101  2022-12-30  37.19236 -118.939041  ...  24.605782  0.394541   0.737872\n989   2022-12-31  37.19236 -118.939041  ...  24.605782  0.394541   0.737872\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...    aspect  eastness  northness\n342874  2019-01-01  37.220979 -119.217518  ...  82.07095  0.780595   0.137082\n342379  2019-01-02  37.220979 -119.217518  ...  82.07095  0.780595   0.137082\n342452  2019-01-03  37.220979 -119.217518  ...  82.07095  0.780595   0.137082\n342504  2019-01-04  37.220979 -119.217518  ...  82.07095  0.780595   0.137082\n342774  2019-01-05  37.220979 -119.217518  ...  82.07095  0.780595   0.137082\n...            ...        ...         ...  ...       ...       ...        ...\n342377  2022-12-27  37.220979 -119.217518  ...  82.07095  0.780595   0.137082\n342124  2022-12-28  37.220979 -119.217518  ...  82.07095  0.780595   0.137082\n342620  2022-12-29  37.220979 -119.217518  ...  82.07095  0.780595   0.137082\n343223  2022-12-30  37.220979 -119.217518  ...  82.07095  0.780595   0.137082\n342613  2022-12-31  37.220979 -119.217518  ...  82.07095  0.780595   0.137082\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date       lat        lon  ...    aspect  eastness  northness\n844531  2019-01-01  37.35677 -105.23075  ...  74.62513   0.76718    0.25917\n844532  2019-01-01  37.35677 -105.23075  ...  74.62513   0.76718    0.25917\n844533  2019-01-01  37.35677 -105.23075  ...  74.62513   0.76718    0.25917\n844534  2019-01-01  37.35677 -105.23075  ...  74.62513   0.76718    0.25917\n842647  2019-01-02  37.35677 -105.23075  ...  74.62513   0.76718    0.25917\n...            ...       ...        ...  ...       ...       ...        ...\n842066  2022-12-30  37.35677 -105.23075  ...  74.62513   0.76718    0.25917\n844619  2022-12-31  37.35677 -105.23075  ...  74.62513   0.76718    0.25917\n844620  2022-12-31  37.35677 -105.23075  ...  74.62513   0.76718    0.25917\n844621  2022-12-31  37.35677 -105.23075  ...  74.62513   0.76718    0.25917\n844622  2022-12-31  37.35677 -105.23075  ...  74.62513   0.76718    0.25917\n[5844 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date       lat         lon  ...     aspect  eastness  northness\n504783  2019-01-01  37.36391 -106.542289  ...  355.78055 -0.073445   0.784041\n505294  2019-01-02  37.36391 -106.542289  ...  355.78055 -0.073445   0.784041\n504606  2019-01-03  37.36391 -106.542289  ...  355.78055 -0.073445   0.784041\n505405  2019-01-04  37.36391 -106.542289  ...  355.78055 -0.073445   0.784041\n505429  2019-01-05  37.36391 -106.542289  ...  355.78055 -0.073445   0.784041\n...            ...       ...         ...  ...        ...       ...        ...\n504820  2022-12-27  37.36391 -106.542289  ...  355.78055 -0.073445   0.784041\n504069  2022-12-28  37.36391 -106.542289  ...  355.78055 -0.073445   0.784041\n504826  2022-12-29  37.36391 -106.542289  ...  355.78055 -0.073445   0.784041\n504644  2022-12-30  37.36391 -106.542289  ...  355.78055 -0.073445   0.784041\n504811  2022-12-31  37.36391 -106.542289  ...  355.78055 -0.073445   0.784041\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...   aspect  eastness  northness\n396499  2019-01-01  37.385326 -118.912091  ...  65.8464  0.739652   0.388399\n396772  2019-01-02  37.385326 -118.912091  ...  65.8464  0.739652   0.388399\n396599  2019-01-03  37.385326 -118.912091  ...  65.8464  0.739652   0.388399\n396636  2019-01-04  37.385326 -118.912091  ...  65.8464  0.739652   0.388399\n396427  2019-01-05  37.385326 -118.912091  ...  65.8464  0.739652   0.388399\n...            ...        ...         ...  ...      ...       ...        ...\n396522  2022-12-27  37.385326 -118.912091  ...  65.8464  0.739652   0.388399\n396309  2022-12-28  37.385326 -118.912091  ...  65.8464  0.739652   0.388399\n396528  2022-12-29  37.385326 -118.912091  ...  65.8464  0.739652   0.388399\n397381  2022-12-30  37.385326 -118.912091  ...  65.8464  0.739652   0.388399\n396765  2022-12-31  37.385326 -118.912091  ...  65.8464  0.739652   0.388399\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n628104  2019-01-01  37.406737 -119.487013  ...  174.77098  0.090886  -0.783313\n628128  2019-01-02  37.406737 -119.487013  ...  174.77098  0.090886  -0.783313\n627944  2019-01-03  37.406737 -119.487013  ...  174.77098  0.090886  -0.783313\n627739  2019-01-04  37.406737 -119.487013  ...  174.77098  0.090886  -0.783313\n627757  2019-01-05  37.406737 -119.487013  ...  174.77098  0.090886  -0.783313\n...            ...        ...         ...  ...        ...       ...        ...\n628127  2022-12-27  37.406737 -119.487013  ...  174.77098  0.090886  -0.783313\n627156  2022-12-28  37.406737 -119.487013  ...  174.77098  0.090886  -0.783313\n628135  2022-12-29  37.406737 -119.487013  ...  174.77098  0.090886  -0.783313\n628216  2022-12-30  37.406737 -119.487013  ...  174.77098  0.090886  -0.783313\n627382  2022-12-31  37.406737 -119.487013  ...  174.77098  0.090886  -0.783313\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:               date       lat         lon  ...    aspect  eastness  northness\n13827  2019-01-01  37.42814 -106.623137  ...  128.6302  0.663167   -0.55809\n13379  2019-01-02  37.42814 -106.623137  ...  128.6302  0.663167   -0.55809\n13678  2019-01-03  37.42814 -106.623137  ...  128.6302  0.663167   -0.55809\n13493  2019-01-04  37.42814 -106.623137  ...  128.6302  0.663167   -0.55809\n13747  2019-01-05  37.42814 -106.623137  ...  128.6302  0.663167   -0.55809\n...           ...       ...         ...  ...       ...       ...        ...\n13377  2022-12-27  37.42814 -106.623137  ...  128.6302  0.663167   -0.55809\n13166  2022-12-28  37.42814 -106.623137  ...  128.6302  0.663167   -0.55809\n13607  2022-12-29  37.42814 -106.623137  ...  128.6302  0.663167   -0.55809\n14205  2022-12-30  37.42814 -106.623137  ...  128.6302  0.663167   -0.55809\n13372  2022-12-31  37.42814 -106.623137  ...  128.6302  0.663167   -0.55809\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...    aspect  eastness  northness\n271733  2019-01-01  37.449539 -118.759377  ...  301.4781  -0.70614   0.481228\n271253  2019-01-02  37.449539 -118.759377  ...  301.4781  -0.70614   0.481228\n270828  2019-01-03  37.449539 -118.759377  ...  301.4781  -0.70614   0.481228\n271373  2019-01-04  37.449539 -118.759377  ...  301.4781  -0.70614   0.481228\n271398  2019-01-05  37.449539 -118.759377  ...  301.4781  -0.70614   0.481228\n...            ...        ...         ...  ...       ...       ...        ...\n271511  2022-12-27  37.449539 -118.759377  ...  301.4781  -0.70614   0.481228\n270541  2022-12-28  37.449539 -118.759377  ...  301.4781  -0.70614   0.481228\n271515  2022-12-29  37.449539 -118.759377  ...  301.4781  -0.70614   0.481228\n271350  2022-12-30  37.449539 -118.759377  ...  301.4781  -0.70614   0.481228\n271507  2022-12-31  37.449539 -118.759377  ...  301.4781  -0.70614   0.481228\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:               date        lat         lon  ...     aspect  eastness  northness\n76705  2019-01-01  37.456669 -108.446718  ...  146.80101  0.500959  -0.696765\n76247  2019-01-02  37.456669 -108.446718  ...  146.80101  0.500959  -0.696765\n76556  2019-01-03  37.456669 -108.446718  ...  146.80101  0.500959  -0.696765\n77066  2019-01-04  37.456669 -108.446718  ...  146.80101  0.500959  -0.696765\n77086  2019-01-05  37.456669 -108.446718  ...  146.80101  0.500959  -0.696765\n...           ...        ...         ...  ...        ...       ...        ...\n76246  2022-12-27  37.456669 -108.446718  ...  146.80101  0.500959  -0.696765\n76735  2022-12-28  37.456669 -108.446718  ...  146.80101  0.500959  -0.696765\n76950  2022-12-29  37.456669 -108.446718  ...  146.80101  0.500959  -0.696765\n76585  2022-12-30  37.456669 -108.446718  ...  146.80101  0.500959  -0.696765\n76473  2022-12-31  37.456669 -108.446718  ...  146.80101  0.500959  -0.696765\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n976180  2019-01-01  37.456669 -108.015527  ...  318.66403 -0.583703   0.644045\n975960  2019-01-02  37.456669 -108.015527  ...  318.66403 -0.583703   0.644045\n976271  2019-01-03  37.456669 -108.015527  ...  318.66403 -0.583703   0.644045\n976076  2019-01-04  37.456669 -108.015527  ...  318.66403 -0.583703   0.644045\n977072  2019-01-05  37.456669 -108.015527  ...  318.66403 -0.583703   0.644045\n...            ...        ...         ...  ...        ...       ...        ...\n976922  2022-12-27  37.456669 -108.015527  ...  318.66403 -0.583703   0.644045\n976702  2022-12-28  37.456669 -108.015527  ...  318.66403 -0.583703   0.644045\n975962  2022-12-29  37.456669 -108.015527  ...  318.66403 -0.583703   0.644045\n976308  2022-12-30  37.456669 -108.015527  ...  318.66403 -0.583703   0.644045\n976204  2022-12-31  37.456669 -108.015527  ...  318.66403 -0.583703   0.644045\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n912738  2019-01-01  37.470931 -119.289383  ...  201.72794 -0.354556  -0.748583\n911805  2019-01-02  37.470931 -119.289383  ...  201.72794 -0.354556  -0.748583\n912823  2019-01-03  37.470931 -119.289383  ...  201.72794 -0.354556  -0.748583\n911921  2019-01-04  37.470931 -119.289383  ...  201.72794 -0.354556  -0.748583\n912661  2019-01-05  37.470931 -119.289383  ...  201.72794 -0.354556  -0.748583\n...            ...        ...         ...  ...        ...       ...        ...\n911804  2022-12-27  37.470931 -119.289383  ...  201.72794 -0.354556  -0.748583\n912556  2022-12-28  37.470931 -119.289383  ...  201.72794 -0.354556  -0.748583\n911808  2022-12-29  37.470931 -119.289383  ...  201.72794 -0.354556  -0.748583\n912860  2022-12-30  37.470931 -119.289383  ...  201.72794 -0.354556  -0.748583\n911800  2022-12-31  37.470931 -119.289383  ...  201.72794 -0.354556  -0.748583\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date       lat         lon  ...     aspect  eastness  northness\n408457  2019-01-01  37.47806 -108.096375  ...  38.114204  0.552993   0.666629\n408970  2019-01-02  37.47806 -108.096375  ...  38.114204  0.552993   0.666629\n408558  2019-01-03  37.47806 -108.096375  ...  38.114204  0.552993   0.666629\n408353  2019-01-04  37.47806 -108.096375  ...  38.114204  0.552993   0.666629\n408884  2019-01-05  37.47806 -108.096375  ...  38.114204  0.552993   0.666629\n...            ...       ...         ...  ...        ...       ...        ...\n408493  2022-12-27  37.47806 -108.096375  ...  38.114204  0.552993   0.666629\n407758  2022-12-28  37.47806 -108.096375  ...  38.114204  0.552993   0.666629\n408496  2022-12-29  37.47806 -108.096375  ...  38.114204  0.552993   0.666629\n408332  2022-12-30  37.47806 -108.096375  ...  38.114204  0.552993   0.666629\n408488  2022-12-31  37.47806 -108.096375  ...  38.114204  0.552993   0.666629\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n696609  2019-01-01  37.492316 -107.701116  ...  224.92964   -0.6149  -0.616058\n696632  2019-01-02  37.492316 -107.701116  ...  224.92964   -0.6149  -0.616058\n696699  2019-01-03  37.492316 -107.701116  ...  224.92964   -0.6149  -0.616058\n696043  2019-01-04  37.492316 -107.701116  ...  224.92964   -0.6149  -0.616058\n696791  2019-01-05  37.492316 -107.701116  ...  224.92964   -0.6149  -0.616058\n...            ...        ...         ...  ...        ...       ...        ...\n695926  2022-12-27  37.492316 -107.701116  ...  224.92964   -0.6149  -0.616058\n696181  2022-12-28  37.492316 -107.701116  ...  224.92964   -0.6149  -0.616058\n696637  2022-12-29  37.492316 -107.701116  ...  224.92964   -0.6149  -0.616058\n696736  2022-12-30  37.492316 -107.701116  ...  224.92964   -0.6149  -0.616058\n696627  2022-12-31  37.492316 -107.701116  ...  224.92964   -0.6149  -0.616058\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n375191  2019-01-01  37.499443 -106.865683  ...  183.17847 -0.055389  -0.784628\n375192  2019-01-01  37.499443 -106.865683  ...  183.17847 -0.055389  -0.784628\n373799  2019-01-02  37.499443 -106.865683  ...  183.17847 -0.055389  -0.784628\n373800  2019-01-02  37.499443 -106.865683  ...  183.17847 -0.055389  -0.784628\n373939  2019-01-03  37.499443 -106.865683  ...  183.17847 -0.055389  -0.784628\n...            ...        ...         ...  ...        ...       ...        ...\n375246  2022-12-29  37.499443 -106.865683  ...  183.17847 -0.055389  -0.784628\n374007  2022-12-30  37.499443 -106.865683  ...  183.17847 -0.055389  -0.784628\n374008  2022-12-30  37.499443 -106.865683  ...  183.17847 -0.055389  -0.784628\n374311  2022-12-31  37.499443 -106.865683  ...  183.17847 -0.055389  -0.784628\n374312  2022-12-31  37.499443 -106.865683  ...  183.17847 -0.055389  -0.784628\n[2922 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n425087  2019-01-01  37.527945 -113.055076  ...  106.99514  0.763079  -0.284369\n425088  2019-01-01  37.527945 -113.055076  ...  106.99514  0.763079  -0.284369\n425089  2019-01-01  37.527945 -113.055076  ...  106.99514  0.763079  -0.284369\n425090  2019-01-01  37.527945 -113.055076  ...  106.99514  0.763079  -0.284369\n424227  2019-01-02  37.527945 -113.055076  ...  106.99514  0.763079  -0.284369\n...            ...        ...         ...  ...        ...       ...        ...\n424614  2022-12-30  37.527945 -113.055076  ...  106.99514  0.763079  -0.284369\n422291  2022-12-31  37.527945 -113.055076  ...  106.99514  0.763079  -0.284369\n422292  2022-12-31  37.527945 -113.055076  ...  106.99514  0.763079  -0.284369\n422293  2022-12-31  37.527945 -113.055076  ...  106.99514  0.763079  -0.284369\n422294  2022-12-31  37.527945 -113.055076  ...  106.99514  0.763079  -0.284369\n[5844 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n118083  2019-01-01  37.556436 -119.235484  ...  290.10178 -0.753993   0.331041\n118103  2019-01-02  37.556436 -119.235484  ...  290.10178 -0.753993   0.331041\n117944  2019-01-03  37.556436 -119.235484  ...  290.10178 -0.753993   0.331041\n117543  2019-01-04  37.556436 -119.235484  ...  290.10178 -0.753993   0.331041\n118014  2019-01-05  37.556436 -119.235484  ...  290.10178 -0.753993   0.331041\n...            ...        ...         ...  ...        ...       ...        ...\n117885  2022-12-27  37.556436 -119.235484  ...  290.10178 -0.753993   0.331041\n117146  2022-12-28  37.556436 -119.235484  ...  290.10178 -0.753993   0.331041\n117890  2022-12-29  37.556436 -119.235484  ...  290.10178 -0.753993   0.331041\n117524  2022-12-30  37.556436 -119.235484  ...  290.10178 -0.753993   0.331041\n117396  2022-12-31  37.556436 -119.235484  ...  290.10178 -0.753993   0.331041\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...    aspect  eastness  northness\n541911  2019-01-01  37.577798 -112.902361  ...  156.1074  0.384829  -0.740663\n541912  2019-01-01  37.577798 -112.902361  ...  156.1074  0.384829  -0.740663\n541913  2019-01-01  37.577798 -112.902361  ...  156.1074  0.384829  -0.740663\n541914  2019-01-01  37.577798 -112.902361  ...  156.1074  0.384829  -0.740663\n541915  2019-01-01  37.577798 -112.902361  ...  156.1074  0.384829  -0.740663\n...            ...        ...         ...  ...       ...       ...        ...\n534266  2022-12-31  37.577798 -112.902361  ...  156.1074  0.384829  -0.740663\n534267  2022-12-31  37.577798 -112.902361  ...  156.1074  0.384829  -0.740663\n534268  2022-12-31  37.577798 -112.902361  ...  156.1074  0.384829  -0.740663\n534269  2022-12-31  37.577798 -112.902361  ...  156.1074  0.384829  -0.740663\n534270  2022-12-31  37.577798 -112.902361  ...  156.1074  0.384829  -0.740663\n[11688 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...    aspect  eastness  northness\n813027  2019-01-01  37.599153 -107.233992  ...  260.9123 -0.779083  -0.156652\n812563  2019-01-02  37.599153 -107.233992  ...  260.9123 -0.779083  -0.156652\n812867  2019-01-03  37.599153 -107.233992  ...  260.9123 -0.779083  -0.156652\n813408  2019-01-04  37.599153 -107.233992  ...  260.9123 -0.779083  -0.156652\n812944  2019-01-05  37.599153 -107.233992  ...  260.9123 -0.779083  -0.156652\n...            ...        ...         ...  ...       ...       ...        ...\n812562  2022-12-27  37.599153 -107.233992  ...  260.9123 -0.779083  -0.156652\n812341  2022-12-28  37.599153 -107.233992  ...  260.9123 -0.779083  -0.156652\n812568  2022-12-29  37.599153 -107.233992  ...  260.9123 -0.779083  -0.156652\n813396  2022-12-30  37.599153 -107.233992  ...  260.9123 -0.779083  -0.156652\n812557  2022-12-31  37.599153 -107.233992  ...  260.9123 -0.779083  -0.156652\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...    aspect  eastness  northness\n370451  2019-01-01  37.620502 -119.028872  ...  94.17212  0.784071  -0.072625\n370977  2019-01-02  37.620502 -119.028872  ...  94.17212  0.784071  -0.072625\n370307  2019-01-03  37.620502 -119.028872  ...  94.17212  0.784071  -0.072625\n370113  2019-01-04  37.620502 -119.028872  ...  94.17212  0.784071  -0.072625\n370372  2019-01-05  37.620502 -119.028872  ...  94.17212  0.784071  -0.072625\n...            ...        ...         ...  ...       ...       ...        ...\n370237  2022-12-27  37.620502 -119.028872  ...  94.17212  0.784071  -0.072625\n369759  2022-12-28  37.620502 -119.028872  ...  94.17212  0.784071  -0.072625\n370475  2022-12-29  37.620502 -119.028872  ...  94.17212  0.784071  -0.072625\n370333  2022-12-30  37.620502 -119.028872  ...  94.17212  0.784071  -0.072625\n370970  2022-12-31  37.620502 -119.028872  ...  94.17212  0.784071  -0.072625\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat        lon  ...     aspect  eastness  northness\n557715  2019-01-01  37.634731 -119.08277  ...  130.74547  0.648358  -0.578271\n557997  2019-01-02  37.634731 -119.08277  ...  130.74547  0.648358  -0.578271\n557821  2019-01-03  37.634731 -119.08277  ...  130.74547  0.648358  -0.578271\n557606  2019-01-04  37.634731 -119.08277  ...  130.74547  0.648358  -0.578271\n557634  2019-01-05  37.634731 -119.08277  ...  130.74547  0.648358  -0.578271\n...            ...        ...        ...  ...        ...       ...        ...\n557741  2022-12-27  37.634731 -119.08277  ...  130.74547  0.648358  -0.578271\n556786  2022-12-28  37.634731 -119.08277  ...  130.74547  0.648358  -0.578271\n557746  2022-12-29  37.634731 -119.08277  ...  130.74547  0.648358  -0.578271\n558094  2022-12-30  37.634731 -119.08277  ...  130.74547  0.648358  -0.578271\n557987  2022-12-31  37.634731 -119.08277  ...  130.74547  0.648358  -0.578271\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n293417  2019-01-01  37.641845 -108.006544  ...  150.87732  0.452936  -0.718025\n293448  2019-01-02  37.641845 -108.006544  ...  150.87732  0.452936  -0.718025\n292774  2019-01-03  37.641845 -108.006544  ...  150.87732  0.452936  -0.718025\n293564  2019-01-04  37.641845 -108.006544  ...  150.87732  0.452936  -0.718025\n293585  2019-01-05  37.641845 -108.006544  ...  150.87732  0.452936  -0.718025\n...            ...        ...         ...  ...        ...       ...        ...\n292704  2022-12-27  37.641845 -108.006544  ...  150.87732  0.452936  -0.718025\n292985  2022-12-28  37.641845 -108.006544  ...  150.87732  0.452936  -0.718025\n293211  2022-12-29  37.641845 -108.006544  ...  150.87732  0.452936  -0.718025\n292814  2022-12-30  37.641845 -108.006544  ...  150.87732  0.452936  -0.718025\n293202  2022-12-31  37.641845 -108.006544  ...  150.87732  0.452936  -0.718025\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n756539  2019-01-01  37.663182 -107.799931  ...  179.38268  0.010774  -0.785369\n756540  2019-01-01  37.663182 -107.799931  ...  179.38268  0.010774  -0.785369\n756119  2019-01-02  37.663182 -107.799931  ...  179.38268  0.010774  -0.785369\n756120  2019-01-02  37.663182 -107.799931  ...  179.38268  0.010774  -0.785369\n756255  2019-01-03  37.663182 -107.799931  ...  179.38268  0.010774  -0.785369\n...            ...        ...         ...  ...        ...       ...        ...\n756128  2022-12-29  37.663182 -107.799931  ...  179.38268  0.010774  -0.785369\n757737  2022-12-30  37.663182 -107.799931  ...  179.38268  0.010774  -0.785369\n757738  2022-12-30  37.663182 -107.799931  ...  179.38268  0.010774  -0.785369\n756109  2022-12-31  37.663182 -107.799931  ...  179.38268  0.010774  -0.785369\n756110  2022-12-31  37.663182 -107.799931  ...  179.38268  0.010774  -0.785369\n[2922 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:               date        lat         lon  ...     aspect  eastness  northness\n21653  2019-01-01  37.698729 -107.781965  ...  210.64645 -0.471409   -0.71046\n20944  2019-01-02  37.698729 -107.781965  ...  210.64645 -0.471409   -0.71046\n21512  2019-01-03  37.698729 -107.781965  ...  210.64645 -0.471409   -0.71046\n21567  2019-01-04  37.698729 -107.781965  ...  210.64645 -0.471409   -0.71046\n21591  2019-01-05  37.698729 -107.781965  ...  210.64645 -0.471409   -0.71046\n...           ...        ...         ...  ...        ...       ...        ...\n21438  2022-12-27  37.698729 -107.781965  ...  210.64645 -0.471409   -0.71046\n21208  2022-12-28  37.698729 -107.781965  ...  210.64645 -0.471409   -0.71046\n20950  2022-12-29  37.698729 -107.781965  ...  210.64645 -0.471409   -0.71046\n21544  2022-12-30  37.698729 -107.781965  ...  210.64645 -0.471409   -0.71046\n21435  2022-12-31  37.698729 -107.781965  ...  210.64645 -0.471409   -0.71046\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n790999  2019-01-01  37.720049 -107.521454  ...  205.62473 -0.408185  -0.733724\n791037  2019-01-02  37.720049 -107.521454  ...  205.62473 -0.408185  -0.733724\n790842  2019-01-03  37.720049 -107.521454  ...  205.62473 -0.408185  -0.733724\n790901  2019-01-04  37.720049 -107.521454  ...  205.62473 -0.408185  -0.733724\n790921  2019-01-05  37.720049 -107.521454  ...  205.62473 -0.408185  -0.733724\n...            ...        ...         ...  ...        ...       ...        ...\n790788  2022-12-27  37.720049 -107.521454  ...  205.62473 -0.408185  -0.733724\n791287  2022-12-28  37.720049 -107.521454  ...  205.62473 -0.408185  -0.733724\n791041  2022-12-29  37.720049 -107.521454  ...  205.62473 -0.408185  -0.733724\n790873  2022-12-30  37.720049 -107.521454  ...  205.62473 -0.408185  -0.733724\n791496  2022-12-31  37.720049 -107.521454  ...  205.62473 -0.408185  -0.733724\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n991651  2019-01-01  37.727154 -119.136669  ...  38.885838  0.560589    0.66143\n991676  2019-01-02  37.727154 -119.136669  ...  38.885838  0.560589    0.66143\n991747  2019-01-03  37.727154 -119.136669  ...  38.885838  0.560589    0.66143\n990801  2019-01-04  37.727154 -119.136669  ...  38.885838  0.560589    0.66143\n990589  2019-01-05  37.727154 -119.136669  ...  38.885838  0.560589    0.66143\n...            ...        ...         ...  ...        ...       ...        ...\n990941  2022-12-27  37.727154 -119.136669  ...  38.885838  0.560589    0.66143\n991930  2022-12-28  37.727154 -119.136669  ...  38.885838  0.560589    0.66143\n990681  2022-12-29  37.727154 -119.136669  ...  38.885838  0.560589    0.66143\n991775  2022-12-30  37.727154 -119.136669  ...  38.885838  0.560589    0.66143\n991671  2022-12-31  37.727154 -119.136669  ...  38.885838  0.560589    0.66143\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...    aspect  eastness  northness\n369494  2019-01-01  37.727154 -107.269925  ...  331.9554 -0.439491   0.723108\n369534  2019-01-02  37.727154 -107.269925  ...  331.9554 -0.439491   0.723108\n368840  2019-01-03  37.727154 -107.269925  ...  331.9554 -0.439491   0.723108\n368892  2019-01-04  37.727154 -107.269925  ...  331.9554 -0.439491   0.723108\n368916  2019-01-05  37.727154 -107.269925  ...  331.9554 -0.439491   0.723108\n...            ...        ...         ...  ...       ...       ...        ...\n369533  2022-12-27  37.727154 -107.269925  ...  331.9554 -0.439491   0.723108\n368561  2022-12-28  37.727154 -107.269925  ...  331.9554 -0.439491   0.723108\n368773  2022-12-29  37.727154 -107.269925  ...  331.9554 -0.439491   0.723108\n369628  2022-12-30  37.727154 -107.269925  ...  331.9554 -0.439491   0.723108\n369014  2022-12-31  37.727154 -107.269925  ...  331.9554 -0.439491   0.723108\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n655976  2019-01-01  37.762672 -119.774473  ...  169.11069  0.186712  -0.776314\n655017  2019-01-02  37.762672 -119.774473  ...  169.11069  0.186712  -0.776314\n655571  2019-01-03  37.762672 -119.774473  ...  169.11069  0.186712  -0.776314\n655626  2019-01-04  37.762672 -119.774473  ...  169.11069  0.186712  -0.776314\n655160  2019-01-05  37.762672 -119.774473  ...  169.11069  0.186712  -0.776314\n...            ...        ...         ...  ...        ...       ...        ...\n655016  2022-12-27  37.762672 -119.774473  ...  169.11069  0.186712  -0.776314\n654545  2022-12-28  37.762672 -119.774473  ...  169.11069  0.186712  -0.776314\n655514  2022-12-29  37.762672 -119.774473  ...  169.11069  0.186712  -0.776314\n655856  2022-12-30  37.762672 -119.774473  ...  169.11069  0.186712  -0.776314\n655748  2022-12-31  37.762672 -119.774473  ...  169.11069  0.186712  -0.776314\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n957194  2019-01-01  37.791072 -108.177223  ...  257.88016 -0.774128  -0.206951\n957902  2019-01-02  37.791072 -108.177223  ...  257.88016 -0.774128  -0.206951\n957282  2019-01-03  37.791072 -108.177223  ...  257.88016 -0.774128  -0.206951\n958048  2019-01-04  37.791072 -108.177223  ...  257.88016 -0.774128  -0.206951\n958070  2019-01-05  37.791072 -108.177223  ...  257.88016 -0.774128  -0.206951\n...            ...        ...         ...  ...        ...       ...        ...\n956969  2022-12-27  37.791072 -108.177223  ...  257.88016 -0.774128  -0.206951\n958172  2022-12-28  37.791072 -108.177223  ...  257.88016 -0.774128  -0.206951\n957223  2022-12-29  37.791072 -108.177223  ...  257.88016 -0.774128  -0.206951\n957051  2022-12-30  37.791072 -108.177223  ...  257.88016 -0.774128  -0.206951\n956963  2022-12-31  37.791072 -108.177223  ...  257.88016 -0.774128  -0.206951\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n319224  2019-01-01  37.791072 -108.015527  ...  172.68689  0.126611  -0.781314\n319489  2019-01-02  37.791072 -108.015527  ...  172.68689  0.126611  -0.781314\n319800  2019-01-03  37.791072 -108.015527  ...  172.68689  0.126611  -0.781314\n319608  2019-01-04  37.791072 -108.015527  ...  172.68689  0.126611  -0.781314\n319629  2019-01-05  37.791072 -108.015527  ...  172.68689  0.126611  -0.781314\n...            ...        ...         ...  ...        ...       ...        ...\n319726  2022-12-27  37.791072 -108.015527  ...  172.68689  0.126611  -0.781314\n319270  2022-12-28  37.791072 -108.015527  ...  172.68689  0.126611  -0.781314\n319731  2022-12-29  37.791072 -108.015527  ...  172.68689  0.126611  -0.781314\n319594  2022-12-30  37.791072 -108.015527  ...  172.68689  0.126611  -0.781314\n319483  2022-12-31  37.791072 -108.015527  ...  172.68689  0.126611  -0.781314\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...    aspect  eastness  northness\n823310  2019-01-01  37.798171 -119.199551  ...  233.3865 -0.676371  -0.537779\n823569  2019-01-02  37.798171 -119.199551  ...  233.3865 -0.676371  -0.537779\n823142  2019-01-03  37.798171 -119.199551  ...  233.3865 -0.676371  -0.537779\n823685  2019-01-04  37.798171 -119.199551  ...  233.3865 -0.676371  -0.537779\n822951  2019-01-05  37.798171 -119.199551  ...  233.3865 -0.676371  -0.537779\n...            ...        ...         ...  ...       ...       ...        ...\n823568  2022-12-27  37.798171 -119.199551  ...  233.3865 -0.676371  -0.537779\n822559  2022-12-28  37.798171 -119.199551  ...  233.3865 -0.676371  -0.537779\n823572  2022-12-29  37.798171 -119.199551  ...  233.3865 -0.676371  -0.537779\n823670  2022-12-30  37.798171 -119.199551  ...  233.3865 -0.676371  -0.537779\n822811  2022-12-31  37.798171 -119.199551  ...  233.3865 -0.676371  -0.537779\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n515721  2019-01-01  37.833654 -119.451081  ...  64.776634   0.73538   0.402843\n515254  2019-01-02  37.833654 -119.451081  ...  64.776634   0.73538   0.402843\n515328  2019-01-03  37.833654 -119.451081  ...  64.776634   0.73538   0.402843\n515608  2019-01-04  37.833654 -119.451081  ...  64.776634   0.73538   0.402843\n515400  2019-01-05  37.833654 -119.451081  ...  64.776634   0.73538   0.402843\n...            ...        ...         ...  ...        ...       ...        ...\n515494  2022-12-27  37.833654 -119.451081  ...  64.776634   0.73538   0.402843\n514547  2022-12-28  37.833654 -119.451081  ...  64.776634   0.73538   0.402843\n515258  2022-12-29  37.833654 -119.451081  ...  64.776634   0.73538   0.402843\n514870  2022-12-30  37.833654 -119.451081  ...  64.776634   0.73538   0.402843\n515489  2022-12-31  37.833654 -119.451081  ...  64.776634   0.73538   0.402843\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n907382  2019-01-01  37.833654 -108.222139  ...  198.02652  -0.30011  -0.760243\n908385  2019-01-02  37.833654 -108.222139  ...  198.02652  -0.30011  -0.760243\n908449  2019-01-03  37.833654 -108.222139  ...  198.02652  -0.30011  -0.760243\n907288  2019-01-04  37.833654 -108.222139  ...  198.02652  -0.30011  -0.760243\n907566  2019-01-05  37.833654 -108.222139  ...  198.02652  -0.30011  -0.760243\n...            ...        ...         ...  ...        ...       ...        ...\n907651  2022-12-27  37.833654 -108.222139  ...  198.02652  -0.30011  -0.760243\n908640  2022-12-28  37.833654 -108.222139  ...  198.02652  -0.30011  -0.760243\n908389  2022-12-29  37.833654 -108.222139  ...  198.02652  -0.30011  -0.760243\n908480  2022-12-30  37.833654 -108.222139  ...  198.02652  -0.30011  -0.760243\n907647  2022-12-31  37.833654 -108.222139  ...  198.02652  -0.30011  -0.760243\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:               date        lat         lon  ...      aspect  eastness  northness\n26646  2019-01-01  37.847842 -108.267055  ...  123.475685  0.695202  -0.504058\n26918  2019-01-02  37.847842 -108.267055  ...  123.475685  0.695202  -0.504058\n26974  2019-01-03  37.847842 -108.267055  ...  123.475685  0.695202  -0.504058\n26554  2019-01-04  37.847842 -108.267055  ...  123.475685  0.695202  -0.504058\n26805  2019-01-05  37.847842 -108.267055  ...  123.475685  0.695202  -0.504058\n...           ...        ...         ...  ...         ...       ...        ...\n27382  2022-12-27  37.847842 -108.267055  ...  123.475685  0.695202  -0.504058\n27162  2022-12-28  37.847842 -108.267055  ...  123.475685  0.695202  -0.504058\n27388  2022-12-29  37.847842 -108.267055  ...  123.475685  0.695202  -0.504058\n27006  2022-12-30  37.847842 -108.267055  ...  123.475685  0.695202  -0.504058\n27377  2022-12-31  37.847842 -108.267055  ...  123.475685  0.695202  -0.504058\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...    aspect  eastness  northness\n792460  2019-01-01  37.854936 -107.728065  ...  190.7411 -0.184258  -0.776561\n792240  2019-01-02  37.854936 -107.728065  ...  190.7411 -0.184258  -0.776561\n793039  2019-01-03  37.854936 -107.728065  ...  190.7411 -0.184258  -0.776561\n792841  2019-01-04  37.854936 -107.728065  ...  190.7411 -0.184258  -0.776561\n792148  2019-01-05  37.854936 -107.728065  ...  190.7411 -0.184258  -0.776561\n...            ...        ...         ...  ...       ...       ...        ...\n792968  2022-12-27  37.854936 -107.728065  ...  190.7411 -0.184258  -0.776561\n792745  2022-12-28  37.854936 -107.728065  ...  190.7411 -0.184258  -0.776561\n792971  2022-12-29  37.854936 -107.728065  ...  190.7411 -0.184258  -0.776561\n793077  2022-12-30  37.854936 -107.728065  ...  190.7411 -0.184258  -0.776561\n792485  2022-12-31  37.854936 -107.728065  ...  190.7411 -0.184258  -0.776561\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n207164  2019-01-01  37.854936 -105.437361  ...  277.79877 -0.780752   0.134871\n207165  2019-01-01  37.854936 -105.437361  ...  277.79877 -0.780752   0.134871\n205794  2019-01-02  37.854936 -105.437361  ...  277.79877 -0.780752   0.134871\n205795  2019-01-02  37.854936 -105.437361  ...  277.79877 -0.780752   0.134871\n207372  2019-01-03  37.854936 -105.437361  ...  277.79877 -0.780752   0.134871\n...            ...        ...         ...  ...        ...       ...        ...\n207219  2022-12-29  37.854936 -105.437361  ...  277.79877 -0.780752   0.134871\n207444  2022-12-30  37.854936 -105.437361  ...  277.79877 -0.780752   0.134871\n207445  2022-12-30  37.854936 -105.437361  ...  277.79877 -0.780752   0.134871\n205788  2022-12-31  37.854936 -105.437361  ...  277.79877 -0.780752   0.134871\n205789  2022-12-31  37.854936 -105.437361  ...  277.79877 -0.780752   0.134871\n[2922 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n119543  2019-01-01  37.862028 -119.657692  ...  18.866562  0.312753   0.757801\n119317  2019-01-02  37.862028 -119.657692  ...  18.866562  0.312753   0.757801\n118894  2019-01-03  37.862028 -119.657692  ...  18.866562  0.312753   0.757801\n118943  2019-01-04  37.862028 -119.657692  ...  18.866562  0.312753   0.757801\n119458  2019-01-05  37.862028 -119.657692  ...  18.866562  0.312753   0.757801\n...            ...        ...         ...  ...        ...       ...        ...\n119316  2022-12-27  37.862028 -119.657692  ...  18.866562  0.312753   0.757801\n119078  2022-12-28  37.862028 -119.657692  ...  18.866562  0.312753   0.757801\n119575  2022-12-29  37.862028 -119.657692  ...  18.866562  0.312753   0.757801\n119413  2022-12-30  37.862028 -119.657692  ...  18.866562  0.312753   0.757801\n119560  2022-12-31  37.862028 -119.657692  ...  18.866562  0.312753   0.757801\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n720991  2019-01-01  37.869119 -109.443848  ...  285.20844 -0.767577   0.256551\n720992  2019-01-01  37.869119 -109.443848  ...  285.20844 -0.767577   0.256551\n722491  2019-01-02  37.869119 -109.443848  ...  285.20844 -0.767577   0.256551\n722492  2019-01-02  37.869119 -109.443848  ...  285.20844 -0.767577   0.256551\n722649  2019-01-03  37.869119 -109.443848  ...  285.20844 -0.767577   0.256551\n...            ...        ...         ...  ...        ...       ...        ...\n722504  2022-12-29  37.869119 -109.443848  ...  285.20844 -0.767577   0.256551\n721701  2022-12-30  37.869119 -109.443848  ...  285.20844 -0.767577   0.256551\n721702  2022-12-30  37.869119 -109.443848  ...  285.20844 -0.767577   0.256551\n722473  2022-12-31  37.869119 -109.443848  ...  285.20844 -0.767577   0.256551\n722474  2022-12-31  37.869119 -109.443848  ...  285.20844 -0.767577   0.256551\n[2922 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n530085  2019-01-01  37.869119 -106.605171  ...  201.01604 -0.344342  -0.751007\n529862  2019-01-02  37.869119 -106.605171  ...  201.01604 -0.344342  -0.751007\n530183  2019-01-03  37.869119 -106.605171  ...  201.01604 -0.344342  -0.751007\n529990  2019-01-04  37.869119 -106.605171  ...  201.01604 -0.344342  -0.751007\n530268  2019-01-05  37.869119 -106.605171  ...  201.01604 -0.344342  -0.751007\n...            ...        ...         ...  ...        ...       ...        ...\n530109  2022-12-27  37.869119 -106.605171  ...  201.01604 -0.344342  -0.751007\n529153  2022-12-28  37.869119 -106.605171  ...  201.01604 -0.344342  -0.751007\n529376  2022-12-29  37.869119 -106.605171  ...  201.01604 -0.344342  -0.751007\n529969  2022-12-30  37.869119 -106.605171  ...  201.01604 -0.344342  -0.751007\n530105  2022-12-31  37.869119 -106.605171  ...  201.01604 -0.344342  -0.751007\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date       lat         lon  ...     aspect  eastness  northness\n260651  2019-01-01  37.87621 -119.343283  ...  148.45811  0.481973  -0.705803\n261142  2019-01-02  37.87621 -119.343283  ...  148.45811  0.481973  -0.705803\n261480  2019-01-03  37.87621 -119.343283  ...  148.45811  0.481973  -0.705803\n261012  2019-01-04  37.87621 -119.343283  ...  148.45811  0.481973  -0.705803\n261299  2019-01-05  37.87621 -119.343283  ...  148.45811  0.481973  -0.705803\n...            ...       ...         ...  ...        ...       ...        ...\n261140  2022-12-27  37.87621 -119.343283  ...  148.45811  0.481973  -0.705803\n260226  2022-12-28  37.87621 -119.343283  ...  148.45811  0.481973  -0.705803\n261409  2022-12-29  37.87621 -119.343283  ...  148.45811  0.481973  -0.705803\n261241  2022-12-30  37.87621 -119.343283  ...  148.45811  0.481973  -0.705803\n261131  2022-12-31  37.87621 -119.343283  ...  148.45811  0.481973  -0.705803\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date       lat         lon  ...    aspect  eastness  northness\n183963  2019-01-01  37.89748 -119.262434  ...  54.23148  0.681645   0.528953\n183988  2019-01-02  37.89748 -119.262434  ...  54.23148  0.681645   0.528953\n183302  2019-01-03  37.89748 -119.262434  ...  54.23148  0.681645   0.528953\n183112  2019-01-04  37.89748 -119.262434  ...  54.23148  0.681645   0.528953\n183872  2019-01-05  37.89748 -119.262434  ...  54.23148  0.681645   0.528953\n...            ...       ...         ...  ...       ...       ...        ...\n183228  2022-12-27  37.89748 -119.262434  ...  54.23148  0.681645   0.528953\n182769  2022-12-28  37.89748 -119.262434  ...  54.23148  0.681645   0.528953\n183994  2022-12-29  37.89748 -119.262434  ...  54.23148  0.681645   0.528953\n184072  2022-12-30  37.89748 -119.262434  ...  54.23148  0.681645   0.528953\n183985  2022-12-31  37.89748 -119.262434  ...  54.23148  0.681645   0.528953\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date       lat         lon  ...     aspect  eastness  northness\n307996  2019-01-01  37.89748 -107.719082  ...  300.19885 -0.712729   0.466047\n307791  2019-01-02  37.89748 -107.719082  ...  300.19885 -0.712729   0.466047\n307371  2019-01-03  37.89748 -107.719082  ...  300.19885 -0.712729   0.466047\n308138  2019-01-04  37.89748 -107.719082  ...  300.19885 -0.712729   0.466047\n307938  2019-01-05  37.89748 -107.719082  ...  300.19885 -0.712729   0.466047\n...            ...       ...         ...  ...        ...       ...        ...\n307303  2022-12-27  37.89748 -107.719082  ...  300.19885 -0.712729   0.466047\n307551  2022-12-28  37.89748 -107.719082  ...  300.19885 -0.712729   0.466047\n307794  2022-12-29  37.89748 -107.719082  ...  300.19885 -0.712729   0.466047\n307896  2022-12-30  37.89748 -107.719082  ...  300.19885 -0.712729   0.466047\n307297  2022-12-31  37.89748 -107.719082  ...  300.19885 -0.712729   0.466047\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n712719  2019-01-01  37.932915 -107.207043  ...  259.98706 -0.777724   -0.17215\n711769  2019-01-02  37.932915 -107.207043  ...  259.98706 -0.777724   -0.17215\n712576  2019-01-03  37.932915 -107.207043  ...  259.98706 -0.777724   -0.17215\n712623  2019-01-04  37.932915 -107.207043  ...  259.98706 -0.777724   -0.17215\n712653  2019-01-05  37.932915 -107.207043  ...  259.98706 -0.777724   -0.17215\n...            ...        ...         ...  ...        ...       ...        ...\n712037  2022-12-27  37.932915 -107.207043  ...  259.98706 -0.777724   -0.17215\n711530  2022-12-28  37.932915 -107.207043  ...  259.98706 -0.777724   -0.17215\n711776  2022-12-29  37.932915 -107.207043  ...  259.98706 -0.777724   -0.17215\n712603  2022-12-30  37.932915 -107.207043  ...  259.98706 -0.777724   -0.17215\n712033  2022-12-31  37.932915 -107.207043  ...  259.98706 -0.777724   -0.17215\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n330543  2019-01-01  37.975414 -111.833366  ...  332.09943 -0.437671    0.72377\n330544  2019-01-01  37.975414 -111.833366  ...  332.09943 -0.437671    0.72377\n330545  2019-01-01  37.975414 -111.833366  ...  332.09943 -0.437671    0.72377\n330546  2019-01-01  37.975414 -111.833366  ...  332.09943 -0.437671    0.72377\n330547  2019-01-01  37.975414 -111.833366  ...  332.09943 -0.437671    0.72377\n...            ...        ...         ...  ...        ...       ...        ...\n330730  2022-12-31  37.975414 -111.833366  ...  332.09943 -0.437671    0.72377\n330731  2022-12-31  37.975414 -111.833366  ...  332.09943 -0.437671    0.72377\n330732  2022-12-31  37.975414 -111.833366  ...  332.09943 -0.437671    0.72377\n330733  2022-12-31  37.975414 -111.833366  ...  332.09943 -0.437671    0.72377\n330734  2022-12-31  37.975414 -111.833366  ...  332.09943 -0.437671    0.72377\n[11688 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat        lon  ...    aspect  eastness  northness\n890834  2019-01-01  38.039118 -119.30735  ...  54.60261  0.683913   0.525018\n890863  2019-01-02  38.039118 -119.30735  ...  54.60261  0.683913   0.525018\n890936  2019-01-03  38.039118 -119.30735  ...  54.60261  0.683913   0.525018\n890010  2019-01-04  38.039118 -119.30735  ...  54.60261  0.683913   0.525018\n889779  2019-01-05  38.039118 -119.30735  ...  54.60261  0.683913   0.525018\n...            ...        ...        ...  ...       ...       ...        ...\n890862  2022-12-27  38.039118 -119.30735  ...  54.60261  0.683913   0.525018\n891112  2022-12-28  38.039118 -119.30735  ...  54.60261  0.683913   0.525018\n890866  2022-12-29  38.039118 -119.30735  ...  54.60261  0.683913   0.525018\n889986  2022-12-30  38.039118 -119.30735  ...  54.60261  0.683913   0.525018\n889879  2022-12-31  38.039118 -119.30735  ...  54.60261  0.683913   0.525018\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n781238  2019-01-01  38.060339 -119.666675  ...  202.05417 -0.359194  -0.747442\n780579  2019-01-02  38.060339 -119.666675  ...  202.05417 -0.359194  -0.747442\n780881  2019-01-03  38.060339 -119.666675  ...  202.05417 -0.359194  -0.747442\n780706  2019-01-04  38.060339 -119.666675  ...  202.05417 -0.359194  -0.747442\n780482  2019-01-05  38.060339 -119.666675  ...  202.05417 -0.359194  -0.747442\n...            ...        ...         ...  ...        ...       ...        ...\n780578  2022-12-27  38.060339 -119.666675  ...  202.05417 -0.359194  -0.747442\n781046  2022-12-28  38.060339 -119.666675  ...  202.05417 -0.359194  -0.747442\n780831  2022-12-29  38.060339 -119.666675  ...  202.05417 -0.359194  -0.747442\n780908  2022-12-30  38.060339 -119.666675  ...  202.05417 -0.359194  -0.747442\n781260  2022-12-31  38.060339 -119.666675  ...  202.05417 -0.359194  -0.747442\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:               date        lat         lon  ...     aspect  eastness  northness\n36875  2019-01-01  38.152231 -119.666675  ...  68.846054  0.750545    0.34633\n37627  2019-01-02  38.152231 -119.666675  ...  68.846054  0.750545    0.34633\n36963  2019-01-03  38.152231 -119.666675  ...  68.846054  0.750545    0.34633\n37496  2019-01-04  38.152231 -119.666675  ...  68.846054  0.750545    0.34633\n37038  2019-01-05  38.152231 -119.666675  ...  68.846054  0.750545    0.34633\n...           ...        ...         ...  ...        ...       ...        ...\n37141  2022-12-27  38.152231 -119.666675  ...  68.846054  0.750545    0.34633\n37887  2022-12-28  38.152231 -119.666675  ...  68.846054  0.750545    0.34633\n37149  2022-12-29  38.152231 -119.666675  ...  68.846054  0.750545    0.34633\n37741  2022-12-30  38.152231 -119.666675  ...  68.846054  0.750545    0.34633\n36892  2022-12-31  38.152231 -119.666675  ...  68.846054  0.750545    0.34633\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n846536  2019-01-01  38.166357 -120.052952  ...  30.475752   0.46937    0.71133\n847013  2019-01-02  38.166357 -120.052952  ...  30.475752   0.46937    0.71133\n847087  2019-01-03  38.166357 -120.052952  ...  30.475752   0.46937    0.71133\n846175  2019-01-04  38.166357 -120.052952  ...  30.475752   0.46937    0.71133\n846921  2019-01-05  38.166357 -120.052952  ...  30.475752   0.46937    0.71133\n...            ...        ...         ...  ...        ...       ...        ...\n846332  2022-12-27  38.166357 -120.052952  ...  30.475752   0.46937    0.71133\n846062  2022-12-28  38.166357 -120.052952  ...  30.475752   0.46937    0.71133\n847020  2022-12-29  38.166357 -120.052952  ...  30.475752   0.46937    0.71133\n847117  2022-12-30  38.166357 -120.052952  ...  30.475752   0.46937    0.71133\n846327  2022-12-31  38.166357 -120.052952  ...  30.475752   0.46937    0.71133\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:               date        lat         lon  ...     aspect  eastness  northness\n93259  2019-01-01  38.194603 -119.891255  ...  101.83461  0.774656  -0.202282\n93033  2019-01-02  38.194603 -119.891255  ...  101.83461  0.774656  -0.202282\n92369  2019-01-03  38.194603 -119.891255  ...  101.83461  0.774656  -0.202282\n92667  2019-01-04  38.194603 -119.891255  ...  101.83461  0.774656  -0.202282\n92440  2019-01-05  38.194603 -119.891255  ...  101.83461  0.774656  -0.202282\n...           ...        ...         ...  ...        ...       ...        ...\n92556  2022-12-27  38.194603 -119.891255  ...  101.83461  0.774656  -0.202282\n92069  2022-12-28  38.194603 -119.891255  ...  101.83461  0.774656  -0.202282\n93035  2022-12-29  38.194603 -119.891255  ...  101.83461  0.774656  -0.202282\n93143  2022-12-30  38.194603 -119.891255  ...  101.83461  0.774656  -0.202282\n92552  2022-12-31  38.194603 -119.891255  ...  101.83461  0.774656  -0.202282\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:               date        lat         lon  ...     aspect  eastness  northness\n68634  2019-01-01  38.279274 -119.612776  ...  315.26376 -0.613301   0.617641\n68635  2019-01-01  38.279274 -119.612776  ...  315.26376 -0.613301   0.617641\n68636  2019-01-01  38.279274 -119.612776  ...  315.26376 -0.613301   0.617641\n68637  2019-01-01  38.279274 -119.612776  ...  315.26376 -0.613301   0.617641\n68638  2019-01-01  38.279274 -119.612776  ...  315.26376 -0.613301   0.617641\n...           ...        ...         ...  ...        ...       ...        ...\n70279  2022-12-31  38.279274 -119.612776  ...  315.26376 -0.613301   0.617641\n70280  2022-12-31  38.279274 -119.612776  ...  315.26376 -0.613301   0.617641\n70281  2022-12-31  38.279274 -119.612776  ...  315.26376 -0.613301   0.617641\n70282  2022-12-31  38.279274 -119.612776  ...  315.26376 -0.613301   0.617641\n70283  2022-12-31  38.279274 -119.612776  ...  315.26376 -0.613301   0.617641\n[8766 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n448569  2019-01-01  38.483487 -112.390322  ...  322.00595 -0.551797   0.667427\n448570  2019-01-01  38.483487 -112.390322  ...  322.00595 -0.551797   0.667427\n448571  2019-01-01  38.483487 -112.390322  ...  322.00595 -0.551797   0.667427\n448572  2019-01-01  38.483487 -112.390322  ...  322.00595 -0.551797   0.667427\n448573  2019-01-01  38.483487 -112.390322  ...  322.00595 -0.551797   0.667427\n...            ...        ...         ...  ...        ...       ...        ...\n445582  2022-12-31  38.483487 -112.390322  ...  322.00595 -0.551797   0.667427\n445583  2022-12-31  38.483487 -112.390322  ...  322.00595 -0.551797   0.667427\n445584  2022-12-31  38.483487 -112.390322  ...  322.00595 -0.551797   0.667427\n445585  2022-12-31  38.483487 -112.390322  ...  322.00595 -0.551797   0.667427\n445586  2022-12-31  38.483487 -112.390322  ...  322.00595 -0.551797   0.667427\n[8766 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n927642  2019-01-01  38.490519 -119.801423  ...  178.10571  0.033044  -0.785125\n927643  2019-01-01  38.490519 -119.801423  ...  178.10571  0.033044  -0.785125\n927644  2019-01-01  38.490519 -119.801423  ...  178.10571  0.033044  -0.785125\n927645  2019-01-01  38.490519 -119.801423  ...  178.10571  0.033044  -0.785125\n927646  2019-01-01  38.490519 -119.801423  ...  178.10571  0.033044  -0.785125\n...            ...        ...         ...  ...        ...       ...        ...\n932239  2022-12-31  38.490519 -119.801423  ...  178.10571  0.033044  -0.785125\n932240  2022-12-31  38.490519 -119.801423  ...  178.10571  0.033044  -0.785125\n932241  2022-12-31  38.490519 -119.801423  ...  178.10571  0.033044  -0.785125\n932242  2022-12-31  38.490519 -119.801423  ...  178.10571  0.033044  -0.785125\n932243  2022-12-31  38.490519 -119.801423  ...  178.10571  0.033044  -0.785125\n[8766 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:               date        lat         lon  ...     aspect  eastness  northness\n15841  2019-01-01  38.490519 -106.335677  ...  164.60425  0.259499   -0.76713\n15604  2019-01-02  38.490519 -106.335677  ...  164.60425  0.259499   -0.76713\n15683  2019-01-03  38.490519 -106.335677  ...  164.60425  0.259499   -0.76713\n14992  2019-01-04  38.490519 -106.335677  ...  164.60425  0.259499   -0.76713\n15235  2019-01-05  38.490519 -106.335677  ...  164.60425  0.259499   -0.76713\n...           ...        ...         ...  ...        ...       ...        ...\n15603  2022-12-27  38.490519 -106.335677  ...  164.60425  0.259499   -0.76713\n14636  2022-12-28  38.490519 -106.335677  ...  164.60425  0.259499   -0.76713\n14883  2022-12-29  38.490519 -106.335677  ...  164.60425  0.259499   -0.76713\n14976  2022-12-30  38.490519 -106.335677  ...  164.60425  0.259499   -0.76713\n15597  2022-12-31  38.490519 -106.335677  ...  164.60425  0.259499   -0.76713\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:               date       lat        lon  ...     aspect  eastness  northness\n98530  2019-01-01  38.50458 -119.62176  ...  18.832296   0.31224   0.757903\n98531  2019-01-01  38.50458 -119.62176  ...  18.832296   0.31224   0.757903\n98532  2019-01-01  38.50458 -119.62176  ...  18.832296   0.31224   0.757903\n98533  2019-01-01  38.50458 -119.62176  ...  18.832296   0.31224   0.757903\n98534  2019-01-01  38.50458 -119.62176  ...  18.832296   0.31224   0.757903\n...           ...       ...        ...  ...        ...       ...        ...\n97125  2022-12-31  38.50458 -119.62176  ...  18.832296   0.31224   0.757903\n97126  2022-12-31  38.50458 -119.62176  ...  18.832296   0.31224   0.757903\n97127  2022-12-31  38.50458 -119.62176  ...  18.832296   0.31224   0.757903\n97128  2022-12-31  38.50458 -119.62176  ...  18.832296   0.31224   0.757903\n97129  2022-12-31  38.50458 -119.62176  ...  18.832296   0.31224   0.757903\n[10227 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n594120  2019-01-01  38.708156 -120.043969  ...  134.57304  0.618971  -0.611945\n594121  2019-01-01  38.708156 -120.043969  ...  134.57304  0.618971  -0.611945\n594122  2019-01-01  38.708156 -120.043969  ...  134.57304  0.618971  -0.611945\n594123  2019-01-01  38.708156 -120.043969  ...  134.57304  0.618971  -0.611945\n594124  2019-01-01  38.708156 -120.043969  ...  134.57304  0.618971  -0.611945\n...            ...        ...         ...  ...        ...       ...        ...\n594340  2022-12-31  38.708156 -120.043969  ...  134.57304  0.618971  -0.611945\n594341  2022-12-31  38.708156 -120.043969  ...  134.57304  0.618971  -0.611945\n594342  2022-12-31  38.708156 -120.043969  ...  134.57304  0.618971  -0.611945\n594343  2022-12-31  38.708156 -120.043969  ...  134.57304  0.618971  -0.611945\n594344  2022-12-31  38.708156 -120.043969  ...  134.57304  0.618971  -0.611945\n[13149 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n104916  2019-01-01  38.708156 -106.425509  ...  54.866276  0.685507     0.5222\n104213  2019-01-02  38.708156 -106.425509  ...  54.866276  0.685507     0.5222\n104026  2019-01-03  38.708156 -106.425509  ...  54.866276  0.685507     0.5222\n104825  2019-01-04  38.708156 -106.425509  ...  54.866276  0.685507     0.5222\n104112  2019-01-05  38.708156 -106.425509  ...  54.866276  0.685507     0.5222\n...            ...        ...         ...  ...        ...       ...        ...\n103971  2022-12-27  38.708156 -106.425509  ...  54.866276  0.685507     0.5222\n104475  2022-12-28  38.708156 -106.425509  ...  54.866276  0.685507     0.5222\n104711  2022-12-29  38.708156 -106.425509  ...  54.866276  0.685507     0.5222\n104065  2022-12-30  38.708156 -106.425509  ...  54.866276  0.685507     0.5222\n103964  2022-12-31  38.708156 -106.425509  ...  54.866276  0.685507     0.5222\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n306082  2019-01-01  38.820228 -106.596188  ...  300.30264 -0.712206   0.467295\n305854  2019-01-02  38.820228 -106.596188  ...  300.30264 -0.712206   0.467295\n306665  2019-01-03  38.820228 -106.596188  ...  300.30264 -0.712206   0.467295\n306708  2019-01-04  38.820228 -106.596188  ...  300.30264 -0.712206   0.467295\n305997  2019-01-05  38.820228 -106.596188  ...  300.30264 -0.712206   0.467295\n...            ...        ...         ...  ...        ...       ...        ...\n305852  2022-12-27  38.820228 -106.596188  ...  300.30264 -0.712206   0.467295\n306132  2022-12-28  38.820228 -106.596188  ...  300.30264 -0.712206   0.467295\n306591  2022-12-29  38.820228 -106.596188  ...  300.30264 -0.712206   0.467295\n306450  2022-12-30  38.820228 -106.596188  ...  300.30264 -0.712206   0.467295\n305845  2022-12-31  38.820228 -106.596188  ...  300.30264 -0.712206   0.467295\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n675670  2019-01-01  38.890182 -106.955515  ...  188.39952 -0.145049  -0.780006\n675461  2019-01-02  38.890182 -106.955515  ...  188.39952 -0.145049  -0.780006\n676266  2019-01-03  38.890182 -106.955515  ...  188.39952 -0.145049  -0.780006\n675580  2019-01-04  38.890182 -106.955515  ...  188.39952 -0.145049  -0.780006\n676335  2019-01-05  38.890182 -106.955515  ...  188.39952 -0.145049  -0.780006\n...            ...        ...         ...  ...        ...       ...        ...\n676194  2022-12-27  38.890182 -106.955515  ...  188.39952 -0.145049  -0.780006\n675007  2022-12-28  38.890182 -106.955515  ...  188.39952 -0.145049  -0.780006\n675466  2022-12-29  38.890182 -106.955515  ...  188.39952 -0.145049  -0.780006\n676058  2022-12-30  38.890182 -106.955515  ...  188.39952 -0.145049  -0.780006\n676191  2022-12-31  38.890182 -106.955515  ...  188.39952 -0.145049  -0.780006\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n861978  2019-01-01  38.911155 -120.376345  ...  184.63641 -0.080657  -0.783759\n861979  2019-01-01  38.911155 -120.376345  ...  184.63641 -0.080657  -0.783759\n861980  2019-01-01  38.911155 -120.376345  ...  184.63641 -0.080657  -0.783759\n861981  2019-01-01  38.911155 -120.376345  ...  184.63641 -0.080657  -0.783759\n861982  2019-01-01  38.911155 -120.376345  ...  184.63641 -0.080657  -0.783759\n...            ...        ...         ...  ...        ...       ...        ...\n859117  2022-12-31  38.911155 -120.376345  ...  184.63641 -0.080657  -0.783759\n859118  2022-12-31  38.911155 -120.376345  ...  184.63641 -0.080657  -0.783759\n859119  2022-12-31  38.911155 -120.376345  ...  184.63641 -0.080657  -0.783759\n859120  2022-12-31  38.911155 -120.376345  ...  184.63641 -0.080657  -0.783759\n859121  2022-12-31  38.911155 -120.376345  ...  184.63641 -0.080657  -0.783759\n[8766 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n394181  2019-01-01  38.918144 -120.205665  ...  40.579857  0.576732   0.649554\n394182  2019-01-01  38.918144 -120.205665  ...  40.579857  0.576732   0.649554\n394183  2019-01-01  38.918144 -120.205665  ...  40.579857  0.576732   0.649554\n394184  2019-01-01  38.918144 -120.205665  ...  40.579857  0.576732   0.649554\n394185  2019-01-01  38.918144 -120.205665  ...  40.579857  0.576732   0.649554\n...            ...        ...         ...  ...        ...       ...        ...\n394484  2022-12-31  38.918144 -120.205665  ...  40.579857  0.576732   0.649554\n394485  2022-12-31  38.918144 -120.205665  ...  40.579857  0.576732   0.649554\n394486  2022-12-31  38.918144 -120.205665  ...  40.579857  0.576732   0.649554\n394487  2022-12-31  38.918144 -120.205665  ...  40.579857  0.576732   0.649554\n394488  2022-12-31  38.918144 -120.205665  ...  40.579857  0.576732   0.649554\n[20454 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:               date        lat         lon  ...     aspect  eastness  northness\n51336  2019-01-01  38.925134 -119.918205  ...  21.647856  0.353413    0.74886\n51337  2019-01-01  38.925134 -119.918205  ...  21.647856  0.353413    0.74886\n51338  2019-01-01  38.925134 -119.918205  ...  21.647856  0.353413    0.74886\n51339  2019-01-01  38.925134 -119.918205  ...  21.647856  0.353413    0.74886\n51340  2019-01-01  38.925134 -119.918205  ...  21.647856  0.353413    0.74886\n...           ...        ...         ...  ...        ...       ...        ...\n51643  2022-12-31  38.925134 -119.918205  ...  21.647856  0.353413    0.74886\n51644  2022-12-31  38.925134 -119.918205  ...  21.647856  0.353413    0.74886\n51645  2022-12-31  38.925134 -119.918205  ...  21.647856  0.353413    0.74886\n51646  2022-12-31  38.925134 -119.918205  ...  21.647856  0.353413    0.74886\n51647  2022-12-31  38.925134 -119.918205  ...  21.647856  0.353413    0.74886\n[18993 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n925168  2019-01-01  38.994985 -106.757886  ...  108.96824  0.757497  -0.314272\n924960  2019-01-02  38.994985 -106.757886  ...  108.96824  0.757497  -0.314272\n925977  2019-01-03  38.994985 -106.757886  ...  108.96824  0.757497  -0.314272\n925078  2019-01-04  38.994985 -106.757886  ...  108.96824  0.757497  -0.314272\n924850  2019-01-05  38.994985 -106.757886  ...  108.96824  0.757497  -0.314272\n...            ...        ...         ...  ...        ...       ...        ...\n925191  2022-12-27  38.994985 -106.757886  ...  108.96824  0.757497  -0.314272\n925453  2022-12-28  38.994985 -106.757886  ...  108.96824  0.757497  -0.314272\n924966  2022-12-29  38.994985 -106.757886  ...  108.96824  0.757497  -0.314272\n926006  2022-12-30  38.994985 -106.757886  ...  108.96824  0.757497  -0.314272\n925913  2022-12-31  38.994985 -106.757886  ...  108.96824  0.757497  -0.314272\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n354557  2019-01-01  39.022906 -107.997561  ...  193.97179  -0.23691  -0.770385\n354316  2019-01-02  39.022906 -107.997561  ...  193.97179  -0.23691  -0.770385\n354396  2019-01-03  39.022906 -107.997561  ...  193.97179  -0.23691  -0.770385\n354185  2019-01-04  39.022906 -107.997561  ...  193.97179  -0.23691  -0.770385\n354205  2019-01-05  39.022906 -107.997561  ...  193.97179  -0.23691  -0.770385\n...            ...        ...         ...  ...        ...       ...        ...\n354813  2022-12-27  39.022906 -107.997561  ...  193.97179  -0.23691  -0.770385\n353855  2022-12-28  39.022906 -107.997561  ...  193.97179  -0.23691  -0.770385\n354816  2022-12-29  39.022906 -107.997561  ...  193.97179  -0.23691  -0.770385\n354903  2022-12-30  39.022906 -107.997561  ...  193.97179  -0.23691  -0.770385\n354061  2022-12-31  39.022906 -107.997561  ...  193.97179  -0.23691  -0.770385\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...    aspect  eastness  northness\n113568  2019-01-01  39.043841 -106.650087  ...  0.415929  0.007259   0.785385\n112907  2019-01-02  39.043841 -106.650087  ...  0.415929  0.007259   0.785385\n113192  2019-01-03  39.043841 -106.650087  ...  0.415929  0.007259   0.785385\n113480  2019-01-04  39.043841 -106.650087  ...  0.415929  0.007259   0.785385\n113039  2019-01-05  39.043841 -106.650087  ...  0.415929  0.007259   0.785385\n...            ...        ...         ...  ...       ...       ...        ...\n113127  2022-12-27  39.043841 -106.650087  ...  0.415929  0.007259   0.785385\n113375  2022-12-28  39.043841 -106.650087  ...  0.415929  0.007259   0.785385\n113598  2022-12-29  39.043841 -106.650087  ...  0.415929  0.007259   0.785385\n113700  2022-12-30  39.043841 -106.650087  ...  0.415929  0.007259   0.785385\n112898  2022-12-31  39.043841 -106.650087  ...  0.415929  0.007259   0.785385\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat        lon  ...     aspect  eastness  northness\n366074  2019-01-01  39.050817 -108.05146  ...  35.113045  0.521978   0.685632\n365849  2019-01-02  39.050817 -108.05146  ...  35.113045  0.521978   0.685632\n366159  2019-01-03  39.050817 -108.05146  ...  35.113045  0.521978   0.685632\n366470  2019-01-04  39.050817 -108.05146  ...  35.113045  0.521978   0.685632\n365996  2019-01-05  39.050817 -108.05146  ...  35.113045  0.521978   0.685632\n...            ...        ...        ...  ...        ...       ...        ...\n365847  2022-12-27  39.050817 -108.05146  ...  35.113045  0.521978   0.685632\n365396  2022-12-28  39.050817 -108.05146  ...  35.113045  0.521978   0.685632\n366106  2022-12-29  39.050817 -108.05146  ...  35.113045  0.521978   0.685632\n366701  2022-12-30  39.050817 -108.05146  ...  35.113045  0.521978   0.685632\n366597  2022-12-31  39.050817 -108.05146  ...  35.113045  0.521978   0.685632\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n909080  2019-01-01  39.071742 -107.153143  ...  144.39505  0.527223  -0.682648\n909111  2019-01-02  39.071742 -107.153143  ...  144.39505  0.527223  -0.682648\n908948  2019-01-03  39.071742 -107.153143  ...  144.39505  0.527223  -0.682648\n909727  2019-01-04  39.071742 -107.153143  ...  144.39505  0.527223  -0.682648\n909751  2019-01-05  39.071742 -107.153143  ...  144.39505  0.527223  -0.682648\n...            ...        ...         ...  ...        ...       ...        ...\n909109  2022-12-27  39.071742 -107.153143  ...  144.39505  0.527223  -0.682648\n909628  2022-12-28  39.071742 -107.153143  ...  144.39505  0.527223  -0.682648\n909114  2022-12-29  39.071742 -107.153143  ...  144.39505  0.527223  -0.682648\n909226  2022-12-30  39.071742 -107.153143  ...  144.39505  0.527223  -0.682648\n908886  2022-12-31  39.071742 -107.153143  ...  144.39505  0.527223  -0.682648\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:               date        lat         lon  ...     aspect  eastness  northness\n81600  2019-01-01  39.134482 -111.438108  ...  169.13013   0.18639  -0.776346\n81601  2019-01-01  39.134482 -111.438108  ...  169.13013   0.18639  -0.776346\n81602  2019-01-01  39.134482 -111.438108  ...  169.13013   0.18639  -0.776346\n81603  2019-01-01  39.134482 -111.438108  ...  169.13013   0.18639  -0.776346\n81604  2019-01-01  39.134482 -111.438108  ...  169.13013   0.18639  -0.776346\n...           ...        ...         ...  ...        ...       ...        ...\n81739  2022-12-31  39.134482 -111.438108  ...  169.13013   0.18639  -0.776346\n81740  2022-12-31  39.134482 -111.438108  ...  169.13013   0.18639  -0.776346\n81741  2022-12-31  39.134482 -111.438108  ...  169.13013   0.18639  -0.776346\n81742  2022-12-31  39.134482 -111.438108  ...  169.13013   0.18639  -0.776346\n81743  2022-12-31  39.134482 -111.438108  ...  169.13013   0.18639  -0.776346\n[13149 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n121941  2019-01-01  39.294562 -106.551272  ...  101.16844  0.775839  -0.191325\n121942  2019-01-01  39.294562 -106.551272  ...  101.16844  0.775839  -0.191325\n121943  2019-01-01  39.294562 -106.551272  ...  101.16844  0.775839  -0.191325\n121257  2019-01-02  39.294562 -106.551272  ...  101.16844  0.775839  -0.191325\n121258  2019-01-02  39.294562 -106.551272  ...  101.16844  0.775839  -0.191325\n...            ...        ...         ...  ...        ...       ...        ...\n123796  2022-12-30  39.294562 -106.551272  ...  101.16844  0.775839  -0.191325\n123797  2022-12-30  39.294562 -106.551272  ...  101.16844  0.775839  -0.191325\n121239  2022-12-31  39.294562 -106.551272  ...  101.16844  0.775839  -0.191325\n121240  2022-12-31  39.294562 -106.551272  ...  101.16844  0.775839  -0.191325\n121241  2022-12-31  39.294562 -106.551272  ...  101.16844  0.775839  -0.191325\n[4383 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n112245  2019-01-01  39.301513 -106.111098  ...  204.47305 -0.392743  -0.738398\n111295  2019-01-02  39.301513 -106.111098  ...  204.47305 -0.392743  -0.738398\n111362  2019-01-03  39.301513 -106.111098  ...  204.47305 -0.392743  -0.738398\n112146  2019-01-04  39.301513 -106.111098  ...  204.47305 -0.392743  -0.738398\n112169  2019-01-05  39.301513 -106.111098  ...  204.47305 -0.392743  -0.738398\n...            ...        ...         ...  ...        ...       ...        ...\n111294  2022-12-27  39.301513 -106.111098  ...  204.47305 -0.392743  -0.738398\n111788  2022-12-28  39.301513 -106.111098  ...  204.47305 -0.392743  -0.738398\n111527  2022-12-29  39.301513 -106.111098  ...  204.47305 -0.392743  -0.738398\n111402  2022-12-30  39.301513 -106.111098  ...  204.47305 -0.392743  -0.738398\n111524  2022-12-31  39.301513 -106.111098  ...  204.47305 -0.392743  -0.738398\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...   aspect  eastness  northness\n143108  2019-01-01  39.322365 -111.492007  ...  60.7321  0.717323   0.454723\n143109  2019-01-01  39.322365 -111.492007  ...  60.7321  0.717323   0.454723\n143110  2019-01-01  39.322365 -111.492007  ...  60.7321  0.717323   0.454723\n143111  2019-01-01  39.322365 -111.492007  ...  60.7321  0.717323   0.454723\n143112  2019-01-01  39.322365 -111.492007  ...  60.7321  0.717323   0.454723\n...            ...        ...         ...  ...      ...       ...        ...\n142073  2022-12-31  39.322365 -111.492007  ...  60.7321  0.717323   0.454723\n142074  2022-12-31  39.322365 -111.492007  ...  60.7321  0.717323   0.454723\n142075  2022-12-31  39.322365 -111.492007  ...  60.7321  0.717323   0.454723\n142076  2022-12-31  39.322365 -111.492007  ...  60.7321  0.717323   0.454723\n142077  2022-12-31  39.322365 -111.492007  ...  60.7321  0.717323   0.454723\n[7305 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n554423  2019-01-01  39.357102 -106.057199  ...  32.257084  0.490258    0.70197\n554692  2019-01-02  39.357102 -106.057199  ...  32.257084  0.490258    0.70197\n554757  2019-01-03  39.357102 -106.057199  ...  32.257084  0.490258    0.70197\n554808  2019-01-04  39.357102 -106.057199  ...  32.257084  0.490258    0.70197\n554836  2019-01-05  39.357102 -106.057199  ...  32.257084  0.490258    0.70197\n...            ...        ...         ...  ...        ...       ...        ...\n554691  2022-12-27  39.357102 -106.057199  ...  32.257084  0.490258    0.70197\n553976  2022-12-28  39.357102 -106.057199  ...  32.257084  0.490258    0.70197\n554696  2022-12-29  39.357102 -106.057199  ...  32.257084  0.490258    0.70197\n555042  2022-12-30  39.357102 -106.057199  ...  32.257084  0.490258    0.70197\n554207  2022-12-31  39.357102 -106.057199  ...  32.257084  0.490258    0.70197\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n588379  2019-01-01  39.384881 -106.191947  ...  47.953575   0.63875   0.590122\n588406  2019-01-02  39.384881 -106.191947  ...  47.953575   0.63875   0.590122\n588020  2019-01-03  39.384881 -106.191947  ...  47.953575   0.63875   0.590122\n588289  2019-01-04  39.384881 -106.191947  ...  47.953575   0.63875   0.590122\n588561  2019-01-05  39.384881 -106.191947  ...  47.953575   0.63875   0.590122\n...            ...        ...         ...  ...        ...       ...        ...\n587960  2022-12-27  39.384881 -106.191947  ...  47.953575   0.63875   0.590122\n587477  2022-12-28  39.384881 -106.191947  ...  47.953575   0.63875   0.590122\n588672  2022-12-29  39.384881 -106.191947  ...  47.953575   0.63875   0.590122\n588046  2022-12-30  39.384881 -106.191947  ...  47.953575   0.63875   0.590122\n587955  2022-12-31  39.384881 -106.191947  ...  47.953575   0.63875   0.590122\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...      aspect  eastness  northness\n856739  2019-01-01  39.461213 -105.913468  ...  107.692406  0.761181  -0.295037\n857250  2019-01-02  39.461213 -105.913468  ...  107.692406  0.761181  -0.295037\n857317  2019-01-03  39.461213 -105.913468  ...  107.692406  0.761181  -0.295037\n857128  2019-01-04  39.461213 -105.913468  ...  107.692406  0.761181  -0.295037\n857157  2019-01-05  39.461213 -105.913468  ...  107.692406  0.761181  -0.295037\n...            ...        ...         ...  ...         ...       ...        ...\n856769  2022-12-27  39.461213 -105.913468  ...  107.692406  0.761181  -0.295037\n857022  2022-12-28  39.461213 -105.913468  ...  107.692406  0.761181  -0.295037\n857253  2022-12-29  39.461213 -105.913468  ...  107.692406  0.761181  -0.295037\n856626  2022-12-30  39.461213 -105.913468  ...  107.692406  0.761181  -0.295037\n856521  2022-12-31  39.461213 -105.913468  ...  107.692406  0.761181  -0.295037\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n947187  2019-01-01  39.488948 -106.164997  ...  114.16558  0.739605  -0.388562\n946739  2019-01-02  39.488948 -106.164997  ...  114.16558  0.739605  -0.388562\n946800  2019-01-03  39.488948 -106.164997  ...  114.16558  0.739605  -0.388562\n947815  2019-01-04  39.488948 -106.164997  ...  114.16558  0.739605  -0.388562\n946878  2019-01-05  39.488948 -106.164997  ...  114.16558  0.739605  -0.388562\n...            ...        ...         ...  ...        ...       ...        ...\n946737  2022-12-27  39.488948 -106.164997  ...  114.16558  0.739605  -0.388562\n947468  2022-12-28  39.488948 -106.164997  ...  114.16558  0.739605  -0.388562\n946987  2022-12-29  39.488948 -106.164997  ...  114.16558  0.739605  -0.388562\n947083  2022-12-30  39.488948 -106.164997  ...  114.16558  0.739605  -0.388562\n946976  2022-12-31  39.488948 -106.164997  ...  114.16558  0.739605  -0.388562\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n210126  2019-01-01  39.495881 -111.725568  ...  315.19693 -0.613855   0.617095\n210127  2019-01-01  39.495881 -111.725568  ...  315.19693 -0.613855   0.617095\n209674  2019-01-02  39.495881 -111.725568  ...  315.19693 -0.613855   0.617095\n209675  2019-01-02  39.495881 -111.725568  ...  315.19693 -0.613855   0.617095\n210304  2019-01-03  39.495881 -111.725568  ...  315.19693 -0.613855   0.617095\n...            ...        ...         ...  ...        ...       ...        ...\n208711  2022-12-29  39.495881 -111.725568  ...  315.19693 -0.613855   0.617095\n209900  2022-12-30  39.495881 -111.725568  ...  315.19693 -0.613855   0.617095\n209901  2022-12-30  39.495881 -111.725568  ...  315.19693 -0.613855   0.617095\n209658  2022-12-31  39.495881 -111.725568  ...  315.19693 -0.613855   0.617095\n209659  2022-12-31  39.495881 -111.725568  ...  315.19693 -0.613855   0.617095\n[2922 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n247518  2019-01-01  39.565167 -115.839853  ...  178.78572  0.021188  -0.785286\n247519  2019-01-01  39.565167 -115.839853  ...  178.78572  0.021188  -0.785286\n247520  2019-01-01  39.565167 -115.839853  ...  178.78572  0.021188  -0.785286\n247521  2019-01-01  39.565167 -115.839853  ...  178.78572  0.021188  -0.785286\n247522  2019-01-01  39.565167 -115.839853  ...  178.78572  0.021188  -0.785286\n...            ...        ...         ...  ...        ...       ...        ...\n246223  2022-12-31  39.565167 -115.839853  ...  178.78572  0.021188  -0.785286\n246224  2022-12-31  39.565167 -115.839853  ...  178.78572  0.021188  -0.785286\n246225  2022-12-31  39.565167 -115.839853  ...  178.78572  0.021188  -0.785286\n246226  2022-12-31  39.565167 -115.839853  ...  178.78572  0.021188  -0.785286\n246227  2022-12-31  39.565167 -115.839853  ...  178.78572  0.021188  -0.785286\n[8766 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:               date       lat         lon  ...     aspect  eastness  northness\n91042  2019-01-01  39.58594 -105.805671  ...  16.767992   0.28087    0.76368\n91572  2019-01-02  39.58594 -105.805671  ...  16.767992   0.28087    0.76368\n90891  2019-01-03  39.58594 -105.805671  ...  16.767992   0.28087    0.76368\n91693  2019-01-04  39.58594 -105.805671  ...  16.767992   0.28087    0.76368\n90966  2019-01-05  39.58594 -105.805671  ...  16.767992   0.28087    0.76368\n...           ...       ...         ...  ...        ...       ...        ...\n90822  2022-12-27  39.58594 -105.805671  ...  16.767992   0.28087    0.76368\n90604  2022-12-28  39.58594 -105.805671  ...  16.767992   0.28087    0.76368\n91074  2022-12-29  39.58594 -105.805671  ...  16.767992   0.28087    0.76368\n91168  2022-12-30  39.58594 -105.805671  ...  16.767992   0.28087    0.76368\n91067  2022-12-31  39.58594 -105.805671  ...  16.767992   0.28087    0.76368\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat        lon  ...     aspect  eastness  northness\n570132  2019-01-01  39.599784 -106.51534  ...  352.56476  -0.12869   0.781176\n570133  2019-01-01  39.599784 -106.51534  ...  352.56476  -0.12869   0.781176\n570134  2019-01-01  39.599784 -106.51534  ...  352.56476  -0.12869   0.781176\n570222  2019-01-02  39.599784 -106.51534  ...  352.56476  -0.12869   0.781176\n570223  2019-01-02  39.599784 -106.51534  ...  352.56476  -0.12869   0.781176\n...            ...        ...        ...  ...        ...       ...        ...\n569032  2022-12-30  39.599784 -106.51534  ...  352.56476  -0.12869   0.781176\n569033  2022-12-30  39.599784 -106.51534  ...  352.56476  -0.12869   0.781176\n570870  2022-12-31  39.599784 -106.51534  ...  352.56476  -0.12869   0.781176\n570871  2022-12-31  39.599784 -106.51534  ...  352.56476  -0.12869   0.781176\n570872  2022-12-31  39.599784 -106.51534  ...  352.56476  -0.12869   0.781176\n[4383 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n236542  2019-01-01  39.627465 -105.778722  ...  168.42929  0.197951  -0.775133\n235834  2019-01-02  39.627465 -105.778722  ...  168.42929  0.197951  -0.775133\n236639  2019-01-03  39.627465 -105.778722  ...  168.42929  0.197951  -0.775133\n236205  2019-01-04  39.627465 -105.778722  ...  168.42929  0.197951  -0.775133\n235743  2019-01-05  39.627465 -105.778722  ...  168.42929  0.197951  -0.775133\n...            ...        ...         ...  ...        ...       ...        ...\n235832  2022-12-27  39.627465 -105.778722  ...  168.42929  0.197951  -0.775133\n235615  2022-12-28  39.627465 -105.778722  ...  168.42929  0.197951  -0.775133\n236323  2022-12-29  39.627465 -105.778722  ...  168.42929  0.197951  -0.775133\n236673  2022-12-30  39.627465 -105.778722  ...  168.42929  0.197951  -0.775133\n235827  2022-12-31  39.627465 -105.778722  ...  168.42929  0.197951  -0.775133\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...    aspect  eastness  northness\n959606  2019-01-01  39.655135 -105.868553  ...  339.5594 -0.335994   0.752904\n959391  2019-01-02  39.655135 -105.868553  ...  339.5594 -0.335994   0.752904\n959459  2019-01-03  39.655135 -105.868553  ...  339.5594 -0.335994   0.752904\n958536  2019-01-04  39.655135 -105.868553  ...  339.5594 -0.335994   0.752904\n958824  2019-01-05  39.655135 -105.868553  ...  339.5594 -0.335994   0.752904\n...            ...        ...         ...  ...       ...       ...        ...\n958428  2022-12-27  39.655135 -105.868553  ...  339.5594 -0.335994   0.752904\n959158  2022-12-28  39.655135 -105.868553  ...  339.5594 -0.335994   0.752904\n958668  2022-12-29  39.655135 -105.868553  ...  339.5594 -0.335994   0.752904\n958772  2022-12-30  39.655135 -105.868553  ...  339.5594 -0.335994   0.752904\n958659  2022-12-31  39.655135 -105.868553  ...  339.5594 -0.335994   0.752904\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date       lat        lon  ...     aspect  eastness  northness\n174723  2019-01-01  39.67588 -120.61889  ...  190.75078 -0.184418  -0.776545\n174724  2019-01-01  39.67588 -120.61889  ...  190.75078 -0.184418  -0.776545\n174725  2019-01-01  39.67588 -120.61889  ...  190.75078 -0.184418  -0.776545\n174726  2019-01-01  39.67588 -120.61889  ...  190.75078 -0.184418  -0.776545\n174727  2019-01-01  39.67588 -120.61889  ...  190.75078 -0.184418  -0.776545\n...            ...       ...        ...  ...        ...       ...        ...\n174988  2022-12-31  39.67588 -120.61889  ...  190.75078 -0.184418  -0.776545\n174989  2022-12-31  39.67588 -120.61889  ...  190.75078 -0.184418  -0.776545\n174990  2022-12-31  39.67588 -120.61889  ...  190.75078 -0.184418  -0.776545\n174991  2022-12-31  39.67588 -120.61889  ...  190.75078 -0.184418  -0.776545\n174992  2022-12-31  39.67588 -120.61889  ...  190.75078 -0.184418  -0.776545\n[13149 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date       lat         lon  ...    aspect  eastness  northness\n115366  2019-01-01  39.67588 -110.431995  ...  119.9892  0.713778  -0.463517\n115367  2019-01-01  39.67588 -110.431995  ...  119.9892  0.713778  -0.463517\n115926  2019-01-02  39.67588 -110.431995  ...  119.9892  0.713778  -0.463517\n115927  2019-01-02  39.67588 -110.431995  ...  119.9892  0.713778  -0.463517\n115070  2019-01-03  39.67588 -110.431995  ...  119.9892  0.713778  -0.463517\n...            ...       ...         ...  ...       ...       ...        ...\n114967  2022-12-29  39.67588 -110.431995  ...  119.9892  0.713778  -0.463517\n114664  2022-12-30  39.67588 -110.431995  ...  119.9892  0.713778  -0.463517\n114665  2022-12-30  39.67588 -110.431995  ...  119.9892  0.713778  -0.463517\n114942  2022-12-31  39.67588 -110.431995  ...  119.9892  0.713778  -0.463517\n114943  2022-12-31  39.67588 -110.431995  ...  119.9892  0.713778  -0.463517\n[2922 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n440711  2019-01-01  39.765704 -105.904486  ...  61.189377  0.719519   0.449076\n440712  2019-01-01  39.765704 -105.904486  ...  61.189377  0.719519   0.449076\n440713  2019-01-01  39.765704 -105.904486  ...  61.189377  0.719519   0.449076\n440714  2019-01-01  39.765704 -105.904486  ...  61.189377  0.719519   0.449076\n441787  2019-01-02  39.765704 -105.904486  ...  61.189377  0.719519   0.449076\n...            ...        ...         ...  ...        ...       ...        ...\n442162  2022-12-30  39.765704 -105.904486  ...  61.189377  0.719519   0.449076\n438827  2022-12-31  39.765704 -105.904486  ...  61.189377  0.719519   0.449076\n438828  2022-12-31  39.765704 -105.904486  ...  61.189377  0.719519   0.449076\n438829  2022-12-31  39.765704 -105.904486  ...  61.189377  0.719519   0.449076\n438830  2022-12-31  39.765704 -105.904486  ...  61.189377  0.719519   0.449076\n[5844 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n670449  2019-01-01  39.786417 -120.879402  ...  342.31207 -0.294969   0.761193\n670450  2019-01-01  39.786417 -120.879402  ...  342.31207 -0.294969   0.761193\n670451  2019-01-01  39.786417 -120.879402  ...  342.31207 -0.294969   0.761193\n670452  2019-01-01  39.786417 -120.879402  ...  342.31207 -0.294969   0.761193\n671573  2019-01-02  39.786417 -120.879402  ...  342.31207 -0.294969   0.761193\n...            ...        ...         ...  ...        ...       ...        ...\n672024  2022-12-30  39.786417 -120.879402  ...  342.31207 -0.294969   0.761193\n672541  2022-12-31  39.786417 -120.879402  ...  342.31207 -0.294969   0.761193\n672542  2022-12-31  39.786417 -120.879402  ...  342.31207 -0.294969   0.761193\n672543  2022-12-31  39.786417 -120.879402  ...  342.31207 -0.294969   0.761193\n672544  2022-12-31  39.786417 -120.879402  ...  342.31207 -0.294969   0.761193\n[5844 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n417738  2019-01-01  39.814023 -121.319575  ...  166.21501  0.233917  -0.770787\n417739  2019-01-01  39.814023 -121.319575  ...  166.21501  0.233917  -0.770787\n417740  2019-01-01  39.814023 -121.319575  ...  166.21501  0.233917  -0.770787\n417093  2019-01-02  39.814023 -121.319575  ...  166.21501  0.233917  -0.770787\n417094  2019-01-02  39.814023 -121.319575  ...  166.21501  0.233917  -0.770787\n...            ...        ...         ...  ...        ...       ...        ...\n416659  2022-12-30  39.814023 -121.319575  ...  166.21501  0.233917  -0.770787\n416660  2022-12-30  39.814023 -121.319575  ...  166.21501  0.233917  -0.770787\n416340  2022-12-31  39.814023 -121.319575  ...  166.21501  0.233917  -0.770787\n416341  2022-12-31  39.814023 -121.319575  ...  166.21501  0.233917  -0.770787\n416342  2022-12-31  39.814023 -121.319575  ...  166.21501  0.233917  -0.770787\n[4383 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n223881  2019-01-01  39.876097 -107.602301  ...  275.79056  -0.78284   0.100552\n223882  2019-01-01  39.876097 -107.602301  ...  275.79056  -0.78284   0.100552\n223883  2019-01-01  39.876097 -107.602301  ...  275.79056  -0.78284   0.100552\n222555  2019-01-02  39.876097 -107.602301  ...  275.79056  -0.78284   0.100552\n222556  2019-01-02  39.876097 -107.602301  ...  275.79056  -0.78284   0.100552\n...            ...        ...         ...  ...        ...       ...        ...\n224269  2022-12-30  39.876097 -107.602301  ...  275.79056  -0.78284   0.100552\n224270  2022-12-30  39.876097 -107.602301  ...  275.79056  -0.78284   0.100552\n223947  2022-12-31  39.876097 -107.602301  ...  275.79056  -0.78284   0.100552\n223948  2022-12-31  39.876097 -107.602301  ...  275.79056  -0.78284   0.100552\n223949  2022-12-31  39.876097 -107.602301  ...  275.79056  -0.78284   0.100552\n[4383 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...    aspect  eastness  northness\n983514  2019-01-01  39.889883 -111.249461  ...  9.142771  0.157578   0.779005\n983515  2019-01-01  39.889883 -111.249461  ...  9.142771  0.157578   0.779005\n983516  2019-01-01  39.889883 -111.249461  ...  9.142771  0.157578   0.779005\n983517  2019-01-01  39.889883 -111.249461  ...  9.142771  0.157578   0.779005\n983518  2019-01-01  39.889883 -111.249461  ...  9.142771  0.157578   0.779005\n...            ...        ...         ...  ...       ...       ...        ...\n982444  2022-12-31  39.889883 -111.249461  ...  9.142771  0.157578   0.779005\n982445  2022-12-31  39.889883 -111.249461  ...  9.142771  0.157578   0.779005\n982446  2022-12-31  39.889883 -111.249461  ...  9.142771  0.157578   0.779005\n982447  2022-12-31  39.889883 -111.249461  ...  9.142771  0.157578   0.779005\n982448  2022-12-31  39.889883 -111.249461  ...  9.142771  0.157578   0.779005\n[7305 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n214668  2019-01-01  40.199347 -105.599058  ...  239.54501 -0.711435  -0.469121\n214669  2019-01-01  40.199347 -105.599058  ...  239.54501 -0.711435  -0.469121\n214670  2019-01-01  40.199347 -105.599058  ...  239.54501 -0.711435  -0.469121\n214671  2019-01-01  40.199347 -105.599058  ...  239.54501 -0.711435  -0.469121\n214672  2019-01-01  40.199347 -105.599058  ...  239.54501 -0.711435  -0.469121\n...            ...        ...         ...  ...        ...       ...        ...\n219864  2022-12-31  40.199347 -105.599058  ...  239.54501 -0.711435  -0.469121\n219865  2022-12-31  40.199347 -105.599058  ...  239.54501 -0.711435  -0.469121\n219866  2022-12-31  40.199347 -105.599058  ...  239.54501 -0.711435  -0.469121\n219867  2022-12-31  40.199347 -105.599058  ...  239.54501 -0.711435  -0.469121\n219868  2022-12-31  40.199347 -105.599058  ...  239.54501 -0.711435  -0.469121\n[10227 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:               date        lat         lon  ...    aspect  eastness  northness\n19683  2019-01-01  40.295338 -111.258444  ...  301.1978 -0.707611   0.477939\n19684  2019-01-01  40.295338 -111.258444  ...  301.1978 -0.707611   0.477939\n19685  2019-01-01  40.295338 -111.258444  ...  301.1978 -0.707611   0.477939\n16800  2019-01-02  40.295338 -111.258444  ...  301.1978 -0.707611   0.477939\n16801  2019-01-02  40.295338 -111.258444  ...  301.1978 -0.707611   0.477939\n...           ...        ...         ...  ...       ...       ...        ...\n19348  2022-12-30  40.295338 -111.258444  ...  301.1978 -0.707611   0.477939\n19349  2022-12-30  40.295338 -111.258444  ...  301.1978 -0.707611   0.477939\n19062  2022-12-31  40.295338 -111.258444  ...  301.1978 -0.707611   0.477939\n19063  2022-12-31  40.295338 -111.258444  ...  301.1978 -0.707611   0.477939\n19064  2022-12-31  40.295338 -111.258444  ...  301.1978 -0.707611   0.477939\n[4383 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n630884  2019-01-01  40.356974 -116.863933  ...  254.95868 -0.767971  -0.253914\n630885  2019-01-01  40.356974 -116.863933  ...  254.95868 -0.767971  -0.253914\n630434  2019-01-02  40.356974 -116.863933  ...  254.95868 -0.767971  -0.253914\n630435  2019-01-02  40.356974 -116.863933  ...  254.95868 -0.767971  -0.253914\n631080  2019-01-03  40.356974 -116.863933  ...  254.95868 -0.767971  -0.253914\n...            ...        ...         ...  ...        ...       ...        ...\n629479  2022-12-29  40.356974 -116.863933  ...  254.95868 -0.767971  -0.253914\n629644  2022-12-30  40.356974 -116.863933  ...  254.95868 -0.767971  -0.253914\n629645  2022-12-30  40.356974 -116.863933  ...  254.95868 -0.767971  -0.253914\n630916  2022-12-31  40.356974 -116.863933  ...  254.95868 -0.767971  -0.253914\n630917  2022-12-31  40.356974 -116.863933  ...  254.95868 -0.767971  -0.253914\n[2922 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:              date        lat         lon  ...     aspect  eastness  northness\n7021  2019-01-01  40.398035 -106.605171  ...  242.86911 -0.727244  -0.427853\n7022  2019-01-01  40.398035 -106.605171  ...  242.86911 -0.727244  -0.427853\n7023  2019-01-01  40.398035 -106.605171  ...  242.86911 -0.727244  -0.427853\n7024  2019-01-01  40.398035 -106.605171  ...  242.86911 -0.727244  -0.427853\n7025  2019-01-01  40.398035 -106.605171  ...  242.86911 -0.727244  -0.427853\n...          ...        ...         ...  ...        ...       ...        ...\n9088  2022-12-31  40.398035 -106.605171  ...  242.86911 -0.727244  -0.427853\n9089  2022-12-31  40.398035 -106.605171  ...  242.86911 -0.727244  -0.427853\n9090  2022-12-31  40.398035 -106.605171  ...  242.86911 -0.727244  -0.427853\n9091  2022-12-31  40.398035 -106.605171  ...  242.86911 -0.727244  -0.427853\n9092  2022-12-31  40.398035 -106.605171  ...  242.86911 -0.727244  -0.427853\n[11688 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n283348  2019-01-01  40.398035 -105.850587  ...  214.34727 -0.513686  -0.690177\n283349  2019-01-01  40.398035 -105.850587  ...  214.34727 -0.513686  -0.690177\n283350  2019-01-01  40.398035 -105.850587  ...  214.34727 -0.513686  -0.690177\n283351  2019-01-01  40.398035 -105.850587  ...  214.34727 -0.513686  -0.690177\n285380  2019-01-02  40.398035 -105.850587  ...  214.34727 -0.513686  -0.690177\n...            ...        ...         ...  ...        ...       ...        ...\n282863  2022-12-30  40.398035 -105.850587  ...  214.34727 -0.513686  -0.690177\n285360  2022-12-31  40.398035 -105.850587  ...  214.34727 -0.513686  -0.690177\n285361  2022-12-31  40.398035 -105.850587  ...  214.34727 -0.513686  -0.690177\n285362  2022-12-31  40.398035 -105.850587  ...  214.34727 -0.513686  -0.690177\n285363  2022-12-31  40.398035 -105.850587  ...  214.34727 -0.513686  -0.690177\n[5844 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...    aspect  eastness  northness\n427019  2019-01-01  40.432232 -105.733806  ...  73.61619  0.764677   0.274928\n427020  2019-01-01  40.432232 -105.733806  ...  73.61619  0.764677   0.274928\n427561  2019-01-02  40.432232 -105.733806  ...  73.61619  0.764677   0.274928\n427562  2019-01-02  40.432232 -105.733806  ...  73.61619  0.764677   0.274928\n426285  2019-01-03  40.432232 -105.733806  ...  73.61619  0.764677   0.274928\n...            ...        ...         ...  ...       ...       ...        ...\n426628  2022-12-29  40.432232 -105.733806  ...  73.61619  0.764677   0.274928\n426793  2022-12-30  40.432232 -105.733806  ...  73.61619  0.764677   0.274928\n426794  2022-12-30  40.432232 -105.733806  ...  73.61619  0.764677   0.274928\n426601  2022-12-31  40.432232 -105.733806  ...  73.61619  0.764677   0.274928\n426602  2022-12-31  40.432232 -105.733806  ...  73.61619  0.764677   0.274928\n[2922 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...    aspect  eastness  northness\n189561  2019-01-01  40.493744 -112.614901  ...  307.0201 -0.673779   0.541959\n189562  2019-01-01  40.493744 -112.614901  ...  307.0201 -0.673779   0.541959\n189563  2019-01-01  40.493744 -112.614901  ...  307.0201 -0.673779   0.541959\n189564  2019-01-01  40.493744 -112.614901  ...  307.0201 -0.673779   0.541959\n189565  2019-01-01  40.493744 -112.614901  ...  307.0201 -0.673779   0.541959\n...            ...        ...         ...  ...       ...       ...        ...\n190726  2022-12-31  40.493744 -112.614901  ...  307.0201 -0.673779   0.541959\n190727  2022-12-31  40.493744 -112.614901  ...  307.0201 -0.673779   0.541959\n190728  2022-12-31  40.493744 -112.614901  ...  307.0201 -0.673779   0.541959\n190729  2022-12-31  40.493744 -112.614901  ...  307.0201 -0.673779   0.541959\n190730  2022-12-31  40.493744 -112.614901  ...  307.0201 -0.673779   0.541959\n[7305 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date       lat        lon  ...     aspect  eastness  northness\n802123  2019-01-01  40.53472 -105.88652  ...  80.519905  0.778523   0.163239\n802124  2019-01-01  40.53472 -105.88652  ...  80.519905  0.778523   0.163239\n802125  2019-01-01  40.53472 -105.88652  ...  80.519905  0.778523   0.163239\n802126  2019-01-01  40.53472 -105.88652  ...  80.519905  0.778523   0.163239\n800239  2019-01-02  40.53472 -105.88652  ...  80.519905  0.778523   0.163239\n...            ...       ...        ...  ...        ...       ...        ...\n800630  2022-12-30  40.53472 -105.88652  ...  80.519905  0.778523   0.163239\n803167  2022-12-31  40.53472 -105.88652  ...  80.519905  0.778523   0.163239\n803168  2022-12-31  40.53472 -105.88652  ...  80.519905  0.778523   0.163239\n803169  2022-12-31  40.53472 -105.88652  ...  80.519905  0.778523   0.163239\n803170  2022-12-31  40.53472 -105.88652  ...  80.519905  0.778523   0.163239\n[5844 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...    aspect  eastness  northness\n737431  2019-01-01  40.548373 -110.351146  ...  260.5342 -0.778544     -0.163\n736744  2019-01-02  40.548373 -110.351146  ...  260.5342 -0.778544     -0.163\n737519  2019-01-03  40.548373 -110.351146  ...  260.5342 -0.778544     -0.163\n736602  2019-01-04  40.548373 -110.351146  ...  260.5342 -0.778544     -0.163\n736890  2019-01-05  40.548373 -110.351146  ...  260.5342 -0.778544     -0.163\n...            ...        ...         ...  ...       ...       ...        ...\n736743  2022-12-27  40.548373 -110.351146  ...  260.5342 -0.778544     -0.163\n736497  2022-12-28  40.548373 -110.351146  ...  260.5342 -0.778544     -0.163\n736984  2022-12-29  40.548373 -110.351146  ...  260.5342 -0.778544     -0.163\n736849  2022-12-30  40.548373 -110.351146  ...  260.5342 -0.778544     -0.163\n736980  2022-12-31  40.548373 -110.351146  ...  260.5342 -0.778544     -0.163\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n783591  2019-01-01  40.562024 -111.653704  ...  154.83548  0.402056   -0.73562\n783592  2019-01-01  40.562024 -111.653704  ...  154.83548  0.402056   -0.73562\n783593  2019-01-01  40.562024 -111.653704  ...  154.83548  0.402056   -0.73562\n783594  2019-01-01  40.562024 -111.653704  ...  154.83548  0.402056   -0.73562\n783595  2019-01-01  40.562024 -111.653704  ...  154.83548  0.402056   -0.73562\n...            ...        ...         ...  ...        ...       ...        ...\n783736  2022-12-31  40.562024 -111.653704  ...  154.83548  0.402056   -0.73562\n783737  2022-12-31  40.562024 -111.653704  ...  154.83548  0.402056   -0.73562\n783738  2022-12-31  40.562024 -111.653704  ...  154.83548  0.402056   -0.73562\n783739  2022-12-31  40.562024 -111.653704  ...  154.83548  0.402056   -0.73562\n783740  2022-12-31  40.562024 -111.653704  ...  154.83548  0.402056   -0.73562\n[8766 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:               date       lat         lon  ...    aspect  eastness  northness\n23646  2019-01-01  40.67794 -110.953018  ...  184.4386 -0.077237  -0.783896\n23647  2019-01-01  40.67794 -110.953018  ...  184.4386 -0.077237  -0.783896\n23648  2019-01-01  40.67794 -110.953018  ...  184.4386 -0.077237  -0.783896\n23001  2019-01-02  40.67794 -110.953018  ...  184.4386 -0.077237  -0.783896\n23002  2019-01-02  40.67794 -110.953018  ...  184.4386 -0.077237  -0.783896\n...           ...       ...         ...  ...       ...       ...        ...\n25573  2022-12-30  40.67794 -110.953018  ...  184.4386 -0.077237  -0.783896\n25574  2022-12-30  40.67794 -110.953018  ...  184.4386 -0.077237  -0.783896\n23712  2022-12-31  40.67794 -110.953018  ...  184.4386 -0.077237  -0.783896\n23713  2022-12-31  40.67794 -110.953018  ...  184.4386 -0.077237  -0.783896\n23714  2022-12-31  40.67794 -110.953018  ...  184.4386 -0.077237  -0.783896\n[4383 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                 date        lat        lon  ...     aspect  eastness  northness\n1012840  2019-01-01  40.739226 -110.62064  ...  218.92352 -0.560956  -0.661173\n1012841  2019-01-01  40.739226 -110.62064  ...  218.92352 -0.560956  -0.661173\n1012842  2019-01-01  40.739226 -110.62064  ...  218.92352 -0.560956  -0.661173\n1012843  2019-01-01  40.739226 -110.62064  ...  218.92352 -0.560956  -0.661173\n1011052  2019-01-02  40.739226 -110.62064  ...  218.92352 -0.560956  -0.661173\n...             ...        ...        ...  ...        ...       ...        ...\n1015227  2022-12-30  40.739226 -110.62064  ...  218.92352 -0.560956  -0.661173\n1014796  2022-12-31  40.739226 -110.62064  ...  218.92352 -0.560956  -0.661173\n1014797  2022-12-31  40.739226 -110.62064  ...  218.92352 -0.560956  -0.661173\n1014798  2022-12-31  40.739226 -110.62064  ...  218.92352 -0.560956  -0.661173\n1014799  2022-12-31  40.739226 -110.62064  ...  218.92352 -0.560956  -0.661173\n[5844 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n341348  2019-01-01  40.780052 -121.786699  ...  336.80704 -0.375175   0.743313\n341349  2019-01-01  40.780052 -121.786699  ...  336.80704 -0.375175   0.743313\n339960  2019-01-02  40.780052 -121.786699  ...  336.80704 -0.375175   0.743313\n339961  2019-01-02  40.780052 -121.786699  ...  336.80704 -0.375175   0.743313\n341518  2019-01-03  40.780052 -121.786699  ...  336.80704 -0.375175   0.743313\n...            ...        ...         ...  ...        ...       ...        ...\n341403  2022-12-29  40.780052 -121.786699  ...  336.80704 -0.375175   0.743313\n341122  2022-12-30  40.780052 -121.786699  ...  336.80704 -0.375175   0.743313\n341123  2022-12-30  40.780052 -121.786699  ...  336.80704 -0.375175   0.743313\n341386  2022-12-31  40.780052 -121.786699  ...  336.80704 -0.375175   0.743313\n341387  2022-12-31  40.780052 -121.786699  ...  336.80704 -0.375175   0.743313\n[2922 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n643777  2019-01-01  40.793655 -110.881152  ...  357.80508 -0.038281   0.785031\n643778  2019-01-01  40.793655 -110.881152  ...  357.80508 -0.038281   0.785031\n643779  2019-01-01  40.793655 -110.881152  ...  357.80508 -0.038281   0.785031\n643780  2019-01-01  40.793655 -110.881152  ...  357.80508 -0.038281   0.785031\n643781  2019-01-01  40.793655 -110.881152  ...  357.80508 -0.038281   0.785031\n...            ...        ...         ...  ...        ...       ...        ...\n643902  2022-12-31  40.793655 -110.881152  ...  357.80508 -0.038281   0.785031\n643903  2022-12-31  40.793655 -110.881152  ...  357.80508 -0.038281   0.785031\n643904  2022-12-31  40.793655 -110.881152  ...  357.80508 -0.038281   0.785031\n643905  2022-12-31  40.793655 -110.881152  ...  357.80508 -0.038281   0.785031\n643906  2022-12-31  40.793655 -110.881152  ...  357.80508 -0.038281   0.785031\n[7305 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:               date        lat         lon  ...    aspect  eastness  northness\n74470  2019-01-01  40.814054 -106.748902  ...  114.7799  0.737176  -0.396891\n74471  2019-01-01  40.814054 -106.748902  ...  114.7799  0.737176  -0.396891\n74026  2019-01-02  40.814054 -106.748902  ...  114.7799  0.737176  -0.396891\n74027  2019-01-02  40.814054 -106.748902  ...  114.7799  0.737176  -0.396891\n73660  2019-01-03  40.814054 -106.748902  ...  114.7799  0.737176  -0.396891\n...           ...        ...         ...  ...       ...       ...        ...\n74031  2022-12-29  40.814054 -106.748902  ...  114.7799  0.737176  -0.396891\n73718  2022-12-30  40.814054 -106.748902  ...  114.7799  0.737176  -0.396891\n73719  2022-12-30  40.814054 -106.748902  ...  114.7799  0.737176  -0.396891\n75006  2022-12-31  40.814054 -106.748902  ...  114.7799  0.737176  -0.396891\n75007  2022-12-31  40.814054 -106.748902  ...  114.7799  0.737176  -0.396891\n[2922 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...    aspect  eastness  northness\n620064  2019-01-01  40.841244 -110.000804  ...  349.5263 -0.179821   0.776998\n620065  2019-01-01  40.841244 -110.000804  ...  349.5263 -0.179821   0.776998\n620066  2019-01-01  40.841244 -110.000804  ...  349.5263 -0.179821   0.776998\n620067  2019-01-01  40.841244 -110.000804  ...  349.5263 -0.179821   0.776998\n620068  2019-01-01  40.841244 -110.000804  ...  349.5263 -0.179821   0.776998\n...            ...        ...         ...  ...       ...       ...        ...\n617305  2022-12-31  40.841244 -110.000804  ...  349.5263 -0.179821   0.776998\n617306  2022-12-31  40.841244 -110.000804  ...  349.5263 -0.179821   0.776998\n617307  2022-12-31  40.841244 -110.000804  ...  349.5263 -0.179821   0.776998\n617308  2022-12-31  40.841244 -110.000804  ...  349.5263 -0.179821   0.776998\n617309  2022-12-31  40.841244 -110.000804  ...  349.5263 -0.179821   0.776998\n[8766 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n667632  2019-01-01  40.882007 -110.539793  ...  20.235249  0.332996   0.753566\n667633  2019-01-01  40.882007 -110.539793  ...  20.235249  0.332996   0.753566\n667634  2019-01-01  40.882007 -110.539793  ...  20.235249  0.332996   0.753566\n666183  2019-01-02  40.882007 -110.539793  ...  20.235249  0.332996   0.753566\n666184  2019-01-02  40.882007 -110.539793  ...  20.235249  0.332996   0.753566\n...            ...        ...         ...  ...        ...       ...        ...\n667297  2022-12-30  40.882007 -110.539793  ...  20.235249  0.332996   0.753566\n667298  2022-12-30  40.882007 -110.539793  ...  20.235249  0.332996   0.753566\n664821  2022-12-31  40.882007 -110.539793  ...  20.235249  0.332996   0.753566\n664822  2022-12-31  40.882007 -110.539793  ...  20.235249  0.332996   0.753566\n664823  2022-12-31  40.882007 -110.539793  ...  20.235249  0.332996   0.753566\n[4383 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...    aspect  eastness  northness\n992443  2019-01-01  40.895589 -115.211032  ...  122.7994  0.698995  -0.496448\n992444  2019-01-01  40.895589 -115.211032  ...  122.7994  0.698995  -0.496448\n992445  2019-01-01  40.895589 -115.211032  ...  122.7994  0.698995  -0.496448\n992446  2019-01-01  40.895589 -115.211032  ...  122.7994  0.698995  -0.496448\n992543  2019-01-02  40.895589 -115.211032  ...  122.7994  0.698995  -0.496448\n...            ...        ...         ...  ...       ...       ...        ...\n996902  2022-12-30  40.895589 -115.211032  ...  122.7994  0.698995  -0.496448\n992519  2022-12-31  40.895589 -115.211032  ...  122.7994  0.698995  -0.496448\n992520  2022-12-31  40.895589 -115.211032  ...  122.7994  0.698995  -0.496448\n992521  2022-12-31  40.895589 -115.211032  ...  122.7994  0.698995  -0.496448\n992522  2022-12-31  40.895589 -115.211032  ...  122.7994  0.698995  -0.496448\n[5844 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat       lon  ...     aspect  eastness  northness\n810966  2019-01-01  40.936319 -111.8154  ...  21.940916  0.357587    0.74784\n810967  2019-01-01  40.936319 -111.8154  ...  21.940916  0.357587    0.74784\n810968  2019-01-01  40.936319 -111.8154  ...  21.940916  0.357587    0.74784\n810969  2019-01-01  40.936319 -111.8154  ...  21.940916  0.357587    0.74784\n810970  2019-01-01  40.936319 -111.8154  ...  21.940916  0.357587    0.74784\n...            ...        ...       ...  ...        ...       ...        ...\n806281  2022-12-31  40.936319 -111.8154  ...  21.940916  0.357587    0.74784\n806282  2022-12-31  40.936319 -111.8154  ...  21.940916  0.357587    0.74784\n806283  2022-12-31  40.936319 -111.8154  ...  21.940916  0.357587    0.74784\n806284  2022-12-31  40.936319 -111.8154  ...  21.940916  0.357587    0.74784\n806285  2022-12-31  40.936319 -111.8154  ...  21.940916  0.357587    0.74784\n[7305 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n674254  2019-01-01  40.943105 -115.094251  ...  258.97507 -0.776085  -0.188955\n674504  2019-01-02  40.943105 -115.094251  ...  258.97507 -0.776085  -0.188955\n674114  2019-01-03  40.943105 -115.094251  ...  258.97507 -0.776085  -0.188955\n674631  2019-01-04  40.943105 -115.094251  ...  258.97507 -0.776085  -0.188955\n674660  2019-01-05  40.943105 -115.094251  ...  258.97507 -0.776085  -0.188955\n...            ...        ...         ...  ...        ...       ...        ...\n674759  2022-12-27  40.943105 -115.094251  ...  258.97507 -0.776085  -0.188955\n673816  2022-12-28  40.943105 -115.094251  ...  258.97507 -0.776085  -0.188955\n674760  2022-12-29  40.943105 -115.094251  ...  258.97507 -0.776085  -0.188955\n674848  2022-12-30  40.943105 -115.094251  ...  258.97507 -0.776085  -0.188955\n674033  2022-12-31  40.943105 -115.094251  ...  258.97507 -0.776085  -0.188955\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n464463  2019-01-01  41.071904 -106.946532  ...  188.01927 -0.138612  -0.780485\n464464  2019-01-01  41.071904 -106.946532  ...  188.01927 -0.138612  -0.780485\n464465  2019-01-01  41.071904 -106.946532  ...  188.01927 -0.138612  -0.780485\n464466  2019-01-01  41.071904 -106.946532  ...  188.01927 -0.138612  -0.780485\n464467  2019-01-01  41.071904 -106.946532  ...  188.01927 -0.138612  -0.780485\n...            ...        ...         ...  ...        ...       ...        ...\n458212  2022-12-31  41.071904 -106.946532  ...  188.01927 -0.138612  -0.780485\n458213  2022-12-31  41.071904 -106.946532  ...  188.01927 -0.138612  -0.780485\n458214  2022-12-31  41.071904 -106.946532  ...  188.01927 -0.138612  -0.780485\n458215  2022-12-31  41.071904 -106.946532  ...  188.01927 -0.138612  -0.780485\n458216  2022-12-31  41.071904 -106.946532  ...  188.01927 -0.138612  -0.780485\n[13149 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n405537  2019-01-01  41.166648 -121.939414  ...  194.42291  -0.24411  -0.769389\n405328  2019-01-02  41.166648 -121.939414  ...  194.42291  -0.24411  -0.769389\n405631  2019-01-03  41.166648 -121.939414  ...  194.42291  -0.24411  -0.769389\n405916  2019-01-04  41.166648 -121.939414  ...  194.42291  -0.24411  -0.769389\n405225  2019-01-05  41.166648 -121.939414  ...  194.42291  -0.24411  -0.769389\n...            ...        ...         ...  ...        ...       ...        ...\n405560  2022-12-27  41.166648 -121.939414  ...  194.42291  -0.24411  -0.769389\n405813  2022-12-28  41.166648 -121.939414  ...  194.42291  -0.24411  -0.769389\n405333  2022-12-29  41.166648 -121.939414  ...  194.42291  -0.24411  -0.769389\n405663  2022-12-30  41.166648 -121.939414  ...  194.42291  -0.24411  -0.769389\n405323  2022-12-31  41.166648 -121.939414  ...  194.42291  -0.24411  -0.769389\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...    aspect  eastness  northness\n683688  2019-01-01  41.200451 -122.523319  ...  121.2316  0.707435  -0.478337\n683689  2019-01-01  41.200451 -122.523319  ...  121.2316  0.707435  -0.478337\n683690  2019-01-01  41.200451 -122.523319  ...  121.2316  0.707435  -0.478337\n683691  2019-01-01  41.200451 -122.523319  ...  121.2316  0.707435  -0.478337\n683692  2019-01-01  41.200451 -122.523319  ...  121.2316  0.707435  -0.478337\n...            ...        ...         ...  ...       ...       ...        ...\n681293  2022-12-31  41.200451 -122.523319  ...  121.2316  0.707435  -0.478337\n681294  2022-12-31  41.200451 -122.523319  ...  121.2316  0.707435  -0.478337\n681295  2022-12-31  41.200451 -122.523319  ...  121.2316  0.707435  -0.478337\n681296  2022-12-31  41.200451 -122.523319  ...  121.2316  0.707435  -0.478337\n681297  2022-12-31  41.200451 -122.523319  ...  121.2316  0.707435  -0.478337\n[7305 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...    aspect  eastness  northness\n767044  2019-01-01  41.227482 -122.801796  ...  74.17401  0.766082   0.266242\n767045  2019-01-01  41.227482 -122.801796  ...  74.17401  0.766082   0.266242\n767046  2019-01-01  41.227482 -122.801796  ...  74.17401  0.766082   0.266242\n767047  2019-01-01  41.227482 -122.801796  ...  74.17401  0.766082   0.266242\n767168  2019-01-02  41.227482 -122.801796  ...  74.17401  0.766082   0.266242\n...            ...        ...         ...  ...       ...       ...        ...\n770475  2022-12-30  41.227482 -122.801796  ...  74.17401  0.766082   0.266242\n767140  2022-12-31  41.227482 -122.801796  ...  74.17401  0.766082   0.266242\n767141  2022-12-31  41.227482 -122.801796  ...  74.17401  0.766082   0.266242\n767142  2022-12-31  41.227482 -122.801796  ...  74.17401  0.766082   0.266242\n767143  2022-12-31  41.227482 -122.801796  ...  74.17401  0.766082   0.266242\n[5844 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat        lon  ...     aspect  eastness  northness\n607371  2019-01-01  41.328746 -106.37161  ...  141.17511  0.559995  -0.661845\n607661  2019-01-02  41.328746 -106.37161  ...  141.17511  0.559995  -0.661845\n607738  2019-01-03  41.328746 -106.37161  ...  141.17511  0.559995  -0.661845\n607281  2019-01-04  41.328746 -106.37161  ...  141.17511  0.559995  -0.661845\n606842  2019-01-05  41.328746 -106.37161  ...  141.17511  0.559995  -0.661845\n...            ...        ...        ...  ...        ...       ...        ...\n606930  2022-12-27  41.328746 -106.37161  ...  141.17511  0.559995  -0.661845\n606717  2022-12-28  41.328746 -106.37161  ...  141.17511  0.559995  -0.661845\n607408  2022-12-29  41.328746 -106.37161  ...  141.17511  0.559995  -0.661845\n607501  2022-12-30  41.328746 -106.37161  ...  141.17511  0.559995  -0.661845\n607655  2022-12-31  41.328746 -106.37161  ...  141.17511  0.559995  -0.661845\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n830563  2019-01-01  41.355724 -111.483024  ...  138.43832  0.585756  -0.642375\n830115  2019-01-02  41.355724 -111.483024  ...  138.43832  0.585756  -0.642375\n830406  2019-01-03  41.355724 -111.483024  ...  138.43832  0.585756  -0.642375\n830229  2019-01-04  41.355724 -111.483024  ...  138.43832  0.585756  -0.642375\n830974  2019-01-05  41.355724 -111.483024  ...  138.43832  0.585756  -0.642375\n...            ...        ...         ...  ...        ...       ...        ...\n830824  2022-12-27  41.355724 -111.483024  ...  138.43832  0.585756  -0.642375\n829871  2022-12-28  41.355724 -111.483024  ...  138.43832  0.585756  -0.642375\n830349  2022-12-29  41.355724 -111.483024  ...  138.43832  0.585756  -0.642375\n830216  2022-12-30  41.355724 -111.483024  ...  138.43832  0.585756  -0.642375\n830339  2022-12-31  41.355724 -111.483024  ...  138.43832  0.585756  -0.642375\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat        lon  ...     aspect  eastness  northness\n923697  2019-01-01  41.355724 -106.22788  ...  249.85822 -0.753866  -0.331628\n923698  2019-01-01  41.355724 -106.22788  ...  249.85822 -0.753866  -0.331628\n923699  2019-01-01  41.355724 -106.22788  ...  249.85822 -0.753866  -0.331628\n920817  2019-01-02  41.355724 -106.22788  ...  249.85822 -0.753866  -0.331628\n920818  2019-01-02  41.355724 -106.22788  ...  249.85822 -0.753866  -0.331628\n...            ...        ...        ...  ...        ...       ...        ...\n921892  2022-12-30  41.355724 -106.22788  ...  249.85822 -0.753866  -0.331628\n921893  2022-12-30  41.355724 -106.22788  ...  249.85822 -0.753866  -0.331628\n923751  2022-12-31  41.355724 -106.22788  ...  249.85822 -0.753866  -0.331628\n923752  2022-12-31  41.355724 -106.22788  ...  249.85822 -0.753866  -0.331628\n923753  2022-12-31  41.355724 -106.22788  ...  249.85822 -0.753866  -0.331628\n[4383 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat        lon  ...     aspect  eastness  northness\n610152  2019-01-01  41.463521 -111.50099  ...  59.103233  0.709174   0.474384\n610153  2019-01-01  41.463521 -111.50099  ...  59.103233  0.709174   0.474384\n610154  2019-01-01  41.463521 -111.50099  ...  59.103233  0.709174   0.474384\n610155  2019-01-01  41.463521 -111.50099  ...  59.103233  0.709174   0.474384\n610260  2019-01-02  41.463521 -111.50099  ...  59.103233  0.709174   0.474384\n...            ...        ...        ...  ...        ...       ...        ...\n610663  2022-12-30  41.463521 -111.50099  ...  59.103233  0.709174   0.474384\n613156  2022-12-31  41.463521 -111.50099  ...  59.103233  0.709174   0.474384\n613157  2022-12-31  41.463521 -111.50099  ...  59.103233  0.709174   0.474384\n613158  2022-12-31  41.463521 -111.50099  ...  59.103233  0.709174   0.474384\n613159  2022-12-31  41.463521 -111.50099  ...  59.103233  0.709174   0.474384\n[5844 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date       lat         lon  ...     aspect  eastness  northness\n301624  2019-01-01  41.66516 -115.327813  ...  187.13129 -0.123511  -0.781515\n301625  2019-01-01  41.66516 -115.327813  ...  187.13129 -0.123511  -0.781515\n301626  2019-01-01  41.66516 -115.327813  ...  187.13129 -0.123511  -0.781515\n301627  2019-01-01  41.66516 -115.327813  ...  187.13129 -0.123511  -0.781515\n301628  2019-01-01  41.66516 -115.327813  ...  187.13129 -0.123511  -0.781515\n...            ...       ...         ...  ...        ...       ...        ...\n303059  2022-12-31  41.66516 -115.327813  ...  187.13129 -0.123511  -0.781515\n303060  2022-12-31  41.66516 -115.327813  ...  187.13129 -0.123511  -0.781515\n303061  2022-12-31  41.66516 -115.327813  ...  187.13129 -0.123511  -0.781515\n303062  2022-12-31  41.66516 -115.327813  ...  187.13129 -0.123511  -0.781515\n303063  2022-12-31  41.66516 -115.327813  ...  187.13129 -0.123511  -0.781515\n[7305 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date       lat         lon  ...     aspect  eastness  northness\n276048  2019-01-01  41.68529 -111.420141  ...  354.06525  -0.10303   0.782711\n276049  2019-01-01  41.68529 -111.420141  ...  354.06525  -0.10303   0.782711\n276050  2019-01-01  41.68529 -111.420141  ...  354.06525  -0.10303   0.782711\n276051  2019-01-01  41.68529 -111.420141  ...  354.06525  -0.10303   0.782711\n276052  2019-01-01  41.68529 -111.420141  ...  354.06525  -0.10303   0.782711\n...            ...       ...         ...  ...        ...       ...        ...\n274789  2022-12-31  41.68529 -111.420141  ...  354.06525  -0.10303   0.782711\n274790  2022-12-31  41.68529 -111.420141  ...  354.06525  -0.10303   0.782711\n274791  2022-12-31  41.68529 -111.420141  ...  354.06525  -0.10303   0.782711\n274792  2022-12-31  41.68529 -111.420141  ...  354.06525  -0.10303   0.782711\n274793  2022-12-31  41.68529 -111.420141  ...  354.06525  -0.10303   0.782711\n[8766 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n707193  2019-01-01  41.779142 -116.028498  ...  287.36066 -0.762094   0.289975\n707194  2019-01-01  41.779142 -116.028498  ...  287.36066 -0.762094   0.289975\n707195  2019-01-01  41.779142 -116.028498  ...  287.36066 -0.762094   0.289975\n707196  2019-01-01  41.779142 -116.028498  ...  287.36066 -0.762094   0.289975\n707197  2019-01-01  41.779142 -116.028498  ...  287.36066 -0.762094   0.289975\n...            ...        ...         ...  ...        ...       ...        ...\n701404  2022-12-31  41.779142 -116.028498  ...  287.36066 -0.762094   0.289975\n701405  2022-12-31  41.779142 -116.028498  ...  287.36066 -0.762094   0.289975\n701406  2022-12-31  41.779142 -116.028498  ...  287.36066 -0.762094   0.289975\n701407  2022-12-31  41.779142 -116.028498  ...  287.36066 -0.762094   0.289975\n701408  2022-12-31  41.779142 -116.028498  ...  287.36066 -0.762094   0.289975\n[8766 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n202200  2019-01-01  41.892922 -115.857819  ...  86.631004  0.784533   0.058699\n202232  2019-01-02  41.892922 -115.857819  ...  86.631004  0.784533   0.058699\n203041  2019-01-03  41.892922 -115.857819  ...  86.631004  0.784533   0.058699\n202834  2019-01-04  41.892922 -115.857819  ...  86.631004  0.784533   0.058699\n202865  2019-01-05  41.892922 -115.857819  ...  86.631004  0.784533   0.058699\n...            ...        ...         ...  ...        ...       ...        ...\n202723  2022-12-27  41.892922 -115.857819  ...  86.631004  0.784533   0.058699\n201762  2022-12-28  41.892922 -115.857819  ...  86.631004  0.784533   0.058699\n202241  2022-12-29  41.892922 -115.857819  ...  86.631004  0.784533   0.058699\n203069  2022-12-30  41.892922 -115.857819  ...  86.631004  0.784533   0.058699\n202227  2022-12-31  41.892922 -115.857819  ...  86.631004  0.784533   0.058699\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n948504  2019-01-01  41.966437 -118.193438  ...  281.44147 -0.775363   0.195824\n948505  2019-01-01  41.966437 -118.193438  ...  281.44147 -0.775363   0.195824\n948506  2019-01-01  41.966437 -118.193438  ...  281.44147 -0.775363   0.195824\n951537  2019-01-02  41.966437 -118.193438  ...  281.44147 -0.775363   0.195824\n951538  2019-01-02  41.966437 -118.193438  ...  281.44147 -0.775363   0.195824\n...            ...        ...         ...  ...        ...       ...        ...\n949609  2022-12-30  41.966437 -118.193438  ...  281.44147 -0.775363   0.195824\n949610  2022-12-30  41.966437 -118.193438  ...  281.44147 -0.775363   0.195824\n948558  2022-12-31  41.966437 -118.193438  ...  281.44147 -0.775363   0.195824\n948559  2022-12-31  41.966437 -118.193438  ...  281.44147 -0.775363   0.195824\n948560  2022-12-31  41.966437 -118.193438  ...  281.44147 -0.775363   0.195824\n[4383 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...    aspect  eastness  northness\n268671  2019-01-01  41.993149 -120.178715  ...  40.62973  0.577196   0.649194\n268672  2019-01-01  41.993149 -120.178715  ...  40.62973  0.577196   0.649194\n268673  2019-01-01  41.993149 -120.178715  ...  40.62973  0.577196   0.649194\n268674  2019-01-01  41.993149 -120.178715  ...  40.62973  0.577196   0.649194\n268675  2019-01-01  41.993149 -120.178715  ...  40.62973  0.577196   0.649194\n...            ...        ...         ...  ...       ...       ...        ...\n268810  2022-12-31  41.993149 -120.178715  ...  40.62973  0.577196   0.649194\n268811  2022-12-31  41.993149 -120.178715  ...  40.62973  0.577196   0.649194\n268812  2022-12-31  41.993149 -120.178715  ...  40.62973  0.577196   0.649194\n268813  2022-12-31  41.993149 -120.178715  ...  40.62973  0.577196   0.649194\n268814  2022-12-31  41.993149 -120.178715  ...  40.62973  0.577196   0.649194\n[8766 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n898735  2019-01-01  42.079885 -123.340785  ...  184.79019 -0.083314  -0.783649\n898736  2019-01-01  42.079885 -123.340785  ...  184.79019 -0.083314  -0.783649\n898783  2019-01-02  42.079885 -123.340785  ...  184.79019 -0.083314  -0.783649\n898784  2019-01-02  42.079885 -123.340785  ...  184.79019 -0.083314  -0.783649\n900907  2019-01-03  42.079885 -123.340785  ...  184.79019 -0.083314  -0.783649\n...            ...        ...         ...  ...        ...       ...        ...\n899294  2022-12-29  42.079885 -123.340785  ...  184.79019 -0.083314  -0.783649\n898985  2022-12-30  42.079885 -123.340785  ...  184.79019 -0.083314  -0.783649\n898986  2022-12-30  42.079885 -123.340785  ...  184.79019 -0.083314  -0.783649\n899279  2022-12-31  42.079885 -123.340785  ...  184.79019 -0.083314  -0.783649\n899280  2022-12-31  42.079885 -123.340785  ...  184.79019 -0.083314  -0.783649\n[2922 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n738160  2019-01-01  42.166502 -114.195936  ...  174.41013  0.097101  -0.783015\n738189  2019-01-02  42.166502 -114.195936  ...  174.41013  0.097101  -0.783015\n738996  2019-01-03  42.166502 -114.195936  ...  174.41013  0.097101  -0.783015\n738324  2019-01-04  42.166502 -114.195936  ...  174.41013  0.097101  -0.783015\n738840  2019-01-05  42.166502 -114.195936  ...  174.41013  0.097101  -0.783015\n...            ...        ...         ...  ...        ...       ...        ...\n738928  2022-12-27  42.166502 -114.195936  ...  174.41013  0.097101  -0.783015\n737941  2022-12-28  42.166502 -114.195936  ...  174.41013  0.097101  -0.783015\n738454  2022-12-29  42.166502 -114.195936  ...  174.41013  0.097101  -0.783015\n738543  2022-12-30  42.166502 -114.195936  ...  174.41013  0.097101  -0.783015\n738183  2022-12-31  42.166502 -114.195936  ...  174.41013  0.097101  -0.783015\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n314076  2019-01-01  42.299527 -110.674539  ...  120.18355  0.712806  -0.465862\n314077  2019-01-01  42.299527 -110.674539  ...  120.18355  0.712806  -0.465862\n314078  2019-01-01  42.299527 -110.674539  ...  120.18355  0.712806  -0.465862\n314079  2019-01-01  42.299527 -110.674539  ...  120.18355  0.712806  -0.465862\n314080  2019-01-01  42.299527 -110.674539  ...  120.18355  0.712806  -0.465862\n...            ...        ...         ...  ...        ...       ...        ...\n316993  2022-12-31  42.299527 -110.674539  ...  120.18355  0.712806  -0.465862\n316994  2022-12-31  42.299527 -110.674539  ...  120.18355  0.712806  -0.465862\n316995  2022-12-31  42.299527 -110.674539  ...  120.18355  0.712806  -0.465862\n316996  2022-12-31  42.299527 -110.674539  ...  120.18355  0.712806  -0.465862\n316997  2022-12-31  42.299527 -110.674539  ...  120.18355  0.712806  -0.465862\n[8766 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n725289  2019-01-01  42.359297 -111.563872  ...  358.65628 -0.023446   0.785261\n725290  2019-01-01  42.359297 -111.563872  ...  358.65628 -0.023446   0.785261\n725291  2019-01-01  42.359297 -111.563872  ...  358.65628 -0.023446   0.785261\n725292  2019-01-01  42.359297 -111.563872  ...  358.65628 -0.023446   0.785261\n725293  2019-01-01  42.359297 -111.563872  ...  358.65628 -0.023446   0.785261\n...            ...        ...         ...  ...        ...       ...        ...\n726862  2022-12-31  42.359297 -111.563872  ...  358.65628 -0.023446   0.785261\n726863  2022-12-31  42.359297 -111.563872  ...  358.65628 -0.023446   0.785261\n726864  2022-12-31  42.359297 -111.563872  ...  358.65628 -0.023446   0.785261\n726865  2022-12-31  42.359297 -111.563872  ...  358.65628 -0.023446   0.785261\n726866  2022-12-31  42.359297 -111.563872  ...  358.65628 -0.023446   0.785261\n[8766 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...    aspect  eastness  northness\n694275  2019-01-01  42.379208 -122.352638  ...  138.2174  0.587753   -0.64073\n694276  2019-01-01  42.379208 -122.352638  ...  138.2174  0.587753   -0.64073\n694277  2019-01-01  42.379208 -122.352638  ...  138.2174  0.587753   -0.64073\n694350  2019-01-02  42.379208 -122.352638  ...  138.2174  0.587753   -0.64073\n694351  2019-01-02  42.379208 -122.352638  ...  138.2174  0.587753   -0.64073\n...            ...        ...         ...  ...       ...       ...        ...\n695407  2022-12-30  42.379208 -122.352638  ...  138.2174  0.587753   -0.64073\n695408  2022-12-30  42.379208 -122.352638  ...  138.2174  0.587753   -0.64073\n695082  2022-12-31  42.379208 -122.352638  ...  138.2174  0.587753   -0.64073\n695083  2022-12-31  42.379208 -122.352638  ...  138.2174  0.587753   -0.64073\n695084  2022-12-31  42.379208 -122.352638  ...  138.2174  0.587753   -0.64073\n[4383 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n335242  2019-01-01  42.571353 -108.841977  ...  287.95282 -0.760451   0.298994\n335243  2019-01-01  42.571353 -108.841977  ...  287.95282 -0.760451   0.298994\n335244  2019-01-01  42.571353 -108.841977  ...  287.95282 -0.760451   0.298994\n335245  2019-01-01  42.571353 -108.841977  ...  287.95282 -0.760451   0.298994\n335246  2019-01-01  42.571353 -108.841977  ...  287.95282 -0.760451   0.298994\n...            ...        ...         ...  ...        ...       ...        ...\n334067  2022-12-31  42.571353 -108.841977  ...  287.95282 -0.760451   0.298994\n334068  2022-12-31  42.571353 -108.841977  ...  287.95282 -0.760451   0.298994\n334069  2022-12-31  42.571353 -108.841977  ...  287.95282 -0.760451   0.298994\n334070  2022-12-31  42.571353 -108.841977  ...  287.95282 -0.760451   0.298994\n334071  2022-12-31  42.571353 -108.841977  ...  287.95282 -0.760451   0.298994\n[7305 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...   aspect  eastness  northness\n816717  2019-01-01  42.571353 -106.093131  ...  317.995 -0.589751   0.639062\n816718  2019-01-01  42.571353 -106.093131  ...  317.995 -0.589751   0.639062\n816719  2019-01-01  42.571353 -106.093131  ...  317.995 -0.589751   0.639062\n816720  2019-01-01  42.571353 -106.093131  ...  317.995 -0.589751   0.639062\n816721  2019-01-01  42.571353 -106.093131  ...  317.995 -0.589751   0.639062\n...            ...        ...         ...  ...      ...       ...        ...\n816826  2022-12-31  42.571353 -106.093131  ...  317.995 -0.589751   0.639062\n816827  2022-12-31  42.571353 -106.093131  ...  317.995 -0.589751   0.639062\n816828  2022-12-31  42.571353 -106.093131  ...  317.995 -0.589751   0.639062\n816829  2022-12-31  42.571353 -106.093131  ...  317.995 -0.589751   0.639062\n816830  2022-12-31  42.571353 -106.093131  ...  317.995 -0.589751   0.639062\n[8766 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                 date        lat         lon  ...    aspect  eastness  northness\n1000484  2019-01-01  42.696921 -120.798553  ...  90.05216  0.785398   -0.00091\n1000485  2019-01-01  42.696921 -120.798553  ...  90.05216  0.785398   -0.00091\n1000486  2019-01-01  42.696921 -120.798553  ...  90.05216  0.785398   -0.00091\n1000487  2019-01-01  42.696921 -120.798553  ...  90.05216  0.785398   -0.00091\n1000488  2019-01-01  42.696921 -120.798553  ...  90.05216  0.785398   -0.00091\n...             ...        ...         ...  ...       ...       ...        ...\n1004434  2022-12-31  42.696921 -120.798553  ...  90.05216  0.785398   -0.00091\n1004435  2022-12-31  42.696921 -120.798553  ...  90.05216  0.785398   -0.00091\n1004436  2022-12-31  42.696921 -120.798553  ...  90.05216  0.785398   -0.00091\n1004437  2022-12-31  42.696921 -120.798553  ...  90.05216  0.785398   -0.00091\n1004438  2022-12-31  42.696921 -120.798553  ...  90.05216  0.785398   -0.00091\n[7305 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n901782  2019-01-01  42.756312 -118.687512  ...  56.806812  0.696798   0.500894\n901815  2019-01-02  42.756312 -118.687512  ...  56.806812  0.696798   0.500894\n901889  2019-01-03  42.756312 -118.687512  ...  56.806812  0.696798   0.500894\n901444  2019-01-04  42.756312 -118.687512  ...  56.806812  0.696798   0.500894\n901705  2019-01-05  42.756312 -118.687512  ...  56.806812  0.696798   0.500894\n...            ...        ...         ...  ...        ...       ...        ...\n902548  2022-12-27  42.756312 -118.687512  ...  56.806812  0.696798   0.500894\n902799  2022-12-28  42.756312 -118.687512  ...  56.806812  0.696798   0.500894\n902556  2022-12-29  42.756312 -118.687512  ...  56.806812  0.696798   0.500894\n901661  2022-12-30  42.756312 -118.687512  ...  56.806812  0.696798   0.500894\n901559  2022-12-31  42.756312 -118.687512  ...  56.806812  0.696798   0.500894\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n496673  2019-01-01  42.762907 -116.899865  ...  305.88165 -0.680947   0.530146\n496674  2019-01-01  42.762907 -116.899865  ...  305.88165 -0.680947   0.530146\n497745  2019-01-02  42.762907 -116.899865  ...  305.88165 -0.680947   0.530146\n497746  2019-01-02  42.762907 -116.899865  ...  305.88165 -0.680947   0.530146\n496865  2019-01-03  42.762907 -116.899865  ...  305.88165 -0.680947   0.530146\n...            ...        ...         ...  ...        ...       ...        ...\n496734  2022-12-29  42.762907 -116.899865  ...  305.88165 -0.680947   0.530146\n496933  2022-12-30  42.762907 -116.899865  ...  305.88165 -0.680947   0.530146\n496934  2022-12-30  42.762907 -116.899865  ...  305.88165 -0.680947   0.530146\n496713  2022-12-31  42.762907 -116.899865  ...  305.88165 -0.680947   0.530146\n496714  2022-12-31  42.762907 -116.899865  ...  305.88165 -0.680947   0.530146\n[2922 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n795243  2019-01-01  42.789282 -121.975347  ...  202.70607 -0.368383  -0.745106\n795244  2019-01-01  42.789282 -121.975347  ...  202.70607 -0.368383  -0.745106\n795245  2019-01-01  42.789282 -121.975347  ...  202.70607 -0.368383  -0.745106\n795246  2019-01-01  42.789282 -121.975347  ...  202.70607 -0.368383  -0.745106\n795363  2019-01-02  42.789282 -121.975347  ...  202.70607 -0.368383  -0.745106\n...            ...        ...         ...  ...        ...       ...        ...\n795794  2022-12-30  42.789282 -121.975347  ...  202.70607 -0.368383  -0.745106\n797323  2022-12-31  42.789282 -121.975347  ...  202.70607 -0.368383  -0.745106\n797324  2022-12-31  42.789282 -121.975347  ...  202.70607 -0.368383  -0.745106\n797325  2022-12-31  42.789282 -121.975347  ...  202.70607 -0.368383  -0.745106\n797326  2022-12-31  42.789282 -121.975347  ...  202.70607 -0.368383  -0.745106\n[5844 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date       lat         lon  ...    aspect  eastness  northness\n887255  2019-01-01  42.96702 -110.611658  ...  99.74328  0.778134  -0.167646\n887256  2019-01-01  42.96702 -110.611658  ...  99.74328  0.778134  -0.167646\n888727  2019-01-02  42.96702 -110.611658  ...  99.74328  0.778134  -0.167646\n888728  2019-01-02  42.96702 -110.611658  ...  99.74328  0.778134  -0.167646\n888867  2019-01-03  42.96702 -110.611658  ...  99.74328  0.778134  -0.167646\n...            ...       ...         ...  ...       ...       ...        ...\n888730  2022-12-29  42.96702 -110.611658  ...  99.74328  0.778134  -0.167646\n888937  2022-12-30  42.96702 -110.611658  ...  99.74328  0.778134  -0.167646\n888938  2022-12-30  42.96702 -110.611658  ...  99.74328  0.778134  -0.167646\n887287  2022-12-31  42.96702 -110.611658  ...  99.74328  0.778134  -0.167646\n887288  2022-12-31  42.96702 -110.611658  ...  99.74328  0.778134  -0.167646\n[2922 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n239322  2019-01-01  43.006448 -109.758258  ...  88.655815  0.785261   0.023454\n239323  2019-01-01  43.006448 -109.758258  ...  88.655815  0.785261   0.023454\n238896  2019-01-02  43.006448 -109.758258  ...  88.655815  0.785261   0.023454\n238897  2019-01-02  43.006448 -109.758258  ...  88.655815  0.785261   0.023454\n239508  2019-01-03  43.006448 -109.758258  ...  88.655815  0.785261   0.023454\n...            ...        ...         ...  ...        ...       ...        ...\n238911  2022-12-29  43.006448 -109.758258  ...  88.655815  0.785261   0.023454\n238150  2022-12-30  43.006448 -109.758258  ...  88.655815  0.785261   0.023454\n238151  2022-12-30  43.006448 -109.758258  ...  88.655815  0.785261   0.023454\n239384  2022-12-31  43.006448 -109.758258  ...  88.655815  0.785261   0.023454\n239385  2022-12-31  43.006448 -109.758258  ...  88.655815  0.785261   0.023454\n[2922 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...    aspect  eastness  northness\n960123  2019-01-01  43.190109 -122.137043  ...  75.81726  0.769923   0.240282\n959891  2019-01-02  43.190109 -122.137043  ...  75.81726  0.769923   0.240282\n959970  2019-01-03  43.190109 -122.137043  ...  75.81726  0.769923   0.240282\n960021  2019-01-04  43.190109 -122.137043  ...  75.81726  0.769923   0.240282\n960281  2019-01-05  43.190109 -122.137043  ...  75.81726  0.769923   0.240282\n...            ...        ...         ...  ...       ...       ...        ...\n960147  2022-12-27  43.190109 -122.137043  ...  75.81726  0.769923   0.240282\n960395  2022-12-28  43.190109 -122.137043  ...  75.81726  0.769923   0.240282\n960152  2022-12-29  43.190109 -122.137043  ...  75.81726  0.769923   0.240282\n960963  2022-12-30  43.190109 -122.137043  ...  75.81726  0.769923   0.240282\n960144  2022-12-31  43.190109 -122.137043  ...  75.81726  0.769923   0.240282\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat        lon  ...     aspect  eastness  northness\n165827  2019-01-01  43.268653 -115.34578  ...  338.85178 -0.346248   0.750564\n166104  2019-01-02  43.268653 -115.34578  ...  338.85178 -0.346248   0.750564\n165663  2019-01-03  43.268653 -115.34578  ...  338.85178 -0.346248   0.750564\n165721  2019-01-04  43.268653 -115.34578  ...  338.85178 -0.346248   0.750564\n166455  2019-01-05  43.268653 -115.34578  ...  338.85178 -0.346248   0.750564\n...            ...        ...        ...  ...        ...       ...        ...\n165576  2022-12-27  43.268653 -115.34578  ...  338.85178 -0.346248   0.750564\n165353  2022-12-28  43.268653 -115.34578  ...  338.85178 -0.346248   0.750564\n166107  2022-12-29  43.268653 -115.34578  ...  338.85178 -0.346248   0.750564\n166398  2022-12-30  43.268653 -115.34578  ...  338.85178 -0.346248   0.750564\n166309  2022-12-31  43.268653 -115.34578  ...  338.85178 -0.346248   0.750564\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...    aspect  eastness  northness\n234844  2019-01-01  43.275193 -109.443848  ...  10.44423  0.179331   0.777045\n235098  2019-01-02  43.275193 -109.443848  ...  10.44423  0.179331   0.777045\n234932  2019-01-03  43.275193 -109.443848  ...  10.44423  0.179331   0.777045\n234978  2019-01-04  43.275193 -109.443848  ...  10.44423  0.179331   0.777045\n235003  2019-01-05  43.275193 -109.443848  ...  10.44423  0.179331   0.777045\n...            ...        ...         ...  ...       ...       ...        ...\n234406  2022-12-27  43.275193 -109.443848  ...  10.44423  0.179331   0.777045\n234156  2022-12-28  43.275193 -109.443848  ...  10.44423  0.179331   0.777045\n235102  2022-12-29  43.275193 -109.443848  ...  10.44423  0.179331   0.777045\n234507  2022-12-30  43.275193 -109.443848  ...  10.44423  0.179331   0.777045\n235091  2022-12-31  43.275193 -109.443848  ...  10.44423  0.179331   0.777045\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:               date        lat         lon  ...    aspect  eastness  northness\n30619  2019-01-01  43.386277 -110.126567  ...  144.0426  0.530942  -0.680479\n30620  2019-01-01  43.386277 -110.126567  ...  144.0426  0.530942  -0.680479\n30621  2019-01-01  43.386277 -110.126567  ...  144.0426  0.530942  -0.680479\n30622  2019-01-01  43.386277 -110.126567  ...  144.0426  0.530942  -0.680479\n30623  2019-01-01  43.386277 -110.126567  ...  144.0426  0.530942  -0.680479\n...           ...        ...         ...  ...       ...       ...        ...\n30714  2022-12-31  43.386277 -110.126567  ...  144.0426  0.530942  -0.680479\n30715  2022-12-31  43.386277 -110.126567  ...  144.0426  0.530942  -0.680479\n30716  2022-12-31  43.386277 -110.126567  ...  144.0426  0.530942  -0.680479\n30717  2022-12-31  43.386277 -110.126567  ...  144.0426  0.530942  -0.680479\n30718  2022-12-31  43.386277 -110.126567  ...  144.0426  0.530942  -0.680479\n[7305 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n159988  2019-01-01  43.386277 -109.875039  ...  120.45858  0.711417  -0.469165\n160481  2019-01-02  43.386277 -109.875039  ...  120.45858  0.711417  -0.469165\n160326  2019-01-03  43.386277 -109.875039  ...  120.45858  0.711417  -0.469165\n160368  2019-01-04  43.386277 -109.875039  ...  120.45858  0.711417  -0.469165\n159911  2019-01-05  43.386277 -109.875039  ...  120.45858  0.711417  -0.469165\n...            ...        ...         ...  ...        ...       ...        ...\n159748  2022-12-27  43.386277 -109.875039  ...  120.45858  0.711417  -0.469165\n160028  2022-12-28  43.386277 -109.875039  ...  120.45858  0.711417  -0.469165\n160261  2022-12-29  43.386277 -109.875039  ...  120.45858  0.711417  -0.469165\n159862  2022-12-30  43.386277 -109.875039  ...  120.45858  0.711417  -0.469165\n160254  2022-12-31  43.386277 -109.875039  ...  120.45858  0.711417  -0.469165\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n161421  2019-01-01  43.464568 -107.242976  ...  17.323126  0.289401   0.762196\n161923  2019-01-02  43.464568 -107.242976  ...  17.323126  0.289401   0.762196\n161293  2019-01-03  43.464568 -107.242976  ...  17.323126  0.289401   0.762196\n161796  2019-01-04  43.464568 -107.242976  ...  17.323126  0.289401   0.762196\n161360  2019-01-05  43.464568 -107.242976  ...  17.323126  0.289401   0.762196\n...            ...        ...         ...  ...        ...       ...        ...\n161676  2022-12-27  43.464568 -107.242976  ...  17.323126  0.289401   0.762196\n161460  2022-12-28  43.464568 -107.242976  ...  17.323126  0.289401   0.762196\n161928  2022-12-29  43.464568 -107.242976  ...  17.323126  0.289401   0.762196\n162032  2022-12-30  43.464568 -107.242976  ...  17.323126  0.289401   0.762196\n161217  2022-12-31  43.464568 -107.242976  ...  17.323126  0.289401   0.762196\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n488283  2019-01-01  43.484125 -114.824757  ...  215.89955 -0.530334  -0.680837\n488284  2019-01-01  43.484125 -114.824757  ...  215.89955 -0.530334  -0.680837\n488285  2019-01-01  43.484125 -114.824757  ...  215.89955 -0.530334  -0.680837\n489141  2019-01-02  43.484125 -114.824757  ...  215.89955 -0.530334  -0.680837\n489142  2019-01-02  43.484125 -114.824757  ...  215.89955 -0.530334  -0.680837\n...            ...        ...         ...  ...        ...       ...        ...\n489412  2022-12-30  43.484125 -114.824757  ...  215.89955 -0.530334  -0.680837\n489413  2022-12-30  43.484125 -114.824757  ...  215.89955 -0.530334  -0.680837\n490551  2022-12-31  43.484125 -114.824757  ...  215.89955 -0.530334  -0.680837\n490552  2022-12-31  43.484125 -114.824757  ...  215.89955 -0.530334  -0.680837\n490553  2022-12-31  43.484125 -114.824757  ...  215.89955 -0.530334  -0.680837\n[4383 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date       lat         lon  ...     aspect  eastness  northness\n986658  2019-01-01  43.51019 -121.975347  ...  302.42468 -0.701057   0.492179\n986659  2019-01-01  43.51019 -121.975347  ...  302.42468 -0.701057   0.492179\n986660  2019-01-01  43.51019 -121.975347  ...  302.42468 -0.701057   0.492179\n986661  2019-01-01  43.51019 -121.975347  ...  302.42468 -0.701057   0.492179\n988682  2019-01-02  43.51019 -121.975347  ...  302.42468 -0.701057   0.492179\n...            ...       ...         ...  ...        ...       ...        ...\n986213  2022-12-30  43.51019 -121.975347  ...  302.42468 -0.701057   0.492179\n985790  2022-12-31  43.51019 -121.975347  ...  302.42468 -0.701057   0.492179\n985791  2022-12-31  43.51019 -121.975347  ...  302.42468 -0.701057   0.492179\n985792  2022-12-31  43.51019 -121.975347  ...  302.42468 -0.701057   0.492179\n985793  2022-12-31  43.51019 -121.975347  ...  302.42468 -0.701057   0.492179\n[5844 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n297984  2019-01-01  43.568798 -111.213529  ...  166.65277  0.226877  -0.771709\n297985  2019-01-01  43.568798 -111.213529  ...  166.65277  0.226877  -0.771709\n297986  2019-01-01  43.568798 -111.213529  ...  166.65277  0.226877  -0.771709\n295164  2019-01-02  43.568798 -111.213529  ...  166.65277  0.226877  -0.771709\n295165  2019-01-02  43.568798 -111.213529  ...  166.65277  0.226877  -0.771709\n...            ...        ...         ...  ...        ...       ...        ...\n296968  2022-12-30  43.568798 -111.213529  ...  166.65277  0.226877  -0.771709\n296969  2022-12-30  43.568798 -111.213529  ...  166.65277  0.226877  -0.771709\n295140  2022-12-31  43.568798 -111.213529  ...  166.65277  0.226877  -0.771709\n295141  2022-12-31  43.568798 -111.213529  ...  166.65277  0.226877  -0.771709\n295142  2022-12-31  43.568798 -111.213529  ...  166.65277  0.226877  -0.771709\n[4383 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n507609  2019-01-01  43.607837 -113.926441  ...  140.76878   0.56394   -0.65906\n507610  2019-01-01  43.607837 -113.926441  ...  140.76878   0.56394   -0.65906\n507611  2019-01-01  43.607837 -113.926441  ...  140.76878   0.56394   -0.65906\n507672  2019-01-02  43.607837 -113.926441  ...  140.76878   0.56394   -0.65906\n507673  2019-01-02  43.607837 -113.926441  ...  140.76878   0.56394   -0.65906\n...            ...        ...         ...  ...        ...       ...        ...\n507268  2022-12-30  43.607837 -113.926441  ...  140.76878   0.56394   -0.65906\n507269  2022-12-30  43.607837 -113.926441  ...  140.76878   0.56394   -0.65906\n507660  2022-12-31  43.607837 -113.926441  ...  140.76878   0.56394   -0.65906\n507661  2022-12-31  43.607837 -113.926441  ...  140.76878   0.56394   -0.65906\n507662  2022-12-31  43.607837 -113.926441  ...  140.76878   0.56394   -0.65906\n[4383 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n576282  2019-01-01  43.672847 -109.380966  ...  192.41106 -0.211703  -0.773576\n576283  2019-01-01  43.672847 -109.380966  ...  192.41106 -0.211703  -0.773576\n576284  2019-01-01  43.672847 -109.380966  ...  192.41106 -0.211703  -0.773576\n576285  2019-01-01  43.672847 -109.380966  ...  192.41106 -0.211703  -0.773576\n576286  2019-01-01  43.672847 -109.380966  ...  192.41106 -0.211703  -0.773576\n...            ...        ...         ...  ...        ...       ...        ...\n576373  2022-12-31  43.672847 -109.380966  ...  192.41106 -0.211703  -0.773576\n576374  2022-12-31  43.672847 -109.380966  ...  192.41106 -0.211703  -0.773576\n576375  2022-12-31  43.672847 -109.380966  ...  192.41106 -0.211703  -0.773576\n576376  2022-12-31  43.672847 -109.380966  ...  192.41106 -0.211703  -0.773576\n576377  2022-12-31  43.672847 -109.380966  ...  192.41106 -0.211703  -0.773576\n[8766 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n733008  2019-01-01  43.822102 -114.267801  ...  152.63412  0.430867  -0.726195\n733009  2019-01-01  43.822102 -114.267801  ...  152.63412  0.430867  -0.726195\n733010  2019-01-01  43.822102 -114.267801  ...  152.63412  0.430867  -0.726195\n733893  2019-01-02  43.822102 -114.267801  ...  152.63412  0.430867  -0.726195\n733894  2019-01-02  43.822102 -114.267801  ...  152.63412  0.430867  -0.726195\n...            ...        ...         ...  ...        ...       ...        ...\n734185  2022-12-30  43.822102 -114.267801  ...  152.63412  0.430867  -0.726195\n734186  2022-12-30  43.822102 -114.267801  ...  152.63412  0.430867  -0.726195\n735306  2022-12-31  43.822102 -114.267801  ...  152.63412  0.430867  -0.726195\n735307  2022-12-31  43.822102 -114.267801  ...  152.63412  0.430867  -0.726195\n735308  2022-12-31  43.822102 -114.267801  ...  152.63412  0.430867  -0.726195\n[4383 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n625659  2019-01-01  43.899828 -122.029245  ...  10.073002  0.173151   0.777631\n625660  2019-01-01  43.899828 -122.029245  ...  10.073002  0.173151   0.777631\n625661  2019-01-01  43.899828 -122.029245  ...  10.073002  0.173151   0.777631\n625743  2019-01-02  43.899828 -122.029245  ...  10.073002  0.173151   0.777631\n625744  2019-01-02  43.899828 -122.029245  ...  10.073002  0.173151   0.777631\n...            ...        ...         ...  ...        ...       ...        ...\n626746  2022-12-30  43.899828 -122.029245  ...  10.073002  0.173151   0.777631\n626747  2022-12-30  43.899828 -122.029245  ...  10.073002  0.173151   0.777631\n624204  2022-12-31  43.899828 -122.029245  ...  10.073002  0.173151   0.777631\n624205  2022-12-31  43.899828 -122.029245  ...  10.073002  0.173151   0.777631\n624206  2022-12-31  43.899828 -122.029245  ...  10.073002  0.173151   0.777631\n[4383 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n503957  2019-01-01  43.938651 -110.440978  ...  178.96121  0.018127  -0.785316\n503958  2019-01-01  43.938651 -110.440978  ...  178.96121  0.018127  -0.785316\n503959  2019-01-01  43.938651 -110.440978  ...  178.96121  0.018127  -0.785316\n503960  2019-01-01  43.938651 -110.440978  ...  178.96121  0.018127  -0.785316\n500201  2019-01-02  43.938651 -110.440978  ...  178.96121  0.018127  -0.785316\n...            ...        ...         ...  ...        ...       ...        ...\n501616  2022-12-30  43.938651 -110.440978  ...  178.96121  0.018127  -0.785316\n503057  2022-12-31  43.938651 -110.440978  ...  178.96121  0.018127  -0.785316\n503058  2022-12-31  43.938651 -110.440978  ...  178.96121  0.018127  -0.785316\n503059  2022-12-31  43.938651 -110.440978  ...  178.96121  0.018127  -0.785316\n503060  2022-12-31  43.938651 -110.440978  ...  178.96121  0.018127  -0.785316\n[5844 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n152559  2019-01-01  43.951588 -115.273914  ...  23.574753  0.380459   0.741878\n152560  2019-01-01  43.951588 -115.273914  ...  23.574753  0.380459   0.741878\n152561  2019-01-01  43.951588 -115.273914  ...  23.574753  0.380459   0.741878\n152562  2019-01-01  43.951588 -115.273914  ...  23.574753  0.380459   0.741878\n152563  2019-01-01  43.951588 -115.273914  ...  23.574753  0.380459   0.741878\n...            ...        ...         ...  ...        ...       ...        ...\n150944  2022-12-31  43.951588 -115.273914  ...  23.574753  0.380459   0.741878\n150945  2022-12-31  43.951588 -115.273914  ...  23.574753  0.380459   0.741878\n150946  2022-12-31  43.951588 -115.273914  ...  23.574753  0.380459   0.741878\n150947  2022-12-31  43.951588 -115.273914  ...  23.574753  0.380459   0.741878\n150948  2022-12-31  43.951588 -115.273914  ...  23.574753  0.380459   0.741878\n[10227 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...    aspect  eastness  northness\n476619  2019-01-01  44.164622 -107.126194  ...  154.1239  0.411509  -0.732671\n476620  2019-01-01  44.164622 -107.126194  ...  154.1239  0.411509  -0.732671\n476621  2019-01-01  44.164622 -107.126194  ...  154.1239  0.411509  -0.732671\n477471  2019-01-02  44.164622 -107.126194  ...  154.1239  0.411509  -0.732671\n477472  2019-01-02  44.164622 -107.126194  ...  154.1239  0.411509  -0.732671\n...            ...        ...         ...  ...       ...       ...        ...\n477790  2022-12-30  44.164622 -107.126194  ...  154.1239  0.411509  -0.732671\n477791  2022-12-30  44.164622 -107.126194  ...  154.1239  0.411509  -0.732671\n476682  2022-12-31  44.164622 -107.126194  ...  154.1239  0.411509  -0.732671\n476683  2022-12-31  44.164622 -107.126194  ...  154.1239  0.411509  -0.732671\n476684  2022-12-31  44.164622 -107.126194  ...  154.1239  0.411509  -0.732671\n[4383 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n638335  2019-01-01  44.248334 -118.516833  ...  140.25372   0.56888  -0.655477\n638357  2019-01-02  44.248334 -118.516833  ...  140.25372   0.56888  -0.655477\n638187  2019-01-03  44.248334 -118.516833  ...  140.25372   0.56888  -0.655477\n638241  2019-01-04  44.248334 -118.516833  ...  140.25372   0.56888  -0.655477\n638262  2019-01-05  44.248334 -118.516833  ...  140.25372   0.56888  -0.655477\n...            ...        ...         ...  ...        ...       ...        ...\n638124  2022-12-27  44.248334 -118.516833  ...  140.25372   0.56888  -0.655477\n637370  2022-12-28  44.248334 -118.516833  ...  140.25372   0.56888  -0.655477\n637607  2022-12-29  44.248334 -118.516833  ...  140.25372   0.56888  -0.655477\n638450  2022-12-30  44.248334 -118.516833  ...  140.25372   0.56888  -0.655477\n638117  2022-12-31  44.248334 -118.516833  ...  140.25372   0.56888  -0.655477\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n746935  2019-01-01  44.261203 -119.019888  ...  270.84467 -0.785344   0.014741\n746963  2019-01-02  44.261203 -119.019888  ...  270.84467 -0.785344   0.014741\n747273  2019-01-03  44.261203 -119.019888  ...  270.84467 -0.785344   0.014741\n747075  2019-01-04  44.261203 -119.019888  ...  270.84467 -0.785344   0.014741\n747592  2019-01-05  44.261203 -119.019888  ...  270.84467 -0.785344   0.014741\n...            ...        ...         ...  ...        ...       ...        ...\n747200  2022-12-27  44.261203 -119.019888  ...  270.84467 -0.785344   0.014741\n746724  2022-12-28  44.261203 -119.019888  ...  270.84467 -0.785344   0.014741\n747205  2022-12-29  44.261203 -119.019888  ...  270.84467 -0.785344   0.014741\n747060  2022-12-30  44.261203 -119.019888  ...  270.84467 -0.785344   0.014741\n746959  2022-12-31  44.261203 -119.019888  ...  270.84467 -0.785344   0.014741\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...    aspect  eastness  northness\n953328  2019-01-01  44.376891 -116.333927  ...  297.5891  -0.72519   0.433717\n953329  2019-01-01  44.376891 -116.333927  ...  297.5891  -0.72519   0.433717\n952854  2019-01-02  44.376891 -116.333927  ...  297.5891  -0.72519   0.433717\n952855  2019-01-02  44.376891 -116.333927  ...  297.5891  -0.72519   0.433717\n953520  2019-01-03  44.376891 -116.333927  ...  297.5891  -0.72519   0.433717\n...            ...        ...         ...  ...       ...       ...        ...\n953397  2022-12-29  44.376891 -116.333927  ...  297.5891  -0.72519   0.433717\n953088  2022-12-30  44.376891 -116.333927  ...  297.5891  -0.72519   0.433717\n953089  2022-12-30  44.376891 -116.333927  ...  297.5891  -0.72519   0.433717\n952840  2022-12-31  44.376891 -116.333927  ...  297.5891  -0.72519   0.433717\n952841  2022-12-31  44.376891 -116.333927  ...  297.5891  -0.72519   0.433717\n[2922 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n471117  2019-01-01  44.415402 -113.396435  ...  131.19196  0.645104  -0.582386\n471118  2019-01-01  44.415402 -113.396435  ...  131.19196  0.645104  -0.582386\n471119  2019-01-01  44.415402 -113.396435  ...  131.19196  0.645104  -0.582386\n470463  2019-01-02  44.415402 -113.396435  ...  131.19196  0.645104  -0.582386\n470464  2019-01-02  44.415402 -113.396435  ...  131.19196  0.645104  -0.582386\n...            ...        ...         ...  ...        ...       ...        ...\n470782  2022-12-30  44.415402 -113.396435  ...  131.19196  0.645104  -0.582386\n470783  2022-12-30  44.415402 -113.396435  ...  131.19196  0.645104  -0.582386\n472623  2022-12-31  44.415402 -113.396435  ...  131.19196  0.645104  -0.582386\n472624  2022-12-31  44.415402 -113.396435  ...  131.19196  0.645104  -0.582386\n472625  2022-12-31  44.415402 -113.396435  ...  131.19196  0.645104  -0.582386\n[4383 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n474058  2019-01-01  44.447476 -119.927188  ...  10.772571  0.184779   0.776509\n474570  2019-01-02  44.447476 -119.927188  ...  10.772571  0.184779   0.776509\n474645  2019-01-03  44.447476 -119.927188  ...  10.772571  0.184779   0.776509\n473973  2019-01-04  44.447476 -119.927188  ...  10.772571  0.184779   0.776509\n474229  2019-01-05  44.447476 -119.927188  ...  10.772571  0.184779   0.776509\n...            ...        ...         ...  ...        ...       ...        ...\n473858  2022-12-27  44.447476 -119.927188  ...  10.772571  0.184779   0.776509\n473386  2022-12-28  44.447476 -119.927188  ...  10.772571  0.184779   0.776509\n473864  2022-12-29  44.447476 -119.927188  ...  10.772571  0.184779   0.776509\n474675  2022-12-30  44.447476 -119.927188  ...  10.772571  0.184779   0.776509\n473857  2022-12-31  44.447476 -119.927188  ...  10.772571  0.184779   0.776509\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat        lon  ...     aspect  eastness  northness\n431734  2019-01-01  44.473122 -112.98321  ...  307.25272 -0.672281   0.544331\n432236  2019-01-02  44.473122 -112.98321  ...  307.25272 -0.672281   0.544331\n431567  2019-01-03  44.473122 -112.98321  ...  307.25272 -0.672281   0.544331\n432347  2019-01-04  44.473122 -112.98321  ...  307.25272 -0.672281   0.544331\n431900  2019-01-05  44.473122 -112.98321  ...  307.25272 -0.672281   0.544331\n...            ...        ...        ...  ...        ...       ...        ...\n432235  2022-12-27  44.473122 -112.98321  ...  307.25272 -0.672281   0.544331\n432004  2022-12-28  44.473122 -112.98321  ...  307.25272 -0.672281   0.544331\n432239  2022-12-29  44.473122 -112.98321  ...  307.25272 -0.672281   0.544331\n432327  2022-12-30  44.473122 -112.98321  ...  307.25272 -0.672281   0.544331\n432232  2022-12-31  44.473122 -112.98321  ...  307.25272 -0.672281   0.544331\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n652251  2019-01-01  44.479532 -110.036736  ...  294.38983 -0.738726   0.391614\n652252  2019-01-01  44.479532 -110.036736  ...  294.38983 -0.738726   0.391614\n651349  2019-01-02  44.479532 -110.036736  ...  294.38983 -0.738726   0.391614\n651350  2019-01-02  44.479532 -110.036736  ...  294.38983 -0.738726   0.391614\n652969  2019-01-03  44.479532 -110.036736  ...  294.38983 -0.738726   0.391614\n...            ...        ...         ...  ...        ...       ...        ...\n651354  2022-12-29  44.479532 -110.036736  ...  294.38983 -0.738726   0.391614\n653043  2022-12-30  44.479532 -110.036736  ...  294.38983 -0.738726   0.391614\n653044  2022-12-30  44.479532 -110.036736  ...  294.38983 -0.738726   0.391614\n652835  2022-12-31  44.479532 -110.036736  ...  294.38983 -0.738726   0.391614\n652836  2022-12-31  44.479532 -110.036736  ...  294.38983 -0.738726   0.391614\n[2922 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...    aspect  eastness  northness\n134337  2019-01-01  44.581994 -107.198059  ...  335.6754 -0.390727   0.738983\n134338  2019-01-01  44.581994 -107.198059  ...  335.6754 -0.390727   0.738983\n134339  2019-01-01  44.581994 -107.198059  ...  335.6754 -0.390727   0.738983\n134340  2019-01-01  44.581994 -107.198059  ...  335.6754 -0.390727   0.738983\n134341  2019-01-01  44.581994 -107.198059  ...  335.6754 -0.390727   0.738983\n...            ...        ...         ...  ...       ...       ...        ...\n134470  2022-12-31  44.581994 -107.198059  ...  335.6754 -0.390727   0.738983\n134471  2022-12-31  44.581994 -107.198059  ...  335.6754 -0.390727   0.738983\n134472  2022-12-31  44.581994 -107.198059  ...  335.6754 -0.390727   0.738983\n134473  2022-12-31  44.581994 -107.198059  ...  335.6754 -0.390727   0.738983\n134474  2022-12-31  44.581994 -107.198059  ...  335.6754 -0.390727   0.738983\n[8766 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...    aspect  eastness  northness\n252846  2019-01-01  44.588392 -111.114715  ...  12.27301  0.209452    0.77384\n252847  2019-01-01  44.588392 -111.114715  ...  12.27301  0.209452    0.77384\n252848  2019-01-01  44.588392 -111.114715  ...  12.27301  0.209452    0.77384\n252849  2019-01-01  44.588392 -111.114715  ...  12.27301  0.209452    0.77384\n253846  2019-01-02  44.588392 -111.114715  ...  12.27301  0.209452    0.77384\n...            ...        ...         ...  ...       ...       ...        ...\n254169  2022-12-30  44.588392 -111.114715  ...  12.27301  0.209452    0.77384\n252962  2022-12-31  44.588392 -111.114715  ...  12.27301  0.209452    0.77384\n252963  2022-12-31  44.588392 -111.114715  ...  12.27301  0.209452    0.77384\n252964  2022-12-31  44.588392 -111.114715  ...  12.27301  0.209452    0.77384\n252965  2022-12-31  44.588392 -111.114715  ...  12.27301  0.209452    0.77384\n[5844 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n963568  2019-01-01  44.613976 -122.226874  ...  129.00653  0.660605  -0.561763\n963569  2019-01-01  44.613976 -122.226874  ...  129.00653  0.660605  -0.561763\n963570  2019-01-01  44.613976 -122.226874  ...  129.00653  0.660605  -0.561763\n963571  2019-01-01  44.613976 -122.226874  ...  129.00653  0.660605  -0.561763\n963572  2019-01-01  44.613976 -122.226874  ...  129.00653  0.660605  -0.561763\n...            ...        ...         ...  ...        ...       ...        ...\n961403  2022-12-31  44.613976 -122.226874  ...  129.00653  0.660605  -0.561763\n961404  2022-12-31  44.613976 -122.226874  ...  129.00653  0.660605  -0.561763\n961405  2022-12-31  44.613976 -122.226874  ...  129.00653  0.660605  -0.561763\n961406  2022-12-31  44.613976 -122.226874  ...  129.00653  0.660605  -0.561763\n961407  2022-12-31  44.613976 -122.226874  ...  129.00653  0.660605  -0.561763\n[14610 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n368036  2019-01-01  44.722585 -110.512843  ...  200.65782 -0.339155  -0.752194\n367336  2019-01-02  44.722585 -110.512843  ...  200.65782 -0.339155  -0.752194\n368133  2019-01-03  44.722585 -110.512843  ...  200.65782 -0.339155  -0.752194\n367215  2019-01-04  44.722585 -110.512843  ...  200.65782 -0.339155  -0.752194\n367464  2019-01-05  44.722585 -110.512843  ...  200.65782 -0.339155  -0.752194\n...            ...        ...         ...  ...        ...       ...        ...\n367559  2022-12-27  44.722585 -110.512843  ...  200.65782 -0.339155  -0.752194\n367825  2022-12-28  44.722585 -110.512843  ...  200.65782 -0.339155  -0.752194\n367337  2022-12-29  44.722585 -110.512843  ...  200.65782 -0.339155  -0.752194\n368164  2022-12-30  44.722585 -110.512843  ...  200.65782 -0.339155  -0.752194\n367553  2022-12-31  44.722585 -110.512843  ...  200.65782 -0.339155  -0.752194\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n649011  2019-01-01  44.786377 -111.707602  ...  276.69324 -0.781979    0.11603\n649012  2019-01-01  44.786377 -111.707602  ...  276.69324 -0.781979    0.11603\n649013  2019-01-01  44.786377 -111.707602  ...  276.69324 -0.781979    0.11603\n649767  2019-01-02  44.786377 -111.707602  ...  276.69324 -0.781979    0.11603\n649768  2019-01-02  44.786377 -111.707602  ...  276.69324 -0.781979    0.11603\n...            ...        ...         ...  ...        ...       ...        ...\n647977  2022-12-30  44.786377 -111.707602  ...  276.69324 -0.781979    0.11603\n647978  2022-12-30  44.786377 -111.707602  ...  276.69324 -0.781979    0.11603\n649749  2022-12-31  44.786377 -111.707602  ...  276.69324 -0.781979    0.11603\n649750  2022-12-31  44.786377 -111.707602  ...  276.69324 -0.781979    0.11603\n649751  2022-12-31  44.786377 -111.707602  ...  276.69324 -0.781979    0.11603\n[4383 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n226220  2019-01-01  44.799126 -107.844847  ...  133.16533  0.630175  -0.599979\n226221  2019-01-01  44.799126 -107.844847  ...  133.16533  0.630175  -0.599979\n227690  2019-01-02  44.799126 -107.844847  ...  133.16533  0.630175  -0.599979\n227691  2019-01-02  44.799126 -107.844847  ...  133.16533  0.630175  -0.599979\n227404  2019-01-03  44.799126 -107.844847  ...  133.16533  0.630175  -0.599979\n...            ...        ...         ...  ...        ...       ...        ...\n227289  2022-12-29  44.799126 -107.844847  ...  133.16533  0.630175  -0.599979\n227898  2022-12-30  44.799126 -107.844847  ...  133.16533  0.630175  -0.599979\n227899  2022-12-30  44.799126 -107.844847  ...  133.16533  0.630175  -0.599979\n227266  2022-12-31  44.799126 -107.844847  ...  133.16533  0.630175  -0.599979\n227267  2022-12-31  44.799126 -107.844847  ...  133.16533  0.630175  -0.599979\n[2922 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date      lat         lon  ...     aspect  eastness  northness\n361386  2019-01-01  44.8055 -109.659443  ...  26.828142  0.423948    0.72858\n361387  2019-01-01  44.8055 -109.659443  ...  26.828142  0.423948    0.72858\n361388  2019-01-01  44.8055 -109.659443  ...  26.828142  0.423948    0.72858\n361389  2019-01-01  44.8055 -109.659443  ...  26.828142  0.423948    0.72858\n361390  2019-01-01  44.8055 -109.659443  ...  26.828142  0.423948    0.72858\n...            ...      ...         ...  ...        ...       ...        ...\n360169  2022-12-31  44.8055 -109.659443  ...  26.828142  0.423948    0.72858\n360170  2022-12-31  44.8055 -109.659443  ...  26.828142  0.423948    0.72858\n360171  2022-12-31  44.8055 -109.659443  ...  26.828142  0.423948    0.72858\n360172  2022-12-31  44.8055 -109.659443  ...  26.828142  0.423948    0.72858\n360173  2022-12-31  44.8055 -109.659443  ...  26.828142  0.423948    0.72858\n[8766 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n486441  2019-01-01  44.830989 -118.184455  ...  169.14963  0.186067  -0.776379\n486442  2019-01-01  44.830989 -118.184455  ...  169.14963  0.186067  -0.776379\n486443  2019-01-01  44.830989 -118.184455  ...  169.14963  0.186067  -0.776379\n486444  2019-01-01  44.830989 -118.184455  ...  169.14963  0.186067  -0.776379\n483629  2019-01-02  44.830989 -118.184455  ...  169.14963  0.186067  -0.776379\n...            ...        ...         ...  ...        ...       ...        ...\n485984  2022-12-30  44.830989 -118.184455  ...  169.14963  0.186067  -0.776379\n482585  2022-12-31  44.830989 -118.184455  ...  169.14963  0.186067  -0.776379\n482586  2022-12-31  44.830989 -118.184455  ...  169.14963  0.186067  -0.776379\n482587  2022-12-31  44.830989 -118.184455  ...  169.14963  0.186067  -0.776379\n482588  2022-12-31  44.830989 -118.184455  ...  169.14963  0.186067  -0.776379\n[5844 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n777940  2019-01-01  44.843729 -114.267801  ...  165.41763  0.246645  -0.769029\n777941  2019-01-01  44.843729 -114.267801  ...  165.41763  0.246645  -0.769029\n778494  2019-01-02  44.843729 -114.267801  ...  165.41763  0.246645  -0.769029\n778495  2019-01-02  44.843729 -114.267801  ...  165.41763  0.246645  -0.769029\n778118  2019-01-03  44.843729 -114.267801  ...  165.41763  0.246645  -0.769029\n...            ...        ...         ...  ...        ...       ...        ...\n779433  2022-12-29  44.843729 -114.267801  ...  165.41763  0.246645  -0.769029\n778192  2022-12-30  44.843729 -114.267801  ...  165.41763  0.246645  -0.769029\n778193  2022-12-30  44.843729 -114.267801  ...  165.41763  0.246645  -0.769029\n778480  2022-12-31  44.843729 -114.267801  ...  165.41763  0.246645  -0.769029\n778481  2022-12-31  44.843729 -114.267801  ...  165.41763  0.246645  -0.769029\n[2922 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date       lat         lon  ...     aspect  eastness  northness\n404431  2019-01-01  44.97733 -111.950147  ...  76.661446  0.771726   0.226738\n404432  2019-01-01  44.97733 -111.950147  ...  76.661446  0.771726   0.226738\n404501  2019-01-02  44.97733 -111.950147  ...  76.661446  0.771726   0.226738\n404502  2019-01-02  44.97733 -111.950147  ...  76.661446  0.771726   0.226738\n403175  2019-01-03  44.97733 -111.950147  ...  76.661446  0.771726   0.226738\n...            ...       ...         ...  ...        ...       ...        ...\n403516  2022-12-29  44.97733 -111.950147  ...  76.661446  0.771726   0.226738\n403743  2022-12-30  44.97733 -111.950147  ...  76.661446  0.771726   0.226738\n403744  2022-12-30  44.97733 -111.950147  ...  76.661446  0.771726   0.226738\n403047  2022-12-31  44.97733 -111.950147  ...  76.661446  0.771726   0.226738\n403048  2022-12-31  44.97733 -111.950147  ...  76.661446  0.771726   0.226738\n[2922 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat        lon  ...     aspect  eastness  northness\n698315  2019-01-01  45.040841 -121.93043  ...  10.224964  0.175683   0.777394\n698316  2019-01-01  45.040841 -121.93043  ...  10.224964  0.175683   0.777394\n699403  2019-01-02  45.040841 -121.93043  ...  10.224964  0.175683   0.777394\n699404  2019-01-02  45.040841 -121.93043  ...  10.224964  0.175683   0.777394\n698045  2019-01-03  45.040841 -121.93043  ...  10.224964  0.175683   0.777394\n...            ...        ...        ...  ...        ...       ...        ...\n699412  2022-12-29  45.040841 -121.93043  ...  10.224964  0.175683   0.777394\n699055  2022-12-30  45.040841 -121.93043  ...  10.224964  0.175683   0.777394\n699056  2022-12-30  45.040841 -121.93043  ...  10.224964  0.175683   0.777394\n697895  2022-12-31  45.040841 -121.93043  ...  10.224964  0.175683   0.777394\n697896  2022-12-31  45.040841 -121.93043  ...  10.224964  0.175683   0.777394\n[2922 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n356348  2019-01-01  45.104281 -119.495996  ...  92.876854  0.784768  -0.050147\n355654  2019-01-02  45.104281 -119.495996  ...  92.876854  0.784768  -0.050147\n356450  2019-01-03  45.104281 -119.495996  ...  92.876854  0.784768  -0.050147\n355532  2019-01-04  45.104281 -119.495996  ...  92.876854  0.784768  -0.050147\n355817  2019-01-05  45.104281 -119.495996  ...  92.876854  0.784768  -0.050147\n...            ...        ...         ...  ...        ...       ...        ...\n355914  2022-12-27  45.104281 -119.495996  ...  92.876854  0.784768  -0.050147\n356168  2022-12-28  45.104281 -119.495996  ...  92.876854  0.784768  -0.050147\n355919  2022-12-29  45.104281 -119.495996  ...  92.876854  0.784768  -0.050147\n356010  2022-12-30  45.104281 -119.495996  ...  92.876854  0.784768  -0.050147\n356377  2022-12-31  45.104281 -119.495996  ...  92.876854  0.784768  -0.050147\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat       lon  ...     aspect  eastness  northness\n562518  2019-01-01  45.186647 -115.9746  ...  157.04753  0.371828  -0.744204\n562519  2019-01-01  45.186647 -115.9746  ...  157.04753  0.371828  -0.744204\n562520  2019-01-01  45.186647 -115.9746  ...  157.04753  0.371828  -0.744204\n562521  2019-01-01  45.186647 -115.9746  ...  157.04753  0.371828  -0.744204\n562522  2019-01-01  45.186647 -115.9746  ...  157.04753  0.371828  -0.744204\n...            ...        ...       ...  ...        ...       ...        ...\n566328  2022-12-31  45.186647 -115.9746  ...  157.04753  0.371828  -0.744204\n566329  2022-12-31  45.186647 -115.9746  ...  157.04753  0.371828  -0.744204\n566330  2022-12-31  45.186647 -115.9746  ...  157.04753  0.371828  -0.744204\n566331  2022-12-31  45.186647 -115.9746  ...  157.04753  0.371828  -0.744204\n566332  2022-12-31  45.186647 -115.9746  ...  157.04753  0.371828  -0.744204\n[7305 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n663209  2019-01-01  45.218295 -110.234365  ...  33.307423  0.502176   0.696155\n663210  2019-01-01  45.218295 -110.234365  ...  33.307423  0.502176   0.696155\n663211  2019-01-01  45.218295 -110.234365  ...  33.307423  0.502176   0.696155\n663212  2019-01-01  45.218295 -110.234365  ...  33.307423  0.502176   0.696155\n663213  2019-01-01  45.218295 -110.234365  ...  33.307423  0.502176   0.696155\n...            ...        ...         ...  ...        ...       ...        ...\n658489  2022-12-31  45.218295 -110.234365  ...  33.307423  0.502176   0.696155\n658490  2022-12-31  45.218295 -110.234365  ...  33.307423  0.502176   0.696155\n658491  2022-12-31  45.218295 -110.234365  ...  33.307423  0.502176   0.696155\n658492  2022-12-31  45.218295 -110.234365  ...  33.307423  0.502176   0.696155\n658493  2022-12-31  45.218295 -110.234365  ...  33.307423  0.502176   0.696155\n[7305 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...    aspect  eastness  northness\n196761  2019-01-01  45.262573 -117.169359  ...  4.690525  0.081592   0.783721\n196762  2019-01-01  45.262573 -117.169359  ...  4.690525  0.081592   0.783721\n196763  2019-01-01  45.262573 -117.169359  ...  4.690525  0.081592   0.783721\n196764  2019-01-01  45.262573 -117.169359  ...  4.690525  0.081592   0.783721\n196765  2019-01-01  45.262573 -117.169359  ...  4.690525  0.081592   0.783721\n...            ...        ...         ...  ...       ...       ...        ...\n196876  2022-12-31  45.262573 -117.169359  ...  4.690525  0.081592   0.783721\n196877  2022-12-31  45.262573 -117.169359  ...  4.690525  0.081592   0.783721\n196878  2022-12-31  45.262573 -117.169359  ...  4.690525  0.081592   0.783721\n196879  2022-12-31  45.262573 -117.169359  ...  4.690525  0.081592   0.783721\n196880  2022-12-31  45.262573 -117.169359  ...  4.690525  0.081592   0.783721\n[7305 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n585810  2019-01-01  45.363648 -118.462934  ...  183.36415 -0.058615  -0.784536\n585811  2019-01-01  45.363648 -118.462934  ...  183.36415 -0.058615  -0.784536\n585812  2019-01-01  45.363648 -118.462934  ...  183.36415 -0.058615  -0.784536\n585813  2019-01-01  45.363648 -118.462934  ...  183.36415 -0.058615  -0.784536\n586846  2019-01-02  45.363648 -118.462934  ...  183.36415 -0.058615  -0.784536\n...            ...        ...         ...  ...        ...       ...        ...\n584289  2022-12-30  45.363648 -118.462934  ...  183.36415 -0.058615  -0.784536\n585898  2022-12-31  45.363648 -118.462934  ...  183.36415 -0.058615  -0.784536\n585899  2022-12-31  45.363648 -118.462934  ...  183.36415 -0.058615  -0.784536\n585900  2022-12-31  45.363648 -118.462934  ...  183.36415 -0.058615  -0.784536\n585901  2022-12-31  45.363648 -118.462934  ...  183.36415 -0.058615  -0.784536\n[5844 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat        lon  ...     aspect  eastness  northness\n158504  2019-01-01  45.407812 -112.95626  ...  226.76662 -0.629644  -0.600568\n158778  2019-01-02  45.407812 -112.95626  ...  226.76662 -0.629644  -0.600568\n158358  2019-01-03  45.407812 -112.95626  ...  226.76662 -0.629644  -0.600568\n158914  2019-01-04  45.407812 -112.95626  ...  226.76662 -0.629644  -0.600568\n158938  2019-01-05  45.407812 -112.95626  ...  226.76662 -0.629644  -0.600568\n...            ...        ...        ...  ...        ...       ...        ...\n158280  2022-12-27  45.407812 -112.95626  ...  226.76662 -0.629644  -0.600568\n158028  2022-12-28  45.407812 -112.95626  ...  226.76662 -0.629644  -0.600568\n158286  2022-12-29  45.407812 -112.95626  ...  226.76662 -0.629644  -0.600568\n158897  2022-12-30  45.407812 -112.95626  ...  226.76662 -0.629644  -0.600568\n158275  2022-12-31  45.407812 -112.95626  ...  226.76662 -0.629644  -0.600568\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n741718  2019-01-01  45.426729 -121.858565  ...  182.80304 -0.048864    -0.7848\n741719  2019-01-01  45.426729 -121.858565  ...  182.80304 -0.048864    -0.7848\n741720  2019-01-01  45.426729 -121.858565  ...  182.80304 -0.048864    -0.7848\n741721  2019-01-01  45.426729 -121.858565  ...  182.80304 -0.048864    -0.7848\n743730  2019-01-02  45.426729 -121.858565  ...  182.80304 -0.048864    -0.7848\n...            ...        ...         ...  ...        ...       ...        ...\n741257  2022-12-30  45.426729 -121.858565  ...  182.80304 -0.048864    -0.7848\n741810  2022-12-31  45.426729 -121.858565  ...  182.80304 -0.048864    -0.7848\n741811  2022-12-31  45.426729 -121.858565  ...  182.80304 -0.048864    -0.7848\n741812  2022-12-31  45.426729 -121.858565  ...  182.80304 -0.048864    -0.7848\n741813  2022-12-31  45.426729 -121.858565  ...  182.80304 -0.048864    -0.7848\n[5844 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n945628  2019-01-01  45.502333 -110.962001  ...  12.056257  0.205912   0.774247\n945629  2019-01-01  45.502333 -110.962001  ...  12.056257  0.205912   0.774247\n945630  2019-01-01  45.502333 -110.962001  ...  12.056257  0.205912   0.774247\n945631  2019-01-01  45.502333 -110.962001  ...  12.056257  0.205912   0.774247\n940920  2019-01-02  45.502333 -110.962001  ...  12.056257  0.205912   0.774247\n...            ...        ...         ...  ...        ...       ...        ...\n941339  2022-12-30  45.502333 -110.962001  ...  12.056257  0.205912   0.774247\n944772  2022-12-31  45.502333 -110.962001  ...  12.056257  0.205912   0.774247\n944773  2022-12-31  45.502333 -110.962001  ...  12.056257  0.205912   0.774247\n944774  2022-12-31  45.502333 -110.962001  ...  12.056257  0.205912   0.774247\n944775  2022-12-31  45.502333 -110.962001  ...  12.056257  0.205912   0.774247\n[5844 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...    aspect  eastness  northness\n406755  2019-01-01  45.596696 -111.959131  ...  286.6087 -0.764097    0.27841\n406786  2019-01-02  45.596696 -111.959131  ...  286.6087 -0.764097    0.27841\n407079  2019-01-03  45.596696 -111.959131  ...  286.6087 -0.764097    0.27841\n406885  2019-01-04  45.596696 -111.959131  ...  286.6087 -0.764097    0.27841\n406681  2019-01-05  45.596696 -111.959131  ...  286.6087 -0.764097    0.27841\n...            ...        ...         ...  ...       ...       ...        ...\n406784  2022-12-27  45.596696 -111.959131  ...  286.6087 -0.764097    0.27841\n407275  2022-12-28  45.596696 -111.959131  ...  286.6087 -0.764097    0.27841\n407008  2022-12-29  45.596696 -111.959131  ...  286.6087 -0.764097    0.27841\n406869  2022-12-30  45.596696 -111.959131  ...  286.6087 -0.764097    0.27841\n407504  2022-12-31  45.596696 -111.959131  ...  286.6087 -0.764097    0.27841\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n746199  2019-01-01  45.621832 -121.705851  ...  309.75418 -0.655422   0.568955\n745478  2019-01-02  45.621832 -121.705851  ...  309.75418 -0.655422   0.568955\n745559  2019-01-03  45.621832 -121.705851  ...  309.75418 -0.655422   0.568955\n746111  2019-01-04  45.621832 -121.705851  ...  309.75418 -0.655422   0.568955\n745632  2019-01-05  45.621832 -121.705851  ...  309.75418 -0.655422   0.568955\n...            ...        ...         ...  ...        ...       ...        ...\n745732  2022-12-27  45.621832 -121.705851  ...  309.75418 -0.655422   0.568955\n746473  2022-12-28  45.621832 -121.705851  ...  309.75418 -0.655422   0.568955\n745737  2022-12-29  45.621832 -121.705851  ...  309.75418 -0.655422   0.568955\n746320  2022-12-30  45.621832 -121.705851  ...  309.75418 -0.655422   0.568955\n745727  2022-12-31  45.621832 -121.705851  ...  309.75418 -0.655422   0.568955\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat        lon  ...     aspect  eastness  northness\n146859  2019-01-01  45.672072 -113.95339  ...  184.08612 -0.071136  -0.784126\n146860  2019-01-01  45.672072 -113.95339  ...  184.08612 -0.071136  -0.784126\n146861  2019-01-01  45.672072 -113.95339  ...  184.08612 -0.071136  -0.784126\n144678  2019-01-02  45.672072 -113.95339  ...  184.08612 -0.071136  -0.784126\n144679  2019-01-02  45.672072 -113.95339  ...  184.08612 -0.071136  -0.784126\n...            ...        ...        ...  ...        ...       ...        ...\n144976  2022-12-30  45.672072 -113.95339  ...  184.08612 -0.071136  -0.784126\n144977  2022-12-30  45.672072 -113.95339  ...  184.08612 -0.071136  -0.784126\n144669  2022-12-31  45.672072 -113.95339  ...  184.08612 -0.071136  -0.784126\n144670  2022-12-31  45.672072 -113.95339  ...  184.08612 -0.071136  -0.784126\n144671  2022-12-31  45.672072 -113.95339  ...  184.08612 -0.071136  -0.784126\n[4383 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...    aspect  eastness  northness\n839051  2019-01-01  46.091058 -110.431995  ...  61.48454  0.720915   0.445401\n838843  2019-01-02  46.091058 -110.431995  ...  61.48454  0.720915   0.445401\n838908  2019-01-03  46.091058 -110.431995  ...  61.48454  0.720915   0.445401\n838959  2019-01-04  46.091058 -110.431995  ...  61.48454  0.720915   0.445401\n838980  2019-01-05  46.091058 -110.431995  ...  61.48454  0.720915   0.445401\n...            ...        ...         ...  ...       ...       ...        ...\n839080  2022-12-27  46.091058 -110.431995  ...  61.48454  0.720915   0.445401\n838632  2022-12-28  46.091058 -110.431995  ...  61.48454  0.720915   0.445401\n839086  2022-12-29  46.091058 -110.431995  ...  61.48454  0.720915   0.445401\n839190  2022-12-30  46.091058 -110.431995  ...  61.48454  0.720915   0.445401\n838839  2022-12-31  46.091058 -110.431995  ...  61.48454  0.720915   0.445401\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n834859  2019-01-01  46.140875 -114.501362  ...  190.34317 -0.177651  -0.777207\n834860  2019-01-01  46.140875 -114.501362  ...  190.34317 -0.177651  -0.777207\n834861  2019-01-01  46.140875 -114.501362  ...  190.34317 -0.177651  -0.777207\n834862  2019-01-01  46.140875 -114.501362  ...  190.34317 -0.177651  -0.777207\n834863  2019-01-01  46.140875 -114.501362  ...  190.34317 -0.177651  -0.777207\n...            ...        ...         ...  ...        ...       ...        ...\n836169  2022-12-31  46.140875 -114.501362  ...  190.34317 -0.177651  -0.777207\n836170  2022-12-31  46.140875 -114.501362  ...  190.34317 -0.177651  -0.777207\n836171  2022-12-31  46.140875 -114.501362  ...  190.34317 -0.177651  -0.777207\n836172  2022-12-31  46.140875 -114.501362  ...  190.34317 -0.177651  -0.777207\n836173  2022-12-31  46.140875 -114.501362  ...  190.34317 -0.177651  -0.777207\n[7305 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat        lon  ...    aspect  eastness  northness\n526929  2019-01-01  46.178208 -121.93043  ...  176.9613  0.052961  -0.784695\n526930  2019-01-01  46.178208 -121.93043  ...  176.9613  0.052961  -0.784695\n526931  2019-01-01  46.178208 -121.93043  ...  176.9613  0.052961  -0.784695\n526932  2019-01-01  46.178208 -121.93043  ...  176.9613  0.052961  -0.784695\n526933  2019-01-01  46.178208 -121.93043  ...  176.9613  0.052961  -0.784695\n...            ...        ...        ...  ...       ...       ...        ...\n524863  2022-12-31  46.178208 -121.93043  ...  176.9613  0.052961  -0.784695\n524864  2022-12-31  46.178208 -121.93043  ...  176.9613  0.052961  -0.784695\n524865  2022-12-31  46.178208 -121.93043  ...  176.9613  0.052961  -0.784695\n524866  2022-12-31  46.178208 -121.93043  ...  176.9613  0.052961  -0.784695\n524867  2022-12-31  46.178208 -121.93043  ...  176.9613  0.052961  -0.784695\n[13149 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date       lat         lon  ...    aspect  eastness  northness\n292128  2019-01-01  46.23416 -117.393939  ...  298.7287 -0.719908   0.448059\n292129  2019-01-01  46.23416 -117.393939  ...  298.7287 -0.719908   0.448059\n292130  2019-01-01  46.23416 -117.393939  ...  298.7287 -0.719908   0.448059\n292131  2019-01-01  46.23416 -117.393939  ...  298.7287 -0.719908   0.448059\n288316  2019-01-02  46.23416 -117.393939  ...  298.7287 -0.719908   0.448059\n...            ...       ...         ...  ...       ...       ...        ...\n288707  2022-12-30  46.23416 -117.393939  ...  298.7287 -0.719908   0.448059\n290280  2022-12-31  46.23416 -117.393939  ...  298.7287 -0.719908   0.448059\n290281  2022-12-31  46.23416 -117.393939  ...  298.7287 -0.719908   0.448059\n290282  2022-12-31  46.23416 -117.393939  ...  298.7287 -0.719908   0.448059\n290283  2022-12-31  46.23416 -117.393939  ...  298.7287 -0.719908   0.448059\n[5844 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n553567  2019-01-01  46.240373 -113.773728  ...  136.25618  0.604955  -0.625627\n553568  2019-01-01  46.240373 -113.773728  ...  136.25618  0.604955  -0.625627\n553569  2019-01-01  46.240373 -113.773728  ...  136.25618  0.604955  -0.625627\n553570  2019-01-01  46.240373 -113.773728  ...  136.25618  0.604955  -0.625627\n553571  2019-01-01  46.240373 -113.773728  ...  136.25618  0.604955  -0.625627\n...            ...        ...         ...  ...        ...       ...        ...\n549962  2022-12-31  46.240373 -113.773728  ...  136.25618  0.604955  -0.625627\n549963  2022-12-31  46.240373 -113.773728  ...  136.25618  0.604955  -0.625627\n549964  2022-12-31  46.240373 -113.773728  ...  136.25618  0.604955  -0.625627\n549965  2022-12-31  46.240373 -113.773728  ...  136.25618  0.604955  -0.625627\n549966  2022-12-31  46.240373 -113.773728  ...  136.25618  0.604955  -0.625627\n[11688 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n127077  2019-01-01  46.358294 -121.077031  ...  185.71892 -0.099321  -0.782903\n127078  2019-01-01  46.358294 -121.077031  ...  185.71892 -0.099321  -0.782903\n125193  2019-01-02  46.358294 -121.077031  ...  185.71892 -0.099321  -0.782903\n125194  2019-01-02  46.358294 -121.077031  ...  185.71892 -0.099321  -0.782903\n126781  2019-01-03  46.358294 -121.077031  ...  185.71892 -0.099321  -0.782903\n...            ...        ...         ...  ...        ...       ...        ...\n126642  2022-12-29  46.358294 -121.077031  ...  185.71892 -0.099321  -0.782903\n125393  2022-12-30  46.358294 -121.077031  ...  185.71892 -0.099321  -0.782903\n125394  2022-12-30  46.358294 -121.077031  ...  185.71892 -0.099321  -0.782903\n126141  2022-12-31  46.358294 -121.077031  ...  185.71892 -0.099321  -0.782903\n126142  2022-12-31  46.358294 -121.077031  ...  185.71892 -0.099321  -0.782903\n[2922 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...    aspect  eastness  northness\n903979  2019-01-01  46.358294 -112.264557  ...  182.0274 -0.035363  -0.785085\n903300  2019-01-02  46.358294 -112.264557  ...  182.0274 -0.035363  -0.785085\n903119  2019-01-03  46.358294 -112.264557  ...  182.0274 -0.035363  -0.785085\n902908  2019-01-04  46.358294 -112.264557  ...  182.0274 -0.035363  -0.785085\n902937  2019-01-05  46.358294 -112.264557  ...  182.0274 -0.035363  -0.785085\n...            ...        ...         ...  ...       ...       ...        ...\n904010  2022-12-27  46.358294 -112.264557  ...  182.0274 -0.035363  -0.785085\n903557  2022-12-28  46.358294 -112.264557  ...  182.0274 -0.035363  -0.785085\n903053  2022-12-29  46.358294 -112.264557  ...  182.0274 -0.035363  -0.785085\n904115  2022-12-30  46.358294 -112.264557  ...  182.0274 -0.035363  -0.785085\n903298  2022-12-31  46.358294 -112.264557  ...  182.0274 -0.035363  -0.785085\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n748663  2019-01-01  46.482148 -110.710472  ...  337.01862 -0.372231   0.744098\n749118  2019-01-02  46.482148 -110.710472  ...  337.01862 -0.372231   0.744098\n748756  2019-01-03  46.482148 -110.710472  ...  337.01862 -0.372231   0.744098\n749017  2019-01-04  46.482148 -110.710472  ...  337.01862 -0.372231   0.744098\n748578  2019-01-05  46.482148 -110.710472  ...  337.01862 -0.372231   0.744098\n...            ...        ...         ...  ...        ...       ...        ...\n748427  2022-12-27  46.482148 -110.710472  ...  337.01862 -0.372231   0.744098\n748189  2022-12-28  46.482148 -110.710472  ...  337.01862 -0.372231   0.744098\n749122  2022-12-29  46.482148 -110.710472  ...  337.01862 -0.372231   0.744098\n749225  2022-12-30  46.482148 -110.710472  ...  337.01862 -0.372231   0.744098\n748422  2022-12-31  46.482148 -110.710472  ...  337.01862 -0.372231   0.744098\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...      aspect  eastness  northness\n259426  2019-01-01  46.494518 -115.794937  ...  120.052216  0.713464  -0.464279\n259427  2019-01-01  46.494518 -115.794937  ...  120.052216  0.713464  -0.464279\n259428  2019-01-01  46.494518 -115.794937  ...  120.052216  0.713464  -0.464279\n259429  2019-01-01  46.494518 -115.794937  ...  120.052216  0.713464  -0.464279\n259558  2019-01-02  46.494518 -115.794937  ...  120.052216  0.713464  -0.464279\n...            ...        ...         ...  ...         ...       ...        ...\n258981  2022-12-30  46.494518 -115.794937  ...  120.052216  0.713464  -0.464279\n258570  2022-12-31  46.494518 -115.794937  ...  120.052216  0.713464  -0.464279\n258571  2022-12-31  46.494518 -115.794937  ...  120.052216  0.713464  -0.464279\n258572  2022-12-31  46.494518 -115.794937  ...  120.052216  0.713464  -0.464279\n258573  2022-12-31  46.494518 -115.794937  ...  120.052216  0.713464  -0.464279\n[5844 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n465996  2019-01-01  46.562502 -115.291881  ...  181.19319 -0.020821   -0.78529\n465997  2019-01-01  46.562502 -115.291881  ...  181.19319 -0.020821   -0.78529\n466072  2019-01-02  46.562502 -115.291881  ...  181.19319 -0.020821   -0.78529\n466073  2019-01-02  46.562502 -115.291881  ...  181.19319 -0.020821   -0.78529\n466212  2019-01-03  46.562502 -115.291881  ...  181.19319 -0.020821   -0.78529\n...            ...        ...         ...  ...        ...       ...        ...\n467061  2022-12-29  46.562502 -115.291881  ...  181.19319 -0.020821   -0.78529\n467238  2022-12-30  46.562502 -115.291881  ...  181.19319 -0.020821   -0.78529\n467239  2022-12-30  46.562502 -115.291881  ...  181.19319 -0.020821   -0.78529\n465550  2022-12-31  46.562502 -115.291881  ...  181.19319 -0.020821   -0.78529\n465551  2022-12-31  46.562502 -115.291881  ...  181.19319 -0.020821   -0.78529\n[2922 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...    aspect  eastness  northness\n436791  2019-01-01  46.624231 -121.382458  ...  283.2921 -0.771822   0.225988\n436792  2019-01-01  46.624231 -121.382458  ...  283.2921 -0.771822   0.225988\n436793  2019-01-01  46.624231 -121.382458  ...  283.2921 -0.771822   0.225988\n433995  2019-01-02  46.624231 -121.382458  ...  283.2921 -0.771822   0.225988\n433996  2019-01-02  46.624231 -121.382458  ...  283.2921 -0.771822   0.225988\n...            ...        ...         ...  ...       ...       ...        ...\n436429  2022-12-30  46.624231 -121.382458  ...  283.2921 -0.771822   0.225988\n436430  2022-12-30  46.624231 -121.382458  ...  283.2921 -0.771822   0.225988\n434724  2022-12-31  46.624231 -121.382458  ...  283.2921 -0.771822   0.225988\n434725  2022-12-31  46.624231 -121.382458  ...  283.2921 -0.771822   0.225988\n434726  2022-12-31  46.624231 -121.382458  ...  283.2921 -0.771822   0.225988\n[4383 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n430965  2019-01-01  46.784399 -121.750767  ...  171.88017  0.140316   -0.78036\n430966  2019-01-01  46.784399 -121.750767  ...  171.88017  0.140316   -0.78036\n429557  2019-01-02  46.784399 -121.750767  ...  171.88017  0.140316   -0.78036\n429558  2019-01-02  46.784399 -121.750767  ...  171.88017  0.140316   -0.78036\n429701  2019-01-03  46.784399 -121.750767  ...  171.88017  0.140316   -0.78036\n...            ...        ...         ...  ...        ...       ...        ...\n429090  2022-12-29  46.784399 -121.750767  ...  171.88017  0.140316   -0.78036\n429775  2022-12-30  46.784399 -121.750767  ...  171.88017  0.140316   -0.78036\n429776  2022-12-30  46.784399 -121.750767  ...  171.88017  0.140316   -0.78036\n429549  2022-12-31  46.784399 -121.750767  ...  171.88017  0.140316   -0.78036\n429550  2022-12-31  46.784399 -121.750767  ...  171.88017  0.140316   -0.78036\n[2922 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date       lat         lon  ...    aspect  eastness  northness\n653673  2019-01-01  46.79055 -109.515714  ...  1.367396  0.023859   0.785256\n653699  2019-01-02  46.79055 -109.515714  ...  1.367396  0.023859   0.785256\n654488  2019-01-03  46.79055 -109.515714  ...  1.367396  0.023859   0.785256\n654076  2019-01-04  46.79055 -109.515714  ...  1.367396  0.023859   0.785256\n654304  2019-01-05  46.79055 -109.515714  ...  1.367396  0.023859   0.785256\n...            ...       ...         ...  ...       ...       ...        ...\n654415  2022-12-27  46.79055 -109.515714  ...  1.367396  0.023859   0.785256\n653448  2022-12-28  46.79055 -109.515714  ...  1.367396  0.023859   0.785256\n653701  2022-12-29  46.79055 -109.515714  ...  1.367396  0.023859   0.785256\n653804  2022-12-30  46.79055 -109.515714  ...  1.367396  0.023859   0.785256\n653696  2022-12-31  46.79055 -109.515714  ...  1.367396  0.023859   0.785256\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n233260  2019-01-01  46.839731 -112.507103  ...  204.46062 -0.392575  -0.738447\n233261  2019-01-01  46.839731 -112.507103  ...  204.46062 -0.392575  -0.738447\n233262  2019-01-01  46.839731 -112.507103  ...  204.46062 -0.392575  -0.738447\n233263  2019-01-01  46.839731 -112.507103  ...  204.46062 -0.392575  -0.738447\n232332  2019-01-02  46.839731 -112.507103  ...  204.46062 -0.392575  -0.738447\n...            ...        ...         ...  ...        ...       ...        ...\n230707  2022-12-30  46.839731 -112.507103  ...  204.46062 -0.392575  -0.738447\n230292  2022-12-31  46.839731 -112.507103  ...  204.46062 -0.392575  -0.738447\n230293  2022-12-31  46.839731 -112.507103  ...  204.46062 -0.392575  -0.738447\n230294  2022-12-31  46.839731 -112.507103  ...  204.46062 -0.392575  -0.738447\n230295  2022-12-31  46.839731 -112.507103  ...  204.46062 -0.392575  -0.738447\n[5844 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...    aspect  eastness  northness\n914945  2019-01-01  46.913419 -110.854202  ...  47.03507  0.631732   0.598236\n914946  2019-01-01  46.913419 -110.854202  ...  47.03507  0.631732   0.598236\n914947  2019-01-01  46.913419 -110.854202  ...  47.03507  0.631732   0.598236\n914948  2019-01-01  46.913419 -110.854202  ...  47.03507  0.631732   0.598236\n914949  2019-01-01  46.913419 -110.854202  ...  47.03507  0.631732   0.598236\n...            ...        ...         ...  ...       ...       ...        ...\n915050  2022-12-31  46.913419 -110.854202  ...  47.03507  0.631732   0.598236\n915051  2022-12-31  46.913419 -110.854202  ...  47.03507  0.631732   0.598236\n915052  2022-12-31  46.913419 -110.854202  ...  47.03507  0.631732   0.598236\n915053  2022-12-31  46.913419 -110.854202  ...  47.03507  0.631732   0.598236\n915054  2022-12-31  46.913419 -110.854202  ...  47.03507  0.631732   0.598236\n[7305 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n851022  2019-01-01  47.066609 -121.589071  ...  343.43826 -0.277684   0.764218\n851023  2019-01-01  47.066609 -121.589071  ...  343.43826 -0.277684   0.764218\n851024  2019-01-01  47.066609 -121.589071  ...  343.43826 -0.277684   0.764218\n849603  2019-01-02  47.066609 -121.589071  ...  343.43826 -0.277684   0.764218\n849604  2019-01-02  47.066609 -121.589071  ...  343.43826 -0.277684   0.764218\n...            ...        ...         ...  ...        ...       ...        ...\n852139  2022-12-30  47.066609 -121.589071  ...  343.43826 -0.277684   0.764218\n852140  2022-12-30  47.066609 -121.589071  ...  343.43826 -0.277684   0.764218\n849585  2022-12-31  47.066609 -121.589071  ...  343.43826 -0.277684   0.764218\n849586  2022-12-31  47.066609 -121.589071  ...  343.43826 -0.277684   0.764218\n849587  2022-12-31  47.066609 -121.589071  ...  343.43826 -0.277684   0.764218\n[4383 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:               date        lat         lon  ...     aspect  eastness  northness\n39736  2019-01-01  47.176636 -114.330683  ...  306.37845 -0.677853   0.535342\n39737  2019-01-01  47.176636 -114.330683  ...  306.37845 -0.677853   0.535342\n39738  2019-01-01  47.176636 -114.330683  ...  306.37845 -0.677853   0.535342\n39739  2019-01-01  47.176636 -114.330683  ...  306.37845 -0.677853   0.535342\n39740  2019-01-01  47.176636 -114.330683  ...  306.37845 -0.677853   0.535342\n...           ...        ...         ...  ...        ...       ...        ...\n41051  2022-12-31  47.176636 -114.330683  ...  306.37845 -0.677853   0.535342\n41052  2022-12-31  47.176636 -114.330683  ...  306.37845 -0.677853   0.535342\n41053  2022-12-31  47.176636 -114.330683  ...  306.37845 -0.677853   0.535342\n41054  2022-12-31  47.176636 -114.330683  ...  306.37845 -0.677853   0.535342\n41055  2022-12-31  47.176636 -114.330683  ...  306.37845 -0.677853   0.535342\n[7305 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n555932  2019-01-01  47.201054 -121.777716  ...  347.16547 -0.218587   0.772749\n556429  2019-01-02  47.201054 -121.777716  ...  347.16547 -0.218587   0.772749\n556244  2019-01-03  47.201054 -121.777716  ...  347.16547 -0.218587   0.772749\n555826  2019-01-04  47.201054 -121.777716  ...  347.16547 -0.218587   0.772749\n556334  2019-01-05  47.201054 -121.777716  ...  347.16547 -0.218587   0.772749\n...            ...        ...         ...  ...        ...       ...        ...\n556427  2022-12-27  47.201054 -121.777716  ...  347.16547 -0.218587   0.772749\n555462  2022-12-28  47.201054 -121.777716  ...  347.16547 -0.218587   0.772749\n555705  2022-12-29  47.201054 -121.777716  ...  347.16547 -0.218587   0.772749\n556281  2022-12-30  47.201054 -121.777716  ...  347.16547 -0.218587   0.772749\n556425  2022-12-31  47.201054 -121.777716  ...  347.16547 -0.218587   0.772749\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n935960  2019-01-01  47.274245 -121.337542  ...  328.17673 -0.485249   0.704307\n935961  2019-01-01  47.274245 -121.337542  ...  328.17673 -0.485249   0.704307\n935962  2019-01-01  47.274245 -121.337542  ...  328.17673 -0.485249   0.704307\n935963  2019-01-01  47.274245 -121.337542  ...  328.17673 -0.485249   0.704307\n936060  2019-01-02  47.274245 -121.337542  ...  328.17673 -0.485249   0.704307\n...            ...        ...         ...  ...        ...       ...        ...\n936479  2022-12-30  47.274245 -121.337542  ...  328.17673 -0.485249   0.704307\n936024  2022-12-31  47.274245 -121.337542  ...  328.17673 -0.485249   0.704307\n936025  2022-12-31  47.274245 -121.337542  ...  328.17673 -0.485249   0.704307\n936026  2022-12-31  47.274245 -121.337542  ...  328.17673 -0.485249   0.704307\n936027  2022-12-31  47.274245 -121.337542  ...  328.17673 -0.485249   0.704307\n[5844 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n107727  2019-01-01  47.347334 -120.681772  ...  249.49551 -0.752696  -0.336925\n107728  2019-01-01  47.347334 -120.681772  ...  249.49551 -0.752696  -0.336925\n107729  2019-01-01  47.347334 -120.681772  ...  249.49551 -0.752696  -0.336925\n107814  2019-01-02  47.347334 -120.681772  ...  249.49551 -0.752696  -0.336925\n107815  2019-01-02  47.347334 -120.681772  ...  249.49551 -0.752696  -0.336925\n...            ...        ...         ...  ...        ...       ...        ...\n108118  2022-12-30  47.347334 -120.681772  ...  249.49551 -0.752696  -0.336925\n108119  2022-12-30  47.347334 -120.681772  ...  249.49551 -0.752696  -0.336925\n108588  2022-12-31  47.347334 -120.681772  ...  249.49551 -0.752696  -0.336925\n108589  2022-12-31  47.347334 -120.681772  ...  249.49551 -0.752696  -0.336925\n108590  2022-12-31  47.347334 -120.681772  ...  249.49551 -0.752696  -0.336925\n[4383 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...    aspect  eastness  northness\n763649  2019-01-01  47.359505 -121.571105  ...  9.711144  0.167108   0.778182\n763650  2019-01-01  47.359505 -121.571105  ...  9.711144  0.167108   0.778182\n763651  2019-01-01  47.359505 -121.571105  ...  9.711144  0.167108   0.778182\n763652  2019-01-01  47.359505 -121.571105  ...  9.711144  0.167108   0.778182\n763653  2019-01-01  47.359505 -121.571105  ...  9.711144  0.167108   0.778182\n...            ...        ...         ...  ...       ...       ...        ...\n761404  2022-12-31  47.359505 -121.571105  ...  9.711144  0.167108   0.778182\n761405  2022-12-31  47.359505 -121.571105  ...  9.711144  0.167108   0.778182\n761406  2022-12-31  47.359505 -121.571105  ...  9.711144  0.167108   0.778182\n761407  2022-12-31  47.359505 -121.571105  ...  9.711144  0.167108   0.778182\n761408  2022-12-31  47.359505 -121.571105  ...  9.711144  0.167108   0.778182\n[7305 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n635448  2019-01-01  47.456778 -115.705106  ...  103.95559   0.77042  -0.236651\n635449  2019-01-01  47.456778 -115.705106  ...  103.95559   0.77042  -0.236651\n635450  2019-01-01  47.456778 -115.705106  ...  103.95559   0.77042  -0.236651\n635451  2019-01-01  47.456778 -115.705106  ...  103.95559   0.77042  -0.236651\n636540  2019-01-02  47.456778 -115.705106  ...  103.95559   0.77042  -0.236651\n...            ...        ...         ...  ...        ...       ...        ...\n636963  2022-12-30  47.456778 -115.705106  ...  103.95559   0.77042  -0.236651\n635524  2022-12-31  47.456778 -115.705106  ...  103.95559   0.77042  -0.236651\n635525  2022-12-31  47.456778 -115.705106  ...  103.95559   0.77042  -0.236651\n635526  2022-12-31  47.456778 -115.705106  ...  103.95559   0.77042  -0.236651\n635527  2022-12-31  47.456778 -115.705106  ...  103.95559   0.77042  -0.236651\n[5844 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...      aspect  eastness  northness\n571848  2019-01-01  47.711264 -123.448583  ...  101.272995  0.775658  -0.193049\n571871  2019-01-02  47.711264 -123.448583  ...  101.272995  0.775658  -0.193049\n572674  2019-01-03  47.711264 -123.448583  ...  101.272995  0.775658  -0.193049\n571752  2019-01-04  47.711264 -123.448583  ...  101.272995  0.775658  -0.193049\n572274  2019-01-05  47.711264 -123.448583  ...  101.272995  0.775658  -0.193049\n...            ...        ...         ...  ...         ...       ...        ...\n571870  2022-12-27  47.711264 -123.448583  ...  101.272995  0.775658  -0.193049\n571403  2022-12-28  47.711264 -123.448583  ...  101.272995  0.775658  -0.193049\n571878  2022-12-29  47.711264 -123.448583  ...  101.272995  0.775658  -0.193049\n571992  2022-12-30  47.711264 -123.448583  ...  101.272995  0.775658  -0.193049\n572374  2022-12-31  47.711264 -123.448583  ...  101.272995  0.775658  -0.193049\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:               date        lat         lon  ...     aspect  eastness  northness\n35413  2019-01-01  47.777712 -121.696868  ...  351.35013 -0.149277   0.779679\n35446  2019-01-02  47.777712 -121.696868  ...  351.35013 -0.149277   0.779679\n35733  2019-01-03  47.777712 -121.696868  ...  351.35013 -0.149277   0.779679\n36038  2019-01-04  47.777712 -121.696868  ...  351.35013 -0.149277   0.779679\n36067  2019-01-05  47.777712 -121.696868  ...  351.35013 -0.149277   0.779679\n...           ...        ...         ...  ...        ...       ...        ...\n36184  2022-12-27  47.777712 -121.696868  ...  351.35013 -0.149277   0.779679\n36444  2022-12-28  47.777712 -121.696868  ...  351.35013 -0.149277   0.779679\n35452  2022-12-29  47.777712 -121.696868  ...  351.35013 -0.149277   0.779679\n35529  2022-12-30  47.777712 -121.696868  ...  351.35013 -0.149277   0.779679\n35438  2022-12-31  47.777712 -121.696868  ...  351.35013 -0.149277   0.779679\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat        lon  ...     aspect  eastness  northness\n886562  2019-01-01  47.801853 -123.12519  ...  249.20972 -0.751758  -0.341076\n885628  2019-01-02  47.801853 -123.12519  ...  249.20972 -0.751758  -0.341076\n885446  2019-01-03  47.801853 -123.12519  ...  249.20972 -0.751758  -0.341076\n885505  2019-01-04  47.801853 -123.12519  ...  249.20972 -0.751758  -0.341076\n885760  2019-01-05  47.801853 -123.12519  ...  249.20972 -0.751758  -0.341076\n...            ...        ...        ...  ...        ...       ...        ...\n885627  2022-12-27  47.801853 -123.12519  ...  249.20972 -0.751758  -0.341076\n885881  2022-12-28  47.801853 -123.12519  ...  249.20972 -0.751758  -0.341076\n886356  2022-12-29  47.801853 -123.12519  ...  249.20972 -0.751758  -0.341076\n886456  2022-12-30  47.801853 -123.12519  ...  249.20972 -0.751758  -0.341076\n885373  2022-12-31  47.801853 -123.12519  ...  249.20972 -0.751758  -0.341076\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n891552  2019-01-01  47.880235 -117.088511  ...  163.96677  0.269477  -0.765566\n891553  2019-01-01  47.880235 -117.088511  ...  163.96677  0.269477  -0.765566\n891554  2019-01-01  47.880235 -117.088511  ...  163.96677  0.269477  -0.765566\n892374  2019-01-02  47.880235 -117.088511  ...  163.96677  0.269477  -0.765566\n892375  2019-01-02  47.880235 -117.088511  ...  163.96677  0.269477  -0.765566\n...            ...        ...         ...  ...        ...       ...        ...\n894853  2022-12-30  47.880235 -117.088511  ...  163.96677  0.269477  -0.765566\n894854  2022-12-30  47.880235 -117.088511  ...  163.96677  0.269477  -0.765566\n894507  2022-12-31  47.880235 -117.088511  ...  163.96677  0.269477  -0.765566\n894508  2022-12-31  47.880235 -117.088511  ...  163.96677  0.269477  -0.765566\n894509  2022-12-31  47.880235 -117.088511  ...  163.96677  0.269477  -0.765566\n[4383 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date       lat         lon  ...      aspect  eastness  northness\n955838  2019-01-01  47.93443 -123.421633  ...  105.509865  0.766855  -0.261291\n956599  2019-01-02  47.93443 -123.421633  ...  105.509865  0.766855  -0.261291\n955688  2019-01-03  47.93443 -123.421633  ...  105.509865  0.766855  -0.261291\n955739  2019-01-04  47.93443 -123.421633  ...  105.509865  0.766855  -0.261291\n955525  2019-01-05  47.93443 -123.421633  ...  105.509865  0.766855  -0.261291\n...            ...       ...         ...  ...         ...       ...        ...\n956598  2022-12-27  47.93443 -123.421633  ...  105.509865  0.766855  -0.261291\n956348  2022-12-28  47.93443 -123.421633  ...  105.509865  0.766855  -0.261291\n956606  2022-12-29  47.93443 -123.421633  ...  105.509865  0.766855  -0.261291\n955949  2022-12-30  47.93443 -123.421633  ...  105.509865  0.766855  -0.261291\n955609  2022-12-31  47.93443 -123.421633  ...  105.509865  0.766855  -0.261291\n[1461 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...     aspect  eastness  northness\n199884  2019-01-01  48.126665 -115.624257  ...  326.85052 -0.500402   0.697044\n199885  2019-01-01  48.126665 -115.624257  ...  326.85052 -0.500402   0.697044\n201356  2019-01-02  48.126665 -115.624257  ...  326.85052 -0.500402   0.697044\n201357  2019-01-02  48.126665 -115.624257  ...  326.85052 -0.500402   0.697044\n201024  2019-01-03  48.126665 -115.624257  ...  326.85052 -0.500402   0.697044\n...            ...        ...         ...  ...        ...       ...        ...\n199949  2022-12-29  48.126665 -115.624257  ...  326.85052 -0.500402   0.697044\n201070  2022-12-30  48.126665 -115.624257  ...  326.85052 -0.500402   0.697044\n201071  2022-12-30  48.126665 -115.624257  ...  326.85052 -0.500402   0.697044\n199936  2022-12-31  48.126665 -115.624257  ...  326.85052 -0.500402   0.697044\n199937  2022-12-31  48.126665 -115.624257  ...  326.85052 -0.500402   0.697044\n[2922 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:                date        lat         lon  ...   aspect  eastness  northness\n826868  2019-01-01  48.132661 -113.019143  ...  155.821  0.388745  -0.739553\n826869  2019-01-01  48.132661 -113.019143  ...  155.821  0.388745  -0.739553\n826870  2019-01-01  48.132661 -113.019143  ...  155.821  0.388745  -0.739553\n826871  2019-01-01  48.132661 -113.019143  ...  155.821  0.388745  -0.739553\n825932  2019-01-02  48.132661 -113.019143  ...  155.821  0.388745  -0.739553\n...            ...        ...         ...  ...      ...       ...        ...\n828295  2022-12-30  48.132661 -113.019143  ...  155.821  0.388745  -0.739553\n824964  2022-12-31  48.132661 -113.019143  ...  155.821  0.388745  -0.739553\n824965  2022-12-31  48.132661 -113.019143  ...  155.821  0.388745  -0.739553\n824966  2022-12-31  48.132661 -113.019143  ...  155.821  0.388745  -0.739553\n824967  2022-12-31  48.132661 -113.019143  ...  155.821  0.388745  -0.739553\n[5844 rows x 21 columns]\nStart to filling missing values..\ninterpolated group:  \n\nStream closed",
  "history_begin_time" : 1697420189954,
  "history_end_time" : 1697420199469,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "jtp5PW8KtQJP",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\n\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\n\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\n\ndef convert_to_time_series():\n  columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n  'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  'relative_humidity_rmax', 'relative_humidity_rmin',\n  'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n  # Read the cleaned ready CSV and DEM slope CSV\n  df = pd.read_csv(current_ready_csv_path)\n  # df['location'] = df['lat'].astype(str) + ',' + df['lon'].astype(str)\n  # unique_location_pairs = df.drop_duplicates(subset='location')[['lat', 'lon']]\n\n  # print(unique_location_pairs)\n  # unique_date = df.drop_duplicates(subset='date')[['date']]\n  # print(unique_date)\n\n  # add a 7 days time series to each row\n  df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n  # Group the data by 'lat' and 'lon'\n  grouped = df.groupby(['lat', 'lon'])\n  \n  # fill in the missing values of AMSR and gridMet using polynomial values\n  # Function to perform polynomial interpolation\n  def interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    mask = y > 240\n    \n    y_interp = y.copy()\n\n    # Perform interpolation\n    y_interp[mask] = np.interp(x, x[~mask], y[~mask])\n\n    # Replace missing values with interpolated values\n    df[column_name] = y_interp\n\n  # Group by location and apply interpolation for each column\n  \n  for name, group in grouped:\n    print(\"Start to filling missing values..\")\n    interpolate_missing_inplace(group, 'SWE')\n    print(\"interpolated group: \", group)\n\n  \n\n  # Create a new DataFrame to store the time series data for each location\n  result = pd.DataFrame()\n\n  # Define the number of days to consider (7 days in this case)\n  num_days = 7\n\n  # ['date', 'lat', 'lon', 'SWE', 'Flag', 'air_temperature_tmmn',\n  # 'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  # 'relative_humidity_rmax', 'relative_humidity_rmin',\n  # 'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',\n  # 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness']\n  \n\n  for name, group in grouped:\n      group = group.set_index('date')\n      for day in range(1, num_days + 1):\n        for target_col in columns_to_be_time_series:\n          new_column_name = f'{target_col}_{day}'\n          group[new_column_name] = group[target_col].shift(day)\n      result = pd.concat([result, group], axis=0)\n\n  # Reset the index of the result DataFrame\n  result = result.reset_index()\n\n  print(result.describe)\n\n  result.to_csv(target_time_series_csv_path, index=False)\n\n\nconvert_to_time_series()\n\ndf = pd.read_csv(target_time_series_csv_path)\nshutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\nprint(df.columns)\n\ndf.head()\n\npd.set_option('display.max_columns', None)\ndescription = df.describe(include='all')\n# Print the description\nprint(description)\n\n",
  "history_output" : "today date = 2023-10-16\ntest start date:  2023-05-17\ntest end date:  2023-10-16\n/home/chetana\nStart to filling missing values..\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/jtp5PW8KtQJP/convert_to_time_series.py\", line 87, in <module>\n    convert_to_time_series()\n  File \"/home/chetana/gw-workspace/jtp5PW8KtQJP/convert_to_time_series.py\", line 53, in convert_to_time_series\n    interpolate_missing_inplace(group, 'SWE')\n  File \"/home/chetana/gw-workspace/jtp5PW8KtQJP/convert_to_time_series.py\", line 44, in interpolate_missing_inplace\n    y_interp[mask] = np.interp(x, x[~mask], y[~mask])\nNameError: name 'np' is not defined\n",
  "history_begin_time" : 1697420118763,
  "history_end_time" : 1697420121918,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "iDf8rLfV7jhf",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\n\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\n\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\n\ndef convert_to_time_series():\n  columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n  'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  'relative_humidity_rmax', 'relative_humidity_rmin',\n  'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n  # Read the cleaned ready CSV and DEM slope CSV\n  df = pd.read_csv(current_ready_csv_path)\n  # df['location'] = df['lat'].astype(str) + ',' + df['lon'].astype(str)\n  # unique_location_pairs = df.drop_duplicates(subset='location')[['lat', 'lon']]\n\n  # print(unique_location_pairs)\n  # unique_date = df.drop_duplicates(subset='date')[['date']]\n  # print(unique_date)\n\n  # add a 7 days time series to each row\n  df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n  # Group the data by 'lat' and 'lon'\n  grouped = df.groupby(['lat', 'lon'])\n  \n  # fill in the missing values of AMSR and gridMet using polynomial values\n  # Function to perform polynomial interpolation\n  def interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    mask = y > 240\n    \n    y_interp = y.copy()\n\n    # Perform interpolation\n    y_interp[mask] = np.interp(x, x[~mask], y[~mask])\n\n    # Replace missing values with interpolated values\n    df[column_name] = y_interp\n\n  # Group by location and apply interpolation for each column\n  \n  for name, group in grouped:\n    print(\"Start to filling missing values..\")\n    interpolate_missing_inplace(group, 'SWE')\n    print(\"interpolated group: \", group)\n\n  \n\n  # Create a new DataFrame to store the time series data for each location\n  result = pd.DataFrame()\n\n  # Define the number of days to consider (7 days in this case)\n  num_days = 7\n\n  # ['date', 'lat', 'lon', 'SWE', 'Flag', 'air_temperature_tmmn',\n  # 'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  # 'relative_humidity_rmax', 'relative_humidity_rmin',\n  # 'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',\n  # 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness']\n  \n\n  for name, group in grouped:\n      group = group.set_index('date')\n      for day in range(1, num_days + 1):\n        for target_col in columns_to_be_time_series:\n          new_column_name = f'{target_col}_{day}'\n          group[new_column_name] = group[target_col].shift(day)\n      result = pd.concat([result, group], axis=0)\n\n  # Reset the index of the result DataFrame\n  result = result.reset_index()\n\n  print(result.describe)\n\n  result.to_csv(target_time_series_csv_path, index=False)\n\n\nconvert_to_time_series()\n\ndf = pd.read_csv(target_time_series_csv_path)\nshutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\nprint(df.columns)\n\ndf.head()\n\npd.set_option('display.max_columns', None)\ndescription = df.describe(include='all')\n# Print the description\nprint(description)\n\n",
  "history_output" : "today date = 2023-10-16\ntest start date:  2023-05-17\ntest end date:  2023-10-16\n/home/chetana\nStart to filling missing values..\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/iDf8rLfV7jhf/convert_to_time_series.py\", line 87, in <module>\n    convert_to_time_series()\n  File \"/home/chetana/gw-workspace/iDf8rLfV7jhf/convert_to_time_series.py\", line 53, in convert_to_time_series\n    interpolate_missing_inplace(group, 'SWE')\n  File \"/home/chetana/gw-workspace/iDf8rLfV7jhf/convert_to_time_series.py\", line 44, in interpolate_missing_inplace\n    y_interp[mask] = np.interp(x, x[~mask], y[~mask])\nNameError: name 'np' is not defined\n",
  "history_begin_time" : 1697420102255,
  "history_end_time" : 1697420105509,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "P9Bc5iwpaakO",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\n\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\n\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\n\ndef convert_to_time_series():\n  columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n  'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  'relative_humidity_rmax', 'relative_humidity_rmin',\n  'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n  # Read the cleaned ready CSV and DEM slope CSV\n  df = pd.read_csv(current_ready_csv_path)\n  # df['location'] = df['lat'].astype(str) + ',' + df['lon'].astype(str)\n  # unique_location_pairs = df.drop_duplicates(subset='location')[['lat', 'lon']]\n\n  # print(unique_location_pairs)\n  # unique_date = df.drop_duplicates(subset='date')[['date']]\n  # print(unique_date)\n\n  # add a 7 days time series to each row\n  df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n  # Group the data by 'lat' and 'lon'\n  grouped = df.groupby(['lat', 'lon'])\n  \n  # fill in the missing values of AMSR and gridMet using polynomial values\n  # Function to perform polynomial interpolation\n  def interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    mask = y > 240\n    \n    y_interp = y.copy()\n\n    # Perform interpolation\n    y_interp[mask] = np.interp(x, x[~mask], y[~mask])\n\n    # Replace missing values with interpolated values\n    df[column_name] = y_interp\n\n  # Group by location and apply interpolation for each column\n  \n  for name, group in grouped:\n    print(\"Start to filling missing values..\")\n    interpolate_missing_inplace(group, 'SWE')\n    print(\"interpolated group: \", group)\n\n  \n\n  # Create a new DataFrame to store the time series data for each location\n  result = pd.DataFrame()\n\n  # Define the number of days to consider (7 days in this case)\n  num_days = 7\n\n  # ['date', 'lat', 'lon', 'SWE', 'Flag', 'air_temperature_tmmn',\n  # 'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  # 'relative_humidity_rmax', 'relative_humidity_rmin',\n  # 'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',\n  # 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness']\n  \n\n  for name, group in grouped:\n      group = group.set_index('date')\n      for day in range(1, num_days + 1):\n        for target_col in columns_to_be_time_series:\n          new_column_name = f'{target_col}_{day}'\n          group[new_column_name] = group[target_col].shift(day)\n      result = pd.concat([result, group], axis=0)\n\n  # Reset the index of the result DataFrame\n  result = result.reset_index()\n\n  print(result.describe)\n\n  result.to_csv(target_time_series_csv_path, index=False)\n\n\nconvert_to_time_series()\n\ndf = pd.read_csv(target_time_series_csv_path)\nshutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\nprint(df.columns)\n\ndf.head()\n\npd.set_option('display.max_columns', None)\ndescription = df.describe(include='all')\n# Print the description\nprint(description)\n\n",
  "history_output" : "today date = 2023-10-16\ntest start date:  2023-05-17\ntest end date:  2023-10-16\n/home/chetana\nStart to filling missing values..\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/P9Bc5iwpaakO/convert_to_time_series.py\", line 87, in <module>\n    convert_to_time_series()\n  File \"/home/chetana/gw-workspace/P9Bc5iwpaakO/convert_to_time_series.py\", line 53, in convert_to_time_series\n    interpolate_missing_inplace(group, 'SWE')\n  File \"/home/chetana/gw-workspace/P9Bc5iwpaakO/convert_to_time_series.py\", line 44, in interpolate_missing_inplace\n    y_interp[mask] = np.interp(x, x[~mask], y[~mask])\nNameError: name 'np' is not defined\n",
  "history_begin_time" : 1697420028874,
  "history_end_time" : 1697420031982,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "6CTpG0WJLOX8",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\n\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1.csv'\n\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_v1_bak.csv'\n\ndef convert_to_time_series():\n  columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n  'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  'relative_humidity_rmax', 'relative_humidity_rmin',\n  'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n  # Read the cleaned ready CSV and DEM slope CSV\n  df = pd.read_csv(current_ready_csv_path)\n  # df['location'] = df['lat'].astype(str) + ',' + df['lon'].astype(str)\n  # unique_location_pairs = df.drop_duplicates(subset='location')[['lat', 'lon']]\n\n  # print(unique_location_pairs)\n  # unique_date = df.drop_duplicates(subset='date')[['date']]\n  # print(unique_date)\n\n  # add a 7 days time series to each row\n  df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n  # Group the data by 'lat' and 'lon'\n  grouped = df.groupby(['lat', 'lon'])\n  \n  # fill in the missing values of AMSR and gridMet using polynomial values\n  # Function to perform polynomial interpolation\n  def interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    mask = int(y) > 240\n    \n    y_interp = y.copy()\n\n    # Perform interpolation\n    y_interp[mask] = np.interp(x, x[~mask], y[~mask])\n\n    # Replace missing values with interpolated values\n    df[column_name] = y_interp\n\n  # Group by location and apply interpolation for each column\n  \n  for name, group in grouped:\n    print(\"Start to filling missing values..\")\n    interpolate_missing_inplace(group, 'SWE')\n    print(\"interpolated group: \", group)\n\n  \n\n  # Create a new DataFrame to store the time series data for each location\n  result = pd.DataFrame()\n\n  # Define the number of days to consider (7 days in this case)\n  num_days = 7\n\n  # ['date', 'lat', 'lon', 'SWE', 'Flag', 'air_temperature_tmmn',\n  # 'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  # 'relative_humidity_rmax', 'relative_humidity_rmin',\n  # 'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',\n  # 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness']\n  \n\n  for name, group in grouped:\n      group = group.set_index('date')\n      for day in range(1, num_days + 1):\n        for target_col in columns_to_be_time_series:\n          new_column_name = f'{target_col}_{day}'\n          group[new_column_name] = group[target_col].shift(day)\n      result = pd.concat([result, group], axis=0)\n\n  # Reset the index of the result DataFrame\n  result = result.reset_index()\n\n  print(result.describe)\n\n  result.to_csv(target_time_series_csv_path, index=False)\n\n\nconvert_to_time_series()\n\ndf = pd.read_csv(target_time_series_csv_path)\nshutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\nprint(df.columns)\n\ndf.head()\n\npd.set_option('display.max_columns', None)\ndescription = df.describe(include='all')\n# Print the description\nprint(description)\n\n",
  "history_output" : "today date = 2023-10-16\ntest start date:  2023-05-17\ntest end date:  2023-10-16\n/home/chetana\nStart to filling missing values..\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/6CTpG0WJLOX8/convert_to_time_series.py\", line 87, in <module>\n    convert_to_time_series()\n  File \"/home/chetana/gw-workspace/6CTpG0WJLOX8/convert_to_time_series.py\", line 53, in convert_to_time_series\n    interpolate_missing_inplace(group, 'SWE')\n  File \"/home/chetana/gw-workspace/6CTpG0WJLOX8/convert_to_time_series.py\", line 39, in interpolate_missing_inplace\n    mask = int(y) > 240\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/series.py\", line 206, in wrapper\n    raise TypeError(f\"cannot convert the series to {converter}\")\nTypeError: cannot convert the series to <class 'int'>\n",
  "history_begin_time" : 1697419840183,
  "history_end_time" : 1697419844379,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "XbJy4ho82YD4",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\n\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series.csv'\n\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_bak.csv'\n\ndef convert_to_time_series():\n  columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n  'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  'relative_humidity_rmax', 'relative_humidity_rmin',\n  'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n  # Read the cleaned ready CSV and DEM slope CSV\n  df = pd.read_csv(current_ready_csv_path)\n  # df['location'] = df['lat'].astype(str) + ',' + df['lon'].astype(str)\n  # unique_location_pairs = df.drop_duplicates(subset='location')[['lat', 'lon']]\n\n  # print(unique_location_pairs)\n  # unique_date = df.drop_duplicates(subset='date')[['date']]\n  # print(unique_date)\n\n  # add a 7 days time series to each row\n  df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n  # Group the data by 'lat' and 'lon'\n  grouped = df.groupby(['lat', 'lon'])\n  \n  # fill in the missing values of AMSR and gridMet using polynomial values\n  # Function to perform polynomial interpolation\n  def interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    mask = int(y) > 240\n    \n    y_interp = y.copy()\n\n    # Perform interpolation\n    y_interp[mask] = np.interp(x, x[~mask], y[~mask])\n\n    # Replace missing values with interpolated values\n    df[column_name] = y_interp\n\n  # Group by location and apply interpolation for each column\n  \n  for name, group in grouped:\n    print(\"Start to filling missing values..\")\n    interpolate_missing_inplace(group, 'SWE')\n    print(\"interpolated group: \", group)\n\n  \n\n  # Create a new DataFrame to store the time series data for each location\n  result = pd.DataFrame()\n\n  # Define the number of days to consider (7 days in this case)\n  num_days = 7\n\n  # ['date', 'lat', 'lon', 'SWE', 'Flag', 'air_temperature_tmmn',\n  # 'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  # 'relative_humidity_rmax', 'relative_humidity_rmin',\n  # 'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',\n  # 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness']\n  \n\n  for name, group in grouped:\n      group = group.set_index('date')\n      for day in range(1, num_days + 1):\n        for target_col in columns_to_be_time_series:\n          new_column_name = f'{target_col}_{day}'\n          group[new_column_name] = group[target_col].shift(day)\n      result = pd.concat([result, group], axis=0)\n\n  # Reset the index of the result DataFrame\n  result = result.reset_index()\n\n  print(result.describe)\n\n  result.to_csv(target_time_series_csv_path, index=False)\n\n#convert_to_time_series()\n\ndf = pd.read_csv(target_time_series_csv_path)\nshutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\nprint(df.columns)\n\ndf.head()\n\npd.set_option('display.max_columns', None)\ndescription = df.describe(include='all')\n# Print the description\nprint(description)\n\n",
  "history_output" : "today date = 2023-10-16\ntest start date:  2023-05-17\ntest end date:  2023-10-16\n/home/chetana\nIndex(['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'Unnamed: 0',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'elevation', 'slope', 'curvature',\n       'aspect', 'eastness', 'northness', 'SWE_1', 'Flag_1',\n       'air_temperature_tmmn_1', 'potential_evapotranspiration_1',\n       'mean_vapor_pressure_deficit_1', 'relative_humidity_rmax_1',\n       'relative_humidity_rmin_1', 'precipitation_amount_1',\n       'air_temperature_tmmx_1', 'wind_speed_1', 'SWE_2', 'Flag_2',\n       'air_temperature_tmmn_2', 'potential_evapotranspiration_2',\n       'mean_vapor_pressure_deficit_2', 'relative_humidity_rmax_2',\n       'relative_humidity_rmin_2', 'precipitation_amount_2',\n       'air_temperature_tmmx_2', 'wind_speed_2', 'SWE_3', 'Flag_3',\n       'air_temperature_tmmn_3', 'potential_evapotranspiration_3',\n       'mean_vapor_pressure_deficit_3', 'relative_humidity_rmax_3',\n       'relative_humidity_rmin_3', 'precipitation_amount_3',\n       'air_temperature_tmmx_3', 'wind_speed_3', 'SWE_4', 'Flag_4',\n       'air_temperature_tmmn_4', 'potential_evapotranspiration_4',\n       'mean_vapor_pressure_deficit_4', 'relative_humidity_rmax_4',\n       'relative_humidity_rmin_4', 'precipitation_amount_4',\n       'air_temperature_tmmx_4', 'wind_speed_4', 'SWE_5', 'Flag_5',\n       'air_temperature_tmmn_5', 'potential_evapotranspiration_5',\n       'mean_vapor_pressure_deficit_5', 'relative_humidity_rmax_5',\n       'relative_humidity_rmin_5', 'precipitation_amount_5',\n       'air_temperature_tmmx_5', 'wind_speed_5', 'SWE_6', 'Flag_6',\n       'air_temperature_tmmn_6', 'potential_evapotranspiration_6',\n       'mean_vapor_pressure_deficit_6', 'relative_humidity_rmax_6',\n       'relative_humidity_rmin_6', 'precipitation_amount_6',\n       'air_temperature_tmmx_6', 'wind_speed_6', 'SWE_7', 'Flag_7',\n       'air_temperature_tmmn_7', 'potential_evapotranspiration_7',\n       'mean_vapor_pressure_deficit_7', 'relative_humidity_rmax_7',\n       'relative_humidity_rmin_7', 'precipitation_amount_7',\n       'air_temperature_tmmx_7', 'wind_speed_7'],\n      dtype='object')\n              date           lat           lon           SWE          Flag  \\\ncount      1022700  1.022700e+06  1.022700e+06  1.022700e+06  1.022700e+06   \nunique        1461           NaN           NaN           NaN           NaN   \ntop     2019-01-01           NaN           NaN           NaN           NaN   \nfreq           700           NaN           NaN           NaN           NaN   \nmean           NaN  4.165838e+01 -1.141534e+02  5.046323e+01  2.434436e+02   \nstd            NaN  3.632464e+00  5.423376e+00  9.547185e+01  5.313797e+00   \nmin            NaN  3.335825e+01 -1.234486e+02  0.000000e+00  2.410000e+02   \n25%            NaN  3.891814e+01 -1.197812e+02  0.000000e+00  2.410000e+02   \n50%            NaN  4.107190e+01 -1.137737e+02  0.000000e+00  2.410000e+02   \n75%            NaN  4.461398e+01 -1.100367e+02  3.500000e+01  2.410000e+02   \nmax            NaN  4.897107e+01 -1.051948e+02  2.550000e+02  2.550000e+02   \n           swe_value    Unnamed: 0  air_temperature_tmmn  \\\ncount   1.008700e+06  1.022700e+06          1.022700e+06   \nunique           NaN           NaN                   NaN   \ntop              NaN           NaN                   NaN   \nfreq             NaN           NaN                   NaN   \nmean    3.333796e+00  5.113495e+05          2.720187e+02   \nstd     5.245389e+00  2.952282e+05          8.384982e+00   \nmin     0.000000e+00  0.000000e+00          2.328000e+02   \n25%     0.000000e+00  2.556748e+05          2.663000e+02   \n50%     0.000000e+00  5.113495e+05          2.722000e+02   \n75%     6.300000e+00  7.670242e+05          2.784000e+02   \nmax     2.260000e+01  1.022699e+06          2.983000e+02   \n        potential_evapotranspiration  mean_vapor_pressure_deficit  \\\ncount                   1.022700e+06                 1.022700e+06   \nunique                           NaN                          NaN   \ntop                              NaN                          NaN   \nfreq                             NaN                          NaN   \nmean                    3.943372e+00                 6.258550e-01   \nstd                     2.478664e+00                 5.233133e-01   \nmin                     0.000000e+00                 0.000000e+00   \n25%                     1.900000e+00                 2.100000e-01   \n50%                     3.500000e+00                 4.700000e-01   \n75%                     5.800000e+00                 9.300000e-01   \nmax                     1.510000e+01                 3.870000e+00   \n        relative_humidity_rmax  relative_humidity_rmin  precipitation_amount  \\\ncount             1.022700e+06            1.022700e+06          1.022700e+06   \nunique                     NaN                     NaN                   NaN   \ntop                        NaN                     NaN                   NaN   \nfreq                       NaN                     NaN                   NaN   \nmean              7.123571e+01            3.578010e+01          2.689152e+00   \nstd               2.030150e+01            1.888091e+01          7.456402e+00   \nmin               8.200000e+00            1.000000e+00          0.000000e+00   \n25%               5.560000e+01            2.130000e+01          0.000000e+00   \n50%               7.240000e+01            3.160000e+01          0.000000e+00   \n75%               8.820001e+01            4.740000e+01          2.200000e+00   \nmax               1.000000e+02            1.000000e+02          5.042000e+02   \n        air_temperature_tmmx    wind_speed     elevation         slope  \\\ncount           1.022700e+06  1.022700e+06  1.022700e+06  1.022700e+06   \nunique                   NaN           NaN           NaN           NaN   \ntop                      NaN           NaN           NaN           NaN   \nfreq                     NaN           NaN           NaN           NaN   \nmean            2.837481e+02  4.214964e+00  2.397170e+03  6.243769e+01   \nstd             9.912702e+00  2.043559e+00  6.647262e+02  1.650521e+01   \nmin             2.444000e+02  5.000000e-01  7.584437e+02  4.277402e+00   \n25%             2.759000e+02  2.800000e+00  1.948688e+03  5.213456e+01   \n50%             2.831000e+02  3.700000e+00  2.481006e+03  6.768107e+01   \n75%             2.920000e+02  5.200000e+00  2.895791e+03  7.504661e+01   \nmax             3.144000e+02  1.860000e+01  3.823385e+03  8.368555e+01   \n           curvature        aspect      eastness     northness         SWE_1  \\\ncount   1.022700e+06  1.022700e+06  1.022700e+06  1.022700e+06  1.022457e+06   \nunique           NaN           NaN           NaN           NaN           NaN   \ntop              NaN           NaN           NaN           NaN           NaN   \nfreq             NaN           NaN           NaN           NaN           NaN   \nmean   -3.909783e+03  1.722213e+02  6.965357e-02 -4.509867e-02  5.046829e+01   \nstd     4.385982e+03  1.031039e+02  5.171924e-01  6.412035e-01  9.547557e+01   \nmin    -1.917768e+04  4.159291e-01 -7.853438e-01 -7.853694e-01  0.000000e+00   \n25%    -6.479865e+03  9.217068e+01 -3.907275e-01 -7.356204e-01  0.000000e+00   \n50%    -3.710969e+03  1.691301e+02  1.334633e-01 -1.913248e-01  0.000000e+00   \n75%    -5.754078e+02  2.498582e+02  5.767317e-01  6.495535e-01  3.500000e+01   \nmax     9.069726e+03  3.586563e+02  7.853980e-01  7.853850e-01  2.550000e+02   \n              Flag_1  air_temperature_tmmn_1  potential_evapotranspiration_1  \\\ncount   1.022457e+06            1.022457e+06                    1.022457e+06   \nunique           NaN                     NaN                             NaN   \ntop              NaN                     NaN                             NaN   \nfreq             NaN                     NaN                             NaN   \nmean    2.434439e+02            2.720198e+02                    3.943422e+00   \nstd     5.314013e+00            8.385519e+00                    2.478670e+00   \nmin     2.410000e+02            2.328000e+02                    0.000000e+00   \n25%     2.410000e+02            2.663000e+02                    1.900000e+00   \n50%     2.410000e+02            2.722000e+02                    3.500000e+00   \n75%     2.410000e+02            2.784000e+02                    5.800000e+00   \nmax     2.550000e+02            2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\ncount                    1.022457e+06              1.022457e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.259842e-01              7.123178e+01   \nstd                      5.233073e-01              2.030135e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.560000e+01   \n50%                      4.700000e-01              7.240000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_1  precipitation_amount_1  \\\ncount               1.022457e+06            1.022457e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.577455e+01            2.688369e+00   \nstd                 1.887860e+01            7.455937e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.740000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_1  wind_speed_1         SWE_2        Flag_2  \\\ncount             1.022457e+06  1.022457e+06  1.022214e+06  1.022214e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837507e+02  4.214984e+00  5.047216e+01  2.434441e+02   \nstd               9.912255e+00  2.043594e+00  9.547914e+01  5.314206e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  3.500000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  2.550000e+02  2.550000e+02   \n        air_temperature_tmmn_2  potential_evapotranspiration_2  \\\ncount             1.022214e+06                    1.022214e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720209e+02                    3.943420e+00   \nstd               8.385815e+00                    2.478640e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_2  relative_humidity_rmax_2  \\\ncount                    1.022214e+06              1.022214e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.261075e-01              7.122720e+01   \nstd                      5.233070e-01              2.030094e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.560000e+01   \n50%                      4.700000e-01              7.240000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_2  precipitation_amount_2  \\\ncount               1.022214e+06            1.022214e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.576907e+01            2.687716e+00   \nstd                 1.887661e+01            7.456001e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.740000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_2  wind_speed_2         SWE_3        Flag_3  \\\ncount             1.022214e+06  1.022214e+06  1.021971e+06  1.021971e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837536e+02  4.214784e+00  5.047569e+01  2.434443e+02   \nstd               9.911446e+00  2.043331e+00  9.548285e+01  5.314398e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  3.500000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  2.550000e+02  2.550000e+02   \n        air_temperature_tmmn_3  potential_evapotranspiration_3  \\\ncount             1.021971e+06                    1.021971e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720225e+02                    3.943376e+00   \nstd               8.385741e+00                    2.478685e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\ncount                    1.021971e+06              1.021971e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.262307e-01              7.122289e+01   \nstd                      5.233067e-01              2.030066e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.550000e+01   \n50%                      4.700000e-01              7.230000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_3  precipitation_amount_3  \\\ncount               1.021971e+06            1.021971e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.576342e+01            2.686752e+00   \nstd                 1.887456e+01            7.455918e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.730000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_3  wind_speed_3         SWE_4        Flag_4  \\\ncount             1.021971e+06  1.021971e+06  1.021728e+06  1.021728e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837567e+02  4.214625e+00  5.047501e+01  2.434443e+02   \nstd               9.910225e+00  2.043209e+00  9.548223e+01  5.314356e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  3.500000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  2.550000e+02  2.550000e+02   \n        air_temperature_tmmn_4  potential_evapotranspiration_4  \\\ncount             1.021728e+06                    1.021728e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720240e+02                    3.943264e+00   \nstd               8.385866e+00                    2.478656e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_4  relative_humidity_rmax_4  \\\ncount                    1.021728e+06              1.021728e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.263553e-01              7.121851e+01   \nstd                      5.233051e-01              2.030000e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.550000e+01   \n50%                      4.700000e-01              7.230000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_4  precipitation_amount_4  \\\ncount               1.021728e+06            1.021728e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.575787e+01            2.686033e+00   \nstd                 1.887263e+01            7.455973e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.730000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_4  wind_speed_4         SWE_5        Flag_5  \\\ncount             1.021728e+06  1.021728e+06  1.021485e+06  1.021485e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837597e+02  4.214386e+00  5.047484e+01  2.434443e+02   \nstd               9.909216e+00  2.042915e+00  9.548200e+01  5.314338e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  3.500000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  2.550000e+02  2.550000e+02   \n        air_temperature_tmmn_5  potential_evapotranspiration_5  \\\ncount             1.021485e+06                    1.021485e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720251e+02                    3.943198e+00   \nstd               8.386260e+00                    2.478648e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\ncount                    1.021485e+06              1.021485e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.264743e-01              7.121428e+01   \nstd                      5.233079e-01              2.029947e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.550000e+01   \n50%                      4.700000e-01              7.230000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_5  precipitation_amount_5  \\\ncount               1.021485e+06            1.021485e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.575236e+01            2.684510e+00   \nstd                 1.887073e+01            7.454676e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.730000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_5  wind_speed_5         SWE_6        Flag_6  \\\ncount             1.021485e+06  1.021485e+06  1.021242e+06  1.021242e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837628e+02  4.213888e+00  5.046933e+01  2.434440e+02   \nstd               9.908198e+00  2.042324e+00  9.547787e+01  5.314084e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  3.500000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  2.550000e+02  2.550000e+02   \n        air_temperature_tmmn_6  potential_evapotranspiration_6  \\\ncount             1.021242e+06                    1.021242e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720261e+02                    3.943110e+00   \nstd               8.386646e+00                    2.478642e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_6  relative_humidity_rmax_6  \\\ncount                    1.021242e+06              1.021242e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.265698e-01              7.120906e+01   \nstd                      5.233230e-01              2.029860e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.550000e+01   \n50%                      4.700000e-01              7.230000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_6  precipitation_amount_6  \\\ncount               1.021242e+06            1.021242e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.574670e+01            2.683368e+00   \nstd                 1.886860e+01            7.454296e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.730000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_6  wind_speed_6         SWE_7        Flag_7  \\\ncount             1.021242e+06  1.021242e+06  1.020999e+06  1.020999e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837659e+02  4.213170e+00  5.046308e+01  2.434436e+02   \nstd               9.907047e+00  2.041234e+00  9.547252e+01  5.313772e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  3.500000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  2.550000e+02  2.550000e+02   \n        air_temperature_tmmn_7  potential_evapotranspiration_7  \\\ncount             1.020999e+06                    1.020999e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720272e+02                    3.943113e+00   \nstd               8.386879e+00                    2.478654e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\ncount                    1.020999e+06              1.020999e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.266652e-01              7.120386e+01   \nstd                      5.233356e-01              2.029766e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.550000e+01   \n50%                      4.700000e-01              7.230000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_7  precipitation_amount_7  \\\ncount               1.020999e+06            1.020999e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.574126e+01            2.681174e+00   \nstd                 1.886665e+01            7.449998e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.120000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.730000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_7  wind_speed_7  \ncount             1.020999e+06  1.020999e+06  \nunique                     NaN           NaN  \ntop                        NaN           NaN  \nfreq                       NaN           NaN  \nmean              2.837691e+02  4.212599e+00  \nstd               9.905842e+00  2.040713e+00  \nmin               2.444000e+02  5.000000e-01  \n25%               2.759000e+02  2.800000e+00  \n50%               2.831000e+02  3.700000e+00  \n75%               2.920000e+02  5.200000e+00  \nmax               3.144000e+02  1.860000e+01  \n",
  "history_begin_time" : 1697419758310,
  "history_end_time" : 1697419771775,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "GbFndUXeegip",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\n\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series.csv'\n\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_bak.csv'\n\ndef convert_to_time_series():\n  columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n  'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  'relative_humidity_rmax', 'relative_humidity_rmin',\n  'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n  # Read the cleaned ready CSV and DEM slope CSV\n  df = pd.read_csv(current_ready_csv_path)\n  # df['location'] = df['lat'].astype(str) + ',' + df['lon'].astype(str)\n  # unique_location_pairs = df.drop_duplicates(subset='location')[['lat', 'lon']]\n\n  # print(unique_location_pairs)\n  # unique_date = df.drop_duplicates(subset='date')[['date']]\n  # print(unique_date)\n\n  # add a 7 days time series to each row\n  df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n  # Group the data by 'lat' and 'lon'\n  grouped = df.groupby(['lat', 'lon'])\n  \n  # fill in the missing values of AMSR and gridMet using polynomial values\n  # Function to perform polynomial interpolation\n  def interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    mask = int(y) > 240\n    \n    y_interp = y.copy()\n\n    # Perform interpolation\n    y_interp[mask] = np.interp(x, x[~mask], y[~mask])\n\n    # Replace missing values with interpolated values\n    df[column_name] = y_interp\n\n  # Group by location and apply interpolation for each column\n  \n  for name, group in grouped:\n    interpolate_missing_inplace(group, 'SWE')\n    print(\"interpolated group: \", group)\n\n  \n\n  # Create a new DataFrame to store the time series data for each location\n  result = pd.DataFrame()\n\n  # Define the number of days to consider (7 days in this case)\n  num_days = 7\n\n  # ['date', 'lat', 'lon', 'SWE', 'Flag', 'air_temperature_tmmn',\n  # 'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  # 'relative_humidity_rmax', 'relative_humidity_rmin',\n  # 'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',\n  # 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness']\n  \n\n  for name, group in grouped:\n      group = group.set_index('date')\n      for day in range(1, num_days + 1):\n        for target_col in columns_to_be_time_series:\n          new_column_name = f'{target_col}_{day}'\n          group[new_column_name] = group[target_col].shift(day)\n      result = pd.concat([result, group], axis=0)\n\n  # Reset the index of the result DataFrame\n  result = result.reset_index()\n\n  print(result.describe)\n\n  result.to_csv(target_time_series_csv_path, index=False)\n\n#convert_to_time_series()\n\ndf = pd.read_csv(target_time_series_csv_path)\nshutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\nprint(df.columns)\n\ndf.head()\n\npd.set_option('display.max_columns', None)\ndescription = df.describe(include='all')\n# Print the description\nprint(description)\n\n",
  "history_output" : "today date = 2023-10-16\ntest start date:  2023-05-17\ntest end date:  2023-10-16\n/home/chetana\nIndex(['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'Unnamed: 0',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'elevation', 'slope', 'curvature',\n       'aspect', 'eastness', 'northness', 'SWE_1', 'Flag_1',\n       'air_temperature_tmmn_1', 'potential_evapotranspiration_1',\n       'mean_vapor_pressure_deficit_1', 'relative_humidity_rmax_1',\n       'relative_humidity_rmin_1', 'precipitation_amount_1',\n       'air_temperature_tmmx_1', 'wind_speed_1', 'SWE_2', 'Flag_2',\n       'air_temperature_tmmn_2', 'potential_evapotranspiration_2',\n       'mean_vapor_pressure_deficit_2', 'relative_humidity_rmax_2',\n       'relative_humidity_rmin_2', 'precipitation_amount_2',\n       'air_temperature_tmmx_2', 'wind_speed_2', 'SWE_3', 'Flag_3',\n       'air_temperature_tmmn_3', 'potential_evapotranspiration_3',\n       'mean_vapor_pressure_deficit_3', 'relative_humidity_rmax_3',\n       'relative_humidity_rmin_3', 'precipitation_amount_3',\n       'air_temperature_tmmx_3', 'wind_speed_3', 'SWE_4', 'Flag_4',\n       'air_temperature_tmmn_4', 'potential_evapotranspiration_4',\n       'mean_vapor_pressure_deficit_4', 'relative_humidity_rmax_4',\n       'relative_humidity_rmin_4', 'precipitation_amount_4',\n       'air_temperature_tmmx_4', 'wind_speed_4', 'SWE_5', 'Flag_5',\n       'air_temperature_tmmn_5', 'potential_evapotranspiration_5',\n       'mean_vapor_pressure_deficit_5', 'relative_humidity_rmax_5',\n       'relative_humidity_rmin_5', 'precipitation_amount_5',\n       'air_temperature_tmmx_5', 'wind_speed_5', 'SWE_6', 'Flag_6',\n       'air_temperature_tmmn_6', 'potential_evapotranspiration_6',\n       'mean_vapor_pressure_deficit_6', 'relative_humidity_rmax_6',\n       'relative_humidity_rmin_6', 'precipitation_amount_6',\n       'air_temperature_tmmx_6', 'wind_speed_6', 'SWE_7', 'Flag_7',\n       'air_temperature_tmmn_7', 'potential_evapotranspiration_7',\n       'mean_vapor_pressure_deficit_7', 'relative_humidity_rmax_7',\n       'relative_humidity_rmin_7', 'precipitation_amount_7',\n       'air_temperature_tmmx_7', 'wind_speed_7'],\n      dtype='object')\n              date           lat           lon           SWE          Flag  \\\ncount      1022700  1.022700e+06  1.022700e+06  1.022700e+06  1.022700e+06   \nunique        1461           NaN           NaN           NaN           NaN   \ntop     2019-01-01           NaN           NaN           NaN           NaN   \nfreq           700           NaN           NaN           NaN           NaN   \nmean           NaN  4.165838e+01 -1.141534e+02  5.046323e+01  2.434436e+02   \nstd            NaN  3.632464e+00  5.423376e+00  9.547185e+01  5.313797e+00   \nmin            NaN  3.335825e+01 -1.234486e+02  0.000000e+00  2.410000e+02   \n25%            NaN  3.891814e+01 -1.197812e+02  0.000000e+00  2.410000e+02   \n50%            NaN  4.107190e+01 -1.137737e+02  0.000000e+00  2.410000e+02   \n75%            NaN  4.461398e+01 -1.100367e+02  3.500000e+01  2.410000e+02   \nmax            NaN  4.897107e+01 -1.051948e+02  2.550000e+02  2.550000e+02   \n           swe_value    Unnamed: 0  air_temperature_tmmn  \\\ncount   1.008700e+06  1.022700e+06          1.022700e+06   \nunique           NaN           NaN                   NaN   \ntop              NaN           NaN                   NaN   \nfreq             NaN           NaN                   NaN   \nmean    3.333796e+00  5.113495e+05          2.720187e+02   \nstd     5.245389e+00  2.952282e+05          8.384982e+00   \nmin     0.000000e+00  0.000000e+00          2.328000e+02   \n25%     0.000000e+00  2.556748e+05          2.663000e+02   \n50%     0.000000e+00  5.113495e+05          2.722000e+02   \n75%     6.300000e+00  7.670242e+05          2.784000e+02   \nmax     2.260000e+01  1.022699e+06          2.983000e+02   \n        potential_evapotranspiration  mean_vapor_pressure_deficit  \\\ncount                   1.022700e+06                 1.022700e+06   \nunique                           NaN                          NaN   \ntop                              NaN                          NaN   \nfreq                             NaN                          NaN   \nmean                    3.943372e+00                 6.258550e-01   \nstd                     2.478664e+00                 5.233133e-01   \nmin                     0.000000e+00                 0.000000e+00   \n25%                     1.900000e+00                 2.100000e-01   \n50%                     3.500000e+00                 4.700000e-01   \n75%                     5.800000e+00                 9.300000e-01   \nmax                     1.510000e+01                 3.870000e+00   \n        relative_humidity_rmax  relative_humidity_rmin  precipitation_amount  \\\ncount             1.022700e+06            1.022700e+06          1.022700e+06   \nunique                     NaN                     NaN                   NaN   \ntop                        NaN                     NaN                   NaN   \nfreq                       NaN                     NaN                   NaN   \nmean              7.123571e+01            3.578010e+01          2.689152e+00   \nstd               2.030150e+01            1.888091e+01          7.456402e+00   \nmin               8.200000e+00            1.000000e+00          0.000000e+00   \n25%               5.560000e+01            2.130000e+01          0.000000e+00   \n50%               7.240000e+01            3.160000e+01          0.000000e+00   \n75%               8.820001e+01            4.740000e+01          2.200000e+00   \nmax               1.000000e+02            1.000000e+02          5.042000e+02   \n        air_temperature_tmmx    wind_speed     elevation         slope  \\\ncount           1.022700e+06  1.022700e+06  1.022700e+06  1.022700e+06   \nunique                   NaN           NaN           NaN           NaN   \ntop                      NaN           NaN           NaN           NaN   \nfreq                     NaN           NaN           NaN           NaN   \nmean            2.837481e+02  4.214964e+00  2.397170e+03  6.243769e+01   \nstd             9.912702e+00  2.043559e+00  6.647262e+02  1.650521e+01   \nmin             2.444000e+02  5.000000e-01  7.584437e+02  4.277402e+00   \n25%             2.759000e+02  2.800000e+00  1.948688e+03  5.213456e+01   \n50%             2.831000e+02  3.700000e+00  2.481006e+03  6.768107e+01   \n75%             2.920000e+02  5.200000e+00  2.895791e+03  7.504661e+01   \nmax             3.144000e+02  1.860000e+01  3.823385e+03  8.368555e+01   \n           curvature        aspect      eastness     northness         SWE_1  \\\ncount   1.022700e+06  1.022700e+06  1.022700e+06  1.022700e+06  1.022457e+06   \nunique           NaN           NaN           NaN           NaN           NaN   \ntop              NaN           NaN           NaN           NaN           NaN   \nfreq             NaN           NaN           NaN           NaN           NaN   \nmean   -3.909783e+03  1.722213e+02  6.965357e-02 -4.509867e-02  5.046829e+01   \nstd     4.385982e+03  1.031039e+02  5.171924e-01  6.412035e-01  9.547557e+01   \nmin    -1.917768e+04  4.159291e-01 -7.853438e-01 -7.853694e-01  0.000000e+00   \n25%    -6.479865e+03  9.217068e+01 -3.907275e-01 -7.356204e-01  0.000000e+00   \n50%    -3.710969e+03  1.691301e+02  1.334633e-01 -1.913248e-01  0.000000e+00   \n75%    -5.754078e+02  2.498582e+02  5.767317e-01  6.495535e-01  3.500000e+01   \nmax     9.069726e+03  3.586563e+02  7.853980e-01  7.853850e-01  2.550000e+02   \n              Flag_1  air_temperature_tmmn_1  potential_evapotranspiration_1  \\\ncount   1.022457e+06            1.022457e+06                    1.022457e+06   \nunique           NaN                     NaN                             NaN   \ntop              NaN                     NaN                             NaN   \nfreq             NaN                     NaN                             NaN   \nmean    2.434439e+02            2.720198e+02                    3.943422e+00   \nstd     5.314013e+00            8.385519e+00                    2.478670e+00   \nmin     2.410000e+02            2.328000e+02                    0.000000e+00   \n25%     2.410000e+02            2.663000e+02                    1.900000e+00   \n50%     2.410000e+02            2.722000e+02                    3.500000e+00   \n75%     2.410000e+02            2.784000e+02                    5.800000e+00   \nmax     2.550000e+02            2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\ncount                    1.022457e+06              1.022457e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.259842e-01              7.123178e+01   \nstd                      5.233073e-01              2.030135e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.560000e+01   \n50%                      4.700000e-01              7.240000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_1  precipitation_amount_1  \\\ncount               1.022457e+06            1.022457e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.577455e+01            2.688369e+00   \nstd                 1.887860e+01            7.455937e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.740000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_1  wind_speed_1         SWE_2        Flag_2  \\\ncount             1.022457e+06  1.022457e+06  1.022214e+06  1.022214e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837507e+02  4.214984e+00  5.047216e+01  2.434441e+02   \nstd               9.912255e+00  2.043594e+00  9.547914e+01  5.314206e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  3.500000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  2.550000e+02  2.550000e+02   \n        air_temperature_tmmn_2  potential_evapotranspiration_2  \\\ncount             1.022214e+06                    1.022214e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720209e+02                    3.943420e+00   \nstd               8.385815e+00                    2.478640e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_2  relative_humidity_rmax_2  \\\ncount                    1.022214e+06              1.022214e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.261075e-01              7.122720e+01   \nstd                      5.233070e-01              2.030094e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.560000e+01   \n50%                      4.700000e-01              7.240000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_2  precipitation_amount_2  \\\ncount               1.022214e+06            1.022214e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.576907e+01            2.687716e+00   \nstd                 1.887661e+01            7.456001e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.740000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_2  wind_speed_2         SWE_3        Flag_3  \\\ncount             1.022214e+06  1.022214e+06  1.021971e+06  1.021971e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837536e+02  4.214784e+00  5.047569e+01  2.434443e+02   \nstd               9.911446e+00  2.043331e+00  9.548285e+01  5.314398e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  3.500000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  2.550000e+02  2.550000e+02   \n        air_temperature_tmmn_3  potential_evapotranspiration_3  \\\ncount             1.021971e+06                    1.021971e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720225e+02                    3.943376e+00   \nstd               8.385741e+00                    2.478685e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\ncount                    1.021971e+06              1.021971e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.262307e-01              7.122289e+01   \nstd                      5.233067e-01              2.030066e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.550000e+01   \n50%                      4.700000e-01              7.230000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_3  precipitation_amount_3  \\\ncount               1.021971e+06            1.021971e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.576342e+01            2.686752e+00   \nstd                 1.887456e+01            7.455918e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.730000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_3  wind_speed_3         SWE_4        Flag_4  \\\ncount             1.021971e+06  1.021971e+06  1.021728e+06  1.021728e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837567e+02  4.214625e+00  5.047501e+01  2.434443e+02   \nstd               9.910225e+00  2.043209e+00  9.548223e+01  5.314356e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  3.500000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  2.550000e+02  2.550000e+02   \n        air_temperature_tmmn_4  potential_evapotranspiration_4  \\\ncount             1.021728e+06                    1.021728e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720240e+02                    3.943264e+00   \nstd               8.385866e+00                    2.478656e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_4  relative_humidity_rmax_4  \\\ncount                    1.021728e+06              1.021728e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.263553e-01              7.121851e+01   \nstd                      5.233051e-01              2.030000e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.550000e+01   \n50%                      4.700000e-01              7.230000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_4  precipitation_amount_4  \\\ncount               1.021728e+06            1.021728e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.575787e+01            2.686033e+00   \nstd                 1.887263e+01            7.455973e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.730000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_4  wind_speed_4         SWE_5        Flag_5  \\\ncount             1.021728e+06  1.021728e+06  1.021485e+06  1.021485e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837597e+02  4.214386e+00  5.047484e+01  2.434443e+02   \nstd               9.909216e+00  2.042915e+00  9.548200e+01  5.314338e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  3.500000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  2.550000e+02  2.550000e+02   \n        air_temperature_tmmn_5  potential_evapotranspiration_5  \\\ncount             1.021485e+06                    1.021485e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720251e+02                    3.943198e+00   \nstd               8.386260e+00                    2.478648e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\ncount                    1.021485e+06              1.021485e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.264743e-01              7.121428e+01   \nstd                      5.233079e-01              2.029947e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.550000e+01   \n50%                      4.700000e-01              7.230000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_5  precipitation_amount_5  \\\ncount               1.021485e+06            1.021485e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.575236e+01            2.684510e+00   \nstd                 1.887073e+01            7.454676e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.730000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_5  wind_speed_5         SWE_6        Flag_6  \\\ncount             1.021485e+06  1.021485e+06  1.021242e+06  1.021242e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837628e+02  4.213888e+00  5.046933e+01  2.434440e+02   \nstd               9.908198e+00  2.042324e+00  9.547787e+01  5.314084e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  3.500000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  2.550000e+02  2.550000e+02   \n        air_temperature_tmmn_6  potential_evapotranspiration_6  \\\ncount             1.021242e+06                    1.021242e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720261e+02                    3.943110e+00   \nstd               8.386646e+00                    2.478642e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_6  relative_humidity_rmax_6  \\\ncount                    1.021242e+06              1.021242e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.265698e-01              7.120906e+01   \nstd                      5.233230e-01              2.029860e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.550000e+01   \n50%                      4.700000e-01              7.230000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_6  precipitation_amount_6  \\\ncount               1.021242e+06            1.021242e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.574670e+01            2.683368e+00   \nstd                 1.886860e+01            7.454296e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.730000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_6  wind_speed_6         SWE_7        Flag_7  \\\ncount             1.021242e+06  1.021242e+06  1.020999e+06  1.020999e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837659e+02  4.213170e+00  5.046308e+01  2.434436e+02   \nstd               9.907047e+00  2.041234e+00  9.547252e+01  5.313772e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  3.500000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  2.550000e+02  2.550000e+02   \n        air_temperature_tmmn_7  potential_evapotranspiration_7  \\\ncount             1.020999e+06                    1.020999e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720272e+02                    3.943113e+00   \nstd               8.386879e+00                    2.478654e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\ncount                    1.020999e+06              1.020999e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.266652e-01              7.120386e+01   \nstd                      5.233356e-01              2.029766e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.550000e+01   \n50%                      4.700000e-01              7.230000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_7  precipitation_amount_7  \\\ncount               1.020999e+06            1.020999e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.574126e+01            2.681174e+00   \nstd                 1.886665e+01            7.449998e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.120000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.730000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_7  wind_speed_7  \ncount             1.020999e+06  1.020999e+06  \nunique                     NaN           NaN  \ntop                        NaN           NaN  \nfreq                       NaN           NaN  \nmean              2.837691e+02  4.212599e+00  \nstd               9.905842e+00  2.040713e+00  \nmin               2.444000e+02  5.000000e-01  \n25%               2.759000e+02  2.800000e+00  \n50%               2.831000e+02  3.700000e+00  \n75%               2.920000e+02  5.200000e+00  \nmax               3.144000e+02  1.860000e+01  \n",
  "history_begin_time" : 1697419662830,
  "history_end_time" : 1697419676737,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "qPiYTn1ll4ui",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\n\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series.csv'\n\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_bak.csv'\n\ndef convert_to_time_series():\n  columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n  'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  'relative_humidity_rmax', 'relative_humidity_rmin',\n  'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n  # Read the cleaned ready CSV and DEM slope CSV\n  df = pd.read_csv(current_ready_csv_path)\n  # df['location'] = df['lat'].astype(str) + ',' + df['lon'].astype(str)\n  # unique_location_pairs = df.drop_duplicates(subset='location')[['lat', 'lon']]\n\n  # print(unique_location_pairs)\n  # unique_date = df.drop_duplicates(subset='date')[['date']]\n  # print(unique_date)\n\n  # add a 7 days time series to each row\n  df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n  # Group the data by 'lat' and 'lon'\n  grouped = df.groupby(['lat', 'lon'])\n  \n  # fill in the missing values of AMSR and gridMet using polynomial values\n  # Function to perform polynomial interpolation\n  def interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    mask = int(y) > 240\n\n    # Perform interpolation\n    y_interp = np.interp(x, x[~mask], y[~mask])\n\n    # Replace missing values with interpolated values\n    df[column_name] = y_interp\n\n  # Group by location and apply interpolation for each column\n  \n  for name, group in grouped:\n    interpolate_missing_inplace(group, 'SWE')\n    print(\"interpolated group: \", group)\n\n  \n\n  # Create a new DataFrame to store the time series data for each location\n  result = pd.DataFrame()\n\n  # Define the number of days to consider (7 days in this case)\n  num_days = 7\n\n  # ['date', 'lat', 'lon', 'SWE', 'Flag', 'air_temperature_tmmn',\n  # 'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  # 'relative_humidity_rmax', 'relative_humidity_rmin',\n  # 'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',\n  # 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness']\n  \n\n  for name, group in grouped:\n      group = group.set_index('date')\n      for day in range(1, num_days + 1):\n        for target_col in columns_to_be_time_series:\n          new_column_name = f'{target_col}_{day}'\n          group[new_column_name] = group[target_col].shift(day)\n      result = pd.concat([result, group], axis=0)\n\n  # Reset the index of the result DataFrame\n  result = result.reset_index()\n\n  print(result.describe)\n\n  result.to_csv(target_time_series_csv_path, index=False)\n\n#convert_to_time_series()\n\ndf = pd.read_csv(target_time_series_csv_path)\nshutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\nprint(df.columns)\n\ndf.head()\n\npd.set_option('display.max_columns', None)\ndescription = df.describe(include='all')\n# Print the description\nprint(description)\n\n",
  "history_output" : "today date = 2023-10-16\ntest start date:  2023-05-17\ntest end date:  2023-10-16\n/home/chetana\nIndex(['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'Unnamed: 0',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'elevation', 'slope', 'curvature',\n       'aspect', 'eastness', 'northness', 'SWE_1', 'Flag_1',\n       'air_temperature_tmmn_1', 'potential_evapotranspiration_1',\n       'mean_vapor_pressure_deficit_1', 'relative_humidity_rmax_1',\n       'relative_humidity_rmin_1', 'precipitation_amount_1',\n       'air_temperature_tmmx_1', 'wind_speed_1', 'SWE_2', 'Flag_2',\n       'air_temperature_tmmn_2', 'potential_evapotranspiration_2',\n       'mean_vapor_pressure_deficit_2', 'relative_humidity_rmax_2',\n       'relative_humidity_rmin_2', 'precipitation_amount_2',\n       'air_temperature_tmmx_2', 'wind_speed_2', 'SWE_3', 'Flag_3',\n       'air_temperature_tmmn_3', 'potential_evapotranspiration_3',\n       'mean_vapor_pressure_deficit_3', 'relative_humidity_rmax_3',\n       'relative_humidity_rmin_3', 'precipitation_amount_3',\n       'air_temperature_tmmx_3', 'wind_speed_3', 'SWE_4', 'Flag_4',\n       'air_temperature_tmmn_4', 'potential_evapotranspiration_4',\n       'mean_vapor_pressure_deficit_4', 'relative_humidity_rmax_4',\n       'relative_humidity_rmin_4', 'precipitation_amount_4',\n       'air_temperature_tmmx_4', 'wind_speed_4', 'SWE_5', 'Flag_5',\n       'air_temperature_tmmn_5', 'potential_evapotranspiration_5',\n       'mean_vapor_pressure_deficit_5', 'relative_humidity_rmax_5',\n       'relative_humidity_rmin_5', 'precipitation_amount_5',\n       'air_temperature_tmmx_5', 'wind_speed_5', 'SWE_6', 'Flag_6',\n       'air_temperature_tmmn_6', 'potential_evapotranspiration_6',\n       'mean_vapor_pressure_deficit_6', 'relative_humidity_rmax_6',\n       'relative_humidity_rmin_6', 'precipitation_amount_6',\n       'air_temperature_tmmx_6', 'wind_speed_6', 'SWE_7', 'Flag_7',\n       'air_temperature_tmmn_7', 'potential_evapotranspiration_7',\n       'mean_vapor_pressure_deficit_7', 'relative_humidity_rmax_7',\n       'relative_humidity_rmin_7', 'precipitation_amount_7',\n       'air_temperature_tmmx_7', 'wind_speed_7'],\n      dtype='object')\n              date           lat           lon           SWE          Flag  \\\ncount      1022700  1.022700e+06  1.022700e+06  1.022700e+06  1.022700e+06   \nunique        1461           NaN           NaN           NaN           NaN   \ntop     2019-01-01           NaN           NaN           NaN           NaN   \nfreq           700           NaN           NaN           NaN           NaN   \nmean           NaN  4.165838e+01 -1.141534e+02  5.046323e+01  2.434436e+02   \nstd            NaN  3.632464e+00  5.423376e+00  9.547185e+01  5.313797e+00   \nmin            NaN  3.335825e+01 -1.234486e+02  0.000000e+00  2.410000e+02   \n25%            NaN  3.891814e+01 -1.197812e+02  0.000000e+00  2.410000e+02   \n50%            NaN  4.107190e+01 -1.137737e+02  0.000000e+00  2.410000e+02   \n75%            NaN  4.461398e+01 -1.100367e+02  3.500000e+01  2.410000e+02   \nmax            NaN  4.897107e+01 -1.051948e+02  2.550000e+02  2.550000e+02   \n           swe_value    Unnamed: 0  air_temperature_tmmn  \\\ncount   1.008700e+06  1.022700e+06          1.022700e+06   \nunique           NaN           NaN                   NaN   \ntop              NaN           NaN                   NaN   \nfreq             NaN           NaN                   NaN   \nmean    3.333796e+00  5.113495e+05          2.720187e+02   \nstd     5.245389e+00  2.952282e+05          8.384982e+00   \nmin     0.000000e+00  0.000000e+00          2.328000e+02   \n25%     0.000000e+00  2.556748e+05          2.663000e+02   \n50%     0.000000e+00  5.113495e+05          2.722000e+02   \n75%     6.300000e+00  7.670242e+05          2.784000e+02   \nmax     2.260000e+01  1.022699e+06          2.983000e+02   \n        potential_evapotranspiration  mean_vapor_pressure_deficit  \\\ncount                   1.022700e+06                 1.022700e+06   \nunique                           NaN                          NaN   \ntop                              NaN                          NaN   \nfreq                             NaN                          NaN   \nmean                    3.943372e+00                 6.258550e-01   \nstd                     2.478664e+00                 5.233133e-01   \nmin                     0.000000e+00                 0.000000e+00   \n25%                     1.900000e+00                 2.100000e-01   \n50%                     3.500000e+00                 4.700000e-01   \n75%                     5.800000e+00                 9.300000e-01   \nmax                     1.510000e+01                 3.870000e+00   \n        relative_humidity_rmax  relative_humidity_rmin  precipitation_amount  \\\ncount             1.022700e+06            1.022700e+06          1.022700e+06   \nunique                     NaN                     NaN                   NaN   \ntop                        NaN                     NaN                   NaN   \nfreq                       NaN                     NaN                   NaN   \nmean              7.123571e+01            3.578010e+01          2.689152e+00   \nstd               2.030150e+01            1.888091e+01          7.456402e+00   \nmin               8.200000e+00            1.000000e+00          0.000000e+00   \n25%               5.560000e+01            2.130000e+01          0.000000e+00   \n50%               7.240000e+01            3.160000e+01          0.000000e+00   \n75%               8.820001e+01            4.740000e+01          2.200000e+00   \nmax               1.000000e+02            1.000000e+02          5.042000e+02   \n        air_temperature_tmmx    wind_speed     elevation         slope  \\\ncount           1.022700e+06  1.022700e+06  1.022700e+06  1.022700e+06   \nunique                   NaN           NaN           NaN           NaN   \ntop                      NaN           NaN           NaN           NaN   \nfreq                     NaN           NaN           NaN           NaN   \nmean            2.837481e+02  4.214964e+00  2.397170e+03  6.243769e+01   \nstd             9.912702e+00  2.043559e+00  6.647262e+02  1.650521e+01   \nmin             2.444000e+02  5.000000e-01  7.584437e+02  4.277402e+00   \n25%             2.759000e+02  2.800000e+00  1.948688e+03  5.213456e+01   \n50%             2.831000e+02  3.700000e+00  2.481006e+03  6.768107e+01   \n75%             2.920000e+02  5.200000e+00  2.895791e+03  7.504661e+01   \nmax             3.144000e+02  1.860000e+01  3.823385e+03  8.368555e+01   \n           curvature        aspect      eastness     northness         SWE_1  \\\ncount   1.022700e+06  1.022700e+06  1.022700e+06  1.022700e+06  1.022457e+06   \nunique           NaN           NaN           NaN           NaN           NaN   \ntop              NaN           NaN           NaN           NaN           NaN   \nfreq             NaN           NaN           NaN           NaN           NaN   \nmean   -3.909783e+03  1.722213e+02  6.965357e-02 -4.509867e-02  5.046829e+01   \nstd     4.385982e+03  1.031039e+02  5.171924e-01  6.412035e-01  9.547557e+01   \nmin    -1.917768e+04  4.159291e-01 -7.853438e-01 -7.853694e-01  0.000000e+00   \n25%    -6.479865e+03  9.217068e+01 -3.907275e-01 -7.356204e-01  0.000000e+00   \n50%    -3.710969e+03  1.691301e+02  1.334633e-01 -1.913248e-01  0.000000e+00   \n75%    -5.754078e+02  2.498582e+02  5.767317e-01  6.495535e-01  3.500000e+01   \nmax     9.069726e+03  3.586563e+02  7.853980e-01  7.853850e-01  2.550000e+02   \n              Flag_1  air_temperature_tmmn_1  potential_evapotranspiration_1  \\\ncount   1.022457e+06            1.022457e+06                    1.022457e+06   \nunique           NaN                     NaN                             NaN   \ntop              NaN                     NaN                             NaN   \nfreq             NaN                     NaN                             NaN   \nmean    2.434439e+02            2.720198e+02                    3.943422e+00   \nstd     5.314013e+00            8.385519e+00                    2.478670e+00   \nmin     2.410000e+02            2.328000e+02                    0.000000e+00   \n25%     2.410000e+02            2.663000e+02                    1.900000e+00   \n50%     2.410000e+02            2.722000e+02                    3.500000e+00   \n75%     2.410000e+02            2.784000e+02                    5.800000e+00   \nmax     2.550000e+02            2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\ncount                    1.022457e+06              1.022457e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.259842e-01              7.123178e+01   \nstd                      5.233073e-01              2.030135e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.560000e+01   \n50%                      4.700000e-01              7.240000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_1  precipitation_amount_1  \\\ncount               1.022457e+06            1.022457e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.577455e+01            2.688369e+00   \nstd                 1.887860e+01            7.455937e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.740000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_1  wind_speed_1         SWE_2        Flag_2  \\\ncount             1.022457e+06  1.022457e+06  1.022214e+06  1.022214e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837507e+02  4.214984e+00  5.047216e+01  2.434441e+02   \nstd               9.912255e+00  2.043594e+00  9.547914e+01  5.314206e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  3.500000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  2.550000e+02  2.550000e+02   \n        air_temperature_tmmn_2  potential_evapotranspiration_2  \\\ncount             1.022214e+06                    1.022214e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720209e+02                    3.943420e+00   \nstd               8.385815e+00                    2.478640e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_2  relative_humidity_rmax_2  \\\ncount                    1.022214e+06              1.022214e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.261075e-01              7.122720e+01   \nstd                      5.233070e-01              2.030094e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.560000e+01   \n50%                      4.700000e-01              7.240000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_2  precipitation_amount_2  \\\ncount               1.022214e+06            1.022214e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.576907e+01            2.687716e+00   \nstd                 1.887661e+01            7.456001e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.740000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_2  wind_speed_2         SWE_3        Flag_3  \\\ncount             1.022214e+06  1.022214e+06  1.021971e+06  1.021971e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837536e+02  4.214784e+00  5.047569e+01  2.434443e+02   \nstd               9.911446e+00  2.043331e+00  9.548285e+01  5.314398e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  3.500000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  2.550000e+02  2.550000e+02   \n        air_temperature_tmmn_3  potential_evapotranspiration_3  \\\ncount             1.021971e+06                    1.021971e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720225e+02                    3.943376e+00   \nstd               8.385741e+00                    2.478685e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\ncount                    1.021971e+06              1.021971e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.262307e-01              7.122289e+01   \nstd                      5.233067e-01              2.030066e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.550000e+01   \n50%                      4.700000e-01              7.230000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_3  precipitation_amount_3  \\\ncount               1.021971e+06            1.021971e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.576342e+01            2.686752e+00   \nstd                 1.887456e+01            7.455918e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.730000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_3  wind_speed_3         SWE_4        Flag_4  \\\ncount             1.021971e+06  1.021971e+06  1.021728e+06  1.021728e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837567e+02  4.214625e+00  5.047501e+01  2.434443e+02   \nstd               9.910225e+00  2.043209e+00  9.548223e+01  5.314356e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  3.500000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  2.550000e+02  2.550000e+02   \n        air_temperature_tmmn_4  potential_evapotranspiration_4  \\\ncount             1.021728e+06                    1.021728e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720240e+02                    3.943264e+00   \nstd               8.385866e+00                    2.478656e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_4  relative_humidity_rmax_4  \\\ncount                    1.021728e+06              1.021728e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.263553e-01              7.121851e+01   \nstd                      5.233051e-01              2.030000e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.550000e+01   \n50%                      4.700000e-01              7.230000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_4  precipitation_amount_4  \\\ncount               1.021728e+06            1.021728e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.575787e+01            2.686033e+00   \nstd                 1.887263e+01            7.455973e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.730000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_4  wind_speed_4         SWE_5        Flag_5  \\\ncount             1.021728e+06  1.021728e+06  1.021485e+06  1.021485e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837597e+02  4.214386e+00  5.047484e+01  2.434443e+02   \nstd               9.909216e+00  2.042915e+00  9.548200e+01  5.314338e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  3.500000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  2.550000e+02  2.550000e+02   \n        air_temperature_tmmn_5  potential_evapotranspiration_5  \\\ncount             1.021485e+06                    1.021485e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720251e+02                    3.943198e+00   \nstd               8.386260e+00                    2.478648e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\ncount                    1.021485e+06              1.021485e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.264743e-01              7.121428e+01   \nstd                      5.233079e-01              2.029947e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.550000e+01   \n50%                      4.700000e-01              7.230000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_5  precipitation_amount_5  \\\ncount               1.021485e+06            1.021485e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.575236e+01            2.684510e+00   \nstd                 1.887073e+01            7.454676e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.730000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_5  wind_speed_5         SWE_6        Flag_6  \\\ncount             1.021485e+06  1.021485e+06  1.021242e+06  1.021242e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837628e+02  4.213888e+00  5.046933e+01  2.434440e+02   \nstd               9.908198e+00  2.042324e+00  9.547787e+01  5.314084e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  3.500000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  2.550000e+02  2.550000e+02   \n        air_temperature_tmmn_6  potential_evapotranspiration_6  \\\ncount             1.021242e+06                    1.021242e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720261e+02                    3.943110e+00   \nstd               8.386646e+00                    2.478642e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_6  relative_humidity_rmax_6  \\\ncount                    1.021242e+06              1.021242e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.265698e-01              7.120906e+01   \nstd                      5.233230e-01              2.029860e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.550000e+01   \n50%                      4.700000e-01              7.230000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_6  precipitation_amount_6  \\\ncount               1.021242e+06            1.021242e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.574670e+01            2.683368e+00   \nstd                 1.886860e+01            7.454296e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.730000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_6  wind_speed_6         SWE_7        Flag_7  \\\ncount             1.021242e+06  1.021242e+06  1.020999e+06  1.020999e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837659e+02  4.213170e+00  5.046308e+01  2.434436e+02   \nstd               9.907047e+00  2.041234e+00  9.547252e+01  5.313772e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  3.500000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  2.550000e+02  2.550000e+02   \n        air_temperature_tmmn_7  potential_evapotranspiration_7  \\\ncount             1.020999e+06                    1.020999e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720272e+02                    3.943113e+00   \nstd               8.386879e+00                    2.478654e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\ncount                    1.020999e+06              1.020999e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.266652e-01              7.120386e+01   \nstd                      5.233356e-01              2.029766e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.550000e+01   \n50%                      4.700000e-01              7.230000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_7  precipitation_amount_7  \\\ncount               1.020999e+06            1.020999e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.574126e+01            2.681174e+00   \nstd                 1.886665e+01            7.449998e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.120000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.730000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_7  wind_speed_7  \ncount             1.020999e+06  1.020999e+06  \nunique                     NaN           NaN  \ntop                        NaN           NaN  \nfreq                       NaN           NaN  \nmean              2.837691e+02  4.212599e+00  \nstd               9.905842e+00  2.040713e+00  \nmin               2.444000e+02  5.000000e-01  \n25%               2.759000e+02  2.800000e+00  \n50%               2.831000e+02  3.700000e+00  \n75%               2.920000e+02  5.200000e+00  \nmax               3.144000e+02  1.860000e+01  \n",
  "history_begin_time" : 1697417341371,
  "history_end_time" : 1697417354956,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "2STbNnSQZ9G9",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\n\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series.csv'\n\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_bak.csv'\n\ndef convert_to_time_series():\n  columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n  'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  'relative_humidity_rmax', 'relative_humidity_rmin',\n  'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n  # Read the cleaned ready CSV and DEM slope CSV\n  df = pd.read_csv(current_ready_csv_path)\n  # df['location'] = df['lat'].astype(str) + ',' + df['lon'].astype(str)\n  # unique_location_pairs = df.drop_duplicates(subset='location')[['lat', 'lon']]\n\n  # print(unique_location_pairs)\n  # unique_date = df.drop_duplicates(subset='date')[['date']]\n  # print(unique_date)\n\n  # add a 7 days time series to each row\n  df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n  # Group the data by 'lat' and 'lon'\n  grouped = df.groupby(['lat', 'lon'])\n  \n  # fill in the missing values of AMSR and gridMet using polynomial values\n  # Function to perform polynomial interpolation\n  def interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    mask = int(y) > 240\n\n    # Perform interpolation\n    y_interp = np.interp(x, x[~mask], y[~mask])\n\n    # Replace missing values with interpolated values\n    df[column_name] = y_interp\n\n  # Group by location and apply interpolation for each column\n  \n  for name, group in grouped:\n    interpolate_missing_inplace(group, 'SWE')\n    print(group)\n\n  \n\n  # Create a new DataFrame to store the time series data for each location\n  result = pd.DataFrame()\n\n  # Define the number of days to consider (7 days in this case)\n  num_days = 7\n\n  # ['date', 'lat', 'lon', 'SWE', 'Flag', 'air_temperature_tmmn',\n  # 'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  # 'relative_humidity_rmax', 'relative_humidity_rmin',\n  # 'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',\n  # 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness']\n  \n\n  for name, group in grouped:\n      group = group.set_index('date')\n      for day in range(1, num_days + 1):\n        for target_col in columns_to_be_time_series:\n          new_column_name = f'{target_col}_{day}'\n          group[new_column_name] = group[target_col].shift(day)\n      result = pd.concat([result, group], axis=0)\n\n  # Reset the index of the result DataFrame\n  result = result.reset_index()\n\n  print(result.describe)\n\n  result.to_csv(target_time_series_csv_path, index=False)\n\n#convert_to_time_series()\n\ndf = pd.read_csv(target_time_series_csv_path)\nshutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\nprint(df.columns)\n\ndf.head()\n\npd.set_option('display.max_columns', None)\ndescription = df.describe(include='all')\n# Print the description\nprint(description)\n\n",
  "history_output" : "today date = 2023-10-16\ntest start date:  2023-05-17\ntest end date:  2023-10-16\n/home/chetana\nIndex(['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'Unnamed: 0',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'elevation', 'slope', 'curvature',\n       'aspect', 'eastness', 'northness', 'SWE_1', 'Flag_1',\n       'air_temperature_tmmn_1', 'potential_evapotranspiration_1',\n       'mean_vapor_pressure_deficit_1', 'relative_humidity_rmax_1',\n       'relative_humidity_rmin_1', 'precipitation_amount_1',\n       'air_temperature_tmmx_1', 'wind_speed_1', 'SWE_2', 'Flag_2',\n       'air_temperature_tmmn_2', 'potential_evapotranspiration_2',\n       'mean_vapor_pressure_deficit_2', 'relative_humidity_rmax_2',\n       'relative_humidity_rmin_2', 'precipitation_amount_2',\n       'air_temperature_tmmx_2', 'wind_speed_2', 'SWE_3', 'Flag_3',\n       'air_temperature_tmmn_3', 'potential_evapotranspiration_3',\n       'mean_vapor_pressure_deficit_3', 'relative_humidity_rmax_3',\n       'relative_humidity_rmin_3', 'precipitation_amount_3',\n       'air_temperature_tmmx_3', 'wind_speed_3', 'SWE_4', 'Flag_4',\n       'air_temperature_tmmn_4', 'potential_evapotranspiration_4',\n       'mean_vapor_pressure_deficit_4', 'relative_humidity_rmax_4',\n       'relative_humidity_rmin_4', 'precipitation_amount_4',\n       'air_temperature_tmmx_4', 'wind_speed_4', 'SWE_5', 'Flag_5',\n       'air_temperature_tmmn_5', 'potential_evapotranspiration_5',\n       'mean_vapor_pressure_deficit_5', 'relative_humidity_rmax_5',\n       'relative_humidity_rmin_5', 'precipitation_amount_5',\n       'air_temperature_tmmx_5', 'wind_speed_5', 'SWE_6', 'Flag_6',\n       'air_temperature_tmmn_6', 'potential_evapotranspiration_6',\n       'mean_vapor_pressure_deficit_6', 'relative_humidity_rmax_6',\n       'relative_humidity_rmin_6', 'precipitation_amount_6',\n       'air_temperature_tmmx_6', 'wind_speed_6', 'SWE_7', 'Flag_7',\n       'air_temperature_tmmn_7', 'potential_evapotranspiration_7',\n       'mean_vapor_pressure_deficit_7', 'relative_humidity_rmax_7',\n       'relative_humidity_rmin_7', 'precipitation_amount_7',\n       'air_temperature_tmmx_7', 'wind_speed_7'],\n      dtype='object')\n              date           lat           lon           SWE          Flag  \\\ncount      1022700  1.022700e+06  1.022700e+06  1.022700e+06  1.022700e+06   \nunique        1461           NaN           NaN           NaN           NaN   \ntop     2019-01-01           NaN           NaN           NaN           NaN   \nfreq           700           NaN           NaN           NaN           NaN   \nmean           NaN  4.165838e+01 -1.141534e+02  5.046323e+01  2.434436e+02   \nstd            NaN  3.632464e+00  5.423376e+00  9.547185e+01  5.313797e+00   \nmin            NaN  3.335825e+01 -1.234486e+02  0.000000e+00  2.410000e+02   \n25%            NaN  3.891814e+01 -1.197812e+02  0.000000e+00  2.410000e+02   \n50%            NaN  4.107190e+01 -1.137737e+02  0.000000e+00  2.410000e+02   \n75%            NaN  4.461398e+01 -1.100367e+02  3.500000e+01  2.410000e+02   \nmax            NaN  4.897107e+01 -1.051948e+02  2.550000e+02  2.550000e+02   \n           swe_value    Unnamed: 0  air_temperature_tmmn  \\\ncount   1.008700e+06  1.022700e+06          1.022700e+06   \nunique           NaN           NaN                   NaN   \ntop              NaN           NaN                   NaN   \nfreq             NaN           NaN                   NaN   \nmean    3.333796e+00  5.113495e+05          2.720187e+02   \nstd     5.245389e+00  2.952282e+05          8.384982e+00   \nmin     0.000000e+00  0.000000e+00          2.328000e+02   \n25%     0.000000e+00  2.556748e+05          2.663000e+02   \n50%     0.000000e+00  5.113495e+05          2.722000e+02   \n75%     6.300000e+00  7.670242e+05          2.784000e+02   \nmax     2.260000e+01  1.022699e+06          2.983000e+02   \n        potential_evapotranspiration  mean_vapor_pressure_deficit  \\\ncount                   1.022700e+06                 1.022700e+06   \nunique                           NaN                          NaN   \ntop                              NaN                          NaN   \nfreq                             NaN                          NaN   \nmean                    3.943372e+00                 6.258550e-01   \nstd                     2.478664e+00                 5.233133e-01   \nmin                     0.000000e+00                 0.000000e+00   \n25%                     1.900000e+00                 2.100000e-01   \n50%                     3.500000e+00                 4.700000e-01   \n75%                     5.800000e+00                 9.300000e-01   \nmax                     1.510000e+01                 3.870000e+00   \n        relative_humidity_rmax  relative_humidity_rmin  precipitation_amount  \\\ncount             1.022700e+06            1.022700e+06          1.022700e+06   \nunique                     NaN                     NaN                   NaN   \ntop                        NaN                     NaN                   NaN   \nfreq                       NaN                     NaN                   NaN   \nmean              7.123571e+01            3.578010e+01          2.689152e+00   \nstd               2.030150e+01            1.888091e+01          7.456402e+00   \nmin               8.200000e+00            1.000000e+00          0.000000e+00   \n25%               5.560000e+01            2.130000e+01          0.000000e+00   \n50%               7.240000e+01            3.160000e+01          0.000000e+00   \n75%               8.820001e+01            4.740000e+01          2.200000e+00   \nmax               1.000000e+02            1.000000e+02          5.042000e+02   \n        air_temperature_tmmx    wind_speed     elevation         slope  \\\ncount           1.022700e+06  1.022700e+06  1.022700e+06  1.022700e+06   \nunique                   NaN           NaN           NaN           NaN   \ntop                      NaN           NaN           NaN           NaN   \nfreq                     NaN           NaN           NaN           NaN   \nmean            2.837481e+02  4.214964e+00  2.397170e+03  6.243769e+01   \nstd             9.912702e+00  2.043559e+00  6.647262e+02  1.650521e+01   \nmin             2.444000e+02  5.000000e-01  7.584437e+02  4.277402e+00   \n25%             2.759000e+02  2.800000e+00  1.948688e+03  5.213456e+01   \n50%             2.831000e+02  3.700000e+00  2.481006e+03  6.768107e+01   \n75%             2.920000e+02  5.200000e+00  2.895791e+03  7.504661e+01   \nmax             3.144000e+02  1.860000e+01  3.823385e+03  8.368555e+01   \n           curvature        aspect      eastness     northness         SWE_1  \\\ncount   1.022700e+06  1.022700e+06  1.022700e+06  1.022700e+06  1.022457e+06   \nunique           NaN           NaN           NaN           NaN           NaN   \ntop              NaN           NaN           NaN           NaN           NaN   \nfreq             NaN           NaN           NaN           NaN           NaN   \nmean   -3.909783e+03  1.722213e+02  6.965357e-02 -4.509867e-02  5.046829e+01   \nstd     4.385982e+03  1.031039e+02  5.171924e-01  6.412035e-01  9.547557e+01   \nmin    -1.917768e+04  4.159291e-01 -7.853438e-01 -7.853694e-01  0.000000e+00   \n25%    -6.479865e+03  9.217068e+01 -3.907275e-01 -7.356204e-01  0.000000e+00   \n50%    -3.710969e+03  1.691301e+02  1.334633e-01 -1.913248e-01  0.000000e+00   \n75%    -5.754078e+02  2.498582e+02  5.767317e-01  6.495535e-01  3.500000e+01   \nmax     9.069726e+03  3.586563e+02  7.853980e-01  7.853850e-01  2.550000e+02   \n              Flag_1  air_temperature_tmmn_1  potential_evapotranspiration_1  \\\ncount   1.022457e+06            1.022457e+06                    1.022457e+06   \nunique           NaN                     NaN                             NaN   \ntop              NaN                     NaN                             NaN   \nfreq             NaN                     NaN                             NaN   \nmean    2.434439e+02            2.720198e+02                    3.943422e+00   \nstd     5.314013e+00            8.385519e+00                    2.478670e+00   \nmin     2.410000e+02            2.328000e+02                    0.000000e+00   \n25%     2.410000e+02            2.663000e+02                    1.900000e+00   \n50%     2.410000e+02            2.722000e+02                    3.500000e+00   \n75%     2.410000e+02            2.784000e+02                    5.800000e+00   \nmax     2.550000e+02            2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\ncount                    1.022457e+06              1.022457e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.259842e-01              7.123178e+01   \nstd                      5.233073e-01              2.030135e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.560000e+01   \n50%                      4.700000e-01              7.240000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_1  precipitation_amount_1  \\\ncount               1.022457e+06            1.022457e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.577455e+01            2.688369e+00   \nstd                 1.887860e+01            7.455937e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.740000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_1  wind_speed_1         SWE_2        Flag_2  \\\ncount             1.022457e+06  1.022457e+06  1.022214e+06  1.022214e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837507e+02  4.214984e+00  5.047216e+01  2.434441e+02   \nstd               9.912255e+00  2.043594e+00  9.547914e+01  5.314206e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  3.500000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  2.550000e+02  2.550000e+02   \n        air_temperature_tmmn_2  potential_evapotranspiration_2  \\\ncount             1.022214e+06                    1.022214e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720209e+02                    3.943420e+00   \nstd               8.385815e+00                    2.478640e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_2  relative_humidity_rmax_2  \\\ncount                    1.022214e+06              1.022214e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.261075e-01              7.122720e+01   \nstd                      5.233070e-01              2.030094e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.560000e+01   \n50%                      4.700000e-01              7.240000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_2  precipitation_amount_2  \\\ncount               1.022214e+06            1.022214e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.576907e+01            2.687716e+00   \nstd                 1.887661e+01            7.456001e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.740000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_2  wind_speed_2         SWE_3        Flag_3  \\\ncount             1.022214e+06  1.022214e+06  1.021971e+06  1.021971e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837536e+02  4.214784e+00  5.047569e+01  2.434443e+02   \nstd               9.911446e+00  2.043331e+00  9.548285e+01  5.314398e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  3.500000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  2.550000e+02  2.550000e+02   \n        air_temperature_tmmn_3  potential_evapotranspiration_3  \\\ncount             1.021971e+06                    1.021971e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720225e+02                    3.943376e+00   \nstd               8.385741e+00                    2.478685e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\ncount                    1.021971e+06              1.021971e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.262307e-01              7.122289e+01   \nstd                      5.233067e-01              2.030066e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.550000e+01   \n50%                      4.700000e-01              7.230000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_3  precipitation_amount_3  \\\ncount               1.021971e+06            1.021971e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.576342e+01            2.686752e+00   \nstd                 1.887456e+01            7.455918e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.730000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_3  wind_speed_3         SWE_4        Flag_4  \\\ncount             1.021971e+06  1.021971e+06  1.021728e+06  1.021728e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837567e+02  4.214625e+00  5.047501e+01  2.434443e+02   \nstd               9.910225e+00  2.043209e+00  9.548223e+01  5.314356e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  3.500000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  2.550000e+02  2.550000e+02   \n        air_temperature_tmmn_4  potential_evapotranspiration_4  \\\ncount             1.021728e+06                    1.021728e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720240e+02                    3.943264e+00   \nstd               8.385866e+00                    2.478656e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_4  relative_humidity_rmax_4  \\\ncount                    1.021728e+06              1.021728e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.263553e-01              7.121851e+01   \nstd                      5.233051e-01              2.030000e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.550000e+01   \n50%                      4.700000e-01              7.230000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_4  precipitation_amount_4  \\\ncount               1.021728e+06            1.021728e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.575787e+01            2.686033e+00   \nstd                 1.887263e+01            7.455973e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.730000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_4  wind_speed_4         SWE_5        Flag_5  \\\ncount             1.021728e+06  1.021728e+06  1.021485e+06  1.021485e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837597e+02  4.214386e+00  5.047484e+01  2.434443e+02   \nstd               9.909216e+00  2.042915e+00  9.548200e+01  5.314338e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  3.500000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  2.550000e+02  2.550000e+02   \n        air_temperature_tmmn_5  potential_evapotranspiration_5  \\\ncount             1.021485e+06                    1.021485e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720251e+02                    3.943198e+00   \nstd               8.386260e+00                    2.478648e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\ncount                    1.021485e+06              1.021485e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.264743e-01              7.121428e+01   \nstd                      5.233079e-01              2.029947e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.550000e+01   \n50%                      4.700000e-01              7.230000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_5  precipitation_amount_5  \\\ncount               1.021485e+06            1.021485e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.575236e+01            2.684510e+00   \nstd                 1.887073e+01            7.454676e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.730000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_5  wind_speed_5         SWE_6        Flag_6  \\\ncount             1.021485e+06  1.021485e+06  1.021242e+06  1.021242e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837628e+02  4.213888e+00  5.046933e+01  2.434440e+02   \nstd               9.908198e+00  2.042324e+00  9.547787e+01  5.314084e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  3.500000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  2.550000e+02  2.550000e+02   \n        air_temperature_tmmn_6  potential_evapotranspiration_6  \\\ncount             1.021242e+06                    1.021242e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720261e+02                    3.943110e+00   \nstd               8.386646e+00                    2.478642e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_6  relative_humidity_rmax_6  \\\ncount                    1.021242e+06              1.021242e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.265698e-01              7.120906e+01   \nstd                      5.233230e-01              2.029860e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.550000e+01   \n50%                      4.700000e-01              7.230000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_6  precipitation_amount_6  \\\ncount               1.021242e+06            1.021242e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.574670e+01            2.683368e+00   \nstd                 1.886860e+01            7.454296e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.730000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_6  wind_speed_6         SWE_7        Flag_7  \\\ncount             1.021242e+06  1.021242e+06  1.020999e+06  1.020999e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837659e+02  4.213170e+00  5.046308e+01  2.434436e+02   \nstd               9.907047e+00  2.041234e+00  9.547252e+01  5.313772e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  3.500000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  2.550000e+02  2.550000e+02   \n        air_temperature_tmmn_7  potential_evapotranspiration_7  \\\ncount             1.020999e+06                    1.020999e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720272e+02                    3.943113e+00   \nstd               8.386879e+00                    2.478654e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\ncount                    1.020999e+06              1.020999e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.266652e-01              7.120386e+01   \nstd                      5.233356e-01              2.029766e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.550000e+01   \n50%                      4.700000e-01              7.230000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_7  precipitation_amount_7  \\\ncount               1.020999e+06            1.020999e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.574126e+01            2.681174e+00   \nstd                 1.886665e+01            7.449998e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.120000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.730000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_7  wind_speed_7  \ncount             1.020999e+06  1.020999e+06  \nunique                     NaN           NaN  \ntop                        NaN           NaN  \nfreq                       NaN           NaN  \nmean              2.837691e+02  4.212599e+00  \nstd               9.905842e+00  2.040713e+00  \nmin               2.444000e+02  5.000000e-01  \n25%               2.759000e+02  2.800000e+00  \n50%               2.831000e+02  3.700000e+00  \n75%               2.920000e+02  5.200000e+00  \nmax               3.144000e+02  1.860000e+01  \n",
  "history_begin_time" : 1697416678256,
  "history_end_time" : 1697416691930,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "d7aGxJ76aJ9d",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\n\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series.csv'\n\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_bak.csv'\n\ndef convert_to_time_series():\n  columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n  'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  'relative_humidity_rmax', 'relative_humidity_rmin',\n  'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n  # Read the cleaned ready CSV and DEM slope CSV\n  df = pd.read_csv(current_ready_csv_path)\n  # df['location'] = df['lat'].astype(str) + ',' + df['lon'].astype(str)\n  # unique_location_pairs = df.drop_duplicates(subset='location')[['lat', 'lon']]\n\n  # print(unique_location_pairs)\n  # unique_date = df.drop_duplicates(subset='date')[['date']]\n  # print(unique_date)\n\n  # add a 7 days time series to each row\n  df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n  # Group the data by 'lat' and 'lon'\n  grouped = df.groupby(['lat', 'lon'])\n  \n  # fill in the missing values of AMSR and gridMet using polynomial values\n  # Function to perform polynomial interpolation\n  def interpolate_missing_inplace(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    mask = int(y) > 240\n\n    # Perform interpolation\n    y_interp = np.interp(x, x[~mask], y[~mask])\n\n    # Replace missing values with interpolated values\n    df[column_name] = y_interp\n\n  # Group by location and apply interpolation for each column\n  \n  for name, group in grouped:\n    interpolate_missing_inplace(group, 'SWE')\n\n  \n\n  # Create a new DataFrame to store the time series data for each location\n  result = pd.DataFrame()\n\n  # Define the number of days to consider (7 days in this case)\n  num_days = 7\n\n  # ['date', 'lat', 'lon', 'SWE', 'Flag', 'air_temperature_tmmn',\n  # 'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  # 'relative_humidity_rmax', 'relative_humidity_rmin',\n  # 'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',\n  # 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness']\n  \n\n  for name, group in grouped:\n      group = group.set_index('date')\n      for day in range(1, num_days + 1):\n        for target_col in columns_to_be_time_series:\n          new_column_name = f'{target_col}_{day}'\n          group[new_column_name] = group[target_col].shift(day)\n      result = pd.concat([result, group], axis=0)\n\n  # Reset the index of the result DataFrame\n  result = result.reset_index()\n\n  print(result.describe)\n\n  result.to_csv(target_time_series_csv_path, index=False)\n\n#convert_to_time_series()\n\ndf = pd.read_csv(target_time_series_csv_path)\nshutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\nprint(df.columns)\n\ndf.head()\n\npd.set_option('display.max_columns', None)\ndescription = df.describe(include='all')\n# Print the description\nprint(description)\n\n",
  "history_output" : "today date = 2023-10-16\ntest start date:  2023-05-17\ntest end date:  2023-10-16\n/home/chetana\nIndex(['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'Unnamed: 0',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'elevation', 'slope', 'curvature',\n       'aspect', 'eastness', 'northness', 'SWE_1', 'Flag_1',\n       'air_temperature_tmmn_1', 'potential_evapotranspiration_1',\n       'mean_vapor_pressure_deficit_1', 'relative_humidity_rmax_1',\n       'relative_humidity_rmin_1', 'precipitation_amount_1',\n       'air_temperature_tmmx_1', 'wind_speed_1', 'SWE_2', 'Flag_2',\n       'air_temperature_tmmn_2', 'potential_evapotranspiration_2',\n       'mean_vapor_pressure_deficit_2', 'relative_humidity_rmax_2',\n       'relative_humidity_rmin_2', 'precipitation_amount_2',\n       'air_temperature_tmmx_2', 'wind_speed_2', 'SWE_3', 'Flag_3',\n       'air_temperature_tmmn_3', 'potential_evapotranspiration_3',\n       'mean_vapor_pressure_deficit_3', 'relative_humidity_rmax_3',\n       'relative_humidity_rmin_3', 'precipitation_amount_3',\n       'air_temperature_tmmx_3', 'wind_speed_3', 'SWE_4', 'Flag_4',\n       'air_temperature_tmmn_4', 'potential_evapotranspiration_4',\n       'mean_vapor_pressure_deficit_4', 'relative_humidity_rmax_4',\n       'relative_humidity_rmin_4', 'precipitation_amount_4',\n       'air_temperature_tmmx_4', 'wind_speed_4', 'SWE_5', 'Flag_5',\n       'air_temperature_tmmn_5', 'potential_evapotranspiration_5',\n       'mean_vapor_pressure_deficit_5', 'relative_humidity_rmax_5',\n       'relative_humidity_rmin_5', 'precipitation_amount_5',\n       'air_temperature_tmmx_5', 'wind_speed_5', 'SWE_6', 'Flag_6',\n       'air_temperature_tmmn_6', 'potential_evapotranspiration_6',\n       'mean_vapor_pressure_deficit_6', 'relative_humidity_rmax_6',\n       'relative_humidity_rmin_6', 'precipitation_amount_6',\n       'air_temperature_tmmx_6', 'wind_speed_6', 'SWE_7', 'Flag_7',\n       'air_temperature_tmmn_7', 'potential_evapotranspiration_7',\n       'mean_vapor_pressure_deficit_7', 'relative_humidity_rmax_7',\n       'relative_humidity_rmin_7', 'precipitation_amount_7',\n       'air_temperature_tmmx_7', 'wind_speed_7'],\n      dtype='object')\n              date           lat           lon           SWE          Flag  \\\ncount      1022700  1.022700e+06  1.022700e+06  1.022700e+06  1.022700e+06   \nunique        1461           NaN           NaN           NaN           NaN   \ntop     2019-01-01           NaN           NaN           NaN           NaN   \nfreq           700           NaN           NaN           NaN           NaN   \nmean           NaN  4.165838e+01 -1.141534e+02  5.046323e+01  2.434436e+02   \nstd            NaN  3.632464e+00  5.423376e+00  9.547185e+01  5.313797e+00   \nmin            NaN  3.335825e+01 -1.234486e+02  0.000000e+00  2.410000e+02   \n25%            NaN  3.891814e+01 -1.197812e+02  0.000000e+00  2.410000e+02   \n50%            NaN  4.107190e+01 -1.137737e+02  0.000000e+00  2.410000e+02   \n75%            NaN  4.461398e+01 -1.100367e+02  3.500000e+01  2.410000e+02   \nmax            NaN  4.897107e+01 -1.051948e+02  2.550000e+02  2.550000e+02   \n           swe_value    Unnamed: 0  air_temperature_tmmn  \\\ncount   1.008700e+06  1.022700e+06          1.022700e+06   \nunique           NaN           NaN                   NaN   \ntop              NaN           NaN                   NaN   \nfreq             NaN           NaN                   NaN   \nmean    3.333796e+00  5.113495e+05          2.720187e+02   \nstd     5.245389e+00  2.952282e+05          8.384982e+00   \nmin     0.000000e+00  0.000000e+00          2.328000e+02   \n25%     0.000000e+00  2.556748e+05          2.663000e+02   \n50%     0.000000e+00  5.113495e+05          2.722000e+02   \n75%     6.300000e+00  7.670242e+05          2.784000e+02   \nmax     2.260000e+01  1.022699e+06          2.983000e+02   \n        potential_evapotranspiration  mean_vapor_pressure_deficit  \\\ncount                   1.022700e+06                 1.022700e+06   \nunique                           NaN                          NaN   \ntop                              NaN                          NaN   \nfreq                             NaN                          NaN   \nmean                    3.943372e+00                 6.258550e-01   \nstd                     2.478664e+00                 5.233133e-01   \nmin                     0.000000e+00                 0.000000e+00   \n25%                     1.900000e+00                 2.100000e-01   \n50%                     3.500000e+00                 4.700000e-01   \n75%                     5.800000e+00                 9.300000e-01   \nmax                     1.510000e+01                 3.870000e+00   \n        relative_humidity_rmax  relative_humidity_rmin  precipitation_amount  \\\ncount             1.022700e+06            1.022700e+06          1.022700e+06   \nunique                     NaN                     NaN                   NaN   \ntop                        NaN                     NaN                   NaN   \nfreq                       NaN                     NaN                   NaN   \nmean              7.123571e+01            3.578010e+01          2.689152e+00   \nstd               2.030150e+01            1.888091e+01          7.456402e+00   \nmin               8.200000e+00            1.000000e+00          0.000000e+00   \n25%               5.560000e+01            2.130000e+01          0.000000e+00   \n50%               7.240000e+01            3.160000e+01          0.000000e+00   \n75%               8.820001e+01            4.740000e+01          2.200000e+00   \nmax               1.000000e+02            1.000000e+02          5.042000e+02   \n        air_temperature_tmmx    wind_speed     elevation         slope  \\\ncount           1.022700e+06  1.022700e+06  1.022700e+06  1.022700e+06   \nunique                   NaN           NaN           NaN           NaN   \ntop                      NaN           NaN           NaN           NaN   \nfreq                     NaN           NaN           NaN           NaN   \nmean            2.837481e+02  4.214964e+00  2.397170e+03  6.243769e+01   \nstd             9.912702e+00  2.043559e+00  6.647262e+02  1.650521e+01   \nmin             2.444000e+02  5.000000e-01  7.584437e+02  4.277402e+00   \n25%             2.759000e+02  2.800000e+00  1.948688e+03  5.213456e+01   \n50%             2.831000e+02  3.700000e+00  2.481006e+03  6.768107e+01   \n75%             2.920000e+02  5.200000e+00  2.895791e+03  7.504661e+01   \nmax             3.144000e+02  1.860000e+01  3.823385e+03  8.368555e+01   \n           curvature        aspect      eastness     northness         SWE_1  \\\ncount   1.022700e+06  1.022700e+06  1.022700e+06  1.022700e+06  1.022457e+06   \nunique           NaN           NaN           NaN           NaN           NaN   \ntop              NaN           NaN           NaN           NaN           NaN   \nfreq             NaN           NaN           NaN           NaN           NaN   \nmean   -3.909783e+03  1.722213e+02  6.965357e-02 -4.509867e-02  5.046829e+01   \nstd     4.385982e+03  1.031039e+02  5.171924e-01  6.412035e-01  9.547557e+01   \nmin    -1.917768e+04  4.159291e-01 -7.853438e-01 -7.853694e-01  0.000000e+00   \n25%    -6.479865e+03  9.217068e+01 -3.907275e-01 -7.356204e-01  0.000000e+00   \n50%    -3.710969e+03  1.691301e+02  1.334633e-01 -1.913248e-01  0.000000e+00   \n75%    -5.754078e+02  2.498582e+02  5.767317e-01  6.495535e-01  3.500000e+01   \nmax     9.069726e+03  3.586563e+02  7.853980e-01  7.853850e-01  2.550000e+02   \n              Flag_1  air_temperature_tmmn_1  potential_evapotranspiration_1  \\\ncount   1.022457e+06            1.022457e+06                    1.022457e+06   \nunique           NaN                     NaN                             NaN   \ntop              NaN                     NaN                             NaN   \nfreq             NaN                     NaN                             NaN   \nmean    2.434439e+02            2.720198e+02                    3.943422e+00   \nstd     5.314013e+00            8.385519e+00                    2.478670e+00   \nmin     2.410000e+02            2.328000e+02                    0.000000e+00   \n25%     2.410000e+02            2.663000e+02                    1.900000e+00   \n50%     2.410000e+02            2.722000e+02                    3.500000e+00   \n75%     2.410000e+02            2.784000e+02                    5.800000e+00   \nmax     2.550000e+02            2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\ncount                    1.022457e+06              1.022457e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.259842e-01              7.123178e+01   \nstd                      5.233073e-01              2.030135e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.560000e+01   \n50%                      4.700000e-01              7.240000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_1  precipitation_amount_1  \\\ncount               1.022457e+06            1.022457e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.577455e+01            2.688369e+00   \nstd                 1.887860e+01            7.455937e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.740000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_1  wind_speed_1         SWE_2        Flag_2  \\\ncount             1.022457e+06  1.022457e+06  1.022214e+06  1.022214e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837507e+02  4.214984e+00  5.047216e+01  2.434441e+02   \nstd               9.912255e+00  2.043594e+00  9.547914e+01  5.314206e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  3.500000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  2.550000e+02  2.550000e+02   \n        air_temperature_tmmn_2  potential_evapotranspiration_2  \\\ncount             1.022214e+06                    1.022214e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720209e+02                    3.943420e+00   \nstd               8.385815e+00                    2.478640e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_2  relative_humidity_rmax_2  \\\ncount                    1.022214e+06              1.022214e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.261075e-01              7.122720e+01   \nstd                      5.233070e-01              2.030094e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.560000e+01   \n50%                      4.700000e-01              7.240000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_2  precipitation_amount_2  \\\ncount               1.022214e+06            1.022214e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.576907e+01            2.687716e+00   \nstd                 1.887661e+01            7.456001e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.740000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_2  wind_speed_2         SWE_3        Flag_3  \\\ncount             1.022214e+06  1.022214e+06  1.021971e+06  1.021971e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837536e+02  4.214784e+00  5.047569e+01  2.434443e+02   \nstd               9.911446e+00  2.043331e+00  9.548285e+01  5.314398e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  3.500000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  2.550000e+02  2.550000e+02   \n        air_temperature_tmmn_3  potential_evapotranspiration_3  \\\ncount             1.021971e+06                    1.021971e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720225e+02                    3.943376e+00   \nstd               8.385741e+00                    2.478685e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\ncount                    1.021971e+06              1.021971e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.262307e-01              7.122289e+01   \nstd                      5.233067e-01              2.030066e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.550000e+01   \n50%                      4.700000e-01              7.230000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_3  precipitation_amount_3  \\\ncount               1.021971e+06            1.021971e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.576342e+01            2.686752e+00   \nstd                 1.887456e+01            7.455918e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.730000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_3  wind_speed_3         SWE_4        Flag_4  \\\ncount             1.021971e+06  1.021971e+06  1.021728e+06  1.021728e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837567e+02  4.214625e+00  5.047501e+01  2.434443e+02   \nstd               9.910225e+00  2.043209e+00  9.548223e+01  5.314356e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  3.500000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  2.550000e+02  2.550000e+02   \n        air_temperature_tmmn_4  potential_evapotranspiration_4  \\\ncount             1.021728e+06                    1.021728e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720240e+02                    3.943264e+00   \nstd               8.385866e+00                    2.478656e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_4  relative_humidity_rmax_4  \\\ncount                    1.021728e+06              1.021728e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.263553e-01              7.121851e+01   \nstd                      5.233051e-01              2.030000e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.550000e+01   \n50%                      4.700000e-01              7.230000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_4  precipitation_amount_4  \\\ncount               1.021728e+06            1.021728e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.575787e+01            2.686033e+00   \nstd                 1.887263e+01            7.455973e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.730000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_4  wind_speed_4         SWE_5        Flag_5  \\\ncount             1.021728e+06  1.021728e+06  1.021485e+06  1.021485e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837597e+02  4.214386e+00  5.047484e+01  2.434443e+02   \nstd               9.909216e+00  2.042915e+00  9.548200e+01  5.314338e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  3.500000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  2.550000e+02  2.550000e+02   \n        air_temperature_tmmn_5  potential_evapotranspiration_5  \\\ncount             1.021485e+06                    1.021485e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720251e+02                    3.943198e+00   \nstd               8.386260e+00                    2.478648e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\ncount                    1.021485e+06              1.021485e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.264743e-01              7.121428e+01   \nstd                      5.233079e-01              2.029947e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.550000e+01   \n50%                      4.700000e-01              7.230000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_5  precipitation_amount_5  \\\ncount               1.021485e+06            1.021485e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.575236e+01            2.684510e+00   \nstd                 1.887073e+01            7.454676e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.730000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_5  wind_speed_5         SWE_6        Flag_6  \\\ncount             1.021485e+06  1.021485e+06  1.021242e+06  1.021242e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837628e+02  4.213888e+00  5.046933e+01  2.434440e+02   \nstd               9.908198e+00  2.042324e+00  9.547787e+01  5.314084e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  3.500000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  2.550000e+02  2.550000e+02   \n        air_temperature_tmmn_6  potential_evapotranspiration_6  \\\ncount             1.021242e+06                    1.021242e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720261e+02                    3.943110e+00   \nstd               8.386646e+00                    2.478642e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_6  relative_humidity_rmax_6  \\\ncount                    1.021242e+06              1.021242e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.265698e-01              7.120906e+01   \nstd                      5.233230e-01              2.029860e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.550000e+01   \n50%                      4.700000e-01              7.230000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_6  precipitation_amount_6  \\\ncount               1.021242e+06            1.021242e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.574670e+01            2.683368e+00   \nstd                 1.886860e+01            7.454296e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.730000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_6  wind_speed_6         SWE_7        Flag_7  \\\ncount             1.021242e+06  1.021242e+06  1.020999e+06  1.020999e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837659e+02  4.213170e+00  5.046308e+01  2.434436e+02   \nstd               9.907047e+00  2.041234e+00  9.547252e+01  5.313772e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  3.500000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  2.550000e+02  2.550000e+02   \n        air_temperature_tmmn_7  potential_evapotranspiration_7  \\\ncount             1.020999e+06                    1.020999e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720272e+02                    3.943113e+00   \nstd               8.386879e+00                    2.478654e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\ncount                    1.020999e+06              1.020999e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.266652e-01              7.120386e+01   \nstd                      5.233356e-01              2.029766e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.550000e+01   \n50%                      4.700000e-01              7.230000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_7  precipitation_amount_7  \\\ncount               1.020999e+06            1.020999e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.574126e+01            2.681174e+00   \nstd                 1.886665e+01            7.449998e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.120000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.730000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_7  wind_speed_7  \ncount             1.020999e+06  1.020999e+06  \nunique                     NaN           NaN  \ntop                        NaN           NaN  \nfreq                       NaN           NaN  \nmean              2.837691e+02  4.212599e+00  \nstd               9.905842e+00  2.040713e+00  \nmin               2.444000e+02  5.000000e-01  \n25%               2.759000e+02  2.800000e+00  \n50%               2.831000e+02  3.700000e+00  \n75%               2.920000e+02  5.200000e+00  \nmax               3.144000e+02  1.860000e+01  \n",
  "history_begin_time" : 1697416631930,
  "history_end_time" : 1697416645942,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "HjU51ilQpzvK",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\n\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series.csv'\n\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_bak.csv'\n\ndef convert_to_time_series():\n  columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n  'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  'relative_humidity_rmax', 'relative_humidity_rmin',\n  'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n  # Read the cleaned ready CSV and DEM slope CSV\n  df = pd.read_csv(current_ready_csv_path)\n  # df['location'] = df['lat'].astype(str) + ',' + df['lon'].astype(str)\n  # unique_location_pairs = df.drop_duplicates(subset='location')[['lat', 'lon']]\n\n  # print(unique_location_pairs)\n  # unique_date = df.drop_duplicates(subset='date')[['date']]\n  # print(unique_date)\n\n  # add a 7 days time series to each row\n  df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n  # Group the data by 'lat' and 'lon'\n  grouped = df.groupby(['lat', 'lon'])\n  \n  # fill in the missing values of AMSR and gridMet using polynomial values\n  # Function to perform polynomial interpolation\n  def interpolate_missing(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    mask = int(y) > 240\n\n    # Perform interpolation\n    y_interp = np.interp(x, x[~mask], y[~mask])\n\n    return y_interp\n\n  # Group by location and apply interpolation for each column\n  grouped[\"SWE\"] = grouped[\"SWE\"].apply(lambda x: interpolate_missing(x, col))\n\n  \n\n  # Create a new DataFrame to store the time series data for each location\n  result = pd.DataFrame()\n\n  # Define the number of days to consider (7 days in this case)\n  num_days = 7\n\n  # ['date', 'lat', 'lon', 'SWE', 'Flag', 'air_temperature_tmmn',\n  # 'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  # 'relative_humidity_rmax', 'relative_humidity_rmin',\n  # 'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',\n  # 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness']\n  \n\n  for name, group in grouped:\n      group = group.set_index('date')\n      for day in range(1, num_days + 1):\n        for target_col in columns_to_be_time_series:\n          new_column_name = f'{target_col}_{day}'\n          group[new_column_name] = group[target_col].shift(day)\n      result = pd.concat([result, group], axis=0)\n\n  # Reset the index of the result DataFrame\n  result = result.reset_index()\n\n  print(result.describe)\n\n  result.to_csv(target_time_series_csv_path, index=False)\n\n#convert_to_time_series()\n\ndf = pd.read_csv(target_time_series_csv_path)\nshutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\nprint(df.columns)\n\ndf.head()\n\npd.set_option('display.max_columns', None)\ndescription = df.describe(include='all')\n# Print the description\nprint(description)\n\n",
  "history_output" : "today date = 2023-10-16\ntest start date:  2023-05-17\ntest end date:  2023-10-16\n/home/chetana\nIndex(['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'Unnamed: 0',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'elevation', 'slope', 'curvature',\n       'aspect', 'eastness', 'northness', 'SWE_1', 'Flag_1',\n       'air_temperature_tmmn_1', 'potential_evapotranspiration_1',\n       'mean_vapor_pressure_deficit_1', 'relative_humidity_rmax_1',\n       'relative_humidity_rmin_1', 'precipitation_amount_1',\n       'air_temperature_tmmx_1', 'wind_speed_1', 'SWE_2', 'Flag_2',\n       'air_temperature_tmmn_2', 'potential_evapotranspiration_2',\n       'mean_vapor_pressure_deficit_2', 'relative_humidity_rmax_2',\n       'relative_humidity_rmin_2', 'precipitation_amount_2',\n       'air_temperature_tmmx_2', 'wind_speed_2', 'SWE_3', 'Flag_3',\n       'air_temperature_tmmn_3', 'potential_evapotranspiration_3',\n       'mean_vapor_pressure_deficit_3', 'relative_humidity_rmax_3',\n       'relative_humidity_rmin_3', 'precipitation_amount_3',\n       'air_temperature_tmmx_3', 'wind_speed_3', 'SWE_4', 'Flag_4',\n       'air_temperature_tmmn_4', 'potential_evapotranspiration_4',\n       'mean_vapor_pressure_deficit_4', 'relative_humidity_rmax_4',\n       'relative_humidity_rmin_4', 'precipitation_amount_4',\n       'air_temperature_tmmx_4', 'wind_speed_4', 'SWE_5', 'Flag_5',\n       'air_temperature_tmmn_5', 'potential_evapotranspiration_5',\n       'mean_vapor_pressure_deficit_5', 'relative_humidity_rmax_5',\n       'relative_humidity_rmin_5', 'precipitation_amount_5',\n       'air_temperature_tmmx_5', 'wind_speed_5', 'SWE_6', 'Flag_6',\n       'air_temperature_tmmn_6', 'potential_evapotranspiration_6',\n       'mean_vapor_pressure_deficit_6', 'relative_humidity_rmax_6',\n       'relative_humidity_rmin_6', 'precipitation_amount_6',\n       'air_temperature_tmmx_6', 'wind_speed_6', 'SWE_7', 'Flag_7',\n       'air_temperature_tmmn_7', 'potential_evapotranspiration_7',\n       'mean_vapor_pressure_deficit_7', 'relative_humidity_rmax_7',\n       'relative_humidity_rmin_7', 'precipitation_amount_7',\n       'air_temperature_tmmx_7', 'wind_speed_7'],\n      dtype='object')\n              date           lat           lon           SWE          Flag  \\\ncount      1022700  1.022700e+06  1.022700e+06  1.022700e+06  1.022700e+06   \nunique        1461           NaN           NaN           NaN           NaN   \ntop     2019-01-01           NaN           NaN           NaN           NaN   \nfreq           700           NaN           NaN           NaN           NaN   \nmean           NaN  4.165838e+01 -1.141534e+02  5.046323e+01  2.434436e+02   \nstd            NaN  3.632464e+00  5.423376e+00  9.547185e+01  5.313797e+00   \nmin            NaN  3.335825e+01 -1.234486e+02  0.000000e+00  2.410000e+02   \n25%            NaN  3.891814e+01 -1.197812e+02  0.000000e+00  2.410000e+02   \n50%            NaN  4.107190e+01 -1.137737e+02  0.000000e+00  2.410000e+02   \n75%            NaN  4.461398e+01 -1.100367e+02  3.500000e+01  2.410000e+02   \nmax            NaN  4.897107e+01 -1.051948e+02  2.550000e+02  2.550000e+02   \n           swe_value    Unnamed: 0  air_temperature_tmmn  \\\ncount   1.008700e+06  1.022700e+06          1.022700e+06   \nunique           NaN           NaN                   NaN   \ntop              NaN           NaN                   NaN   \nfreq             NaN           NaN                   NaN   \nmean    3.333796e+00  5.113495e+05          2.720187e+02   \nstd     5.245389e+00  2.952282e+05          8.384982e+00   \nmin     0.000000e+00  0.000000e+00          2.328000e+02   \n25%     0.000000e+00  2.556748e+05          2.663000e+02   \n50%     0.000000e+00  5.113495e+05          2.722000e+02   \n75%     6.300000e+00  7.670242e+05          2.784000e+02   \nmax     2.260000e+01  1.022699e+06          2.983000e+02   \n        potential_evapotranspiration  mean_vapor_pressure_deficit  \\\ncount                   1.022700e+06                 1.022700e+06   \nunique                           NaN                          NaN   \ntop                              NaN                          NaN   \nfreq                             NaN                          NaN   \nmean                    3.943372e+00                 6.258550e-01   \nstd                     2.478664e+00                 5.233133e-01   \nmin                     0.000000e+00                 0.000000e+00   \n25%                     1.900000e+00                 2.100000e-01   \n50%                     3.500000e+00                 4.700000e-01   \n75%                     5.800000e+00                 9.300000e-01   \nmax                     1.510000e+01                 3.870000e+00   \n        relative_humidity_rmax  relative_humidity_rmin  precipitation_amount  \\\ncount             1.022700e+06            1.022700e+06          1.022700e+06   \nunique                     NaN                     NaN                   NaN   \ntop                        NaN                     NaN                   NaN   \nfreq                       NaN                     NaN                   NaN   \nmean              7.123571e+01            3.578010e+01          2.689152e+00   \nstd               2.030150e+01            1.888091e+01          7.456402e+00   \nmin               8.200000e+00            1.000000e+00          0.000000e+00   \n25%               5.560000e+01            2.130000e+01          0.000000e+00   \n50%               7.240000e+01            3.160000e+01          0.000000e+00   \n75%               8.820001e+01            4.740000e+01          2.200000e+00   \nmax               1.000000e+02            1.000000e+02          5.042000e+02   \n        air_temperature_tmmx    wind_speed     elevation         slope  \\\ncount           1.022700e+06  1.022700e+06  1.022700e+06  1.022700e+06   \nunique                   NaN           NaN           NaN           NaN   \ntop                      NaN           NaN           NaN           NaN   \nfreq                     NaN           NaN           NaN           NaN   \nmean            2.837481e+02  4.214964e+00  2.397170e+03  6.243769e+01   \nstd             9.912702e+00  2.043559e+00  6.647262e+02  1.650521e+01   \nmin             2.444000e+02  5.000000e-01  7.584437e+02  4.277402e+00   \n25%             2.759000e+02  2.800000e+00  1.948688e+03  5.213456e+01   \n50%             2.831000e+02  3.700000e+00  2.481006e+03  6.768107e+01   \n75%             2.920000e+02  5.200000e+00  2.895791e+03  7.504661e+01   \nmax             3.144000e+02  1.860000e+01  3.823385e+03  8.368555e+01   \n           curvature        aspect      eastness     northness         SWE_1  \\\ncount   1.022700e+06  1.022700e+06  1.022700e+06  1.022700e+06  1.022457e+06   \nunique           NaN           NaN           NaN           NaN           NaN   \ntop              NaN           NaN           NaN           NaN           NaN   \nfreq             NaN           NaN           NaN           NaN           NaN   \nmean   -3.909783e+03  1.722213e+02  6.965357e-02 -4.509867e-02  5.046829e+01   \nstd     4.385982e+03  1.031039e+02  5.171924e-01  6.412035e-01  9.547557e+01   \nmin    -1.917768e+04  4.159291e-01 -7.853438e-01 -7.853694e-01  0.000000e+00   \n25%    -6.479865e+03  9.217068e+01 -3.907275e-01 -7.356204e-01  0.000000e+00   \n50%    -3.710969e+03  1.691301e+02  1.334633e-01 -1.913248e-01  0.000000e+00   \n75%    -5.754078e+02  2.498582e+02  5.767317e-01  6.495535e-01  3.500000e+01   \nmax     9.069726e+03  3.586563e+02  7.853980e-01  7.853850e-01  2.550000e+02   \n              Flag_1  air_temperature_tmmn_1  potential_evapotranspiration_1  \\\ncount   1.022457e+06            1.022457e+06                    1.022457e+06   \nunique           NaN                     NaN                             NaN   \ntop              NaN                     NaN                             NaN   \nfreq             NaN                     NaN                             NaN   \nmean    2.434439e+02            2.720198e+02                    3.943422e+00   \nstd     5.314013e+00            8.385519e+00                    2.478670e+00   \nmin     2.410000e+02            2.328000e+02                    0.000000e+00   \n25%     2.410000e+02            2.663000e+02                    1.900000e+00   \n50%     2.410000e+02            2.722000e+02                    3.500000e+00   \n75%     2.410000e+02            2.784000e+02                    5.800000e+00   \nmax     2.550000e+02            2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_1  relative_humidity_rmax_1  \\\ncount                    1.022457e+06              1.022457e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.259842e-01              7.123178e+01   \nstd                      5.233073e-01              2.030135e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.560000e+01   \n50%                      4.700000e-01              7.240000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_1  precipitation_amount_1  \\\ncount               1.022457e+06            1.022457e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.577455e+01            2.688369e+00   \nstd                 1.887860e+01            7.455937e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.740000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_1  wind_speed_1         SWE_2        Flag_2  \\\ncount             1.022457e+06  1.022457e+06  1.022214e+06  1.022214e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837507e+02  4.214984e+00  5.047216e+01  2.434441e+02   \nstd               9.912255e+00  2.043594e+00  9.547914e+01  5.314206e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  3.500000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  2.550000e+02  2.550000e+02   \n        air_temperature_tmmn_2  potential_evapotranspiration_2  \\\ncount             1.022214e+06                    1.022214e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720209e+02                    3.943420e+00   \nstd               8.385815e+00                    2.478640e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_2  relative_humidity_rmax_2  \\\ncount                    1.022214e+06              1.022214e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.261075e-01              7.122720e+01   \nstd                      5.233070e-01              2.030094e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.560000e+01   \n50%                      4.700000e-01              7.240000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_2  precipitation_amount_2  \\\ncount               1.022214e+06            1.022214e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.576907e+01            2.687716e+00   \nstd                 1.887661e+01            7.456001e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.740000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_2  wind_speed_2         SWE_3        Flag_3  \\\ncount             1.022214e+06  1.022214e+06  1.021971e+06  1.021971e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837536e+02  4.214784e+00  5.047569e+01  2.434443e+02   \nstd               9.911446e+00  2.043331e+00  9.548285e+01  5.314398e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  3.500000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  2.550000e+02  2.550000e+02   \n        air_temperature_tmmn_3  potential_evapotranspiration_3  \\\ncount             1.021971e+06                    1.021971e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720225e+02                    3.943376e+00   \nstd               8.385741e+00                    2.478685e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_3  relative_humidity_rmax_3  \\\ncount                    1.021971e+06              1.021971e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.262307e-01              7.122289e+01   \nstd                      5.233067e-01              2.030066e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.550000e+01   \n50%                      4.700000e-01              7.230000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_3  precipitation_amount_3  \\\ncount               1.021971e+06            1.021971e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.576342e+01            2.686752e+00   \nstd                 1.887456e+01            7.455918e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.730000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_3  wind_speed_3         SWE_4        Flag_4  \\\ncount             1.021971e+06  1.021971e+06  1.021728e+06  1.021728e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837567e+02  4.214625e+00  5.047501e+01  2.434443e+02   \nstd               9.910225e+00  2.043209e+00  9.548223e+01  5.314356e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  3.500000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  2.550000e+02  2.550000e+02   \n        air_temperature_tmmn_4  potential_evapotranspiration_4  \\\ncount             1.021728e+06                    1.021728e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720240e+02                    3.943264e+00   \nstd               8.385866e+00                    2.478656e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_4  relative_humidity_rmax_4  \\\ncount                    1.021728e+06              1.021728e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.263553e-01              7.121851e+01   \nstd                      5.233051e-01              2.030000e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.550000e+01   \n50%                      4.700000e-01              7.230000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_4  precipitation_amount_4  \\\ncount               1.021728e+06            1.021728e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.575787e+01            2.686033e+00   \nstd                 1.887263e+01            7.455973e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.730000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_4  wind_speed_4         SWE_5        Flag_5  \\\ncount             1.021728e+06  1.021728e+06  1.021485e+06  1.021485e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837597e+02  4.214386e+00  5.047484e+01  2.434443e+02   \nstd               9.909216e+00  2.042915e+00  9.548200e+01  5.314338e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  3.500000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  2.550000e+02  2.550000e+02   \n        air_temperature_tmmn_5  potential_evapotranspiration_5  \\\ncount             1.021485e+06                    1.021485e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720251e+02                    3.943198e+00   \nstd               8.386260e+00                    2.478648e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_5  relative_humidity_rmax_5  \\\ncount                    1.021485e+06              1.021485e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.264743e-01              7.121428e+01   \nstd                      5.233079e-01              2.029947e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.550000e+01   \n50%                      4.700000e-01              7.230000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_5  precipitation_amount_5  \\\ncount               1.021485e+06            1.021485e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.575236e+01            2.684510e+00   \nstd                 1.887073e+01            7.454676e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.730000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_5  wind_speed_5         SWE_6        Flag_6  \\\ncount             1.021485e+06  1.021485e+06  1.021242e+06  1.021242e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837628e+02  4.213888e+00  5.046933e+01  2.434440e+02   \nstd               9.908198e+00  2.042324e+00  9.547787e+01  5.314084e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  3.500000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  2.550000e+02  2.550000e+02   \n        air_temperature_tmmn_6  potential_evapotranspiration_6  \\\ncount             1.021242e+06                    1.021242e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720261e+02                    3.943110e+00   \nstd               8.386646e+00                    2.478642e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_6  relative_humidity_rmax_6  \\\ncount                    1.021242e+06              1.021242e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.265698e-01              7.120906e+01   \nstd                      5.233230e-01              2.029860e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.550000e+01   \n50%                      4.700000e-01              7.230000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_6  precipitation_amount_6  \\\ncount               1.021242e+06            1.021242e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.574670e+01            2.683368e+00   \nstd                 1.886860e+01            7.454296e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.130000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.730000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_6  wind_speed_6         SWE_7        Flag_7  \\\ncount             1.021242e+06  1.021242e+06  1.020999e+06  1.020999e+06   \nunique                     NaN           NaN           NaN           NaN   \ntop                        NaN           NaN           NaN           NaN   \nfreq                       NaN           NaN           NaN           NaN   \nmean              2.837659e+02  4.213170e+00  5.046308e+01  2.434436e+02   \nstd               9.907047e+00  2.041234e+00  9.547252e+01  5.313772e+00   \nmin               2.444000e+02  5.000000e-01  0.000000e+00  2.410000e+02   \n25%               2.759000e+02  2.800000e+00  0.000000e+00  2.410000e+02   \n50%               2.831000e+02  3.700000e+00  0.000000e+00  2.410000e+02   \n75%               2.920000e+02  5.200000e+00  3.500000e+01  2.410000e+02   \nmax               3.144000e+02  1.860000e+01  2.550000e+02  2.550000e+02   \n        air_temperature_tmmn_7  potential_evapotranspiration_7  \\\ncount             1.020999e+06                    1.020999e+06   \nunique                     NaN                             NaN   \ntop                        NaN                             NaN   \nfreq                       NaN                             NaN   \nmean              2.720272e+02                    3.943113e+00   \nstd               8.386879e+00                    2.478654e+00   \nmin               2.328000e+02                    0.000000e+00   \n25%               2.663000e+02                    1.900000e+00   \n50%               2.722000e+02                    3.500000e+00   \n75%               2.784000e+02                    5.800000e+00   \nmax               2.983000e+02                    1.510000e+01   \n        mean_vapor_pressure_deficit_7  relative_humidity_rmax_7  \\\ncount                    1.020999e+06              1.020999e+06   \nunique                            NaN                       NaN   \ntop                               NaN                       NaN   \nfreq                              NaN                       NaN   \nmean                     6.266652e-01              7.120386e+01   \nstd                      5.233356e-01              2.029766e+01   \nmin                      0.000000e+00              8.200000e+00   \n25%                      2.100000e-01              5.550000e+01   \n50%                      4.700000e-01              7.230000e+01   \n75%                      9.300000e-01              8.820001e+01   \nmax                      3.870000e+00              1.000000e+02   \n        relative_humidity_rmin_7  precipitation_amount_7  \\\ncount               1.020999e+06            1.020999e+06   \nunique                       NaN                     NaN   \ntop                          NaN                     NaN   \nfreq                         NaN                     NaN   \nmean                3.574126e+01            2.681174e+00   \nstd                 1.886665e+01            7.449998e+00   \nmin                 1.000000e+00            0.000000e+00   \n25%                 2.120000e+01            0.000000e+00   \n50%                 3.160000e+01            0.000000e+00   \n75%                 4.730000e+01            2.200000e+00   \nmax                 1.000000e+02            5.042000e+02   \n        air_temperature_tmmx_7  wind_speed_7  \ncount             1.020999e+06  1.020999e+06  \nunique                     NaN           NaN  \ntop                        NaN           NaN  \nfreq                       NaN           NaN  \nmean              2.837691e+02  4.212599e+00  \nstd               9.905842e+00  2.040713e+00  \nmin               2.444000e+02  5.000000e-01  \n25%               2.759000e+02  2.800000e+00  \n50%               2.831000e+02  3.700000e+00  \n75%               2.920000e+02  5.200000e+00  \nmax               3.144000e+02  1.860000e+01  \n",
  "history_begin_time" : 1697416379179,
  "history_end_time" : 1697416392876,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "4ySNZciOJfG3",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\n\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series.csv'\n\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_bak.csv'\n\ndef convert_to_time_series():\n  columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n  'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  'relative_humidity_rmax', 'relative_humidity_rmin',\n  'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n  # Read the cleaned ready CSV and DEM slope CSV\n  df = pd.read_csv(current_ready_csv_path)\n  # df['location'] = df['lat'].astype(str) + ',' + df['lon'].astype(str)\n  # unique_location_pairs = df.drop_duplicates(subset='location')[['lat', 'lon']]\n\n  # print(unique_location_pairs)\n  # unique_date = df.drop_duplicates(subset='date')[['date']]\n  # print(unique_date)\n\n  # add a 7 days time series to each row\n  df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n  # Group the data by 'lat' and 'lon'\n  grouped = df.groupby(['lat', 'lon'])\n  \n  # fill in the missing values of AMSR and gridMet using polynomial values\n  # Function to perform polynomial interpolation\n  def interpolate_missing(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    mask = int(y) > 240\n\n    # Perform interpolation\n    y_interp = np.interp(x, x[~mask], y[~mask])\n\n    return y_interp\n\n  # Group by location and apply interpolation for each column\n  grouped[\"SWE\"] = grouped[\"SWE\"].apply(lambda x: interpolate_missing(x, col))\n\n  \n\n  # Create a new DataFrame to store the time series data for each location\n  result = pd.DataFrame()\n\n  # Define the number of days to consider (7 days in this case)\n  num_days = 7\n\n  # ['date', 'lat', 'lon', 'SWE', 'Flag', 'air_temperature_tmmn',\n  # 'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  # 'relative_humidity_rmax', 'relative_humidity_rmin',\n  # 'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',\n  # 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness']\n  \n\n  for name, group in grouped:\n      group = group.set_index('date')\n      for day in range(1, num_days + 1):\n        for target_col in columns_to_be_time_series:\n          new_column_name = f'{target_col}_{day}'\n          group[new_column_name] = group[target_col].shift(day)\n      result = pd.concat([result, group], axis=0)\n\n  # Reset the index of the result DataFrame\n  result = result.reset_index()\n\n  print(result.describe)\n\n  result.to_csv(target_time_series_csv_path, index=False)\n\n#convert_to_time_series()\n\ndf = pd.read_csv(target_time_series_csv_path)\nshutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\nprint(df.columns)\n\ndf.head()\n\n# Use .T to transpose the DataFrame, then describe\ndescription = df.T.describe(include='all').T\n\n# Print the description\nprint(description)\n\n",
  "history_output" : "",
  "history_begin_time" : 1697416150125,
  "history_end_time" : 1697416311388,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "4ZOFY5Ps3JfH",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\n\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series.csv'\n\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_bak.csv'\n\ndef convert_to_time_series():\n  columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n  'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  'relative_humidity_rmax', 'relative_humidity_rmin',\n  'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n  # Read the cleaned ready CSV and DEM slope CSV\n  df = pd.read_csv(current_ready_csv_path)\n  # df['location'] = df['lat'].astype(str) + ',' + df['lon'].astype(str)\n  # unique_location_pairs = df.drop_duplicates(subset='location')[['lat', 'lon']]\n\n  # print(unique_location_pairs)\n  # unique_date = df.drop_duplicates(subset='date')[['date']]\n  # print(unique_date)\n\n  # add a 7 days time series to each row\n  df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n  # Group the data by 'lat' and 'lon'\n  grouped = df.groupby(['lat', 'lon'])\n  \n  # fill in the missing values of AMSR and gridMet using polynomial values\n  # Function to perform polynomial interpolation\n  def interpolate_missing(df, column_name, degree=3):\n    x = df.index\n    y = df[column_name]\n\n    # Create a mask for missing values\n    mask = int(y) > 240\n\n    # Perform interpolation\n    y_interp = np.interp(x, x[~mask], y[~mask])\n\n    return y_interp\n\n  # Group by location and apply interpolation for each column\n  grouped[\"SWE\"] = grouped[\"SWE\"].apply(lambda x: interpolate_missing(x, col))\n\n  \n\n  # Create a new DataFrame to store the time series data for each location\n  result = pd.DataFrame()\n\n  # Define the number of days to consider (7 days in this case)\n  num_days = 7\n\n  # ['date', 'lat', 'lon', 'SWE', 'Flag', 'air_temperature_tmmn',\n  # 'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  # 'relative_humidity_rmax', 'relative_humidity_rmin',\n  # 'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',\n  # 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness']\n  \n\n  for name, group in grouped:\n      group = group.set_index('date')\n      for day in range(1, num_days + 1):\n        for target_col in columns_to_be_time_series:\n          new_column_name = f'{target_col}_{day}'\n          group[new_column_name] = group[target_col].shift(day)\n      result = pd.concat([result, group], axis=0)\n\n  # Reset the index of the result DataFrame\n  result = result.reset_index()\n\n  print(result.describe)\n\n  result.to_csv(target_time_series_csv_path, index=False)\n\n#convert_to_time_series()\n\ndf = pd.read_csv(target_time_series_csv_path)\nshutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\nprint(df.columns)\n\ndf.head()\n\nprint(df.describe(include='all'))\n\n",
  "history_output" : "today date = 2023-10-16\ntest start date:  2023-05-17\ntest end date:  2023-10-16\n/home/chetana\nIndex(['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'Unnamed: 0',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'elevation', 'slope', 'curvature',\n       'aspect', 'eastness', 'northness', 'SWE_1', 'Flag_1',\n       'air_temperature_tmmn_1', 'potential_evapotranspiration_1',\n       'mean_vapor_pressure_deficit_1', 'relative_humidity_rmax_1',\n       'relative_humidity_rmin_1', 'precipitation_amount_1',\n       'air_temperature_tmmx_1', 'wind_speed_1', 'SWE_2', 'Flag_2',\n       'air_temperature_tmmn_2', 'potential_evapotranspiration_2',\n       'mean_vapor_pressure_deficit_2', 'relative_humidity_rmax_2',\n       'relative_humidity_rmin_2', 'precipitation_amount_2',\n       'air_temperature_tmmx_2', 'wind_speed_2', 'SWE_3', 'Flag_3',\n       'air_temperature_tmmn_3', 'potential_evapotranspiration_3',\n       'mean_vapor_pressure_deficit_3', 'relative_humidity_rmax_3',\n       'relative_humidity_rmin_3', 'precipitation_amount_3',\n       'air_temperature_tmmx_3', 'wind_speed_3', 'SWE_4', 'Flag_4',\n       'air_temperature_tmmn_4', 'potential_evapotranspiration_4',\n       'mean_vapor_pressure_deficit_4', 'relative_humidity_rmax_4',\n       'relative_humidity_rmin_4', 'precipitation_amount_4',\n       'air_temperature_tmmx_4', 'wind_speed_4', 'SWE_5', 'Flag_5',\n       'air_temperature_tmmn_5', 'potential_evapotranspiration_5',\n       'mean_vapor_pressure_deficit_5', 'relative_humidity_rmax_5',\n       'relative_humidity_rmin_5', 'precipitation_amount_5',\n       'air_temperature_tmmx_5', 'wind_speed_5', 'SWE_6', 'Flag_6',\n       'air_temperature_tmmn_6', 'potential_evapotranspiration_6',\n       'mean_vapor_pressure_deficit_6', 'relative_humidity_rmax_6',\n       'relative_humidity_rmin_6', 'precipitation_amount_6',\n       'air_temperature_tmmx_6', 'wind_speed_6', 'SWE_7', 'Flag_7',\n       'air_temperature_tmmn_7', 'potential_evapotranspiration_7',\n       'mean_vapor_pressure_deficit_7', 'relative_humidity_rmax_7',\n       'relative_humidity_rmin_7', 'precipitation_amount_7',\n       'air_temperature_tmmx_7', 'wind_speed_7'],\n      dtype='object')\n              date           lat  ...  air_temperature_tmmx_7  wind_speed_7\ncount      1022700  1.022700e+06  ...            1.020999e+06  1.020999e+06\nunique        1461           NaN  ...                     NaN           NaN\ntop     2019-01-01           NaN  ...                     NaN           NaN\nfreq           700           NaN  ...                     NaN           NaN\nmean           NaN  4.165838e+01  ...            2.837691e+02  4.212599e+00\nstd            NaN  3.632464e+00  ...            9.905842e+00  2.040713e+00\nmin            NaN  3.335825e+01  ...            2.444000e+02  5.000000e-01\n25%            NaN  3.891814e+01  ...            2.759000e+02  2.800000e+00\n50%            NaN  4.107190e+01  ...            2.831000e+02  3.700000e+00\n75%            NaN  4.461398e+01  ...            2.920000e+02  5.200000e+00\nmax            NaN  4.897107e+01  ...            3.144000e+02  1.860000e+01\n[11 rows x 91 columns]\n",
  "history_begin_time" : 1697416086158,
  "history_end_time" : 1697416099589,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "h0EYM0tSu8yQ",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\nimport shutil\n\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series.csv'\n\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_bak.csv'\n\ndef convert_to_time_series():\n  # Read the cleaned ready CSV and DEM slope CSV\n  df = pd.read_csv(current_ready_csv_path)\n  # df['location'] = df['lat'].astype(str) + ',' + df['lon'].astype(str)\n  # unique_location_pairs = df.drop_duplicates(subset='location')[['lat', 'lon']]\n\n  # print(unique_location_pairs)\n  # unique_date = df.drop_duplicates(subset='date')[['date']]\n  # print(unique_date)\n\n  # add a 7 days time series to each row\n  df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n  # Group the data by 'lat' and 'lon'\n  grouped = df.groupby(['lat', 'lon'])\n\n  # Create a new DataFrame to store the time series data for each location\n  result = pd.DataFrame()\n\n  # Define the number of days to consider (7 days in this case)\n  num_days = 7\n\n  # ['date', 'lat', 'lon', 'SWE', 'Flag', 'air_temperature_tmmn',\n  # 'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  # 'relative_humidity_rmax', 'relative_humidity_rmin',\n  # 'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',\n  # 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness']\n  columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n  'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  'relative_humidity_rmax', 'relative_humidity_rmin',\n  'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\n  for name, group in grouped:\n      group = group.set_index('date')\n      for day in range(1, num_days + 1):\n        for target_col in columns_to_be_time_series:\n          new_column_name = f'{target_col}_{day}'\n          group[new_column_name] = group[target_col].shift(day)\n      result = pd.concat([result, group], axis=0)\n\n  # Reset the index of the result DataFrame\n  result = result.reset_index()\n\n  print(result.describe)\n\n  result.to_csv(target_time_series_csv_path, index=False)\n\n#convert_to_time_series()\n\ndf = pd.read_csv(target_time_series_csv_path)\nshutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\nprint(df.columns)\n\ndf.head()\n\nprint(df.describe(include='all'))\n\n",
  "history_output" : "today date = 2023-10-15\ntest start date:  2023-05-17\ntest end date:  2023-10-15\n/home/chetana\nIndex(['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'Unnamed: 0',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'elevation', 'slope', 'curvature',\n       'aspect', 'eastness', 'northness', 'SWE_1', 'Flag_1',\n       'air_temperature_tmmn_1', 'potential_evapotranspiration_1',\n       'mean_vapor_pressure_deficit_1', 'relative_humidity_rmax_1',\n       'relative_humidity_rmin_1', 'precipitation_amount_1',\n       'air_temperature_tmmx_1', 'wind_speed_1', 'SWE_2', 'Flag_2',\n       'air_temperature_tmmn_2', 'potential_evapotranspiration_2',\n       'mean_vapor_pressure_deficit_2', 'relative_humidity_rmax_2',\n       'relative_humidity_rmin_2', 'precipitation_amount_2',\n       'air_temperature_tmmx_2', 'wind_speed_2', 'SWE_3', 'Flag_3',\n       'air_temperature_tmmn_3', 'potential_evapotranspiration_3',\n       'mean_vapor_pressure_deficit_3', 'relative_humidity_rmax_3',\n       'relative_humidity_rmin_3', 'precipitation_amount_3',\n       'air_temperature_tmmx_3', 'wind_speed_3', 'SWE_4', 'Flag_4',\n       'air_temperature_tmmn_4', 'potential_evapotranspiration_4',\n       'mean_vapor_pressure_deficit_4', 'relative_humidity_rmax_4',\n       'relative_humidity_rmin_4', 'precipitation_amount_4',\n       'air_temperature_tmmx_4', 'wind_speed_4', 'SWE_5', 'Flag_5',\n       'air_temperature_tmmn_5', 'potential_evapotranspiration_5',\n       'mean_vapor_pressure_deficit_5', 'relative_humidity_rmax_5',\n       'relative_humidity_rmin_5', 'precipitation_amount_5',\n       'air_temperature_tmmx_5', 'wind_speed_5', 'SWE_6', 'Flag_6',\n       'air_temperature_tmmn_6', 'potential_evapotranspiration_6',\n       'mean_vapor_pressure_deficit_6', 'relative_humidity_rmax_6',\n       'relative_humidity_rmin_6', 'precipitation_amount_6',\n       'air_temperature_tmmx_6', 'wind_speed_6', 'SWE_7', 'Flag_7',\n       'air_temperature_tmmn_7', 'potential_evapotranspiration_7',\n       'mean_vapor_pressure_deficit_7', 'relative_humidity_rmax_7',\n       'relative_humidity_rmin_7', 'precipitation_amount_7',\n       'air_temperature_tmmx_7', 'wind_speed_7'],\n      dtype='object')\n              date           lat  ...  air_temperature_tmmx_7  wind_speed_7\ncount      1022700  1.022700e+06  ...            1.020999e+06  1.020999e+06\nunique        1461           NaN  ...                     NaN           NaN\ntop     2019-01-01           NaN  ...                     NaN           NaN\nfreq           700           NaN  ...                     NaN           NaN\nmean           NaN  4.165838e+01  ...            2.837691e+02  4.212599e+00\nstd            NaN  3.632464e+00  ...            9.905842e+00  2.040713e+00\nmin            NaN  3.335825e+01  ...            2.444000e+02  5.000000e-01\n25%            NaN  3.891814e+01  ...            2.759000e+02  2.800000e+00\n50%            NaN  4.107190e+01  ...            2.831000e+02  3.700000e+00\n75%            NaN  4.461398e+01  ...            2.920000e+02  5.200000e+00\nmax            NaN  4.897107e+01  ...            3.144000e+02  1.860000e+01\n[11 rows x 91 columns]\n",
  "history_begin_time" : 1697396509528,
  "history_end_time" : 1697396524094,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "4hhCqVtBgqpT",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\n\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series.csv'\n\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_bak.csv'\n\ndef convert_to_time_series():\n  # Read the cleaned ready CSV and DEM slope CSV\n  df = pd.read_csv(current_ready_csv_path)\n  # df['location'] = df['lat'].astype(str) + ',' + df['lon'].astype(str)\n  # unique_location_pairs = df.drop_duplicates(subset='location')[['lat', 'lon']]\n\n  # print(unique_location_pairs)\n  # unique_date = df.drop_duplicates(subset='date')[['date']]\n  # print(unique_date)\n\n  # add a 7 days time series to each row\n  df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n  # Group the data by 'lat' and 'lon'\n  grouped = df.groupby(['lat', 'lon'])\n\n  # Create a new DataFrame to store the time series data for each location\n  result = pd.DataFrame()\n\n  # Define the number of days to consider (7 days in this case)\n  num_days = 7\n\n  # ['date', 'lat', 'lon', 'SWE', 'Flag', 'air_temperature_tmmn',\n  # 'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  # 'relative_humidity_rmax', 'relative_humidity_rmin',\n  # 'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',\n  # 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness']\n  columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n  'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  'relative_humidity_rmax', 'relative_humidity_rmin',\n  'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\n  for name, group in grouped:\n      group = group.set_index('date')\n      for day in range(1, num_days + 1):\n        for target_col in columns_to_be_time_series:\n          new_column_name = f'{target_col}_{day}'\n          group[new_column_name] = group[target_col].shift(day)\n      result = pd.concat([result, group], axis=0)\n\n  # Reset the index of the result DataFrame\n  result = result.reset_index()\n\n  print(result.describe)\n\n  result.to_csv(target_time_series_csv_path, index=False)\n\n#convert_to_time_series()\n\ndf = pd.read_csv(target_time_series_csv_path)\nshutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\nprint(df.columns)\n\ndf.head()\n\nprint(df.describe(include='all'))\n\n",
  "history_output" : "today date = 2023-10-15\ntest start date:  2023-05-17\ntest end date:  2023-10-15\n/home/chetana\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/4hhCqVtBgqpT/convert_to_time_series.py\", line 61, in <module>\n    shutil.copy(target_time_series_csv_path, backup_time_series_csv_path)\nNameError: name 'shutil' is not defined\n",
  "history_begin_time" : 1697396382366,
  "history_end_time" : 1697396393547,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "21KNQEuAW4SE",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\n\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series.csv'\n\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_bak.csv'\n\ndef convert_to_time_series():\n  \n\n  # Read the cleaned ready CSV and DEM slope CSV\n  df = pd.read_csv(current_ready_csv_path)\n  # df['location'] = df['lat'].astype(str) + ',' + df['lon'].astype(str)\n  # unique_location_pairs = df.drop_duplicates(subset='location')[['lat', 'lon']]\n\n  # print(unique_location_pairs)\n  # unique_date = df.drop_duplicates(subset='date')[['date']]\n  # print(unique_date)\n\n  # add a 7 days time series to each row\n  df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n  # Group the data by 'lat' and 'lon'\n  grouped = df.groupby(['lat', 'lon'])\n\n  # Create a new DataFrame to store the time series data for each location\n  result = pd.DataFrame()\n\n  # Define the number of days to consider (7 days in this case)\n  num_days = 7\n\n  # ['date', 'lat', 'lon', 'SWE', 'Flag', 'air_temperature_tmmn',\n  # 'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  # 'relative_humidity_rmax', 'relative_humidity_rmin',\n  # 'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',\n  # 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness']\n  columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n  'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  'relative_humidity_rmax', 'relative_humidity_rmin',\n  'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\n  for name, group in grouped:\n      group = group.set_index('date')\n      for day in range(1, num_days + 1):\n        for target_col in columns_to_be_time_series:\n          new_column_name = f'{target_col}_{day}'\n          group[new_column_name] = group[target_col].shift(day)\n      result = pd.concat([result, group], axis=0)\n\n  # Reset the index of the result DataFrame\n  result = result.reset_index()\n\n  print(result.describe)\n\n  result.to_csv(target_time_series_csv_path, index=False)\n\n#convert_to_time_series()\n\ndf = pd.read_csv(target_time_series_csv_path)\nprint(df.columns)\n\ndf.head()\n\nprint(df.describe(include='all'))\n\n",
  "history_output" : "today date = 2023-10-15\ntest start date:  2023-05-17\ntest end date:  2023-10-15\n/home/chetana\nIndex(['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'Unnamed: 0',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'elevation', 'slope', 'curvature',\n       'aspect', 'eastness', 'northness', 'SWE_1', 'Flag_1',\n       'air_temperature_tmmn_1', 'potential_evapotranspiration_1',\n       'mean_vapor_pressure_deficit_1', 'relative_humidity_rmax_1',\n       'relative_humidity_rmin_1', 'precipitation_amount_1',\n       'air_temperature_tmmx_1', 'wind_speed_1', 'SWE_2', 'Flag_2',\n       'air_temperature_tmmn_2', 'potential_evapotranspiration_2',\n       'mean_vapor_pressure_deficit_2', 'relative_humidity_rmax_2',\n       'relative_humidity_rmin_2', 'precipitation_amount_2',\n       'air_temperature_tmmx_2', 'wind_speed_2', 'SWE_3', 'Flag_3',\n       'air_temperature_tmmn_3', 'potential_evapotranspiration_3',\n       'mean_vapor_pressure_deficit_3', 'relative_humidity_rmax_3',\n       'relative_humidity_rmin_3', 'precipitation_amount_3',\n       'air_temperature_tmmx_3', 'wind_speed_3', 'SWE_4', 'Flag_4',\n       'air_temperature_tmmn_4', 'potential_evapotranspiration_4',\n       'mean_vapor_pressure_deficit_4', 'relative_humidity_rmax_4',\n       'relative_humidity_rmin_4', 'precipitation_amount_4',\n       'air_temperature_tmmx_4', 'wind_speed_4', 'SWE_5', 'Flag_5',\n       'air_temperature_tmmn_5', 'potential_evapotranspiration_5',\n       'mean_vapor_pressure_deficit_5', 'relative_humidity_rmax_5',\n       'relative_humidity_rmin_5', 'precipitation_amount_5',\n       'air_temperature_tmmx_5', 'wind_speed_5', 'SWE_6', 'Flag_6',\n       'air_temperature_tmmn_6', 'potential_evapotranspiration_6',\n       'mean_vapor_pressure_deficit_6', 'relative_humidity_rmax_6',\n       'relative_humidity_rmin_6', 'precipitation_amount_6',\n       'air_temperature_tmmx_6', 'wind_speed_6', 'SWE_7', 'Flag_7',\n       'air_temperature_tmmn_7', 'potential_evapotranspiration_7',\n       'mean_vapor_pressure_deficit_7', 'relative_humidity_rmax_7',\n       'relative_humidity_rmin_7', 'precipitation_amount_7',\n       'air_temperature_tmmx_7', 'wind_speed_7'],\n      dtype='object')\n              date           lat  ...  air_temperature_tmmx_7  wind_speed_7\ncount      1022700  1.022700e+06  ...            1.020999e+06  1.020999e+06\nunique        1461           NaN  ...                     NaN           NaN\ntop     2019-01-01           NaN  ...                     NaN           NaN\nfreq           700           NaN  ...                     NaN           NaN\nmean           NaN  4.165838e+01  ...            2.837691e+02  4.212599e+00\nstd            NaN  3.632464e+00  ...            9.905842e+00  2.040713e+00\nmin            NaN  3.335825e+01  ...            2.444000e+02  5.000000e-01\n25%            NaN  3.891814e+01  ...            2.759000e+02  2.800000e+00\n50%            NaN  4.107190e+01  ...            2.831000e+02  3.700000e+00\n75%            NaN  4.461398e+01  ...            2.920000e+02  5.200000e+00\nmax            NaN  4.897107e+01  ...            3.144000e+02  1.860000e+01\n[11 rows x 91 columns]\n",
  "history_begin_time" : 1697396144587,
  "history_end_time" : 1697396161090,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "3GDBR8MTjdD8",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\n\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series.csv'\n\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_bak.csv'\n\ndef convert_to_time_series():\n  \n\n  # Read the cleaned ready CSV and DEM slope CSV\n  df = pd.read_csv(current_ready_csv_path)\n  # df['location'] = df['lat'].astype(str) + ',' + df['lon'].astype(str)\n  # unique_location_pairs = df.drop_duplicates(subset='location')[['lat', 'lon']]\n\n  # print(unique_location_pairs)\n  # unique_date = df.drop_duplicates(subset='date')[['date']]\n  # print(unique_date)\n\n  # add a 7 days time series to each row\n  df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n  # Group the data by 'lat' and 'lon'\n  grouped = df.groupby(['lat', 'lon'])\n\n  # Create a new DataFrame to store the time series data for each location\n  result = pd.DataFrame()\n\n  # Define the number of days to consider (7 days in this case)\n  num_days = 7\n\n  # ['date', 'lat', 'lon', 'SWE', 'Flag', 'air_temperature_tmmn',\n  # 'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  # 'relative_humidity_rmax', 'relative_humidity_rmin',\n  # 'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',\n  # 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness']\n  columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n  'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  'relative_humidity_rmax', 'relative_humidity_rmin',\n  'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\n  for name, group in grouped:\n      group = group.set_index('date')\n      for day in range(1, num_days + 1):\n        for target_col in columns_to_be_time_series:\n          new_column_name = f'{target_col}_{day}'\n          group[new_column_name] = group[target_col].shift(day)\n      result = pd.concat([result, group], axis=0)\n\n  # Reset the index of the result DataFrame\n  result = result.reset_index()\n\n  print(result.describe)\n\n  result.to_csv(target_time_series_csv_path, index=False)\n\n#convert_to_time_series()\n\ndf = pd.read_csv(target_time_series_csv_path)\nprint(df.columns)\n\ndf.head()\n\nprint(df.describe())\n\n",
  "history_output" : "today date = 2023-10-15\ntest start date:  2023-05-17\ntest end date:  2023-10-15\n/home/chetana\nIndex(['date', 'lat', 'lon', 'SWE', 'Flag', 'swe_value', 'Unnamed: 0',\n       'air_temperature_tmmn', 'potential_evapotranspiration',\n       'mean_vapor_pressure_deficit', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'precipitation_amount',\n       'air_temperature_tmmx', 'wind_speed', 'elevation', 'slope', 'curvature',\n       'aspect', 'eastness', 'northness', 'SWE_1', 'Flag_1',\n       'air_temperature_tmmn_1', 'potential_evapotranspiration_1',\n       'mean_vapor_pressure_deficit_1', 'relative_humidity_rmax_1',\n       'relative_humidity_rmin_1', 'precipitation_amount_1',\n       'air_temperature_tmmx_1', 'wind_speed_1', 'SWE_2', 'Flag_2',\n       'air_temperature_tmmn_2', 'potential_evapotranspiration_2',\n       'mean_vapor_pressure_deficit_2', 'relative_humidity_rmax_2',\n       'relative_humidity_rmin_2', 'precipitation_amount_2',\n       'air_temperature_tmmx_2', 'wind_speed_2', 'SWE_3', 'Flag_3',\n       'air_temperature_tmmn_3', 'potential_evapotranspiration_3',\n       'mean_vapor_pressure_deficit_3', 'relative_humidity_rmax_3',\n       'relative_humidity_rmin_3', 'precipitation_amount_3',\n       'air_temperature_tmmx_3', 'wind_speed_3', 'SWE_4', 'Flag_4',\n       'air_temperature_tmmn_4', 'potential_evapotranspiration_4',\n       'mean_vapor_pressure_deficit_4', 'relative_humidity_rmax_4',\n       'relative_humidity_rmin_4', 'precipitation_amount_4',\n       'air_temperature_tmmx_4', 'wind_speed_4', 'SWE_5', 'Flag_5',\n       'air_temperature_tmmn_5', 'potential_evapotranspiration_5',\n       'mean_vapor_pressure_deficit_5', 'relative_humidity_rmax_5',\n       'relative_humidity_rmin_5', 'precipitation_amount_5',\n       'air_temperature_tmmx_5', 'wind_speed_5', 'SWE_6', 'Flag_6',\n       'air_temperature_tmmn_6', 'potential_evapotranspiration_6',\n       'mean_vapor_pressure_deficit_6', 'relative_humidity_rmax_6',\n       'relative_humidity_rmin_6', 'precipitation_amount_6',\n       'air_temperature_tmmx_6', 'wind_speed_6', 'SWE_7', 'Flag_7',\n       'air_temperature_tmmn_7', 'potential_evapotranspiration_7',\n       'mean_vapor_pressure_deficit_7', 'relative_humidity_rmax_7',\n       'relative_humidity_rmin_7', 'precipitation_amount_7',\n       'air_temperature_tmmx_7', 'wind_speed_7'],\n      dtype='object')\n                lat           lon  ...  air_temperature_tmmx_7  wind_speed_7\ncount  1.022700e+06  1.022700e+06  ...            1.020999e+06  1.020999e+06\nmean   4.165838e+01 -1.141534e+02  ...            2.837691e+02  4.212599e+00\nstd    3.632464e+00  5.423376e+00  ...            9.905842e+00  2.040713e+00\nmin    3.335825e+01 -1.234486e+02  ...            2.444000e+02  5.000000e-01\n25%    3.891814e+01 -1.197812e+02  ...            2.759000e+02  2.800000e+00\n50%    4.107190e+01 -1.137737e+02  ...            2.831000e+02  3.700000e+00\n75%    4.461398e+01 -1.100367e+02  ...            2.920000e+02  5.200000e+00\nmax    4.897107e+01 -1.051948e+02  ...            3.144000e+02  1.860000e+01\n[8 rows x 90 columns]\n",
  "history_begin_time" : 1697396035506,
  "history_end_time" : 1697396053384,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "gYnS3Idd5WDM",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\n\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series.csv'\n\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_bak.csv'\n\ndef convert_to_time_series():\n  \n\n  # Read the cleaned ready CSV and DEM slope CSV\n  df = pd.read_csv(current_ready_csv_path)\n  # df['location'] = df['lat'].astype(str) + ',' + df['lon'].astype(str)\n  # unique_location_pairs = df.drop_duplicates(subset='location')[['lat', 'lon']]\n\n  # print(unique_location_pairs)\n  # unique_date = df.drop_duplicates(subset='date')[['date']]\n  # print(unique_date)\n\n  # add a 7 days time series to each row\n  df.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n  # Group the data by 'lat' and 'lon'\n  grouped = df.groupby(['lat', 'lon'])\n\n  # Create a new DataFrame to store the time series data for each location\n  result = pd.DataFrame()\n\n  # Define the number of days to consider (7 days in this case)\n  num_days = 7\n\n  # ['date', 'lat', 'lon', 'SWE', 'Flag', 'air_temperature_tmmn',\n  # 'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  # 'relative_humidity_rmax', 'relative_humidity_rmin',\n  # 'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',\n  # 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness']\n  columns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n  'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n  'relative_humidity_rmax', 'relative_humidity_rmin',\n  'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\n  for name, group in grouped:\n      group = group.set_index('date')\n      for day in range(1, num_days + 1):\n        for target_col in columns_to_be_time_series:\n          new_column_name = f'{target_col}_{day}'\n          group[new_column_name] = group[target_col].shift(day)\n      result = pd.concat([result, group], axis=0)\n\n  # Reset the index of the result DataFrame\n  result = result.reset_index()\n\n  print(result.describe)\n\n  result.to_csv(target_time_series_csv_path, index=False)\n\n#convert_to_time_series()\n\ndf = pd.read_csv(target_time_series_csv_path)\n\ndf.head()\n\n",
  "history_output" : "today date = 2023-10-15\ntest start date:  2023-05-17\ntest end date:  2023-10-15\n/home/chetana\n",
  "history_begin_time" : 1697396007968,
  "history_end_time" : 1697396027225,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "7M4eeOdub23v",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\n\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series.csv'\n\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_bak.csv'\n\n# Read the cleaned ready CSV and DEM slope CSV\ndf = pd.read_csv(current_ready_csv_path)\n# df['location'] = df['lat'].astype(str) + ',' + df['lon'].astype(str)\n# unique_location_pairs = df.drop_duplicates(subset='location')[['lat', 'lon']]\n\n# print(unique_location_pairs)\n# unique_date = df.drop_duplicates(subset='date')[['date']]\n# print(unique_date)\n\n# add a 7 days time series to each row\ndf.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n# Group the data by 'lat' and 'lon'\ngrouped = df.groupby(['lat', 'lon'])\n\n# Create a new DataFrame to store the time series data for each location\nresult = pd.DataFrame()\n\n# Define the number of days to consider (7 days in this case)\nnum_days = 7\n\n# ['date', 'lat', 'lon', 'SWE', 'Flag', 'air_temperature_tmmn',\n# 'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n# 'relative_humidity_rmax', 'relative_humidity_rmin',\n# 'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness']\ncolumns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n'relative_humidity_rmax', 'relative_humidity_rmin',\n'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\nfor name, group in grouped:\n    group = group.set_index('date')\n    for day in range(1, num_days + 1):\n      for target_col in columns_to_be_time_series:\n        new_column_name = f'{target_col}_{day}'\n        group[new_column_name] = group[target_col].shift(day)\n    result = pd.concat([result, group], axis=0)\n\n# Reset the index of the result DataFrame\nresult = result.reset_index()\n\nprint(result.describe)\n\nresult.to_csv(target_time_series_csv_path, index=False)\n\n\n\n",
  "history_output" : "today date = 2023-10-15\ntest start date:  2023-05-17\ntest end date:  2023-10-15\n/home/chetana\n<bound method NDFrame.describe of                date        lat  ...  air_temperature_tmmx_7  wind_speed_7\n0        2019-01-01  33.358254  ...                     NaN           NaN\n1        2019-01-01  33.358254  ...                     NaN           NaN\n2        2019-01-01  33.358254  ...                     NaN           NaN\n3        2019-01-02  33.358254  ...                     NaN           NaN\n4        2019-01-02  33.358254  ...                     NaN           NaN\n...             ...        ...  ...                     ...           ...\n1022695  2022-12-30  48.971066  ...                   267.8           3.1\n1022696  2022-12-30  48.971066  ...                   267.8           3.1\n1022697  2022-12-31  48.971066  ...                   267.8           3.1\n1022698  2022-12-31  48.971066  ...                   268.7           2.8\n1022699  2022-12-31  48.971066  ...                   268.7           2.8\n[1022700 rows x 91 columns]>\n",
  "history_begin_time" : 1697395542094,
  "history_end_time" : 1697395639840,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "PyhEXIqDEtA4",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\n\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series.csv'\n\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_bak.csv'\n\n# Read the cleaned ready CSV and DEM slope CSV\ndf = pd.read_csv(current_ready_csv_path)\n# df['location'] = df['lat'].astype(str) + ',' + df['lon'].astype(str)\n# unique_location_pairs = df.drop_duplicates(subset='location')[['lat', 'lon']]\n\n# print(unique_location_pairs)\n# unique_date = df.drop_duplicates(subset='date')[['date']]\n# print(unique_date)\n\n# add a 7 days time series to each row\ndf.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n# Group the data by 'lat' and 'lon'\ngrouped = df.groupby(['lat', 'lon'])\n\n# Create a new DataFrame to store the time series data for each location\nresult = pd.DataFrame()\n\n# Define the number of days to consider (7 days in this case)\nnum_days = 7\n\n# ['date', 'lat', 'lon', 'SWE', 'Flag', 'air_temperature_tmmn',\n# 'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n# 'relative_humidity_rmax', 'relative_humidity_rmin',\n# 'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',\n# 'elevation', 'slope', 'curvature', 'aspect', 'eastness', 'northness']\ncolumns_to_be_time_series = [\"SWE\", \"Flag\", 'air_temperature_tmmn',\n'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n'relative_humidity_rmax', 'relative_humidity_rmin',\n'precipitation_amount', 'air_temperature_tmmx', 'wind_speed',]\n\nfor name, group in grouped:\n    group = group.set_index('date')\n    print(name)\n    print(group)\n    for day in range(1, num_days + 1):\n      for target_col in columns_to_be_time_series:\n        new_column_name = f'{target_col}_{day}'\n        group[new_column_name] = group[target_col].shift(day)\n    result = pd.concat([result, group], axis=0)\n\n# Reset the index of the result DataFrame\nresult = result.reset_index()\n\nprint(result)\n\n\n\n",
  "history_output" : "today date = 2023-10-15\ntest start date:  2023-05-17\ntest end date:  2023-10-15\n/home/chetana\n(33.358253500000004, -107.8268805)\n                  lat         lon  SWE  ...   aspect  eastness  northness\ndate                                    ...                              \n2019-01-01  33.358254 -107.826881  255  ...  276.389 -0.782283   0.110823\n2019-01-01  33.358254 -107.826881  255  ...  276.389 -0.782283   0.110823\n2019-01-01  33.358254 -107.826881  255  ...  276.389 -0.782283   0.110823\n2019-01-02  33.358254 -107.826881    0  ...  276.389 -0.782283   0.110823\n2019-01-02  33.358254 -107.826881    0  ...  276.389 -0.782283   0.110823\n...               ...         ...  ...  ...      ...       ...        ...\n2022-12-30  33.358254 -107.826881    0  ...  276.389 -0.782283   0.110823\n2022-12-30  33.358254 -107.826881    0  ...  276.389 -0.782283   0.110823\n2022-12-31  33.358254 -107.826881    0  ...  276.389 -0.782283   0.110823\n2022-12-31  33.358254 -107.826881    0  ...  276.389 -0.782283   0.110823\n2022-12-31  33.358254 -107.826881    0  ...  276.389 -0.782283   0.110823\n[4383 rows x 20 columns]\n(33.650385, -109.3091005)\n                  lat       lon  SWE  ...    aspect  eastness  northness\ndate                                  ...                               \n2019-01-01  33.650385 -109.3091  255  ...  80.32056  0.778229   0.166578\n2019-01-01  33.650385 -109.3091  255  ...  80.32056  0.778229   0.166578\n2019-01-01  33.650385 -109.3091  255  ...  80.32056  0.778229   0.166578\n2019-01-01  33.650385 -109.3091  255  ...  80.32056  0.778229   0.166578\n2019-01-01  33.650385 -109.3091  255  ...  80.32056  0.778229   0.166578\n...               ...       ...  ...  ...       ...       ...        ...\n2022-12-31  33.650385 -109.3091    0  ...  80.32056  0.778229   0.166578\n2022-12-31  33.650385 -109.3091    0  ...  80.32056  0.778229   0.166578\n2022-12-31  33.650385 -109.3091    0  ...  80.32056  0.778229   0.166578\n2022-12-31  33.650385 -109.3091    0  ...  80.32056  0.778229   0.166578\n2022-12-31  33.650385 -109.3091    0  ...  80.32056  0.778229   0.166578\n[7305 rows x 20 columns]\n(33.9787815, -109.50673)\n                  lat        lon  SWE  ...    aspect  eastness  northness\ndate                                   ...                               \n2019-01-01  33.978781 -109.50673    0  ...  295.7811  -0.73307   0.410255\n2019-01-01  33.978781 -109.50673    0  ...  295.7811  -0.73307   0.410255\n2019-01-02  33.978781 -109.50673    0  ...  295.7811  -0.73307   0.410255\n2019-01-02  33.978781 -109.50673    0  ...  295.7811  -0.73307   0.410255\n2019-01-03  33.978781 -109.50673    0  ...  295.7811  -0.73307   0.410255\n...               ...        ...  ...  ...       ...       ...        ...\n2022-12-29  33.978781 -109.50673    0  ...  295.7811  -0.73307   0.410255\n2022-12-30  33.978781 -109.50673    0  ...  295.7811  -0.73307   0.410255\n2022-12-30  33.978781 -109.50673    0  ...  295.7811  -0.73307   0.410255\n2022-12-31  33.978781 -109.50673    0  ...  295.7811  -0.73307   0.410255\n2022-12-31  33.978781 -109.50673    0  ...  295.7811  -0.73307   0.410255\n[2922 rows x 20 columns]\n(34.3652575, -111.0069165)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  34.365257 -111.006917    0  ...  179.38535  0.010727  -0.785369\n2019-01-01  34.365257 -111.006917    0  ...  179.38535  0.010727  -0.785369\n2019-01-02  34.365257 -111.006917    0  ...  179.38535  0.010727  -0.785369\n2019-01-02  34.365257 -111.006917    0  ...  179.38535  0.010727  -0.785369\n2019-01-03  34.365257 -111.006917    0  ...  179.38535  0.010727  -0.785369\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-29  34.365257 -111.006917    0  ...  179.38535  0.010727  -0.785369\n2022-12-30  34.365257 -111.006917  255  ...  179.38535  0.010727  -0.785369\n2022-12-30  34.365257 -111.006917  255  ...  179.38535  0.010727  -0.785369\n2022-12-31  34.365257 -111.006917    0  ...  179.38535  0.010727  -0.785369\n2022-12-31  34.365257 -111.006917    0  ...  179.38535  0.010727  -0.785369\n[2922 rows x 20 columns]\n(34.742577999999995, -111.4111585)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  34.742578 -111.411158    0  ...  167.37495  0.215186  -0.773161\n2019-01-01  34.742578 -111.411158    0  ...  167.37495  0.215186  -0.773161\n2019-01-02  34.742578 -111.411158    0  ...  167.37495  0.215186  -0.773161\n2019-01-02  34.742578 -111.411158    0  ...  167.37495  0.215186  -0.773161\n2019-01-03  34.742578 -111.411158    0  ...  167.37495  0.215186  -0.773161\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-29  34.742578 -111.411158    0  ...  167.37495  0.215186  -0.773161\n2022-12-30  34.742578 -111.411158  255  ...  167.37495  0.215186  -0.773161\n2022-12-30  34.742578 -111.411158  255  ...  167.37495  0.215186  -0.773161\n2022-12-31  34.742578 -111.411158    0  ...  167.37495  0.215186  -0.773161\n2022-12-31  34.742578 -111.411158    0  ...  167.37495  0.215186  -0.773161\n[2922 rows x 20 columns]\n(34.860599500000006, -111.6087875)\n                lat         lon  SWE  ...     aspect  eastness  northness\ndate                                  ...                                \n2019-01-01  34.8606 -111.608788    0  ...  136.70627   0.60109  -0.629172\n2019-01-01  34.8606 -111.608788    0  ...  136.70627   0.60109  -0.629172\n2019-01-01  34.8606 -111.608788    0  ...  136.70627   0.60109  -0.629172\n2019-01-02  34.8606 -111.608788    0  ...  136.70627   0.60109  -0.629172\n2019-01-02  34.8606 -111.608788    0  ...  136.70627   0.60109  -0.629172\n...             ...         ...  ...  ...        ...       ...        ...\n2022-12-30  34.8606 -111.608788  255  ...  136.70627   0.60109  -0.629172\n2022-12-30  34.8606 -111.608788  255  ...  136.70627   0.60109  -0.629172\n2022-12-31  34.8606 -111.608788    0  ...  136.70627   0.60109  -0.629172\n2022-12-31  34.8606 -111.608788    0  ...  136.70627   0.60109  -0.629172\n2022-12-31  34.8606 -111.608788    0  ...  136.70627   0.60109  -0.629172\n[4383 rows x 20 columns]\n(34.9710915, -111.509973)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  34.971091 -111.509973    0  ...  343.42395 -0.277905   0.764181\n2019-01-01  34.971091 -111.509973    0  ...  343.42395 -0.277905   0.764181\n2019-01-01  34.971091 -111.509973    0  ...  343.42395 -0.277905   0.764181\n2019-01-02  34.971091 -111.509973    0  ...  343.42395 -0.277905   0.764181\n2019-01-02  34.971091 -111.509973    0  ...  343.42395 -0.277905   0.764181\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-30  34.971091 -111.509973  255  ...  343.42395 -0.277905   0.764181\n2022-12-30  34.971091 -111.509973  255  ...  343.42395 -0.277905   0.764181\n2022-12-31  34.971091 -111.509973    0  ...  343.42395 -0.277905   0.764181\n2022-12-31  34.971091 -111.509973    0  ...  343.42395 -0.277905   0.764181\n2022-12-31  34.971091 -111.509973    0  ...  343.42395 -0.277905   0.764181\n[4383 rows x 20 columns]\n(35.2356645, -108.2670545)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  35.235664 -108.267055  255  ...  129.55807  0.656793  -0.567082\n2019-01-02  35.235664 -108.267055    0  ...  129.55807  0.656793  -0.567082\n2019-01-03  35.235664 -108.267055    0  ...  129.55807  0.656793  -0.567082\n2019-01-04  35.235664 -108.267055    0  ...  129.55807  0.656793  -0.567082\n2019-01-05  35.235664 -108.267055    0  ...  129.55807  0.656793  -0.567082\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-27  35.235664 -108.267055  255  ...  129.55807  0.656793  -0.567082\n2022-12-28  35.235664 -108.267055    0  ...  129.55807  0.656793  -0.567082\n2022-12-29  35.235664 -108.267055    0  ...  129.55807  0.656793  -0.567082\n2022-12-30  35.235664 -108.267055    0  ...  129.55807  0.656793  -0.567082\n2022-12-31  35.235664 -108.267055    0  ...  129.55807  0.656793  -0.567082\n[1461 rows x 20 columns]\n(36.002412, -106.5512725)\n                  lat         lon  SWE  ...    aspect  eastness  northness\ndate                                    ...                               \n2019-01-01  36.002412 -106.551272  255  ...  163.9975  0.268998  -0.765643\n2019-01-01  36.002412 -106.551272  255  ...  163.9975  0.268998  -0.765643\n2019-01-01  36.002412 -106.551272  255  ...  163.9975  0.268998  -0.765643\n2019-01-02  36.002412 -106.551272    0  ...  163.9975  0.268998  -0.765643\n2019-01-02  36.002412 -106.551272    0  ...  163.9975  0.268998  -0.765643\n...               ...         ...  ...  ...       ...       ...        ...\n2022-12-30  36.002412 -106.551272    0  ...  163.9975  0.268998  -0.765643\n2022-12-30  36.002412 -106.551272    0  ...  163.9975  0.268998  -0.765643\n2022-12-31  36.002412 -106.551272    0  ...  163.9975  0.268998  -0.765643\n2022-12-31  36.002412 -106.551272    0  ...  163.9975  0.268998  -0.765643\n2022-12-31  36.002412 -106.551272    0  ...  163.9975  0.268998  -0.765643\n[4383 rows x 20 columns]\n(36.125859, -105.5271935)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  36.125859 -105.527193  255  ...  327.60434 -0.491847   0.701216\n2019-01-01  36.125859 -105.527193  255  ...  327.60434 -0.491847   0.701216\n2019-01-01  36.125859 -105.527193  255  ...  327.60434 -0.491847   0.701216\n2019-01-01  36.125859 -105.527193  255  ...  327.60434 -0.491847   0.701216\n2019-01-01  36.125859 -105.527193  255  ...  327.60434 -0.491847   0.701216\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-31  36.125859 -105.527193    0  ...  327.60434 -0.491847   0.701216\n2022-12-31  36.125859 -105.527193    0  ...  327.60434 -0.491847   0.701216\n2022-12-31  36.125859 -105.527193    0  ...  327.60434 -0.491847   0.701216\n2022-12-31  36.125859 -105.527193    0  ...  327.60434 -0.491847   0.701216\n2022-12-31  36.125859 -105.527193    0  ...  327.60434 -0.491847   0.701216\n[7305 rows x 20 columns]\n(36.3070475, -115.678156)\n                  lat         lon  SWE  ...   aspect  eastness  northness\ndate                                    ...                              \n2019-01-01  36.307048 -115.678156   19  ...  41.2881  0.583265   0.644397\n2019-01-01  36.307048 -115.678156   19  ...  41.2881  0.583265   0.644397\n2019-01-02  36.307048 -115.678156  255  ...  41.2881  0.583265   0.644397\n2019-01-02  36.307048 -115.678156  255  ...  41.2881  0.583265   0.644397\n2019-01-03  36.307048 -115.678156    0  ...  41.2881  0.583265   0.644397\n...               ...         ...  ...  ...      ...       ...        ...\n2022-12-29  36.307048 -115.678156    0  ...  41.2881  0.583265   0.644397\n2022-12-30  36.307048 -115.678156  255  ...  41.2881  0.583265   0.644397\n2022-12-30  36.307048 -115.678156  255  ...  41.2881  0.583265   0.644397\n2022-12-31  36.307048 -115.678156    0  ...  41.2881  0.583265   0.644397\n2022-12-31  36.307048 -115.678156    0  ...  41.2881  0.583265   0.644397\n[2922 rows x 20 columns]\n(36.314286, -118.6156465)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  36.314286 -118.615646    0  ...  246.76215 -0.743146  -0.375799\n2019-01-02  36.314286 -118.615646  255  ...  246.76215 -0.743146  -0.375799\n2019-01-03  36.314286 -118.615646    0  ...  246.76215 -0.743146  -0.375799\n2019-01-04  36.314286 -118.615646    0  ...  246.76215 -0.743146  -0.375799\n2019-01-05  36.314286 -118.615646    0  ...  246.76215 -0.743146  -0.375799\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-27  36.314286 -118.615646    0  ...  246.76215 -0.743146  -0.375799\n2022-12-28  36.314286 -118.615646  255  ...  246.76215 -0.743146  -0.375799\n2022-12-29  36.314286 -118.615646    0  ...  246.76215 -0.743146  -0.375799\n2022-12-30  36.314286 -118.615646    0  ...  246.76215 -0.743146  -0.375799\n2022-12-31  36.314286 -118.615646    0  ...  246.76215 -0.743146  -0.375799\n[1461 rows x 20 columns]\n(36.3432345, -118.5886975)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  36.343235 -118.588697    0  ...  222.91547 -0.597804  -0.632115\n2019-01-02  36.343235 -118.588697  255  ...  222.91547 -0.597804  -0.632115\n2019-01-03  36.343235 -118.588697    0  ...  222.91547 -0.597804  -0.632115\n2019-01-04  36.343235 -118.588697    0  ...  222.91547 -0.597804  -0.632115\n2019-01-05  36.343235 -118.588697    0  ...  222.91547 -0.597804  -0.632115\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-27  36.343235 -118.588697    0  ...  222.91547 -0.597804  -0.632115\n2022-12-28  36.343235 -118.588697  255  ...  222.91547 -0.597804  -0.632115\n2022-12-29  36.343235 -118.588697    0  ...  222.91547 -0.597804  -0.632115\n2022-12-30  36.343235 -118.588697    0  ...  222.91547 -0.597804  -0.632115\n2022-12-31  36.343235 -118.588697    0  ...  222.91547 -0.597804  -0.632115\n[1461 rows x 20 columns]\n(36.364939, -118.2922535)\n                  lat         lon  SWE  ...   aspect  eastness  northness\ndate                                    ...                              \n2019-01-01  36.364939 -118.292254   20  ...  123.959  0.692435  -0.509422\n2019-01-01  36.364939 -118.292254   20  ...  123.959  0.692435  -0.509422\n2019-01-01  36.364939 -118.292254   20  ...  123.959  0.692435  -0.509422\n2019-01-01  36.364939 -118.292254   20  ...  123.959  0.692435  -0.509422\n2019-01-02  36.364939 -118.292254  255  ...  123.959  0.692435  -0.509422\n...               ...         ...  ...  ...      ...       ...        ...\n2022-12-30  36.364939 -118.292254    0  ...  123.959  0.692435  -0.509422\n2022-12-31  36.364939 -118.292254    0  ...  123.959  0.692435  -0.509422\n2022-12-31  36.364939 -118.292254    0  ...  123.959  0.692435  -0.509422\n2022-12-31  36.364939 -118.292254    0  ...  123.959  0.692435  -0.509422\n2022-12-31  36.364939 -118.292254    0  ...  123.959  0.692435  -0.509422\n[5844 rows x 20 columns]\n(36.408329, -118.5797145)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  36.408329 -118.579714    0  ...  136.56012  0.602351  -0.628026\n2019-01-02  36.408329 -118.579714  255  ...  136.56012  0.602351  -0.628026\n2019-01-03  36.408329 -118.579714    0  ...  136.56012  0.602351  -0.628026\n2019-01-04  36.408329 -118.579714    0  ...  136.56012  0.602351  -0.628026\n2019-01-05  36.408329 -118.579714    0  ...  136.56012  0.602351  -0.628026\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-27  36.408329 -118.579714    0  ...  136.56012  0.602351  -0.628026\n2022-12-28  36.408329 -118.579714  255  ...  136.56012  0.602351  -0.628026\n2022-12-29  36.408329 -118.579714    0  ...  136.56012  0.602351  -0.628026\n2022-12-30  36.408329 -118.579714    0  ...  136.56012  0.602351  -0.628026\n2022-12-31  36.408329 -118.579714    0  ...  136.56012  0.602351  -0.628026\n[1461 rows x 20 columns]\n(36.466145, -118.5437815)\n                  lat         lon  SWE  ...    aspect  eastness  northness\ndate                                    ...                               \n2019-01-01  36.466145 -118.543781   26  ...  308.7936 -0.662058   0.559689\n2019-01-02  36.466145 -118.543781  255  ...  308.7936 -0.662058   0.559689\n2019-01-03  36.466145 -118.543781   33  ...  308.7936 -0.662058   0.559689\n2019-01-04  36.466145 -118.543781   27  ...  308.7936 -0.662058   0.559689\n2019-01-05  36.466145 -118.543781   34  ...  308.7936 -0.662058   0.559689\n...               ...         ...  ...  ...       ...       ...        ...\n2022-12-27  36.466145 -118.543781    0  ...  308.7936 -0.662058   0.559689\n2022-12-28  36.466145 -118.543781  255  ...  308.7936 -0.662058   0.559689\n2022-12-29  36.466145 -118.543781   18  ...  308.7936 -0.662058   0.559689\n2022-12-30  36.466145 -118.543781    0  ...  308.7936 -0.662058   0.559689\n2022-12-31  36.466145 -118.543781    0  ...  308.7936 -0.662058   0.559689\n[1461 rows x 20 columns]\n(36.473369000000005, -105.1948165)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  36.473369 -105.194817  255  ...  16.374525  0.274784   0.764701\n2019-01-01  36.473369 -105.194817  255  ...  16.374525  0.274784   0.764701\n2019-01-01  36.473369 -105.194817  255  ...  16.374525  0.274784   0.764701\n2019-01-01  36.473369 -105.194817  255  ...  16.374525  0.274784   0.764701\n2019-01-02  36.473369 -105.194817   21  ...  16.374525  0.274784   0.764701\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-30  36.473369 -105.194817    0  ...  16.374525  0.274784   0.764701\n2022-12-31  36.473369 -105.194817    0  ...  16.374525  0.274784   0.764701\n2022-12-31  36.473369 -105.194817    0  ...  16.374525  0.274784   0.764701\n2022-12-31  36.473369 -105.194817    0  ...  16.374525  0.274784   0.764701\n2022-12-31  36.473369 -105.194817    0  ...  16.374525  0.274784   0.764701\n[5844 rows x 20 columns]\n(36.5672195, -118.7683605)\n                 lat         lon  SWE  ...    aspect  eastness  northness\ndate                                   ...                               \n2019-01-01  36.56722 -118.768361    0  ...  163.0093  0.284301  -0.763091\n2019-01-02  36.56722 -118.768361  255  ...  163.0093  0.284301  -0.763091\n2019-01-03  36.56722 -118.768361    0  ...  163.0093  0.284301  -0.763091\n2019-01-04  36.56722 -118.768361    0  ...  163.0093  0.284301  -0.763091\n2019-01-05  36.56722 -118.768361    0  ...  163.0093  0.284301  -0.763091\n...              ...         ...  ...  ...       ...       ...        ...\n2022-12-27  36.56722 -118.768361    0  ...  163.0093  0.284301  -0.763091\n2022-12-28  36.56722 -118.768361  255  ...  163.0093  0.284301  -0.763091\n2022-12-29  36.56722 -118.768361    0  ...  163.0093  0.284301  -0.763091\n2022-12-30  36.56722 -118.768361    0  ...  163.0093  0.284301  -0.763091\n2022-12-31  36.56722 -118.768361    0  ...  163.0093  0.284301  -0.763091\n[1461 rows x 20 columns]\n(36.682572, -118.4270005)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  36.682572 -118.427001   26  ...  194.28731  -0.24195  -0.769692\n2019-01-02  36.682572 -118.427001  255  ...  194.28731  -0.24195  -0.769692\n2019-01-03  36.682572 -118.427001   33  ...  194.28731  -0.24195  -0.769692\n2019-01-04  36.682572 -118.427001   27  ...  194.28731  -0.24195  -0.769692\n2019-01-05  36.682572 -118.427001   34  ...  194.28731  -0.24195  -0.769692\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-27  36.682572 -118.427001    0  ...  194.28731  -0.24195  -0.769692\n2022-12-28  36.682572 -118.427001  255  ...  194.28731  -0.24195  -0.769692\n2022-12-29  36.682572 -118.427001   18  ...  194.28731  -0.24195  -0.769692\n2022-12-30  36.682572 -118.427001    0  ...  194.28731  -0.24195  -0.769692\n2022-12-31  36.682572 -118.427001    0  ...  194.28731  -0.24195  -0.769692\n[1461 rows x 20 columns]\n(36.725784, -118.8402255)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  36.725784 -118.840226    0  ...  335.07007 -0.398911   0.736572\n2019-01-02  36.725784 -118.840226  255  ...  335.07007 -0.398911   0.736572\n2019-01-03  36.725784 -118.840226    0  ...  335.07007 -0.398911   0.736572\n2019-01-04  36.725784 -118.840226    0  ...  335.07007 -0.398911   0.736572\n2019-01-05  36.725784 -118.840226    0  ...  335.07007 -0.398911   0.736572\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-27  36.725784 -118.840226    0  ...  335.07007 -0.398911   0.736572\n2022-12-28  36.725784 -118.840226  255  ...  335.07007 -0.398911   0.736572\n2022-12-29  36.725784 -118.840226    0  ...  335.07007 -0.398911   0.736572\n2022-12-30  36.725784 -118.840226    0  ...  335.07007 -0.398911   0.736572\n2022-12-31  36.725784 -118.840226    0  ...  335.07007 -0.398911   0.736572\n[1461 rows x 20 columns]\n(36.740183, -118.7054785)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  36.740183 -118.705478   20  ...  44.612373  0.612272   0.618651\n2019-01-02  36.740183 -118.705478  255  ...  44.612373  0.612272   0.618651\n2019-01-03  36.740183 -118.705478    0  ...  44.612373  0.612272   0.618651\n2019-01-04  36.740183 -118.705478    0  ...  44.612373  0.612272   0.618651\n2019-01-05  36.740183 -118.705478    0  ...  44.612373  0.612272   0.618651\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-27  36.740183 -118.705478    0  ...  44.612373  0.612272   0.618651\n2022-12-28  36.740183 -118.705478  255  ...  44.612373  0.612272   0.618651\n2022-12-29  36.740183 -118.705478    0  ...  44.612373  0.612272   0.618651\n2022-12-30  36.740183 -118.705478    0  ...  44.612373  0.612272   0.618651\n2022-12-31  36.740183 -118.705478    0  ...  44.612373  0.612272   0.618651\n[1461 rows x 20 columns]\n(36.7833635, -118.4270005)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  36.783364 -118.427001   23  ...  117.91524  0.723703  -0.437857\n2019-01-02  36.783364 -118.427001  255  ...  117.91524  0.723703  -0.437857\n2019-01-03  36.783364 -118.427001   21  ...  117.91524  0.723703  -0.437857\n2019-01-04  36.783364 -118.427001   19  ...  117.91524  0.723703  -0.437857\n2019-01-05  36.783364 -118.427001   23  ...  117.91524  0.723703  -0.437857\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-27  36.783364 -118.427001    0  ...  117.91524  0.723703  -0.437857\n2022-12-28  36.783364 -118.427001  255  ...  117.91524  0.723703  -0.437857\n2022-12-29  36.783364 -118.427001   18  ...  117.91524  0.723703  -0.437857\n2022-12-30  36.783364 -118.427001    0  ...  117.91524  0.723703  -0.437857\n2022-12-31  36.783364 -118.427001    0  ...  117.91524  0.723703  -0.437857\n[1461 rows x 20 columns]\n(37.006073, -106.2727945)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  37.006073 -106.272795  255  ...  192.08386 -0.206363  -0.774196\n2019-01-01  37.006073 -106.272795  255  ...  192.08386 -0.206363  -0.774196\n2019-01-01  37.006073 -106.272795  255  ...  192.08386 -0.206363  -0.774196\n2019-01-02  37.006073 -106.272795   21  ...  192.08386 -0.206363  -0.774196\n2019-01-02  37.006073 -106.272795   21  ...  192.08386 -0.206363  -0.774196\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-30  37.006073 -106.272795    0  ...  192.08386 -0.206363  -0.774196\n2022-12-30  37.006073 -106.272795    0  ...  192.08386 -0.206363  -0.774196\n2022-12-31  37.006073 -106.272795    0  ...  192.08386 -0.206363  -0.774196\n2022-12-31  37.006073 -106.272795    0  ...  192.08386 -0.206363  -0.774196\n2022-12-31  37.006073 -106.272795    0  ...  192.08386 -0.206363  -0.774196\n[4383 rows x 20 columns]\n(37.0347625, -118.912091)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  37.034762 -118.912091    0  ...  88.578835  0.785244   0.024796\n2019-01-02  37.034762 -118.912091    0  ...  88.578835  0.785244   0.024796\n2019-01-03  37.034762 -118.912091    0  ...  88.578835  0.785244   0.024796\n2019-01-04  37.034762 -118.912091    0  ...  88.578835  0.785244   0.024796\n2019-01-05  37.034762 -118.912091    0  ...  88.578835  0.785244   0.024796\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-27  37.034762 -118.912091    0  ...  88.578835  0.785244   0.024796\n2022-12-28  37.034762 -118.912091    0  ...  88.578835  0.785244   0.024796\n2022-12-29  37.034762 -118.912091    0  ...  88.578835  0.785244   0.024796\n2022-12-30  37.034762 -118.912091    0  ...  88.578835  0.785244   0.024796\n2022-12-31  37.034762 -118.912091    0  ...  88.578835  0.785244   0.024796\n[1461 rows x 20 columns]\n(37.0706085, -118.7683605)\n                  lat         lon  SWE  ...    aspect  eastness  northness\ndate                                    ...                               \n2019-01-01  37.070608 -118.768361   20  ...  78.69852  0.775608   0.193519\n2019-01-02  37.070608 -118.768361  255  ...  78.69852  0.775608   0.193519\n2019-01-03  37.070608 -118.768361    0  ...  78.69852  0.775608   0.193519\n2019-01-04  37.070608 -118.768361    0  ...  78.69852  0.775608   0.193519\n2019-01-05  37.070608 -118.768361   21  ...  78.69852  0.775608   0.193519\n...               ...         ...  ...  ...       ...       ...        ...\n2022-12-27  37.070608 -118.768361    0  ...  78.69852  0.775608   0.193519\n2022-12-28  37.070608 -118.768361  255  ...  78.69852  0.775608   0.193519\n2022-12-29  37.070608 -118.768361    0  ...  78.69852  0.775608   0.193519\n2022-12-30  37.070608 -118.768361    0  ...  78.69852  0.775608   0.193519\n2022-12-31  37.070608 -118.768361    0  ...  78.69852  0.775608   0.193519\n[1461 rows x 20 columns]\n(37.0777755, -106.452458)\n                  lat         lon  SWE  ...    aspect  eastness  northness\ndate                                    ...                               \n2019-01-01  37.077776 -106.452458  255  ...  174.9554  0.087706  -0.783458\n2019-01-02  37.077776 -106.452458   31  ...  174.9554  0.087706  -0.783458\n2019-01-03  37.077776 -106.452458   28  ...  174.9554  0.087706  -0.783458\n2019-01-04  37.077776 -106.452458   24  ...  174.9554  0.087706  -0.783458\n2019-01-05  37.077776 -106.452458   27  ...  174.9554  0.087706  -0.783458\n...               ...         ...  ...  ...       ...       ...        ...\n2022-12-27  37.077776 -106.452458  255  ...  174.9554  0.087706  -0.783458\n2022-12-28  37.077776 -106.452458    0  ...  174.9554  0.087706  -0.783458\n2022-12-29  37.077776 -106.452458   21  ...  174.9554  0.087706  -0.783458\n2022-12-30  37.077776 -106.452458   19  ...  174.9554  0.087706  -0.783458\n2022-12-31  37.077776 -106.452458    0  ...  174.9554  0.087706  -0.783458\n[1461 rows x 20 columns]\n(37.092108, -118.498866)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  37.092108 -118.498866   25  ...  248.30103 -0.748683  -0.354142\n2019-01-02  37.092108 -118.498866  255  ...  248.30103 -0.748683  -0.354142\n2019-01-03  37.092108 -118.498866   24  ...  248.30103 -0.748683  -0.354142\n2019-01-04  37.092108 -118.498866   25  ...  248.30103 -0.748683  -0.354142\n2019-01-05  37.092108 -118.498866   28  ...  248.30103 -0.748683  -0.354142\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-27  37.092108 -118.498866    0  ...  248.30103 -0.748683  -0.354142\n2022-12-28  37.092108 -118.498866  255  ...  248.30103 -0.748683  -0.354142\n2022-12-29  37.092108 -118.498866   26  ...  248.30103 -0.748683  -0.354142\n2022-12-30  37.092108 -118.498866   12  ...  248.30103 -0.748683  -0.354142\n2022-12-31  37.092108 -118.498866   15  ...  248.30103 -0.748683  -0.354142\n[1461 rows x 20 columns]\n(37.156571, -119.1995515)\n                  lat         lon  SWE  ...    aspect  eastness  northness\ndate                                    ...                               \n2019-01-01  37.156571 -119.199551    0  ...  127.4153  0.671226   -0.54598\n2019-01-02  37.156571 -119.199551    0  ...  127.4153  0.671226   -0.54598\n2019-01-03  37.156571 -119.199551    0  ...  127.4153  0.671226   -0.54598\n2019-01-04  37.156571 -119.199551    0  ...  127.4153  0.671226   -0.54598\n2019-01-05  37.156571 -119.199551    0  ...  127.4153  0.671226   -0.54598\n...               ...         ...  ...  ...       ...       ...        ...\n2022-12-27  37.156571 -119.199551    0  ...  127.4153  0.671226   -0.54598\n2022-12-28  37.156571 -119.199551    0  ...  127.4153  0.671226   -0.54598\n2022-12-29  37.156571 -119.199551    0  ...  127.4153  0.671226   -0.54598\n2022-12-30  37.156571 -119.199551    0  ...  127.4153  0.671226   -0.54598\n2022-12-31  37.156571 -119.199551    0  ...  127.4153  0.671226   -0.54598\n[1461 rows x 20 columns]\n(37.1780465, -118.561748)\n                  lat         lon  SWE  ...    aspect  eastness  northness\ndate                                    ...                               \n2019-01-01  37.178047 -118.561748   25  ...  1.035605  0.018072   0.785316\n2019-01-02  37.178047 -118.561748  255  ...  1.035605  0.018072   0.785316\n2019-01-03  37.178047 -118.561748   24  ...  1.035605  0.018072   0.785316\n2019-01-04  37.178047 -118.561748   25  ...  1.035605  0.018072   0.785316\n2019-01-05  37.178047 -118.561748   28  ...  1.035605  0.018072   0.785316\n...               ...         ...  ...  ...       ...       ...        ...\n2022-12-27  37.178047 -118.561748    0  ...  1.035605  0.018072   0.785316\n2022-12-28  37.178047 -118.561748  255  ...  1.035605  0.018072   0.785316\n2022-12-29  37.178047 -118.561748   26  ...  1.035605  0.018072   0.785316\n2022-12-30  37.178047 -118.561748   12  ...  1.035605  0.018072   0.785316\n2022-12-31  37.178047 -118.561748   15  ...  1.035605  0.018072   0.785316\n[1461 rows x 20 columns]\n(37.19236, -118.9390405)\n                 lat         lon  SWE  ...     aspect  eastness  northness\ndate                                   ...                                \n2019-01-01  37.19236 -118.939041   22  ...  24.605782  0.394541   0.737872\n2019-01-02  37.19236 -118.939041  255  ...  24.605782  0.394541   0.737872\n2019-01-03  37.19236 -118.939041    0  ...  24.605782  0.394541   0.737872\n2019-01-04  37.19236 -118.939041    0  ...  24.605782  0.394541   0.737872\n2019-01-05  37.19236 -118.939041   21  ...  24.605782  0.394541   0.737872\n...              ...         ...  ...  ...        ...       ...        ...\n2022-12-27  37.19236 -118.939041    0  ...  24.605782  0.394541   0.737872\n2022-12-28  37.19236 -118.939041    0  ...  24.605782  0.394541   0.737872\n2022-12-29  37.19236 -118.939041   19  ...  24.605782  0.394541   0.737872\n2022-12-30  37.19236 -118.939041    0  ...  24.605782  0.394541   0.737872\n2022-12-31  37.19236 -118.939041    0  ...  24.605782  0.394541   0.737872\n[1461 rows x 20 columns]\n(37.2209785, -119.2175185)\n                  lat         lon  SWE  ...    aspect  eastness  northness\ndate                                    ...                               \n2019-01-01  37.220979 -119.217518    0  ...  82.07095  0.780595   0.137082\n2019-01-02  37.220979 -119.217518    0  ...  82.07095  0.780595   0.137082\n2019-01-03  37.220979 -119.217518    0  ...  82.07095  0.780595   0.137082\n2019-01-04  37.220979 -119.217518    0  ...  82.07095  0.780595   0.137082\n2019-01-05  37.220979 -119.217518    0  ...  82.07095  0.780595   0.137082\n...               ...         ...  ...  ...       ...       ...        ...\n2022-12-27  37.220979 -119.217518    0  ...  82.07095  0.780595   0.137082\n2022-12-28  37.220979 -119.217518    0  ...  82.07095  0.780595   0.137082\n2022-12-29  37.220979 -119.217518    0  ...  82.07095  0.780595   0.137082\n2022-12-30  37.220979 -119.217518    0  ...  82.07095  0.780595   0.137082\n2022-12-31  37.220979 -119.217518    0  ...  82.07095  0.780595   0.137082\n[1461 rows x 20 columns]\n(37.35677, -105.2307495)\n                 lat        lon  SWE  ...    aspect  eastness  northness\ndate                                  ...                               \n2019-01-01  37.35677 -105.23075  255  ...  74.62513   0.76718    0.25917\n2019-01-01  37.35677 -105.23075  255  ...  74.62513   0.76718    0.25917\n2019-01-01  37.35677 -105.23075  255  ...  74.62513   0.76718    0.25917\n2019-01-01  37.35677 -105.23075  255  ...  74.62513   0.76718    0.25917\n2019-01-02  37.35677 -105.23075   27  ...  74.62513   0.76718    0.25917\n...              ...        ...  ...  ...       ...       ...        ...\n2022-12-30  37.35677 -105.23075    0  ...  74.62513   0.76718    0.25917\n2022-12-31  37.35677 -105.23075    0  ...  74.62513   0.76718    0.25917\n2022-12-31  37.35677 -105.23075    0  ...  74.62513   0.76718    0.25917\n2022-12-31  37.35677 -105.23075    0  ...  74.62513   0.76718    0.25917\n2022-12-31  37.35677 -105.23075    0  ...  74.62513   0.76718    0.25917\n[5844 rows x 20 columns]\n(37.36391, -106.5422895)\n                 lat         lon  SWE  ...     aspect  eastness  northness\ndate                                   ...                                \n2019-01-01  37.36391 -106.542289  255  ...  355.78055 -0.073445   0.784041\n2019-01-02  37.36391 -106.542289   48  ...  355.78055 -0.073445   0.784041\n2019-01-03  37.36391 -106.542289   42  ...  355.78055 -0.073445   0.784041\n2019-01-04  37.36391 -106.542289   41  ...  355.78055 -0.073445   0.784041\n2019-01-05  37.36391 -106.542289   39  ...  355.78055 -0.073445   0.784041\n...              ...         ...  ...  ...        ...       ...        ...\n2022-12-27  37.36391 -106.542289  255  ...  355.78055 -0.073445   0.784041\n2022-12-28  37.36391 -106.542289    0  ...  355.78055 -0.073445   0.784041\n2022-12-29  37.36391 -106.542289   26  ...  355.78055 -0.073445   0.784041\n2022-12-30  37.36391 -106.542289   26  ...  355.78055 -0.073445   0.784041\n2022-12-31  37.36391 -106.542289    0  ...  355.78055 -0.073445   0.784041\n[1461 rows x 20 columns]\n(37.385326, -118.912091)\n                  lat         lon  SWE  ...   aspect  eastness  northness\ndate                                    ...                              \n2019-01-01  37.385326 -118.912091   19  ...  65.8464  0.739652   0.388399\n2019-01-02  37.385326 -118.912091    0  ...  65.8464  0.739652   0.388399\n2019-01-03  37.385326 -118.912091    0  ...  65.8464  0.739652   0.388399\n2019-01-04  37.385326 -118.912091    0  ...  65.8464  0.739652   0.388399\n2019-01-05  37.385326 -118.912091    0  ...  65.8464  0.739652   0.388399\n...               ...         ...  ...  ...      ...       ...        ...\n2022-12-27  37.385326 -118.912091    0  ...  65.8464  0.739652   0.388399\n2022-12-28  37.385326 -118.912091    0  ...  65.8464  0.739652   0.388399\n2022-12-29  37.385326 -118.912091    0  ...  65.8464  0.739652   0.388399\n2022-12-30  37.385326 -118.912091    0  ...  65.8464  0.739652   0.388399\n2022-12-31  37.385326 -118.912091    0  ...  65.8464  0.739652   0.388399\n[1461 rows x 20 columns]\n(37.4067365, -119.4870125)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  37.406737 -119.487013    0  ...  174.77098  0.090886  -0.783313\n2019-01-02  37.406737 -119.487013    0  ...  174.77098  0.090886  -0.783313\n2019-01-03  37.406737 -119.487013    0  ...  174.77098  0.090886  -0.783313\n2019-01-04  37.406737 -119.487013    0  ...  174.77098  0.090886  -0.783313\n2019-01-05  37.406737 -119.487013    0  ...  174.77098  0.090886  -0.783313\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-27  37.406737 -119.487013    0  ...  174.77098  0.090886  -0.783313\n2022-12-28  37.406737 -119.487013    0  ...  174.77098  0.090886  -0.783313\n2022-12-29  37.406737 -119.487013    0  ...  174.77098  0.090886  -0.783313\n2022-12-30  37.406737 -119.487013    0  ...  174.77098  0.090886  -0.783313\n2022-12-31  37.406737 -119.487013    0  ...  174.77098  0.090886  -0.783313\n[1461 rows x 20 columns]\n(37.4281405, -106.6231375)\n                 lat         lon  SWE  ...    aspect  eastness  northness\ndate                                   ...                               \n2019-01-01  37.42814 -106.623137  255  ...  128.6302  0.663167   -0.55809\n2019-01-02  37.42814 -106.623137   48  ...  128.6302  0.663167   -0.55809\n2019-01-03  37.42814 -106.623137   42  ...  128.6302  0.663167   -0.55809\n2019-01-04  37.42814 -106.623137   41  ...  128.6302  0.663167   -0.55809\n2019-01-05  37.42814 -106.623137   39  ...  128.6302  0.663167   -0.55809\n...              ...         ...  ...  ...       ...       ...        ...\n2022-12-27  37.42814 -106.623137  255  ...  128.6302  0.663167   -0.55809\n2022-12-28  37.42814 -106.623137    0  ...  128.6302  0.663167   -0.55809\n2022-12-29  37.42814 -106.623137   26  ...  128.6302  0.663167   -0.55809\n2022-12-30  37.42814 -106.623137   26  ...  128.6302  0.663167   -0.55809\n2022-12-31  37.42814 -106.623137    0  ...  128.6302  0.663167   -0.55809\n[1461 rows x 20 columns]\n(37.4495385, -118.7593775)\n                  lat         lon  SWE  ...    aspect  eastness  northness\ndate                                    ...                               \n2019-01-01  37.449539 -118.759377   32  ...  301.4781  -0.70614   0.481228\n2019-01-02  37.449539 -118.759377   20  ...  301.4781  -0.70614   0.481228\n2019-01-03  37.449539 -118.759377   28  ...  301.4781  -0.70614   0.481228\n2019-01-04  37.449539 -118.759377   24  ...  301.4781  -0.70614   0.481228\n2019-01-05  37.449539 -118.759377   34  ...  301.4781  -0.70614   0.481228\n...               ...         ...  ...  ...       ...       ...        ...\n2022-12-27  37.449539 -118.759377    0  ...  301.4781  -0.70614   0.481228\n2022-12-28  37.449539 -118.759377   16  ...  301.4781  -0.70614   0.481228\n2022-12-29  37.449539 -118.759377   45  ...  301.4781  -0.70614   0.481228\n2022-12-30  37.449539 -118.759377   27  ...  301.4781  -0.70614   0.481228\n2022-12-31  37.449539 -118.759377    0  ...  301.4781  -0.70614   0.481228\n[1461 rows x 20 columns]\n(37.4566695, -108.4467175)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  37.456669 -108.446718   21  ...  146.80101  0.500959  -0.696765\n2019-01-02  37.456669 -108.446718   24  ...  146.80101  0.500959  -0.696765\n2019-01-03  37.456669 -108.446718   26  ...  146.80101  0.500959  -0.696765\n2019-01-04  37.456669 -108.446718   21  ...  146.80101  0.500959  -0.696765\n2019-01-05  37.456669 -108.446718   25  ...  146.80101  0.500959  -0.696765\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-27  37.456669 -108.446718    0  ...  146.80101  0.500959  -0.696765\n2022-12-28  37.456669 -108.446718    0  ...  146.80101  0.500959  -0.696765\n2022-12-29  37.456669 -108.446718    0  ...  146.80101  0.500959  -0.696765\n2022-12-30  37.456669 -108.446718    0  ...  146.80101  0.500959  -0.696765\n2022-12-31  37.456669 -108.446718    0  ...  146.80101  0.500959  -0.696765\n[1461 rows x 20 columns]\n(37.4566695, -108.0155265)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  37.456669 -108.015527    0  ...  318.66403 -0.583703   0.644045\n2019-01-02  37.456669 -108.015527   20  ...  318.66403 -0.583703   0.644045\n2019-01-03  37.456669 -108.015527   18  ...  318.66403 -0.583703   0.644045\n2019-01-04  37.456669 -108.015527    0  ...  318.66403 -0.583703   0.644045\n2019-01-05  37.456669 -108.015527    0  ...  318.66403 -0.583703   0.644045\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-27  37.456669 -108.015527    0  ...  318.66403 -0.583703   0.644045\n2022-12-28  37.456669 -108.015527    0  ...  318.66403 -0.583703   0.644045\n2022-12-29  37.456669 -108.015527    0  ...  318.66403 -0.583703   0.644045\n2022-12-30  37.456669 -108.015527    0  ...  318.66403 -0.583703   0.644045\n2022-12-31  37.456669 -108.015527    0  ...  318.66403 -0.583703   0.644045\n[1461 rows x 20 columns]\n(37.4709305, -119.2893835)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  37.470931 -119.289383   24  ...  201.72794 -0.354556  -0.748583\n2019-01-02  37.470931 -119.289383    0  ...  201.72794 -0.354556  -0.748583\n2019-01-03  37.470931 -119.289383    0  ...  201.72794 -0.354556  -0.748583\n2019-01-04  37.470931 -119.289383    0  ...  201.72794 -0.354556  -0.748583\n2019-01-05  37.470931 -119.289383    0  ...  201.72794 -0.354556  -0.748583\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-27  37.470931 -119.289383    0  ...  201.72794 -0.354556  -0.748583\n2022-12-28  37.470931 -119.289383    0  ...  201.72794 -0.354556  -0.748583\n2022-12-29  37.470931 -119.289383    0  ...  201.72794 -0.354556  -0.748583\n2022-12-30  37.470931 -119.289383    0  ...  201.72794 -0.354556  -0.748583\n2022-12-31  37.470931 -119.289383    0  ...  201.72794 -0.354556  -0.748583\n[1461 rows x 20 columns]\n(37.4780595, -108.096375)\n                 lat         lon  SWE  ...     aspect  eastness  northness\ndate                                   ...                                \n2019-01-01  37.47806 -108.096375    0  ...  38.114204  0.552993   0.666629\n2019-01-02  37.47806 -108.096375   20  ...  38.114204  0.552993   0.666629\n2019-01-03  37.47806 -108.096375   18  ...  38.114204  0.552993   0.666629\n2019-01-04  37.47806 -108.096375    0  ...  38.114204  0.552993   0.666629\n2019-01-05  37.47806 -108.096375    0  ...  38.114204  0.552993   0.666629\n...              ...         ...  ...  ...        ...       ...        ...\n2022-12-27  37.47806 -108.096375    0  ...  38.114204  0.552993   0.666629\n2022-12-28  37.47806 -108.096375    0  ...  38.114204  0.552993   0.666629\n2022-12-29  37.47806 -108.096375    0  ...  38.114204  0.552993   0.666629\n2022-12-30  37.47806 -108.096375    0  ...  38.114204  0.552993   0.666629\n2022-12-31  37.47806 -108.096375    0  ...  38.114204  0.552993   0.666629\n[1461 rows x 20 columns]\n(37.492316, -107.7011165)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  37.492316 -107.701116  255  ...  224.92964   -0.6149  -0.616058\n2019-01-02  37.492316 -107.701116   30  ...  224.92964   -0.6149  -0.616058\n2019-01-03  37.492316 -107.701116   20  ...  224.92964   -0.6149  -0.616058\n2019-01-04  37.492316 -107.701116   24  ...  224.92964   -0.6149  -0.616058\n2019-01-05  37.492316 -107.701116    0  ...  224.92964   -0.6149  -0.616058\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-27  37.492316 -107.701116  255  ...  224.92964   -0.6149  -0.616058\n2022-12-28  37.492316 -107.701116    0  ...  224.92964   -0.6149  -0.616058\n2022-12-29  37.492316 -107.701116    0  ...  224.92964   -0.6149  -0.616058\n2022-12-30  37.492316 -107.701116   17  ...  224.92964   -0.6149  -0.616058\n2022-12-31  37.492316 -107.701116    0  ...  224.92964   -0.6149  -0.616058\n[1461 rows x 20 columns]\n(37.4994435, -106.865683)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  37.499443 -106.865683  255  ...  183.17847 -0.055389  -0.784628\n2019-01-01  37.499443 -106.865683  255  ...  183.17847 -0.055389  -0.784628\n2019-01-02  37.499443 -106.865683   47  ...  183.17847 -0.055389  -0.784628\n2019-01-02  37.499443 -106.865683   47  ...  183.17847 -0.055389  -0.784628\n2019-01-03  37.499443 -106.865683   42  ...  183.17847 -0.055389  -0.784628\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-29  37.499443 -106.865683   29  ...  183.17847 -0.055389  -0.784628\n2022-12-30  37.499443 -106.865683   31  ...  183.17847 -0.055389  -0.784628\n2022-12-30  37.499443 -106.865683   31  ...  183.17847 -0.055389  -0.784628\n2022-12-31  37.499443 -106.865683   30  ...  183.17847 -0.055389  -0.784628\n2022-12-31  37.499443 -106.865683   30  ...  183.17847 -0.055389  -0.784628\n[2922 rows x 20 columns]\n(37.527945, -113.0550755)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  37.527945 -113.055076    0  ...  106.99514  0.763079  -0.284369\n2019-01-01  37.527945 -113.055076    0  ...  106.99514  0.763079  -0.284369\n2019-01-01  37.527945 -113.055076    0  ...  106.99514  0.763079  -0.284369\n2019-01-01  37.527945 -113.055076    0  ...  106.99514  0.763079  -0.284369\n2019-01-02  37.527945 -113.055076  255  ...  106.99514  0.763079  -0.284369\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-30  37.527945 -113.055076  255  ...  106.99514  0.763079  -0.284369\n2022-12-31  37.527945 -113.055076    0  ...  106.99514  0.763079  -0.284369\n2022-12-31  37.527945 -113.055076    0  ...  106.99514  0.763079  -0.284369\n2022-12-31  37.527945 -113.055076    0  ...  106.99514  0.763079  -0.284369\n2022-12-31  37.527945 -113.055076    0  ...  106.99514  0.763079  -0.284369\n[5844 rows x 20 columns]\n(37.5564365, -119.2354845)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  37.556436 -119.235484   24  ...  290.10178 -0.753993   0.331041\n2019-01-02  37.556436 -119.235484    0  ...  290.10178 -0.753993   0.331041\n2019-01-03  37.556436 -119.235484    0  ...  290.10178 -0.753993   0.331041\n2019-01-04  37.556436 -119.235484    0  ...  290.10178 -0.753993   0.331041\n2019-01-05  37.556436 -119.235484    0  ...  290.10178 -0.753993   0.331041\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-27  37.556436 -119.235484    0  ...  290.10178 -0.753993   0.331041\n2022-12-28  37.556436 -119.235484    0  ...  290.10178 -0.753993   0.331041\n2022-12-29  37.556436 -119.235484    0  ...  290.10178 -0.753993   0.331041\n2022-12-30  37.556436 -119.235484    0  ...  290.10178 -0.753993   0.331041\n2022-12-31  37.556436 -119.235484    0  ...  290.10178 -0.753993   0.331041\n[1461 rows x 20 columns]\n(37.5777975, -112.9023615)\n                  lat         lon  SWE  ...    aspect  eastness  northness\ndate                                    ...                               \n2019-01-01  37.577798 -112.902361   19  ...  156.1074  0.384829  -0.740663\n2019-01-01  37.577798 -112.902361   19  ...  156.1074  0.384829  -0.740663\n2019-01-01  37.577798 -112.902361   19  ...  156.1074  0.384829  -0.740663\n2019-01-01  37.577798 -112.902361   19  ...  156.1074  0.384829  -0.740663\n2019-01-01  37.577798 -112.902361   19  ...  156.1074  0.384829  -0.740663\n...               ...         ...  ...  ...       ...       ...        ...\n2022-12-31  37.577798 -112.902361    0  ...  156.1074  0.384829  -0.740663\n2022-12-31  37.577798 -112.902361    0  ...  156.1074  0.384829  -0.740663\n2022-12-31  37.577798 -112.902361    0  ...  156.1074  0.384829  -0.740663\n2022-12-31  37.577798 -112.902361    0  ...  156.1074  0.384829  -0.740663\n2022-12-31  37.577798 -112.902361    0  ...  156.1074  0.384829  -0.740663\n[11688 rows x 20 columns]\n(37.5991525, -107.2339925)\n                  lat         lon  SWE  ...    aspect  eastness  northness\ndate                                    ...                               \n2019-01-01  37.599153 -107.233992  255  ...  260.9123 -0.779083  -0.156652\n2019-01-02  37.599153 -107.233992   43  ...  260.9123 -0.779083  -0.156652\n2019-01-03  37.599153 -107.233992   36  ...  260.9123 -0.779083  -0.156652\n2019-01-04  37.599153 -107.233992   39  ...  260.9123 -0.779083  -0.156652\n2019-01-05  37.599153 -107.233992   38  ...  260.9123 -0.779083  -0.156652\n...               ...         ...  ...  ...       ...       ...        ...\n2022-12-27  37.599153 -107.233992  255  ...  260.9123 -0.779083  -0.156652\n2022-12-28  37.599153 -107.233992   24  ...  260.9123 -0.779083  -0.156652\n2022-12-29  37.599153 -107.233992   23  ...  260.9123 -0.779083  -0.156652\n2022-12-30  37.599153 -107.233992   29  ...  260.9123 -0.779083  -0.156652\n2022-12-31  37.599153 -107.233992   18  ...  260.9123 -0.779083  -0.156652\n[1461 rows x 20 columns]\n(37.6205015, -119.028872)\n                  lat         lon  SWE  ...    aspect  eastness  northness\ndate                                    ...                               \n2019-01-01  37.620502 -119.028872   23  ...  94.17212  0.784071  -0.072625\n2019-01-02  37.620502 -119.028872    0  ...  94.17212  0.784071  -0.072625\n2019-01-03  37.620502 -119.028872    0  ...  94.17212  0.784071  -0.072625\n2019-01-04  37.620502 -119.028872    0  ...  94.17212  0.784071  -0.072625\n2019-01-05  37.620502 -119.028872    0  ...  94.17212  0.784071  -0.072625\n...               ...         ...  ...  ...       ...       ...        ...\n2022-12-27  37.620502 -119.028872    0  ...  94.17212  0.784071  -0.072625\n2022-12-28  37.620502 -119.028872    0  ...  94.17212  0.784071  -0.072625\n2022-12-29  37.620502 -119.028872   15  ...  94.17212  0.784071  -0.072625\n2022-12-30  37.620502 -119.028872    0  ...  94.17212  0.784071  -0.072625\n2022-12-31  37.620502 -119.028872    0  ...  94.17212  0.784071  -0.072625\n[1461 rows x 20 columns]\n(37.634731, -119.0827705)\n                  lat        lon  SWE  ...     aspect  eastness  northness\ndate                                   ...                                \n2019-01-01  37.634731 -119.08277   23  ...  130.74547  0.648358  -0.578271\n2019-01-02  37.634731 -119.08277    0  ...  130.74547  0.648358  -0.578271\n2019-01-03  37.634731 -119.08277    0  ...  130.74547  0.648358  -0.578271\n2019-01-04  37.634731 -119.08277    0  ...  130.74547  0.648358  -0.578271\n2019-01-05  37.634731 -119.08277    0  ...  130.74547  0.648358  -0.578271\n...               ...        ...  ...  ...        ...       ...        ...\n2022-12-27  37.634731 -119.08277    0  ...  130.74547  0.648358  -0.578271\n2022-12-28  37.634731 -119.08277    0  ...  130.74547  0.648358  -0.578271\n2022-12-29  37.634731 -119.08277   15  ...  130.74547  0.648358  -0.578271\n2022-12-30  37.634731 -119.08277    0  ...  130.74547  0.648358  -0.578271\n2022-12-31  37.634731 -119.08277    0  ...  130.74547  0.648358  -0.578271\n[1461 rows x 20 columns]\n(37.641844500000005, -108.0065435)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  37.641845 -108.006544    0  ...  150.87732  0.452936  -0.718025\n2019-01-02  37.641845 -108.006544   23  ...  150.87732  0.452936  -0.718025\n2019-01-03  37.641845 -108.006544    0  ...  150.87732  0.452936  -0.718025\n2019-01-04  37.641845 -108.006544    0  ...  150.87732  0.452936  -0.718025\n2019-01-05  37.641845 -108.006544    0  ...  150.87732  0.452936  -0.718025\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-27  37.641845 -108.006544    0  ...  150.87732  0.452936  -0.718025\n2022-12-28  37.641845 -108.006544    0  ...  150.87732  0.452936  -0.718025\n2022-12-29  37.641845 -108.006544    0  ...  150.87732  0.452936  -0.718025\n2022-12-30  37.641845 -108.006544    0  ...  150.87732  0.452936  -0.718025\n2022-12-31  37.641845 -108.006544    0  ...  150.87732  0.452936  -0.718025\n[1461 rows x 20 columns]\n(37.6631815, -107.7999305)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  37.663182 -107.799931    0  ...  179.38268  0.010774  -0.785369\n2019-01-01  37.663182 -107.799931    0  ...  179.38268  0.010774  -0.785369\n2019-01-02  37.663182 -107.799931   23  ...  179.38268  0.010774  -0.785369\n2019-01-02  37.663182 -107.799931   23  ...  179.38268  0.010774  -0.785369\n2019-01-03  37.663182 -107.799931    0  ...  179.38268  0.010774  -0.785369\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-29  37.663182 -107.799931    0  ...  179.38268  0.010774  -0.785369\n2022-12-30  37.663182 -107.799931    0  ...  179.38268  0.010774  -0.785369\n2022-12-30  37.663182 -107.799931    0  ...  179.38268  0.010774  -0.785369\n2022-12-31  37.663182 -107.799931    0  ...  179.38268  0.010774  -0.785369\n2022-12-31  37.663182 -107.799931    0  ...  179.38268  0.010774  -0.785369\n[2922 rows x 20 columns]\n(37.698729, -107.7819645)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  37.698729 -107.781965  255  ...  210.64645 -0.471409   -0.71046\n2019-01-02  37.698729 -107.781965   35  ...  210.64645 -0.471409   -0.71046\n2019-01-03  37.698729 -107.781965   30  ...  210.64645 -0.471409   -0.71046\n2019-01-04  37.698729 -107.781965   31  ...  210.64645 -0.471409   -0.71046\n2019-01-05  37.698729 -107.781965   29  ...  210.64645 -0.471409   -0.71046\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-27  37.698729 -107.781965   19  ...  210.64645 -0.471409   -0.71046\n2022-12-28  37.698729 -107.781965   20  ...  210.64645 -0.471409   -0.71046\n2022-12-29  37.698729 -107.781965   20  ...  210.64645 -0.471409   -0.71046\n2022-12-30  37.698729 -107.781965   20  ...  210.64645 -0.471409   -0.71046\n2022-12-31  37.698729 -107.781965    0  ...  210.64645 -0.471409   -0.71046\n[1461 rows x 20 columns]\n(37.720049, -107.5214535)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  37.720049 -107.521454  255  ...  205.62473 -0.408185  -0.733724\n2019-01-02  37.720049 -107.521454   43  ...  205.62473 -0.408185  -0.733724\n2019-01-03  37.720049 -107.521454   36  ...  205.62473 -0.408185  -0.733724\n2019-01-04  37.720049 -107.521454   39  ...  205.62473 -0.408185  -0.733724\n2019-01-05  37.720049 -107.521454   38  ...  205.62473 -0.408185  -0.733724\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-27  37.720049 -107.521454  255  ...  205.62473 -0.408185  -0.733724\n2022-12-28  37.720049 -107.521454   24  ...  205.62473 -0.408185  -0.733724\n2022-12-29  37.720049 -107.521454   23  ...  205.62473 -0.408185  -0.733724\n2022-12-30  37.720049 -107.521454   29  ...  205.62473 -0.408185  -0.733724\n2022-12-31  37.720049 -107.521454   18  ...  205.62473 -0.408185  -0.733724\n[1461 rows x 20 columns]\n(37.7271545, -119.1366695)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  37.727154 -119.136669   23  ...  38.885838  0.560589    0.66143\n2019-01-02  37.727154 -119.136669    0  ...  38.885838  0.560589    0.66143\n2019-01-03  37.727154 -119.136669    0  ...  38.885838  0.560589    0.66143\n2019-01-04  37.727154 -119.136669    0  ...  38.885838  0.560589    0.66143\n2019-01-05  37.727154 -119.136669    0  ...  38.885838  0.560589    0.66143\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-27  37.727154 -119.136669    0  ...  38.885838  0.560589    0.66143\n2022-12-28  37.727154 -119.136669    0  ...  38.885838  0.560589    0.66143\n2022-12-29  37.727154 -119.136669   15  ...  38.885838  0.560589    0.66143\n2022-12-30  37.727154 -119.136669    0  ...  38.885838  0.560589    0.66143\n2022-12-31  37.727154 -119.136669    0  ...  38.885838  0.560589    0.66143\n[1461 rows x 20 columns]\n(37.7271545, -107.2699245)\n                  lat         lon  SWE  ...    aspect  eastness  northness\ndate                                    ...                               \n2019-01-01  37.727154 -107.269925  255  ...  331.9554 -0.439491   0.723108\n2019-01-02  37.727154 -107.269925   36  ...  331.9554 -0.439491   0.723108\n2019-01-03  37.727154 -107.269925   33  ...  331.9554 -0.439491   0.723108\n2019-01-04  37.727154 -107.269925   32  ...  331.9554 -0.439491   0.723108\n2019-01-05  37.727154 -107.269925   34  ...  331.9554 -0.439491   0.723108\n...               ...         ...  ...  ...       ...       ...        ...\n2022-12-27  37.727154 -107.269925  255  ...  331.9554 -0.439491   0.723108\n2022-12-28  37.727154 -107.269925   29  ...  331.9554 -0.439491   0.723108\n2022-12-29  37.727154 -107.269925   29  ...  331.9554 -0.439491   0.723108\n2022-12-30  37.727154 -107.269925   34  ...  331.9554 -0.439491   0.723108\n2022-12-31  37.727154 -107.269925   23  ...  331.9554 -0.439491   0.723108\n[1461 rows x 20 columns]\n(37.7626715, -119.7744735)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  37.762672 -119.774473    0  ...  169.11069  0.186712  -0.776314\n2019-01-02  37.762672 -119.774473    0  ...  169.11069  0.186712  -0.776314\n2019-01-03  37.762672 -119.774473    0  ...  169.11069  0.186712  -0.776314\n2019-01-04  37.762672 -119.774473    0  ...  169.11069  0.186712  -0.776314\n2019-01-05  37.762672 -119.774473    0  ...  169.11069  0.186712  -0.776314\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-27  37.762672 -119.774473    0  ...  169.11069  0.186712  -0.776314\n2022-12-28  37.762672 -119.774473    0  ...  169.11069  0.186712  -0.776314\n2022-12-29  37.762672 -119.774473    0  ...  169.11069  0.186712  -0.776314\n2022-12-30  37.762672 -119.774473    0  ...  169.11069  0.186712  -0.776314\n2022-12-31  37.762672 -119.774473    0  ...  169.11069  0.186712  -0.776314\n[1461 rows x 20 columns]\n(37.7910725, -108.1772235)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  37.791072 -108.177223    0  ...  257.88016 -0.774128  -0.206951\n2019-01-02  37.791072 -108.177223   19  ...  257.88016 -0.774128  -0.206951\n2019-01-03  37.791072 -108.177223    0  ...  257.88016 -0.774128  -0.206951\n2019-01-04  37.791072 -108.177223    0  ...  257.88016 -0.774128  -0.206951\n2019-01-05  37.791072 -108.177223    0  ...  257.88016 -0.774128  -0.206951\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-27  37.791072 -108.177223    0  ...  257.88016 -0.774128  -0.206951\n2022-12-28  37.791072 -108.177223    0  ...  257.88016 -0.774128  -0.206951\n2022-12-29  37.791072 -108.177223    0  ...  257.88016 -0.774128  -0.206951\n2022-12-30  37.791072 -108.177223    0  ...  257.88016 -0.774128  -0.206951\n2022-12-31  37.791072 -108.177223    0  ...  257.88016 -0.774128  -0.206951\n[1461 rows x 20 columns]\n(37.7910725, -108.0155265)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  37.791072 -108.015527    0  ...  172.68689  0.126611  -0.781314\n2019-01-02  37.791072 -108.015527   23  ...  172.68689  0.126611  -0.781314\n2019-01-03  37.791072 -108.015527    0  ...  172.68689  0.126611  -0.781314\n2019-01-04  37.791072 -108.015527    0  ...  172.68689  0.126611  -0.781314\n2019-01-05  37.791072 -108.015527    0  ...  172.68689  0.126611  -0.781314\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-27  37.791072 -108.015527    0  ...  172.68689  0.126611  -0.781314\n2022-12-28  37.791072 -108.015527    0  ...  172.68689  0.126611  -0.781314\n2022-12-29  37.791072 -108.015527    0  ...  172.68689  0.126611  -0.781314\n2022-12-30  37.791072 -108.015527    0  ...  172.68689  0.126611  -0.781314\n2022-12-31  37.791072 -108.015527    0  ...  172.68689  0.126611  -0.781314\n[1461 rows x 20 columns]\n(37.798171, -119.1995515)\n                  lat         lon  SWE  ...    aspect  eastness  northness\ndate                                    ...                               \n2019-01-01  37.798171 -119.199551   17  ...  233.3865 -0.676371  -0.537779\n2019-01-02  37.798171 -119.199551   16  ...  233.3865 -0.676371  -0.537779\n2019-01-03  37.798171 -119.199551    5  ...  233.3865 -0.676371  -0.537779\n2019-01-04  37.798171 -119.199551    0  ...  233.3865 -0.676371  -0.537779\n2019-01-05  37.798171 -119.199551    7  ...  233.3865 -0.676371  -0.537779\n...               ...         ...  ...  ...       ...       ...        ...\n2022-12-27  37.798171 -119.199551    0  ...  233.3865 -0.676371  -0.537779\n2022-12-28  37.798171 -119.199551   12  ...  233.3865 -0.676371  -0.537779\n2022-12-29  37.798171 -119.199551   10  ...  233.3865 -0.676371  -0.537779\n2022-12-30  37.798171 -119.199551    0  ...  233.3865 -0.676371  -0.537779\n2022-12-31  37.798171 -119.199551    0  ...  233.3865 -0.676371  -0.537779\n[1461 rows x 20 columns]\n(37.833654, -119.4510805)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  37.833654 -119.451081   29  ...  64.776634   0.73538   0.402843\n2019-01-02  37.833654 -119.451081    0  ...  64.776634   0.73538   0.402843\n2019-01-03  37.833654 -119.451081    0  ...  64.776634   0.73538   0.402843\n2019-01-04  37.833654 -119.451081    0  ...  64.776634   0.73538   0.402843\n2019-01-05  37.833654 -119.451081    0  ...  64.776634   0.73538   0.402843\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-27  37.833654 -119.451081    0  ...  64.776634   0.73538   0.402843\n2022-12-28  37.833654 -119.451081    0  ...  64.776634   0.73538   0.402843\n2022-12-29  37.833654 -119.451081    0  ...  64.776634   0.73538   0.402843\n2022-12-30  37.833654 -119.451081    0  ...  64.776634   0.73538   0.402843\n2022-12-31  37.833654 -119.451081    0  ...  64.776634   0.73538   0.402843\n[1461 rows x 20 columns]\n(37.833654, -108.2221395)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  37.833654 -108.222139   20  ...  198.02652  -0.30011  -0.760243\n2019-01-02  37.833654 -108.222139   22  ...  198.02652  -0.30011  -0.760243\n2019-01-03  37.833654 -108.222139   21  ...  198.02652  -0.30011  -0.760243\n2019-01-04  37.833654 -108.222139    0  ...  198.02652  -0.30011  -0.760243\n2019-01-05  37.833654 -108.222139    0  ...  198.02652  -0.30011  -0.760243\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-27  37.833654 -108.222139    0  ...  198.02652  -0.30011  -0.760243\n2022-12-28  37.833654 -108.222139    0  ...  198.02652  -0.30011  -0.760243\n2022-12-29  37.833654 -108.222139    0  ...  198.02652  -0.30011  -0.760243\n2022-12-30  37.833654 -108.222139    0  ...  198.02652  -0.30011  -0.760243\n2022-12-31  37.833654 -108.222139    0  ...  198.02652  -0.30011  -0.760243\n[1461 rows x 20 columns]\n(37.8478425, -108.2670545)\n                  lat         lon  SWE  ...      aspect  eastness  northness\ndate                                    ...                                 \n2019-01-01  37.847842 -108.267055   20  ...  123.475685  0.695202  -0.504058\n2019-01-02  37.847842 -108.267055   22  ...  123.475685  0.695202  -0.504058\n2019-01-03  37.847842 -108.267055   21  ...  123.475685  0.695202  -0.504058\n2019-01-04  37.847842 -108.267055    0  ...  123.475685  0.695202  -0.504058\n2019-01-05  37.847842 -108.267055    0  ...  123.475685  0.695202  -0.504058\n...               ...         ...  ...  ...         ...       ...        ...\n2022-12-27  37.847842 -108.267055    0  ...  123.475685  0.695202  -0.504058\n2022-12-28  37.847842 -108.267055    0  ...  123.475685  0.695202  -0.504058\n2022-12-29  37.847842 -108.267055    0  ...  123.475685  0.695202  -0.504058\n2022-12-30  37.847842 -108.267055    0  ...  123.475685  0.695202  -0.504058\n2022-12-31  37.847842 -108.267055    0  ...  123.475685  0.695202  -0.504058\n[1461 rows x 20 columns]\n(37.8549355, -107.7280655)\n                  lat         lon  SWE  ...    aspect  eastness  northness\ndate                                    ...                               \n2019-01-01  37.854936 -107.728065  255  ...  190.7411 -0.184258  -0.776561\n2019-01-02  37.854936 -107.728065   35  ...  190.7411 -0.184258  -0.776561\n2019-01-03  37.854936 -107.728065   30  ...  190.7411 -0.184258  -0.776561\n2019-01-04  37.854936 -107.728065   31  ...  190.7411 -0.184258  -0.776561\n2019-01-05  37.854936 -107.728065   29  ...  190.7411 -0.184258  -0.776561\n...               ...         ...  ...  ...       ...       ...        ...\n2022-12-27  37.854936 -107.728065   19  ...  190.7411 -0.184258  -0.776561\n2022-12-28  37.854936 -107.728065   20  ...  190.7411 -0.184258  -0.776561\n2022-12-29  37.854936 -107.728065   20  ...  190.7411 -0.184258  -0.776561\n2022-12-30  37.854936 -107.728065   20  ...  190.7411 -0.184258  -0.776561\n2022-12-31  37.854936 -107.728065    0  ...  190.7411 -0.184258  -0.776561\n[1461 rows x 20 columns]\n(37.8549355, -105.4373615)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  37.854936 -105.437361  255  ...  277.79877 -0.780752   0.134871\n2019-01-01  37.854936 -105.437361  255  ...  277.79877 -0.780752   0.134871\n2019-01-02  37.854936 -105.437361   16  ...  277.79877 -0.780752   0.134871\n2019-01-02  37.854936 -105.437361   16  ...  277.79877 -0.780752   0.134871\n2019-01-03  37.854936 -105.437361   14  ...  277.79877 -0.780752   0.134871\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-29  37.854936 -105.437361    0  ...  277.79877 -0.780752   0.134871\n2022-12-30  37.854936 -105.437361    0  ...  277.79877 -0.780752   0.134871\n2022-12-30  37.854936 -105.437361    0  ...  277.79877 -0.780752   0.134871\n2022-12-31  37.854936 -105.437361    0  ...  277.79877 -0.780752   0.134871\n2022-12-31  37.854936 -105.437361    0  ...  277.79877 -0.780752   0.134871\n[2922 rows x 20 columns]\n(37.862028, -119.6576925)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  37.862028 -119.657692    0  ...  18.866562  0.312753   0.757801\n2019-01-02  37.862028 -119.657692    0  ...  18.866562  0.312753   0.757801\n2019-01-03  37.862028 -119.657692    0  ...  18.866562  0.312753   0.757801\n2019-01-04  37.862028 -119.657692    0  ...  18.866562  0.312753   0.757801\n2019-01-05  37.862028 -119.657692    0  ...  18.866562  0.312753   0.757801\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-27  37.862028 -119.657692    0  ...  18.866562  0.312753   0.757801\n2022-12-28  37.862028 -119.657692    0  ...  18.866562  0.312753   0.757801\n2022-12-29  37.862028 -119.657692    0  ...  18.866562  0.312753   0.757801\n2022-12-30  37.862028 -119.657692    0  ...  18.866562  0.312753   0.757801\n2022-12-31  37.862028 -119.657692    0  ...  18.866562  0.312753   0.757801\n[1461 rows x 20 columns]\n(37.8691195, -109.4438475)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  37.869119 -109.443848    0  ...  285.20844 -0.767577   0.256551\n2019-01-01  37.869119 -109.443848    0  ...  285.20844 -0.767577   0.256551\n2019-01-02  37.869119 -109.443848   19  ...  285.20844 -0.767577   0.256551\n2019-01-02  37.869119 -109.443848   19  ...  285.20844 -0.767577   0.256551\n2019-01-03  37.869119 -109.443848    0  ...  285.20844 -0.767577   0.256551\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-29  37.869119 -109.443848    0  ...  285.20844 -0.767577   0.256551\n2022-12-30  37.869119 -109.443848    0  ...  285.20844 -0.767577   0.256551\n2022-12-30  37.869119 -109.443848    0  ...  285.20844 -0.767577   0.256551\n2022-12-31  37.869119 -109.443848    0  ...  285.20844 -0.767577   0.256551\n2022-12-31  37.869119 -109.443848    0  ...  285.20844 -0.767577   0.256551\n[2922 rows x 20 columns]\n(37.8691195, -106.6051715)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  37.869119 -106.605171  255  ...  201.01604 -0.344342  -0.751007\n2019-01-02  37.869119 -106.605171   41  ...  201.01604 -0.344342  -0.751007\n2019-01-03  37.869119 -106.605171   33  ...  201.01604 -0.344342  -0.751007\n2019-01-04  37.869119 -106.605171   39  ...  201.01604 -0.344342  -0.751007\n2019-01-05  37.869119 -106.605171   32  ...  201.01604 -0.344342  -0.751007\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-27  37.869119 -106.605171  255  ...  201.01604 -0.344342  -0.751007\n2022-12-28  37.869119 -106.605171   27  ...  201.01604 -0.344342  -0.751007\n2022-12-29  37.869119 -106.605171   31  ...  201.01604 -0.344342  -0.751007\n2022-12-30  37.869119 -106.605171   30  ...  201.01604 -0.344342  -0.751007\n2022-12-31  37.869119 -106.605171   26  ...  201.01604 -0.344342  -0.751007\n[1461 rows x 20 columns]\n(37.8762105, -119.3432825)\n                 lat         lon  SWE  ...     aspect  eastness  northness\ndate                                   ...                                \n2019-01-01  37.87621 -119.343283   17  ...  148.45811  0.481973  -0.705803\n2019-01-02  37.87621 -119.343283   16  ...  148.45811  0.481973  -0.705803\n2019-01-03  37.87621 -119.343283    5  ...  148.45811  0.481973  -0.705803\n2019-01-04  37.87621 -119.343283    0  ...  148.45811  0.481973  -0.705803\n2019-01-05  37.87621 -119.343283    7  ...  148.45811  0.481973  -0.705803\n...              ...         ...  ...  ...        ...       ...        ...\n2022-12-27  37.87621 -119.343283    0  ...  148.45811  0.481973  -0.705803\n2022-12-28  37.87621 -119.343283   12  ...  148.45811  0.481973  -0.705803\n2022-12-29  37.87621 -119.343283   10  ...  148.45811  0.481973  -0.705803\n2022-12-30  37.87621 -119.343283    0  ...  148.45811  0.481973  -0.705803\n2022-12-31  37.87621 -119.343283    0  ...  148.45811  0.481973  -0.705803\n[1461 rows x 20 columns]\n(37.89748, -119.2624335)\n                 lat         lon  SWE  ...    aspect  eastness  northness\ndate                                   ...                               \n2019-01-01  37.89748 -119.262434   17  ...  54.23148  0.681645   0.528953\n2019-01-02  37.89748 -119.262434   16  ...  54.23148  0.681645   0.528953\n2019-01-03  37.89748 -119.262434    5  ...  54.23148  0.681645   0.528953\n2019-01-04  37.89748 -119.262434    0  ...  54.23148  0.681645   0.528953\n2019-01-05  37.89748 -119.262434    7  ...  54.23148  0.681645   0.528953\n...              ...         ...  ...  ...       ...       ...        ...\n2022-12-27  37.89748 -119.262434    0  ...  54.23148  0.681645   0.528953\n2022-12-28  37.89748 -119.262434   12  ...  54.23148  0.681645   0.528953\n2022-12-29  37.89748 -119.262434   10  ...  54.23148  0.681645   0.528953\n2022-12-30  37.89748 -119.262434    0  ...  54.23148  0.681645   0.528953\n2022-12-31  37.89748 -119.262434    0  ...  54.23148  0.681645   0.528953\n[1461 rows x 20 columns]\n(37.89748, -107.7190825)\n                 lat         lon  SWE  ...     aspect  eastness  northness\ndate                                   ...                                \n2019-01-01  37.89748 -107.719082  255  ...  300.19885 -0.712729   0.466047\n2019-01-02  37.89748 -107.719082   35  ...  300.19885 -0.712729   0.466047\n2019-01-03  37.89748 -107.719082   30  ...  300.19885 -0.712729   0.466047\n2019-01-04  37.89748 -107.719082   31  ...  300.19885 -0.712729   0.466047\n2019-01-05  37.89748 -107.719082   29  ...  300.19885 -0.712729   0.466047\n...              ...         ...  ...  ...        ...       ...        ...\n2022-12-27  37.89748 -107.719082   19  ...  300.19885 -0.712729   0.466047\n2022-12-28  37.89748 -107.719082   20  ...  300.19885 -0.712729   0.466047\n2022-12-29  37.89748 -107.719082   20  ...  300.19885 -0.712729   0.466047\n2022-12-30  37.89748 -107.719082   20  ...  300.19885 -0.712729   0.466047\n2022-12-31  37.89748 -107.719082    0  ...  300.19885 -0.712729   0.466047\n[1461 rows x 20 columns]\n(37.932915, -107.2070425)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  37.932915 -107.207043  255  ...  259.98706 -0.777724   -0.17215\n2019-01-02  37.932915 -107.207043   40  ...  259.98706 -0.777724   -0.17215\n2019-01-03  37.932915 -107.207043   36  ...  259.98706 -0.777724   -0.17215\n2019-01-04  37.932915 -107.207043   32  ...  259.98706 -0.777724   -0.17215\n2019-01-05  37.932915 -107.207043   35  ...  259.98706 -0.777724   -0.17215\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-27  37.932915 -107.207043  255  ...  259.98706 -0.777724   -0.17215\n2022-12-28  37.932915 -107.207043   20  ...  259.98706 -0.777724   -0.17215\n2022-12-29  37.932915 -107.207043   25  ...  259.98706 -0.777724   -0.17215\n2022-12-30  37.932915 -107.207043   23  ...  259.98706 -0.777724   -0.17215\n2022-12-31  37.932915 -107.207043    0  ...  259.98706 -0.777724   -0.17215\n[1461 rows x 20 columns]\n(37.9754145, -111.8333665)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  37.975414 -111.833366   22  ...  332.09943 -0.437671    0.72377\n2019-01-01  37.975414 -111.833366   22  ...  332.09943 -0.437671    0.72377\n2019-01-01  37.975414 -111.833366   22  ...  332.09943 -0.437671    0.72377\n2019-01-01  37.975414 -111.833366   22  ...  332.09943 -0.437671    0.72377\n2019-01-01  37.975414 -111.833366   22  ...  332.09943 -0.437671    0.72377\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-31  37.975414 -111.833366    0  ...  332.09943 -0.437671    0.72377\n2022-12-31  37.975414 -111.833366    0  ...  332.09943 -0.437671    0.72377\n2022-12-31  37.975414 -111.833366    0  ...  332.09943 -0.437671    0.72377\n2022-12-31  37.975414 -111.833366    0  ...  332.09943 -0.437671    0.72377\n2022-12-31  37.975414 -111.833366    0  ...  332.09943 -0.437671    0.72377\n[11688 rows x 20 columns]\n(38.0391175, -119.3073495)\n                  lat        lon  SWE  ...    aspect  eastness  northness\ndate                                   ...                               \n2019-01-01  38.039118 -119.30735   20  ...  54.60261  0.683913   0.525018\n2019-01-02  38.039118 -119.30735   11  ...  54.60261  0.683913   0.525018\n2019-01-03  38.039118 -119.30735   19  ...  54.60261  0.683913   0.525018\n2019-01-04  38.039118 -119.30735    0  ...  54.60261  0.683913   0.525018\n2019-01-05  38.039118 -119.30735   21  ...  54.60261  0.683913   0.525018\n...               ...        ...  ...  ...       ...       ...        ...\n2022-12-27  38.039118 -119.30735    0  ...  54.60261  0.683913   0.525018\n2022-12-28  38.039118 -119.30735   11  ...  54.60261  0.683913   0.525018\n2022-12-29  38.039118 -119.30735   23  ...  54.60261  0.683913   0.525018\n2022-12-30  38.039118 -119.30735    0  ...  54.60261  0.683913   0.525018\n2022-12-31  38.039118 -119.30735    0  ...  54.60261  0.683913   0.525018\n[1461 rows x 20 columns]\n(38.0603395, -119.6666755)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  38.060339 -119.666675   49  ...  202.05417 -0.359194  -0.747442\n2019-01-02  38.060339 -119.666675   37  ...  202.05417 -0.359194  -0.747442\n2019-01-03  38.060339 -119.666675   32  ...  202.05417 -0.359194  -0.747442\n2019-01-04  38.060339 -119.666675   42  ...  202.05417 -0.359194  -0.747442\n2019-01-05  38.060339 -119.666675   33  ...  202.05417 -0.359194  -0.747442\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-27  38.060339 -119.666675    0  ...  202.05417 -0.359194  -0.747442\n2022-12-28  38.060339 -119.666675   15  ...  202.05417 -0.359194  -0.747442\n2022-12-29  38.060339 -119.666675   19  ...  202.05417 -0.359194  -0.747442\n2022-12-30  38.060339 -119.666675    0  ...  202.05417 -0.359194  -0.747442\n2022-12-31  38.060339 -119.666675    0  ...  202.05417 -0.359194  -0.747442\n[1461 rows x 20 columns]\n(38.152231, -119.6666755)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  38.152231 -119.666675   49  ...  68.846054  0.750545    0.34633\n2019-01-02  38.152231 -119.666675   37  ...  68.846054  0.750545    0.34633\n2019-01-03  38.152231 -119.666675   32  ...  68.846054  0.750545    0.34633\n2019-01-04  38.152231 -119.666675   42  ...  68.846054  0.750545    0.34633\n2019-01-05  38.152231 -119.666675   33  ...  68.846054  0.750545    0.34633\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-27  38.152231 -119.666675    0  ...  68.846054  0.750545    0.34633\n2022-12-28  38.152231 -119.666675   15  ...  68.846054  0.750545    0.34633\n2022-12-29  38.152231 -119.666675   19  ...  68.846054  0.750545    0.34633\n2022-12-30  38.152231 -119.666675    0  ...  68.846054  0.750545    0.34633\n2022-12-31  38.152231 -119.666675    0  ...  68.846054  0.750545    0.34633\n[1461 rows x 20 columns]\n(38.1663575, -120.0529515)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  38.166357 -120.052952    0  ...  30.475752   0.46937    0.71133\n2019-01-02  38.166357 -120.052952    0  ...  30.475752   0.46937    0.71133\n2019-01-03  38.166357 -120.052952    0  ...  30.475752   0.46937    0.71133\n2019-01-04  38.166357 -120.052952    0  ...  30.475752   0.46937    0.71133\n2019-01-05  38.166357 -120.052952    0  ...  30.475752   0.46937    0.71133\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-27  38.166357 -120.052952    0  ...  30.475752   0.46937    0.71133\n2022-12-28  38.166357 -120.052952    0  ...  30.475752   0.46937    0.71133\n2022-12-29  38.166357 -120.052952    0  ...  30.475752   0.46937    0.71133\n2022-12-30  38.166357 -120.052952    0  ...  30.475752   0.46937    0.71133\n2022-12-31  38.166357 -120.052952    0  ...  30.475752   0.46937    0.71133\n[1461 rows x 20 columns]\n(38.194603, -119.8912545)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  38.194603 -119.891255    0  ...  101.83461  0.774656  -0.202282\n2019-01-02  38.194603 -119.891255    0  ...  101.83461  0.774656  -0.202282\n2019-01-03  38.194603 -119.891255    0  ...  101.83461  0.774656  -0.202282\n2019-01-04  38.194603 -119.891255    0  ...  101.83461  0.774656  -0.202282\n2019-01-05  38.194603 -119.891255    0  ...  101.83461  0.774656  -0.202282\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-27  38.194603 -119.891255    0  ...  101.83461  0.774656  -0.202282\n2022-12-28  38.194603 -119.891255    0  ...  101.83461  0.774656  -0.202282\n2022-12-29  38.194603 -119.891255    0  ...  101.83461  0.774656  -0.202282\n2022-12-30  38.194603 -119.891255    0  ...  101.83461  0.774656  -0.202282\n2022-12-31  38.194603 -119.891255    0  ...  101.83461  0.774656  -0.202282\n[1461 rows x 20 columns]\n(38.279274, -119.6127765)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  38.279274 -119.612776   29  ...  315.26376 -0.613301   0.617641\n2019-01-01  38.279274 -119.612776   29  ...  315.26376 -0.613301   0.617641\n2019-01-01  38.279274 -119.612776   29  ...  315.26376 -0.613301   0.617641\n2019-01-01  38.279274 -119.612776   29  ...  315.26376 -0.613301   0.617641\n2019-01-01  38.279274 -119.612776   29  ...  315.26376 -0.613301   0.617641\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-31  38.279274 -119.612776    0  ...  315.26376 -0.613301   0.617641\n2022-12-31  38.279274 -119.612776    0  ...  315.26376 -0.613301   0.617641\n2022-12-31  38.279274 -119.612776    0  ...  315.26376 -0.613301   0.617641\n2022-12-31  38.279274 -119.612776    0  ...  315.26376 -0.613301   0.617641\n2022-12-31  38.279274 -119.612776    0  ...  315.26376 -0.613301   0.617641\n[8766 rows x 20 columns]\n(38.483487, -112.390322)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  38.483487 -112.390322   21  ...  322.00595 -0.551797   0.667427\n2019-01-01  38.483487 -112.390322   21  ...  322.00595 -0.551797   0.667427\n2019-01-01  38.483487 -112.390322   21  ...  322.00595 -0.551797   0.667427\n2019-01-01  38.483487 -112.390322   21  ...  322.00595 -0.551797   0.667427\n2019-01-01  38.483487 -112.390322   21  ...  322.00595 -0.551797   0.667427\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-31  38.483487 -112.390322    0  ...  322.00595 -0.551797   0.667427\n2022-12-31  38.483487 -112.390322    0  ...  322.00595 -0.551797   0.667427\n2022-12-31  38.483487 -112.390322    0  ...  322.00595 -0.551797   0.667427\n2022-12-31  38.483487 -112.390322    0  ...  322.00595 -0.551797   0.667427\n2022-12-31  38.483487 -112.390322    0  ...  322.00595 -0.551797   0.667427\n[8766 rows x 20 columns]\n(38.4905185, -119.8014235)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  38.490519 -119.801423   32  ...  178.10571  0.033044  -0.785125\n2019-01-01  38.490519 -119.801423   32  ...  178.10571  0.033044  -0.785125\n2019-01-01  38.490519 -119.801423   32  ...  178.10571  0.033044  -0.785125\n2019-01-01  38.490519 -119.801423   32  ...  178.10571  0.033044  -0.785125\n2019-01-01  38.490519 -119.801423   32  ...  178.10571  0.033044  -0.785125\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-31  38.490519 -119.801423    0  ...  178.10571  0.033044  -0.785125\n2022-12-31  38.490519 -119.801423    0  ...  178.10571  0.033044  -0.785125\n2022-12-31  38.490519 -119.801423    0  ...  178.10571  0.033044  -0.785125\n2022-12-31  38.490519 -119.801423    0  ...  178.10571  0.033044  -0.785125\n2022-12-31  38.490519 -119.801423    0  ...  178.10571  0.033044  -0.785125\n[8766 rows x 20 columns]\n(38.4905185, -106.335677)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  38.490519 -106.335677  255  ...  164.60425  0.259499   -0.76713\n2019-01-02  38.490519 -106.335677   30  ...  164.60425  0.259499   -0.76713\n2019-01-03  38.490519 -106.335677   31  ...  164.60425  0.259499   -0.76713\n2019-01-04  38.490519 -106.335677   30  ...  164.60425  0.259499   -0.76713\n2019-01-05  38.490519 -106.335677   28  ...  164.60425  0.259499   -0.76713\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-27  38.490519 -106.335677  255  ...  164.60425  0.259499   -0.76713\n2022-12-28  38.490519 -106.335677    0  ...  164.60425  0.259499   -0.76713\n2022-12-29  38.490519 -106.335677    0  ...  164.60425  0.259499   -0.76713\n2022-12-30  38.490519 -106.335677   19  ...  164.60425  0.259499   -0.76713\n2022-12-31  38.490519 -106.335677    0  ...  164.60425  0.259499   -0.76713\n[1461 rows x 20 columns]\n(38.50458, -119.62176)\n                 lat        lon  SWE  ...     aspect  eastness  northness\ndate                                  ...                                \n2019-01-01  38.50458 -119.62176   23  ...  18.832296   0.31224   0.757903\n2019-01-01  38.50458 -119.62176   23  ...  18.832296   0.31224   0.757903\n2019-01-01  38.50458 -119.62176   23  ...  18.832296   0.31224   0.757903\n2019-01-01  38.50458 -119.62176   23  ...  18.832296   0.31224   0.757903\n2019-01-01  38.50458 -119.62176   23  ...  18.832296   0.31224   0.757903\n...              ...        ...  ...  ...        ...       ...        ...\n2022-12-31  38.50458 -119.62176    0  ...  18.832296   0.31224   0.757903\n2022-12-31  38.50458 -119.62176    0  ...  18.832296   0.31224   0.757903\n2022-12-31  38.50458 -119.62176    0  ...  18.832296   0.31224   0.757903\n2022-12-31  38.50458 -119.62176    0  ...  18.832296   0.31224   0.757903\n2022-12-31  38.50458 -119.62176    0  ...  18.832296   0.31224   0.757903\n[10227 rows x 20 columns]\n(38.708156, -120.0439685)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  38.708156 -120.043969   15  ...  134.57304  0.618971  -0.611945\n2019-01-01  38.708156 -120.043969   15  ...  134.57304  0.618971  -0.611945\n2019-01-01  38.708156 -120.043969   15  ...  134.57304  0.618971  -0.611945\n2019-01-01  38.708156 -120.043969   15  ...  134.57304  0.618971  -0.611945\n2019-01-01  38.708156 -120.043969   15  ...  134.57304  0.618971  -0.611945\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-31  38.708156 -120.043969    0  ...  134.57304  0.618971  -0.611945\n2022-12-31  38.708156 -120.043969    0  ...  134.57304  0.618971  -0.611945\n2022-12-31  38.708156 -120.043969    0  ...  134.57304  0.618971  -0.611945\n2022-12-31  38.708156 -120.043969    0  ...  134.57304  0.618971  -0.611945\n2022-12-31  38.708156 -120.043969    0  ...  134.57304  0.618971  -0.611945\n[13149 rows x 20 columns]\n(38.708156, -106.4255085)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  38.708156 -106.425509  255  ...  54.866276  0.685507     0.5222\n2019-01-02  38.708156 -106.425509   36  ...  54.866276  0.685507     0.5222\n2019-01-03  38.708156 -106.425509   35  ...  54.866276  0.685507     0.5222\n2019-01-04  38.708156 -106.425509   33  ...  54.866276  0.685507     0.5222\n2019-01-05  38.708156 -106.425509   31  ...  54.866276  0.685507     0.5222\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-27  38.708156 -106.425509  255  ...  54.866276  0.685507     0.5222\n2022-12-28  38.708156 -106.425509    0  ...  54.866276  0.685507     0.5222\n2022-12-29  38.708156 -106.425509   20  ...  54.866276  0.685507     0.5222\n2022-12-30  38.708156 -106.425509   24  ...  54.866276  0.685507     0.5222\n2022-12-31  38.708156 -106.425509    0  ...  54.866276  0.685507     0.5222\n[1461 rows x 20 columns]\n(38.8202275, -106.5961885)\n                  lat         lon  SWE  ...     aspect  eastness  northness\ndate                                    ...                                \n2019-01-01  38.820228 -106.596188  255  ...  300.30264 -0.712206   0.467295\n2019-01-02  38.820228 -106.596188   36  ...  300.30264 -0.712206   0.467295\n2019-01-03  38.820228 -106.596188   38  ...  300.30264 -0.712206   0.467295\n2019-01-04  38.820228 -106.596188   34  ...  300.30264 -0.712206   0.467295\n2019-01-05  38.820228 -106.596188   37  ...  300.30264 -0.712206   0.467295\n...               ...         ...  ...  ...        ...       ...        ...\n2022-12-27  38.820228 -106.596188  255  ...  300.30264 -0.712206   0.467295\n2022-12-28  38.820228 -106.596188    0  ...  300.30264 -0.712206   0.467295\n2022-12-29  38.820228 -106.596188   22  ...  300.30264 -0.712206   0.467295\n2022-12-30  38.820228 -106.596188   27  ...  300.30264 -0.712206   0.467295\n2022-12-31  38.820228 -106.596188    0  ...  300.30264 -0.712206   0.467295\n[1461 rows x 20 columns]\n(38.890182, -106.9555145)\n",
  "history_begin_time" : 1697395450516,
  "history_end_time" : 1697395459882,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "PxQVq5Uut5h5",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\n\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series.csv'\n\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_bak.csv'\n\n# Read the cleaned ready CSV and DEM slope CSV\ndf = pd.read_csv(current_ready_csv_path)\n# df['location'] = df['lat'].astype(str) + ',' + df['lon'].astype(str)\n# unique_location_pairs = df.drop_duplicates(subset='location')[['lat', 'lon']]\n\n# print(unique_location_pairs)\n# unique_date = df.drop_duplicates(subset='date')[['date']]\n# print(unique_date)\n\n# add a 7 days time series to each row\ndf.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n# Group the data by 'lat' and 'lon'\ngrouped = df.groupby(['lat', 'lon'])\n\n# Create a new DataFrame to store the time series data for each location\nresult = pd.DataFrame()\n\n# Define the number of days to consider (7 days in this case)\nnum_days = 7\n\nfor name, group in grouped:\n    group = group.set_index('date')\n    print(name)\n    print(group)\n    for day in range(1, num_days + 1):\n        new_column_name = f'{day}_days_ago_{name[0]}_{name[1]}'\n        group[new_column_name] = group['your_column_name'].shift(day)\n    result = pd.concat([result, group], axis=0)\n\n# Reset the index of the result DataFrame\nresult = result.reset_index()\n\nprint(result)\n\n\n\n",
  "history_output" : "today date = 2023-10-15\ntest start date:  2023-05-17\ntest end date:  2023-10-15\n/home/chetana\n(33.358253500000004, -107.8268805)\n                  lat         lon  SWE  ...   aspect  eastness  northness\ndate                                    ...                              \n2019-01-01  33.358254 -107.826881  255  ...  276.389 -0.782283   0.110823\n2019-01-01  33.358254 -107.826881  255  ...  276.389 -0.782283   0.110823\n2019-01-01  33.358254 -107.826881  255  ...  276.389 -0.782283   0.110823\n2019-01-02  33.358254 -107.826881    0  ...  276.389 -0.782283   0.110823\n2019-01-02  33.358254 -107.826881    0  ...  276.389 -0.782283   0.110823\n...               ...         ...  ...  ...      ...       ...        ...\n2022-12-30  33.358254 -107.826881    0  ...  276.389 -0.782283   0.110823\n2022-12-30  33.358254 -107.826881    0  ...  276.389 -0.782283   0.110823\n2022-12-31  33.358254 -107.826881    0  ...  276.389 -0.782283   0.110823\n2022-12-31  33.358254 -107.826881    0  ...  276.389 -0.782283   0.110823\n2022-12-31  33.358254 -107.826881    0  ...  276.389 -0.782283   0.110823\n[4383 rows x 20 columns]\nTraceback (most recent call last):\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3802, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 138, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 165, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5745, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5753, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'your_column_name'\nThe above exception was the direct cause of the following exception:\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/PxQVq5Uut5h5/convert_to_time_series.py\", line 38, in <module>\n    group[new_column_name] = group['your_column_name'].shift(day)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/frame.py\", line 3807, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3804, in get_loc\n    raise KeyError(key) from err\nKeyError: 'your_column_name'\n",
  "history_begin_time" : 1697395274315,
  "history_end_time" : 1697395277502,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "sB5gQGx3nGZX",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\n\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series.csv'\n\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_bak.csv'\n\n# Read the cleaned ready CSV and DEM slope CSV\ndf = pd.read_csv(current_ready_csv_path)\n# df['location'] = df['lat'].astype(str) + ',' + df['lon'].astype(str)\n# unique_location_pairs = df.drop_duplicates(subset='location')[['lat', 'lon']]\n\n# print(unique_location_pairs)\n# unique_date = df.drop_duplicates(subset='date')[['date']]\n# print(unique_date)\n\n# add a 7 days time series to each row\ndf.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n# Group the data by 'lat' and 'lon'\ngrouped = df.groupby(['lat', 'lon'])\n\n# Create a new DataFrame to store the time series data for each location\nresult = pd.DataFrame()\n\n# Define the number of days to consider (7 days in this case)\nnum_days = 7\n\nfor name, group in grouped:\n    group = group.set_index('date')\n    print(name)\n    for day in range(1, num_days + 1):\n        new_column_name = f'{day}_days_ago_{name[0]}_{name[1]}'\n        group[new_column_name] = group['your_column_name'].shift(day)\n    result = pd.concat([result, group], axis=0)\n\n# Reset the index of the result DataFrame\nresult = result.reset_index()\n\nprint(result)\n\n\n\n",
  "history_output" : "today date = 2023-10-15\ntest start date:  2023-05-17\ntest end date:  2023-10-15\n/home/chetana\n(33.358253500000004, -107.8268805)\nTraceback (most recent call last):\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3802, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 138, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 165, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5745, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5753, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'your_column_name'\nThe above exception was the direct cause of the following exception:\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/sB5gQGx3nGZX/convert_to_time_series.py\", line 37, in <module>\n    group[new_column_name] = group['your_column_name'].shift(day)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/frame.py\", line 3807, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3804, in get_loc\n    raise KeyError(key) from err\nKeyError: 'your_column_name'\n",
  "history_begin_time" : 1697395240674,
  "history_end_time" : 1697395243845,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "JYqgaYUzqwLn",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\n\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series.csv'\n\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_bak.csv'\n\n# Read the cleaned ready CSV and DEM slope CSV\ndf = pd.read_csv(current_ready_csv_path)\n# df['location'] = df['lat'].astype(str) + ',' + df['lon'].astype(str)\n# unique_location_pairs = df.drop_duplicates(subset='location')[['lat', 'lon']]\n\n# print(unique_location_pairs)\n# unique_date = df.drop_duplicates(subset='date')[['date']]\n# print(unique_date)\n\n# add a 7 days time series to each row\ndf.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n# Group the data by 'lat' and 'lon'\ngrouped = df.groupby(['lat', 'lon'])\n\n# Create a new DataFrame to store the time series data for each location\nresult = pd.DataFrame()\n\n# Define the number of days to consider (7 days in this case)\nnum_days = 7\n\nfor name, group in grouped:\n    group = group.set_index('date')\n    for day in range(1, num_days + 1):\n        new_column_name = f'{day}_days_ago_{name[0]}_{name[1]}'\n        group[new_column_name] = group['your_column_name'].shift(day)\n    result = pd.concat([result, group], axis=0)\n\n# Reset the index of the result DataFrame\nresult = result.reset_index()\n\nprint(result)\n\n\n\n",
  "history_output" : "today date = 2023-10-15\ntest start date:  2023-05-17\ntest end date:  2023-10-15\n/home/chetana\nTraceback (most recent call last):\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3802, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 138, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 165, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5745, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5753, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'your_column_name'\nThe above exception was the direct cause of the following exception:\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/JYqgaYUzqwLn/convert_to_time_series.py\", line 36, in <module>\n    group[new_column_name] = group['your_column_name'].shift(day)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/frame.py\", line 3807, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3804, in get_loc\n    raise KeyError(key) from err\nKeyError: 'your_column_name'\n",
  "history_begin_time" : 1697395194016,
  "history_end_time" : 1697395197192,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "Cwy2CpU33mBM",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\n\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series.csv'\n\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_bak.csv'\n\n# Read the cleaned ready CSV and DEM slope CSV\ndf = pd.read_csv(current_ready_csv_path)\n# df['location'] = df['lat'].astype(str) + ',' + df['lon'].astype(str)\n# unique_location_pairs = df.drop_duplicates(subset='location')[['lat', 'lon']]\n\n# print(unique_location_pairs)\n# unique_date = df.drop_duplicates(subset='date')[['date']]\n# print(unique_date)\n\n# add a 7 days time series to each row\ndf.sort_values(by=['lat', 'lon', 'date'], inplace=True)\n\n# Group the data by 'lat' and 'lon'\ngrouped = df.groupby(['lat', 'lon'])\n\n# Create a new DataFrame to store the time series data for each location\nresult = pd.DataFrame()\n\n# Define the number of days to consider (7 days in this case)\nnum_days = 7\n\nfor name, group in grouped:\n    group = group.set_index('date')\n    for day in range(1, num_days + 1):\n        new_column_name = f'{day}_days_ago_{name[0]}_{name[1]}'\n        group[new_column_name] = group['your_column_name'].shift(day)\n    result = pd.concat([result, group], axis=0)\n\n# Reset the index of the result DataFrame\nresult = result.reset_index()\n\nprint(result)\n\n\n\n",
  "history_output" : "today date = 2023-10-15\ntest start date:  2023-05-17\ntest end date:  2023-10-15\n/home/chetana\nTraceback (most recent call last):\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3802, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 138, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 165, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5745, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5753, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'your_column_name'\nThe above exception was the direct cause of the following exception:\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/Cwy2CpU33mBM/convert_to_time_series.py\", line 36, in <module>\n    group[new_column_name] = group['your_column_name'].shift(day)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/frame.py\", line 3807, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3804, in get_loc\n    raise KeyError(key) from err\nKeyError: 'your_column_name'\n",
  "history_begin_time" : 1697395188831,
  "history_end_time" : 1697395192561,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "SZYcZswuRhmt",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\n\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series.csv'\n\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_bak.csv'\n\n\n# Read the cleaned ready CSV and DEM slope CSV\ndf = pd.read_csv(current_ready_csv_path)\ndf['location'] = df['lat'].astype(str) + ',' + df['lon'].astype(str)\nunique_location_pairs = df.drop_duplicates(subset='location')[['lat', 'lon']]\n\nprint(unique_location_pairs)\n\n\nunique_date = df.drop_duplicates(subset='date')[['date']]\nprint(unique_date)\n\n\n\n",
  "history_output" : "today date = 2023-10-15\ntest start date:  2023-05-17\ntest end date:  2023-10-15\n/home/chetana\n               lat         lon\n0        37.192360 -118.939041\n1461     40.398035 -106.605171\n13149    37.428140 -106.623137\n14610    38.490519 -106.335677\n16071    40.295338 -111.258444\n...            ...         ...\n999324   42.696921 -120.798553\n1006629  34.860600 -111.608788\n1011012  40.739226 -110.620640\n1016856  37.006073 -106.272795\n1021239  36.682572 -118.427001\n[243 rows x 2 columns]\n            date\n0     2020-11-25\n1     2020-10-18\n2     2020-09-21\n3     2022-09-01\n4     2019-10-03\n...          ...\n1456  2020-08-31\n1457  2020-02-17\n1458  2021-04-29\n1459  2022-11-23\n1460  2021-10-27\n[1461 rows x 1 columns]\n",
  "history_begin_time" : 1697351693341,
  "history_end_time" : 1697351697699,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "HlJW7o37P5zh",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\n\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series.csv'\n\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_bak.csv'\n\n\n# Read the cleaned ready CSV and DEM slope CSV\ndf = pd.read_csv(current_ready_csv_path)\ndf['location'] = df['lat'].astype(str) + ',' + df['lon'].astype(str)\nunique_location_pairs = df.drop_duplicates(subset='location')[['lat', 'lon']]\nunique_date = df.drop_duplicates(subset='date')[['date']]\n\nprint(unique_pairs)\n\n\n\n",
  "history_output" : "today date = 2023-10-15\ntest start date:  2023-05-17\ntest end date:  2023-10-15\n/home/chetana\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/HlJW7o37P5zh/convert_to_time_series.py\", line 18, in <module>\n    print(unique_pairs)\nNameError: name 'unique_pairs' is not defined\n",
  "history_begin_time" : 1697351538932,
  "history_end_time" : 1697351543392,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "cjP5oh6JeVQI",
  "history_input" : "import pandas as pd\nimport os\nfrom snowcast_utils import work_dir\n\ncurrent_ready_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3.csv'\n\ntarget_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series.csv'\n\nbackup_time_series_csv_path = f'{work_dir}/final_merged_data_3yrs_cleaned_v3_time_series_bak.csv'\n\n\n# Read the cleaned ready CSV and DEM slope CSV\ndf = pd.read_csv(current_ready_csv_path)\ndf['location'] = df['lat'].astype(str) + ',' + df['lon'].astype(str)\nunique_pairs = df.drop_duplicates(subset='location')[['lat', 'lon']]\nprint(unique_pairs)\n\n\n\n",
  "history_output" : "today date = 2023-10-15\ntest start date:  2023-05-17\ntest end date:  2023-10-15\n/home/chetana\n               lat         lon\n0        37.192360 -118.939041\n1461     40.398035 -106.605171\n13149    37.428140 -106.623137\n14610    38.490519 -106.335677\n16071    40.295338 -111.258444\n...            ...         ...\n999324   42.696921 -120.798553\n1006629  34.860600 -111.608788\n1011012  40.739226 -110.620640\n1016856  37.006073 -106.272795\n1021239  36.682572 -118.427001\n[243 rows x 2 columns]\n",
  "history_begin_time" : 1697351382012,
  "history_end_time" : 1697351386388,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : null,
  "indicator" : "Done"
},]
