[{
  "history_id" : "754jtw7fu1m",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2024-01-07\n2024-01-04\ntest start date:  2024-01-04\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2024_predicted_swe_2024-01-04.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2024_all_variables_2024-01-04.png\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2024-01-04.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2024-01-04.tif\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-21.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-27.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-13.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-31.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-18.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-17.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-08.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-29.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-22.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-30.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-01.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-07.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2024-01-02.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-28.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-15.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-16.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-14.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-06.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-04.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-02.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2024-01-01.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-11-30.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-19.tif.map already exists\nDate: 2024-01-04\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-04.tif.map\n/var/www/html/swe_forecasting/map/swe_predicted_2024-01-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-09.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-05.tif.map already exists\n/home/chetana/gw-workspace/754jtw7fu1m/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/754jtw7fu1m/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/754jtw7fu1m/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/754jtw7fu1m/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/754jtw7fu1m/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/754jtw7fu1m/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/754jtw7fu1m/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/754jtw7fu1m/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/754jtw7fu1m/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/754jtw7fu1m/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/754jtw7fu1m/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/754jtw7fu1m/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/754jtw7fu1m/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/754jtw7fu1m/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/754jtw7fu1m/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/754jtw7fu1m/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/754jtw7fu1m/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/754jtw7fu1m/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/754jtw7fu1m/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/754jtw7fu1m/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/754jtw7fu1m/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/754jtw7fu1m/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/754jtw7fu1m/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/754jtw7fu1m/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/754jtw7fu1m/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/754jtw7fu1m/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/754jtw7fu1m/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/754jtw7fu1m/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/754jtw7fu1m/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/754jtw7fu1m/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/754jtw7fu1m/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/754jtw7fu1m/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/754jtw7fu1m/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/754jtw7fu1m/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/754jtw7fu1m/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/754jtw7fu1m/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/754jtw7fu1m/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/754jtw7fu1m/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/754jtw7fu1m/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/754jtw7fu1m/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/754jtw7fu1m/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/754jtw7fu1m/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/754jtw7fu1m/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/754jtw7fu1m/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/754jtw7fu1m/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/754jtw7fu1m/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/754jtw7fu1m/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2023-12-21  ../swe_forecasting/output/swe_predicted_2023-1...\n1  2023-12-11  ../swe_forecasting/output/swe_predicted_2023-1...\n2  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n3  2023-12-27  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n5  2023-12-13  ../swe_forecasting/output/swe_predicted_2023-1...\n6  2023-12-31  ../swe_forecasting/output/swe_predicted_2023-1...\n7  2023-12-18  ../swe_forecasting/output/swe_predicted_2023-1...\n8  2023-12-17  ../swe_forecasting/output/swe_predicted_2023-1...\n9  2023-12-20  ../swe_forecasting/output/swe_predicted_2023-1...\n10 2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n11 2023-12-08  ../swe_forecasting/output/swe_predicted_2023-1...\n12 2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n13 2023-12-26  ../swe_forecasting/output/swe_predicted_2023-1...\n14 2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n15 2023-12-29  ../swe_forecasting/output/swe_predicted_2023-1...\n16 2023-12-22  ../swe_forecasting/output/swe_predicted_2023-1...\n17 2023-12-30  ../swe_forecasting/output/swe_predicted_2023-1...\n18 2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n19 2023-12-01  ../swe_forecasting/output/swe_predicted_2023-1...\n20 2023-12-07  ../swe_forecasting/output/swe_predicted_2023-1...\n21 2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n22 2024-01-02  ../swe_forecasting/output/swe_predicted_2024-0...\n23 2023-12-28  ../swe_forecasting/output/swe_predicted_2023-1...\n24 2023-12-15  ../swe_forecasting/output/swe_predicted_2023-1...\n25 2023-12-16  ../swe_forecasting/output/swe_predicted_2023-1...\n26 2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n27 2023-06-11  ../swe_forecasting/output/swe_predicted_2023-0...\n28 2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n29 2023-12-14  ../swe_forecasting/output/swe_predicted_2023-1...\n30 2023-12-06  ../swe_forecasting/output/swe_predicted_2023-1...\n31 2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n32 2023-12-23  ../swe_forecasting/output/swe_predicted_2023-1...\n33 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n34 2023-12-04  ../swe_forecasting/output/swe_predicted_2023-1...\n35 2023-12-02  ../swe_forecasting/output/swe_predicted_2023-1...\n36 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n37 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n38 2024-01-01  ../swe_forecasting/output/swe_predicted_2024-0...\n39 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n40 2023-11-30  ../swe_forecasting/output/swe_predicted_2023-1...\n41 2023-12-19  ../swe_forecasting/output/swe_predicted_2023-1...\n42 2024-01-04  ../swe_forecasting/output/swe_predicted_2024-0...\n43 2024-01-03  ../swe_forecasting/output/swe_predicted_2024-0...\n44 2023-12-03  ../swe_forecasting/output/swe_predicted_2023-1...\n45 2023-12-09  ../swe_forecasting/output/swe_predicted_2023-1...\n46 2023-12-05  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1704645270950,
  "history_end_time" : 1704645271880,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "6w3pwjbtk2n",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2024-01-07\n2024-01-04\ntest start date:  2024-01-04\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2024_predicted_swe_2024-01-04.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2024_all_variables_2024-01-04.png\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-21.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-27.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-13.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-31.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-18.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-17.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-08.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-29.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-22.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-30.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-01.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-07.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2024-01-02.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-28.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-15.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-16.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-14.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-06.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-04.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-02.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2024-01-01.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-11-30.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-19.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2024-01-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-09.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-05.tif.map already exists\n/home/chetana/gw-workspace/6w3pwjbtk2n/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6w3pwjbtk2n/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6w3pwjbtk2n/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6w3pwjbtk2n/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6w3pwjbtk2n/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6w3pwjbtk2n/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6w3pwjbtk2n/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6w3pwjbtk2n/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6w3pwjbtk2n/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6w3pwjbtk2n/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6w3pwjbtk2n/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6w3pwjbtk2n/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6w3pwjbtk2n/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6w3pwjbtk2n/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6w3pwjbtk2n/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6w3pwjbtk2n/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6w3pwjbtk2n/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6w3pwjbtk2n/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6w3pwjbtk2n/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6w3pwjbtk2n/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6w3pwjbtk2n/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6w3pwjbtk2n/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6w3pwjbtk2n/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6w3pwjbtk2n/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6w3pwjbtk2n/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6w3pwjbtk2n/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6w3pwjbtk2n/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6w3pwjbtk2n/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6w3pwjbtk2n/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6w3pwjbtk2n/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6w3pwjbtk2n/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6w3pwjbtk2n/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6w3pwjbtk2n/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6w3pwjbtk2n/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6w3pwjbtk2n/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6w3pwjbtk2n/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6w3pwjbtk2n/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6w3pwjbtk2n/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6w3pwjbtk2n/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6w3pwjbtk2n/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6w3pwjbtk2n/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6w3pwjbtk2n/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6w3pwjbtk2n/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6w3pwjbtk2n/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6w3pwjbtk2n/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6w3pwjbtk2n/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2023-12-21  ../swe_forecasting/output/swe_predicted_2023-1...\n1  2023-12-11  ../swe_forecasting/output/swe_predicted_2023-1...\n2  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n3  2023-12-27  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n5  2023-12-13  ../swe_forecasting/output/swe_predicted_2023-1...\n6  2023-12-31  ../swe_forecasting/output/swe_predicted_2023-1...\n7  2023-12-18  ../swe_forecasting/output/swe_predicted_2023-1...\n8  2023-12-17  ../swe_forecasting/output/swe_predicted_2023-1...\n9  2023-12-20  ../swe_forecasting/output/swe_predicted_2023-1...\n10 2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n11 2023-12-08  ../swe_forecasting/output/swe_predicted_2023-1...\n12 2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n13 2023-12-26  ../swe_forecasting/output/swe_predicted_2023-1...\n14 2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n15 2023-12-29  ../swe_forecasting/output/swe_predicted_2023-1...\n16 2023-12-22  ../swe_forecasting/output/swe_predicted_2023-1...\n17 2023-12-30  ../swe_forecasting/output/swe_predicted_2023-1...\n18 2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n19 2023-12-01  ../swe_forecasting/output/swe_predicted_2023-1...\n20 2023-12-07  ../swe_forecasting/output/swe_predicted_2023-1...\n21 2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n22 2024-01-02  ../swe_forecasting/output/swe_predicted_2024-0...\n23 2023-12-28  ../swe_forecasting/output/swe_predicted_2023-1...\n24 2023-12-15  ../swe_forecasting/output/swe_predicted_2023-1...\n25 2023-12-16  ../swe_forecasting/output/swe_predicted_2023-1...\n26 2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n27 2023-06-11  ../swe_forecasting/output/swe_predicted_2023-0...\n28 2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n29 2023-12-14  ../swe_forecasting/output/swe_predicted_2023-1...\n30 2023-12-06  ../swe_forecasting/output/swe_predicted_2023-1...\n31 2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n32 2023-12-23  ../swe_forecasting/output/swe_predicted_2023-1...\n33 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n34 2023-12-04  ../swe_forecasting/output/swe_predicted_2023-1...\n35 2023-12-02  ../swe_forecasting/output/swe_predicted_2023-1...\n36 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n37 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n38 2024-01-01  ../swe_forecasting/output/swe_predicted_2024-0...\n39 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n40 2023-11-30  ../swe_forecasting/output/swe_predicted_2023-1...\n41 2023-12-19  ../swe_forecasting/output/swe_predicted_2023-1...\n42 2024-01-03  ../swe_forecasting/output/swe_predicted_2024-0...\n43 2023-12-03  ../swe_forecasting/output/swe_predicted_2023-1...\n44 2023-12-09  ../swe_forecasting/output/swe_predicted_2023-1...\n45 2023-12-05  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1704600502424,
  "history_end_time" : 1704600503465,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "15ckeld65v8",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2024-01-06\n2024-01-03\ntest start date:  2024-01-03\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2024_predicted_swe_2024-01-03.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2024_all_variables_2024-01-03.png\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2024-01-03.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2024-01-03.tif\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-21.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-27.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-13.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-31.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-18.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-17.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-08.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-29.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-22.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-30.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-01.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-07.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2024-01-02.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-28.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-15.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-16.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-14.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-06.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-04.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-02.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2024-01-01.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-11-30.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-19.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2024-01-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-09.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-05.tif.map already exists\n/home/chetana/gw-workspace/15ckeld65v8/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/15ckeld65v8/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/15ckeld65v8/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/15ckeld65v8/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/15ckeld65v8/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/15ckeld65v8/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/15ckeld65v8/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/15ckeld65v8/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/15ckeld65v8/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/15ckeld65v8/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/15ckeld65v8/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/15ckeld65v8/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/15ckeld65v8/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/15ckeld65v8/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/15ckeld65v8/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/15ckeld65v8/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/15ckeld65v8/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/15ckeld65v8/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/15ckeld65v8/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/15ckeld65v8/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/15ckeld65v8/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/15ckeld65v8/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/15ckeld65v8/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/15ckeld65v8/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/15ckeld65v8/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/15ckeld65v8/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/15ckeld65v8/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/15ckeld65v8/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/15ckeld65v8/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/15ckeld65v8/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/15ckeld65v8/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/15ckeld65v8/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/15ckeld65v8/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/15ckeld65v8/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/15ckeld65v8/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/15ckeld65v8/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/15ckeld65v8/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/15ckeld65v8/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/15ckeld65v8/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/15ckeld65v8/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/15ckeld65v8/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/15ckeld65v8/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/15ckeld65v8/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/15ckeld65v8/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/15ckeld65v8/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/15ckeld65v8/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2023-12-21  ../swe_forecasting/output/swe_predicted_2023-1...\n1  2023-12-11  ../swe_forecasting/output/swe_predicted_2023-1...\n2  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n3  2023-12-27  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n5  2023-12-13  ../swe_forecasting/output/swe_predicted_2023-1...\n6  2023-12-31  ../swe_forecasting/output/swe_predicted_2023-1...\n7  2023-12-18  ../swe_forecasting/output/swe_predicted_2023-1...\n8  2023-12-17  ../swe_forecasting/output/swe_predicted_2023-1...\n9  2023-12-20  ../swe_forecasting/output/swe_predicted_2023-1...\n10 2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n11 2023-12-08  ../swe_forecasting/output/swe_predicted_2023-1...\n12 2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n13 2023-12-26  ../swe_forecasting/output/swe_predicted_2023-1...\n14 2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n15 2023-12-29  ../swe_forecasting/output/swe_predicted_2023-1...\n16 2023-12-22  ../swe_forecasting/output/swe_predicted_2023-1...\n17 2023-12-30  ../swe_forecasting/output/swe_predicted_2023-1...\n18 2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n19 2023-12-01  ../swe_forecasting/output/swe_predicted_2023-1...\n20 2023-12-07  ../swe_forecasting/output/swe_predicted_2023-1...\n21 2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n22 2024-01-02  ../swe_forecasting/output/swe_predicted_2024-0...\n23 2023-12-28  ../swe_forecasting/output/swe_predicted_2023-1...\n24 2023-12-15  ../swe_forecasting/output/swe_predicted_2023-1...\n25 2023-12-16  ../swe_forecasting/output/swe_predicted_2023-1...\n26 2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n27 2023-06-11  ../swe_forecasting/output/swe_predicted_2023-0...\n28 2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n29 2023-12-14  ../swe_forecasting/output/swe_predicted_2023-1...\n30 2023-12-06  ../swe_forecasting/output/swe_predicted_2023-1...\n31 2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n32 2023-12-23  ../swe_forecasting/output/swe_predicted_2023-1...\n33 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n34 2023-12-04  ../swe_forecasting/output/swe_predicted_2023-1...\n35 2023-12-02  ../swe_forecasting/output/swe_predicted_2023-1...\n36 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n37 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n38 2024-01-01  ../swe_forecasting/output/swe_predicted_2024-0...\n39 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n40 2023-11-30  ../swe_forecasting/output/swe_predicted_2023-1...\n41 2023-12-19  ../swe_forecasting/output/swe_predicted_2023-1...\n42 2024-01-03  ../swe_forecasting/output/swe_predicted_2024-0...\n43 2023-12-03  ../swe_forecasting/output/swe_predicted_2023-1...\n44 2023-12-09  ../swe_forecasting/output/swe_predicted_2023-1...\n45 2023-12-05  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1704566594389,
  "history_end_time" : 1704566595277,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "8cty8wr4nvh",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2024-01-06\ntest start date:  2024-01-04\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2024_predicted_swe_2024-01-04.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2024_all_variables_2024-01-04.png\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-21.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-27.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-13.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-31.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-18.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-17.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-08.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-29.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-22.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-30.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-01.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-07.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2024-01-02.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-28.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-15.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-16.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-14.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-06.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-04.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-02.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2024-01-01.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-11-30.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-19.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2024-01-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-09.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-05.tif.map already exists\n/home/chetana/gw-workspace/8cty8wr4nvh/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/8cty8wr4nvh/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/8cty8wr4nvh/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/8cty8wr4nvh/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/8cty8wr4nvh/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/8cty8wr4nvh/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/8cty8wr4nvh/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/8cty8wr4nvh/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/8cty8wr4nvh/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/8cty8wr4nvh/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/8cty8wr4nvh/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/8cty8wr4nvh/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/8cty8wr4nvh/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/8cty8wr4nvh/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/8cty8wr4nvh/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/8cty8wr4nvh/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/8cty8wr4nvh/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/8cty8wr4nvh/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/8cty8wr4nvh/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/8cty8wr4nvh/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/8cty8wr4nvh/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/8cty8wr4nvh/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/8cty8wr4nvh/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/8cty8wr4nvh/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/8cty8wr4nvh/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/8cty8wr4nvh/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/8cty8wr4nvh/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/8cty8wr4nvh/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/8cty8wr4nvh/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/8cty8wr4nvh/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/8cty8wr4nvh/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/8cty8wr4nvh/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/8cty8wr4nvh/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/8cty8wr4nvh/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/8cty8wr4nvh/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/8cty8wr4nvh/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/8cty8wr4nvh/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/8cty8wr4nvh/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/8cty8wr4nvh/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/8cty8wr4nvh/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/8cty8wr4nvh/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/8cty8wr4nvh/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/8cty8wr4nvh/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/8cty8wr4nvh/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/8cty8wr4nvh/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/8cty8wr4nvh/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2023-12-21  ../swe_forecasting/output/swe_predicted_2023-1...\n1  2023-12-11  ../swe_forecasting/output/swe_predicted_2023-1...\n2  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n3  2023-12-27  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n5  2023-12-13  ../swe_forecasting/output/swe_predicted_2023-1...\n6  2023-12-31  ../swe_forecasting/output/swe_predicted_2023-1...\n7  2023-12-18  ../swe_forecasting/output/swe_predicted_2023-1...\n8  2023-12-17  ../swe_forecasting/output/swe_predicted_2023-1...\n9  2023-12-20  ../swe_forecasting/output/swe_predicted_2023-1...\n10 2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n11 2023-12-08  ../swe_forecasting/output/swe_predicted_2023-1...\n12 2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n13 2023-12-26  ../swe_forecasting/output/swe_predicted_2023-1...\n14 2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n15 2023-12-29  ../swe_forecasting/output/swe_predicted_2023-1...\n16 2023-12-22  ../swe_forecasting/output/swe_predicted_2023-1...\n17 2023-12-30  ../swe_forecasting/output/swe_predicted_2023-1...\n18 2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n19 2023-12-01  ../swe_forecasting/output/swe_predicted_2023-1...\n20 2023-12-07  ../swe_forecasting/output/swe_predicted_2023-1...\n21 2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n22 2024-01-02  ../swe_forecasting/output/swe_predicted_2024-0...\n23 2023-12-28  ../swe_forecasting/output/swe_predicted_2023-1...\n24 2023-12-15  ../swe_forecasting/output/swe_predicted_2023-1...\n25 2023-12-16  ../swe_forecasting/output/swe_predicted_2023-1...\n26 2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n27 2023-06-11  ../swe_forecasting/output/swe_predicted_2023-0...\n28 2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n29 2023-12-14  ../swe_forecasting/output/swe_predicted_2023-1...\n30 2023-12-06  ../swe_forecasting/output/swe_predicted_2023-1...\n31 2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n32 2023-12-23  ../swe_forecasting/output/swe_predicted_2023-1...\n33 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n34 2023-12-04  ../swe_forecasting/output/swe_predicted_2023-1...\n35 2023-12-02  ../swe_forecasting/output/swe_predicted_2023-1...\n36 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n37 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n38 2024-01-01  ../swe_forecasting/output/swe_predicted_2024-0...\n39 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n40 2023-11-30  ../swe_forecasting/output/swe_predicted_2023-1...\n41 2023-12-19  ../swe_forecasting/output/swe_predicted_2023-1...\n42 2024-01-03  ../swe_forecasting/output/swe_predicted_2024-0...\n43 2023-12-03  ../swe_forecasting/output/swe_predicted_2023-1...\n44 2023-12-09  ../swe_forecasting/output/swe_predicted_2023-1...\n45 2023-12-05  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1704565995803,
  "history_end_time" : 1704565996698,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "l5gfcpmeiwt",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2024-01-06\ntest start date:  2024-01-04\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2024_predicted_swe_2024-01-04.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2024_all_variables_2024-01-04.png\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-21.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-27.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-13.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-31.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-18.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-17.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-08.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-29.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-22.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-30.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-01.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-07.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2024-01-02.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-28.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-15.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-16.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-14.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-06.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-04.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-02.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2024-01-01.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-11-30.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-19.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2024-01-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-09.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-05.tif.map already exists\n/home/chetana/gw-workspace/l5gfcpmeiwt/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l5gfcpmeiwt/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l5gfcpmeiwt/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l5gfcpmeiwt/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l5gfcpmeiwt/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l5gfcpmeiwt/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l5gfcpmeiwt/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l5gfcpmeiwt/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l5gfcpmeiwt/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l5gfcpmeiwt/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l5gfcpmeiwt/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l5gfcpmeiwt/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l5gfcpmeiwt/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l5gfcpmeiwt/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l5gfcpmeiwt/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l5gfcpmeiwt/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l5gfcpmeiwt/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l5gfcpmeiwt/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l5gfcpmeiwt/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l5gfcpmeiwt/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l5gfcpmeiwt/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l5gfcpmeiwt/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l5gfcpmeiwt/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l5gfcpmeiwt/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l5gfcpmeiwt/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l5gfcpmeiwt/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l5gfcpmeiwt/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l5gfcpmeiwt/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l5gfcpmeiwt/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l5gfcpmeiwt/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l5gfcpmeiwt/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l5gfcpmeiwt/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l5gfcpmeiwt/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l5gfcpmeiwt/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l5gfcpmeiwt/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l5gfcpmeiwt/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l5gfcpmeiwt/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l5gfcpmeiwt/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l5gfcpmeiwt/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l5gfcpmeiwt/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l5gfcpmeiwt/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l5gfcpmeiwt/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l5gfcpmeiwt/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l5gfcpmeiwt/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l5gfcpmeiwt/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l5gfcpmeiwt/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2023-12-21  ../swe_forecasting/output/swe_predicted_2023-1...\n1  2023-12-11  ../swe_forecasting/output/swe_predicted_2023-1...\n2  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n3  2023-12-27  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n5  2023-12-13  ../swe_forecasting/output/swe_predicted_2023-1...\n6  2023-12-31  ../swe_forecasting/output/swe_predicted_2023-1...\n7  2023-12-18  ../swe_forecasting/output/swe_predicted_2023-1...\n8  2023-12-17  ../swe_forecasting/output/swe_predicted_2023-1...\n9  2023-12-20  ../swe_forecasting/output/swe_predicted_2023-1...\n10 2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n11 2023-12-08  ../swe_forecasting/output/swe_predicted_2023-1...\n12 2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n13 2023-12-26  ../swe_forecasting/output/swe_predicted_2023-1...\n14 2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n15 2023-12-29  ../swe_forecasting/output/swe_predicted_2023-1...\n16 2023-12-22  ../swe_forecasting/output/swe_predicted_2023-1...\n17 2023-12-30  ../swe_forecasting/output/swe_predicted_2023-1...\n18 2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n19 2023-12-01  ../swe_forecasting/output/swe_predicted_2023-1...\n20 2023-12-07  ../swe_forecasting/output/swe_predicted_2023-1...\n21 2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n22 2024-01-02  ../swe_forecasting/output/swe_predicted_2024-0...\n23 2023-12-28  ../swe_forecasting/output/swe_predicted_2023-1...\n24 2023-12-15  ../swe_forecasting/output/swe_predicted_2023-1...\n25 2023-12-16  ../swe_forecasting/output/swe_predicted_2023-1...\n26 2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n27 2023-06-11  ../swe_forecasting/output/swe_predicted_2023-0...\n28 2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n29 2023-12-14  ../swe_forecasting/output/swe_predicted_2023-1...\n30 2023-12-06  ../swe_forecasting/output/swe_predicted_2023-1...\n31 2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n32 2023-12-23  ../swe_forecasting/output/swe_predicted_2023-1...\n33 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n34 2023-12-04  ../swe_forecasting/output/swe_predicted_2023-1...\n35 2023-12-02  ../swe_forecasting/output/swe_predicted_2023-1...\n36 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n37 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n38 2024-01-01  ../swe_forecasting/output/swe_predicted_2024-0...\n39 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n40 2023-11-30  ../swe_forecasting/output/swe_predicted_2023-1...\n41 2023-12-19  ../swe_forecasting/output/swe_predicted_2023-1...\n42 2024-01-03  ../swe_forecasting/output/swe_predicted_2024-0...\n43 2023-12-03  ../swe_forecasting/output/swe_predicted_2023-1...\n44 2023-12-09  ../swe_forecasting/output/swe_predicted_2023-1...\n45 2023-12-05  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1704564983628,
  "history_end_time" : 1704564984488,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "5qyftep0j8s",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2024-01-06\ntest start date:  2024-01-03\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2024_predicted_swe_2024-01-03.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2024_all_variables_2024-01-03.png\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2024-01-03.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2024-01-03.tif\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-21.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-27.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-13.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-31.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-18.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-17.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-08.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-29.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-22.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-30.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-01.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-07.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2024-01-02.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-28.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-15.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-16.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-14.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-06.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-04.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-02.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2024-01-01.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-11-30.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-19.tif.map already exists\nDate: 2024-01-03\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-03.tif.map\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-09.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-05.tif.map already exists\n/home/chetana/gw-workspace/5qyftep0j8s/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5qyftep0j8s/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5qyftep0j8s/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5qyftep0j8s/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5qyftep0j8s/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5qyftep0j8s/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5qyftep0j8s/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5qyftep0j8s/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5qyftep0j8s/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5qyftep0j8s/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5qyftep0j8s/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5qyftep0j8s/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5qyftep0j8s/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5qyftep0j8s/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5qyftep0j8s/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5qyftep0j8s/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5qyftep0j8s/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5qyftep0j8s/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5qyftep0j8s/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5qyftep0j8s/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5qyftep0j8s/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5qyftep0j8s/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5qyftep0j8s/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5qyftep0j8s/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5qyftep0j8s/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5qyftep0j8s/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5qyftep0j8s/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5qyftep0j8s/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5qyftep0j8s/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5qyftep0j8s/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5qyftep0j8s/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5qyftep0j8s/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5qyftep0j8s/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5qyftep0j8s/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5qyftep0j8s/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5qyftep0j8s/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5qyftep0j8s/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5qyftep0j8s/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5qyftep0j8s/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5qyftep0j8s/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5qyftep0j8s/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5qyftep0j8s/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5qyftep0j8s/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5qyftep0j8s/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5qyftep0j8s/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5qyftep0j8s/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2023-12-21  ../swe_forecasting/output/swe_predicted_2023-1...\n1  2023-12-11  ../swe_forecasting/output/swe_predicted_2023-1...\n2  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n3  2023-12-27  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n5  2023-12-13  ../swe_forecasting/output/swe_predicted_2023-1...\n6  2023-12-31  ../swe_forecasting/output/swe_predicted_2023-1...\n7  2023-12-18  ../swe_forecasting/output/swe_predicted_2023-1...\n8  2023-12-17  ../swe_forecasting/output/swe_predicted_2023-1...\n9  2023-12-20  ../swe_forecasting/output/swe_predicted_2023-1...\n10 2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n11 2023-12-08  ../swe_forecasting/output/swe_predicted_2023-1...\n12 2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n13 2023-12-26  ../swe_forecasting/output/swe_predicted_2023-1...\n14 2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n15 2023-12-29  ../swe_forecasting/output/swe_predicted_2023-1...\n16 2023-12-22  ../swe_forecasting/output/swe_predicted_2023-1...\n17 2023-12-30  ../swe_forecasting/output/swe_predicted_2023-1...\n18 2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n19 2023-12-01  ../swe_forecasting/output/swe_predicted_2023-1...\n20 2023-12-07  ../swe_forecasting/output/swe_predicted_2023-1...\n21 2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n22 2024-01-02  ../swe_forecasting/output/swe_predicted_2024-0...\n23 2023-12-28  ../swe_forecasting/output/swe_predicted_2023-1...\n24 2023-12-15  ../swe_forecasting/output/swe_predicted_2023-1...\n25 2023-12-16  ../swe_forecasting/output/swe_predicted_2023-1...\n26 2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n27 2023-06-11  ../swe_forecasting/output/swe_predicted_2023-0...\n28 2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n29 2023-12-14  ../swe_forecasting/output/swe_predicted_2023-1...\n30 2023-12-06  ../swe_forecasting/output/swe_predicted_2023-1...\n31 2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n32 2023-12-23  ../swe_forecasting/output/swe_predicted_2023-1...\n33 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n34 2023-12-04  ../swe_forecasting/output/swe_predicted_2023-1...\n35 2023-12-02  ../swe_forecasting/output/swe_predicted_2023-1...\n36 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n37 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n38 2024-01-01  ../swe_forecasting/output/swe_predicted_2024-0...\n39 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n40 2023-11-30  ../swe_forecasting/output/swe_predicted_2023-1...\n41 2023-12-19  ../swe_forecasting/output/swe_predicted_2023-1...\n42 2024-01-03  ../swe_forecasting/output/swe_predicted_2024-0...\n43 2023-12-03  ../swe_forecasting/output/swe_predicted_2023-1...\n44 2023-12-09  ../swe_forecasting/output/swe_predicted_2023-1...\n45 2023-12-05  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1704563701834,
  "history_end_time" : 1704563702752,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "5gg2e1cwmuv",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2024-01-06\ntest start date:  2024-01-02\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2024_predicted_swe_2024-01-02.png\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2024-01-02.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2024-01-02.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/2024_all_variables_2024-01-02.png\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-21.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-27.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-13.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-31.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-18.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-17.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-08.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-29.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-22.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-30.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-01.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-07.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\nDate: 2024-01-02\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-02.tif.map\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-28.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-15.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-16.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-14.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-06.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-04.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-02.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2024-01-01.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-11-30.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-19.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-09.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-05.tif.map already exists\n/home/chetana/gw-workspace/5gg2e1cwmuv/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5gg2e1cwmuv/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5gg2e1cwmuv/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5gg2e1cwmuv/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5gg2e1cwmuv/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5gg2e1cwmuv/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5gg2e1cwmuv/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5gg2e1cwmuv/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5gg2e1cwmuv/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5gg2e1cwmuv/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5gg2e1cwmuv/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5gg2e1cwmuv/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5gg2e1cwmuv/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5gg2e1cwmuv/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5gg2e1cwmuv/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5gg2e1cwmuv/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5gg2e1cwmuv/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5gg2e1cwmuv/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5gg2e1cwmuv/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5gg2e1cwmuv/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5gg2e1cwmuv/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5gg2e1cwmuv/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5gg2e1cwmuv/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5gg2e1cwmuv/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5gg2e1cwmuv/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5gg2e1cwmuv/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5gg2e1cwmuv/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5gg2e1cwmuv/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5gg2e1cwmuv/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5gg2e1cwmuv/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5gg2e1cwmuv/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5gg2e1cwmuv/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5gg2e1cwmuv/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5gg2e1cwmuv/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5gg2e1cwmuv/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5gg2e1cwmuv/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5gg2e1cwmuv/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5gg2e1cwmuv/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5gg2e1cwmuv/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5gg2e1cwmuv/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5gg2e1cwmuv/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5gg2e1cwmuv/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5gg2e1cwmuv/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5gg2e1cwmuv/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/5gg2e1cwmuv/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2023-12-21  ../swe_forecasting/output/swe_predicted_2023-1...\n1  2023-12-11  ../swe_forecasting/output/swe_predicted_2023-1...\n2  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n3  2023-12-27  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n5  2023-12-13  ../swe_forecasting/output/swe_predicted_2023-1...\n6  2023-12-31  ../swe_forecasting/output/swe_predicted_2023-1...\n7  2023-12-18  ../swe_forecasting/output/swe_predicted_2023-1...\n8  2023-12-17  ../swe_forecasting/output/swe_predicted_2023-1...\n9  2023-12-20  ../swe_forecasting/output/swe_predicted_2023-1...\n10 2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n11 2023-12-08  ../swe_forecasting/output/swe_predicted_2023-1...\n12 2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n13 2023-12-26  ../swe_forecasting/output/swe_predicted_2023-1...\n14 2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n15 2023-12-29  ../swe_forecasting/output/swe_predicted_2023-1...\n16 2023-12-22  ../swe_forecasting/output/swe_predicted_2023-1...\n17 2023-12-30  ../swe_forecasting/output/swe_predicted_2023-1...\n18 2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n19 2023-12-01  ../swe_forecasting/output/swe_predicted_2023-1...\n20 2023-12-07  ../swe_forecasting/output/swe_predicted_2023-1...\n21 2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n22 2024-01-02  ../swe_forecasting/output/swe_predicted_2024-0...\n23 2023-12-28  ../swe_forecasting/output/swe_predicted_2023-1...\n24 2023-12-15  ../swe_forecasting/output/swe_predicted_2023-1...\n25 2023-12-16  ../swe_forecasting/output/swe_predicted_2023-1...\n26 2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n27 2023-06-11  ../swe_forecasting/output/swe_predicted_2023-0...\n28 2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n29 2023-12-14  ../swe_forecasting/output/swe_predicted_2023-1...\n30 2023-12-06  ../swe_forecasting/output/swe_predicted_2023-1...\n31 2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n32 2023-12-23  ../swe_forecasting/output/swe_predicted_2023-1...\n33 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n34 2023-12-04  ../swe_forecasting/output/swe_predicted_2023-1...\n35 2023-12-02  ../swe_forecasting/output/swe_predicted_2023-1...\n36 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n37 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n38 2024-01-01  ../swe_forecasting/output/swe_predicted_2024-0...\n39 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n40 2023-11-30  ../swe_forecasting/output/swe_predicted_2023-1...\n41 2023-12-19  ../swe_forecasting/output/swe_predicted_2023-1...\n42 2023-12-03  ../swe_forecasting/output/swe_predicted_2023-1...\n43 2023-12-09  ../swe_forecasting/output/swe_predicted_2023-1...\n44 2023-12-05  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1704562587505,
  "history_end_time" : 1704562588388,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "4ajy114fbak",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2024-01-06\ntest start date:  2024-01-01\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2024_predicted_swe_2024-01-01.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2024_all_variables_2024-01-01.png\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2024-01-01.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2024-01-01.tif\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-21.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-27.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-13.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-31.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-18.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-17.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-08.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-29.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-22.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-30.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-01.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-07.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-28.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-15.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-16.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-14.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-06.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-04.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-02.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2024-01-01.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-11-30.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-19.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-09.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-05.tif.map already exists\n/home/chetana/gw-workspace/4ajy114fbak/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/4ajy114fbak/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/4ajy114fbak/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/4ajy114fbak/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/4ajy114fbak/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/4ajy114fbak/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/4ajy114fbak/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/4ajy114fbak/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/4ajy114fbak/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/4ajy114fbak/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/4ajy114fbak/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/4ajy114fbak/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/4ajy114fbak/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/4ajy114fbak/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/4ajy114fbak/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/4ajy114fbak/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/4ajy114fbak/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/4ajy114fbak/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/4ajy114fbak/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/4ajy114fbak/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/4ajy114fbak/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/4ajy114fbak/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/4ajy114fbak/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/4ajy114fbak/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/4ajy114fbak/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/4ajy114fbak/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/4ajy114fbak/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/4ajy114fbak/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/4ajy114fbak/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/4ajy114fbak/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/4ajy114fbak/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/4ajy114fbak/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/4ajy114fbak/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/4ajy114fbak/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/4ajy114fbak/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/4ajy114fbak/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/4ajy114fbak/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/4ajy114fbak/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/4ajy114fbak/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/4ajy114fbak/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/4ajy114fbak/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/4ajy114fbak/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/4ajy114fbak/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/4ajy114fbak/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2023-12-21  ../swe_forecasting/output/swe_predicted_2023-1...\n1  2023-12-11  ../swe_forecasting/output/swe_predicted_2023-1...\n2  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n3  2023-12-27  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n5  2023-12-13  ../swe_forecasting/output/swe_predicted_2023-1...\n6  2023-12-31  ../swe_forecasting/output/swe_predicted_2023-1...\n7  2023-12-18  ../swe_forecasting/output/swe_predicted_2023-1...\n8  2023-12-17  ../swe_forecasting/output/swe_predicted_2023-1...\n9  2023-12-20  ../swe_forecasting/output/swe_predicted_2023-1...\n10 2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n11 2023-12-08  ../swe_forecasting/output/swe_predicted_2023-1...\n12 2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n13 2023-12-26  ../swe_forecasting/output/swe_predicted_2023-1...\n14 2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n15 2023-12-29  ../swe_forecasting/output/swe_predicted_2023-1...\n16 2023-12-22  ../swe_forecasting/output/swe_predicted_2023-1...\n17 2023-12-30  ../swe_forecasting/output/swe_predicted_2023-1...\n18 2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n19 2023-12-01  ../swe_forecasting/output/swe_predicted_2023-1...\n20 2023-12-07  ../swe_forecasting/output/swe_predicted_2023-1...\n21 2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n22 2023-12-28  ../swe_forecasting/output/swe_predicted_2023-1...\n23 2023-12-15  ../swe_forecasting/output/swe_predicted_2023-1...\n24 2023-12-16  ../swe_forecasting/output/swe_predicted_2023-1...\n25 2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n26 2023-06-11  ../swe_forecasting/output/swe_predicted_2023-0...\n27 2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n28 2023-12-14  ../swe_forecasting/output/swe_predicted_2023-1...\n29 2023-12-06  ../swe_forecasting/output/swe_predicted_2023-1...\n30 2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n31 2023-12-23  ../swe_forecasting/output/swe_predicted_2023-1...\n32 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n33 2023-12-04  ../swe_forecasting/output/swe_predicted_2023-1...\n34 2023-12-02  ../swe_forecasting/output/swe_predicted_2023-1...\n35 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n36 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n37 2024-01-01  ../swe_forecasting/output/swe_predicted_2024-0...\n38 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n39 2023-11-30  ../swe_forecasting/output/swe_predicted_2023-1...\n40 2023-12-19  ../swe_forecasting/output/swe_predicted_2023-1...\n41 2023-12-03  ../swe_forecasting/output/swe_predicted_2023-1...\n42 2023-12-09  ../swe_forecasting/output/swe_predicted_2023-1...\n43 2023-12-05  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1704555915268,
  "history_end_time" : 1704555916136,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "mt5358ejvqo",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2024-01-06\ntest start date:  2024-01-01\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2024_predicted_swe_2024-01-01.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2024_all_variables_2024-01-01.png\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2024-01-01.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2024-01-01.tif\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-21.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-27.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-13.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-31.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-18.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-17.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-08.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-29.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-22.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-30.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-01.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-07.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-28.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-15.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-16.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-14.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-06.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-04.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-02.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2024-01-01.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-11-30.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-19.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-09.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-05.tif.map already exists\n/home/chetana/gw-workspace/mt5358ejvqo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mt5358ejvqo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mt5358ejvqo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mt5358ejvqo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mt5358ejvqo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mt5358ejvqo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mt5358ejvqo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mt5358ejvqo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mt5358ejvqo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mt5358ejvqo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mt5358ejvqo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mt5358ejvqo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mt5358ejvqo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mt5358ejvqo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mt5358ejvqo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mt5358ejvqo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mt5358ejvqo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mt5358ejvqo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mt5358ejvqo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mt5358ejvqo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mt5358ejvqo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mt5358ejvqo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mt5358ejvqo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mt5358ejvqo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mt5358ejvqo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mt5358ejvqo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mt5358ejvqo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mt5358ejvqo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mt5358ejvqo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mt5358ejvqo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mt5358ejvqo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mt5358ejvqo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mt5358ejvqo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mt5358ejvqo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mt5358ejvqo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mt5358ejvqo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mt5358ejvqo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mt5358ejvqo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mt5358ejvqo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mt5358ejvqo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mt5358ejvqo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mt5358ejvqo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mt5358ejvqo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mt5358ejvqo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2023-12-21  ../swe_forecasting/output/swe_predicted_2023-1...\n1  2023-12-11  ../swe_forecasting/output/swe_predicted_2023-1...\n2  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n3  2023-12-27  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n5  2023-12-13  ../swe_forecasting/output/swe_predicted_2023-1...\n6  2023-12-31  ../swe_forecasting/output/swe_predicted_2023-1...\n7  2023-12-18  ../swe_forecasting/output/swe_predicted_2023-1...\n8  2023-12-17  ../swe_forecasting/output/swe_predicted_2023-1...\n9  2023-12-20  ../swe_forecasting/output/swe_predicted_2023-1...\n10 2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n11 2023-12-08  ../swe_forecasting/output/swe_predicted_2023-1...\n12 2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n13 2023-12-26  ../swe_forecasting/output/swe_predicted_2023-1...\n14 2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n15 2023-12-29  ../swe_forecasting/output/swe_predicted_2023-1...\n16 2023-12-22  ../swe_forecasting/output/swe_predicted_2023-1...\n17 2023-12-30  ../swe_forecasting/output/swe_predicted_2023-1...\n18 2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n19 2023-12-01  ../swe_forecasting/output/swe_predicted_2023-1...\n20 2023-12-07  ../swe_forecasting/output/swe_predicted_2023-1...\n21 2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n22 2023-12-28  ../swe_forecasting/output/swe_predicted_2023-1...\n23 2023-12-15  ../swe_forecasting/output/swe_predicted_2023-1...\n24 2023-12-16  ../swe_forecasting/output/swe_predicted_2023-1...\n25 2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n26 2023-06-11  ../swe_forecasting/output/swe_predicted_2023-0...\n27 2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n28 2023-12-14  ../swe_forecasting/output/swe_predicted_2023-1...\n29 2023-12-06  ../swe_forecasting/output/swe_predicted_2023-1...\n30 2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n31 2023-12-23  ../swe_forecasting/output/swe_predicted_2023-1...\n32 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n33 2023-12-04  ../swe_forecasting/output/swe_predicted_2023-1...\n34 2023-12-02  ../swe_forecasting/output/swe_predicted_2023-1...\n35 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n36 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n37 2024-01-01  ../swe_forecasting/output/swe_predicted_2024-0...\n38 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n39 2023-11-30  ../swe_forecasting/output/swe_predicted_2023-1...\n40 2023-12-19  ../swe_forecasting/output/swe_predicted_2023-1...\n41 2023-12-03  ../swe_forecasting/output/swe_predicted_2023-1...\n42 2023-12-09  ../swe_forecasting/output/swe_predicted_2023-1...\n43 2023-12-05  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1704555467940,
  "history_end_time" : 1704555468848,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "jd8j6VzQYyun",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2024-01-06\ntest start date:  2024-01-01\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2024_predicted_swe_2024-01-01.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2024_all_variables_2024-01-01.png\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2024-01-01.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2024-01-01.tif\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-21.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-27.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-13.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-31.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-18.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-17.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-08.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-29.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-22.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-30.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-01.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-07.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-28.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-15.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-16.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-14.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-06.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-04.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-02.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\nDate: 2024-01-01\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-01.tif.map\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-11-30.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-19.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-09.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-05.tif.map already exists\n/home/chetana/gw-workspace/jd8j6VzQYyun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/jd8j6VzQYyun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/jd8j6VzQYyun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/jd8j6VzQYyun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/jd8j6VzQYyun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/jd8j6VzQYyun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/jd8j6VzQYyun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/jd8j6VzQYyun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/jd8j6VzQYyun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/jd8j6VzQYyun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/jd8j6VzQYyun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/jd8j6VzQYyun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/jd8j6VzQYyun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/jd8j6VzQYyun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/jd8j6VzQYyun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/jd8j6VzQYyun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/jd8j6VzQYyun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/jd8j6VzQYyun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/jd8j6VzQYyun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/jd8j6VzQYyun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/jd8j6VzQYyun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/jd8j6VzQYyun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/jd8j6VzQYyun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/jd8j6VzQYyun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/jd8j6VzQYyun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/jd8j6VzQYyun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/jd8j6VzQYyun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/jd8j6VzQYyun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/jd8j6VzQYyun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/jd8j6VzQYyun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/jd8j6VzQYyun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/jd8j6VzQYyun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/jd8j6VzQYyun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/jd8j6VzQYyun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/jd8j6VzQYyun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/jd8j6VzQYyun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/jd8j6VzQYyun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/jd8j6VzQYyun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/jd8j6VzQYyun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/jd8j6VzQYyun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/jd8j6VzQYyun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/jd8j6VzQYyun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/jd8j6VzQYyun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/jd8j6VzQYyun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2023-12-21  ../swe_forecasting/output/swe_predicted_2023-1...\n1  2023-12-11  ../swe_forecasting/output/swe_predicted_2023-1...\n2  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n3  2023-12-27  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n5  2023-12-13  ../swe_forecasting/output/swe_predicted_2023-1...\n6  2023-12-31  ../swe_forecasting/output/swe_predicted_2023-1...\n7  2023-12-18  ../swe_forecasting/output/swe_predicted_2023-1...\n8  2023-12-17  ../swe_forecasting/output/swe_predicted_2023-1...\n9  2023-12-20  ../swe_forecasting/output/swe_predicted_2023-1...\n10 2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n11 2023-12-08  ../swe_forecasting/output/swe_predicted_2023-1...\n12 2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n13 2023-12-26  ../swe_forecasting/output/swe_predicted_2023-1...\n14 2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n15 2023-12-29  ../swe_forecasting/output/swe_predicted_2023-1...\n16 2023-12-22  ../swe_forecasting/output/swe_predicted_2023-1...\n17 2023-12-30  ../swe_forecasting/output/swe_predicted_2023-1...\n18 2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n19 2023-12-01  ../swe_forecasting/output/swe_predicted_2023-1...\n20 2023-12-07  ../swe_forecasting/output/swe_predicted_2023-1...\n21 2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n22 2023-12-28  ../swe_forecasting/output/swe_predicted_2023-1...\n23 2023-12-15  ../swe_forecasting/output/swe_predicted_2023-1...\n24 2023-12-16  ../swe_forecasting/output/swe_predicted_2023-1...\n25 2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n26 2023-06-11  ../swe_forecasting/output/swe_predicted_2023-0...\n27 2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n28 2023-12-14  ../swe_forecasting/output/swe_predicted_2023-1...\n29 2023-12-06  ../swe_forecasting/output/swe_predicted_2023-1...\n30 2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n31 2023-12-23  ../swe_forecasting/output/swe_predicted_2023-1...\n32 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n33 2023-12-04  ../swe_forecasting/output/swe_predicted_2023-1...\n34 2023-12-02  ../swe_forecasting/output/swe_predicted_2023-1...\n35 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n36 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n37 2024-01-01  ../swe_forecasting/output/swe_predicted_2024-0...\n38 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n39 2023-11-30  ../swe_forecasting/output/swe_predicted_2023-1...\n40 2023-12-19  ../swe_forecasting/output/swe_predicted_2023-1...\n41 2023-12-03  ../swe_forecasting/output/swe_predicted_2023-1...\n42 2023-12-09  ../swe_forecasting/output/swe_predicted_2023-1...\n43 2023-12-05  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1704555016300,
  "history_end_time" : 1704555017171,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "snawmcmy61k",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2024-01-06\ntest start date:  2024-01-01\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2024_predicted_swe_2024-01-01.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2024_all_variables_2024-01-01.png\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-21.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-27.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-13.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-31.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-18.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-17.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-08.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-29.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-22.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-30.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-01.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-07.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-28.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-15.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-16.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-14.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-06.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-04.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-02.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-11-30.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-19.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-09.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-05.tif.map already exists\n/home/chetana/gw-workspace/snawmcmy61k/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/snawmcmy61k/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/snawmcmy61k/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/snawmcmy61k/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/snawmcmy61k/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/snawmcmy61k/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/snawmcmy61k/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/snawmcmy61k/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/snawmcmy61k/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/snawmcmy61k/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/snawmcmy61k/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/snawmcmy61k/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/snawmcmy61k/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/snawmcmy61k/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/snawmcmy61k/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/snawmcmy61k/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/snawmcmy61k/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/snawmcmy61k/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/snawmcmy61k/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/snawmcmy61k/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/snawmcmy61k/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/snawmcmy61k/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/snawmcmy61k/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/snawmcmy61k/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/snawmcmy61k/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/snawmcmy61k/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/snawmcmy61k/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/snawmcmy61k/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/snawmcmy61k/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/snawmcmy61k/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/snawmcmy61k/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/snawmcmy61k/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/snawmcmy61k/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/snawmcmy61k/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/snawmcmy61k/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/snawmcmy61k/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/snawmcmy61k/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/snawmcmy61k/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/snawmcmy61k/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/snawmcmy61k/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/snawmcmy61k/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/snawmcmy61k/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/snawmcmy61k/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2023-12-21  ../swe_forecasting/output/swe_predicted_2023-1...\n1  2023-12-11  ../swe_forecasting/output/swe_predicted_2023-1...\n2  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n3  2023-12-27  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n5  2023-12-13  ../swe_forecasting/output/swe_predicted_2023-1...\n6  2023-12-31  ../swe_forecasting/output/swe_predicted_2023-1...\n7  2023-12-18  ../swe_forecasting/output/swe_predicted_2023-1...\n8  2023-12-17  ../swe_forecasting/output/swe_predicted_2023-1...\n9  2023-12-20  ../swe_forecasting/output/swe_predicted_2023-1...\n10 2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n11 2023-12-08  ../swe_forecasting/output/swe_predicted_2023-1...\n12 2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n13 2023-12-26  ../swe_forecasting/output/swe_predicted_2023-1...\n14 2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n15 2023-12-29  ../swe_forecasting/output/swe_predicted_2023-1...\n16 2023-12-22  ../swe_forecasting/output/swe_predicted_2023-1...\n17 2023-12-30  ../swe_forecasting/output/swe_predicted_2023-1...\n18 2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n19 2023-12-01  ../swe_forecasting/output/swe_predicted_2023-1...\n20 2023-12-07  ../swe_forecasting/output/swe_predicted_2023-1...\n21 2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n22 2023-12-28  ../swe_forecasting/output/swe_predicted_2023-1...\n23 2023-12-15  ../swe_forecasting/output/swe_predicted_2023-1...\n24 2023-12-16  ../swe_forecasting/output/swe_predicted_2023-1...\n25 2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n26 2023-06-11  ../swe_forecasting/output/swe_predicted_2023-0...\n27 2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n28 2023-12-14  ../swe_forecasting/output/swe_predicted_2023-1...\n29 2023-12-06  ../swe_forecasting/output/swe_predicted_2023-1...\n30 2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n31 2023-12-23  ../swe_forecasting/output/swe_predicted_2023-1...\n32 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n33 2023-12-04  ../swe_forecasting/output/swe_predicted_2023-1...\n34 2023-12-02  ../swe_forecasting/output/swe_predicted_2023-1...\n35 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n36 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n37 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n38 2023-11-30  ../swe_forecasting/output/swe_predicted_2023-1...\n39 2023-12-19  ../swe_forecasting/output/swe_predicted_2023-1...\n40 2023-12-03  ../swe_forecasting/output/swe_predicted_2023-1...\n41 2023-12-09  ../swe_forecasting/output/swe_predicted_2023-1...\n42 2023-12-05  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1704553803026,
  "history_end_time" : 1704553803944,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "u5klyu49awn",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2024-01-06\ntest start date:  2023-12-31\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-31.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-31.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-12-31.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-12-31.png\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-21.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-27.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-13.tif.map already exists\nDate: 2023-12-31\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-31.tif.map\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-18.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-17.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-08.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-29.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-22.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-30.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-01.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-07.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-28.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-15.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-16.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-14.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-06.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-04.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-02.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-11-30.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-19.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-09.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-05.tif.map already exists\n/home/chetana/gw-workspace/u5klyu49awn/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/u5klyu49awn/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/u5klyu49awn/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/u5klyu49awn/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/u5klyu49awn/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/u5klyu49awn/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/u5klyu49awn/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/u5klyu49awn/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/u5klyu49awn/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/u5klyu49awn/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/u5klyu49awn/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/u5klyu49awn/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/u5klyu49awn/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/u5klyu49awn/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/u5klyu49awn/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/u5klyu49awn/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/u5klyu49awn/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/u5klyu49awn/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/u5klyu49awn/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/u5klyu49awn/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/u5klyu49awn/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/u5klyu49awn/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/u5klyu49awn/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/u5klyu49awn/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/u5klyu49awn/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/u5klyu49awn/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/u5klyu49awn/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/u5klyu49awn/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/u5klyu49awn/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/u5klyu49awn/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/u5klyu49awn/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/u5klyu49awn/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/u5klyu49awn/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/u5klyu49awn/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/u5klyu49awn/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/u5klyu49awn/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/u5klyu49awn/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/u5klyu49awn/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/u5klyu49awn/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/u5klyu49awn/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/u5klyu49awn/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/u5klyu49awn/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/u5klyu49awn/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2023-12-21  ../swe_forecasting/output/swe_predicted_2023-1...\n1  2023-12-11  ../swe_forecasting/output/swe_predicted_2023-1...\n2  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n3  2023-12-27  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n5  2023-12-13  ../swe_forecasting/output/swe_predicted_2023-1...\n6  2023-12-31  ../swe_forecasting/output/swe_predicted_2023-1...\n7  2023-12-18  ../swe_forecasting/output/swe_predicted_2023-1...\n8  2023-12-17  ../swe_forecasting/output/swe_predicted_2023-1...\n9  2023-12-20  ../swe_forecasting/output/swe_predicted_2023-1...\n10 2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n11 2023-12-08  ../swe_forecasting/output/swe_predicted_2023-1...\n12 2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n13 2023-12-26  ../swe_forecasting/output/swe_predicted_2023-1...\n14 2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n15 2023-12-29  ../swe_forecasting/output/swe_predicted_2023-1...\n16 2023-12-22  ../swe_forecasting/output/swe_predicted_2023-1...\n17 2023-12-30  ../swe_forecasting/output/swe_predicted_2023-1...\n18 2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n19 2023-12-01  ../swe_forecasting/output/swe_predicted_2023-1...\n20 2023-12-07  ../swe_forecasting/output/swe_predicted_2023-1...\n21 2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n22 2023-12-28  ../swe_forecasting/output/swe_predicted_2023-1...\n23 2023-12-15  ../swe_forecasting/output/swe_predicted_2023-1...\n24 2023-12-16  ../swe_forecasting/output/swe_predicted_2023-1...\n25 2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n26 2023-06-11  ../swe_forecasting/output/swe_predicted_2023-0...\n27 2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n28 2023-12-14  ../swe_forecasting/output/swe_predicted_2023-1...\n29 2023-12-06  ../swe_forecasting/output/swe_predicted_2023-1...\n30 2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n31 2023-12-23  ../swe_forecasting/output/swe_predicted_2023-1...\n32 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n33 2023-12-04  ../swe_forecasting/output/swe_predicted_2023-1...\n34 2023-12-02  ../swe_forecasting/output/swe_predicted_2023-1...\n35 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n36 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n37 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n38 2023-11-30  ../swe_forecasting/output/swe_predicted_2023-1...\n39 2023-12-19  ../swe_forecasting/output/swe_predicted_2023-1...\n40 2023-12-03  ../swe_forecasting/output/swe_predicted_2023-1...\n41 2023-12-09  ../swe_forecasting/output/swe_predicted_2023-1...\n42 2023-12-05  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1704553015364,
  "history_end_time" : 1704553016286,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "kjZs0u1YELiO",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2024-01-06\ntest start date:  2023-12-30\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-12-30.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-12-30.png\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-30.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-30.tif\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-21.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-27.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-13.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-18.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-17.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-08.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-29.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-22.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-30.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-01.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-07.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-28.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-15.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-16.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-14.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-06.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-04.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-02.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-11-30.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-19.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-09.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-05.tif.map already exists\n/home/chetana/gw-workspace/kjZs0u1YELiO/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/kjZs0u1YELiO/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/kjZs0u1YELiO/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/kjZs0u1YELiO/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/kjZs0u1YELiO/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/kjZs0u1YELiO/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/kjZs0u1YELiO/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/kjZs0u1YELiO/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/kjZs0u1YELiO/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/kjZs0u1YELiO/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/kjZs0u1YELiO/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/kjZs0u1YELiO/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/kjZs0u1YELiO/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/kjZs0u1YELiO/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/kjZs0u1YELiO/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/kjZs0u1YELiO/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/kjZs0u1YELiO/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/kjZs0u1YELiO/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/kjZs0u1YELiO/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/kjZs0u1YELiO/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/kjZs0u1YELiO/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/kjZs0u1YELiO/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/kjZs0u1YELiO/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/kjZs0u1YELiO/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/kjZs0u1YELiO/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/kjZs0u1YELiO/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/kjZs0u1YELiO/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/kjZs0u1YELiO/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/kjZs0u1YELiO/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/kjZs0u1YELiO/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/kjZs0u1YELiO/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/kjZs0u1YELiO/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/kjZs0u1YELiO/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/kjZs0u1YELiO/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/kjZs0u1YELiO/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/kjZs0u1YELiO/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/kjZs0u1YELiO/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/kjZs0u1YELiO/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/kjZs0u1YELiO/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/kjZs0u1YELiO/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/kjZs0u1YELiO/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/kjZs0u1YELiO/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2023-12-21  ../swe_forecasting/output/swe_predicted_2023-1...\n1  2023-12-11  ../swe_forecasting/output/swe_predicted_2023-1...\n2  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n3  2023-12-27  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n5  2023-12-13  ../swe_forecasting/output/swe_predicted_2023-1...\n6  2023-12-18  ../swe_forecasting/output/swe_predicted_2023-1...\n7  2023-12-17  ../swe_forecasting/output/swe_predicted_2023-1...\n8  2023-12-20  ../swe_forecasting/output/swe_predicted_2023-1...\n9  2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n10 2023-12-08  ../swe_forecasting/output/swe_predicted_2023-1...\n11 2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n12 2023-12-26  ../swe_forecasting/output/swe_predicted_2023-1...\n13 2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n14 2023-12-29  ../swe_forecasting/output/swe_predicted_2023-1...\n15 2023-12-22  ../swe_forecasting/output/swe_predicted_2023-1...\n16 2023-12-30  ../swe_forecasting/output/swe_predicted_2023-1...\n17 2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n18 2023-12-01  ../swe_forecasting/output/swe_predicted_2023-1...\n19 2023-12-07  ../swe_forecasting/output/swe_predicted_2023-1...\n20 2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n21 2023-12-28  ../swe_forecasting/output/swe_predicted_2023-1...\n22 2023-12-15  ../swe_forecasting/output/swe_predicted_2023-1...\n23 2023-12-16  ../swe_forecasting/output/swe_predicted_2023-1...\n24 2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n25 2023-06-11  ../swe_forecasting/output/swe_predicted_2023-0...\n26 2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n27 2023-12-14  ../swe_forecasting/output/swe_predicted_2023-1...\n28 2023-12-06  ../swe_forecasting/output/swe_predicted_2023-1...\n29 2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n30 2023-12-23  ../swe_forecasting/output/swe_predicted_2023-1...\n31 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n32 2023-12-04  ../swe_forecasting/output/swe_predicted_2023-1...\n33 2023-12-02  ../swe_forecasting/output/swe_predicted_2023-1...\n34 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n35 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n36 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n37 2023-11-30  ../swe_forecasting/output/swe_predicted_2023-1...\n38 2023-12-19  ../swe_forecasting/output/swe_predicted_2023-1...\n39 2023-12-03  ../swe_forecasting/output/swe_predicted_2023-1...\n40 2023-12-09  ../swe_forecasting/output/swe_predicted_2023-1...\n41 2023-12-05  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1704552236370,
  "history_end_time" : 1704552237307,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "pk0xfwvr3bu",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2024-01-04\ntest start date:  2023-12-30\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-12-30.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-12-30.png\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-21.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-27.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-13.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-18.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-17.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-08.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-29.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-22.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-30.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-01.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-07.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-28.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-15.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-16.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-14.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-06.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-04.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-02.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-11-30.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-19.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-09.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-05.tif.map already exists\n/home/chetana/gw-workspace/pk0xfwvr3bu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pk0xfwvr3bu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pk0xfwvr3bu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pk0xfwvr3bu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pk0xfwvr3bu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pk0xfwvr3bu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pk0xfwvr3bu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pk0xfwvr3bu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pk0xfwvr3bu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pk0xfwvr3bu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pk0xfwvr3bu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pk0xfwvr3bu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pk0xfwvr3bu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pk0xfwvr3bu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pk0xfwvr3bu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pk0xfwvr3bu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pk0xfwvr3bu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pk0xfwvr3bu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pk0xfwvr3bu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pk0xfwvr3bu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pk0xfwvr3bu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pk0xfwvr3bu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pk0xfwvr3bu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pk0xfwvr3bu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pk0xfwvr3bu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pk0xfwvr3bu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pk0xfwvr3bu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pk0xfwvr3bu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pk0xfwvr3bu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pk0xfwvr3bu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pk0xfwvr3bu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pk0xfwvr3bu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pk0xfwvr3bu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pk0xfwvr3bu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pk0xfwvr3bu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pk0xfwvr3bu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pk0xfwvr3bu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pk0xfwvr3bu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pk0xfwvr3bu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pk0xfwvr3bu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pk0xfwvr3bu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pk0xfwvr3bu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2023-12-21  ../swe_forecasting/output/swe_predicted_2023-1...\n1  2023-12-11  ../swe_forecasting/output/swe_predicted_2023-1...\n2  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n3  2023-12-27  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n5  2023-12-13  ../swe_forecasting/output/swe_predicted_2023-1...\n6  2023-12-18  ../swe_forecasting/output/swe_predicted_2023-1...\n7  2023-12-17  ../swe_forecasting/output/swe_predicted_2023-1...\n8  2023-12-20  ../swe_forecasting/output/swe_predicted_2023-1...\n9  2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n10 2023-12-08  ../swe_forecasting/output/swe_predicted_2023-1...\n11 2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n12 2023-12-26  ../swe_forecasting/output/swe_predicted_2023-1...\n13 2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n14 2023-12-29  ../swe_forecasting/output/swe_predicted_2023-1...\n15 2023-12-22  ../swe_forecasting/output/swe_predicted_2023-1...\n16 2023-12-30  ../swe_forecasting/output/swe_predicted_2023-1...\n17 2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n18 2023-12-01  ../swe_forecasting/output/swe_predicted_2023-1...\n19 2023-12-07  ../swe_forecasting/output/swe_predicted_2023-1...\n20 2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n21 2023-12-28  ../swe_forecasting/output/swe_predicted_2023-1...\n22 2023-12-15  ../swe_forecasting/output/swe_predicted_2023-1...\n23 2023-12-16  ../swe_forecasting/output/swe_predicted_2023-1...\n24 2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n25 2023-06-11  ../swe_forecasting/output/swe_predicted_2023-0...\n26 2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n27 2023-12-14  ../swe_forecasting/output/swe_predicted_2023-1...\n28 2023-12-06  ../swe_forecasting/output/swe_predicted_2023-1...\n29 2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n30 2023-12-23  ../swe_forecasting/output/swe_predicted_2023-1...\n31 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n32 2023-12-04  ../swe_forecasting/output/swe_predicted_2023-1...\n33 2023-12-02  ../swe_forecasting/output/swe_predicted_2023-1...\n34 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n35 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n36 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n37 2023-11-30  ../swe_forecasting/output/swe_predicted_2023-1...\n38 2023-12-19  ../swe_forecasting/output/swe_predicted_2023-1...\n39 2023-12-03  ../swe_forecasting/output/swe_predicted_2023-1...\n40 2023-12-09  ../swe_forecasting/output/swe_predicted_2023-1...\n41 2023-12-05  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1704330452945,
  "history_end_time" : 1704330453816,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "9rgnhisok63",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2024-01-04\ntest start date:  2023-12-30\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-12-30.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-12-30.png\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-30.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-30.tif\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-21.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-27.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-13.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-18.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-17.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-08.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-29.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-22.tif.map already exists\nDate: 2023-12-30\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-30.tif.map\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-01.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-07.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-28.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-15.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-16.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-14.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-06.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-04.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-02.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-11-30.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-19.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-09.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-05.tif.map already exists\n/home/chetana/gw-workspace/9rgnhisok63/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9rgnhisok63/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9rgnhisok63/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9rgnhisok63/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9rgnhisok63/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9rgnhisok63/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9rgnhisok63/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9rgnhisok63/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9rgnhisok63/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9rgnhisok63/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9rgnhisok63/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9rgnhisok63/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9rgnhisok63/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9rgnhisok63/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9rgnhisok63/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9rgnhisok63/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9rgnhisok63/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9rgnhisok63/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9rgnhisok63/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9rgnhisok63/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9rgnhisok63/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9rgnhisok63/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9rgnhisok63/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9rgnhisok63/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9rgnhisok63/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9rgnhisok63/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9rgnhisok63/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9rgnhisok63/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9rgnhisok63/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9rgnhisok63/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9rgnhisok63/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9rgnhisok63/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9rgnhisok63/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9rgnhisok63/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9rgnhisok63/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9rgnhisok63/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9rgnhisok63/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9rgnhisok63/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9rgnhisok63/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9rgnhisok63/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9rgnhisok63/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9rgnhisok63/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2023-12-21  ../swe_forecasting/output/swe_predicted_2023-1...\n1  2023-12-11  ../swe_forecasting/output/swe_predicted_2023-1...\n2  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n3  2023-12-27  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n5  2023-12-13  ../swe_forecasting/output/swe_predicted_2023-1...\n6  2023-12-18  ../swe_forecasting/output/swe_predicted_2023-1...\n7  2023-12-17  ../swe_forecasting/output/swe_predicted_2023-1...\n8  2023-12-20  ../swe_forecasting/output/swe_predicted_2023-1...\n9  2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n10 2023-12-08  ../swe_forecasting/output/swe_predicted_2023-1...\n11 2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n12 2023-12-26  ../swe_forecasting/output/swe_predicted_2023-1...\n13 2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n14 2023-12-29  ../swe_forecasting/output/swe_predicted_2023-1...\n15 2023-12-22  ../swe_forecasting/output/swe_predicted_2023-1...\n16 2023-12-30  ../swe_forecasting/output/swe_predicted_2023-1...\n17 2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n18 2023-12-01  ../swe_forecasting/output/swe_predicted_2023-1...\n19 2023-12-07  ../swe_forecasting/output/swe_predicted_2023-1...\n20 2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n21 2023-12-28  ../swe_forecasting/output/swe_predicted_2023-1...\n22 2023-12-15  ../swe_forecasting/output/swe_predicted_2023-1...\n23 2023-12-16  ../swe_forecasting/output/swe_predicted_2023-1...\n24 2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n25 2023-06-11  ../swe_forecasting/output/swe_predicted_2023-0...\n26 2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n27 2023-12-14  ../swe_forecasting/output/swe_predicted_2023-1...\n28 2023-12-06  ../swe_forecasting/output/swe_predicted_2023-1...\n29 2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n30 2023-12-23  ../swe_forecasting/output/swe_predicted_2023-1...\n31 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n32 2023-12-04  ../swe_forecasting/output/swe_predicted_2023-1...\n33 2023-12-02  ../swe_forecasting/output/swe_predicted_2023-1...\n34 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n35 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n36 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n37 2023-11-30  ../swe_forecasting/output/swe_predicted_2023-1...\n38 2023-12-19  ../swe_forecasting/output/swe_predicted_2023-1...\n39 2023-12-03  ../swe_forecasting/output/swe_predicted_2023-1...\n40 2023-12-09  ../swe_forecasting/output/swe_predicted_2023-1...\n41 2023-12-05  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1704329869955,
  "history_end_time" : 1704329870842,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "dv0momihiae",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2024-01-03\ntest start date:  2023-12-29\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-12-29.png\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-29.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-29.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-12-29.png\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-21.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-27.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-13.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-18.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-17.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-08.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-29.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-22.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-01.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-07.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-28.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-15.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-16.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-14.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-06.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-04.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-02.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-11-30.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-19.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-09.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-05.tif.map already exists\n/home/chetana/gw-workspace/dv0momihiae/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/dv0momihiae/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/dv0momihiae/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/dv0momihiae/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/dv0momihiae/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/dv0momihiae/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/dv0momihiae/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/dv0momihiae/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/dv0momihiae/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/dv0momihiae/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/dv0momihiae/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/dv0momihiae/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/dv0momihiae/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/dv0momihiae/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/dv0momihiae/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/dv0momihiae/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/dv0momihiae/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/dv0momihiae/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/dv0momihiae/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/dv0momihiae/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/dv0momihiae/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/dv0momihiae/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/dv0momihiae/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/dv0momihiae/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/dv0momihiae/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/dv0momihiae/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/dv0momihiae/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/dv0momihiae/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/dv0momihiae/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/dv0momihiae/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/dv0momihiae/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/dv0momihiae/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/dv0momihiae/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/dv0momihiae/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/dv0momihiae/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/dv0momihiae/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/dv0momihiae/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/dv0momihiae/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/dv0momihiae/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/dv0momihiae/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/dv0momihiae/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2023-12-21  ../swe_forecasting/output/swe_predicted_2023-1...\n1  2023-12-11  ../swe_forecasting/output/swe_predicted_2023-1...\n2  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n3  2023-12-27  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n5  2023-12-13  ../swe_forecasting/output/swe_predicted_2023-1...\n6  2023-12-18  ../swe_forecasting/output/swe_predicted_2023-1...\n7  2023-12-17  ../swe_forecasting/output/swe_predicted_2023-1...\n8  2023-12-20  ../swe_forecasting/output/swe_predicted_2023-1...\n9  2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n10 2023-12-08  ../swe_forecasting/output/swe_predicted_2023-1...\n11 2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n12 2023-12-26  ../swe_forecasting/output/swe_predicted_2023-1...\n13 2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n14 2023-12-29  ../swe_forecasting/output/swe_predicted_2023-1...\n15 2023-12-22  ../swe_forecasting/output/swe_predicted_2023-1...\n16 2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n17 2023-12-01  ../swe_forecasting/output/swe_predicted_2023-1...\n18 2023-12-07  ../swe_forecasting/output/swe_predicted_2023-1...\n19 2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n20 2023-12-28  ../swe_forecasting/output/swe_predicted_2023-1...\n21 2023-12-15  ../swe_forecasting/output/swe_predicted_2023-1...\n22 2023-12-16  ../swe_forecasting/output/swe_predicted_2023-1...\n23 2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n24 2023-06-11  ../swe_forecasting/output/swe_predicted_2023-0...\n25 2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n26 2023-12-14  ../swe_forecasting/output/swe_predicted_2023-1...\n27 2023-12-06  ../swe_forecasting/output/swe_predicted_2023-1...\n28 2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n29 2023-12-23  ../swe_forecasting/output/swe_predicted_2023-1...\n30 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n31 2023-12-04  ../swe_forecasting/output/swe_predicted_2023-1...\n32 2023-12-02  ../swe_forecasting/output/swe_predicted_2023-1...\n33 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n34 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n35 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n36 2023-11-30  ../swe_forecasting/output/swe_predicted_2023-1...\n37 2023-12-19  ../swe_forecasting/output/swe_predicted_2023-1...\n38 2023-12-03  ../swe_forecasting/output/swe_predicted_2023-1...\n39 2023-12-09  ../swe_forecasting/output/swe_predicted_2023-1...\n40 2023-12-05  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1704254872946,
  "history_end_time" : 1704254873970,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "lkcmnjt6ke2",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2024-01-02\ntest start date:  2023-12-29\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-12-29.png\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-29.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-29.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-12-29.png\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-21.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-27.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-13.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-18.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-17.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-08.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-29.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-22.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-01.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-07.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-28.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-15.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-16.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-14.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-06.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-04.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-02.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-11-30.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-19.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-09.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-05.tif.map already exists\n/home/chetana/gw-workspace/lkcmnjt6ke2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/lkcmnjt6ke2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/lkcmnjt6ke2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/lkcmnjt6ke2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/lkcmnjt6ke2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/lkcmnjt6ke2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/lkcmnjt6ke2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/lkcmnjt6ke2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/lkcmnjt6ke2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/lkcmnjt6ke2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/lkcmnjt6ke2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/lkcmnjt6ke2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/lkcmnjt6ke2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/lkcmnjt6ke2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/lkcmnjt6ke2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/lkcmnjt6ke2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/lkcmnjt6ke2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/lkcmnjt6ke2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/lkcmnjt6ke2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/lkcmnjt6ke2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/lkcmnjt6ke2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/lkcmnjt6ke2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/lkcmnjt6ke2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/lkcmnjt6ke2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/lkcmnjt6ke2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/lkcmnjt6ke2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/lkcmnjt6ke2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/lkcmnjt6ke2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/lkcmnjt6ke2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/lkcmnjt6ke2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/lkcmnjt6ke2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/lkcmnjt6ke2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/lkcmnjt6ke2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/lkcmnjt6ke2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/lkcmnjt6ke2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/lkcmnjt6ke2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/lkcmnjt6ke2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/lkcmnjt6ke2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/lkcmnjt6ke2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/lkcmnjt6ke2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/lkcmnjt6ke2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2023-12-21  ../swe_forecasting/output/swe_predicted_2023-1...\n1  2023-12-11  ../swe_forecasting/output/swe_predicted_2023-1...\n2  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n3  2023-12-27  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n5  2023-12-13  ../swe_forecasting/output/swe_predicted_2023-1...\n6  2023-12-18  ../swe_forecasting/output/swe_predicted_2023-1...\n7  2023-12-17  ../swe_forecasting/output/swe_predicted_2023-1...\n8  2023-12-20  ../swe_forecasting/output/swe_predicted_2023-1...\n9  2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n10 2023-12-08  ../swe_forecasting/output/swe_predicted_2023-1...\n11 2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n12 2023-12-26  ../swe_forecasting/output/swe_predicted_2023-1...\n13 2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n14 2023-12-29  ../swe_forecasting/output/swe_predicted_2023-1...\n15 2023-12-22  ../swe_forecasting/output/swe_predicted_2023-1...\n16 2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n17 2023-12-01  ../swe_forecasting/output/swe_predicted_2023-1...\n18 2023-12-07  ../swe_forecasting/output/swe_predicted_2023-1...\n19 2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n20 2023-12-28  ../swe_forecasting/output/swe_predicted_2023-1...\n21 2023-12-15  ../swe_forecasting/output/swe_predicted_2023-1...\n22 2023-12-16  ../swe_forecasting/output/swe_predicted_2023-1...\n23 2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n24 2023-06-11  ../swe_forecasting/output/swe_predicted_2023-0...\n25 2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n26 2023-12-14  ../swe_forecasting/output/swe_predicted_2023-1...\n27 2023-12-06  ../swe_forecasting/output/swe_predicted_2023-1...\n28 2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n29 2023-12-23  ../swe_forecasting/output/swe_predicted_2023-1...\n30 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n31 2023-12-04  ../swe_forecasting/output/swe_predicted_2023-1...\n32 2023-12-02  ../swe_forecasting/output/swe_predicted_2023-1...\n33 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n34 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n35 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n36 2023-11-30  ../swe_forecasting/output/swe_predicted_2023-1...\n37 2023-12-19  ../swe_forecasting/output/swe_predicted_2023-1...\n38 2023-12-03  ../swe_forecasting/output/swe_predicted_2023-1...\n39 2023-12-09  ../swe_forecasting/output/swe_predicted_2023-1...\n40 2023-12-05  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1704209524399,
  "history_end_time" : 1704209525270,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "fglbmo3hjrx",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2024-01-02\ntest start date:  2023-12-28\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-12-28.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-12-28.png\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-28.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-28.tif\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-21.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-27.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-13.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-18.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-17.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-08.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-29.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-22.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-01.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-07.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-28.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-15.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-16.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-14.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-06.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-04.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-02.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-11-30.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-19.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-09.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-05.tif.map already exists\n/home/chetana/gw-workspace/fglbmo3hjrx/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fglbmo3hjrx/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fglbmo3hjrx/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fglbmo3hjrx/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fglbmo3hjrx/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fglbmo3hjrx/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fglbmo3hjrx/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fglbmo3hjrx/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fglbmo3hjrx/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fglbmo3hjrx/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fglbmo3hjrx/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fglbmo3hjrx/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fglbmo3hjrx/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fglbmo3hjrx/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fglbmo3hjrx/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fglbmo3hjrx/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fglbmo3hjrx/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fglbmo3hjrx/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fglbmo3hjrx/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fglbmo3hjrx/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fglbmo3hjrx/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fglbmo3hjrx/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fglbmo3hjrx/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fglbmo3hjrx/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fglbmo3hjrx/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fglbmo3hjrx/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fglbmo3hjrx/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fglbmo3hjrx/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fglbmo3hjrx/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fglbmo3hjrx/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fglbmo3hjrx/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fglbmo3hjrx/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fglbmo3hjrx/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fglbmo3hjrx/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fglbmo3hjrx/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fglbmo3hjrx/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fglbmo3hjrx/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fglbmo3hjrx/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fglbmo3hjrx/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fglbmo3hjrx/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fglbmo3hjrx/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2023-12-21  ../swe_forecasting/output/swe_predicted_2023-1...\n1  2023-12-11  ../swe_forecasting/output/swe_predicted_2023-1...\n2  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n3  2023-12-27  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n5  2023-12-13  ../swe_forecasting/output/swe_predicted_2023-1...\n6  2023-12-18  ../swe_forecasting/output/swe_predicted_2023-1...\n7  2023-12-17  ../swe_forecasting/output/swe_predicted_2023-1...\n8  2023-12-20  ../swe_forecasting/output/swe_predicted_2023-1...\n9  2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n10 2023-12-08  ../swe_forecasting/output/swe_predicted_2023-1...\n11 2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n12 2023-12-26  ../swe_forecasting/output/swe_predicted_2023-1...\n13 2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n14 2023-12-29  ../swe_forecasting/output/swe_predicted_2023-1...\n15 2023-12-22  ../swe_forecasting/output/swe_predicted_2023-1...\n16 2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n17 2023-12-01  ../swe_forecasting/output/swe_predicted_2023-1...\n18 2023-12-07  ../swe_forecasting/output/swe_predicted_2023-1...\n19 2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n20 2023-12-28  ../swe_forecasting/output/swe_predicted_2023-1...\n21 2023-12-15  ../swe_forecasting/output/swe_predicted_2023-1...\n22 2023-12-16  ../swe_forecasting/output/swe_predicted_2023-1...\n23 2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n24 2023-06-11  ../swe_forecasting/output/swe_predicted_2023-0...\n25 2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n26 2023-12-14  ../swe_forecasting/output/swe_predicted_2023-1...\n27 2023-12-06  ../swe_forecasting/output/swe_predicted_2023-1...\n28 2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n29 2023-12-23  ../swe_forecasting/output/swe_predicted_2023-1...\n30 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n31 2023-12-04  ../swe_forecasting/output/swe_predicted_2023-1...\n32 2023-12-02  ../swe_forecasting/output/swe_predicted_2023-1...\n33 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n34 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n35 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n36 2023-11-30  ../swe_forecasting/output/swe_predicted_2023-1...\n37 2023-12-19  ../swe_forecasting/output/swe_predicted_2023-1...\n38 2023-12-03  ../swe_forecasting/output/swe_predicted_2023-1...\n39 2023-12-09  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1704207768603,
  "history_end_time" : 1704207771048,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "x2dxz0wrfnw",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2024-01-02\ntest start date:  2023-12-28\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-12-28.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-12-28.png\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-28.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-28.tif\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-21.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-27.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-13.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-18.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-17.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-08.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-29.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-22.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-01.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-07.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-28.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-15.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-16.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-14.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-06.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-04.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-02.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-11-30.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-19.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-09.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-05.tif.map already exists\n/home/chetana/gw-workspace/x2dxz0wrfnw/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/x2dxz0wrfnw/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/x2dxz0wrfnw/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/x2dxz0wrfnw/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/x2dxz0wrfnw/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/x2dxz0wrfnw/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/x2dxz0wrfnw/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/x2dxz0wrfnw/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/x2dxz0wrfnw/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/x2dxz0wrfnw/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/x2dxz0wrfnw/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/x2dxz0wrfnw/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/x2dxz0wrfnw/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/x2dxz0wrfnw/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/x2dxz0wrfnw/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/x2dxz0wrfnw/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/x2dxz0wrfnw/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/x2dxz0wrfnw/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/x2dxz0wrfnw/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/x2dxz0wrfnw/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/x2dxz0wrfnw/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/x2dxz0wrfnw/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/x2dxz0wrfnw/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/x2dxz0wrfnw/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/x2dxz0wrfnw/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/x2dxz0wrfnw/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/x2dxz0wrfnw/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/x2dxz0wrfnw/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/x2dxz0wrfnw/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/x2dxz0wrfnw/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/x2dxz0wrfnw/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/x2dxz0wrfnw/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/x2dxz0wrfnw/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/x2dxz0wrfnw/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/x2dxz0wrfnw/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/x2dxz0wrfnw/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/x2dxz0wrfnw/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/x2dxz0wrfnw/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/x2dxz0wrfnw/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/x2dxz0wrfnw/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/x2dxz0wrfnw/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2023-12-21  ../swe_forecasting/output/swe_predicted_2023-1...\n1  2023-12-11  ../swe_forecasting/output/swe_predicted_2023-1...\n2  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n3  2023-12-27  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n5  2023-12-13  ../swe_forecasting/output/swe_predicted_2023-1...\n6  2023-12-18  ../swe_forecasting/output/swe_predicted_2023-1...\n7  2023-12-17  ../swe_forecasting/output/swe_predicted_2023-1...\n8  2023-12-20  ../swe_forecasting/output/swe_predicted_2023-1...\n9  2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n10 2023-12-08  ../swe_forecasting/output/swe_predicted_2023-1...\n11 2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n12 2023-12-26  ../swe_forecasting/output/swe_predicted_2023-1...\n13 2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n14 2023-12-29  ../swe_forecasting/output/swe_predicted_2023-1...\n15 2023-12-22  ../swe_forecasting/output/swe_predicted_2023-1...\n16 2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n17 2023-12-01  ../swe_forecasting/output/swe_predicted_2023-1...\n18 2023-12-07  ../swe_forecasting/output/swe_predicted_2023-1...\n19 2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n20 2023-12-28  ../swe_forecasting/output/swe_predicted_2023-1...\n21 2023-12-15  ../swe_forecasting/output/swe_predicted_2023-1...\n22 2023-12-16  ../swe_forecasting/output/swe_predicted_2023-1...\n23 2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n24 2023-06-11  ../swe_forecasting/output/swe_predicted_2023-0...\n25 2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n26 2023-12-14  ../swe_forecasting/output/swe_predicted_2023-1...\n27 2023-12-06  ../swe_forecasting/output/swe_predicted_2023-1...\n28 2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n29 2023-12-23  ../swe_forecasting/output/swe_predicted_2023-1...\n30 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n31 2023-12-04  ../swe_forecasting/output/swe_predicted_2023-1...\n32 2023-12-02  ../swe_forecasting/output/swe_predicted_2023-1...\n33 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n34 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n35 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n36 2023-11-30  ../swe_forecasting/output/swe_predicted_2023-1...\n37 2023-12-19  ../swe_forecasting/output/swe_predicted_2023-1...\n38 2023-12-03  ../swe_forecasting/output/swe_predicted_2023-1...\n39 2023-12-09  ../swe_forecasting/output/swe_predicted_2023-1...\n40 2023-12-05  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1704206273610,
  "history_end_time" : 1704206274524,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "h45zgz2pfas",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2024-01-01\n2023-12-29\ntest start date:  2023-12-29\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-12-29.png\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-29.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-29.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-12-29.png\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-21.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-27.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-13.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-18.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-17.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-08.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\nDate: 2023-12-29\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-29.tif.map\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-22.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-01.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-07.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-28.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-15.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-16.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-14.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-06.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-04.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-02.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-11-30.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-19.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-09.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-05.tif.map already exists\n/home/chetana/gw-workspace/h45zgz2pfas/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/h45zgz2pfas/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/h45zgz2pfas/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/h45zgz2pfas/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/h45zgz2pfas/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/h45zgz2pfas/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/h45zgz2pfas/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/h45zgz2pfas/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/h45zgz2pfas/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/h45zgz2pfas/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/h45zgz2pfas/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/h45zgz2pfas/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/h45zgz2pfas/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/h45zgz2pfas/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/h45zgz2pfas/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/h45zgz2pfas/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/h45zgz2pfas/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/h45zgz2pfas/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/h45zgz2pfas/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/h45zgz2pfas/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/h45zgz2pfas/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/h45zgz2pfas/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/h45zgz2pfas/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/h45zgz2pfas/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/h45zgz2pfas/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/h45zgz2pfas/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/h45zgz2pfas/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/h45zgz2pfas/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/h45zgz2pfas/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/h45zgz2pfas/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/h45zgz2pfas/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/h45zgz2pfas/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/h45zgz2pfas/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/h45zgz2pfas/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/h45zgz2pfas/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/h45zgz2pfas/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/h45zgz2pfas/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/h45zgz2pfas/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/h45zgz2pfas/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/h45zgz2pfas/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/h45zgz2pfas/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2023-12-21  ../swe_forecasting/output/swe_predicted_2023-1...\n1  2023-12-11  ../swe_forecasting/output/swe_predicted_2023-1...\n2  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n3  2023-12-27  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n5  2023-12-13  ../swe_forecasting/output/swe_predicted_2023-1...\n6  2023-12-18  ../swe_forecasting/output/swe_predicted_2023-1...\n7  2023-12-17  ../swe_forecasting/output/swe_predicted_2023-1...\n8  2023-12-20  ../swe_forecasting/output/swe_predicted_2023-1...\n9  2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n10 2023-12-08  ../swe_forecasting/output/swe_predicted_2023-1...\n11 2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n12 2023-12-26  ../swe_forecasting/output/swe_predicted_2023-1...\n13 2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n14 2023-12-29  ../swe_forecasting/output/swe_predicted_2023-1...\n15 2023-12-22  ../swe_forecasting/output/swe_predicted_2023-1...\n16 2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n17 2023-12-01  ../swe_forecasting/output/swe_predicted_2023-1...\n18 2023-12-07  ../swe_forecasting/output/swe_predicted_2023-1...\n19 2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n20 2023-12-28  ../swe_forecasting/output/swe_predicted_2023-1...\n21 2023-12-15  ../swe_forecasting/output/swe_predicted_2023-1...\n22 2023-12-16  ../swe_forecasting/output/swe_predicted_2023-1...\n23 2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n24 2023-06-11  ../swe_forecasting/output/swe_predicted_2023-0...\n25 2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n26 2023-12-14  ../swe_forecasting/output/swe_predicted_2023-1...\n27 2023-12-06  ../swe_forecasting/output/swe_predicted_2023-1...\n28 2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n29 2023-12-23  ../swe_forecasting/output/swe_predicted_2023-1...\n30 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n31 2023-12-04  ../swe_forecasting/output/swe_predicted_2023-1...\n32 2023-12-02  ../swe_forecasting/output/swe_predicted_2023-1...\n33 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n34 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n35 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n36 2023-11-30  ../swe_forecasting/output/swe_predicted_2023-1...\n37 2023-12-19  ../swe_forecasting/output/swe_predicted_2023-1...\n38 2023-12-03  ../swe_forecasting/output/swe_predicted_2023-1...\n39 2023-12-09  ../swe_forecasting/output/swe_predicted_2023-1...\n40 2023-12-05  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1704082209360,
  "history_end_time" : 1704082210365,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "d98z5ghxhph",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2023-12-31\n2023-12-28\ntest start date:  2023-12-28\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-12-28.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-12-28.png\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-28.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-28.tif\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-21.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-27.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-13.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-18.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-17.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-08.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-22.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-01.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-07.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\nDate: 2023-12-28\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-28.tif.map\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-15.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-16.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-14.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-06.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-04.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-02.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-11-30.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-19.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-09.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-05.tif.map already exists\n/home/chetana/gw-workspace/d98z5ghxhph/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/d98z5ghxhph/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/d98z5ghxhph/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/d98z5ghxhph/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/d98z5ghxhph/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/d98z5ghxhph/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/d98z5ghxhph/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/d98z5ghxhph/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/d98z5ghxhph/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/d98z5ghxhph/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/d98z5ghxhph/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/d98z5ghxhph/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/d98z5ghxhph/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/d98z5ghxhph/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/d98z5ghxhph/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/d98z5ghxhph/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/d98z5ghxhph/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/d98z5ghxhph/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/d98z5ghxhph/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/d98z5ghxhph/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/d98z5ghxhph/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/d98z5ghxhph/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/d98z5ghxhph/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/d98z5ghxhph/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/d98z5ghxhph/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/d98z5ghxhph/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/d98z5ghxhph/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/d98z5ghxhph/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/d98z5ghxhph/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/d98z5ghxhph/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/d98z5ghxhph/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/d98z5ghxhph/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/d98z5ghxhph/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/d98z5ghxhph/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/d98z5ghxhph/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/d98z5ghxhph/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/d98z5ghxhph/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/d98z5ghxhph/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/d98z5ghxhph/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/d98z5ghxhph/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2023-12-21  ../swe_forecasting/output/swe_predicted_2023-1...\n1  2023-12-11  ../swe_forecasting/output/swe_predicted_2023-1...\n2  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n3  2023-12-27  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n5  2023-12-13  ../swe_forecasting/output/swe_predicted_2023-1...\n6  2023-12-18  ../swe_forecasting/output/swe_predicted_2023-1...\n7  2023-12-17  ../swe_forecasting/output/swe_predicted_2023-1...\n8  2023-12-20  ../swe_forecasting/output/swe_predicted_2023-1...\n9  2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n10 2023-12-08  ../swe_forecasting/output/swe_predicted_2023-1...\n11 2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n12 2023-12-26  ../swe_forecasting/output/swe_predicted_2023-1...\n13 2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n14 2023-12-22  ../swe_forecasting/output/swe_predicted_2023-1...\n15 2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n16 2023-12-01  ../swe_forecasting/output/swe_predicted_2023-1...\n17 2023-12-07  ../swe_forecasting/output/swe_predicted_2023-1...\n18 2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n19 2023-12-28  ../swe_forecasting/output/swe_predicted_2023-1...\n20 2023-12-15  ../swe_forecasting/output/swe_predicted_2023-1...\n21 2023-12-16  ../swe_forecasting/output/swe_predicted_2023-1...\n22 2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n23 2023-06-11  ../swe_forecasting/output/swe_predicted_2023-0...\n24 2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n25 2023-12-14  ../swe_forecasting/output/swe_predicted_2023-1...\n26 2023-12-06  ../swe_forecasting/output/swe_predicted_2023-1...\n27 2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n28 2023-12-23  ../swe_forecasting/output/swe_predicted_2023-1...\n29 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n30 2023-12-04  ../swe_forecasting/output/swe_predicted_2023-1...\n31 2023-12-02  ../swe_forecasting/output/swe_predicted_2023-1...\n32 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n33 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n34 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n35 2023-11-30  ../swe_forecasting/output/swe_predicted_2023-1...\n36 2023-12-19  ../swe_forecasting/output/swe_predicted_2023-1...\n37 2023-12-03  ../swe_forecasting/output/swe_predicted_2023-1...\n38 2023-12-09  ../swe_forecasting/output/swe_predicted_2023-1...\n39 2023-12-05  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1703995972953,
  "history_end_time" : 1703995974060,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "1qc89bdedhl",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2023-12-30\ntest start date:  2023-11-30\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-11-30.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-11-30.png\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-11-30.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-11-30.tif\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-21.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-27.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-13.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-18.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-17.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-08.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-22.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-01.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-07.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-15.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-16.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-14.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-06.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-04.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-02.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\nDate: 2023-11-30\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-30.tif.map\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-19.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-09.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-05.tif.map already exists\n/home/chetana/gw-workspace/1qc89bdedhl/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1qc89bdedhl/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1qc89bdedhl/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1qc89bdedhl/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1qc89bdedhl/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1qc89bdedhl/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1qc89bdedhl/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1qc89bdedhl/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1qc89bdedhl/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1qc89bdedhl/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1qc89bdedhl/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1qc89bdedhl/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1qc89bdedhl/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1qc89bdedhl/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1qc89bdedhl/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1qc89bdedhl/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1qc89bdedhl/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1qc89bdedhl/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1qc89bdedhl/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1qc89bdedhl/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1qc89bdedhl/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1qc89bdedhl/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1qc89bdedhl/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1qc89bdedhl/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1qc89bdedhl/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1qc89bdedhl/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1qc89bdedhl/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1qc89bdedhl/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1qc89bdedhl/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1qc89bdedhl/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1qc89bdedhl/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1qc89bdedhl/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1qc89bdedhl/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1qc89bdedhl/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1qc89bdedhl/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1qc89bdedhl/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1qc89bdedhl/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1qc89bdedhl/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1qc89bdedhl/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2023-12-21  ../swe_forecasting/output/swe_predicted_2023-1...\n1  2023-12-11  ../swe_forecasting/output/swe_predicted_2023-1...\n2  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n3  2023-12-27  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n5  2023-12-13  ../swe_forecasting/output/swe_predicted_2023-1...\n6  2023-12-18  ../swe_forecasting/output/swe_predicted_2023-1...\n7  2023-12-17  ../swe_forecasting/output/swe_predicted_2023-1...\n8  2023-12-20  ../swe_forecasting/output/swe_predicted_2023-1...\n9  2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n10 2023-12-08  ../swe_forecasting/output/swe_predicted_2023-1...\n11 2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n12 2023-12-26  ../swe_forecasting/output/swe_predicted_2023-1...\n13 2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n14 2023-12-22  ../swe_forecasting/output/swe_predicted_2023-1...\n15 2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n16 2023-12-01  ../swe_forecasting/output/swe_predicted_2023-1...\n17 2023-12-07  ../swe_forecasting/output/swe_predicted_2023-1...\n18 2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n19 2023-12-15  ../swe_forecasting/output/swe_predicted_2023-1...\n20 2023-12-16  ../swe_forecasting/output/swe_predicted_2023-1...\n21 2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n22 2023-06-11  ../swe_forecasting/output/swe_predicted_2023-0...\n23 2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n24 2023-12-14  ../swe_forecasting/output/swe_predicted_2023-1...\n25 2023-12-06  ../swe_forecasting/output/swe_predicted_2023-1...\n26 2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n27 2023-12-23  ../swe_forecasting/output/swe_predicted_2023-1...\n28 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n29 2023-12-04  ../swe_forecasting/output/swe_predicted_2023-1...\n30 2023-12-02  ../swe_forecasting/output/swe_predicted_2023-1...\n31 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n32 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n33 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n34 2023-11-30  ../swe_forecasting/output/swe_predicted_2023-1...\n35 2023-12-19  ../swe_forecasting/output/swe_predicted_2023-1...\n36 2023-12-03  ../swe_forecasting/output/swe_predicted_2023-1...\n37 2023-12-09  ../swe_forecasting/output/swe_predicted_2023-1...\n38 2023-12-05  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1703963315243,
  "history_end_time" : 1703963316139,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "l3w70jak2vk",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2023-12-30\ntest start date:  2023-12-01\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-12-01.png\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-01.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-01.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-12-01.png\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-21.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-27.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-13.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-18.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-17.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-08.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-22.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\nDate: 2023-12-01\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-01.tif.map\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-07.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-15.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-16.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-14.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-06.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-04.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-02.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-19.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-09.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-05.tif.map already exists\n/home/chetana/gw-workspace/l3w70jak2vk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l3w70jak2vk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l3w70jak2vk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l3w70jak2vk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l3w70jak2vk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l3w70jak2vk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l3w70jak2vk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l3w70jak2vk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l3w70jak2vk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l3w70jak2vk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l3w70jak2vk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l3w70jak2vk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l3w70jak2vk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l3w70jak2vk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l3w70jak2vk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l3w70jak2vk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l3w70jak2vk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l3w70jak2vk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l3w70jak2vk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l3w70jak2vk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l3w70jak2vk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l3w70jak2vk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l3w70jak2vk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l3w70jak2vk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l3w70jak2vk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l3w70jak2vk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l3w70jak2vk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l3w70jak2vk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l3w70jak2vk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l3w70jak2vk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l3w70jak2vk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l3w70jak2vk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l3w70jak2vk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l3w70jak2vk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l3w70jak2vk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l3w70jak2vk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l3w70jak2vk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/l3w70jak2vk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2023-12-21  ../swe_forecasting/output/swe_predicted_2023-1...\n1  2023-12-11  ../swe_forecasting/output/swe_predicted_2023-1...\n2  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n3  2023-12-27  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n5  2023-12-13  ../swe_forecasting/output/swe_predicted_2023-1...\n6  2023-12-18  ../swe_forecasting/output/swe_predicted_2023-1...\n7  2023-12-17  ../swe_forecasting/output/swe_predicted_2023-1...\n8  2023-12-20  ../swe_forecasting/output/swe_predicted_2023-1...\n9  2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n10 2023-12-08  ../swe_forecasting/output/swe_predicted_2023-1...\n11 2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n12 2023-12-26  ../swe_forecasting/output/swe_predicted_2023-1...\n13 2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n14 2023-12-22  ../swe_forecasting/output/swe_predicted_2023-1...\n15 2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n16 2023-12-01  ../swe_forecasting/output/swe_predicted_2023-1...\n17 2023-12-07  ../swe_forecasting/output/swe_predicted_2023-1...\n18 2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n19 2023-12-15  ../swe_forecasting/output/swe_predicted_2023-1...\n20 2023-12-16  ../swe_forecasting/output/swe_predicted_2023-1...\n21 2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n22 2023-06-11  ../swe_forecasting/output/swe_predicted_2023-0...\n23 2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n24 2023-12-14  ../swe_forecasting/output/swe_predicted_2023-1...\n25 2023-12-06  ../swe_forecasting/output/swe_predicted_2023-1...\n26 2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n27 2023-12-23  ../swe_forecasting/output/swe_predicted_2023-1...\n28 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n29 2023-12-04  ../swe_forecasting/output/swe_predicted_2023-1...\n30 2023-12-02  ../swe_forecasting/output/swe_predicted_2023-1...\n31 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n32 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n33 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n34 2023-12-19  ../swe_forecasting/output/swe_predicted_2023-1...\n35 2023-12-03  ../swe_forecasting/output/swe_predicted_2023-1...\n36 2023-12-09  ../swe_forecasting/output/swe_predicted_2023-1...\n37 2023-12-05  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1703960704083,
  "history_end_time" : 1703960705144,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "vdqgqrc34g7",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2023-12-30\ntest start date:  2023-12-02\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-12-02.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-12-02.png\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-02.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-02.tif\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-21.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-27.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-13.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-18.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-17.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-08.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-22.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-07.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-15.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-16.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-14.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-06.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-04.tif.map already exists\nDate: 2023-12-02\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-02.tif.map\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-19.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-09.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-05.tif.map already exists\n/home/chetana/gw-workspace/vdqgqrc34g7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vdqgqrc34g7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vdqgqrc34g7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vdqgqrc34g7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vdqgqrc34g7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vdqgqrc34g7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vdqgqrc34g7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vdqgqrc34g7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vdqgqrc34g7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vdqgqrc34g7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vdqgqrc34g7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vdqgqrc34g7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vdqgqrc34g7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vdqgqrc34g7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vdqgqrc34g7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vdqgqrc34g7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vdqgqrc34g7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vdqgqrc34g7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vdqgqrc34g7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vdqgqrc34g7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vdqgqrc34g7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vdqgqrc34g7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vdqgqrc34g7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vdqgqrc34g7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vdqgqrc34g7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vdqgqrc34g7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vdqgqrc34g7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vdqgqrc34g7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vdqgqrc34g7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vdqgqrc34g7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vdqgqrc34g7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vdqgqrc34g7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vdqgqrc34g7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vdqgqrc34g7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vdqgqrc34g7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vdqgqrc34g7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vdqgqrc34g7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2023-12-21  ../swe_forecasting/output/swe_predicted_2023-1...\n1  2023-12-11  ../swe_forecasting/output/swe_predicted_2023-1...\n2  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n3  2023-12-27  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n5  2023-12-13  ../swe_forecasting/output/swe_predicted_2023-1...\n6  2023-12-18  ../swe_forecasting/output/swe_predicted_2023-1...\n7  2023-12-17  ../swe_forecasting/output/swe_predicted_2023-1...\n8  2023-12-20  ../swe_forecasting/output/swe_predicted_2023-1...\n9  2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n10 2023-12-08  ../swe_forecasting/output/swe_predicted_2023-1...\n11 2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n12 2023-12-26  ../swe_forecasting/output/swe_predicted_2023-1...\n13 2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n14 2023-12-22  ../swe_forecasting/output/swe_predicted_2023-1...\n15 2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n16 2023-12-07  ../swe_forecasting/output/swe_predicted_2023-1...\n17 2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n18 2023-12-15  ../swe_forecasting/output/swe_predicted_2023-1...\n19 2023-12-16  ../swe_forecasting/output/swe_predicted_2023-1...\n20 2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n21 2023-06-11  ../swe_forecasting/output/swe_predicted_2023-0...\n22 2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n23 2023-12-14  ../swe_forecasting/output/swe_predicted_2023-1...\n24 2023-12-06  ../swe_forecasting/output/swe_predicted_2023-1...\n25 2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n26 2023-12-23  ../swe_forecasting/output/swe_predicted_2023-1...\n27 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n28 2023-12-04  ../swe_forecasting/output/swe_predicted_2023-1...\n29 2023-12-02  ../swe_forecasting/output/swe_predicted_2023-1...\n30 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n31 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n32 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n33 2023-12-19  ../swe_forecasting/output/swe_predicted_2023-1...\n34 2023-12-03  ../swe_forecasting/output/swe_predicted_2023-1...\n35 2023-12-09  ../swe_forecasting/output/swe_predicted_2023-1...\n36 2023-12-05  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1703960180159,
  "history_end_time" : 1703960181035,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "808eppleqs1",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2023-12-30\ntest start date:  2023-12-03\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-12-03.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-12-03.png\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-03.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-03.tif\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-21.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-27.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-13.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-18.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-17.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-08.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-22.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-07.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-15.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-16.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-14.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-06.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-04.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-19.tif.map already exists\nDate: 2023-12-03\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-03.tif.map\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-09.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-05.tif.map already exists\n/home/chetana/gw-workspace/808eppleqs1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/808eppleqs1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/808eppleqs1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/808eppleqs1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/808eppleqs1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/808eppleqs1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/808eppleqs1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/808eppleqs1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/808eppleqs1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/808eppleqs1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/808eppleqs1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/808eppleqs1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/808eppleqs1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/808eppleqs1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/808eppleqs1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/808eppleqs1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/808eppleqs1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/808eppleqs1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/808eppleqs1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/808eppleqs1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/808eppleqs1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/808eppleqs1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/808eppleqs1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/808eppleqs1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/808eppleqs1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/808eppleqs1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/808eppleqs1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/808eppleqs1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/808eppleqs1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/808eppleqs1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/808eppleqs1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/808eppleqs1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/808eppleqs1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/808eppleqs1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/808eppleqs1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/808eppleqs1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2023-12-21  ../swe_forecasting/output/swe_predicted_2023-1...\n1  2023-12-11  ../swe_forecasting/output/swe_predicted_2023-1...\n2  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n3  2023-12-27  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n5  2023-12-13  ../swe_forecasting/output/swe_predicted_2023-1...\n6  2023-12-18  ../swe_forecasting/output/swe_predicted_2023-1...\n7  2023-12-17  ../swe_forecasting/output/swe_predicted_2023-1...\n8  2023-12-20  ../swe_forecasting/output/swe_predicted_2023-1...\n9  2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n10 2023-12-08  ../swe_forecasting/output/swe_predicted_2023-1...\n11 2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n12 2023-12-26  ../swe_forecasting/output/swe_predicted_2023-1...\n13 2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n14 2023-12-22  ../swe_forecasting/output/swe_predicted_2023-1...\n15 2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n16 2023-12-07  ../swe_forecasting/output/swe_predicted_2023-1...\n17 2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n18 2023-12-15  ../swe_forecasting/output/swe_predicted_2023-1...\n19 2023-12-16  ../swe_forecasting/output/swe_predicted_2023-1...\n20 2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n21 2023-06-11  ../swe_forecasting/output/swe_predicted_2023-0...\n22 2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n23 2023-12-14  ../swe_forecasting/output/swe_predicted_2023-1...\n24 2023-12-06  ../swe_forecasting/output/swe_predicted_2023-1...\n25 2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n26 2023-12-23  ../swe_forecasting/output/swe_predicted_2023-1...\n27 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n28 2023-12-04  ../swe_forecasting/output/swe_predicted_2023-1...\n29 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n30 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n31 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n32 2023-12-19  ../swe_forecasting/output/swe_predicted_2023-1...\n33 2023-12-03  ../swe_forecasting/output/swe_predicted_2023-1...\n34 2023-12-09  ../swe_forecasting/output/swe_predicted_2023-1...\n35 2023-12-05  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1703959063789,
  "history_end_time" : 1703959064719,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "62amdcber3u",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2023-12-30\ntest start date:  2023-12-04\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-12-04.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-12-04.png\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-04.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-04.tif\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-21.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-27.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-13.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-18.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-17.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-08.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-22.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-07.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-15.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-16.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-14.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-06.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\nDate: 2023-12-04\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-04.tif.map\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-19.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-09.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-05.tif.map already exists\n/home/chetana/gw-workspace/62amdcber3u/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/62amdcber3u/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/62amdcber3u/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/62amdcber3u/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/62amdcber3u/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/62amdcber3u/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/62amdcber3u/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/62amdcber3u/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/62amdcber3u/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/62amdcber3u/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/62amdcber3u/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/62amdcber3u/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/62amdcber3u/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/62amdcber3u/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/62amdcber3u/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/62amdcber3u/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/62amdcber3u/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/62amdcber3u/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/62amdcber3u/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/62amdcber3u/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/62amdcber3u/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/62amdcber3u/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/62amdcber3u/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/62amdcber3u/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/62amdcber3u/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/62amdcber3u/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/62amdcber3u/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/62amdcber3u/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/62amdcber3u/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/62amdcber3u/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/62amdcber3u/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/62amdcber3u/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/62amdcber3u/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/62amdcber3u/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/62amdcber3u/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2023-12-21  ../swe_forecasting/output/swe_predicted_2023-1...\n1  2023-12-11  ../swe_forecasting/output/swe_predicted_2023-1...\n2  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n3  2023-12-27  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n5  2023-12-13  ../swe_forecasting/output/swe_predicted_2023-1...\n6  2023-12-18  ../swe_forecasting/output/swe_predicted_2023-1...\n7  2023-12-17  ../swe_forecasting/output/swe_predicted_2023-1...\n8  2023-12-20  ../swe_forecasting/output/swe_predicted_2023-1...\n9  2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n10 2023-12-08  ../swe_forecasting/output/swe_predicted_2023-1...\n11 2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n12 2023-12-26  ../swe_forecasting/output/swe_predicted_2023-1...\n13 2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n14 2023-12-22  ../swe_forecasting/output/swe_predicted_2023-1...\n15 2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n16 2023-12-07  ../swe_forecasting/output/swe_predicted_2023-1...\n17 2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n18 2023-12-15  ../swe_forecasting/output/swe_predicted_2023-1...\n19 2023-12-16  ../swe_forecasting/output/swe_predicted_2023-1...\n20 2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n21 2023-06-11  ../swe_forecasting/output/swe_predicted_2023-0...\n22 2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n23 2023-12-14  ../swe_forecasting/output/swe_predicted_2023-1...\n24 2023-12-06  ../swe_forecasting/output/swe_predicted_2023-1...\n25 2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n26 2023-12-23  ../swe_forecasting/output/swe_predicted_2023-1...\n27 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n28 2023-12-04  ../swe_forecasting/output/swe_predicted_2023-1...\n29 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n30 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n31 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n32 2023-12-19  ../swe_forecasting/output/swe_predicted_2023-1...\n33 2023-12-09  ../swe_forecasting/output/swe_predicted_2023-1...\n34 2023-12-05  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1703956284199,
  "history_end_time" : 1703956285043,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "bqqw2ymph42",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2023-12-30\ntest start date:  2023-12-05\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-12-05.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-12-05.png\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-05.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-05.tif\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-21.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-27.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-13.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-18.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-17.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-08.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-22.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-07.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-15.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-16.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-14.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-06.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-19.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-09.tif.map already exists\nDate: 2023-12-05\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-05.tif.map\n/home/chetana/gw-workspace/bqqw2ymph42/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/bqqw2ymph42/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/bqqw2ymph42/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/bqqw2ymph42/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/bqqw2ymph42/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/bqqw2ymph42/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/bqqw2ymph42/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/bqqw2ymph42/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/bqqw2ymph42/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/bqqw2ymph42/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/bqqw2ymph42/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/bqqw2ymph42/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/bqqw2ymph42/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/bqqw2ymph42/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/bqqw2ymph42/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/bqqw2ymph42/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/bqqw2ymph42/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/bqqw2ymph42/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/bqqw2ymph42/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/bqqw2ymph42/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/bqqw2ymph42/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/bqqw2ymph42/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/bqqw2ymph42/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/bqqw2ymph42/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/bqqw2ymph42/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/bqqw2ymph42/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/bqqw2ymph42/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/bqqw2ymph42/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/bqqw2ymph42/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/bqqw2ymph42/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/bqqw2ymph42/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/bqqw2ymph42/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/bqqw2ymph42/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/bqqw2ymph42/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2023-12-21  ../swe_forecasting/output/swe_predicted_2023-1...\n1  2023-12-11  ../swe_forecasting/output/swe_predicted_2023-1...\n2  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n3  2023-12-27  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n5  2023-12-13  ../swe_forecasting/output/swe_predicted_2023-1...\n6  2023-12-18  ../swe_forecasting/output/swe_predicted_2023-1...\n7  2023-12-17  ../swe_forecasting/output/swe_predicted_2023-1...\n8  2023-12-20  ../swe_forecasting/output/swe_predicted_2023-1...\n9  2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n10 2023-12-08  ../swe_forecasting/output/swe_predicted_2023-1...\n11 2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n12 2023-12-26  ../swe_forecasting/output/swe_predicted_2023-1...\n13 2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n14 2023-12-22  ../swe_forecasting/output/swe_predicted_2023-1...\n15 2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n16 2023-12-07  ../swe_forecasting/output/swe_predicted_2023-1...\n17 2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n18 2023-12-15  ../swe_forecasting/output/swe_predicted_2023-1...\n19 2023-12-16  ../swe_forecasting/output/swe_predicted_2023-1...\n20 2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n21 2023-06-11  ../swe_forecasting/output/swe_predicted_2023-0...\n22 2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n23 2023-12-14  ../swe_forecasting/output/swe_predicted_2023-1...\n24 2023-12-06  ../swe_forecasting/output/swe_predicted_2023-1...\n25 2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n26 2023-12-23  ../swe_forecasting/output/swe_predicted_2023-1...\n27 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n28 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n29 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n30 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n31 2023-12-19  ../swe_forecasting/output/swe_predicted_2023-1...\n32 2023-12-09  ../swe_forecasting/output/swe_predicted_2023-1...\n33 2023-12-05  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1703954597766,
  "history_end_time" : 1703954598612,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "vpwc9614pun",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2023-12-30\ntest start date:  2023-12-06\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-12-06.png\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-06.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-06.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-12-06.png\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-21.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-27.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-13.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-18.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-17.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-08.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-22.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-07.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-15.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-16.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-14.tif.map already exists\nDate: 2023-12-06\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-06.tif.map\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-19.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-09.tif.map already exists\n/home/chetana/gw-workspace/vpwc9614pun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vpwc9614pun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vpwc9614pun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vpwc9614pun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vpwc9614pun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vpwc9614pun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vpwc9614pun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vpwc9614pun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vpwc9614pun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vpwc9614pun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vpwc9614pun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vpwc9614pun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vpwc9614pun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vpwc9614pun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vpwc9614pun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vpwc9614pun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vpwc9614pun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vpwc9614pun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vpwc9614pun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vpwc9614pun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vpwc9614pun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vpwc9614pun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vpwc9614pun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vpwc9614pun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vpwc9614pun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vpwc9614pun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vpwc9614pun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vpwc9614pun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vpwc9614pun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vpwc9614pun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vpwc9614pun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vpwc9614pun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/vpwc9614pun/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2023-12-21  ../swe_forecasting/output/swe_predicted_2023-1...\n1  2023-12-11  ../swe_forecasting/output/swe_predicted_2023-1...\n2  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n3  2023-12-27  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n5  2023-12-13  ../swe_forecasting/output/swe_predicted_2023-1...\n6  2023-12-18  ../swe_forecasting/output/swe_predicted_2023-1...\n7  2023-12-17  ../swe_forecasting/output/swe_predicted_2023-1...\n8  2023-12-20  ../swe_forecasting/output/swe_predicted_2023-1...\n9  2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n10 2023-12-08  ../swe_forecasting/output/swe_predicted_2023-1...\n11 2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n12 2023-12-26  ../swe_forecasting/output/swe_predicted_2023-1...\n13 2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n14 2023-12-22  ../swe_forecasting/output/swe_predicted_2023-1...\n15 2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n16 2023-12-07  ../swe_forecasting/output/swe_predicted_2023-1...\n17 2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n18 2023-12-15  ../swe_forecasting/output/swe_predicted_2023-1...\n19 2023-12-16  ../swe_forecasting/output/swe_predicted_2023-1...\n20 2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n21 2023-06-11  ../swe_forecasting/output/swe_predicted_2023-0...\n22 2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n23 2023-12-14  ../swe_forecasting/output/swe_predicted_2023-1...\n24 2023-12-06  ../swe_forecasting/output/swe_predicted_2023-1...\n25 2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n26 2023-12-23  ../swe_forecasting/output/swe_predicted_2023-1...\n27 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n28 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n29 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n30 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n31 2023-12-19  ../swe_forecasting/output/swe_predicted_2023-1...\n32 2023-12-09  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1703916226474,
  "history_end_time" : 1703916227382,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "na8km5wte9g",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2023-12-30\ntest start date:  2023-12-07\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-12-07.png\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-07.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-07.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-12-07.png\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-21.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-27.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-13.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-18.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-17.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-08.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-22.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\nDate: 2023-12-07\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-07.tif.map\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-15.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-16.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-14.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-19.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-09.tif.map already exists\n/home/chetana/gw-workspace/na8km5wte9g/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/na8km5wte9g/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/na8km5wte9g/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/na8km5wte9g/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/na8km5wte9g/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/na8km5wte9g/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/na8km5wte9g/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/na8km5wte9g/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/na8km5wte9g/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/na8km5wte9g/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/na8km5wte9g/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/na8km5wte9g/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/na8km5wte9g/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/na8km5wte9g/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/na8km5wte9g/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/na8km5wte9g/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/na8km5wte9g/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/na8km5wte9g/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/na8km5wte9g/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/na8km5wte9g/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/na8km5wte9g/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/na8km5wte9g/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/na8km5wte9g/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/na8km5wte9g/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/na8km5wte9g/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/na8km5wte9g/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/na8km5wte9g/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/na8km5wte9g/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/na8km5wte9g/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/na8km5wte9g/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/na8km5wte9g/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/na8km5wte9g/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2023-12-21  ../swe_forecasting/output/swe_predicted_2023-1...\n1  2023-12-11  ../swe_forecasting/output/swe_predicted_2023-1...\n2  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n3  2023-12-27  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n5  2023-12-13  ../swe_forecasting/output/swe_predicted_2023-1...\n6  2023-12-18  ../swe_forecasting/output/swe_predicted_2023-1...\n7  2023-12-17  ../swe_forecasting/output/swe_predicted_2023-1...\n8  2023-12-20  ../swe_forecasting/output/swe_predicted_2023-1...\n9  2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n10 2023-12-08  ../swe_forecasting/output/swe_predicted_2023-1...\n11 2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n12 2023-12-26  ../swe_forecasting/output/swe_predicted_2023-1...\n13 2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n14 2023-12-22  ../swe_forecasting/output/swe_predicted_2023-1...\n15 2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n16 2023-12-07  ../swe_forecasting/output/swe_predicted_2023-1...\n17 2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n18 2023-12-15  ../swe_forecasting/output/swe_predicted_2023-1...\n19 2023-12-16  ../swe_forecasting/output/swe_predicted_2023-1...\n20 2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n21 2023-06-11  ../swe_forecasting/output/swe_predicted_2023-0...\n22 2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n23 2023-12-14  ../swe_forecasting/output/swe_predicted_2023-1...\n24 2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n25 2023-12-23  ../swe_forecasting/output/swe_predicted_2023-1...\n26 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n27 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n28 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n29 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n30 2023-12-19  ../swe_forecasting/output/swe_predicted_2023-1...\n31 2023-12-09  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1703915744065,
  "history_end_time" : 1703915744903,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "k9xa8uvjbk5",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2023-12-30\ntest start date:  2023-12-08\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-12-08.png\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-08.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-08.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-12-08.png\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-21.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-27.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-13.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-18.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-17.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\nDate: 2023-12-08\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-08.tif.map\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-22.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-15.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-16.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-14.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-19.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-09.tif.map already exists\n/home/chetana/gw-workspace/k9xa8uvjbk5/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/k9xa8uvjbk5/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/k9xa8uvjbk5/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/k9xa8uvjbk5/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/k9xa8uvjbk5/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/k9xa8uvjbk5/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/k9xa8uvjbk5/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/k9xa8uvjbk5/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/k9xa8uvjbk5/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/k9xa8uvjbk5/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/k9xa8uvjbk5/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/k9xa8uvjbk5/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/k9xa8uvjbk5/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/k9xa8uvjbk5/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/k9xa8uvjbk5/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/k9xa8uvjbk5/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/k9xa8uvjbk5/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/k9xa8uvjbk5/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/k9xa8uvjbk5/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/k9xa8uvjbk5/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/k9xa8uvjbk5/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/k9xa8uvjbk5/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/k9xa8uvjbk5/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/k9xa8uvjbk5/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/k9xa8uvjbk5/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/k9xa8uvjbk5/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/k9xa8uvjbk5/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/k9xa8uvjbk5/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/k9xa8uvjbk5/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/k9xa8uvjbk5/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/k9xa8uvjbk5/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2023-12-21  ../swe_forecasting/output/swe_predicted_2023-1...\n1  2023-12-11  ../swe_forecasting/output/swe_predicted_2023-1...\n2  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n3  2023-12-27  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n5  2023-12-13  ../swe_forecasting/output/swe_predicted_2023-1...\n6  2023-12-18  ../swe_forecasting/output/swe_predicted_2023-1...\n7  2023-12-17  ../swe_forecasting/output/swe_predicted_2023-1...\n8  2023-12-20  ../swe_forecasting/output/swe_predicted_2023-1...\n9  2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n10 2023-12-08  ../swe_forecasting/output/swe_predicted_2023-1...\n11 2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n12 2023-12-26  ../swe_forecasting/output/swe_predicted_2023-1...\n13 2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n14 2023-12-22  ../swe_forecasting/output/swe_predicted_2023-1...\n15 2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n16 2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n17 2023-12-15  ../swe_forecasting/output/swe_predicted_2023-1...\n18 2023-12-16  ../swe_forecasting/output/swe_predicted_2023-1...\n19 2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n20 2023-06-11  ../swe_forecasting/output/swe_predicted_2023-0...\n21 2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n22 2023-12-14  ../swe_forecasting/output/swe_predicted_2023-1...\n23 2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n24 2023-12-23  ../swe_forecasting/output/swe_predicted_2023-1...\n25 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n26 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n27 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n28 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n29 2023-12-19  ../swe_forecasting/output/swe_predicted_2023-1...\n30 2023-12-09  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1703914940919,
  "history_end_time" : 1703914941765,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "94dp6ypyai1",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2023-12-30\ntest start date:  2023-12-09\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-12-09.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-12-09.png\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-09.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-09.tif\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-21.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-27.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-13.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-18.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-17.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-22.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-15.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-16.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-14.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-19.tif.map already exists\nDate: 2023-12-09\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-09.tif.map\n/home/chetana/gw-workspace/94dp6ypyai1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/94dp6ypyai1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/94dp6ypyai1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/94dp6ypyai1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/94dp6ypyai1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/94dp6ypyai1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/94dp6ypyai1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/94dp6ypyai1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/94dp6ypyai1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/94dp6ypyai1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/94dp6ypyai1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/94dp6ypyai1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/94dp6ypyai1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/94dp6ypyai1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/94dp6ypyai1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/94dp6ypyai1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/94dp6ypyai1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/94dp6ypyai1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/94dp6ypyai1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/94dp6ypyai1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/94dp6ypyai1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/94dp6ypyai1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/94dp6ypyai1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/94dp6ypyai1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/94dp6ypyai1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/94dp6ypyai1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/94dp6ypyai1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/94dp6ypyai1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/94dp6ypyai1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/94dp6ypyai1/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2023-12-21  ../swe_forecasting/output/swe_predicted_2023-1...\n1  2023-12-11  ../swe_forecasting/output/swe_predicted_2023-1...\n2  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n3  2023-12-27  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n5  2023-12-13  ../swe_forecasting/output/swe_predicted_2023-1...\n6  2023-12-18  ../swe_forecasting/output/swe_predicted_2023-1...\n7  2023-12-17  ../swe_forecasting/output/swe_predicted_2023-1...\n8  2023-12-20  ../swe_forecasting/output/swe_predicted_2023-1...\n9  2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n10 2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n11 2023-12-26  ../swe_forecasting/output/swe_predicted_2023-1...\n12 2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n13 2023-12-22  ../swe_forecasting/output/swe_predicted_2023-1...\n14 2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n15 2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n16 2023-12-15  ../swe_forecasting/output/swe_predicted_2023-1...\n17 2023-12-16  ../swe_forecasting/output/swe_predicted_2023-1...\n18 2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n19 2023-06-11  ../swe_forecasting/output/swe_predicted_2023-0...\n20 2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n21 2023-12-14  ../swe_forecasting/output/swe_predicted_2023-1...\n22 2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n23 2023-12-23  ../swe_forecasting/output/swe_predicted_2023-1...\n24 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n25 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n26 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n27 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n28 2023-12-19  ../swe_forecasting/output/swe_predicted_2023-1...\n29 2023-12-09  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1703912765905,
  "history_end_time" : 1703912766809,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "s0if8vqydv4",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2023-12-30\ntest start date:  2023-12-15\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-15.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-15.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-12-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-12-15.png\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-21.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-27.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-13.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-18.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-17.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-22.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\nDate: 2023-12-15\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-15.tif.map\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-16.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-14.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-19.tif.map already exists\n/home/chetana/gw-workspace/s0if8vqydv4/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/s0if8vqydv4/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/s0if8vqydv4/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/s0if8vqydv4/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/s0if8vqydv4/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/s0if8vqydv4/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/s0if8vqydv4/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/s0if8vqydv4/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/s0if8vqydv4/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/s0if8vqydv4/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/s0if8vqydv4/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/s0if8vqydv4/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/s0if8vqydv4/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/s0if8vqydv4/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/s0if8vqydv4/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/s0if8vqydv4/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/s0if8vqydv4/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/s0if8vqydv4/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/s0if8vqydv4/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/s0if8vqydv4/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/s0if8vqydv4/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/s0if8vqydv4/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/s0if8vqydv4/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/s0if8vqydv4/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/s0if8vqydv4/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/s0if8vqydv4/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/s0if8vqydv4/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/s0if8vqydv4/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/s0if8vqydv4/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2023-12-21  ../swe_forecasting/output/swe_predicted_2023-1...\n1  2023-12-11  ../swe_forecasting/output/swe_predicted_2023-1...\n2  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n3  2023-12-27  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n5  2023-12-13  ../swe_forecasting/output/swe_predicted_2023-1...\n6  2023-12-18  ../swe_forecasting/output/swe_predicted_2023-1...\n7  2023-12-17  ../swe_forecasting/output/swe_predicted_2023-1...\n8  2023-12-20  ../swe_forecasting/output/swe_predicted_2023-1...\n9  2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n10 2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n11 2023-12-26  ../swe_forecasting/output/swe_predicted_2023-1...\n12 2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n13 2023-12-22  ../swe_forecasting/output/swe_predicted_2023-1...\n14 2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n15 2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n16 2023-12-15  ../swe_forecasting/output/swe_predicted_2023-1...\n17 2023-12-16  ../swe_forecasting/output/swe_predicted_2023-1...\n18 2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n19 2023-06-11  ../swe_forecasting/output/swe_predicted_2023-0...\n20 2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n21 2023-12-14  ../swe_forecasting/output/swe_predicted_2023-1...\n22 2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n23 2023-12-23  ../swe_forecasting/output/swe_predicted_2023-1...\n24 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n25 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n26 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n27 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n28 2023-12-19  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1703906706933,
  "history_end_time" : 1703906707779,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "o2tlrg6ewou",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2023-12-30\ntest start date:  2023-12-14\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-12-14.png\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-14.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-14.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-12-14.png\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-21.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-27.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-13.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-18.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-17.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-22.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-16.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\nDate: 2023-12-14\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-14.tif.map\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-19.tif.map already exists\n/home/chetana/gw-workspace/o2tlrg6ewou/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/o2tlrg6ewou/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/o2tlrg6ewou/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/o2tlrg6ewou/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/o2tlrg6ewou/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/o2tlrg6ewou/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/o2tlrg6ewou/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/o2tlrg6ewou/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/o2tlrg6ewou/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/o2tlrg6ewou/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/o2tlrg6ewou/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/o2tlrg6ewou/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/o2tlrg6ewou/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/o2tlrg6ewou/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/o2tlrg6ewou/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/o2tlrg6ewou/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/o2tlrg6ewou/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/o2tlrg6ewou/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/o2tlrg6ewou/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/o2tlrg6ewou/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/o2tlrg6ewou/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/o2tlrg6ewou/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/o2tlrg6ewou/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/o2tlrg6ewou/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/o2tlrg6ewou/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/o2tlrg6ewou/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/o2tlrg6ewou/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/o2tlrg6ewou/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2023-12-21  ../swe_forecasting/output/swe_predicted_2023-1...\n1  2023-12-11  ../swe_forecasting/output/swe_predicted_2023-1...\n2  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n3  2023-12-27  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n5  2023-12-13  ../swe_forecasting/output/swe_predicted_2023-1...\n6  2023-12-18  ../swe_forecasting/output/swe_predicted_2023-1...\n7  2023-12-17  ../swe_forecasting/output/swe_predicted_2023-1...\n8  2023-12-20  ../swe_forecasting/output/swe_predicted_2023-1...\n9  2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n10 2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n11 2023-12-26  ../swe_forecasting/output/swe_predicted_2023-1...\n12 2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n13 2023-12-22  ../swe_forecasting/output/swe_predicted_2023-1...\n14 2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n15 2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n16 2023-12-16  ../swe_forecasting/output/swe_predicted_2023-1...\n17 2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n18 2023-06-11  ../swe_forecasting/output/swe_predicted_2023-0...\n19 2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n20 2023-12-14  ../swe_forecasting/output/swe_predicted_2023-1...\n21 2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n22 2023-12-23  ../swe_forecasting/output/swe_predicted_2023-1...\n23 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n24 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n25 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n26 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n27 2023-12-19  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1703901401656,
  "history_end_time" : 1703901402485,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "1ya5e4pfld2",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2023-12-30\ntest start date:  2023-12-10\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-12-10.png\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-10.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-10.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-12-10.png\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-21.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-27.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-13.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-18.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-17.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-22.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-16.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-19.tif.map already exists\n/home/chetana/gw-workspace/1ya5e4pfld2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1ya5e4pfld2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1ya5e4pfld2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1ya5e4pfld2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1ya5e4pfld2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1ya5e4pfld2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1ya5e4pfld2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1ya5e4pfld2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1ya5e4pfld2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1ya5e4pfld2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1ya5e4pfld2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1ya5e4pfld2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1ya5e4pfld2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1ya5e4pfld2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1ya5e4pfld2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1ya5e4pfld2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1ya5e4pfld2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1ya5e4pfld2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1ya5e4pfld2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1ya5e4pfld2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1ya5e4pfld2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1ya5e4pfld2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1ya5e4pfld2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1ya5e4pfld2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1ya5e4pfld2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1ya5e4pfld2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1ya5e4pfld2/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2023-12-21  ../swe_forecasting/output/swe_predicted_2023-1...\n1  2023-12-11  ../swe_forecasting/output/swe_predicted_2023-1...\n2  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n3  2023-12-27  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n5  2023-12-13  ../swe_forecasting/output/swe_predicted_2023-1...\n6  2023-12-18  ../swe_forecasting/output/swe_predicted_2023-1...\n7  2023-12-17  ../swe_forecasting/output/swe_predicted_2023-1...\n8  2023-12-20  ../swe_forecasting/output/swe_predicted_2023-1...\n9  2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n10 2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n11 2023-12-26  ../swe_forecasting/output/swe_predicted_2023-1...\n12 2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n13 2023-12-22  ../swe_forecasting/output/swe_predicted_2023-1...\n14 2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n15 2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n16 2023-12-16  ../swe_forecasting/output/swe_predicted_2023-1...\n17 2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n18 2023-06-11  ../swe_forecasting/output/swe_predicted_2023-0...\n19 2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n20 2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n21 2023-12-23  ../swe_forecasting/output/swe_predicted_2023-1...\n22 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n23 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n24 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n25 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n26 2023-12-19  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1703900207214,
  "history_end_time" : 1703900208041,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "93ghqayurkk",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2023-12-30\ntest start date:  2023-12-11\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-11.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-11.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-12-11.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-12-11.png\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-21.tif.map already exists\nDate: 2023-12-11\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-11.tif.map\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-27.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-13.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-18.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-17.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-22.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-16.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-19.tif.map already exists\n/home/chetana/gw-workspace/93ghqayurkk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/93ghqayurkk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/93ghqayurkk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/93ghqayurkk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/93ghqayurkk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/93ghqayurkk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/93ghqayurkk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/93ghqayurkk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/93ghqayurkk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/93ghqayurkk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/93ghqayurkk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/93ghqayurkk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/93ghqayurkk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/93ghqayurkk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/93ghqayurkk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/93ghqayurkk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/93ghqayurkk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/93ghqayurkk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/93ghqayurkk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/93ghqayurkk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/93ghqayurkk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/93ghqayurkk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/93ghqayurkk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/93ghqayurkk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/93ghqayurkk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/93ghqayurkk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/93ghqayurkk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2023-12-21  ../swe_forecasting/output/swe_predicted_2023-1...\n1  2023-12-11  ../swe_forecasting/output/swe_predicted_2023-1...\n2  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n3  2023-12-27  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n5  2023-12-13  ../swe_forecasting/output/swe_predicted_2023-1...\n6  2023-12-18  ../swe_forecasting/output/swe_predicted_2023-1...\n7  2023-12-17  ../swe_forecasting/output/swe_predicted_2023-1...\n8  2023-12-20  ../swe_forecasting/output/swe_predicted_2023-1...\n9  2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n10 2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n11 2023-12-26  ../swe_forecasting/output/swe_predicted_2023-1...\n12 2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n13 2023-12-22  ../swe_forecasting/output/swe_predicted_2023-1...\n14 2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n15 2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n16 2023-12-16  ../swe_forecasting/output/swe_predicted_2023-1...\n17 2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n18 2023-06-11  ../swe_forecasting/output/swe_predicted_2023-0...\n19 2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n20 2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n21 2023-12-23  ../swe_forecasting/output/swe_predicted_2023-1...\n22 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n23 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n24 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n25 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n26 2023-12-19  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1703897893051,
  "history_end_time" : 1703897893879,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "fe9xz79zqjm",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2023-12-30\ntest start date:  2023-12-13\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-12-13.png\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-13.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-13.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-12-13.png\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-21.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-27.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\nDate: 2023-12-13\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-13.tif.map\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-18.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-17.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-22.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-16.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-19.tif.map already exists\n/home/chetana/gw-workspace/fe9xz79zqjm/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fe9xz79zqjm/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fe9xz79zqjm/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fe9xz79zqjm/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fe9xz79zqjm/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fe9xz79zqjm/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fe9xz79zqjm/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fe9xz79zqjm/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fe9xz79zqjm/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fe9xz79zqjm/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fe9xz79zqjm/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fe9xz79zqjm/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fe9xz79zqjm/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fe9xz79zqjm/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fe9xz79zqjm/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fe9xz79zqjm/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fe9xz79zqjm/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fe9xz79zqjm/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fe9xz79zqjm/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fe9xz79zqjm/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fe9xz79zqjm/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fe9xz79zqjm/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fe9xz79zqjm/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fe9xz79zqjm/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fe9xz79zqjm/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fe9xz79zqjm/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2023-12-21  ../swe_forecasting/output/swe_predicted_2023-1...\n1  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n2  2023-12-27  ../swe_forecasting/output/swe_predicted_2023-1...\n3  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2023-12-13  ../swe_forecasting/output/swe_predicted_2023-1...\n5  2023-12-18  ../swe_forecasting/output/swe_predicted_2023-1...\n6  2023-12-17  ../swe_forecasting/output/swe_predicted_2023-1...\n7  2023-12-20  ../swe_forecasting/output/swe_predicted_2023-1...\n8  2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n9  2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n10 2023-12-26  ../swe_forecasting/output/swe_predicted_2023-1...\n11 2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n12 2023-12-22  ../swe_forecasting/output/swe_predicted_2023-1...\n13 2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n14 2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n15 2023-12-16  ../swe_forecasting/output/swe_predicted_2023-1...\n16 2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n17 2023-06-11  ../swe_forecasting/output/swe_predicted_2023-0...\n18 2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n19 2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n20 2023-12-23  ../swe_forecasting/output/swe_predicted_2023-1...\n21 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n22 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n23 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n24 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n25 2023-12-19  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1703896605745,
  "history_end_time" : 1703896606575,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "732cnqtji8b",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2023-12-29\n2023-12-26\ntest start date:  2023-12-26\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-26.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-26.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-12-26.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-12-26.png\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-21.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-27.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-18.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-17.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-22.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-16.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-19.tif.map already exists\n/home/chetana/gw-workspace/732cnqtji8b/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/732cnqtji8b/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/732cnqtji8b/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/732cnqtji8b/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/732cnqtji8b/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/732cnqtji8b/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/732cnqtji8b/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/732cnqtji8b/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/732cnqtji8b/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/732cnqtji8b/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/732cnqtji8b/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/732cnqtji8b/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/732cnqtji8b/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/732cnqtji8b/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/732cnqtji8b/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/732cnqtji8b/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/732cnqtji8b/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/732cnqtji8b/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/732cnqtji8b/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/732cnqtji8b/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/732cnqtji8b/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/732cnqtji8b/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/732cnqtji8b/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/732cnqtji8b/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/732cnqtji8b/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2023-12-21  ../swe_forecasting/output/swe_predicted_2023-1...\n1  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n2  2023-12-27  ../swe_forecasting/output/swe_predicted_2023-1...\n3  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2023-12-18  ../swe_forecasting/output/swe_predicted_2023-1...\n5  2023-12-17  ../swe_forecasting/output/swe_predicted_2023-1...\n6  2023-12-20  ../swe_forecasting/output/swe_predicted_2023-1...\n7  2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n8  2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n9  2023-12-26  ../swe_forecasting/output/swe_predicted_2023-1...\n10 2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n11 2023-12-22  ../swe_forecasting/output/swe_predicted_2023-1...\n12 2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n13 2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n14 2023-12-16  ../swe_forecasting/output/swe_predicted_2023-1...\n15 2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n16 2023-06-11  ../swe_forecasting/output/swe_predicted_2023-0...\n17 2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n18 2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n19 2023-12-23  ../swe_forecasting/output/swe_predicted_2023-1...\n20 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n21 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n22 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n23 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n24 2023-12-19  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1703890685910,
  "history_end_time" : 1703890686751,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "pl23iikgcpu",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2023-12-29\ntest start date:  2023-12-16\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-12-16.png\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-16.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-16.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-12-16.png\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-21.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-27.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-18.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-17.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-22.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\nDate: 2023-12-16\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-16.tif.map\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-19.tif.map already exists\n/home/chetana/gw-workspace/pl23iikgcpu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pl23iikgcpu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pl23iikgcpu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pl23iikgcpu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pl23iikgcpu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pl23iikgcpu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pl23iikgcpu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pl23iikgcpu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pl23iikgcpu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pl23iikgcpu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pl23iikgcpu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pl23iikgcpu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pl23iikgcpu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pl23iikgcpu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pl23iikgcpu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pl23iikgcpu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pl23iikgcpu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pl23iikgcpu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pl23iikgcpu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pl23iikgcpu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pl23iikgcpu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pl23iikgcpu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pl23iikgcpu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pl23iikgcpu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/pl23iikgcpu/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2023-12-21  ../swe_forecasting/output/swe_predicted_2023-1...\n1  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n2  2023-12-27  ../swe_forecasting/output/swe_predicted_2023-1...\n3  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2023-12-18  ../swe_forecasting/output/swe_predicted_2023-1...\n5  2023-12-17  ../swe_forecasting/output/swe_predicted_2023-1...\n6  2023-12-20  ../swe_forecasting/output/swe_predicted_2023-1...\n7  2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n8  2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n9  2023-12-26  ../swe_forecasting/output/swe_predicted_2023-1...\n10 2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n11 2023-12-22  ../swe_forecasting/output/swe_predicted_2023-1...\n12 2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n13 2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n14 2023-12-16  ../swe_forecasting/output/swe_predicted_2023-1...\n15 2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n16 2023-06-11  ../swe_forecasting/output/swe_predicted_2023-0...\n17 2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n18 2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n19 2023-12-23  ../swe_forecasting/output/swe_predicted_2023-1...\n20 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n21 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n22 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n23 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n24 2023-12-19  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1703887296345,
  "history_end_time" : 1703887297186,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "yfcut4kpm1i",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2023-12-29\ntest start date:  2023-12-17\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-12-17.png\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-17.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-17.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-12-17.png\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-21.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-27.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-18.tif.map already exists\nDate: 2023-12-17\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-17.tif.map\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-22.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-19.tif.map already exists\n/home/chetana/gw-workspace/yfcut4kpm1i/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/yfcut4kpm1i/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/yfcut4kpm1i/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/yfcut4kpm1i/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/yfcut4kpm1i/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/yfcut4kpm1i/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/yfcut4kpm1i/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/yfcut4kpm1i/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/yfcut4kpm1i/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/yfcut4kpm1i/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/yfcut4kpm1i/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/yfcut4kpm1i/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/yfcut4kpm1i/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/yfcut4kpm1i/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/yfcut4kpm1i/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/yfcut4kpm1i/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/yfcut4kpm1i/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/yfcut4kpm1i/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/yfcut4kpm1i/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/yfcut4kpm1i/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/yfcut4kpm1i/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/yfcut4kpm1i/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/yfcut4kpm1i/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/yfcut4kpm1i/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2023-12-21  ../swe_forecasting/output/swe_predicted_2023-1...\n1  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n2  2023-12-27  ../swe_forecasting/output/swe_predicted_2023-1...\n3  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2023-12-18  ../swe_forecasting/output/swe_predicted_2023-1...\n5  2023-12-17  ../swe_forecasting/output/swe_predicted_2023-1...\n6  2023-12-20  ../swe_forecasting/output/swe_predicted_2023-1...\n7  2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n8  2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n9  2023-12-26  ../swe_forecasting/output/swe_predicted_2023-1...\n10 2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n11 2023-12-22  ../swe_forecasting/output/swe_predicted_2023-1...\n12 2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n13 2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n14 2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n15 2023-06-11  ../swe_forecasting/output/swe_predicted_2023-0...\n16 2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n17 2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n18 2023-12-23  ../swe_forecasting/output/swe_predicted_2023-1...\n19 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n20 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n21 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n22 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n23 2023-12-19  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1703886489338,
  "history_end_time" : 1703886490176,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "xdmcetvy0jg",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2023-12-29\ntest start date:  2023-12-18\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-12-18.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-12-18.png\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-18.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-18.tif\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-21.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-27.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\nDate: 2023-12-18\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-18.tif.map\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-22.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-19.tif.map already exists\n/home/chetana/gw-workspace/xdmcetvy0jg/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/xdmcetvy0jg/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/xdmcetvy0jg/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/xdmcetvy0jg/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/xdmcetvy0jg/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/xdmcetvy0jg/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/xdmcetvy0jg/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/xdmcetvy0jg/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/xdmcetvy0jg/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/xdmcetvy0jg/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/xdmcetvy0jg/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/xdmcetvy0jg/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/xdmcetvy0jg/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/xdmcetvy0jg/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/xdmcetvy0jg/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/xdmcetvy0jg/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/xdmcetvy0jg/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/xdmcetvy0jg/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/xdmcetvy0jg/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/xdmcetvy0jg/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/xdmcetvy0jg/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/xdmcetvy0jg/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/xdmcetvy0jg/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2023-12-21  ../swe_forecasting/output/swe_predicted_2023-1...\n1  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n2  2023-12-27  ../swe_forecasting/output/swe_predicted_2023-1...\n3  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2023-12-18  ../swe_forecasting/output/swe_predicted_2023-1...\n5  2023-12-20  ../swe_forecasting/output/swe_predicted_2023-1...\n6  2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n7  2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n8  2023-12-26  ../swe_forecasting/output/swe_predicted_2023-1...\n9  2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n10 2023-12-22  ../swe_forecasting/output/swe_predicted_2023-1...\n11 2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n12 2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n13 2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n14 2023-06-11  ../swe_forecasting/output/swe_predicted_2023-0...\n15 2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n16 2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n17 2023-12-23  ../swe_forecasting/output/swe_predicted_2023-1...\n18 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n19 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n20 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n21 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n22 2023-12-19  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1703880689144,
  "history_end_time" : 1703880689956,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "en0ql98ov7f",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2023-12-29\ntest start date:  2023-12-19\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-12-19.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-12-19.png\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-19.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-19.tif\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-21.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-27.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-22.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\nDate: 2023-12-19\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-19.tif.map\n/home/chetana/gw-workspace/en0ql98ov7f/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/en0ql98ov7f/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/en0ql98ov7f/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/en0ql98ov7f/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/en0ql98ov7f/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/en0ql98ov7f/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/en0ql98ov7f/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/en0ql98ov7f/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/en0ql98ov7f/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/en0ql98ov7f/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/en0ql98ov7f/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/en0ql98ov7f/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/en0ql98ov7f/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/en0ql98ov7f/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/en0ql98ov7f/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/en0ql98ov7f/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/en0ql98ov7f/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/en0ql98ov7f/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/en0ql98ov7f/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/en0ql98ov7f/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/en0ql98ov7f/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/en0ql98ov7f/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2023-12-21  ../swe_forecasting/output/swe_predicted_2023-1...\n1  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n2  2023-12-27  ../swe_forecasting/output/swe_predicted_2023-1...\n3  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2023-12-20  ../swe_forecasting/output/swe_predicted_2023-1...\n5  2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n6  2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n7  2023-12-26  ../swe_forecasting/output/swe_predicted_2023-1...\n8  2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n9  2023-12-22  ../swe_forecasting/output/swe_predicted_2023-1...\n10 2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n11 2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n12 2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n13 2023-06-11  ../swe_forecasting/output/swe_predicted_2023-0...\n14 2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n15 2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n16 2023-12-23  ../swe_forecasting/output/swe_predicted_2023-1...\n17 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n18 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n19 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n20 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1703873251493,
  "history_end_time" : 1703873253817,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "1q4fow71bdd",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2023-12-29\ntest start date:  2023-12-20\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-12-20.png\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-20.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-20.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-12-20.png\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-21.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-27.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\nDate: 2023-12-20\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-20.tif.map\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-22.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/home/chetana/gw-workspace/1q4fow71bdd/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1q4fow71bdd/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1q4fow71bdd/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1q4fow71bdd/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1q4fow71bdd/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1q4fow71bdd/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1q4fow71bdd/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1q4fow71bdd/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1q4fow71bdd/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1q4fow71bdd/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1q4fow71bdd/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1q4fow71bdd/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1q4fow71bdd/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1q4fow71bdd/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1q4fow71bdd/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1q4fow71bdd/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1q4fow71bdd/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1q4fow71bdd/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1q4fow71bdd/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1q4fow71bdd/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/1q4fow71bdd/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2023-12-21  ../swe_forecasting/output/swe_predicted_2023-1...\n1  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n2  2023-12-27  ../swe_forecasting/output/swe_predicted_2023-1...\n3  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2023-12-20  ../swe_forecasting/output/swe_predicted_2023-1...\n5  2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n6  2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n7  2023-12-26  ../swe_forecasting/output/swe_predicted_2023-1...\n8  2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n9  2023-12-22  ../swe_forecasting/output/swe_predicted_2023-1...\n10 2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n11 2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n12 2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n13 2023-06-11  ../swe_forecasting/output/swe_predicted_2023-0...\n14 2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n15 2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n16 2023-12-23  ../swe_forecasting/output/swe_predicted_2023-1...\n17 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n18 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n19 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n20 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1703870337334,
  "history_end_time" : 1703870338158,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "k0gbg0sp6xk",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2023-12-29\ntest start date:  2023-12-21\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-21.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-21.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-12-21.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-12-21.png\nDate: 2023-12-21\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-21.tif.map\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-27.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-22.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/home/chetana/gw-workspace/k0gbg0sp6xk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/k0gbg0sp6xk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/k0gbg0sp6xk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/k0gbg0sp6xk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/k0gbg0sp6xk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/k0gbg0sp6xk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/k0gbg0sp6xk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/k0gbg0sp6xk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/k0gbg0sp6xk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/k0gbg0sp6xk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/k0gbg0sp6xk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/k0gbg0sp6xk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/k0gbg0sp6xk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/k0gbg0sp6xk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/k0gbg0sp6xk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/k0gbg0sp6xk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/k0gbg0sp6xk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/k0gbg0sp6xk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/k0gbg0sp6xk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/k0gbg0sp6xk/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2023-12-21  ../swe_forecasting/output/swe_predicted_2023-1...\n1  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n2  2023-12-27  ../swe_forecasting/output/swe_predicted_2023-1...\n3  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n5  2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n6  2023-12-26  ../swe_forecasting/output/swe_predicted_2023-1...\n7  2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n8  2023-12-22  ../swe_forecasting/output/swe_predicted_2023-1...\n9  2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n10 2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n11 2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n12 2023-06-11  ../swe_forecasting/output/swe_predicted_2023-0...\n13 2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n14 2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n15 2023-12-23  ../swe_forecasting/output/swe_predicted_2023-1...\n16 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n17 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n18 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n19 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1703869127637,
  "history_end_time" : 1703869128460,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "rqn60tnizll",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2023-12-29\ntest start date:  2023-12-27\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-27.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-27.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-12-27.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-12-27.png\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\nDate: 2023-12-27\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-27.tif.map\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-22.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/home/chetana/gw-workspace/rqn60tnizll/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/rqn60tnizll/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/rqn60tnizll/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/rqn60tnizll/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/rqn60tnizll/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/rqn60tnizll/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/rqn60tnizll/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/rqn60tnizll/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/rqn60tnizll/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/rqn60tnizll/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/rqn60tnizll/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/rqn60tnizll/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/rqn60tnizll/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/rqn60tnizll/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/rqn60tnizll/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/rqn60tnizll/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/rqn60tnizll/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/rqn60tnizll/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/rqn60tnizll/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n1  2023-12-27  ../swe_forecasting/output/swe_predicted_2023-1...\n2  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n3  2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n4  2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n5  2023-12-26  ../swe_forecasting/output/swe_predicted_2023-1...\n6  2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n7  2023-12-22  ../swe_forecasting/output/swe_predicted_2023-1...\n8  2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n9  2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n10 2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n11 2023-06-11  ../swe_forecasting/output/swe_predicted_2023-0...\n12 2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n13 2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n14 2023-12-23  ../swe_forecasting/output/swe_predicted_2023-1...\n15 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n16 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n17 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n18 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1703867582627,
  "history_end_time" : 1703867583459,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "6e0wplwpavs",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2023-12-29\ntest start date:  2023-12-23\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-12-23.png\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-23.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-23.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-12-23.png\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-22.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\nDate: 2023-12-23\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-23.tif.map\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/home/chetana/gw-workspace/6e0wplwpavs/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6e0wplwpavs/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6e0wplwpavs/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6e0wplwpavs/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6e0wplwpavs/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6e0wplwpavs/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6e0wplwpavs/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6e0wplwpavs/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6e0wplwpavs/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6e0wplwpavs/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6e0wplwpavs/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6e0wplwpavs/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6e0wplwpavs/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6e0wplwpavs/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6e0wplwpavs/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6e0wplwpavs/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6e0wplwpavs/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6e0wplwpavs/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n1  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n2  2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n3  2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2023-12-26  ../swe_forecasting/output/swe_predicted_2023-1...\n5  2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n6  2023-12-22  ../swe_forecasting/output/swe_predicted_2023-1...\n7  2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n8  2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n9  2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n10 2023-06-11  ../swe_forecasting/output/swe_predicted_2023-0...\n11 2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n12 2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n13 2023-12-23  ../swe_forecasting/output/swe_predicted_2023-1...\n14 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n15 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n16 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n17 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1703865402702,
  "history_end_time" : 1703865403529,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "mgchajlp5g4",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2023-12-29\ntest start date:  2023-12-22\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-12-22.png\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-22.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-22.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-12-22.png\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\nDate: 2023-12-22\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-22.tif.map\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/home/chetana/gw-workspace/mgchajlp5g4/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mgchajlp5g4/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mgchajlp5g4/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mgchajlp5g4/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mgchajlp5g4/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mgchajlp5g4/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mgchajlp5g4/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mgchajlp5g4/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mgchajlp5g4/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mgchajlp5g4/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mgchajlp5g4/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mgchajlp5g4/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mgchajlp5g4/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mgchajlp5g4/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mgchajlp5g4/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mgchajlp5g4/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/mgchajlp5g4/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n1  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n2  2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n3  2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2023-12-26  ../swe_forecasting/output/swe_predicted_2023-1...\n5  2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n6  2023-12-22  ../swe_forecasting/output/swe_predicted_2023-1...\n7  2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n8  2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n9  2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n10 2023-06-11  ../swe_forecasting/output/swe_predicted_2023-0...\n11 2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n12 2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n13 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n14 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n15 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n16 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1703863146872,
  "history_end_time" : 1703863147740,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "89i560fb7m7",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2023-12-29\n2023-12-26\ntest start date:  2023-12-26\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-26.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-26.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-12-26.png\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/home/chetana/gw-workspace/89i560fb7m7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/89i560fb7m7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/89i560fb7m7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/89i560fb7m7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/89i560fb7m7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/89i560fb7m7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/89i560fb7m7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/89i560fb7m7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/89i560fb7m7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/89i560fb7m7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/89i560fb7m7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/89i560fb7m7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/89i560fb7m7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/89i560fb7m7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/89i560fb7m7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/89i560fb7m7/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n1  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n2  2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n3  2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2023-12-26  ../swe_forecasting/output/swe_predicted_2023-1...\n5  2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n6  2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n7  2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n8  2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n9  2023-06-11  ../swe_forecasting/output/swe_predicted_2023-0...\n10 2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n11 2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n12 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n13 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n14 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n15 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1703827991431,
  "history_end_time" : 1703827992256,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "fsw9g704u79",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2023-12-29\n2023-12-26\ntest start date:  2023-12-26\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-26.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-26.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-12-26.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-12-26.png\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\nDate: 2023-12-26\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/home/chetana/gw-workspace/fsw9g704u79/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fsw9g704u79/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fsw9g704u79/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fsw9g704u79/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fsw9g704u79/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fsw9g704u79/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fsw9g704u79/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fsw9g704u79/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fsw9g704u79/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fsw9g704u79/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fsw9g704u79/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fsw9g704u79/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fsw9g704u79/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fsw9g704u79/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fsw9g704u79/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fsw9g704u79/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n1  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n2  2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n3  2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2023-12-26  ../swe_forecasting/output/swe_predicted_2023-1...\n5  2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n6  2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n7  2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n8  2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n9  2023-06-11  ../swe_forecasting/output/swe_predicted_2023-0...\n10 2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n11 2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n12 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n13 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n14 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n15 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1703827894656,
  "history_end_time" : 1703827895522,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "6YkjWRSzQRfL",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2023-12-29\ntest start date:  2023-06-11\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-06-11.png\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-06-11.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-06-11.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-06-11.png\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\nDate: 2023-06-11\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/home/chetana/gw-workspace/6YkjWRSzQRfL/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6YkjWRSzQRfL/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6YkjWRSzQRfL/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6YkjWRSzQRfL/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6YkjWRSzQRfL/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6YkjWRSzQRfL/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6YkjWRSzQRfL/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6YkjWRSzQRfL/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6YkjWRSzQRfL/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6YkjWRSzQRfL/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6YkjWRSzQRfL/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6YkjWRSzQRfL/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6YkjWRSzQRfL/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6YkjWRSzQRfL/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/6YkjWRSzQRfL/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n1  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n2  2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n3  2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n5  2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n6  2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n7  2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n8  2023-06-11  ../swe_forecasting/output/swe_predicted_2023-0...\n9  2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n10 2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n11 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n12 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n13 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n14 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1703827028329,
  "history_end_time" : 1703827029578,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "ZYzU6U0qRgmP",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2023-12-28\ntest start date:  2023-05-11\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-05-11.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-05-11.png\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-05-11.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-05-11.tif\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/home/chetana/gw-workspace/ZYzU6U0qRgmP/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/ZYzU6U0qRgmP/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/ZYzU6U0qRgmP/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/ZYzU6U0qRgmP/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/ZYzU6U0qRgmP/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/ZYzU6U0qRgmP/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/ZYzU6U0qRgmP/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/ZYzU6U0qRgmP/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/ZYzU6U0qRgmP/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/ZYzU6U0qRgmP/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/ZYzU6U0qRgmP/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/ZYzU6U0qRgmP/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/ZYzU6U0qRgmP/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/ZYzU6U0qRgmP/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n1  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n2  2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n3  2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n5  2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n6  2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n7  2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n8  2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n9  2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n10 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n11 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n12 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n13 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1703785940020,
  "history_end_time" : 1703785940839,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "fphoav5k9ge",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2023-12-28\ntest start date:  2023-05-11\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-05-11.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-05-11.png\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-05-11.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-05-11.tif\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\nDate: 2023-05-11\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/home/chetana/gw-workspace/fphoav5k9ge/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fphoav5k9ge/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fphoav5k9ge/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fphoav5k9ge/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fphoav5k9ge/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fphoav5k9ge/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fphoav5k9ge/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fphoav5k9ge/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fphoav5k9ge/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fphoav5k9ge/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fphoav5k9ge/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fphoav5k9ge/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fphoav5k9ge/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/fphoav5k9ge/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n1  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n2  2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n3  2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n5  2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n6  2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n7  2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n8  2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n9  2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n10 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n11 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n12 2023-05-11  ../swe_forecasting/output/swe_predicted_2023-0...\n13 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1703779627763,
  "history_end_time" : 1703779628576,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "3nfgptcx3ol",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2023-12-28\n2023-12-25\ntest start date:  2023-12-25\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-12-25.png\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-25.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-25.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-12-25.png\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/home/chetana/gw-workspace/3nfgptcx3ol/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/3nfgptcx3ol/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/3nfgptcx3ol/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/3nfgptcx3ol/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/3nfgptcx3ol/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/3nfgptcx3ol/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/3nfgptcx3ol/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/3nfgptcx3ol/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/3nfgptcx3ol/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/3nfgptcx3ol/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/3nfgptcx3ol/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/3nfgptcx3ol/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/3nfgptcx3ol/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n1  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n2  2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n3  2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n5  2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n6  2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n7  2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n8  2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n9  2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n10 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n11 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n12 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1703740102990,
  "history_end_time" : 1703740103814,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "9EMJPMdNIE89",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2023-12-28\n2023-12-25\ntest start date:  2023-12-25\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-25.tif\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\nDate: 2023-12-25\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/home/chetana/gw-workspace/9EMJPMdNIE89/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9EMJPMdNIE89/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9EMJPMdNIE89/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9EMJPMdNIE89/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9EMJPMdNIE89/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9EMJPMdNIE89/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9EMJPMdNIE89/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9EMJPMdNIE89/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9EMJPMdNIE89/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9EMJPMdNIE89/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9EMJPMdNIE89/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9EMJPMdNIE89/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/9EMJPMdNIE89/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n1  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n2  2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n3  2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n5  2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n6  2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n7  2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n8  2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n9  2023-12-25  ../swe_forecasting/output/swe_predicted_2023-1...\n10 2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n11 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n12 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1703737913682,
  "history_end_time" : 1703737914482,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "d6ULT8sSo0QQ",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\n\nif __name__ == \"__main__\":\n  source_folder = f\"{work_dir}/var_comparison/\"\n  destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-28\n2023-12-25\ntest start date:  2023-12-25\ntest end date:  2023-10-11\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-12-25.png\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-25.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-12-25.png\n",
  "history_begin_time" : 1703737820695,
  "history_end_time" : 1703737821478,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "t81mgqjzktr",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2023-12-27\ntest start date:  2023-05-10\ntest end date:  2023-12-11\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-05-10.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-05-10.png\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-05-10.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-05-10.tif\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/home/chetana/gw-workspace/t81mgqjzktr/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/t81mgqjzktr/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/t81mgqjzktr/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/t81mgqjzktr/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/t81mgqjzktr/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/t81mgqjzktr/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/t81mgqjzktr/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/t81mgqjzktr/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/t81mgqjzktr/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/t81mgqjzktr/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/t81mgqjzktr/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/t81mgqjzktr/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n1  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n2  2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n3  2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n5  2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n6  2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n7  2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n8  2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n9  2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n10 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n11 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1703713202241,
  "history_end_time" : 1703713203081,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "E2D7AGrO32cR",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2023-12-27\ntest start date:  2023-05-10\ntest end date:  2023-12-11\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/home/chetana/gw-workspace/E2D7AGrO32cR/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/E2D7AGrO32cR/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/E2D7AGrO32cR/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/E2D7AGrO32cR/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/E2D7AGrO32cR/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/E2D7AGrO32cR/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/E2D7AGrO32cR/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/E2D7AGrO32cR/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/E2D7AGrO32cR/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/E2D7AGrO32cR/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/E2D7AGrO32cR/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/E2D7AGrO32cR/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                           predicted_swe_url_prefix\n0  2022-10-11  ../swe_forecasting/output/swe_predicted_2022-1...\n1  2023-12-24  ../swe_forecasting/output/swe_predicted_2023-1...\n2  2022-12-23  ../swe_forecasting/output/swe_predicted_2022-1...\n3  2023-12-12  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2022-11-11  ../swe_forecasting/output/swe_predicted_2022-1...\n5  2023-01-20  ../swe_forecasting/output/swe_predicted_2023-0...\n6  2023-05-10  ../swe_forecasting/output/swe_predicted_2023-0...\n7  2022-11-25  ../swe_forecasting/output/swe_predicted_2022-1...\n8  2022-10-10  ../swe_forecasting/output/swe_predicted_2022-1...\n9  2022-10-20  ../swe_forecasting/output/swe_predicted_2022-1...\n10 2023-12-10  ../swe_forecasting/output/swe_predicted_2023-1...\n11 2023-10-03  ../swe_forecasting/output/swe_predicted_2023-1...\n",
  "history_begin_time" : 1703701349417,
  "history_end_time" : 1703701350215,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "XuZq4KV9devL",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_file_path\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"file path\": f\"../swe_forecasting/output/{filename}\"\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2023-12-27\ntest start date:  2023-05-10\ntest end date:  2023-12-11\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/home/chetana/gw-workspace/XuZq4KV9devL/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/XuZq4KV9devL/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/XuZq4KV9devL/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/XuZq4KV9devL/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/XuZq4KV9devL/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/XuZq4KV9devL/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/XuZq4KV9devL/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/XuZq4KV9devL/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/XuZq4KV9devL/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/XuZq4KV9devL/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/XuZq4KV9devL/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/XuZq4KV9devL/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date  ...                                          file path\n0  2022-10-11  ...  ../swe_forecasting/output/swe_predicted_2022-1...\n1  2023-12-24  ...  ../swe_forecasting/output/swe_predicted_2023-1...\n2  2022-12-23  ...  ../swe_forecasting/output/swe_predicted_2022-1...\n3  2023-12-12  ...  ../swe_forecasting/output/swe_predicted_2023-1...\n4  2022-11-11  ...  ../swe_forecasting/output/swe_predicted_2022-1...\n5  2023-01-20  ...  ../swe_forecasting/output/swe_predicted_2023-0...\n6  2023-05-10  ...  ../swe_forecasting/output/swe_predicted_2023-0...\n7  2022-11-25  ...  ../swe_forecasting/output/swe_predicted_2022-1...\n8  2022-10-10  ...  ../swe_forecasting/output/swe_predicted_2022-1...\n9  2022-10-20  ...  ../swe_forecasting/output/swe_predicted_2022-1...\n10 2023-12-10  ...  ../swe_forecasting/output/swe_predicted_2023-1...\n11 2023-10-03  ...  ../swe_forecasting/output/swe_predicted_2023-1...\n[12 rows x 3 columns]\n",
  "history_begin_time" : 1703701333743,
  "history_end_time" : 1703701334570,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "CCpj5zroxgNB",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_file_path\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"file path\": target_geotiff_file\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"../swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2023-12-27\ntest start date:  2023-05-10\ntest end date:  2023-12-11\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/home/chetana/gw-workspace/CCpj5zroxgNB/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/CCpj5zroxgNB/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/CCpj5zroxgNB/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/CCpj5zroxgNB/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/CCpj5zroxgNB/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/CCpj5zroxgNB/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/CCpj5zroxgNB/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/CCpj5zroxgNB/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/CCpj5zroxgNB/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/CCpj5zroxgNB/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/CCpj5zroxgNB/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/CCpj5zroxgNB/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/CCpj5zroxgNB/deploy_images_to_website.py\", line 184, in <module>\n    refresh_available_date_list()\n  File \"/home/chetana/gw-workspace/CCpj5zroxgNB/deploy_images_to_website.py\", line 127, in refresh_available_date_list\n    df.to_csv(\"../swe_forecasting/date_list.csv\", index=False)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/util/_decorators.py\", line 211, in wrapper\n    return func(*args, **kwargs)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/generic.py\", line 3720, in to_csv\n    return DataFrameRenderer(formatter).to_csv(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/util/_decorators.py\", line 211, in wrapper\n    return func(*args, **kwargs)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/io/formats/format.py\", line 1189, in to_csv\n    csv_formatter.save()\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/io/formats/csvs.py\", line 241, in save\n    with get_handle(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/io/common.py\", line 734, in get_handle\n    check_parent_directory(str(handle))\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/io/common.py\", line 597, in check_parent_directory\n    raise OSError(rf\"Cannot save file into a non-existent directory: '{parent}'\")\nOSError: Cannot save file into a non-existent directory: '../swe_forecasting'\n",
  "history_begin_time" : 1703701297232,
  "history_end_time" : 1703701298124,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "ujoBpGTJSrbo",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_file_path\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"file path\": target_geotiff_file\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2023-12-27\ntest start date:  2023-05-10\ntest end date:  2023-12-11\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/home/chetana/gw-workspace/ujoBpGTJSrbo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/ujoBpGTJSrbo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/ujoBpGTJSrbo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/ujoBpGTJSrbo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/ujoBpGTJSrbo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/ujoBpGTJSrbo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/ujoBpGTJSrbo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/ujoBpGTJSrbo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/ujoBpGTJSrbo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/ujoBpGTJSrbo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/ujoBpGTJSrbo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/ujoBpGTJSrbo/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date  ...                                          file path\n0  2022-10-11  ...  /var/www/html/swe_forecasting/output/swe_predi...\n1  2023-12-24  ...  /var/www/html/swe_forecasting/output/swe_predi...\n2  2022-12-23  ...  /var/www/html/swe_forecasting/output/swe_predi...\n3  2023-12-12  ...  /var/www/html/swe_forecasting/output/swe_predi...\n4  2022-11-11  ...  /var/www/html/swe_forecasting/output/swe_predi...\n5  2023-01-20  ...  /var/www/html/swe_forecasting/output/swe_predi...\n6  2023-05-10  ...  /var/www/html/swe_forecasting/output/swe_predi...\n7  2022-11-25  ...  /var/www/html/swe_forecasting/output/swe_predi...\n8  2022-10-10  ...  /var/www/html/swe_forecasting/output/swe_predi...\n9  2022-10-20  ...  /var/www/html/swe_forecasting/output/swe_predi...\n10 2023-12-10  ...  /var/www/html/swe_forecasting/output/swe_predi...\n11 2023-10-03  ...  /var/www/html/swe_forecasting/output/swe_predi...\n[12 rows x 3 columns]\n",
  "history_begin_time" : 1703701255522,
  "history_end_time" : 1703701256325,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "HVec1gAHRcYZ",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"file path\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"file path\": target_geotiff_file\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2023-12-27\ntest start date:  2023-05-10\ntest end date:  2023-12-11\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\n/home/chetana/gw-workspace/HVec1gAHRcYZ/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/HVec1gAHRcYZ/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/HVec1gAHRcYZ/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/HVec1gAHRcYZ/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/HVec1gAHRcYZ/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/HVec1gAHRcYZ/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/HVec1gAHRcYZ/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/HVec1gAHRcYZ/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/HVec1gAHRcYZ/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/HVec1gAHRcYZ/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/HVec1gAHRcYZ/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n/home/chetana/gw-workspace/HVec1gAHRcYZ/deploy_images_to_website.py:121: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append({\n         date                                          file path\n0  2022-10-11  /var/www/html/swe_forecasting/output/swe_predi...\n1  2023-12-24  /var/www/html/swe_forecasting/output/swe_predi...\n2  2022-12-23  /var/www/html/swe_forecasting/output/swe_predi...\n3  2023-12-12  /var/www/html/swe_forecasting/output/swe_predi...\n4  2022-11-11  /var/www/html/swe_forecasting/output/swe_predi...\n5  2023-01-20  /var/www/html/swe_forecasting/output/swe_predi...\n6  2023-05-10  /var/www/html/swe_forecasting/output/swe_predi...\n7  2022-11-25  /var/www/html/swe_forecasting/output/swe_predi...\n8  2022-10-10  /var/www/html/swe_forecasting/output/swe_predi...\n9  2022-10-20  /var/www/html/swe_forecasting/output/swe_predi...\n10 2023-12-10  /var/www/html/swe_forecasting/output/swe_predi...\n11 2023-10-03  /var/www/html/swe_forecasting/output/swe_predi...\n",
  "history_begin_time" : 1703701189423,
  "history_end_time" : 1703701190221,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "l7zEqIAgJ7TW",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"file path\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"file path\": target_geotiff_file\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2023-12-27\ntest start date:  2023-05-10\ntest end date:  2023-12-11\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/l7zEqIAgJ7TW/deploy_images_to_website.py\", line 183, in <module>\n    refresh_available_date_list()\n  File \"/home/chetana/gw-workspace/l7zEqIAgJ7TW/deploy_images_to_website.py\", line 117, in refresh_available_date_list\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\nNameError: name 'datetime' is not defined\n",
  "history_begin_time" : 1703701174676,
  "history_end_time" : 1703701175469,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "mzYZrk9nOvgC",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"file path\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # Append a new row to the DataFrame\n    df = df.append({\n      \"date\": date, \n      \"file path\": target_geotiff_file\n    }, ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2023-12-27\ntest start date:  2023-05-10\ntest end date:  2023-12-11\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-05-10.png\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-05-10.png\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-05-10.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-05-10.tif\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map already exists\nDate: 2023-05-10\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map\n/var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map already exists\n/var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map already exists\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/mzYZrk9nOvgC/deploy_images_to_website.py\", line 182, in <module>\n    refresh_available_date_list()\n  File \"/home/chetana/gw-workspace/mzYZrk9nOvgC/deploy_images_to_website.py\", line 110, in refresh_available_date_list\n    df = pd.DataFrame(columns=columns)\nNameError: name 'pd' is not defined\n",
  "history_begin_time" : 1703701162994,
  "history_end_time" : 1703701163874,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "IqX8dGgGvKJR",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path):\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  pass\n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2023-12-27\ntest start date:  2023-12-24\ntest end date:  2023-12-11\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nDate: 2022-10-11\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map\nDate: 2023-12-24\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map\nDate: 2022-12-23\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map\nDate: 2023-12-12\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map\nDate: 2022-11-11\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map\nDate: 2023-01-20\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map\nDate: 2022-11-25\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map\nDate: 2022-10-10\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map\nDate: 2022-10-20\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map\nDate: 2023-12-10\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map\nDate: 2023-10-03\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map\n",
  "history_begin_time" : 1703691848036,
  "history_end_time" : 1703691848828,
  "history_notes" : "generate the mapserver configuration file",
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "ffxn7fOrHbvk",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path):\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125, 25, -100, 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  pass\n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2023-12-27\ntest start date:  2023-12-24\ntest end date:  2023-12-11\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nDate: 2022-10-11\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map\nDate: 2023-12-24\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map\nDate: 2022-12-23\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map\nDate: 2023-12-12\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map\nDate: 2022-11-11\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map\nDate: 2023-01-20\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map\nDate: 2022-11-25\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map\nDate: 2022-10-10\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map\nDate: 2022-10-20\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map\nDate: 2023-12-10\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map\nDate: 2023-10-03\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map\n",
  "history_begin_time" : 1703691668120,
  "history_end_time" : 1703691668900,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "O6WucCkB7jEd",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path):\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -180 -90 180 90\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  pass\n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2023-12-27\ntest start date:  2023-12-24\ntest end date:  2023-12-11\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\n/var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map already exists\nDate: 2023-12-24\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map\nDate: 2022-12-23\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map\nDate: 2023-12-12\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map\nDate: 2022-11-11\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map\nDate: 2023-01-20\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map\nDate: 2022-11-25\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map\nDate: 2022-10-10\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map\nDate: 2022-10-20\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map\nDate: 2023-12-10\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map\nDate: 2023-10-03\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map\n",
  "history_begin_time" : 1703691158605,
  "history_end_time" : 1703691159388,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "drB0pTgZ8cqd",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\nimport re\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path):\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -180 -90 180 90\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(long_string)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  pass\n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2023-12-27\ntest start date:  2023-12-24\ntest end date:  2023-12-11\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nDate: 2022-10-11\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/drB0pTgZ8cqd/deploy_images_to_website.py\", line 155, in <module>\n    create_mapserver_map_config(destination_file)\n  File \"/home/chetana/gw-workspace/drB0pTgZ8cqd/deploy_images_to_website.py\", line 99, in create_mapserver_map_config\n    file.write(long_string)\nNameError: name 'long_string' is not defined\n",
  "history_begin_time" : 1703691033214,
  "history_end_time" : 1703691034000,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "AbAIOZ8clm4I",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path):\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -180 -90 180 90\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"SCALE=0.0,30.0\"\n    PROCESSING \"SCALE_BUCKETS=15\"\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(long_string)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  pass\n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n        \n  \n\nif __name__ == \"__main__\":\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file)\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n",
  "history_output" : "today date = 2023-12-27\ntest start date:  2023-12-24\ntest end date:  2023-12-11\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-24.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-12.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-10.tif\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/AbAIOZ8clm4I/deploy_images_to_website.py\", line 154, in <module>\n    create_mapserver_map_config(destination_file)\n  File \"/home/chetana/gw-workspace/AbAIOZ8clm4I/deploy_images_to_website.py\", line 34, in create_mapserver_map_config\n    match = re.search(pattern, geotiff_file_name)\nNameError: name 're' is not defined\n",
  "history_begin_time" : 1703691018362,
  "history_end_time" : 1703691019753,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "0k6l2pbeeox",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\n\nif __name__ == \"__main__\":\n  source_folder = f\"{work_dir}/var_comparison/\"\n  destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-27\ntest start date:  2023-12-24\ntest end date:  2023-12-11\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-24.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-12-24.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-12-24.png\n",
  "history_begin_time" : 1703662787985,
  "history_end_time" : 1703662788823,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "c142qsimabo",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\n\nif __name__ == \"__main__\":\n  source_folder = f\"{work_dir}/var_comparison/\"\n  destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-27\ntest start date:  2023-12-12\ntest end date:  2023-12-11\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-12.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-12-12.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-12-12.png\n",
  "history_begin_time" : 1703659445085,
  "history_end_time" : 1703659445869,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "5a032jg0qal",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\n\nif __name__ == \"__main__\":\n  source_folder = f\"{work_dir}/var_comparison/\"\n  destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-27\ntest start date:  2023-12-10\ntest end date:  2023-12-11\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-12-10.png\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-12-10.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-12-10.png\n",
  "history_begin_time" : 1703656550460,
  "history_end_time" : 1703656551297,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "sP43PikQ82a5",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\n\nif __name__ == \"__main__\":\n  source_folder = f\"{work_dir}/var_comparison/\"\n  destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-27\ntest start date:  2023-10-03\ntest end date:  2023-10-11\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-10-03.png\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-10-03.tif\n",
  "history_begin_time" : 1703641937668,
  "history_end_time" : 1703641938445,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "1qvZS1Tl7kPx",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\n\nif __name__ == \"__main__\":\n  source_folder = f\"{work_dir}/var_comparison/\"\n  destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-27\ntest start date:  2023-10-03\ntest end date:  2023-10-11\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-10-03.png\n",
  "history_begin_time" : 1703641736394,
  "history_end_time" : 1703641737167,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "sgfyedw7r1g",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\n\nif __name__ == \"__main__\":\n  source_folder = f\"{work_dir}/var_comparison/\"\n  destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-26\ntest start date:  2023-10-03\ntest end date:  2023-10-11\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-10-03.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-10-03.png\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-10-03.tif\n",
  "history_begin_time" : 1703629993892,
  "history_end_time" : 1703629994677,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "1kbqvaszxdh",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\n\nif __name__ == \"__main__\":\n  source_folder = f\"{work_dir}/var_comparison/\"\n  destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-26\ntest start date:  2022-11-25\ntest end date:  2023-10-11\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-11-25.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_all_variables_2022-11-25.png\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2022-11-25.tif\n",
  "history_begin_time" : 1703626523642,
  "history_end_time" : 1703626524440,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "77ll7jeekj9",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\n\nif __name__ == \"__main__\":\n  source_folder = f\"{work_dir}/var_comparison/\"\n  destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-26\ntest start date:  2022-10-20\ntest end date:  2023-10-11\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\n",
  "history_begin_time" : 1703625218604,
  "history_end_time" : 1703625219386,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "cryl0h8cz3n",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\n\nif __name__ == \"__main__\":\n  source_folder = f\"{work_dir}/var_comparison/\"\n  destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-26\ntest start date:  2022-10-20\ntest end date:  2023-10-11\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_all_variables_2022-10-20.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-10-20.png\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2022-10-20.tif\n",
  "history_begin_time" : 1703625217258,
  "history_end_time" : 1703625218097,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "x1PRSXKKZqNi",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\n\nif __name__ == \"__main__\":\n  source_folder = f\"{work_dir}/var_comparison/\"\n  destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-26\ntest start date:  2023-01-20\ntest end date:  2023-10-11\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-01-20.png\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-latest.png\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-01-20.png\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-01-20.tif\n",
  "history_begin_time" : 1703624596589,
  "history_end_time" : 1703624598829,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "exmYyio0Zax9",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\n\nif __name__ == \"__main__\":\n  source_folder = f\"{work_dir}/var_comparison/\"\n  destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-18\ntest start date:  2023-01-20\ntest end date:  2023-10-11\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-latest.png\n",
  "history_begin_time" : 1702916141338,
  "history_end_time" : 1702916142120,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "0fptuyvdf0v",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\n\nif __name__ == \"__main__\":\n  source_folder = f\"{work_dir}/var_comparison/\"\n  destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-18\ntest start date:  2023-01-20\ntest end date:  2023-10-11\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_all_variables_2023-01-20.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-01-20.png\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2023-01-20.tif\n",
  "history_begin_time" : 1702876733275,
  "history_end_time" : 1702876734117,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "XzfIV24qwTpI",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\n\nif __name__ == \"__main__\":\n  source_folder = f\"{work_dir}/var_comparison/\"\n  destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-18\ntest start date:  2022-12-23\ntest end date:  2023-10-11\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2022-12-23.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_all_variables_2022-12-23.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-12-23.png\n",
  "history_begin_time" : 1702869719743,
  "history_end_time" : 1702869720547,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "ihkheqadbz5",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\n\nif __name__ == \"__main__\":\n  source_folder = f\"{work_dir}/var_comparison/\"\n  destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-18\ntest start date:  2022-12-23\ntest end date:  2023-10-11\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2022-12-23.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_all_variables_2022-12-23.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-12-23.png\n",
  "history_begin_time" : 1702869068960,
  "history_end_time" : 1702869069740,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "lztqqmyyg6o",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\n\nif __name__ == \"__main__\":\n  source_folder = f\"{work_dir}/var_comparison/\"\n  destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-18\ntest start date:  2022-11-11\ntest end date:  2023-10-11\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2022-11-11.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-11-11.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_all_variables_2022-11-11.png\n",
  "history_begin_time" : 1702867128421,
  "history_end_time" : 1702867129195,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "39yr6xdz8qv",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\n\nif __name__ == \"__main__\":\n  source_folder = f\"{work_dir}/var_comparison/\"\n  destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-18\ntest start date:  2022-10-11\ntest end date:  2023-10-11\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2022-10-11.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_all_variables_2022-10-11.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-10-11.png\n",
  "history_begin_time" : 1702866433158,
  "history_end_time" : 1702866434009,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "pEzFfoXoTzeF",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\n\nif __name__ == \"__main__\":\n  source_folder = f\"{work_dir}/var_comparison/\"\n  destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-18\ntest start date:  2022-10-10\ntest end date:  2023-10-11\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2022-10-10.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_all_variables_2022-10-10.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-10-10.png\n",
  "history_begin_time" : 1702857937943,
  "history_end_time" : 1702857938727,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "qCOeNzLf0TFL",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\n\nif __name__ == \"__main__\":\n  source_folder = f\"{work_dir}/var_comparison/\"\n  destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-17\ntest start date:  2022-10-10\ntest end date:  2023-10-11\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2022-10-10.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-10-10.png\n",
  "history_begin_time" : 1702857226277,
  "history_end_time" : 1702857227074,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "IrvXGcF3RYvX",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\n\nif __name__ == \"__main__\":\n  source_folder = f\"{work_dir}/var_comparison/\"\n  destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-17\ntest start date:  2022-10-10\ntest end date:  2023-10-11\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/swe_predicted_2022-10-10.tif\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_all_variables_2022-10-10.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-10-10.png\n",
  "history_begin_time" : 1702851963910,
  "history_end_time" : 1702851964689,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "y2EN9m3Z9OCL",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\n\nif __name__ == \"__main__\":\n  source_folder = f\"{work_dir}/var_comparison/\"\n  destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-17\ntest start date:  2022-10-10\ntest end date:  2023-10-11\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\n",
  "history_begin_time" : 1702840289508,
  "history_end_time" : 1702840290428,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "2W9uk0GfSRAS",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\n\nif __name__ == \"__main__\":\n  source_folder = f\"{work_dir}/var_comparison/\"\n  destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-17\ntest start date:  2022-10-10\ntest end date:  2023-10-11\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_all_variables_2022-10-10.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-10-10.png\n",
  "history_begin_time" : 1702790230907,
  "history_end_time" : 1702790231779,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "xuK9MzK5XHGx",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\n\nif __name__ == \"__main__\":\n  source_folder = f\"{work_dir}/var_comparison/\"\n  destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-17\ntest start date:  2022-10-10\ntest end date:  2023-10-11\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_all_variables_2022-10-10.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-10-10.png\n",
  "history_begin_time" : 1702789938122,
  "history_end_time" : 1702789938965,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "vVc3IDqT7lQm",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\n\nif __name__ == \"__main__\":\n  source_folder = f\"{work_dir}/var_comparison/\"\n  destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-17\ntest start date:  2022-10-10\ntest end date:  2023-10-11\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_all_variables_2022-10-10.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-10-10.png\n",
  "history_begin_time" : 1702789676002,
  "history_end_time" : 1702789676862,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "yra8RhijGPRV",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\n\nif __name__ == \"__main__\":\n  source_folder = f\"{work_dir}/var_comparison/\"\n  destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-17\ntest start date:  2022-10-10\ntest end date:  2023-10-11\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_all_variables_2022-10-10.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-10-10.png\n",
  "history_begin_time" : 1702789344397,
  "history_end_time" : 1702789345270,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "AGBFzSoR2hbn",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\n\nif __name__ == \"__main__\":\n  source_folder = f\"{work_dir}/var_comparison/\"\n  destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-17\ntest start date:  2022-12-27\ntest end date:  2023-10-11\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-12-27.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_all_variables_2022-12-27.png\n",
  "history_begin_time" : 1702785968592,
  "history_end_time" : 1702785969450,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "y7nxn73f0uw",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\n\nif __name__ == \"__main__\":\n  source_folder = f\"{work_dir}/var_comparison/\"\n  destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-15\ntest start date:  2022-12-27\ntest end date:  2023-10-11\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-12-27.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_all_variables_2022-12-27.png\n",
  "history_begin_time" : 1702662237315,
  "history_end_time" : 1702662238170,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "0jwqn9puq7a",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\n\nif __name__ == \"__main__\":\n  source_folder = f\"{work_dir}/var_comparison/\"\n  destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-15\ntest start date:  2022-12-27\ntest end date:  2023-10-11\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-12-27.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_all_variables_2022-12-27.png\n",
  "history_begin_time" : 1702639519423,
  "history_end_time" : 1702639520305,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "nDucOgylKrrE",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\n\nif __name__ == \"__main__\":\n  source_folder = f\"{work_dir}/var_comparison/\"\n  destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-15\ntest start date:  2022-10-04\ntest end date:  2023-10-11\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-15.png\n",
  "history_begin_time" : 1702632245348,
  "history_end_time" : 1702632246253,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "U9qGQ4WMjWMm",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\n\nif __name__ == \"__main__\":\n  source_folder = f\"{work_dir}/var_comparison/\"\n  destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-15\ntest start date:  2022-10-04\ntest end date:  2023-10-11\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-latest.png\n",
  "history_begin_time" : 1702632044558,
  "history_end_time" : 1702632045443,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "B017w8ye77Jp",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\n\nif __name__ == \"__main__\":\n  source_folder = f\"{work_dir}/var_comparison/\"\n  destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-15\ntest start date:  2022-10-04\ntest end date:  2023-10-11\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_all_variables_2022-10-04.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-10-04.png\n",
  "history_begin_time" : 1702631545762,
  "history_end_time" : 1702631546643,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "dpgp0cu4whr",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\n\nif __name__ == \"__main__\":\n  source_folder = f\"{work_dir}/var_comparison/\"\n  destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-11\ntest start date:  2022-12-21\ntest end date:  2023-10-11\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_all_variables_2022-12-21.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-12-21.png\n",
  "history_begin_time" : 1702276291639,
  "history_end_time" : 1702276292516,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "ykx428q6902",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\n\nif __name__ == \"__main__\":\n  source_folder = f\"{work_dir}/var_comparison/\"\n  destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-11\ntest start date:  2022-12-21\ntest end date:  2023-10-09\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_all_variables_2022-12-21.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-12-21.png\n",
  "history_begin_time" : 1702262661928,
  "history_end_time" : 1702262662788,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "ncQixiFmwohP",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\n\nif __name__ == \"__main__\":\n  source_folder = f\"{work_dir}/var_comparison/\"\n  destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-11\ntest start date:  2022-12-21\ntest end date:  2023-10-09\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-10-09.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_all_variables_2022-10-09.png\n",
  "history_begin_time" : 1702260447125,
  "history_end_time" : 1702260447967,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "TS1EQ3HFNYEn",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\n\nif __name__ == \"__main__\":\n  source_folder = f\"{work_dir}/var_comparison/\"\n  destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-11\ntest start date:  2022-12-21\ntest end date:  2023-10-09\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-10-09.png\n",
  "history_begin_time" : 1702258663291,
  "history_end_time" : 1702258664254,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "wjayz2p4Yzud",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\n\nif __name__ == \"__main__\":\n  source_folder = f\"{work_dir}/var_comparison/\"\n  destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-11\ntest start date:  2022-12-21\ntest end date:  2023-10-09\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-10-09.png\n",
  "history_begin_time" : 1702258306089,
  "history_end_time" : 1702258307062,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "A8Op5XJBEK6d",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\n\nif __name__ == \"__main__\":\n  source_folder = f\"{work_dir}/var_comparison/\"\n  destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-11\ntest start date:  2022-12-21\ntest end date:  2023-10-09\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-12-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_all_variables_2022-12-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-10-09.png\n",
  "history_begin_time" : 1702257161216,
  "history_end_time" : 1702257162079,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "sk21mn2pccr",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\n\nif __name__ == \"__main__\":\n  source_folder = f\"{work_dir}/var_comparison/\"\n  destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n    # Loop through the files in the source folder\n    for filename in os.listdir(source_folder):\n      # Check if the file is a PNG file\n      if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n\n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-11\ntest start date:  2022-12-15\ntest end date:  2023-10-09\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\n",
  "history_begin_time" : 1702256017796,
  "history_end_time" : 1702256018627,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "usjo9dgYS9Wj",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\n\nif __name__ == \"__main__\":\n  source_folder = f\"{work_dir}/var_comparison/\"\n  destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n    # Loop through the files in the source folder\n    for filename in os.listdir(source_folder):\n      # Check if the file is a PNG file\n      if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n\n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-11\ntest start date:  2022-10-09\ntest end date:  2023-10-09\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\n",
  "history_begin_time" : 1702253423960,
  "history_end_time" : 1702253424820,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "gKhpVybDPtBh",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\n\nif __name__ == \"__main__\":\n  source_folder = f\"{work_dir}/var_comparison/\"\n  destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n    # Loop through the files in the source folder\n    for filename in os.listdir(source_folder):\n      # Check if the file is a PNG file\n      if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n\n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-11\ntest start date:  2022-10-09\ntest end date:  2023-10-09\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\n",
  "history_begin_time" : 1702253356602,
  "history_end_time" : 1702253357481,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "FvwEslqAaIHg",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\n\nif __name__ == \"__main__\":\n  source_folder = f\"{work_dir}/var_comparison/\"\n  destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{work_dir}/testing_output/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n    # Loop through the files in the source folder\n    for filename in os.listdir(source_folder):\n      # Check if the file is a PNG file\n      if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n\n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-11\ntest start date:  2022-10-09\ntest end date:  2023-10-09\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\n",
  "history_begin_time" : 1702253323612,
  "history_end_time" : 1702253324447,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "6b5l34JDMChY",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-09\ntest start date:  2022-12-15\ntest end date:  2023-10-07\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-12-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_all_variables_2022-12-15.png\n",
  "history_begin_time" : 1702135683477,
  "history_end_time" : 1702135684359,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "1vuv9lhtj89",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-08\ntest start date:  2022-12-15\ntest end date:  2023-10-07\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-12-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_all_variables_2022-12-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_all_variables_2022-10-05.png\n",
  "history_begin_time" : 1702060249169,
  "history_end_time" : 1702060250155,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "xECfyG26Uu3g",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-08\ntest start date:  2022-10-05\ntest end date:  2023-10-07\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-10-05.png\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-15.png\n",
  "history_begin_time" : 1702043562968,
  "history_end_time" : 1702043563857,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "T320WzadU0em",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-08\ntest start date:  2022-10-05\ntest end date:  2023-10-07\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-10-05.png\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_all_variables_2022-10-05.png\n",
  "history_begin_time" : 1702016811313,
  "history_end_time" : 1702016812179,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "P2waqkyXtiiP",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-06\ntest start date:  2022-10-05\ntest end date:  2023-10-07\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-10-05.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_all_variables_2022-10-05.png\n",
  "history_begin_time" : 1701876084217,
  "history_end_time" : 1701876085213,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "conkrtvqicr",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-06\ntest start date:  2022-10-05\ntest end date:  2023-10-07\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_all_variables_2022-10-05.png\n",
  "history_begin_time" : 1701846325912,
  "history_end_time" : 1701846326837,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "EcCLQq4SmfBH",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-06\ntest start date:  2022-10-05\ntest end date:  2023-10-07\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-21.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-10-05.png\n",
  "history_begin_time" : 1701841155794,
  "history_end_time" : 1701841156704,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "Xyh4zA0XGbLQ",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-06\ntest start date:  2022-10-05\ntest end date:  2023-10-07\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-10-05.png\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-13.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_all_variables_2022-10-05.png\n",
  "history_begin_time" : 1701838422304,
  "history_end_time" : 1701838423288,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "U000hpO2UgSd",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-05\ntest start date:  2022-10-05\ntest end date:  2023-10-07\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-21.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-10-05.png\n",
  "history_begin_time" : 1701760515129,
  "history_end_time" : 1701760516580,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "xfP2ynrGifge",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-04\ntest start date:  2022-10-05\ntest end date:  2023-10-07\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-21.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_all_variables_2022-11-12.png\n",
  "history_begin_time" : 1701658529947,
  "history_end_time" : 1701658530865,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "b5gAP236RdKv",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-12-03\ntest start date:  2022-11-12\ntest end date:  2023-10-07\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-11-12.png\n",
  "history_begin_time" : 1701615950741,
  "history_end_time" : 1701615952111,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "vfylhCnWOYoO",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-29\ntest start date:  2022-11-12\ntest end date:  2023-10-07\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-21.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-11-12.png\n",
  "history_begin_time" : 1701272880333,
  "history_end_time" : 1701272881178,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "DQ77DG3luBLs",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-29\ntest start date:  2022-11-12\ntest end date:  2023-10-07\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-21.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-11-12.png\n",
  "history_begin_time" : 1701272377091,
  "history_end_time" : 1701272377959,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "j3qc5ulch9j",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-29\ntest start date:  2022-11-12\ntest end date:  2023-10-07\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-21.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-11-12.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_all_variables_2022-11-12.png\n",
  "history_begin_time" : 1701270105619,
  "history_end_time" : 1701270106499,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "17vh0b2fsxl",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-29\ntest start date:  2022-11-12\ntest end date:  2023-10-07\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-21.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-11-12.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_all_variables_2022-11-12.png\n",
  "history_begin_time" : 1701245815093,
  "history_end_time" : 1701245815968,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "h04z4ywofcb",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-29\ntest start date:  2022-11-12\ntest end date:  2023-10-07\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-21.png\n",
  "history_begin_time" : 1701234354624,
  "history_end_time" : 1701234355469,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "HmxscOWWEjMZ",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-29\ntest start date:  2022-11-12\ntest end date:  2023-10-07\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-21.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-11-12.png\n",
  "history_begin_time" : 1701233655615,
  "history_end_time" : 1701233656491,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "219207yhbnj",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-29\ntest start date:  2022-11-12\ntest end date:  2023-10-07\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-11-12.png\n",
  "history_begin_time" : 1701231574260,
  "history_end_time" : 1701231575121,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "ol3inynbpaz",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-29\ntest start date:  2022-11-15\ntest end date:  2023-10-07\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-21.png\n",
  "history_begin_time" : 1701230460834,
  "history_end_time" : 1701230461690,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "nxpharrmnev",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-29\ntest start date:  2022-11-15\ntest end date:  2023-10-07\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-21.png\n",
  "history_begin_time" : 1701230053713,
  "history_end_time" : 1701230054575,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "OLN1KZ2brsaN",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-29\ntest start date:  2022-11-15\ntest end date:  2023-10-07\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-11-15.png\n",
  "history_begin_time" : 1701229487318,
  "history_end_time" : 1701229488197,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "GxyEQWBnd2Ed",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-29\ntest start date:  2022-11-15\ntest end date:  2023-10-07\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-11-15.png\n",
  "history_begin_time" : 1701229059622,
  "history_end_time" : 1701229060494,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "c4btkpr7qfj",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-29\ntest start date:  2022-11-15\ntest end date:  2023-10-07\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-21.png\n",
  "history_begin_time" : 1701228964241,
  "history_end_time" : 1701228965130,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "d62v0efvm67",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-29\ntest start date:  2022-11-15\ntest end date:  2023-10-07\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-21.png\n",
  "history_begin_time" : 1701228448502,
  "history_end_time" : 1701228449377,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "qe0wlgn630r",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-29\ntest start date:  2022-11-15\ntest end date:  2023-10-07\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-13.png\n",
  "history_begin_time" : 1701228297999,
  "history_end_time" : 1701228298836,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "vk4twpbslh4",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-29\ntest start date:  2022-11-15\ntest end date:  2023-10-07\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-6.png\n",
  "history_begin_time" : 1701228167374,
  "history_end_time" : 1701228168281,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "hjxz5hg8320",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-29\ntest start date:  2022-11-15\ntest end date:  2023-10-07\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_all_variables_2022-11-15.png\n",
  "history_begin_time" : 1701228099124,
  "history_end_time" : 1701228099965,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "dkvju1c4a9d",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-29\ntest start date:  2022-11-15\ntest end date:  2023-10-07\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-12.png\n",
  "history_begin_time" : 1701227973068,
  "history_end_time" : 1701227973996,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "ipNxEcHXC16s",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-29\ntest start date:  2022-11-15\ntest end date:  2023-10-07\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-19.png\n",
  "history_begin_time" : 1701227821431,
  "history_end_time" : 1701227822305,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "bcWYcrcM2ijM",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-29\ntest start date:  2022-11-15\ntest end date:  2023-10-07\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_all_variables_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-19.png\n",
  "history_begin_time" : 1701227427765,
  "history_end_time" : 1701227428629,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "U6pFJcb1h4zO",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-29\ntest start date:  2022-11-15\ntest end date:  2023-10-07\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_all_variables_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-19.png\n",
  "history_begin_time" : 1701226768202,
  "history_end_time" : 1701226769081,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "qUofLaFYr5lL",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-29\ntest start date:  2022-11-15\ntest end date:  2023-10-07\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-15.png\n",
  "history_begin_time" : 1701226585533,
  "history_end_time" : 1701226586427,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "oDyoh4Kk7aZA",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-29\ntest start date:  2022-11-15\ntest end date:  2023-10-07\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_all_variables_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-16.png\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-23.png\n",
  "history_begin_time" : 1701225446606,
  "history_end_time" : 1701225447446,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "1EOtWcimlw9L",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-29\ntest start date:  2022-11-15\ntest end date:  2023-10-07\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-11.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_all_variables_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-latest.png\n",
  "history_begin_time" : 1701224270103,
  "history_end_time" : 1701224271928,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "WdnSKwOlifOt",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-26\ntest start date:  2022-11-15\ntest end date:  2023-10-07\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-13.png\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-18.png\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-12.png\n",
  "history_begin_time" : 1701022673983,
  "history_end_time" : 1701022674937,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "TV0ulLKn4Xy1",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-26\ntest start date:  2022-11-15\ntest end date:  2023-10-07\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_all_variables_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-20.png\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-19.png\n",
  "history_begin_time" : 1701022482160,
  "history_end_time" : 1701022483066,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "XK7xyXlAGZee",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-26\ntest start date:  2022-11-15\ntest end date:  2023-10-07\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-21.png\n",
  "history_begin_time" : 1701021582309,
  "history_end_time" : 1701021583152,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "EX6abeO7IS3e",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-26\ntest start date:  2022-11-15\ntest end date:  2023-10-07\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_all_variables_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-23.png\n",
  "history_begin_time" : 1701021266150,
  "history_end_time" : 1701021267064,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "TvSyCBlOpJ9x",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-26\ntest start date:  2022-11-15\ntest end date:  2023-10-07\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_all_variables_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-29.png\n",
  "history_begin_time" : 1701020664832,
  "history_end_time" : 1701020665906,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "4bcfF7GWZ6Sz",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-26\ntest start date:  2022-10-05\ntest end date:  2023-10-07\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-10-05.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_all_variables_2022-10-05.png\n",
  "history_begin_time" : 1701013874286,
  "history_end_time" : 1701013875206,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "ki5tonqdqnk",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-26\ntest start date:  2022-11-25\ntest end date:  2023-10-07\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-11-25.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_all_variables_2022-11-25.png\n",
  "history_begin_time" : 1700977303041,
  "history_end_time" : 1700977303923,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "y8jmaP78l4qH",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-26\ntest start date:  2022-11-05\ntest end date:  2023-10-07\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_all_variables_2022-11-05.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-11-05.png\n",
  "history_begin_time" : 1700974219878,
  "history_end_time" : 1700974220797,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "p5vyhfl9ioj",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-25\ntest start date:  2022-11-05\ntest end date:  2023-10-07\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_all_variables_2022-11-05.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-11-05.png\n",
  "history_begin_time" : 1700886055343,
  "history_end_time" : 1700886056216,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "tSVWERjYgdP0",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-25\ntest start date:  2022-10-05\ntest end date:  2023-10-07\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-10-05.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_all_variables_2022-10-05.png\n",
  "history_begin_time" : 1700884843862,
  "history_end_time" : 1700884844771,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "xoMEADwuIjbG",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-25\ntest start date:  2022-10-05\ntest end date:  2023-10-07\n/home/chetana\n2022275\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-21.png\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-32.png\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-29.png\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-16.png\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-31.png\n",
  "history_begin_time" : 1700884307880,
  "history_end_time" : 1700884309200,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "zq79z4y7o6m",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1700471604870,
  "history_end_time" : 1700471606690,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "x6k62n8nmsz",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1700468951494,
  "history_end_time" : 1700468953260,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "u1ZmzFfRtxTY",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-20\ntest start date:  2022-12-15\ntest end date:  2023-10-07\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-12-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_all_variables_2022-12-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-12.png\n",
  "history_begin_time" : 1700467443482,
  "history_end_time" : 1700467444564,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "wwpPxKh14wjz",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-20\ntest start date:  2022-12-15\ntest end date:  2023-10-07\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-12-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_all_variables_2022-12-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-10-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_all_variables_2022-10-15.png\n",
  "history_begin_time" : 1700464143684,
  "history_end_time" : 1700464145360,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "Cv8bJ4GEQmHZ",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-20\ntest start date:  2022-10-15\ntest end date:  2023-10-07\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/final_merged_data_3yrs_cleaned_v3_time_series_cumulative_v1.csv.png\n",
  "history_begin_time" : 1700457108343,
  "history_end_time" : 1700457109331,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "jCWfin7d1lpe",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-20\ntest start date:  2022-10-15\ntest end date:  2023-10-07\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_date_2022-10-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_lat_2022-10-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_potential_evapotranspiration_2022-10-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_SWE_2022-10-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_slope_2022-10-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-10-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_all_variables_2022-10-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_aspect_2022-10-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_wind_speed_2022-10-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_relative_humidity_rmin_2022-10-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_lon_2022-10-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_precipitation_amount_2022-10-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_air_temperature_tmmn_2022-10-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_air_temperature_tmmx_2022-10-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_relative_humidity_rmax_2022-10-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_mean_vapor_pressure_deficit_2022-10-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_northness_2022-10-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_elevation_2022-10-15.png\n",
  "history_begin_time" : 1700452821851,
  "history_end_time" : 1700452823807,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "minbixiom44",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-20\ntest start date:  2022-10-15\ntest end date:  2023-10-07\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\n",
  "history_begin_time" : 1700448624553,
  "history_end_time" : 1700448627218,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "dyjiap347yq",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-20\ntest start date:  2022-10-15\ntest end date:  2023-10-07\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_SWE_2022-10-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-10-15.png\n",
  "history_begin_time" : 1700448603194,
  "history_end_time" : 1700448604152,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "61280d8wi71v",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-20\ntest start date:  2022-11-15\ntest end date:  2023-10-07\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_northness_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_potential_evapotranspiration_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_air_temperature_tmmx_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_SWE_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_mean_vapor_pressure_deficit_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_date_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_relative_humidity_rmin_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_lat_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_precipitation_amount_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_elevation_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_air_temperature_tmmn_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_lon_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_wind_speed_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_relative_humidity_rmax_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_slope_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_aspect_2022-11-15.png\n",
  "history_begin_time" : 1700446751897,
  "history_end_time" : 1700446753016,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "GydJwvELp0AQ",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-20\ntest start date:  2022-11-15\ntest end date:  2023-10-07\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_northness_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_potential_evapotranspiration_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_air_temperature_tmmx_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_SWE_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_mean_vapor_pressure_deficit_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_date_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_relative_humidity_rmin_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_lat_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_precipitation_amount_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_elevation_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_air_temperature_tmmn_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_lon_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_wind_speed_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_relative_humidity_rmax_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_slope_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_aspect_2022-11-15.png\n",
  "history_begin_time" : 1700443967488,
  "history_end_time" : 1700443968345,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "HQQFFJE3B6q5",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-20\ntest start date:  2022-11-15\ntest end date:  2023-10-07\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_northness_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_potential_evapotranspiration_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_air_temperature_tmmx_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_SWE_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_mean_vapor_pressure_deficit_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_date_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_relative_humidity_rmin_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_lat_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_precipitation_amount_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_elevation_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_air_temperature_tmmn_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_lon_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_wind_speed_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_relative_humidity_rmax_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_slope_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_aspect_2022-11-15.png\n",
  "history_begin_time" : 1700443748306,
  "history_end_time" : 1700443749906,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "r6cojz8jpsh",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1700230079625,
  "history_end_time" : 1700230081077,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "raaymx1ogl1",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1700229024686,
  "history_end_time" : 1700229026109,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "0kmo3u37gs7",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1700210226025,
  "history_end_time" : 1700210227448,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "qapus8u71km",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1700209795102,
  "history_end_time" : 1700209796533,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "4j9210wy3g7",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1700209740151,
  "history_end_time" : 1700209741582,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "bujKmVg8nhPj",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-17\ntest start date:  2022-11-15\ntest end date:  2023-10-07\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-11-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-14.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-10-04.png\n",
  "history_begin_time" : 1700204364324,
  "history_end_time" : 1700204365182,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "hvmIWy4CpJla",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "",
  "history_begin_time" : 1700203450890,
  "history_end_time" : 1700203451558,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "mFY3gtLJPSNG",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-17\ntest start date:  2022-10-04\ntest end date:  2023-10-07\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-10.png\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-8.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-10-04.png\n",
  "history_begin_time" : 1700203056102,
  "history_end_time" : 1700203057041,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "BR5HJsvteYju",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-17\ntest start date:  2022-10-04\ntest end date:  2023-10-07\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-8.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-10-04.png\n",
  "history_begin_time" : 1700202625446,
  "history_end_time" : 1700202626588,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "rUgGaHhfPAyr",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-17\ntest start date:  2022-10-04\ntest end date:  2023-10-07\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-10-04.png\n",
  "history_begin_time" : 1700202336652,
  "history_end_time" : 1700202337722,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "upOELALWgKZw",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-17\ntest start date:  2022-10-04\ntest end date:  2023-10-07\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-4.png\n",
  "history_begin_time" : 1700202230523,
  "history_end_time" : 1700202231360,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "srn73ier86v",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-17\ntest start date:  2022-10-04\ntest end date:  2023-10-07\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-10-04.png\n",
  "history_begin_time" : 1700202029494,
  "history_end_time" : 1700202030348,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "uxcrtv15tk2",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-17\ntest start date:  2023-10-04\ntest end date:  2023-10-07\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-10.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-10-04.png\n",
  "history_begin_time" : 1700201151754,
  "history_end_time" : 1700201153131,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "nr8jw5a15p9",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1700145682701,
  "history_end_time" : 1700145684146,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "q8y5jlzfnpp",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1700143309326,
  "history_end_time" : 1700143310763,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "eo09p7wacxr",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1700141630219,
  "history_end_time" : 1700141631640,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "rwlz5v0t2n0",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1700134144209,
  "history_end_time" : 1700134145635,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "clcxz929aqj",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1700133799395,
  "history_end_time" : 1700133800825,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "yu00oeuut2p",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-14\ntest start date:  2023-03-10\ntest end date:  2023-10-07\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-03-10.png\n",
  "history_begin_time" : 1699999672446,
  "history_end_time" : 1699999673615,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "o0qmhne63k1",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-14\ntest start date:  2023-01-10\ntest end date:  2023-10-07\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2023_predicted_swe_2023-01-10.png\n",
  "history_begin_time" : 1699985522815,
  "history_end_time" : 1699985524181,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "rjowegx6n2b",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-14\ntest start date:  2022-12-25\ntest end date:  2023-10-07\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-12-25.png\n",
  "history_begin_time" : 1699943657605,
  "history_end_time" : 1699943658480,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "qzkvkwf1254",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-14\ntest start date:  2022-11-15\ntest end date:  2023-10-07\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-11-15.png\n",
  "history_begin_time" : 1699939935300,
  "history_end_time" : 1699939936179,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "cbb7iv9npgj",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-14\ntest start date:  2022-12-17\ntest end date:  2023-10-07\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-12-17.png\n",
  "history_begin_time" : 1699938945172,
  "history_end_time" : 1699938946073,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "auEtiTZHENll",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-14\ntest start date:  2022-12-16\ntest end date:  2023-10-07\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-12-16.png\n",
  "history_begin_time" : 1699936620905,
  "history_end_time" : 1699936621786,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "2zncQgn0svqK",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-14\ntest start date:  2022-12-16\ntest end date:  2023-10-07\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-12-16.png\n",
  "history_begin_time" : 1699935352658,
  "history_end_time" : 1699935354069,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "0wc9u77kDK1l",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-14\ntest start date:  2022-12-16\ntest end date:  2023-10-07\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-12-16.png\n",
  "history_begin_time" : 1699925284780,
  "history_end_time" : 1699925286439,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "Rrerq89ntzDZ",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-13\ntest start date:  2022-12-16\ntest end date:  2023-10-07\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-27.png\n",
  "history_begin_time" : 1699882423450,
  "history_end_time" : 1699882424332,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "ZfhsKD2prHTZ",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-13\ntest start date:  2022-12-16\ntest end date:  2023-10-07\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-12-16.png\n",
  "history_begin_time" : 1699838916047,
  "history_end_time" : 1699838916906,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "vf5j34R49uij",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-13\ntest start date:  2022-12-15\ntest end date:  2023-10-07\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-27.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-12-15.png\n",
  "history_begin_time" : 1699837405841,
  "history_end_time" : 1699837406717,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "jvt0EIisG8aL",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-13\ntest start date:  2022-12-15\ntest end date:  2023-10-07\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-27.png\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-28.png\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-12-15.png\nCopied: /home/chetana/gridmet_test_run/testing_output/et-model-feature-importance-latest.png\n",
  "history_begin_time" : 1699836783598,
  "history_end_time" : 1699836784927,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "VP7K15HoUIib",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-12\ntest start date:  2022-10-16\ntest end date:  2023-10-07\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/gridmet_test_run/testing_output/2022_predicted_swe_2022-10-16.png\n",
  "history_begin_time" : 1699805517032,
  "history_end_time" : 1699805517878,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "mtApwXIrussC",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-12\ntest start date:  2022-10-16\ntest end date:  2023-10-07\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\n",
  "history_begin_time" : 1699805367824,
  "history_end_time" : 1699805368681,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "4EXkXL38epCr",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        \n",
  "history_output" : "today date = 2023-11-12\ntest start date:  2022-10-16\ntest end date:  2023-10-07\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\n",
  "history_begin_time" : 1699805166873,
  "history_end_time" : 1699805167734,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "T2mch0rUe6CZ",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n    else:\n        shutil.copy(source_file, destination_file)\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-11-12\ntest start date:  2022-10-16\ntest end date:  2023-10-07\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: importance_summary_plot_2023-02-12.png\nCopied: 2023_predicted_swe_2023-05-16.png\nCopied: 2018_predicted_swe_2018-06-16.png\nCopied: 2019_predicted_swe_2019-02-15.png\nCopied: 2018_predicted_swe_2018-06-02.png\nCopied: 2019_predicted_swe_2019-05-01.png\nCopied: 2018_predicted_swe_2018-10-20.png\nCopied: 2019_predicted_swe_2019-03-12.png\nCopied: 2022_predicted_swe_2022-03-15.png\nCopied: 2019_predicted_swe_2019-05-17.png\nCopied: 2022_predicted_swe_2022-12-29.png\nCopied: 2018_predicted_swe_2018-11-19.png\nCopied: 2019_predicted_swe_2019-01-13.png\nCopied: 2018_predicted_swe_2018-10-19.png\nCopied: 2017_predicted_swe_2017-12-01.png\nCopied: 2019_predicted_swe_2019-04-20.png\nCopied: 2019_predicted_swe_2019-04-07.png\nCopied: et-model-feature-importance-28.png\nCopied: 2019_predicted_swe_2019-04-17.png\nCopied: 2018_predicted_swe_2018-06-11.png\nCopied: 2019_predicted_swe_2019-02-21.png\nCopied: 2018_predicted_swe_2018-01-16.png\nCopied: 2019_predicted_swe_2019-02-04.png\nCopied: 2019_predicted_swe_2019-01-16.png\nCopied: 2019_predicted_swe_2019-06-04.png\nCopied: 2017_predicted_swe_2017-11-14.png\nCopied: 2019_predicted_swe_2019-02-03.png\nCopied: partial_dependence_summary_plot_2023-01-20.png\nCopied: 2018_predicted_swe_2018-12-07.png\nCopied: 2019_predicted_swe_2019-06-22.png\nCopied: 2018_predicted_swe_2018-11-03.png\nCopied: 2018_predicted_swe_2018-04-16.png\nCopied: 2018_predicted_swe_2018-11-14.png\nCopied: 2018_predicted_swe_2018-05-12.png\nCopied: 2019_predicted_swe_2019-03-16.png\nCopied: 2019_predicted_swe_2019-04-02.png\nCopied: 2019_predicted_swe_2019-01-06.png\nCopied: 2019_predicted_swe_2019-01-04.png\nCopied: 2019_predicted_swe_2019-02-23.png\nCopied: importance_summary_plot_2023-02-10.png\nCopied: 2019_predicted_swe_2019-05-02.png\nCopied: 2019_predicted_swe_2019-05-18.png\nCopied: 2018_predicted_swe_2018-10-16.png\nCopied: 2017_predicted_swe_2017-12-09.png\nCopied: 2023_pr_2023-02-10.png\nCopied: 2018_predicted_swe_2018-10-30.png\nCopied: 2023_predicted_swe_2023-05-26.png\nCopied: 2019_predicted_swe_2019-03-13.png\nCopied: 2018_predicted_swe_2018-10-02.png\nCopied: 2019_predicted_swe_2019-04-08.png\nCopied: 2018_predicted_swe_2018-12-29.png\nCopied: 2018_predicted_swe_2018-01-11.png\nCopied: 2019_predicted_swe_2019-03-18.png\nCopied: 2019_predicted_swe_2019-01-08.png\nCopied: 2018_predicted_swe_2018-01-12.png\nCopied: 2018_predicted_swe_2018-06-12.png\nCopied: 2019_predicted_swe_2019-03-27.png\nCopied: 2023_pr_2023-02-12.png\nCopied: 2019_predicted_swe_2019-02-13.png\nCopied: 2018_predicted_swe_2018-12-18.png\nCopied: 2023_pr_2023-03-16.png\nCopied: 2019_predicted_swe_2019-04-29.png\nCopied: 2018_predicted_swe_2018-05-25.png\nCopied: importance_summary_plot_latest_model.png\nCopied: 2018_predicted_swe_2018-12-22.png\nCopied: 2018_predicted_swe_2018-01-26.png\nCopied: 2018_predicted_swe_2018-02-15.png\nCopied: 2023_predicted_swe_2023-05-17.png\nCopied: 2018_predicted_swe_2018-12-05.png\nCopied: 2018_predicted_swe_2018-05-04.png\nCopied: 2019_predicted_swe_2019-02-09.png\nCopied: 2019_predicted_swe_2019-06-16.png\nCopied: 2017_predicted_swe_2017-11-09.png\nCopied: 2018_predicted_swe_2018-06-08.png\nCopied: 2019_predicted_swe_2019-06-07.png\nCopied: 2019_predicted_swe_2019-06-21.png\nCopied: 2019_predicted_swe_2019-02-18.png\nCopied: 2019_predicted_swe_2019-01-12.png\nCopied: 2018_predicted_swe_2018-04-19.png\nCopied: 2017_predicted_swe_2017-10-17.png\nCopied: 2017_predicted_swe_2017-11-20.png\nCopied: 2019_predicted_swe_2019-06-18.png\nCopied: 2018_predicted_swe_2018-06-30.png\nCopied: 2018_predicted_swe_2018-01-02.png\nCopied: 2018_predicted_swe_2018-11-18.png\nCopied: 2018_predicted_swe_2018-03-03.png\nCopied: 2018_predicted_swe_2018-03-26.png\nCopied: 2018_predicted_swe_2018-01-23.png\nCopied: 2019_predicted_swe_2019-05-15.png\nCopied: 2019_predicted_swe_2019-05-06.png\nCopied: 2017_predicted_swe_2017-10-03.png\nCopied: 2017_predicted_swe_2017-11-03.png\nCopied: 2019_predicted_swe_2019-06-15.png\nCopied: 2019_predicted_swe_2019-02-11.png\nCopied: 2019_predicted_swe_2019-06-28.png\nCopied: 2018_predicted_swe_2018-02-19.png\nCopied: 2023_pr_2023-03-02.png\nCopied: 2018_predicted_swe_2018-02-24.png\nCopied: 2017_predicted_swe_2017-11-12.png\nCopied: importance_summary_plot_2023-03-16.png\nCopied: 2018_predicted_swe_2018-04-30.png\nCopied: 2018_predicted_swe_2018-05-10.png\nCopied: et-model-feature-importance-21.png\nCopied: 2019_predicted_swe_2019-01-24.png\nCopied: 2019_predicted_swe_2019-06-29.png\nCopied: 2018_predicted_swe_2018-12-12.png\nCopied: 2022_predicted_swe_2022-01-17.png\nCopied: 2018_predicted_swe_2018-06-21.png\nCopied: 2019_predicted_swe_2019-04-22.png\nCopied: 2019_predicted_swe_2019-04-16.png\nCopied: 2018_predicted_swe_2018-01-31.png\nCopied: 2017_predicted_swe_2017-11-28.png\nCopied: 2018_predicted_swe_2018-12-04.png\nCopied: 2022_predicted_swe_2022-12-30.png\nCopied: 2019_predicted_swe_2019-03-05.png\nCopied: 2017_predicted_swe_2017-12-31.png\nCopied: 2018_predicted_swe_2018-01-04.png\nCopied: 2019_predicted_swe_2019-04-25.png\nCopied: 2017_predicted_swe_2017-10-31.png\nCopied: 2023_pr_2023-05-26.png\nCopied: 2023_predicted_swe_2023-05-25.png\nCopied: 2018_predicted_swe_2018-10-08.png\nCopied: 2019_predicted_swe_2019-05-22.png\nCopied: 2019_predicted_swe_2019-05-24.png\nCopied: 2018_predicted_swe_2018-05-24.png\nCopied: 2018_predicted_swe_2018-02-20.png\nCopied: 2018_predicted_swe_2018-03-19.png\nCopied: 2017_predicted_swe_2017-12-21.png\nCopied: 2019_predicted_swe_2019-01-14.png\nCopied: 2018_predicted_swe_2018-06-28.png\nCopied: 2018_predicted_swe_2018-05-11.png\nCopied: 2018_predicted_swe_2018-01-01.png\nCopied: 2017_predicted_swe_2017-12-16.png\nCopied: 2018_predicted_swe_2018-06-09.png\nCopied: 2018_predicted_swe_2018-11-26.png\nCopied: 2019_predicted_swe_2019-01-31.png\nCopied: 2018_predicted_swe_2018-05-15.png\nCopied: 2018_predicted_swe_2018-12-01.png\nCopied: 2017_predicted_swe_2017-11-11.png\nCopied: 2018_predicted_swe_2018-10-25.png\nCopied: 2018_predicted_swe_2018-11-28.png\nCopied: 2017_predicted_swe_2017-12-30.png\nCopied: 2019_predicted_swe_2019-03-21.png\nCopied: 2017_predicted_swe_2017-10-25.png\nCopied: 2019_predicted_swe_2019-04-18.png\nCopied: 2019_predicted_swe_2019-01-17.png\nCopied: 2017_predicted_swe_2017-12-10.png\nCopied: 2018_predicted_swe_2018-11-11.png\nCopied: 2019_predicted_swe_2019-02-19.png\nCopied: 2018_predicted_swe_2018-06-22.png\nCopied: 2017_predicted_swe_2017-11-07.png\nCopied: 2019_predicted_swe_2019-03-17.png\nCopied: 2017_predicted_swe_2017-10-02.png\nCopied: 2017_predicted_swe_2017-11-26.png\nCopied: 2019_predicted_swe_2019-02-26.png\nCopied: 2018_predicted_swe_2018-06-24.png\nCopied: 2019_predicted_swe_2019-01-28.png\nCopied: 2019_predicted_swe_2019-04-23.png\nCopied: 2023_pr_2023-05-17.png\nCopied: 2018_predicted_swe_2018-12-08.png\nCopied: 2018_predicted_swe_2018-01-19.png\nCopied: 2019_predicted_swe_2019-05-14.png\nCopied: 2018_predicted_swe_2018-10-09.png\nCopied: 2018_predicted_swe_2018-06-05.png\nCopied: 2018_predicted_swe_2018-01-27.png\nCopied: 2018_predicted_swe_2018-03-20.png\nCopied: 2018_predicted_swe_2018-10-11.png\nCopied: 2017_predicted_swe_2017-11-19.png\nCopied: 2018_predicted_swe_2018-02-14.png\nCopied: 2018_predicted_swe_2018-10-13.png\nCopied: 2022_predicted_swe_2022-01-16.png\nCopied: 2017_predicted_swe_2017-12-18.png\nCopied: 2019_predicted_swe_2019-05-07.png\nCopied: 2018_predicted_swe_2018-01-10.png\nCopied: 2017_predicted_swe_2017-10-18.png\nCopied: 2018_predicted_swe_2018-01-03.png\nCopied: 2023_predicted_swe_2023-02-12.png\nCopied: 2018_predicted_swe_2018-03-27.png\nCopied: 2019_predicted_swe_2019-06-09.png\nCopied: 2018_predicted_swe_2018-04-24.png\nCopied: 2019_predicted_swe_2019-06-25.png\nCopied: 2017_predicted_swe_2017-11-05.png\nCopied: 2018_predicted_swe_2018-04-28.png\nCopied: 2023_pr_2023-06-15.png\nCopied: 2019_predicted_swe_2019-03-23.png\nCopied: 2019_predicted_swe_2019-06-01.png\nCopied: 2017_predicted_swe_2017-11-21.png\nCopied: 2018_predicted_swe_2018-03-04.png\nCopied: 2017_predicted_swe_2017-10-15.png\nCopied: 2018_predicted_swe_2018-04-01.png\nCopied: 2019_predicted_swe_2019-01-01.png\nCopied: 2018_predicted_swe_2018-10-15.png\nCopied: 2018_predicted_swe_2018-01-09.png\nCopied: 2018_predicted_swe_2018-11-22.png\nCopied: 2022_predicted_swe_2022-04-17.png\nCopied: 2022_predicted_swe_2022-02-28.png\nCopied: 2019_predicted_swe_2019-04-11.png\nCopied: 2018_predicted_swe_2018-04-20.png\nCopied: 2022_pr_2022-06-15.png\nCopied: 2018_predicted_swe_2018-01-08.png\nCopied: 2017_predicted_swe_2017-10-24.png\nCopied: 2018_predicted_swe_2018-04-14.png\nCopied: 2019_predicted_swe_2019-01-18.png\nCopied: 2018_predicted_swe_2018-03-02.png\nCopied: 2019_predicted_swe_2019-02-20.png\nCopied: 2017_predicted_swe_2017-11-25.png\nCopied: 2018_predicted_swe_2018-11-10.png\nCopied: 2019_predicted_swe_2019-05-05.png\nCopied: 2017_predicted_swe_2017-11-29.png\nCopied: 2019_predicted_swe_2019-04-15.png\nCopied: 2019_predicted_swe_2019-01-30.png\nCopied: 2018_predicted_swe_2018-06-18.png\nCopied: 2018_pr_2018-01-01.png\nCopied: 2019_predicted_swe_2019-04-06.png\nCopied: 2018_predicted_swe_2018-12-10.png\nCopied: 2018_predicted_swe_2018-11-02.png\nCopied: 2018_predicted_swe_2018-06-25.png\nCopied: 2018_predicted_swe_2018-01-15.png\nCopied: 2022_predicted_swe_2022-10-15.png\nCopied: 2019_predicted_swe_2019-03-29.png\nCopied: 2018_predicted_swe_2018-03-28.png\nCopied: 2023_predicted_swe_2023-05-18.png\nCopied: 2023_pr_2023-02-11.png\nCopied: 2018_predicted_swe_2018-06-13.png\nCopied: 2018_predicted_swe_2018-12-26.png\nCopied: 2019_predicted_swe_2019-01-11.png\nCopied: 2017_predicted_swe_2017-12-11.png\nCopied: 2018_predicted_swe_2018-03-30.png\nCopied: 2022_predicted_swe_2022-02-22.png\nCopied: 2018_predicted_swe_2018-11-21.png\nCopied: 2018_predicted_swe_2018-05-01.png\nCopied: 2018_predicted_swe_2018-02-17.png\nCopied: 2018_predicted_swe_2018-04-12.png\nCopied: 2018_predicted_swe_2018-11-16.png\nCopied: 2023_predicted_swe_2023-01-18.png\nCopied: 2019_predicted_swe_2019-03-25.png\nCopied: 2017_predicted_swe_2017-11-02.png\nCopied: 2018_predicted_swe_2018-06-20.png\nCopied: 2022_predicted_swe_2022-10-03.png\nCopied: 2018_predicted_swe_2018-04-08.png\nCopied: 2017_predicted_swe_2017-10-06.png\nCopied: 2019_predicted_swe_2019-05-20.png\nCopied: 2018_predicted_swe_2018-05-02.png\nCopied: 2019_predicted_swe_2019-06-11.png\nCopied: 2017_predicted_swe_2017-12-14.png\nCopied: 2018_predicted_swe_2018-04-02.png\nCopied: 2019_predicted_swe_2019-04-01.png\nCopied: 2017_predicted_swe_2017-10-20.png\nCopied: 2018_predicted_swe_2018-10-03.png\nCopied: 2019_predicted_swe_2019-03-19.png\nCopied: 2018_predicted_swe_2018-10-10.png\nCopied: 2018_predicted_swe_2018-02-03.png\nCopied: 2018_predicted_swe_2018-04-21.png\nCopied: 2019_predicted_swe_2019-03-30.png\nCopied: importance_summary_plot_2023-09-15.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2017_predicted_swe_2017-10-10.png\nCopied: 2018_predicted_swe_2018-01-29.png\nCopied: 2018_predicted_swe_2018-03-10.png\nCopied: 2018_predicted_swe_2018-02-13.png\nCopied: 2018_predicted_swe_2018-04-13.png\nCopied: 2018_predicted_swe_2018-01-07.png\nCopied: 2019_predicted_swe_2019-04-05.png\nCopied: 2018_predicted_swe_2018-10-27.png\nCopied: 2018_predicted_swe_2018-02-09.png\nCopied: 2019_predicted_swe_2019-06-10.png\nCopied: 2019_predicted_swe_2019-02-24.png\nCopied: 2018_predicted_swe_2018-02-07.png\nCopied: 2019_predicted_swe_2019-06-13.png\nCopied: 2019_predicted_swe_2019-02-22.png\nCopied: 2019_predicted_swe_2019-05-13.png\nCopied: et-model-feature-importance-13.png\nCopied: 2023_predicted_swe_2023-01-19.png\nCopied: 2019_predicted_swe_2019-02-28.png\nCopied: 2017_predicted_swe_2017-12-06.png\nCopied: 2018_predicted_swe_2018-05-14.png\nCopied: 2018_predicted_swe_2018-10-22.png\nCopied: 2019_predicted_swe_2019-04-24.png\nCopied: 2023_predicted_swe_2023-01-20.png\nCopied: 2023_pr_2023-01-19.png\nCopied: 2019_predicted_swe_2019-01-29.png\nCopied: 2017_predicted_swe_2017-12-12.png\nCopied: 2018_predicted_swe_2018-02-12.png\nCopied: 2018_predicted_swe_2018-06-14.png\nCopied: 2018_predicted_swe_2018-11-08.png\nCopied: 2018_predicted_swe_2018-02-23.png\nCopied: 2022_pr_2022-02-28.png\nCopied: 2023_pr_2023-05-18.png\nCopied: 2023_pr_2023-03-15.png\nCopied: 2018_predicted_swe_2018-03-11.png\nCopied: 2019_predicted_swe_2019-04-14.png\nCopied: 2018_predicted_swe_2018-02-08.png\nCopied: 2019_predicted_swe_2019-04-30.png\nCopied: 2018_predicted_swe_2018-02-16.png\nCopied: 2018_predicted_swe_2018-10-26.png\nCopied: 2019_predicted_swe_2019-04-12.png\nCopied: 2019_predicted_swe_2019-05-19.png\nCopied: 2017_predicted_swe_2017-11-04.png\nCopied: 2019_predicted_swe_2019-01-21.png\nCopied: 2019_predicted_swe_2019-02-10.png\nCopied: 2018_predicted_swe_2018-06-19.png\nCopied: 2017_predicted_swe_2017-10-30.png\nCopied: 2018_predicted_swe_2018-03-12.png\nCopied: 2023_pr_2023-07-15.png\nCopied: 2019_predicted_swe_2019-04-09.png\nCopied: 2019_predicted_swe_2019-04-27.png\nCopied: 2017_predicted_swe_2017-12-28.png\nCopied: 2023_pr_2023-09-15.png\nCopied: 2018_predicted_swe_2018-03-23.png\nCopied: 2018_predicted_swe_2018-03-24.png\nCopied: 2019_predicted_swe_2019-03-14.png\nCopied: 2019_predicted_swe_2019-06-05.png\nCopied: 2018_predicted_swe_2018-10-07.png\nCopied: 2019_predicted_swe_2019-03-20.png\nCopied: 2019_predicted_swe_2019-03-31.png\nCopied: 2018_predicted_swe_2018-10-04.png\nCopied: 2018_predicted_swe_2018-04-26.png\nCopied: 2019_predicted_swe_2019-02-02.png\nCopied: 2019_predicted_swe_2019-04-26.png\nCopied: 2018_predicted_swe_2018-04-23.png\nCopied: et-model-feature-importance-26.png\nCopied: 2018_predicted_swe_2018-05-07.png\nCopied: 2019_predicted_swe_2019-03-01.png\nCopied: 2018_predicted_swe_2018-11-05.png\nCopied: 2023_predicted_swe_2023-03-15.png\nCopied: 2017_predicted_swe_2017-10-05.png\nCopied: 2018_predicted_swe_2018-03-07.png\nCopied: 2018_predicted_swe_2018-11-30.png\nCopied: shap_summary_plot_2023-01-20.png\nCopied: 2018_predicted_swe_2018-06-29.png\nCopied: 2017_predicted_swe_2017-11-06.png\nCopied: 2018_predicted_swe_2018-05-19.png\nCopied: 2023_pr_2023-01-20.png\nCopied: 2018_predicted_swe_2018-03-21.png\nCopied: 2018_predicted_swe_2018-05-03.png\nCopied: 2018_predicted_swe_2018-11-06.png\nCopied: 2017_predicted_swe_2017-12-24.png\nCopied: 2019_predicted_swe_2019-06-03.png\nCopied: 2019_predicted_swe_2019-01-25.png\nCopied: 2018_predicted_swe_2018-10-17.png\nCopied: 2018_predicted_swe_2018-10-01.png\nCopied: 2018_predicted_swe_2018-04-10.png\nCopied: importance_summary_plot_2023-05-16.png\nCopied: 2018_predicted_swe_2018-03-25.png\nCopied: 2018_predicted_swe_2018-04-07.png\nCopied: 2019_predicted_swe_2019-03-06.png\nCopied: 2019_predicted_swe_2019-03-11.png\nCopied: 2017_predicted_swe_2017-10-23.png\nCopied: 2019_predicted_swe_2019-03-24.png\nCopied: 2018_predicted_swe_2018-12-15.png\nCopied: 2018_predicted_swe_2018-02-05.png\nCopied: 2018_predicted_swe_2018-03-08.png\nCopied: 2018_predicted_swe_2018-04-18.png\nCopied: 2018_predicted_swe_2018-05-23.png\nCopied: 2018_predicted_swe_2018-05-26.png\nCopied: 2018_predicted_swe_2018-06-06.png\nCopied: 2019_predicted_swe_2019-06-08.png\nCopied: 2017_predicted_swe_2017-12-23.png\nCopied: 2019_predicted_swe_2019-02-14.png\nCopied: 2019_predicted_swe_2019-05-31.png\nCopied: 2019_predicted_swe_2019-06-19.png\nCopied: 2023_pr_2023-01-18.png\nCopied: 2019_predicted_swe_2019-02-08.png\nCopied: 2018_predicted_swe_2018-10-28.png\nCopied: 2019_predicted_swe_2019-05-04.png\nCopied: 2018_predicted_swe_2018-06-27.png\nCopied: 2017_predicted_swe_2017-11-08.png\nCopied: 2019_predicted_swe_2019-05-12.png\nCopied: 2017_predicted_swe_2017-10-29.png\nCopied: 2019_predicted_swe_2019-06-02.png\nCopied: 2017_predicted_swe_2017-11-30.png\nCopied: 2019_predicted_swe_2019-06-30.png\nCopied: 2019_predicted_swe_2019-02-27.png\nCopied: 2019_predicted_swe_2019-03-07.png\nCopied: 2018_predicted_swe_2018-03-31.png\nCopied: 2019_predicted_swe_2019-04-13.png\nCopied: 2018_predicted_swe_2018-02-18.png\nCopied: importance_summary_plot_2023-02-11.png\nCopied: 2023_pr_2023-05-28.png\nCopied: 2018_predicted_swe_2018-02-28.png\nCopied: 2017_predicted_swe_2017-12-29.png\nCopied: 2017_predicted_swe_2017-10-26.png\nCopied: 2018_predicted_swe_2018-11-23.png\nCopied: 2019_predicted_swe_2019-02-17.png\nCopied: 2018_predicted_swe_2018-05-20.png\nCopied: et-model-feature-importance-20.png\nCopied: 2018_predicted_swe_2018-10-06.png\nCopied: 2018_predicted_swe_2018-05-29.png\nCopied: 2018_predicted_swe_2018-12-06.png\nCopied: 2019_predicted_swe_2019-05-30.png\nCopied: 2019_predicted_swe_2019-05-29.png\nCopied: importance_summary_plot_2023-03-15.png\nCopied: 2017_predicted_swe_2017-10-14.png\nCopied: 2018_predicted_swe_2018-02-11.png\nCopied: 2019_predicted_swe_2019-06-26.png\nCopied: 2023_predicted_swe_2023-02-11.png\nCopied: 2023_pr_2023-01-15.png\nCopied: 2018_predicted_swe_2018-04-25.png\nCopied: 2017_predicted_swe_2017-11-01.png\nCopied: 2018_predicted_swe_2018-06-23.png\nCopied: 2017_predicted_swe_2017-12-08.png\nCopied: 2018_predicted_swe_2018-01-05.png\nCopied: 2018_predicted_swe_2018-11-13.png\nCopied: 2019_predicted_swe_2019-02-12.png\nCopied: 2019_predicted_swe_2019-05-09.png\nCopied: 2018_predicted_swe_2018-06-10.png\nCopied: 2019_predicted_swe_2019-01-09.png\nCopied: 2019_predicted_swe_2019-01-05.png\nCopied: 2017_predicted_swe_2017-12-02.png\nCopied: 2018_predicted_swe_2018-02-26.png\nCopied: 2017_predicted_swe_2017-12-26.png\nCopied: 2017_predicted_swe_2017-10-11.png\nCopied: 2019_predicted_swe_2019-02-01.png\nCopied: 2018_predicted_swe_2018-06-15.png\nCopied: 2017_predicted_swe_2017-12-13.png\nCopied: 2019_predicted_swe_2019-05-16.png\nCopied: 2018_predicted_swe_2018-12-28.png\nCopied: 2017_predicted_swe_2017-10-09.png\nCopied: 2019_predicted_swe_2019-01-03.png\nCopied: 2018_predicted_swe_2018-04-09.png\nCopied: 2017_predicted_swe_2017-10-13.png\nCopied: 2018_predicted_swe_2018-03-06.png\nCopied: importance_summary_plot_2023-06-15.png\nCopied: 2018_predicted_swe_2018-04-05.png\nCopied: 2022_pr_2022-01-16.png\nCopied: 2019_predicted_swe_2019-01-22.png\nCopied: 2017_predicted_swe_2017-10-22.png\nCopied: et-model-feature-importance-3.png\nCopied: 2018_predicted_swe_2018-06-04.png\nCopied: 2018_predicted_swe_2018-05-05.png\nCopied: 2023_predicted_swe_2023-01-15.png\nCopied: 2017_predicted_swe_2017-11-15.png\nCopied: 2018_predicted_swe_2018-11-04.png\nCopied: 2019_predicted_swe_2019-06-17.png\nCopied: 2018_predicted_swe_2018-05-08.png\nCopied: 2019_predicted_swe_2019-04-21.png\nCopied: 2018_predicted_swe_2018-01-22.png\nCopied: 2019_predicted_swe_2019-01-15.png\nCopied: 2018_predicted_swe_2018-04-17.png\nCopied: 2018_predicted_swe_2018-02-01.png\nCopied: 2018_predicted_swe_2018-05-27.png\nCopied: 2018_predicted_swe_2018-02-22.png\nCopied: 2018_predicted_swe_2018-11-07.png\nCopied: 2019_predicted_swe_2019-06-20.png\nCopied: 2018_predicted_swe_2018-12-09.png\nCopied: 2017_predicted_swe_2017-12-03.png\nCopied: 2019_predicted_swe_2019-06-14.png\nCopied: 2017_predicted_swe_2017-10-19.png\nCopied: 2018_predicted_swe_2018-12-23.png\nCopied: 2017_predicted_swe_2017-10-12.png\nCopied: 2019_predicted_swe_2019-05-11.png\nCopied: 2017_predicted_swe_2017-12-22.png\nCopied: 2017_predicted_swe_2017-11-23.png\nCopied: 2017_predicted_swe_2017-12-25.png\nCopied: importance_summary_plot_2023-07-15.png\nCopied: 2017_predicted_swe_2017-11-24.png\nCopied: 2018_predicted_swe_2018-06-07.png\nCopied: 2019_predicted_swe_2019-03-26.png\nCopied: 2019_predicted_swe_2019-03-04.png\nCopied: 2017_predicted_swe_2017-12-04.png\nCopied: 2019_predicted_swe_2019-05-25.png\nCopied: 2019_predicted_swe_2019-04-28.png\nCopied: 2022_pr_2022-12-29.png\nCopied: 2017_predicted_swe_2017-10-04.png\nCopied: 2017_predicted_swe_2017-12-27.png\nCopied: 2018_predicted_swe_2018-01-13.png\nCopied: 2018_predicted_swe_2018-03-18.png\nCopied: 2019_predicted_swe_2019-01-23.png\nCopied: 2023_predicted_swe_2023-03-02.png\nCopied: 2019_predicted_swe_2019-06-24.png\nCopied: 2022_pr_2022-10-15.png\nCopied: 2018_predicted_swe_2018-01-06.png\nCopied: 2018_predicted_swe_2018-01-25.png\nCopied: 2023_predicted_swe_2023-06-15.png\nCopied: 2018_predicted_swe_2018-05-17.png\nCopied: 2017_predicted_swe_2017-12-19.png\nCopied: 2018_predicted_swe_2018-02-21.png\nCopied: 2023_pr_2023-09-16.png\nCopied: 2018_predicted_swe_2018-02-27.png\nCopied: 2019_predicted_swe_2019-04-03.png\nCopied: 2018_predicted_swe_2018-02-04.png\nCopied: 2019_predicted_swe_2019-06-06.png\nCopied: 2019_predicted_swe_2019-01-10.png\nCopied: 2019_predicted_swe_2019-01-26.png\nCopied: 2022_pr_2022-02-22.png\nCopied: 2018_predicted_swe_2018-10-31.png\nCopied: 2018_predicted_swe_2018-05-22.png\nCopied: 2019_predicted_swe_2019-03-02.png\nCopied: 2018_predicted_swe_2018-12-20.png\nCopied: 2018_predicted_swe_2018-05-06.png\nCopied: 2018_predicted_swe_2018-11-29.png\nCopied: 2018_predicted_swe_2018-10-29.png\nCopied: 2019_predicted_swe_2019-05-21.png\nCopied: 2018_predicted_swe_2018-10-12.png\nCopied: 2018_predicted_swe_2018-11-09.png\nCopied: 2019_predicted_swe_2019-03-15.png\nCopied: 2019_predicted_swe_2019-05-27.png\nCopied: 2022_pr_2022-10-16.png\nCopied: 2018_predicted_swe_2018-04-04.png\nCopied: 2018_predicted_swe_2018-03-17.png\nCopied: 2022_pr_2022-04-17.png\nCopied: 2022_predicted_swe_2022-06-15.png\nCopied: 2017_predicted_swe_2017-12-05.png\nCopied: 2018_predicted_swe_2018-01-30.png\nCopied: 2018_predicted_swe_2018-12-30.png\nCopied: 2018_predicted_swe_2018-01-28.png\nCopied: 2019_predicted_swe_2019-01-20.png\nCopied: 2018_predicted_swe_2018-06-01.png\nCopied: 2017_predicted_swe_2017-11-10.png\nCopied: 2019_predicted_swe_2019-06-23.png\nCopied: 2018_predicted_swe_2018-04-11.png\nCopied: 2018_predicted_swe_2018-04-15.png\nCopied: 2018_predicted_swe_2018-04-06.png\nCopied: 2019_predicted_swe_2019-03-10.png\nCopied: 2018_predicted_swe_2018-04-03.png\nCopied: et-model-feature-importance-6.png\nCopied: 2018_predicted_swe_2018-10-21.png\nCopied: importance_summary_plot_2023-01-20.png\nCopied: 2018_predicted_swe_2018-03-13.png\nCopied: 2023_predicted_swe_2023-03-16.png\nCopied: 2018_predicted_swe_2018-12-11.png\nCopied: 2017_predicted_swe_2017-11-13.png\nCopied: importance_summary_plot_2023-05-17.png\nCopied: 2019_predicted_swe_2019-01-27.png\nCopied: 2017_predicted_swe_2017-12-20.png\nCopied: 2019_predicted_swe_2019-03-22.png\nCopied: 2018_predicted_swe_2018-10-05.png\nCopied: 2018_predicted_swe_2018-06-03.png\nCopied: 2018_predicted_swe_2018-04-27.png\nCopied: 2017_predicted_swe_2017-10-21.png\nCopied: 2017_predicted_swe_2017-10-27.png\nCopied: 2023_predicted_swe_2023-07-15.png\nCopied: 2023_predicted_swe_2023-09-16.png\nCopied: 2019_predicted_swe_2019-05-08.png\nCopied: 2023_predicted_swe_2023-02-10.png\nCopied: 2018_predicted_swe_2018-01-14.png\nCopied: 2019_predicted_swe_2019-04-19.png\nCopied: 2018_predicted_swe_2018-05-18.png\nCopied: 2018_predicted_swe_2018-05-21.png\nCopied: 2017_predicted_swe_2017-11-22.png\nCopied: 2018_predicted_swe_2018-12-13.png\nCopied: 2018_predicted_swe_2018-12-14.png\nCopied: 2017_predicted_swe_2017-10-01.png\nCopied: 2019_predicted_swe_2019-04-10.png\nCopied: 2017_predicted_swe_2017-11-17.png\nCopied: 2017_predicted_swe_2017-11-18.png\nCopied: 2018_predicted_swe_2018-03-05.png\nCopied: 2019_predicted_swe_2019-05-28.png\nCopied: 2018_predicted_swe_2018-12-27.png\nCopied: 2018_predicted_swe_2018-12-31.png\nCopied: 2018_predicted_swe_2018-10-24.png\nCopied: 2019_predicted_swe_2019-03-08.png\nCopied: 2018_predicted_swe_2018-03-16.png\nCopied: 2018_predicted_swe_2018-05-09.png\nCopied: 2019_predicted_swe_2019-01-02.png\nCopied: 2018_predicted_swe_2018-12-02.png\nCopied: 2019_predicted_swe_2019-02-25.png\nCopied: 2018_predicted_swe_2018-11-12.png\nCopied: 2017_predicted_swe_2017-10-28.png\nCopied: 2019_predicted_swe_2019-02-06.png\nCopied: 2019_predicted_swe_2019-03-09.png\nCopied: 2017_predicted_swe_2017-12-07.png\nCopied: 2019_predicted_swe_2019-02-07.png\nCopied: 2019_predicted_swe_2019-05-10.png\nCopied: 2018_predicted_swe_2018-03-29.png\nCopied: 2018_predicted_swe_2018-06-17.png\nCopied: 2019_predicted_swe_2019-06-12.png\nCopied: 2018_predicted_swe_2018-01-24.png\nCopied: 2018_predicted_swe_2018-05-30.png\nCopied: 2018_predicted_swe_2018-03-22.png\nCopied: 2019_predicted_swe_2019-02-05.png\nCopied: 2018_predicted_swe_2018-03-15.png\nCopied: 2019_predicted_swe_2019-03-03.png\nCopied: 2018_predicted_swe_2018-12-24.png\nCopied: 2018_predicted_swe_2018-03-01.png\nCopied: 2018_predicted_swe_2018-03-14.png\nCopied: 2018_predicted_swe_2018-02-10.png\nCopied: 2019_predicted_swe_2019-03-28.png\nCopied: 2018_predicted_swe_2018-11-20.png\nCopied: importance_summary_plot_2023-09-16.png\nCopied: 2017_predicted_swe_2017-11-27.png\nCopied: 2018_predicted_swe_2018-05-28.png\nCopied: 2018_predicted_swe_2018-12-17.png\nCopied: 2022_pr_2022-03-15.png\nCopied: 2017_predicted_swe_2017-10-08.png\nCopied: 2018_predicted_swe_2018-04-29.png\nCopied: 2023_pr_2023-05-16.png\nCopied: 2017_predicted_swe_2017-10-16.png\nCopied: 2018_predicted_swe_2018-12-25.png\nCopied: 2017_predicted_swe_2017-12-17.png\nCopied: 2023_predicted_swe_2023-05-29.png\nCopied: et-model-feature-importance-19.png\nCopied: 2018_predicted_swe_2018-11-27.png\nCopied: 2018_predicted_swe_2018-02-06.png\nCopied: 2019_predicted_swe_2019-05-03.png\nCopied: 2018_predicted_swe_2018-11-24.png\nCopied: 2018_predicted_swe_2018-05-16.png\nCopied: 2019_predicted_swe_2019-02-16.png\nCopied: 2018_predicted_swe_2018-01-21.png\nCopied: 2018_predicted_swe_2018-01-17.png\nCopied: 2018_predicted_swe_2018-12-21.png\nCopied: 2018_predicted_swe_2018-04-22.png\nCopied: 2018_predicted_swe_2018-11-25.png\nCopied: 2023_pr_2023-05-25.png\nCopied: 2019_predicted_swe_2019-04-04.png\nCopied: 2018_predicted_swe_2018-06-26.png\nCopied: 2023_pr_2023-05-29.png\nCopied: 2022_predicted_swe_2022-10-16.png\nCopied: 2018_predicted_swe_2018-11-15.png\nCopied: 2018_predicted_swe_2018-05-31.png\nCopied: 2018_predicted_swe_2018-11-17.png\nCopied: 2017_predicted_swe_2017-10-07.png\nCopied: 2018_predicted_swe_2018-01-18.png\nCopied: 2017_predicted_swe_2017-11-16.png\nCopied: 2018_predicted_swe_2018-10-14.png\nCopied: 2018_predicted_swe_2018-01-20.png\nCopied: 2018_predicted_swe_2018-12-03.png\nCopied: 2018_predicted_swe_2018-10-18.png\nCopied: 2019_predicted_swe_2019-05-26.png\nCopied: 2019_predicted_swe_2019-01-07.png\nCopied: 2022_pr_2022-01-17.png\nCopied: 2019_predicted_swe_2019-05-23.png\nCopied: 2018_predicted_swe_2018-12-19.png\nCopied: 2018_predicted_swe_2018-03-09.png\nCopied: 2023_predicted_swe_2023-05-28.png\nCopied: 2018_predicted_swe_2018-10-23.png\nCopied: 2018_predicted_swe_2018-11-01.png\nCopied: 2018_predicted_swe_2018-02-25.png\nCopied: 2019_predicted_swe_2019-01-19.png\nCopied: 2018_predicted_swe_2018-02-02.png\nCopied: 2019_predicted_swe_2019-06-27.png\nCopied: 2018_predicted_swe_2018-12-16.png\nCopied: 2017_predicted_swe_2017-12-15.png\nCopied: 2023_predicted_swe_2023-09-15.png\nCopied: 2018_predicted_swe_2018-05-13.png\nCopied: 2022_pr_2022-12-30.png\n",
  "history_begin_time" : 1699805146501,
  "history_end_time" : 1699805147587,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "BI4CwtOT9QdQ",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n    else:\n        shutil.copy(source_file, destination_file)\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        copy_if_modified(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-11-12\ntest start date:  2022-10-16\ntest end date:  2023-10-07\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: importance_summary_plot_2023-02-12.png\nCopied: 2023_predicted_swe_2023-05-16.png\nCopied: 2018_predicted_swe_2018-06-16.png\nCopied: 2019_predicted_swe_2019-02-15.png\nCopied: 2018_predicted_swe_2018-06-02.png\nCopied: 2019_predicted_swe_2019-05-01.png\nCopied: 2018_predicted_swe_2018-10-20.png\nCopied: 2019_predicted_swe_2019-03-12.png\nCopied: 2022_predicted_swe_2022-03-15.png\nCopied: 2019_predicted_swe_2019-05-17.png\nCopied: 2022_predicted_swe_2022-12-29.png\nCopied: 2018_predicted_swe_2018-11-19.png\nCopied: 2019_predicted_swe_2019-01-13.png\nCopied: 2018_predicted_swe_2018-10-19.png\nCopied: 2017_predicted_swe_2017-12-01.png\nCopied: 2019_predicted_swe_2019-04-20.png\nCopied: 2019_predicted_swe_2019-04-07.png\nCopied: et-model-feature-importance-28.png\nCopied: 2019_predicted_swe_2019-04-17.png\nCopied: 2018_predicted_swe_2018-06-11.png\nCopied: 2019_predicted_swe_2019-02-21.png\nCopied: 2018_predicted_swe_2018-01-16.png\nCopied: 2019_predicted_swe_2019-02-04.png\nCopied: 2019_predicted_swe_2019-01-16.png\nCopied: 2019_predicted_swe_2019-06-04.png\nCopied: 2017_predicted_swe_2017-11-14.png\nCopied: 2019_predicted_swe_2019-02-03.png\nCopied: partial_dependence_summary_plot_2023-01-20.png\nCopied: 2018_predicted_swe_2018-12-07.png\nCopied: 2019_predicted_swe_2019-06-22.png\nCopied: 2018_predicted_swe_2018-11-03.png\nCopied: 2018_predicted_swe_2018-04-16.png\nCopied: 2018_predicted_swe_2018-11-14.png\nCopied: 2018_predicted_swe_2018-05-12.png\nCopied: 2019_predicted_swe_2019-03-16.png\nCopied: 2019_predicted_swe_2019-04-02.png\nCopied: 2019_predicted_swe_2019-01-06.png\nCopied: 2019_predicted_swe_2019-01-04.png\nCopied: 2019_predicted_swe_2019-02-23.png\nCopied: importance_summary_plot_2023-02-10.png\nCopied: 2019_predicted_swe_2019-05-02.png\nCopied: 2019_predicted_swe_2019-05-18.png\nCopied: 2018_predicted_swe_2018-10-16.png\nCopied: 2017_predicted_swe_2017-12-09.png\nCopied: 2023_pr_2023-02-10.png\nCopied: 2018_predicted_swe_2018-10-30.png\nCopied: 2023_predicted_swe_2023-05-26.png\nCopied: 2019_predicted_swe_2019-03-13.png\nCopied: 2018_predicted_swe_2018-10-02.png\nCopied: 2019_predicted_swe_2019-04-08.png\nCopied: 2018_predicted_swe_2018-12-29.png\nCopied: 2018_predicted_swe_2018-01-11.png\nCopied: 2019_predicted_swe_2019-03-18.png\nCopied: 2019_predicted_swe_2019-01-08.png\nCopied: 2018_predicted_swe_2018-01-12.png\nCopied: 2018_predicted_swe_2018-06-12.png\nCopied: 2019_predicted_swe_2019-03-27.png\nCopied: 2023_pr_2023-02-12.png\nCopied: 2019_predicted_swe_2019-02-13.png\nCopied: 2018_predicted_swe_2018-12-18.png\nCopied: 2023_pr_2023-03-16.png\nCopied: 2019_predicted_swe_2019-04-29.png\nCopied: 2018_predicted_swe_2018-05-25.png\nCopied: importance_summary_plot_latest_model.png\nCopied: 2018_predicted_swe_2018-12-22.png\nCopied: 2018_predicted_swe_2018-01-26.png\nCopied: 2018_predicted_swe_2018-02-15.png\nCopied: 2023_predicted_swe_2023-05-17.png\nCopied: 2018_predicted_swe_2018-12-05.png\nCopied: 2018_predicted_swe_2018-05-04.png\nCopied: 2019_predicted_swe_2019-02-09.png\nCopied: 2019_predicted_swe_2019-06-16.png\nCopied: 2017_predicted_swe_2017-11-09.png\nCopied: 2018_predicted_swe_2018-06-08.png\nCopied: 2019_predicted_swe_2019-06-07.png\nCopied: 2019_predicted_swe_2019-06-21.png\nCopied: 2019_predicted_swe_2019-02-18.png\nCopied: 2019_predicted_swe_2019-01-12.png\nCopied: 2018_predicted_swe_2018-04-19.png\nCopied: 2017_predicted_swe_2017-10-17.png\nCopied: 2017_predicted_swe_2017-11-20.png\nCopied: 2019_predicted_swe_2019-06-18.png\nCopied: 2018_predicted_swe_2018-06-30.png\nCopied: 2018_predicted_swe_2018-01-02.png\nCopied: 2018_predicted_swe_2018-11-18.png\nCopied: 2018_predicted_swe_2018-03-03.png\nCopied: 2018_predicted_swe_2018-03-26.png\nCopied: 2018_predicted_swe_2018-01-23.png\nCopied: 2019_predicted_swe_2019-05-15.png\nCopied: 2019_predicted_swe_2019-05-06.png\nCopied: 2017_predicted_swe_2017-10-03.png\nCopied: 2017_predicted_swe_2017-11-03.png\nCopied: 2019_predicted_swe_2019-06-15.png\nCopied: 2019_predicted_swe_2019-02-11.png\nCopied: 2019_predicted_swe_2019-06-28.png\nCopied: 2018_predicted_swe_2018-02-19.png\nCopied: 2023_pr_2023-03-02.png\nCopied: 2018_predicted_swe_2018-02-24.png\nCopied: 2017_predicted_swe_2017-11-12.png\nCopied: importance_summary_plot_2023-03-16.png\nCopied: 2018_predicted_swe_2018-04-30.png\nCopied: 2018_predicted_swe_2018-05-10.png\nCopied: et-model-feature-importance-21.png\nCopied: 2019_predicted_swe_2019-01-24.png\nCopied: 2019_predicted_swe_2019-06-29.png\nCopied: 2018_predicted_swe_2018-12-12.png\nCopied: 2022_predicted_swe_2022-01-17.png\nCopied: 2018_predicted_swe_2018-06-21.png\nCopied: 2019_predicted_swe_2019-04-22.png\nCopied: 2019_predicted_swe_2019-04-16.png\nCopied: 2018_predicted_swe_2018-01-31.png\nCopied: 2017_predicted_swe_2017-11-28.png\nCopied: 2018_predicted_swe_2018-12-04.png\nCopied: 2022_predicted_swe_2022-12-30.png\nCopied: 2019_predicted_swe_2019-03-05.png\nCopied: 2017_predicted_swe_2017-12-31.png\nCopied: 2018_predicted_swe_2018-01-04.png\nCopied: 2019_predicted_swe_2019-04-25.png\nCopied: 2017_predicted_swe_2017-10-31.png\nCopied: 2023_pr_2023-05-26.png\nCopied: 2023_predicted_swe_2023-05-25.png\nCopied: 2018_predicted_swe_2018-10-08.png\nCopied: 2019_predicted_swe_2019-05-22.png\nCopied: 2019_predicted_swe_2019-05-24.png\nCopied: 2018_predicted_swe_2018-05-24.png\nCopied: 2018_predicted_swe_2018-02-20.png\nCopied: 2018_predicted_swe_2018-03-19.png\nCopied: 2017_predicted_swe_2017-12-21.png\nCopied: 2019_predicted_swe_2019-01-14.png\nCopied: 2018_predicted_swe_2018-06-28.png\nCopied: 2018_predicted_swe_2018-05-11.png\nCopied: 2018_predicted_swe_2018-01-01.png\nCopied: 2017_predicted_swe_2017-12-16.png\nCopied: 2018_predicted_swe_2018-06-09.png\nCopied: 2018_predicted_swe_2018-11-26.png\nCopied: 2019_predicted_swe_2019-01-31.png\nCopied: 2018_predicted_swe_2018-05-15.png\nCopied: 2018_predicted_swe_2018-12-01.png\nCopied: 2017_predicted_swe_2017-11-11.png\nCopied: 2018_predicted_swe_2018-10-25.png\nCopied: 2018_predicted_swe_2018-11-28.png\nCopied: 2017_predicted_swe_2017-12-30.png\nCopied: 2019_predicted_swe_2019-03-21.png\nCopied: 2017_predicted_swe_2017-10-25.png\nCopied: 2019_predicted_swe_2019-04-18.png\nCopied: 2019_predicted_swe_2019-01-17.png\nCopied: 2017_predicted_swe_2017-12-10.png\nCopied: 2018_predicted_swe_2018-11-11.png\nCopied: 2019_predicted_swe_2019-02-19.png\nCopied: 2018_predicted_swe_2018-06-22.png\nCopied: 2017_predicted_swe_2017-11-07.png\nCopied: 2019_predicted_swe_2019-03-17.png\nCopied: 2017_predicted_swe_2017-10-02.png\nCopied: 2017_predicted_swe_2017-11-26.png\nCopied: 2019_predicted_swe_2019-02-26.png\nCopied: 2018_predicted_swe_2018-06-24.png\nCopied: 2019_predicted_swe_2019-01-28.png\nCopied: 2019_predicted_swe_2019-04-23.png\nCopied: 2023_pr_2023-05-17.png\nCopied: 2018_predicted_swe_2018-12-08.png\nCopied: 2018_predicted_swe_2018-01-19.png\nCopied: 2019_predicted_swe_2019-05-14.png\nCopied: 2018_predicted_swe_2018-10-09.png\nCopied: 2018_predicted_swe_2018-06-05.png\nCopied: 2018_predicted_swe_2018-01-27.png\nCopied: 2018_predicted_swe_2018-03-20.png\nCopied: 2018_predicted_swe_2018-10-11.png\nCopied: 2017_predicted_swe_2017-11-19.png\nCopied: 2018_predicted_swe_2018-02-14.png\nCopied: 2018_predicted_swe_2018-10-13.png\nCopied: 2022_predicted_swe_2022-01-16.png\nCopied: 2017_predicted_swe_2017-12-18.png\nCopied: 2019_predicted_swe_2019-05-07.png\nCopied: 2018_predicted_swe_2018-01-10.png\nCopied: 2017_predicted_swe_2017-10-18.png\nCopied: 2018_predicted_swe_2018-01-03.png\nCopied: 2023_predicted_swe_2023-02-12.png\nCopied: 2018_predicted_swe_2018-03-27.png\nCopied: 2019_predicted_swe_2019-06-09.png\nCopied: 2018_predicted_swe_2018-04-24.png\nCopied: 2019_predicted_swe_2019-06-25.png\nCopied: 2017_predicted_swe_2017-11-05.png\nCopied: 2018_predicted_swe_2018-04-28.png\nCopied: 2023_pr_2023-06-15.png\nCopied: 2019_predicted_swe_2019-03-23.png\nCopied: 2019_predicted_swe_2019-06-01.png\nCopied: 2017_predicted_swe_2017-11-21.png\nCopied: 2018_predicted_swe_2018-03-04.png\nCopied: 2017_predicted_swe_2017-10-15.png\nCopied: 2018_predicted_swe_2018-04-01.png\nCopied: 2019_predicted_swe_2019-01-01.png\nCopied: 2018_predicted_swe_2018-10-15.png\nCopied: 2018_predicted_swe_2018-01-09.png\nCopied: 2018_predicted_swe_2018-11-22.png\nCopied: 2022_predicted_swe_2022-04-17.png\nCopied: 2022_predicted_swe_2022-02-28.png\nCopied: 2019_predicted_swe_2019-04-11.png\nCopied: 2018_predicted_swe_2018-04-20.png\nCopied: 2022_pr_2022-06-15.png\nCopied: 2018_predicted_swe_2018-01-08.png\nCopied: 2017_predicted_swe_2017-10-24.png\nCopied: 2018_predicted_swe_2018-04-14.png\nCopied: 2019_predicted_swe_2019-01-18.png\nCopied: 2018_predicted_swe_2018-03-02.png\nCopied: 2019_predicted_swe_2019-02-20.png\nCopied: 2017_predicted_swe_2017-11-25.png\nCopied: 2018_predicted_swe_2018-11-10.png\nCopied: 2019_predicted_swe_2019-05-05.png\nCopied: 2017_predicted_swe_2017-11-29.png\nCopied: 2019_predicted_swe_2019-04-15.png\nCopied: 2019_predicted_swe_2019-01-30.png\nCopied: 2018_predicted_swe_2018-06-18.png\nCopied: 2018_pr_2018-01-01.png\nCopied: 2019_predicted_swe_2019-04-06.png\nCopied: 2018_predicted_swe_2018-12-10.png\nCopied: 2018_predicted_swe_2018-11-02.png\nCopied: 2018_predicted_swe_2018-06-25.png\nCopied: 2018_predicted_swe_2018-01-15.png\nCopied: 2022_predicted_swe_2022-10-15.png\nCopied: 2019_predicted_swe_2019-03-29.png\nCopied: 2018_predicted_swe_2018-03-28.png\nCopied: 2023_predicted_swe_2023-05-18.png\nCopied: 2023_pr_2023-02-11.png\nCopied: 2018_predicted_swe_2018-06-13.png\nCopied: 2018_predicted_swe_2018-12-26.png\nCopied: 2019_predicted_swe_2019-01-11.png\nCopied: 2017_predicted_swe_2017-12-11.png\nCopied: 2018_predicted_swe_2018-03-30.png\nCopied: 2022_predicted_swe_2022-02-22.png\nCopied: 2018_predicted_swe_2018-11-21.png\nCopied: 2018_predicted_swe_2018-05-01.png\nCopied: 2018_predicted_swe_2018-02-17.png\nCopied: 2018_predicted_swe_2018-04-12.png\nCopied: 2018_predicted_swe_2018-11-16.png\nCopied: 2023_predicted_swe_2023-01-18.png\nCopied: 2019_predicted_swe_2019-03-25.png\nCopied: 2017_predicted_swe_2017-11-02.png\nCopied: 2018_predicted_swe_2018-06-20.png\nCopied: 2022_predicted_swe_2022-10-03.png\nCopied: 2018_predicted_swe_2018-04-08.png\nCopied: 2017_predicted_swe_2017-10-06.png\nCopied: 2019_predicted_swe_2019-05-20.png\nCopied: 2018_predicted_swe_2018-05-02.png\nCopied: 2019_predicted_swe_2019-06-11.png\nCopied: 2017_predicted_swe_2017-12-14.png\nCopied: 2018_predicted_swe_2018-04-02.png\nCopied: 2019_predicted_swe_2019-04-01.png\nCopied: 2017_predicted_swe_2017-10-20.png\nCopied: 2018_predicted_swe_2018-10-03.png\nCopied: 2019_predicted_swe_2019-03-19.png\nCopied: 2018_predicted_swe_2018-10-10.png\nCopied: 2018_predicted_swe_2018-02-03.png\nCopied: 2018_predicted_swe_2018-04-21.png\nCopied: 2019_predicted_swe_2019-03-30.png\nCopied: importance_summary_plot_2023-09-15.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2017_predicted_swe_2017-10-10.png\nCopied: 2018_predicted_swe_2018-01-29.png\nCopied: 2018_predicted_swe_2018-03-10.png\nCopied: 2018_predicted_swe_2018-02-13.png\nCopied: 2018_predicted_swe_2018-04-13.png\nCopied: 2018_predicted_swe_2018-01-07.png\nCopied: 2019_predicted_swe_2019-04-05.png\nCopied: 2018_predicted_swe_2018-10-27.png\nCopied: 2018_predicted_swe_2018-02-09.png\nCopied: 2019_predicted_swe_2019-06-10.png\nCopied: 2019_predicted_swe_2019-02-24.png\nCopied: 2018_predicted_swe_2018-02-07.png\nCopied: 2019_predicted_swe_2019-06-13.png\nCopied: 2019_predicted_swe_2019-02-22.png\nCopied: 2019_predicted_swe_2019-05-13.png\nCopied: et-model-feature-importance-13.png\nCopied: 2023_predicted_swe_2023-01-19.png\nCopied: 2019_predicted_swe_2019-02-28.png\nCopied: 2017_predicted_swe_2017-12-06.png\nCopied: 2018_predicted_swe_2018-05-14.png\nCopied: 2018_predicted_swe_2018-10-22.png\nCopied: 2019_predicted_swe_2019-04-24.png\nCopied: 2023_predicted_swe_2023-01-20.png\nCopied: 2023_pr_2023-01-19.png\nCopied: 2019_predicted_swe_2019-01-29.png\nCopied: 2017_predicted_swe_2017-12-12.png\nCopied: 2018_predicted_swe_2018-02-12.png\nCopied: 2018_predicted_swe_2018-06-14.png\nCopied: 2018_predicted_swe_2018-11-08.png\nCopied: 2018_predicted_swe_2018-02-23.png\nCopied: 2022_pr_2022-02-28.png\nCopied: 2023_pr_2023-05-18.png\nCopied: 2023_pr_2023-03-15.png\nCopied: 2018_predicted_swe_2018-03-11.png\nCopied: 2019_predicted_swe_2019-04-14.png\nCopied: 2018_predicted_swe_2018-02-08.png\nCopied: 2019_predicted_swe_2019-04-30.png\nCopied: 2018_predicted_swe_2018-02-16.png\nCopied: 2018_predicted_swe_2018-10-26.png\nCopied: 2019_predicted_swe_2019-04-12.png\nCopied: 2019_predicted_swe_2019-05-19.png\nCopied: 2017_predicted_swe_2017-11-04.png\nCopied: 2019_predicted_swe_2019-01-21.png\nCopied: 2019_predicted_swe_2019-02-10.png\nCopied: 2018_predicted_swe_2018-06-19.png\nCopied: 2017_predicted_swe_2017-10-30.png\nCopied: 2018_predicted_swe_2018-03-12.png\nCopied: 2023_pr_2023-07-15.png\nCopied: 2019_predicted_swe_2019-04-09.png\nCopied: 2019_predicted_swe_2019-04-27.png\nCopied: 2017_predicted_swe_2017-12-28.png\nCopied: 2023_pr_2023-09-15.png\nCopied: 2018_predicted_swe_2018-03-23.png\nCopied: 2018_predicted_swe_2018-03-24.png\nCopied: 2019_predicted_swe_2019-03-14.png\nCopied: 2019_predicted_swe_2019-06-05.png\nCopied: 2018_predicted_swe_2018-10-07.png\nCopied: 2019_predicted_swe_2019-03-20.png\nCopied: 2019_predicted_swe_2019-03-31.png\nCopied: 2018_predicted_swe_2018-10-04.png\nCopied: 2018_predicted_swe_2018-04-26.png\nCopied: 2019_predicted_swe_2019-02-02.png\nCopied: 2019_predicted_swe_2019-04-26.png\nCopied: 2018_predicted_swe_2018-04-23.png\nCopied: et-model-feature-importance-26.png\nCopied: 2018_predicted_swe_2018-05-07.png\nCopied: 2019_predicted_swe_2019-03-01.png\nCopied: 2018_predicted_swe_2018-11-05.png\nCopied: 2023_predicted_swe_2023-03-15.png\nCopied: 2017_predicted_swe_2017-10-05.png\nCopied: 2018_predicted_swe_2018-03-07.png\nCopied: 2018_predicted_swe_2018-11-30.png\nCopied: shap_summary_plot_2023-01-20.png\nCopied: 2018_predicted_swe_2018-06-29.png\nCopied: 2017_predicted_swe_2017-11-06.png\nCopied: 2018_predicted_swe_2018-05-19.png\nCopied: 2023_pr_2023-01-20.png\nCopied: 2018_predicted_swe_2018-03-21.png\nCopied: 2018_predicted_swe_2018-05-03.png\nCopied: 2018_predicted_swe_2018-11-06.png\nCopied: 2017_predicted_swe_2017-12-24.png\nCopied: 2019_predicted_swe_2019-06-03.png\nCopied: 2019_predicted_swe_2019-01-25.png\nCopied: 2018_predicted_swe_2018-10-17.png\nCopied: 2018_predicted_swe_2018-10-01.png\nCopied: 2018_predicted_swe_2018-04-10.png\nCopied: importance_summary_plot_2023-05-16.png\nCopied: 2018_predicted_swe_2018-03-25.png\nCopied: 2018_predicted_swe_2018-04-07.png\nCopied: 2019_predicted_swe_2019-03-06.png\nCopied: 2019_predicted_swe_2019-03-11.png\nCopied: 2017_predicted_swe_2017-10-23.png\nCopied: 2019_predicted_swe_2019-03-24.png\nCopied: 2018_predicted_swe_2018-12-15.png\nCopied: 2018_predicted_swe_2018-02-05.png\nCopied: 2018_predicted_swe_2018-03-08.png\nCopied: 2018_predicted_swe_2018-04-18.png\nCopied: 2018_predicted_swe_2018-05-23.png\nCopied: 2018_predicted_swe_2018-05-26.png\nCopied: 2018_predicted_swe_2018-06-06.png\nCopied: 2019_predicted_swe_2019-06-08.png\nCopied: 2017_predicted_swe_2017-12-23.png\nCopied: 2019_predicted_swe_2019-02-14.png\nCopied: 2019_predicted_swe_2019-05-31.png\nCopied: 2019_predicted_swe_2019-06-19.png\nCopied: 2023_pr_2023-01-18.png\nCopied: 2019_predicted_swe_2019-02-08.png\nCopied: 2018_predicted_swe_2018-10-28.png\nCopied: 2019_predicted_swe_2019-05-04.png\nCopied: 2018_predicted_swe_2018-06-27.png\nCopied: 2017_predicted_swe_2017-11-08.png\nCopied: 2019_predicted_swe_2019-05-12.png\nCopied: 2017_predicted_swe_2017-10-29.png\nCopied: 2019_predicted_swe_2019-06-02.png\nCopied: 2017_predicted_swe_2017-11-30.png\nCopied: 2019_predicted_swe_2019-06-30.png\nCopied: 2019_predicted_swe_2019-02-27.png\nCopied: 2019_predicted_swe_2019-03-07.png\nCopied: 2018_predicted_swe_2018-03-31.png\nCopied: 2019_predicted_swe_2019-04-13.png\nCopied: 2018_predicted_swe_2018-02-18.png\nCopied: importance_summary_plot_2023-02-11.png\nCopied: 2023_pr_2023-05-28.png\nCopied: 2018_predicted_swe_2018-02-28.png\nCopied: 2017_predicted_swe_2017-12-29.png\nCopied: 2017_predicted_swe_2017-10-26.png\nCopied: 2018_predicted_swe_2018-11-23.png\nCopied: 2019_predicted_swe_2019-02-17.png\nCopied: 2018_predicted_swe_2018-05-20.png\nCopied: et-model-feature-importance-20.png\nCopied: 2018_predicted_swe_2018-10-06.png\nCopied: 2018_predicted_swe_2018-05-29.png\nCopied: 2018_predicted_swe_2018-12-06.png\nCopied: 2019_predicted_swe_2019-05-30.png\nCopied: 2019_predicted_swe_2019-05-29.png\nCopied: importance_summary_plot_2023-03-15.png\nCopied: 2017_predicted_swe_2017-10-14.png\nCopied: 2018_predicted_swe_2018-02-11.png\nCopied: 2019_predicted_swe_2019-06-26.png\nCopied: 2023_predicted_swe_2023-02-11.png\nCopied: 2023_pr_2023-01-15.png\nCopied: 2018_predicted_swe_2018-04-25.png\nCopied: 2017_predicted_swe_2017-11-01.png\nCopied: 2018_predicted_swe_2018-06-23.png\nCopied: 2017_predicted_swe_2017-12-08.png\nCopied: 2018_predicted_swe_2018-01-05.png\nCopied: 2018_predicted_swe_2018-11-13.png\nCopied: 2019_predicted_swe_2019-02-12.png\nCopied: 2019_predicted_swe_2019-05-09.png\nCopied: 2018_predicted_swe_2018-06-10.png\nCopied: 2019_predicted_swe_2019-01-09.png\nCopied: 2019_predicted_swe_2019-01-05.png\nCopied: 2017_predicted_swe_2017-12-02.png\nCopied: 2018_predicted_swe_2018-02-26.png\nCopied: 2017_predicted_swe_2017-12-26.png\nCopied: 2017_predicted_swe_2017-10-11.png\nCopied: 2019_predicted_swe_2019-02-01.png\nCopied: 2018_predicted_swe_2018-06-15.png\nCopied: 2017_predicted_swe_2017-12-13.png\nCopied: 2019_predicted_swe_2019-05-16.png\nCopied: 2018_predicted_swe_2018-12-28.png\nCopied: 2017_predicted_swe_2017-10-09.png\nCopied: 2019_predicted_swe_2019-01-03.png\nCopied: 2018_predicted_swe_2018-04-09.png\nCopied: 2017_predicted_swe_2017-10-13.png\nCopied: 2018_predicted_swe_2018-03-06.png\nCopied: importance_summary_plot_2023-06-15.png\nCopied: 2018_predicted_swe_2018-04-05.png\nCopied: 2022_pr_2022-01-16.png\nCopied: 2019_predicted_swe_2019-01-22.png\nCopied: 2017_predicted_swe_2017-10-22.png\nCopied: et-model-feature-importance-3.png\nCopied: 2018_predicted_swe_2018-06-04.png\nCopied: 2018_predicted_swe_2018-05-05.png\nCopied: 2023_predicted_swe_2023-01-15.png\nCopied: 2017_predicted_swe_2017-11-15.png\nCopied: 2018_predicted_swe_2018-11-04.png\nCopied: 2019_predicted_swe_2019-06-17.png\nCopied: 2018_predicted_swe_2018-05-08.png\nCopied: 2019_predicted_swe_2019-04-21.png\nCopied: 2018_predicted_swe_2018-01-22.png\nCopied: 2019_predicted_swe_2019-01-15.png\nCopied: 2018_predicted_swe_2018-04-17.png\nCopied: 2018_predicted_swe_2018-02-01.png\nCopied: 2018_predicted_swe_2018-05-27.png\nCopied: 2018_predicted_swe_2018-02-22.png\nCopied: 2018_predicted_swe_2018-11-07.png\nCopied: 2019_predicted_swe_2019-06-20.png\nCopied: 2018_predicted_swe_2018-12-09.png\nCopied: 2017_predicted_swe_2017-12-03.png\nCopied: 2019_predicted_swe_2019-06-14.png\nCopied: 2017_predicted_swe_2017-10-19.png\nCopied: 2018_predicted_swe_2018-12-23.png\nCopied: 2017_predicted_swe_2017-10-12.png\nCopied: 2019_predicted_swe_2019-05-11.png\nCopied: 2017_predicted_swe_2017-12-22.png\nCopied: 2017_predicted_swe_2017-11-23.png\nCopied: 2017_predicted_swe_2017-12-25.png\nCopied: importance_summary_plot_2023-07-15.png\nCopied: 2017_predicted_swe_2017-11-24.png\nCopied: 2018_predicted_swe_2018-06-07.png\nCopied: 2019_predicted_swe_2019-03-26.png\nCopied: 2019_predicted_swe_2019-03-04.png\nCopied: 2017_predicted_swe_2017-12-04.png\nCopied: 2019_predicted_swe_2019-05-25.png\nCopied: 2019_predicted_swe_2019-04-28.png\nCopied: 2022_pr_2022-12-29.png\nCopied: 2017_predicted_swe_2017-10-04.png\nCopied: 2017_predicted_swe_2017-12-27.png\nCopied: 2018_predicted_swe_2018-01-13.png\nCopied: 2018_predicted_swe_2018-03-18.png\nCopied: 2019_predicted_swe_2019-01-23.png\nCopied: 2023_predicted_swe_2023-03-02.png\nCopied: 2019_predicted_swe_2019-06-24.png\nCopied: 2022_pr_2022-10-15.png\nCopied: 2018_predicted_swe_2018-01-06.png\nCopied: 2018_predicted_swe_2018-01-25.png\nCopied: 2023_predicted_swe_2023-06-15.png\nCopied: 2018_predicted_swe_2018-05-17.png\nCopied: 2017_predicted_swe_2017-12-19.png\nCopied: 2018_predicted_swe_2018-02-21.png\nCopied: 2023_pr_2023-09-16.png\nCopied: 2018_predicted_swe_2018-02-27.png\nCopied: 2019_predicted_swe_2019-04-03.png\nCopied: 2018_predicted_swe_2018-02-04.png\nCopied: 2019_predicted_swe_2019-06-06.png\nCopied: 2019_predicted_swe_2019-01-10.png\nCopied: 2019_predicted_swe_2019-01-26.png\nCopied: 2022_pr_2022-02-22.png\nCopied: 2018_predicted_swe_2018-10-31.png\nCopied: 2018_predicted_swe_2018-05-22.png\nCopied: 2019_predicted_swe_2019-03-02.png\nCopied: 2018_predicted_swe_2018-12-20.png\nCopied: 2018_predicted_swe_2018-05-06.png\nCopied: 2018_predicted_swe_2018-11-29.png\nCopied: 2018_predicted_swe_2018-10-29.png\nCopied: 2019_predicted_swe_2019-05-21.png\nCopied: 2018_predicted_swe_2018-10-12.png\nCopied: 2018_predicted_swe_2018-11-09.png\nCopied: 2019_predicted_swe_2019-03-15.png\nCopied: 2019_predicted_swe_2019-05-27.png\nCopied: 2022_pr_2022-10-16.png\nCopied: 2018_predicted_swe_2018-04-04.png\nCopied: 2018_predicted_swe_2018-03-17.png\nCopied: 2022_pr_2022-04-17.png\nCopied: 2022_predicted_swe_2022-06-15.png\nCopied: 2017_predicted_swe_2017-12-05.png\nCopied: 2018_predicted_swe_2018-01-30.png\nCopied: 2018_predicted_swe_2018-12-30.png\nCopied: 2018_predicted_swe_2018-01-28.png\nCopied: 2019_predicted_swe_2019-01-20.png\nCopied: 2018_predicted_swe_2018-06-01.png\nCopied: 2017_predicted_swe_2017-11-10.png\nCopied: 2019_predicted_swe_2019-06-23.png\nCopied: 2018_predicted_swe_2018-04-11.png\nCopied: 2018_predicted_swe_2018-04-15.png\nCopied: 2018_predicted_swe_2018-04-06.png\nCopied: 2019_predicted_swe_2019-03-10.png\nCopied: 2018_predicted_swe_2018-04-03.png\nCopied: et-model-feature-importance-6.png\nCopied: 2018_predicted_swe_2018-10-21.png\nCopied: importance_summary_plot_2023-01-20.png\nCopied: 2018_predicted_swe_2018-03-13.png\nCopied: 2023_predicted_swe_2023-03-16.png\nCopied: 2018_predicted_swe_2018-12-11.png\nCopied: 2017_predicted_swe_2017-11-13.png\nCopied: importance_summary_plot_2023-05-17.png\nCopied: 2019_predicted_swe_2019-01-27.png\nCopied: 2017_predicted_swe_2017-12-20.png\nCopied: 2019_predicted_swe_2019-03-22.png\nCopied: 2018_predicted_swe_2018-10-05.png\nCopied: 2018_predicted_swe_2018-06-03.png\nCopied: 2018_predicted_swe_2018-04-27.png\nCopied: 2017_predicted_swe_2017-10-21.png\nCopied: 2017_predicted_swe_2017-10-27.png\nCopied: 2023_predicted_swe_2023-07-15.png\nCopied: 2023_predicted_swe_2023-09-16.png\nCopied: 2019_predicted_swe_2019-05-08.png\nCopied: 2023_predicted_swe_2023-02-10.png\nCopied: 2018_predicted_swe_2018-01-14.png\nCopied: 2019_predicted_swe_2019-04-19.png\nCopied: 2018_predicted_swe_2018-05-18.png\nCopied: 2018_predicted_swe_2018-05-21.png\nCopied: 2017_predicted_swe_2017-11-22.png\nCopied: 2018_predicted_swe_2018-12-13.png\nCopied: 2018_predicted_swe_2018-12-14.png\nCopied: 2017_predicted_swe_2017-10-01.png\nCopied: 2019_predicted_swe_2019-04-10.png\nCopied: 2017_predicted_swe_2017-11-17.png\nCopied: 2017_predicted_swe_2017-11-18.png\nCopied: 2018_predicted_swe_2018-03-05.png\nCopied: 2019_predicted_swe_2019-05-28.png\nCopied: 2018_predicted_swe_2018-12-27.png\nCopied: 2018_predicted_swe_2018-12-31.png\nCopied: 2018_predicted_swe_2018-10-24.png\nCopied: 2019_predicted_swe_2019-03-08.png\nCopied: 2018_predicted_swe_2018-03-16.png\nCopied: 2018_predicted_swe_2018-05-09.png\nCopied: 2019_predicted_swe_2019-01-02.png\nCopied: 2018_predicted_swe_2018-12-02.png\nCopied: 2019_predicted_swe_2019-02-25.png\nCopied: 2018_predicted_swe_2018-11-12.png\nCopied: 2017_predicted_swe_2017-10-28.png\nCopied: 2019_predicted_swe_2019-02-06.png\nCopied: 2019_predicted_swe_2019-03-09.png\nCopied: 2017_predicted_swe_2017-12-07.png\nCopied: 2019_predicted_swe_2019-02-07.png\nCopied: 2019_predicted_swe_2019-05-10.png\nCopied: 2018_predicted_swe_2018-03-29.png\nCopied: 2018_predicted_swe_2018-06-17.png\nCopied: 2019_predicted_swe_2019-06-12.png\nCopied: 2018_predicted_swe_2018-01-24.png\nCopied: 2018_predicted_swe_2018-05-30.png\nCopied: 2018_predicted_swe_2018-03-22.png\nCopied: 2019_predicted_swe_2019-02-05.png\nCopied: 2018_predicted_swe_2018-03-15.png\nCopied: 2019_predicted_swe_2019-03-03.png\nCopied: 2018_predicted_swe_2018-12-24.png\nCopied: 2018_predicted_swe_2018-03-01.png\nCopied: 2018_predicted_swe_2018-03-14.png\nCopied: 2018_predicted_swe_2018-02-10.png\nCopied: 2019_predicted_swe_2019-03-28.png\nCopied: 2018_predicted_swe_2018-11-20.png\nCopied: importance_summary_plot_2023-09-16.png\nCopied: 2017_predicted_swe_2017-11-27.png\nCopied: 2018_predicted_swe_2018-05-28.png\nCopied: 2018_predicted_swe_2018-12-17.png\nCopied: 2022_pr_2022-03-15.png\nCopied: 2017_predicted_swe_2017-10-08.png\nCopied: 2018_predicted_swe_2018-04-29.png\nCopied: 2023_pr_2023-05-16.png\nCopied: 2017_predicted_swe_2017-10-16.png\nCopied: 2018_predicted_swe_2018-12-25.png\nCopied: 2017_predicted_swe_2017-12-17.png\nCopied: 2023_predicted_swe_2023-05-29.png\nCopied: et-model-feature-importance-19.png\nCopied: 2018_predicted_swe_2018-11-27.png\nCopied: 2018_predicted_swe_2018-02-06.png\nCopied: 2019_predicted_swe_2019-05-03.png\nCopied: 2018_predicted_swe_2018-11-24.png\nCopied: 2018_predicted_swe_2018-05-16.png\nCopied: 2019_predicted_swe_2019-02-16.png\nCopied: 2018_predicted_swe_2018-01-21.png\nCopied: 2018_predicted_swe_2018-01-17.png\nCopied: 2018_predicted_swe_2018-12-21.png\nCopied: 2018_predicted_swe_2018-04-22.png\nCopied: 2018_predicted_swe_2018-11-25.png\nCopied: 2023_pr_2023-05-25.png\nCopied: 2019_predicted_swe_2019-04-04.png\nCopied: 2018_predicted_swe_2018-06-26.png\nCopied: 2023_pr_2023-05-29.png\nCopied: 2022_predicted_swe_2022-10-16.png\nCopied: 2018_predicted_swe_2018-11-15.png\nCopied: 2018_predicted_swe_2018-05-31.png\nCopied: 2018_predicted_swe_2018-11-17.png\nCopied: 2017_predicted_swe_2017-10-07.png\nCopied: 2018_predicted_swe_2018-01-18.png\nCopied: 2017_predicted_swe_2017-11-16.png\nCopied: 2018_predicted_swe_2018-10-14.png\nCopied: 2018_predicted_swe_2018-01-20.png\nCopied: 2018_predicted_swe_2018-12-03.png\nCopied: 2018_predicted_swe_2018-10-18.png\nCopied: 2019_predicted_swe_2019-05-26.png\nCopied: 2019_predicted_swe_2019-01-07.png\nCopied: 2022_pr_2022-01-17.png\nCopied: 2019_predicted_swe_2019-05-23.png\nCopied: 2018_predicted_swe_2018-12-19.png\nCopied: 2018_predicted_swe_2018-03-09.png\nCopied: 2023_predicted_swe_2023-05-28.png\nCopied: 2018_predicted_swe_2018-10-23.png\nCopied: 2018_predicted_swe_2018-11-01.png\nCopied: 2018_predicted_swe_2018-02-25.png\nCopied: 2019_predicted_swe_2019-01-19.png\nCopied: 2018_predicted_swe_2018-02-02.png\nCopied: 2019_predicted_swe_2019-06-27.png\nCopied: 2018_predicted_swe_2018-12-16.png\nCopied: 2017_predicted_swe_2017-12-15.png\nCopied: 2023_predicted_swe_2023-09-15.png\nCopied: 2018_predicted_swe_2018-05-13.png\nCopied: 2022_pr_2022-12-30.png\n",
  "history_begin_time" : 1699804975006,
  "history_end_time" : 1699804976065,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "f0yfAn7mL7Kq",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-11-12\ntest start date:  2022-10-16\ntest end date:  2023-10-07\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: importance_summary_plot_2023-02-12.png\nCopied: 2023_predicted_swe_2023-05-16.png\nCopied: 2018_predicted_swe_2018-06-16.png\nCopied: 2019_predicted_swe_2019-02-15.png\nCopied: 2018_predicted_swe_2018-06-02.png\nCopied: 2019_predicted_swe_2019-05-01.png\nCopied: 2018_predicted_swe_2018-10-20.png\nCopied: 2019_predicted_swe_2019-03-12.png\nCopied: 2022_predicted_swe_2022-03-15.png\nCopied: 2019_predicted_swe_2019-05-17.png\nCopied: 2022_predicted_swe_2022-12-29.png\nCopied: 2018_predicted_swe_2018-11-19.png\nCopied: 2019_predicted_swe_2019-01-13.png\nCopied: 2018_predicted_swe_2018-10-19.png\nCopied: 2017_predicted_swe_2017-12-01.png\nCopied: 2019_predicted_swe_2019-04-20.png\nCopied: 2019_predicted_swe_2019-04-07.png\nCopied: et-model-feature-importance-28.png\nCopied: 2019_predicted_swe_2019-04-17.png\nCopied: 2018_predicted_swe_2018-06-11.png\nCopied: 2019_predicted_swe_2019-02-21.png\nCopied: 2018_predicted_swe_2018-01-16.png\nCopied: 2019_predicted_swe_2019-02-04.png\nCopied: 2019_predicted_swe_2019-01-16.png\nCopied: 2019_predicted_swe_2019-06-04.png\nCopied: 2017_predicted_swe_2017-11-14.png\nCopied: 2019_predicted_swe_2019-02-03.png\nCopied: partial_dependence_summary_plot_2023-01-20.png\nCopied: 2018_predicted_swe_2018-12-07.png\nCopied: 2019_predicted_swe_2019-06-22.png\nCopied: 2018_predicted_swe_2018-11-03.png\nCopied: 2018_predicted_swe_2018-04-16.png\nCopied: 2018_predicted_swe_2018-11-14.png\nCopied: 2018_predicted_swe_2018-05-12.png\nCopied: 2019_predicted_swe_2019-03-16.png\nCopied: 2019_predicted_swe_2019-04-02.png\nCopied: 2019_predicted_swe_2019-01-06.png\nCopied: 2019_predicted_swe_2019-01-04.png\nCopied: 2019_predicted_swe_2019-02-23.png\nCopied: importance_summary_plot_2023-02-10.png\nCopied: 2019_predicted_swe_2019-05-02.png\nCopied: 2019_predicted_swe_2019-05-18.png\nCopied: 2018_predicted_swe_2018-10-16.png\nCopied: 2017_predicted_swe_2017-12-09.png\nCopied: 2023_pr_2023-02-10.png\nCopied: 2018_predicted_swe_2018-10-30.png\nCopied: 2023_predicted_swe_2023-05-26.png\nCopied: 2019_predicted_swe_2019-03-13.png\nCopied: 2018_predicted_swe_2018-10-02.png\nCopied: 2019_predicted_swe_2019-04-08.png\nCopied: 2018_predicted_swe_2018-12-29.png\nCopied: 2018_predicted_swe_2018-01-11.png\nCopied: 2019_predicted_swe_2019-03-18.png\nCopied: 2019_predicted_swe_2019-01-08.png\nCopied: 2018_predicted_swe_2018-01-12.png\nCopied: 2018_predicted_swe_2018-06-12.png\nCopied: 2019_predicted_swe_2019-03-27.png\nCopied: 2023_pr_2023-02-12.png\nCopied: 2019_predicted_swe_2019-02-13.png\nCopied: 2018_predicted_swe_2018-12-18.png\nCopied: 2023_pr_2023-03-16.png\nCopied: 2019_predicted_swe_2019-04-29.png\nCopied: 2018_predicted_swe_2018-05-25.png\nCopied: importance_summary_plot_latest_model.png\nCopied: 2018_predicted_swe_2018-12-22.png\nCopied: 2018_predicted_swe_2018-01-26.png\nCopied: 2018_predicted_swe_2018-02-15.png\nCopied: 2023_predicted_swe_2023-05-17.png\nCopied: 2018_predicted_swe_2018-12-05.png\nCopied: 2018_predicted_swe_2018-05-04.png\nCopied: 2019_predicted_swe_2019-02-09.png\nCopied: 2019_predicted_swe_2019-06-16.png\nCopied: 2017_predicted_swe_2017-11-09.png\nCopied: 2018_predicted_swe_2018-06-08.png\nCopied: 2019_predicted_swe_2019-06-07.png\nCopied: 2019_predicted_swe_2019-06-21.png\nCopied: 2019_predicted_swe_2019-02-18.png\nCopied: 2019_predicted_swe_2019-01-12.png\nCopied: 2018_predicted_swe_2018-04-19.png\nCopied: 2017_predicted_swe_2017-10-17.png\nCopied: 2017_predicted_swe_2017-11-20.png\nCopied: 2019_predicted_swe_2019-06-18.png\nCopied: 2018_predicted_swe_2018-06-30.png\nCopied: 2018_predicted_swe_2018-01-02.png\nCopied: 2018_predicted_swe_2018-11-18.png\nCopied: 2018_predicted_swe_2018-03-03.png\nCopied: 2018_predicted_swe_2018-03-26.png\nCopied: 2018_predicted_swe_2018-01-23.png\nCopied: 2019_predicted_swe_2019-05-15.png\nCopied: 2019_predicted_swe_2019-05-06.png\nCopied: 2017_predicted_swe_2017-10-03.png\nCopied: 2017_predicted_swe_2017-11-03.png\nCopied: 2019_predicted_swe_2019-06-15.png\nCopied: 2019_predicted_swe_2019-02-11.png\nCopied: 2019_predicted_swe_2019-06-28.png\nCopied: 2018_predicted_swe_2018-02-19.png\nCopied: 2023_pr_2023-03-02.png\nCopied: 2018_predicted_swe_2018-02-24.png\nCopied: 2017_predicted_swe_2017-11-12.png\nCopied: importance_summary_plot_2023-03-16.png\nCopied: 2018_predicted_swe_2018-04-30.png\nCopied: 2018_predicted_swe_2018-05-10.png\nCopied: et-model-feature-importance-21.png\nCopied: 2019_predicted_swe_2019-01-24.png\nCopied: 2019_predicted_swe_2019-06-29.png\nCopied: 2018_predicted_swe_2018-12-12.png\nCopied: 2022_predicted_swe_2022-01-17.png\nCopied: 2018_predicted_swe_2018-06-21.png\nCopied: 2019_predicted_swe_2019-04-22.png\nCopied: 2019_predicted_swe_2019-04-16.png\nCopied: 2018_predicted_swe_2018-01-31.png\nCopied: 2017_predicted_swe_2017-11-28.png\nCopied: 2018_predicted_swe_2018-12-04.png\nCopied: 2022_predicted_swe_2022-12-30.png\nCopied: 2019_predicted_swe_2019-03-05.png\nCopied: 2017_predicted_swe_2017-12-31.png\nCopied: 2018_predicted_swe_2018-01-04.png\nCopied: 2019_predicted_swe_2019-04-25.png\nCopied: 2017_predicted_swe_2017-10-31.png\nCopied: 2023_pr_2023-05-26.png\nCopied: 2023_predicted_swe_2023-05-25.png\nCopied: 2018_predicted_swe_2018-10-08.png\nCopied: 2019_predicted_swe_2019-05-22.png\nCopied: 2019_predicted_swe_2019-05-24.png\nCopied: 2018_predicted_swe_2018-05-24.png\nCopied: 2018_predicted_swe_2018-02-20.png\nCopied: 2018_predicted_swe_2018-03-19.png\nCopied: 2017_predicted_swe_2017-12-21.png\nCopied: 2019_predicted_swe_2019-01-14.png\nCopied: 2018_predicted_swe_2018-06-28.png\nCopied: 2018_predicted_swe_2018-05-11.png\nCopied: 2018_predicted_swe_2018-01-01.png\nCopied: 2017_predicted_swe_2017-12-16.png\nCopied: 2018_predicted_swe_2018-06-09.png\nCopied: 2018_predicted_swe_2018-11-26.png\nCopied: 2019_predicted_swe_2019-01-31.png\nCopied: 2018_predicted_swe_2018-05-15.png\nCopied: 2018_predicted_swe_2018-12-01.png\nCopied: 2017_predicted_swe_2017-11-11.png\nCopied: 2018_predicted_swe_2018-10-25.png\nCopied: 2018_predicted_swe_2018-11-28.png\nCopied: 2017_predicted_swe_2017-12-30.png\nCopied: 2019_predicted_swe_2019-03-21.png\nCopied: 2017_predicted_swe_2017-10-25.png\nCopied: 2019_predicted_swe_2019-04-18.png\nCopied: 2019_predicted_swe_2019-01-17.png\nCopied: 2017_predicted_swe_2017-12-10.png\nCopied: 2018_predicted_swe_2018-11-11.png\nCopied: 2019_predicted_swe_2019-02-19.png\nCopied: 2018_predicted_swe_2018-06-22.png\nCopied: 2017_predicted_swe_2017-11-07.png\nCopied: 2019_predicted_swe_2019-03-17.png\nCopied: 2017_predicted_swe_2017-10-02.png\nCopied: 2017_predicted_swe_2017-11-26.png\nCopied: 2019_predicted_swe_2019-02-26.png\nCopied: 2018_predicted_swe_2018-06-24.png\nCopied: 2019_predicted_swe_2019-01-28.png\nCopied: 2019_predicted_swe_2019-04-23.png\nCopied: 2023_pr_2023-05-17.png\nCopied: 2018_predicted_swe_2018-12-08.png\nCopied: 2018_predicted_swe_2018-01-19.png\nCopied: 2019_predicted_swe_2019-05-14.png\nCopied: 2018_predicted_swe_2018-10-09.png\nCopied: 2018_predicted_swe_2018-06-05.png\nCopied: 2018_predicted_swe_2018-01-27.png\nCopied: 2018_predicted_swe_2018-03-20.png\nCopied: 2018_predicted_swe_2018-10-11.png\nCopied: 2017_predicted_swe_2017-11-19.png\nCopied: 2018_predicted_swe_2018-02-14.png\nCopied: 2018_predicted_swe_2018-10-13.png\nCopied: 2022_predicted_swe_2022-01-16.png\nCopied: 2017_predicted_swe_2017-12-18.png\nCopied: 2019_predicted_swe_2019-05-07.png\nCopied: 2018_predicted_swe_2018-01-10.png\nCopied: 2017_predicted_swe_2017-10-18.png\nCopied: 2018_predicted_swe_2018-01-03.png\nCopied: 2023_predicted_swe_2023-02-12.png\nCopied: 2018_predicted_swe_2018-03-27.png\nCopied: 2019_predicted_swe_2019-06-09.png\nCopied: 2018_predicted_swe_2018-04-24.png\nCopied: 2019_predicted_swe_2019-06-25.png\nCopied: 2017_predicted_swe_2017-11-05.png\nCopied: 2018_predicted_swe_2018-04-28.png\nCopied: 2023_pr_2023-06-15.png\nCopied: 2019_predicted_swe_2019-03-23.png\nCopied: 2019_predicted_swe_2019-06-01.png\nCopied: 2017_predicted_swe_2017-11-21.png\nCopied: 2018_predicted_swe_2018-03-04.png\nCopied: 2017_predicted_swe_2017-10-15.png\nCopied: 2018_predicted_swe_2018-04-01.png\nCopied: 2019_predicted_swe_2019-01-01.png\nCopied: 2018_predicted_swe_2018-10-15.png\nCopied: 2018_predicted_swe_2018-01-09.png\nCopied: 2018_predicted_swe_2018-11-22.png\nCopied: 2022_predicted_swe_2022-04-17.png\nCopied: 2022_predicted_swe_2022-02-28.png\nCopied: 2019_predicted_swe_2019-04-11.png\nCopied: 2018_predicted_swe_2018-04-20.png\nCopied: 2022_pr_2022-06-15.png\nCopied: 2018_predicted_swe_2018-01-08.png\nCopied: 2017_predicted_swe_2017-10-24.png\nCopied: 2018_predicted_swe_2018-04-14.png\nCopied: 2019_predicted_swe_2019-01-18.png\nCopied: 2018_predicted_swe_2018-03-02.png\nCopied: 2019_predicted_swe_2019-02-20.png\nCopied: 2017_predicted_swe_2017-11-25.png\nCopied: 2018_predicted_swe_2018-11-10.png\nCopied: 2019_predicted_swe_2019-05-05.png\nCopied: 2017_predicted_swe_2017-11-29.png\nCopied: 2019_predicted_swe_2019-04-15.png\nCopied: 2019_predicted_swe_2019-01-30.png\nCopied: 2018_predicted_swe_2018-06-18.png\nCopied: 2018_pr_2018-01-01.png\nCopied: 2019_predicted_swe_2019-04-06.png\nCopied: 2018_predicted_swe_2018-12-10.png\nCopied: 2018_predicted_swe_2018-11-02.png\nCopied: 2018_predicted_swe_2018-06-25.png\nCopied: 2018_predicted_swe_2018-01-15.png\nCopied: 2022_predicted_swe_2022-10-15.png\nCopied: 2019_predicted_swe_2019-03-29.png\nCopied: 2018_predicted_swe_2018-03-28.png\nCopied: 2023_predicted_swe_2023-05-18.png\nCopied: 2023_pr_2023-02-11.png\nCopied: 2018_predicted_swe_2018-06-13.png\nCopied: 2018_predicted_swe_2018-12-26.png\nCopied: 2019_predicted_swe_2019-01-11.png\nCopied: 2017_predicted_swe_2017-12-11.png\nCopied: 2018_predicted_swe_2018-03-30.png\nCopied: 2022_predicted_swe_2022-02-22.png\nCopied: 2018_predicted_swe_2018-11-21.png\nCopied: 2018_predicted_swe_2018-05-01.png\nCopied: 2018_predicted_swe_2018-02-17.png\nCopied: 2018_predicted_swe_2018-04-12.png\nCopied: 2018_predicted_swe_2018-11-16.png\nCopied: 2023_predicted_swe_2023-01-18.png\nCopied: 2019_predicted_swe_2019-03-25.png\nCopied: 2017_predicted_swe_2017-11-02.png\nCopied: 2018_predicted_swe_2018-06-20.png\nCopied: 2022_predicted_swe_2022-10-03.png\nCopied: 2018_predicted_swe_2018-04-08.png\nCopied: 2017_predicted_swe_2017-10-06.png\nCopied: 2019_predicted_swe_2019-05-20.png\nCopied: 2018_predicted_swe_2018-05-02.png\nCopied: 2019_predicted_swe_2019-06-11.png\nCopied: 2017_predicted_swe_2017-12-14.png\nCopied: 2018_predicted_swe_2018-04-02.png\nCopied: 2019_predicted_swe_2019-04-01.png\nCopied: 2017_predicted_swe_2017-10-20.png\nCopied: 2018_predicted_swe_2018-10-03.png\nCopied: 2019_predicted_swe_2019-03-19.png\nCopied: 2018_predicted_swe_2018-10-10.png\nCopied: 2018_predicted_swe_2018-02-03.png\nCopied: 2018_predicted_swe_2018-04-21.png\nCopied: 2019_predicted_swe_2019-03-30.png\nCopied: importance_summary_plot_2023-09-15.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2017_predicted_swe_2017-10-10.png\nCopied: 2018_predicted_swe_2018-01-29.png\nCopied: 2018_predicted_swe_2018-03-10.png\nCopied: 2018_predicted_swe_2018-02-13.png\nCopied: 2018_predicted_swe_2018-04-13.png\nCopied: 2018_predicted_swe_2018-01-07.png\nCopied: 2019_predicted_swe_2019-04-05.png\nCopied: 2018_predicted_swe_2018-10-27.png\nCopied: 2018_predicted_swe_2018-02-09.png\nCopied: 2019_predicted_swe_2019-06-10.png\nCopied: 2019_predicted_swe_2019-02-24.png\nCopied: 2018_predicted_swe_2018-02-07.png\nCopied: 2019_predicted_swe_2019-06-13.png\nCopied: 2019_predicted_swe_2019-02-22.png\nCopied: 2019_predicted_swe_2019-05-13.png\nCopied: et-model-feature-importance-13.png\nCopied: 2023_predicted_swe_2023-01-19.png\nCopied: 2019_predicted_swe_2019-02-28.png\nCopied: 2017_predicted_swe_2017-12-06.png\nCopied: 2018_predicted_swe_2018-05-14.png\nCopied: 2018_predicted_swe_2018-10-22.png\nCopied: 2019_predicted_swe_2019-04-24.png\nCopied: 2023_predicted_swe_2023-01-20.png\nCopied: 2023_pr_2023-01-19.png\nCopied: 2019_predicted_swe_2019-01-29.png\nCopied: 2017_predicted_swe_2017-12-12.png\nCopied: 2018_predicted_swe_2018-02-12.png\nCopied: 2018_predicted_swe_2018-06-14.png\nCopied: 2018_predicted_swe_2018-11-08.png\nCopied: 2018_predicted_swe_2018-02-23.png\nCopied: 2022_pr_2022-02-28.png\nCopied: 2023_pr_2023-05-18.png\nCopied: 2023_pr_2023-03-15.png\nCopied: 2018_predicted_swe_2018-03-11.png\nCopied: 2019_predicted_swe_2019-04-14.png\nCopied: 2018_predicted_swe_2018-02-08.png\nCopied: 2019_predicted_swe_2019-04-30.png\nCopied: 2018_predicted_swe_2018-02-16.png\nCopied: 2018_predicted_swe_2018-10-26.png\nCopied: 2019_predicted_swe_2019-04-12.png\nCopied: 2019_predicted_swe_2019-05-19.png\nCopied: 2017_predicted_swe_2017-11-04.png\nCopied: 2019_predicted_swe_2019-01-21.png\nCopied: 2019_predicted_swe_2019-02-10.png\nCopied: 2018_predicted_swe_2018-06-19.png\nCopied: 2017_predicted_swe_2017-10-30.png\nCopied: 2018_predicted_swe_2018-03-12.png\nCopied: 2023_pr_2023-07-15.png\nCopied: 2019_predicted_swe_2019-04-09.png\nCopied: 2019_predicted_swe_2019-04-27.png\nCopied: 2017_predicted_swe_2017-12-28.png\nCopied: 2023_pr_2023-09-15.png\nCopied: 2018_predicted_swe_2018-03-23.png\nCopied: 2018_predicted_swe_2018-03-24.png\nCopied: 2019_predicted_swe_2019-03-14.png\nCopied: 2019_predicted_swe_2019-06-05.png\nCopied: 2018_predicted_swe_2018-10-07.png\nCopied: 2019_predicted_swe_2019-03-20.png\nCopied: 2019_predicted_swe_2019-03-31.png\nCopied: 2018_predicted_swe_2018-10-04.png\nCopied: 2018_predicted_swe_2018-04-26.png\nCopied: 2019_predicted_swe_2019-02-02.png\nCopied: 2019_predicted_swe_2019-04-26.png\nCopied: 2018_predicted_swe_2018-04-23.png\nCopied: et-model-feature-importance-26.png\nCopied: 2018_predicted_swe_2018-05-07.png\nCopied: 2019_predicted_swe_2019-03-01.png\nCopied: 2018_predicted_swe_2018-11-05.png\nCopied: 2023_predicted_swe_2023-03-15.png\nCopied: 2017_predicted_swe_2017-10-05.png\nCopied: 2018_predicted_swe_2018-03-07.png\nCopied: 2018_predicted_swe_2018-11-30.png\nCopied: shap_summary_plot_2023-01-20.png\nCopied: 2018_predicted_swe_2018-06-29.png\nCopied: 2017_predicted_swe_2017-11-06.png\nCopied: 2018_predicted_swe_2018-05-19.png\nCopied: 2023_pr_2023-01-20.png\nCopied: 2018_predicted_swe_2018-03-21.png\nCopied: 2018_predicted_swe_2018-05-03.png\nCopied: 2018_predicted_swe_2018-11-06.png\nCopied: 2017_predicted_swe_2017-12-24.png\nCopied: 2019_predicted_swe_2019-06-03.png\nCopied: 2019_predicted_swe_2019-01-25.png\nCopied: 2018_predicted_swe_2018-10-17.png\nCopied: 2018_predicted_swe_2018-10-01.png\nCopied: 2018_predicted_swe_2018-04-10.png\nCopied: importance_summary_plot_2023-05-16.png\nCopied: 2018_predicted_swe_2018-03-25.png\nCopied: 2018_predicted_swe_2018-04-07.png\nCopied: 2019_predicted_swe_2019-03-06.png\nCopied: 2019_predicted_swe_2019-03-11.png\nCopied: 2017_predicted_swe_2017-10-23.png\nCopied: 2019_predicted_swe_2019-03-24.png\nCopied: 2018_predicted_swe_2018-12-15.png\nCopied: 2018_predicted_swe_2018-02-05.png\nCopied: 2018_predicted_swe_2018-03-08.png\nCopied: 2018_predicted_swe_2018-04-18.png\nCopied: 2018_predicted_swe_2018-05-23.png\nCopied: 2018_predicted_swe_2018-05-26.png\nCopied: 2018_predicted_swe_2018-06-06.png\nCopied: 2019_predicted_swe_2019-06-08.png\nCopied: 2017_predicted_swe_2017-12-23.png\nCopied: 2019_predicted_swe_2019-02-14.png\nCopied: 2019_predicted_swe_2019-05-31.png\nCopied: 2019_predicted_swe_2019-06-19.png\nCopied: 2023_pr_2023-01-18.png\nCopied: 2019_predicted_swe_2019-02-08.png\nCopied: 2018_predicted_swe_2018-10-28.png\nCopied: 2019_predicted_swe_2019-05-04.png\nCopied: 2018_predicted_swe_2018-06-27.png\nCopied: 2017_predicted_swe_2017-11-08.png\nCopied: 2019_predicted_swe_2019-05-12.png\nCopied: 2017_predicted_swe_2017-10-29.png\nCopied: 2019_predicted_swe_2019-06-02.png\nCopied: 2017_predicted_swe_2017-11-30.png\nCopied: 2019_predicted_swe_2019-06-30.png\nCopied: 2019_predicted_swe_2019-02-27.png\nCopied: 2019_predicted_swe_2019-03-07.png\nCopied: 2018_predicted_swe_2018-03-31.png\nCopied: 2019_predicted_swe_2019-04-13.png\nCopied: 2018_predicted_swe_2018-02-18.png\nCopied: importance_summary_plot_2023-02-11.png\nCopied: 2023_pr_2023-05-28.png\nCopied: 2018_predicted_swe_2018-02-28.png\nCopied: 2017_predicted_swe_2017-12-29.png\nCopied: 2017_predicted_swe_2017-10-26.png\nCopied: 2018_predicted_swe_2018-11-23.png\nCopied: 2019_predicted_swe_2019-02-17.png\nCopied: 2018_predicted_swe_2018-05-20.png\nCopied: et-model-feature-importance-20.png\nCopied: 2018_predicted_swe_2018-10-06.png\nCopied: 2018_predicted_swe_2018-05-29.png\nCopied: 2018_predicted_swe_2018-12-06.png\nCopied: 2019_predicted_swe_2019-05-30.png\nCopied: 2019_predicted_swe_2019-05-29.png\nCopied: importance_summary_plot_2023-03-15.png\nCopied: 2017_predicted_swe_2017-10-14.png\nCopied: 2018_predicted_swe_2018-02-11.png\nCopied: 2019_predicted_swe_2019-06-26.png\nCopied: 2023_predicted_swe_2023-02-11.png\nCopied: 2023_pr_2023-01-15.png\nCopied: 2018_predicted_swe_2018-04-25.png\nCopied: 2017_predicted_swe_2017-11-01.png\nCopied: 2018_predicted_swe_2018-06-23.png\nCopied: 2017_predicted_swe_2017-12-08.png\nCopied: 2018_predicted_swe_2018-01-05.png\nCopied: 2018_predicted_swe_2018-11-13.png\nCopied: 2019_predicted_swe_2019-02-12.png\nCopied: 2019_predicted_swe_2019-05-09.png\nCopied: 2018_predicted_swe_2018-06-10.png\nCopied: 2019_predicted_swe_2019-01-09.png\nCopied: 2019_predicted_swe_2019-01-05.png\nCopied: 2017_predicted_swe_2017-12-02.png\nCopied: 2018_predicted_swe_2018-02-26.png\nCopied: 2017_predicted_swe_2017-12-26.png\nCopied: 2017_predicted_swe_2017-10-11.png\nCopied: 2019_predicted_swe_2019-02-01.png\nCopied: 2018_predicted_swe_2018-06-15.png\nCopied: 2017_predicted_swe_2017-12-13.png\nCopied: 2019_predicted_swe_2019-05-16.png\nCopied: 2018_predicted_swe_2018-12-28.png\nCopied: 2017_predicted_swe_2017-10-09.png\nCopied: 2019_predicted_swe_2019-01-03.png\nCopied: 2018_predicted_swe_2018-04-09.png\nCopied: 2017_predicted_swe_2017-10-13.png\nCopied: 2018_predicted_swe_2018-03-06.png\nCopied: importance_summary_plot_2023-06-15.png\nCopied: 2018_predicted_swe_2018-04-05.png\nCopied: 2022_pr_2022-01-16.png\nCopied: 2019_predicted_swe_2019-01-22.png\nCopied: 2017_predicted_swe_2017-10-22.png\nCopied: et-model-feature-importance-3.png\nCopied: 2018_predicted_swe_2018-06-04.png\nCopied: 2018_predicted_swe_2018-05-05.png\nCopied: 2023_predicted_swe_2023-01-15.png\nCopied: 2017_predicted_swe_2017-11-15.png\nCopied: 2018_predicted_swe_2018-11-04.png\nCopied: 2019_predicted_swe_2019-06-17.png\nCopied: 2018_predicted_swe_2018-05-08.png\nCopied: 2019_predicted_swe_2019-04-21.png\nCopied: 2018_predicted_swe_2018-01-22.png\nCopied: 2019_predicted_swe_2019-01-15.png\nCopied: 2018_predicted_swe_2018-04-17.png\nCopied: 2018_predicted_swe_2018-02-01.png\nCopied: 2018_predicted_swe_2018-05-27.png\nCopied: 2018_predicted_swe_2018-02-22.png\nCopied: 2018_predicted_swe_2018-11-07.png\nCopied: 2019_predicted_swe_2019-06-20.png\nCopied: 2018_predicted_swe_2018-12-09.png\nCopied: 2017_predicted_swe_2017-12-03.png\nCopied: 2019_predicted_swe_2019-06-14.png\nCopied: 2017_predicted_swe_2017-10-19.png\nCopied: 2018_predicted_swe_2018-12-23.png\nCopied: 2017_predicted_swe_2017-10-12.png\nCopied: 2019_predicted_swe_2019-05-11.png\nCopied: 2017_predicted_swe_2017-12-22.png\nCopied: 2017_predicted_swe_2017-11-23.png\nCopied: 2017_predicted_swe_2017-12-25.png\nCopied: importance_summary_plot_2023-07-15.png\nCopied: 2017_predicted_swe_2017-11-24.png\nCopied: 2018_predicted_swe_2018-06-07.png\nCopied: 2019_predicted_swe_2019-03-26.png\nCopied: 2019_predicted_swe_2019-03-04.png\nCopied: 2017_predicted_swe_2017-12-04.png\nCopied: 2019_predicted_swe_2019-05-25.png\nCopied: 2019_predicted_swe_2019-04-28.png\nCopied: 2022_pr_2022-12-29.png\nCopied: 2017_predicted_swe_2017-10-04.png\nCopied: 2017_predicted_swe_2017-12-27.png\nCopied: 2018_predicted_swe_2018-01-13.png\nCopied: 2018_predicted_swe_2018-03-18.png\nCopied: 2019_predicted_swe_2019-01-23.png\nCopied: 2023_predicted_swe_2023-03-02.png\nCopied: 2019_predicted_swe_2019-06-24.png\nCopied: 2022_pr_2022-10-15.png\nCopied: 2018_predicted_swe_2018-01-06.png\nCopied: 2018_predicted_swe_2018-01-25.png\nCopied: 2023_predicted_swe_2023-06-15.png\nCopied: 2018_predicted_swe_2018-05-17.png\nCopied: 2017_predicted_swe_2017-12-19.png\nCopied: 2018_predicted_swe_2018-02-21.png\nCopied: 2023_pr_2023-09-16.png\nCopied: 2018_predicted_swe_2018-02-27.png\nCopied: 2019_predicted_swe_2019-04-03.png\nCopied: 2018_predicted_swe_2018-02-04.png\nCopied: 2019_predicted_swe_2019-06-06.png\nCopied: 2019_predicted_swe_2019-01-10.png\nCopied: 2019_predicted_swe_2019-01-26.png\nCopied: 2022_pr_2022-02-22.png\nCopied: 2018_predicted_swe_2018-10-31.png\nCopied: 2018_predicted_swe_2018-05-22.png\nCopied: 2019_predicted_swe_2019-03-02.png\nCopied: 2018_predicted_swe_2018-12-20.png\nCopied: 2018_predicted_swe_2018-05-06.png\nCopied: 2018_predicted_swe_2018-11-29.png\nCopied: 2018_predicted_swe_2018-10-29.png\nCopied: 2019_predicted_swe_2019-05-21.png\nCopied: 2018_predicted_swe_2018-10-12.png\nCopied: 2018_predicted_swe_2018-11-09.png\nCopied: 2019_predicted_swe_2019-03-15.png\nCopied: 2019_predicted_swe_2019-05-27.png\nCopied: 2022_pr_2022-10-16.png\nCopied: 2018_predicted_swe_2018-04-04.png\nCopied: 2018_predicted_swe_2018-03-17.png\nCopied: 2022_pr_2022-04-17.png\nCopied: 2022_predicted_swe_2022-06-15.png\nCopied: 2017_predicted_swe_2017-12-05.png\nCopied: 2018_predicted_swe_2018-01-30.png\nCopied: 2018_predicted_swe_2018-12-30.png\nCopied: 2018_predicted_swe_2018-01-28.png\nCopied: 2019_predicted_swe_2019-01-20.png\nCopied: 2018_predicted_swe_2018-06-01.png\nCopied: 2017_predicted_swe_2017-11-10.png\nCopied: 2019_predicted_swe_2019-06-23.png\nCopied: 2018_predicted_swe_2018-04-11.png\nCopied: 2018_predicted_swe_2018-04-15.png\nCopied: 2018_predicted_swe_2018-04-06.png\nCopied: 2019_predicted_swe_2019-03-10.png\nCopied: 2018_predicted_swe_2018-04-03.png\nCopied: et-model-feature-importance-6.png\nCopied: 2018_predicted_swe_2018-10-21.png\nCopied: importance_summary_plot_2023-01-20.png\nCopied: 2018_predicted_swe_2018-03-13.png\nCopied: 2023_predicted_swe_2023-03-16.png\nCopied: 2018_predicted_swe_2018-12-11.png\nCopied: 2017_predicted_swe_2017-11-13.png\nCopied: importance_summary_plot_2023-05-17.png\nCopied: 2019_predicted_swe_2019-01-27.png\nCopied: 2017_predicted_swe_2017-12-20.png\nCopied: 2019_predicted_swe_2019-03-22.png\nCopied: 2018_predicted_swe_2018-10-05.png\nCopied: 2018_predicted_swe_2018-06-03.png\nCopied: 2018_predicted_swe_2018-04-27.png\nCopied: 2017_predicted_swe_2017-10-21.png\nCopied: 2017_predicted_swe_2017-10-27.png\nCopied: 2023_predicted_swe_2023-07-15.png\nCopied: 2023_predicted_swe_2023-09-16.png\nCopied: 2019_predicted_swe_2019-05-08.png\nCopied: 2023_predicted_swe_2023-02-10.png\nCopied: 2018_predicted_swe_2018-01-14.png\nCopied: 2019_predicted_swe_2019-04-19.png\nCopied: 2018_predicted_swe_2018-05-18.png\nCopied: 2018_predicted_swe_2018-05-21.png\nCopied: 2017_predicted_swe_2017-11-22.png\nCopied: 2018_predicted_swe_2018-12-13.png\nCopied: 2018_predicted_swe_2018-12-14.png\nCopied: 2017_predicted_swe_2017-10-01.png\nCopied: 2019_predicted_swe_2019-04-10.png\nCopied: 2017_predicted_swe_2017-11-17.png\nCopied: 2017_predicted_swe_2017-11-18.png\nCopied: 2018_predicted_swe_2018-03-05.png\nCopied: 2019_predicted_swe_2019-05-28.png\nCopied: 2018_predicted_swe_2018-12-27.png\nCopied: 2018_predicted_swe_2018-12-31.png\nCopied: 2018_predicted_swe_2018-10-24.png\nCopied: 2019_predicted_swe_2019-03-08.png\nCopied: 2018_predicted_swe_2018-03-16.png\nCopied: 2018_predicted_swe_2018-05-09.png\nCopied: 2019_predicted_swe_2019-01-02.png\nCopied: 2018_predicted_swe_2018-12-02.png\nCopied: 2019_predicted_swe_2019-02-25.png\nCopied: 2018_predicted_swe_2018-11-12.png\nCopied: 2017_predicted_swe_2017-10-28.png\nCopied: 2019_predicted_swe_2019-02-06.png\nCopied: 2019_predicted_swe_2019-03-09.png\nCopied: 2017_predicted_swe_2017-12-07.png\nCopied: 2019_predicted_swe_2019-02-07.png\nCopied: 2019_predicted_swe_2019-05-10.png\nCopied: 2018_predicted_swe_2018-03-29.png\nCopied: 2018_predicted_swe_2018-06-17.png\nCopied: 2019_predicted_swe_2019-06-12.png\nCopied: 2018_predicted_swe_2018-01-24.png\nCopied: 2018_predicted_swe_2018-05-30.png\nCopied: 2018_predicted_swe_2018-03-22.png\nCopied: 2019_predicted_swe_2019-02-05.png\nCopied: 2018_predicted_swe_2018-03-15.png\nCopied: 2019_predicted_swe_2019-03-03.png\nCopied: 2018_predicted_swe_2018-12-24.png\nCopied: 2018_predicted_swe_2018-03-01.png\nCopied: 2018_predicted_swe_2018-03-14.png\nCopied: 2018_predicted_swe_2018-02-10.png\nCopied: 2019_predicted_swe_2019-03-28.png\nCopied: 2018_predicted_swe_2018-11-20.png\nCopied: importance_summary_plot_2023-09-16.png\nCopied: 2017_predicted_swe_2017-11-27.png\nCopied: 2018_predicted_swe_2018-05-28.png\nCopied: 2018_predicted_swe_2018-12-17.png\nCopied: 2022_pr_2022-03-15.png\nCopied: 2017_predicted_swe_2017-10-08.png\nCopied: 2018_predicted_swe_2018-04-29.png\nCopied: 2023_pr_2023-05-16.png\nCopied: 2017_predicted_swe_2017-10-16.png\nCopied: 2018_predicted_swe_2018-12-25.png\nCopied: 2017_predicted_swe_2017-12-17.png\nCopied: 2023_predicted_swe_2023-05-29.png\nCopied: et-model-feature-importance-19.png\nCopied: 2018_predicted_swe_2018-11-27.png\nCopied: 2018_predicted_swe_2018-02-06.png\nCopied: 2019_predicted_swe_2019-05-03.png\nCopied: 2018_predicted_swe_2018-11-24.png\nCopied: 2018_predicted_swe_2018-05-16.png\nCopied: 2019_predicted_swe_2019-02-16.png\nCopied: 2018_predicted_swe_2018-01-21.png\nCopied: 2018_predicted_swe_2018-01-17.png\nCopied: 2018_predicted_swe_2018-12-21.png\nCopied: 2018_predicted_swe_2018-04-22.png\nCopied: 2018_predicted_swe_2018-11-25.png\nCopied: 2023_pr_2023-05-25.png\nCopied: 2019_predicted_swe_2019-04-04.png\nCopied: 2018_predicted_swe_2018-06-26.png\nCopied: 2023_pr_2023-05-29.png\nCopied: 2022_predicted_swe_2022-10-16.png\nCopied: 2018_predicted_swe_2018-11-15.png\nCopied: 2018_predicted_swe_2018-05-31.png\nCopied: 2018_predicted_swe_2018-11-17.png\nCopied: 2017_predicted_swe_2017-10-07.png\nCopied: 2018_predicted_swe_2018-01-18.png\nCopied: 2017_predicted_swe_2017-11-16.png\nCopied: 2018_predicted_swe_2018-10-14.png\nCopied: 2018_predicted_swe_2018-01-20.png\nCopied: 2018_predicted_swe_2018-12-03.png\nCopied: 2018_predicted_swe_2018-10-18.png\nCopied: 2019_predicted_swe_2019-05-26.png\nCopied: 2019_predicted_swe_2019-01-07.png\nCopied: 2022_pr_2022-01-17.png\nCopied: 2019_predicted_swe_2019-05-23.png\nCopied: 2018_predicted_swe_2018-12-19.png\nCopied: 2018_predicted_swe_2018-03-09.png\nCopied: 2023_predicted_swe_2023-05-28.png\nCopied: 2018_predicted_swe_2018-10-23.png\nCopied: 2018_predicted_swe_2018-11-01.png\nCopied: 2018_predicted_swe_2018-02-25.png\nCopied: 2019_predicted_swe_2019-01-19.png\nCopied: 2018_predicted_swe_2018-02-02.png\nCopied: 2019_predicted_swe_2019-06-27.png\nCopied: 2018_predicted_swe_2018-12-16.png\nCopied: 2017_predicted_swe_2017-12-15.png\nCopied: 2023_predicted_swe_2023-09-15.png\nCopied: 2018_predicted_swe_2018-05-13.png\nCopied: 2022_pr_2022-12-30.png\n",
  "history_begin_time" : 1699804840900,
  "history_end_time" : 1699804841963,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "Yj12x4P1i4n2",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-11-12\ntest start date:  2022-10-16\ntest end date:  2023-10-07\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: importance_summary_plot_2023-02-12.png\nCopied: 2023_predicted_swe_2023-05-16.png\nCopied: 2018_predicted_swe_2018-06-16.png\nCopied: 2019_predicted_swe_2019-02-15.png\nCopied: 2018_predicted_swe_2018-06-02.png\nCopied: 2019_predicted_swe_2019-05-01.png\nCopied: 2018_predicted_swe_2018-10-20.png\nCopied: 2019_predicted_swe_2019-03-12.png\nCopied: 2022_predicted_swe_2022-03-15.png\nCopied: 2019_predicted_swe_2019-05-17.png\nCopied: 2022_predicted_swe_2022-12-29.png\nCopied: 2018_predicted_swe_2018-11-19.png\nCopied: 2019_predicted_swe_2019-01-13.png\nCopied: 2018_predicted_swe_2018-10-19.png\nCopied: 2017_predicted_swe_2017-12-01.png\nCopied: 2019_predicted_swe_2019-04-20.png\nCopied: 2019_predicted_swe_2019-04-07.png\nCopied: et-model-feature-importance-28.png\nCopied: 2019_predicted_swe_2019-04-17.png\nCopied: 2018_predicted_swe_2018-06-11.png\nCopied: 2019_predicted_swe_2019-02-21.png\nCopied: 2018_predicted_swe_2018-01-16.png\nCopied: 2019_predicted_swe_2019-02-04.png\nCopied: 2019_predicted_swe_2019-01-16.png\nCopied: 2019_predicted_swe_2019-06-04.png\nCopied: 2017_predicted_swe_2017-11-14.png\nCopied: 2019_predicted_swe_2019-02-03.png\nCopied: partial_dependence_summary_plot_2023-01-20.png\nCopied: 2018_predicted_swe_2018-12-07.png\nCopied: 2019_predicted_swe_2019-06-22.png\nCopied: 2018_predicted_swe_2018-11-03.png\nCopied: 2018_predicted_swe_2018-04-16.png\nCopied: 2018_predicted_swe_2018-11-14.png\nCopied: 2018_predicted_swe_2018-05-12.png\nCopied: 2019_predicted_swe_2019-03-16.png\nCopied: 2019_predicted_swe_2019-04-02.png\nCopied: 2019_predicted_swe_2019-01-06.png\nCopied: 2019_predicted_swe_2019-01-04.png\nCopied: 2019_predicted_swe_2019-02-23.png\nCopied: importance_summary_plot_2023-02-10.png\nCopied: 2019_predicted_swe_2019-05-02.png\nCopied: 2019_predicted_swe_2019-05-18.png\nCopied: 2018_predicted_swe_2018-10-16.png\nCopied: 2017_predicted_swe_2017-12-09.png\nCopied: 2023_pr_2023-02-10.png\nCopied: 2018_predicted_swe_2018-10-30.png\nCopied: 2023_predicted_swe_2023-05-26.png\nCopied: 2019_predicted_swe_2019-03-13.png\nCopied: 2018_predicted_swe_2018-10-02.png\nCopied: 2019_predicted_swe_2019-04-08.png\nCopied: 2018_predicted_swe_2018-12-29.png\nCopied: 2018_predicted_swe_2018-01-11.png\nCopied: 2019_predicted_swe_2019-03-18.png\nCopied: 2019_predicted_swe_2019-01-08.png\nCopied: 2018_predicted_swe_2018-01-12.png\nCopied: 2018_predicted_swe_2018-06-12.png\nCopied: 2019_predicted_swe_2019-03-27.png\nCopied: 2023_pr_2023-02-12.png\nCopied: 2019_predicted_swe_2019-02-13.png\nCopied: 2018_predicted_swe_2018-12-18.png\nCopied: 2023_pr_2023-03-16.png\nCopied: 2019_predicted_swe_2019-04-29.png\nCopied: 2018_predicted_swe_2018-05-25.png\nCopied: importance_summary_plot_latest_model.png\nCopied: 2018_predicted_swe_2018-12-22.png\nCopied: 2018_predicted_swe_2018-01-26.png\nCopied: 2018_predicted_swe_2018-02-15.png\nCopied: 2023_predicted_swe_2023-05-17.png\nCopied: 2018_predicted_swe_2018-12-05.png\nCopied: 2018_predicted_swe_2018-05-04.png\nCopied: 2019_predicted_swe_2019-02-09.png\nCopied: 2019_predicted_swe_2019-06-16.png\nCopied: 2017_predicted_swe_2017-11-09.png\nCopied: 2018_predicted_swe_2018-06-08.png\nCopied: 2019_predicted_swe_2019-06-07.png\nCopied: 2019_predicted_swe_2019-06-21.png\nCopied: 2019_predicted_swe_2019-02-18.png\nCopied: 2019_predicted_swe_2019-01-12.png\nCopied: 2018_predicted_swe_2018-04-19.png\nCopied: 2017_predicted_swe_2017-10-17.png\nCopied: 2017_predicted_swe_2017-11-20.png\nCopied: 2019_predicted_swe_2019-06-18.png\nCopied: 2018_predicted_swe_2018-06-30.png\nCopied: 2018_predicted_swe_2018-01-02.png\nCopied: 2018_predicted_swe_2018-11-18.png\nCopied: 2018_predicted_swe_2018-03-03.png\nCopied: 2018_predicted_swe_2018-03-26.png\nCopied: 2018_predicted_swe_2018-01-23.png\nCopied: 2019_predicted_swe_2019-05-15.png\nCopied: 2019_predicted_swe_2019-05-06.png\nCopied: 2017_predicted_swe_2017-10-03.png\nCopied: 2017_predicted_swe_2017-11-03.png\nCopied: 2019_predicted_swe_2019-06-15.png\nCopied: 2019_predicted_swe_2019-02-11.png\nCopied: 2019_predicted_swe_2019-06-28.png\nCopied: 2018_predicted_swe_2018-02-19.png\nCopied: 2023_pr_2023-03-02.png\nCopied: 2018_predicted_swe_2018-02-24.png\nCopied: 2017_predicted_swe_2017-11-12.png\nCopied: importance_summary_plot_2023-03-16.png\nCopied: 2018_predicted_swe_2018-04-30.png\nCopied: 2018_predicted_swe_2018-05-10.png\nCopied: et-model-feature-importance-21.png\nCopied: 2019_predicted_swe_2019-01-24.png\nCopied: 2019_predicted_swe_2019-06-29.png\nCopied: 2018_predicted_swe_2018-12-12.png\nCopied: 2022_predicted_swe_2022-01-17.png\nCopied: 2018_predicted_swe_2018-06-21.png\nCopied: 2019_predicted_swe_2019-04-22.png\nCopied: 2019_predicted_swe_2019-04-16.png\nCopied: 2018_predicted_swe_2018-01-31.png\nCopied: 2017_predicted_swe_2017-11-28.png\nCopied: 2018_predicted_swe_2018-12-04.png\nCopied: 2022_predicted_swe_2022-12-30.png\nCopied: 2019_predicted_swe_2019-03-05.png\nCopied: 2017_predicted_swe_2017-12-31.png\nCopied: 2018_predicted_swe_2018-01-04.png\nCopied: 2019_predicted_swe_2019-04-25.png\nCopied: 2017_predicted_swe_2017-10-31.png\nCopied: 2023_pr_2023-05-26.png\nCopied: 2023_predicted_swe_2023-05-25.png\nCopied: 2018_predicted_swe_2018-10-08.png\nCopied: 2019_predicted_swe_2019-05-22.png\nCopied: 2019_predicted_swe_2019-05-24.png\nCopied: 2018_predicted_swe_2018-05-24.png\nCopied: 2018_predicted_swe_2018-02-20.png\nCopied: 2018_predicted_swe_2018-03-19.png\nCopied: 2017_predicted_swe_2017-12-21.png\nCopied: 2019_predicted_swe_2019-01-14.png\nCopied: 2018_predicted_swe_2018-06-28.png\nCopied: 2018_predicted_swe_2018-05-11.png\nCopied: 2018_predicted_swe_2018-01-01.png\nCopied: 2017_predicted_swe_2017-12-16.png\nCopied: 2018_predicted_swe_2018-06-09.png\nCopied: 2018_predicted_swe_2018-11-26.png\nCopied: 2019_predicted_swe_2019-01-31.png\nCopied: 2018_predicted_swe_2018-05-15.png\nCopied: 2018_predicted_swe_2018-12-01.png\nCopied: 2017_predicted_swe_2017-11-11.png\nCopied: 2018_predicted_swe_2018-10-25.png\nCopied: 2018_predicted_swe_2018-11-28.png\nCopied: 2017_predicted_swe_2017-12-30.png\nCopied: 2019_predicted_swe_2019-03-21.png\nCopied: 2017_predicted_swe_2017-10-25.png\nCopied: 2019_predicted_swe_2019-04-18.png\nCopied: 2019_predicted_swe_2019-01-17.png\nCopied: 2017_predicted_swe_2017-12-10.png\nCopied: 2018_predicted_swe_2018-11-11.png\nCopied: 2019_predicted_swe_2019-02-19.png\nCopied: 2018_predicted_swe_2018-06-22.png\nCopied: 2017_predicted_swe_2017-11-07.png\nCopied: 2019_predicted_swe_2019-03-17.png\nCopied: 2017_predicted_swe_2017-10-02.png\nCopied: 2017_predicted_swe_2017-11-26.png\nCopied: 2019_predicted_swe_2019-02-26.png\nCopied: 2018_predicted_swe_2018-06-24.png\nCopied: 2019_predicted_swe_2019-01-28.png\nCopied: 2019_predicted_swe_2019-04-23.png\nCopied: 2023_pr_2023-05-17.png\nCopied: 2018_predicted_swe_2018-12-08.png\nCopied: 2018_predicted_swe_2018-01-19.png\nCopied: 2019_predicted_swe_2019-05-14.png\nCopied: 2018_predicted_swe_2018-10-09.png\nCopied: 2018_predicted_swe_2018-06-05.png\nCopied: 2018_predicted_swe_2018-01-27.png\nCopied: 2018_predicted_swe_2018-03-20.png\nCopied: 2018_predicted_swe_2018-10-11.png\nCopied: 2017_predicted_swe_2017-11-19.png\nCopied: 2018_predicted_swe_2018-02-14.png\nCopied: 2018_predicted_swe_2018-10-13.png\nCopied: 2022_predicted_swe_2022-01-16.png\nCopied: 2017_predicted_swe_2017-12-18.png\nCopied: 2019_predicted_swe_2019-05-07.png\nCopied: 2018_predicted_swe_2018-01-10.png\nCopied: 2017_predicted_swe_2017-10-18.png\nCopied: 2018_predicted_swe_2018-01-03.png\nCopied: 2023_predicted_swe_2023-02-12.png\nCopied: 2018_predicted_swe_2018-03-27.png\nCopied: 2019_predicted_swe_2019-06-09.png\nCopied: 2018_predicted_swe_2018-04-24.png\nCopied: 2019_predicted_swe_2019-06-25.png\nCopied: 2017_predicted_swe_2017-11-05.png\nCopied: 2018_predicted_swe_2018-04-28.png\nCopied: 2023_pr_2023-06-15.png\nCopied: 2019_predicted_swe_2019-03-23.png\nCopied: 2019_predicted_swe_2019-06-01.png\nCopied: 2017_predicted_swe_2017-11-21.png\nCopied: 2018_predicted_swe_2018-03-04.png\nCopied: 2017_predicted_swe_2017-10-15.png\nCopied: 2018_predicted_swe_2018-04-01.png\nCopied: 2019_predicted_swe_2019-01-01.png\nCopied: 2018_predicted_swe_2018-10-15.png\nCopied: 2018_predicted_swe_2018-01-09.png\nCopied: 2018_predicted_swe_2018-11-22.png\nCopied: 2022_predicted_swe_2022-04-17.png\nCopied: 2022_predicted_swe_2022-02-28.png\nCopied: 2019_predicted_swe_2019-04-11.png\nCopied: 2018_predicted_swe_2018-04-20.png\nCopied: 2022_pr_2022-06-15.png\nCopied: 2018_predicted_swe_2018-01-08.png\nCopied: 2017_predicted_swe_2017-10-24.png\nCopied: 2018_predicted_swe_2018-04-14.png\nCopied: 2019_predicted_swe_2019-01-18.png\nCopied: 2018_predicted_swe_2018-03-02.png\nCopied: 2019_predicted_swe_2019-02-20.png\nCopied: 2017_predicted_swe_2017-11-25.png\nCopied: 2018_predicted_swe_2018-11-10.png\nCopied: 2019_predicted_swe_2019-05-05.png\nCopied: 2017_predicted_swe_2017-11-29.png\nCopied: 2019_predicted_swe_2019-04-15.png\nCopied: 2019_predicted_swe_2019-01-30.png\nCopied: 2018_predicted_swe_2018-06-18.png\nCopied: 2018_pr_2018-01-01.png\nCopied: 2019_predicted_swe_2019-04-06.png\nCopied: 2018_predicted_swe_2018-12-10.png\nCopied: 2018_predicted_swe_2018-11-02.png\nCopied: 2018_predicted_swe_2018-06-25.png\nCopied: 2018_predicted_swe_2018-01-15.png\nCopied: 2022_predicted_swe_2022-10-15.png\nCopied: 2019_predicted_swe_2019-03-29.png\nCopied: 2018_predicted_swe_2018-03-28.png\nCopied: 2023_predicted_swe_2023-05-18.png\nCopied: 2023_pr_2023-02-11.png\nCopied: 2018_predicted_swe_2018-06-13.png\nCopied: 2018_predicted_swe_2018-12-26.png\nCopied: 2019_predicted_swe_2019-01-11.png\nCopied: 2017_predicted_swe_2017-12-11.png\nCopied: 2018_predicted_swe_2018-03-30.png\nCopied: 2022_predicted_swe_2022-02-22.png\nCopied: 2018_predicted_swe_2018-11-21.png\nCopied: 2018_predicted_swe_2018-05-01.png\nCopied: 2018_predicted_swe_2018-02-17.png\nCopied: 2018_predicted_swe_2018-04-12.png\nCopied: 2018_predicted_swe_2018-11-16.png\nCopied: 2023_predicted_swe_2023-01-18.png\nCopied: 2019_predicted_swe_2019-03-25.png\nCopied: 2017_predicted_swe_2017-11-02.png\nCopied: 2018_predicted_swe_2018-06-20.png\nCopied: 2022_predicted_swe_2022-10-03.png\nCopied: 2018_predicted_swe_2018-04-08.png\nCopied: 2017_predicted_swe_2017-10-06.png\nCopied: 2019_predicted_swe_2019-05-20.png\nCopied: 2018_predicted_swe_2018-05-02.png\nCopied: 2019_predicted_swe_2019-06-11.png\nCopied: 2017_predicted_swe_2017-12-14.png\nCopied: 2018_predicted_swe_2018-04-02.png\nCopied: 2019_predicted_swe_2019-04-01.png\nCopied: 2017_predicted_swe_2017-10-20.png\nCopied: 2018_predicted_swe_2018-10-03.png\nCopied: 2019_predicted_swe_2019-03-19.png\nCopied: 2018_predicted_swe_2018-10-10.png\nCopied: 2018_predicted_swe_2018-02-03.png\nCopied: 2018_predicted_swe_2018-04-21.png\nCopied: 2019_predicted_swe_2019-03-30.png\nCopied: importance_summary_plot_2023-09-15.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2017_predicted_swe_2017-10-10.png\nCopied: 2018_predicted_swe_2018-01-29.png\nCopied: 2018_predicted_swe_2018-03-10.png\nCopied: 2018_predicted_swe_2018-02-13.png\nCopied: 2018_predicted_swe_2018-04-13.png\nCopied: 2018_predicted_swe_2018-01-07.png\nCopied: 2019_predicted_swe_2019-04-05.png\nCopied: 2018_predicted_swe_2018-10-27.png\nCopied: 2018_predicted_swe_2018-02-09.png\nCopied: 2019_predicted_swe_2019-06-10.png\nCopied: 2019_predicted_swe_2019-02-24.png\nCopied: 2018_predicted_swe_2018-02-07.png\nCopied: 2019_predicted_swe_2019-06-13.png\nCopied: 2019_predicted_swe_2019-02-22.png\nCopied: 2019_predicted_swe_2019-05-13.png\nCopied: et-model-feature-importance-13.png\nCopied: 2023_predicted_swe_2023-01-19.png\nCopied: 2019_predicted_swe_2019-02-28.png\nCopied: 2017_predicted_swe_2017-12-06.png\nCopied: 2018_predicted_swe_2018-05-14.png\nCopied: 2018_predicted_swe_2018-10-22.png\nCopied: 2019_predicted_swe_2019-04-24.png\nCopied: 2023_predicted_swe_2023-01-20.png\nCopied: 2023_pr_2023-01-19.png\nCopied: 2019_predicted_swe_2019-01-29.png\nCopied: 2017_predicted_swe_2017-12-12.png\nCopied: 2018_predicted_swe_2018-02-12.png\nCopied: 2018_predicted_swe_2018-06-14.png\nCopied: 2018_predicted_swe_2018-11-08.png\nCopied: 2018_predicted_swe_2018-02-23.png\nCopied: 2022_pr_2022-02-28.png\nCopied: 2023_pr_2023-05-18.png\nCopied: 2023_pr_2023-03-15.png\nCopied: 2018_predicted_swe_2018-03-11.png\nCopied: 2019_predicted_swe_2019-04-14.png\nCopied: 2018_predicted_swe_2018-02-08.png\nCopied: 2019_predicted_swe_2019-04-30.png\nCopied: 2018_predicted_swe_2018-02-16.png\nCopied: 2018_predicted_swe_2018-10-26.png\nCopied: 2019_predicted_swe_2019-04-12.png\nCopied: 2019_predicted_swe_2019-05-19.png\nCopied: 2017_predicted_swe_2017-11-04.png\nCopied: 2019_predicted_swe_2019-01-21.png\nCopied: 2019_predicted_swe_2019-02-10.png\nCopied: 2018_predicted_swe_2018-06-19.png\nCopied: 2017_predicted_swe_2017-10-30.png\nCopied: 2018_predicted_swe_2018-03-12.png\nCopied: 2023_pr_2023-07-15.png\nCopied: 2019_predicted_swe_2019-04-09.png\nCopied: 2019_predicted_swe_2019-04-27.png\nCopied: 2017_predicted_swe_2017-12-28.png\nCopied: 2023_pr_2023-09-15.png\nCopied: 2018_predicted_swe_2018-03-23.png\nCopied: 2018_predicted_swe_2018-03-24.png\nCopied: 2019_predicted_swe_2019-03-14.png\nCopied: 2019_predicted_swe_2019-06-05.png\nCopied: 2018_predicted_swe_2018-10-07.png\nCopied: 2019_predicted_swe_2019-03-20.png\nCopied: 2019_predicted_swe_2019-03-31.png\nCopied: 2018_predicted_swe_2018-10-04.png\nCopied: 2018_predicted_swe_2018-04-26.png\nCopied: 2019_predicted_swe_2019-02-02.png\nCopied: 2019_predicted_swe_2019-04-26.png\nCopied: 2018_predicted_swe_2018-04-23.png\nCopied: et-model-feature-importance-26.png\nCopied: 2018_predicted_swe_2018-05-07.png\nCopied: 2019_predicted_swe_2019-03-01.png\nCopied: 2018_predicted_swe_2018-11-05.png\nCopied: 2023_predicted_swe_2023-03-15.png\nCopied: 2017_predicted_swe_2017-10-05.png\nCopied: 2018_predicted_swe_2018-03-07.png\nCopied: 2018_predicted_swe_2018-11-30.png\nCopied: shap_summary_plot_2023-01-20.png\nCopied: 2018_predicted_swe_2018-06-29.png\nCopied: 2017_predicted_swe_2017-11-06.png\nCopied: 2018_predicted_swe_2018-05-19.png\nCopied: 2023_pr_2023-01-20.png\nCopied: 2018_predicted_swe_2018-03-21.png\nCopied: 2018_predicted_swe_2018-05-03.png\nCopied: 2018_predicted_swe_2018-11-06.png\nCopied: 2017_predicted_swe_2017-12-24.png\nCopied: 2019_predicted_swe_2019-06-03.png\nCopied: 2019_predicted_swe_2019-01-25.png\nCopied: 2018_predicted_swe_2018-10-17.png\nCopied: 2018_predicted_swe_2018-10-01.png\nCopied: 2018_predicted_swe_2018-04-10.png\nCopied: importance_summary_plot_2023-05-16.png\nCopied: 2018_predicted_swe_2018-03-25.png\nCopied: 2018_predicted_swe_2018-04-07.png\nCopied: 2019_predicted_swe_2019-03-06.png\nCopied: 2019_predicted_swe_2019-03-11.png\nCopied: 2017_predicted_swe_2017-10-23.png\nCopied: 2019_predicted_swe_2019-03-24.png\nCopied: 2018_predicted_swe_2018-12-15.png\nCopied: 2018_predicted_swe_2018-02-05.png\nCopied: 2018_predicted_swe_2018-03-08.png\nCopied: 2018_predicted_swe_2018-04-18.png\nCopied: 2018_predicted_swe_2018-05-23.png\nCopied: 2018_predicted_swe_2018-05-26.png\nCopied: 2018_predicted_swe_2018-06-06.png\nCopied: 2019_predicted_swe_2019-06-08.png\nCopied: 2017_predicted_swe_2017-12-23.png\nCopied: 2019_predicted_swe_2019-02-14.png\nCopied: 2019_predicted_swe_2019-05-31.png\nCopied: 2019_predicted_swe_2019-06-19.png\nCopied: 2023_pr_2023-01-18.png\nCopied: 2019_predicted_swe_2019-02-08.png\nCopied: 2018_predicted_swe_2018-10-28.png\nCopied: 2019_predicted_swe_2019-05-04.png\nCopied: 2018_predicted_swe_2018-06-27.png\nCopied: 2017_predicted_swe_2017-11-08.png\nCopied: 2019_predicted_swe_2019-05-12.png\nCopied: 2017_predicted_swe_2017-10-29.png\nCopied: 2019_predicted_swe_2019-06-02.png\nCopied: 2017_predicted_swe_2017-11-30.png\nCopied: 2019_predicted_swe_2019-06-30.png\nCopied: 2019_predicted_swe_2019-02-27.png\nCopied: 2019_predicted_swe_2019-03-07.png\nCopied: 2018_predicted_swe_2018-03-31.png\nCopied: 2019_predicted_swe_2019-04-13.png\nCopied: 2018_predicted_swe_2018-02-18.png\nCopied: importance_summary_plot_2023-02-11.png\nCopied: 2023_pr_2023-05-28.png\nCopied: 2018_predicted_swe_2018-02-28.png\nCopied: 2017_predicted_swe_2017-12-29.png\nCopied: 2017_predicted_swe_2017-10-26.png\nCopied: 2018_predicted_swe_2018-11-23.png\nCopied: 2019_predicted_swe_2019-02-17.png\nCopied: 2018_predicted_swe_2018-05-20.png\nCopied: et-model-feature-importance-20.png\nCopied: 2018_predicted_swe_2018-10-06.png\nCopied: 2018_predicted_swe_2018-05-29.png\nCopied: 2018_predicted_swe_2018-12-06.png\nCopied: 2019_predicted_swe_2019-05-30.png\nCopied: 2019_predicted_swe_2019-05-29.png\nCopied: importance_summary_plot_2023-03-15.png\nCopied: 2017_predicted_swe_2017-10-14.png\nCopied: 2018_predicted_swe_2018-02-11.png\nCopied: 2019_predicted_swe_2019-06-26.png\nCopied: 2023_predicted_swe_2023-02-11.png\nCopied: 2023_pr_2023-01-15.png\nCopied: 2018_predicted_swe_2018-04-25.png\nCopied: 2017_predicted_swe_2017-11-01.png\nCopied: 2018_predicted_swe_2018-06-23.png\nCopied: 2017_predicted_swe_2017-12-08.png\nCopied: 2018_predicted_swe_2018-01-05.png\nCopied: 2018_predicted_swe_2018-11-13.png\nCopied: 2019_predicted_swe_2019-02-12.png\nCopied: 2019_predicted_swe_2019-05-09.png\nCopied: 2018_predicted_swe_2018-06-10.png\nCopied: 2019_predicted_swe_2019-01-09.png\nCopied: 2019_predicted_swe_2019-01-05.png\nCopied: 2017_predicted_swe_2017-12-02.png\nCopied: 2018_predicted_swe_2018-02-26.png\nCopied: 2017_predicted_swe_2017-12-26.png\nCopied: 2017_predicted_swe_2017-10-11.png\nCopied: 2019_predicted_swe_2019-02-01.png\nCopied: 2018_predicted_swe_2018-06-15.png\nCopied: 2017_predicted_swe_2017-12-13.png\nCopied: 2019_predicted_swe_2019-05-16.png\nCopied: 2018_predicted_swe_2018-12-28.png\nCopied: 2017_predicted_swe_2017-10-09.png\nCopied: 2019_predicted_swe_2019-01-03.png\nCopied: 2018_predicted_swe_2018-04-09.png\nCopied: 2017_predicted_swe_2017-10-13.png\nCopied: 2018_predicted_swe_2018-03-06.png\nCopied: importance_summary_plot_2023-06-15.png\nCopied: 2018_predicted_swe_2018-04-05.png\nCopied: 2022_pr_2022-01-16.png\nCopied: 2019_predicted_swe_2019-01-22.png\nCopied: 2017_predicted_swe_2017-10-22.png\nCopied: et-model-feature-importance-3.png\nCopied: 2018_predicted_swe_2018-06-04.png\nCopied: 2018_predicted_swe_2018-05-05.png\nCopied: 2023_predicted_swe_2023-01-15.png\nCopied: 2017_predicted_swe_2017-11-15.png\nCopied: 2018_predicted_swe_2018-11-04.png\nCopied: 2019_predicted_swe_2019-06-17.png\nCopied: 2018_predicted_swe_2018-05-08.png\nCopied: 2019_predicted_swe_2019-04-21.png\nCopied: 2018_predicted_swe_2018-01-22.png\nCopied: 2019_predicted_swe_2019-01-15.png\nCopied: 2018_predicted_swe_2018-04-17.png\nCopied: 2018_predicted_swe_2018-02-01.png\nCopied: 2018_predicted_swe_2018-05-27.png\nCopied: 2018_predicted_swe_2018-02-22.png\nCopied: 2018_predicted_swe_2018-11-07.png\nCopied: 2019_predicted_swe_2019-06-20.png\nCopied: 2018_predicted_swe_2018-12-09.png\nCopied: 2017_predicted_swe_2017-12-03.png\nCopied: 2019_predicted_swe_2019-06-14.png\nCopied: 2017_predicted_swe_2017-10-19.png\nCopied: 2018_predicted_swe_2018-12-23.png\nCopied: 2017_predicted_swe_2017-10-12.png\nCopied: 2019_predicted_swe_2019-05-11.png\nCopied: 2017_predicted_swe_2017-12-22.png\nCopied: 2017_predicted_swe_2017-11-23.png\nCopied: 2017_predicted_swe_2017-12-25.png\nCopied: importance_summary_plot_2023-07-15.png\nCopied: 2017_predicted_swe_2017-11-24.png\nCopied: 2018_predicted_swe_2018-06-07.png\nCopied: 2019_predicted_swe_2019-03-26.png\nCopied: 2019_predicted_swe_2019-03-04.png\nCopied: 2017_predicted_swe_2017-12-04.png\nCopied: 2019_predicted_swe_2019-05-25.png\nCopied: 2019_predicted_swe_2019-04-28.png\nCopied: 2022_pr_2022-12-29.png\nCopied: 2017_predicted_swe_2017-10-04.png\nCopied: 2017_predicted_swe_2017-12-27.png\nCopied: 2018_predicted_swe_2018-01-13.png\nCopied: 2018_predicted_swe_2018-03-18.png\nCopied: 2019_predicted_swe_2019-01-23.png\nCopied: 2023_predicted_swe_2023-03-02.png\nCopied: 2019_predicted_swe_2019-06-24.png\nCopied: 2022_pr_2022-10-15.png\nCopied: 2018_predicted_swe_2018-01-06.png\nCopied: 2018_predicted_swe_2018-01-25.png\nCopied: 2023_predicted_swe_2023-06-15.png\nCopied: 2018_predicted_swe_2018-05-17.png\nCopied: 2017_predicted_swe_2017-12-19.png\nCopied: 2018_predicted_swe_2018-02-21.png\nCopied: 2023_pr_2023-09-16.png\nCopied: 2018_predicted_swe_2018-02-27.png\nCopied: 2019_predicted_swe_2019-04-03.png\nCopied: 2018_predicted_swe_2018-02-04.png\nCopied: 2019_predicted_swe_2019-06-06.png\nCopied: 2019_predicted_swe_2019-01-10.png\nCopied: 2019_predicted_swe_2019-01-26.png\nCopied: 2022_pr_2022-02-22.png\nCopied: 2018_predicted_swe_2018-10-31.png\nCopied: 2018_predicted_swe_2018-05-22.png\nCopied: 2019_predicted_swe_2019-03-02.png\nCopied: 2018_predicted_swe_2018-12-20.png\nCopied: 2018_predicted_swe_2018-05-06.png\nCopied: 2018_predicted_swe_2018-11-29.png\nCopied: 2018_predicted_swe_2018-10-29.png\nCopied: 2019_predicted_swe_2019-05-21.png\nCopied: 2018_predicted_swe_2018-10-12.png\nCopied: 2018_predicted_swe_2018-11-09.png\nCopied: 2019_predicted_swe_2019-03-15.png\nCopied: 2019_predicted_swe_2019-05-27.png\nCopied: 2022_pr_2022-10-16.png\nCopied: 2018_predicted_swe_2018-04-04.png\nCopied: 2018_predicted_swe_2018-03-17.png\nCopied: 2022_pr_2022-04-17.png\nCopied: 2022_predicted_swe_2022-06-15.png\nCopied: 2017_predicted_swe_2017-12-05.png\nCopied: 2018_predicted_swe_2018-01-30.png\nCopied: 2018_predicted_swe_2018-12-30.png\nCopied: 2018_predicted_swe_2018-01-28.png\nCopied: 2019_predicted_swe_2019-01-20.png\nCopied: 2018_predicted_swe_2018-06-01.png\nCopied: 2017_predicted_swe_2017-11-10.png\nCopied: 2019_predicted_swe_2019-06-23.png\nCopied: 2018_predicted_swe_2018-04-11.png\nCopied: 2018_predicted_swe_2018-04-15.png\nCopied: 2018_predicted_swe_2018-04-06.png\nCopied: 2019_predicted_swe_2019-03-10.png\nCopied: 2018_predicted_swe_2018-04-03.png\nCopied: et-model-feature-importance-6.png\nCopied: 2018_predicted_swe_2018-10-21.png\nCopied: importance_summary_plot_2023-01-20.png\nCopied: 2018_predicted_swe_2018-03-13.png\nCopied: 2023_predicted_swe_2023-03-16.png\nCopied: 2018_predicted_swe_2018-12-11.png\nCopied: 2017_predicted_swe_2017-11-13.png\nCopied: importance_summary_plot_2023-05-17.png\nCopied: 2019_predicted_swe_2019-01-27.png\nCopied: 2017_predicted_swe_2017-12-20.png\nCopied: 2019_predicted_swe_2019-03-22.png\nCopied: 2018_predicted_swe_2018-10-05.png\nCopied: 2018_predicted_swe_2018-06-03.png\nCopied: 2018_predicted_swe_2018-04-27.png\nCopied: 2017_predicted_swe_2017-10-21.png\nCopied: 2017_predicted_swe_2017-10-27.png\nCopied: 2023_predicted_swe_2023-07-15.png\nCopied: 2023_predicted_swe_2023-09-16.png\nCopied: 2019_predicted_swe_2019-05-08.png\nCopied: 2023_predicted_swe_2023-02-10.png\nCopied: 2018_predicted_swe_2018-01-14.png\nCopied: 2019_predicted_swe_2019-04-19.png\nCopied: 2018_predicted_swe_2018-05-18.png\nCopied: 2018_predicted_swe_2018-05-21.png\nCopied: 2017_predicted_swe_2017-11-22.png\nCopied: 2018_predicted_swe_2018-12-13.png\nCopied: 2018_predicted_swe_2018-12-14.png\nCopied: 2017_predicted_swe_2017-10-01.png\nCopied: 2019_predicted_swe_2019-04-10.png\nCopied: 2017_predicted_swe_2017-11-17.png\nCopied: 2017_predicted_swe_2017-11-18.png\nCopied: 2018_predicted_swe_2018-03-05.png\nCopied: 2019_predicted_swe_2019-05-28.png\nCopied: 2018_predicted_swe_2018-12-27.png\nCopied: 2018_predicted_swe_2018-12-31.png\nCopied: 2018_predicted_swe_2018-10-24.png\nCopied: 2019_predicted_swe_2019-03-08.png\nCopied: 2018_predicted_swe_2018-03-16.png\nCopied: 2018_predicted_swe_2018-05-09.png\nCopied: 2019_predicted_swe_2019-01-02.png\nCopied: 2018_predicted_swe_2018-12-02.png\nCopied: 2019_predicted_swe_2019-02-25.png\nCopied: 2018_predicted_swe_2018-11-12.png\nCopied: 2017_predicted_swe_2017-10-28.png\nCopied: 2019_predicted_swe_2019-02-06.png\nCopied: 2019_predicted_swe_2019-03-09.png\nCopied: 2017_predicted_swe_2017-12-07.png\nCopied: 2019_predicted_swe_2019-02-07.png\nCopied: 2019_predicted_swe_2019-05-10.png\nCopied: 2018_predicted_swe_2018-03-29.png\nCopied: 2018_predicted_swe_2018-06-17.png\nCopied: 2019_predicted_swe_2019-06-12.png\nCopied: 2018_predicted_swe_2018-01-24.png\nCopied: 2018_predicted_swe_2018-05-30.png\nCopied: 2018_predicted_swe_2018-03-22.png\nCopied: 2019_predicted_swe_2019-02-05.png\nCopied: 2018_predicted_swe_2018-03-15.png\nCopied: 2019_predicted_swe_2019-03-03.png\nCopied: 2018_predicted_swe_2018-12-24.png\nCopied: 2018_predicted_swe_2018-03-01.png\nCopied: 2018_predicted_swe_2018-03-14.png\nCopied: 2018_predicted_swe_2018-02-10.png\nCopied: 2019_predicted_swe_2019-03-28.png\nCopied: 2018_predicted_swe_2018-11-20.png\nCopied: importance_summary_plot_2023-09-16.png\nCopied: 2017_predicted_swe_2017-11-27.png\nCopied: 2018_predicted_swe_2018-05-28.png\nCopied: 2018_predicted_swe_2018-12-17.png\nCopied: 2022_pr_2022-03-15.png\nCopied: 2017_predicted_swe_2017-10-08.png\nCopied: 2018_predicted_swe_2018-04-29.png\nCopied: 2023_pr_2023-05-16.png\nCopied: 2017_predicted_swe_2017-10-16.png\nCopied: 2018_predicted_swe_2018-12-25.png\nCopied: 2017_predicted_swe_2017-12-17.png\nCopied: 2023_predicted_swe_2023-05-29.png\nCopied: 2018_predicted_swe_2018-11-27.png\nCopied: 2018_predicted_swe_2018-02-06.png\nCopied: 2019_predicted_swe_2019-05-03.png\nCopied: 2018_predicted_swe_2018-11-24.png\nCopied: 2018_predicted_swe_2018-05-16.png\nCopied: 2019_predicted_swe_2019-02-16.png\nCopied: 2018_predicted_swe_2018-01-21.png\nCopied: 2018_predicted_swe_2018-01-17.png\nCopied: 2018_predicted_swe_2018-12-21.png\nCopied: 2018_predicted_swe_2018-04-22.png\nCopied: 2018_predicted_swe_2018-11-25.png\nCopied: 2023_pr_2023-05-25.png\nCopied: 2019_predicted_swe_2019-04-04.png\nCopied: 2018_predicted_swe_2018-06-26.png\nCopied: 2023_pr_2023-05-29.png\nCopied: 2022_predicted_swe_2022-10-16.png\nCopied: 2018_predicted_swe_2018-11-15.png\nCopied: 2018_predicted_swe_2018-05-31.png\nCopied: 2018_predicted_swe_2018-11-17.png\nCopied: 2017_predicted_swe_2017-10-07.png\nCopied: 2018_predicted_swe_2018-01-18.png\nCopied: 2017_predicted_swe_2017-11-16.png\nCopied: 2018_predicted_swe_2018-10-14.png\nCopied: 2018_predicted_swe_2018-01-20.png\nCopied: 2018_predicted_swe_2018-12-03.png\nCopied: 2018_predicted_swe_2018-10-18.png\nCopied: 2019_predicted_swe_2019-05-26.png\nCopied: 2019_predicted_swe_2019-01-07.png\nCopied: 2022_pr_2022-01-17.png\nCopied: 2019_predicted_swe_2019-05-23.png\nCopied: 2018_predicted_swe_2018-12-19.png\nCopied: 2018_predicted_swe_2018-03-09.png\nCopied: 2023_predicted_swe_2023-05-28.png\nCopied: 2018_predicted_swe_2018-10-23.png\nCopied: 2018_predicted_swe_2018-11-01.png\nCopied: 2018_predicted_swe_2018-02-25.png\nCopied: 2019_predicted_swe_2019-01-19.png\nCopied: 2018_predicted_swe_2018-02-02.png\nCopied: 2019_predicted_swe_2019-06-27.png\nCopied: 2018_predicted_swe_2018-12-16.png\nCopied: 2017_predicted_swe_2017-12-15.png\nCopied: 2023_predicted_swe_2023-09-15.png\nCopied: 2018_predicted_swe_2018-05-13.png\nCopied: 2022_pr_2022-12-30.png\n",
  "history_begin_time" : 1699803212933,
  "history_end_time" : 1699803214614,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "u6UyLpjxgxgD",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-11-12\ntest start date:  2022-10-16\ntest end date:  2023-10-07\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: importance_summary_plot_2023-02-12.png\nCopied: 2023_predicted_swe_2023-05-16.png\nCopied: 2018_predicted_swe_2018-06-16.png\nCopied: 2019_predicted_swe_2019-02-15.png\nCopied: 2018_predicted_swe_2018-06-02.png\nCopied: 2019_predicted_swe_2019-05-01.png\nCopied: 2018_predicted_swe_2018-10-20.png\nCopied: 2019_predicted_swe_2019-03-12.png\nCopied: 2022_predicted_swe_2022-03-15.png\nCopied: 2019_predicted_swe_2019-05-17.png\nCopied: 2022_predicted_swe_2022-12-29.png\nCopied: 2018_predicted_swe_2018-11-19.png\nCopied: 2019_predicted_swe_2019-01-13.png\nCopied: 2018_predicted_swe_2018-10-19.png\nCopied: 2017_predicted_swe_2017-12-01.png\nCopied: 2019_predicted_swe_2019-04-20.png\nCopied: 2019_predicted_swe_2019-04-07.png\nCopied: et-model-feature-importance-28.png\nCopied: 2019_predicted_swe_2019-04-17.png\nCopied: 2018_predicted_swe_2018-06-11.png\nCopied: 2019_predicted_swe_2019-02-21.png\nCopied: 2018_predicted_swe_2018-01-16.png\nCopied: 2019_predicted_swe_2019-02-04.png\nCopied: 2019_predicted_swe_2019-01-16.png\nCopied: 2019_predicted_swe_2019-06-04.png\nCopied: 2017_predicted_swe_2017-11-14.png\nCopied: 2019_predicted_swe_2019-02-03.png\nCopied: partial_dependence_summary_plot_2023-01-20.png\nCopied: 2018_predicted_swe_2018-12-07.png\nCopied: 2019_predicted_swe_2019-06-22.png\nCopied: 2018_predicted_swe_2018-11-03.png\nCopied: 2018_predicted_swe_2018-04-16.png\nCopied: 2018_predicted_swe_2018-11-14.png\nCopied: 2018_predicted_swe_2018-05-12.png\nCopied: 2019_predicted_swe_2019-03-16.png\nCopied: 2019_predicted_swe_2019-04-02.png\nCopied: 2019_predicted_swe_2019-01-06.png\nCopied: 2019_predicted_swe_2019-01-04.png\nCopied: 2019_predicted_swe_2019-02-23.png\nCopied: importance_summary_plot_2023-02-10.png\nCopied: 2019_predicted_swe_2019-05-02.png\nCopied: 2019_predicted_swe_2019-05-18.png\nCopied: 2018_predicted_swe_2018-10-16.png\nCopied: 2017_predicted_swe_2017-12-09.png\nCopied: 2023_pr_2023-02-10.png\nCopied: 2018_predicted_swe_2018-10-30.png\nCopied: 2023_predicted_swe_2023-05-26.png\nCopied: 2019_predicted_swe_2019-03-13.png\nCopied: 2018_predicted_swe_2018-10-02.png\nCopied: 2019_predicted_swe_2019-04-08.png\nCopied: 2018_predicted_swe_2018-12-29.png\nCopied: 2018_predicted_swe_2018-01-11.png\nCopied: 2019_predicted_swe_2019-03-18.png\nCopied: 2019_predicted_swe_2019-01-08.png\nCopied: 2018_predicted_swe_2018-01-12.png\nCopied: 2018_predicted_swe_2018-06-12.png\nCopied: 2019_predicted_swe_2019-03-27.png\nCopied: 2023_pr_2023-02-12.png\nCopied: 2019_predicted_swe_2019-02-13.png\nCopied: 2018_predicted_swe_2018-12-18.png\nCopied: 2023_pr_2023-03-16.png\nCopied: 2019_predicted_swe_2019-04-29.png\nCopied: 2018_predicted_swe_2018-05-25.png\nCopied: importance_summary_plot_latest_model.png\nCopied: 2018_predicted_swe_2018-12-22.png\nCopied: 2018_predicted_swe_2018-01-26.png\nCopied: 2018_predicted_swe_2018-02-15.png\nCopied: 2023_predicted_swe_2023-05-17.png\nCopied: 2018_predicted_swe_2018-12-05.png\nCopied: 2018_predicted_swe_2018-05-04.png\nCopied: 2019_predicted_swe_2019-02-09.png\nCopied: 2019_predicted_swe_2019-06-16.png\nCopied: 2017_predicted_swe_2017-11-09.png\nCopied: 2018_predicted_swe_2018-06-08.png\nCopied: 2019_predicted_swe_2019-06-07.png\nCopied: 2019_predicted_swe_2019-06-21.png\nCopied: 2019_predicted_swe_2019-02-18.png\nCopied: 2019_predicted_swe_2019-01-12.png\nCopied: 2018_predicted_swe_2018-04-19.png\nCopied: 2017_predicted_swe_2017-10-17.png\nCopied: 2017_predicted_swe_2017-11-20.png\nCopied: 2019_predicted_swe_2019-06-18.png\nCopied: 2018_predicted_swe_2018-06-30.png\nCopied: 2018_predicted_swe_2018-01-02.png\nCopied: 2018_predicted_swe_2018-11-18.png\nCopied: 2018_predicted_swe_2018-03-03.png\nCopied: 2018_predicted_swe_2018-03-26.png\nCopied: 2018_predicted_swe_2018-01-23.png\nCopied: 2019_predicted_swe_2019-05-15.png\nCopied: 2019_predicted_swe_2019-05-06.png\nCopied: 2017_predicted_swe_2017-10-03.png\nCopied: 2017_predicted_swe_2017-11-03.png\nCopied: 2019_predicted_swe_2019-06-15.png\nCopied: 2019_predicted_swe_2019-02-11.png\nCopied: 2019_predicted_swe_2019-06-28.png\nCopied: 2018_predicted_swe_2018-02-19.png\nCopied: 2023_pr_2023-03-02.png\nCopied: 2018_predicted_swe_2018-02-24.png\nCopied: 2017_predicted_swe_2017-11-12.png\nCopied: importance_summary_plot_2023-03-16.png\nCopied: 2018_predicted_swe_2018-04-30.png\nCopied: 2018_predicted_swe_2018-05-10.png\nCopied: et-model-feature-importance-21.png\nCopied: 2019_predicted_swe_2019-01-24.png\nCopied: 2019_predicted_swe_2019-06-29.png\nCopied: 2018_predicted_swe_2018-12-12.png\nCopied: 2022_predicted_swe_2022-01-17.png\nCopied: 2018_predicted_swe_2018-06-21.png\nCopied: 2019_predicted_swe_2019-04-22.png\nCopied: 2019_predicted_swe_2019-04-16.png\nCopied: 2018_predicted_swe_2018-01-31.png\nCopied: 2017_predicted_swe_2017-11-28.png\nCopied: 2018_predicted_swe_2018-12-04.png\nCopied: 2022_predicted_swe_2022-12-30.png\nCopied: 2019_predicted_swe_2019-03-05.png\nCopied: 2017_predicted_swe_2017-12-31.png\nCopied: 2018_predicted_swe_2018-01-04.png\nCopied: 2019_predicted_swe_2019-04-25.png\nCopied: 2017_predicted_swe_2017-10-31.png\nCopied: 2023_pr_2023-05-26.png\nCopied: 2023_predicted_swe_2023-05-25.png\nCopied: 2018_predicted_swe_2018-10-08.png\nCopied: 2019_predicted_swe_2019-05-22.png\nCopied: 2019_predicted_swe_2019-05-24.png\nCopied: 2018_predicted_swe_2018-05-24.png\nCopied: 2018_predicted_swe_2018-02-20.png\nCopied: 2018_predicted_swe_2018-03-19.png\nCopied: 2017_predicted_swe_2017-12-21.png\nCopied: 2019_predicted_swe_2019-01-14.png\nCopied: 2018_predicted_swe_2018-06-28.png\nCopied: 2018_predicted_swe_2018-05-11.png\nCopied: 2018_predicted_swe_2018-01-01.png\nCopied: 2017_predicted_swe_2017-12-16.png\nCopied: 2018_predicted_swe_2018-06-09.png\nCopied: 2018_predicted_swe_2018-11-26.png\nCopied: 2019_predicted_swe_2019-01-31.png\nCopied: 2018_predicted_swe_2018-05-15.png\nCopied: 2018_predicted_swe_2018-12-01.png\nCopied: 2017_predicted_swe_2017-11-11.png\nCopied: 2018_predicted_swe_2018-10-25.png\nCopied: 2018_predicted_swe_2018-11-28.png\nCopied: 2017_predicted_swe_2017-12-30.png\nCopied: 2019_predicted_swe_2019-03-21.png\nCopied: 2017_predicted_swe_2017-10-25.png\nCopied: 2019_predicted_swe_2019-04-18.png\nCopied: 2019_predicted_swe_2019-01-17.png\nCopied: 2017_predicted_swe_2017-12-10.png\nCopied: 2018_predicted_swe_2018-11-11.png\nCopied: 2019_predicted_swe_2019-02-19.png\nCopied: 2018_predicted_swe_2018-06-22.png\nCopied: 2017_predicted_swe_2017-11-07.png\nCopied: 2019_predicted_swe_2019-03-17.png\nCopied: 2017_predicted_swe_2017-10-02.png\nCopied: 2017_predicted_swe_2017-11-26.png\nCopied: 2019_predicted_swe_2019-02-26.png\nCopied: 2018_predicted_swe_2018-06-24.png\nCopied: 2019_predicted_swe_2019-01-28.png\nCopied: 2019_predicted_swe_2019-04-23.png\nCopied: 2023_pr_2023-05-17.png\nCopied: 2018_predicted_swe_2018-12-08.png\nCopied: 2018_predicted_swe_2018-01-19.png\nCopied: 2019_predicted_swe_2019-05-14.png\nCopied: 2018_predicted_swe_2018-10-09.png\nCopied: 2018_predicted_swe_2018-06-05.png\nCopied: 2018_predicted_swe_2018-01-27.png\nCopied: 2018_predicted_swe_2018-03-20.png\nCopied: 2018_predicted_swe_2018-10-11.png\nCopied: 2017_predicted_swe_2017-11-19.png\nCopied: 2018_predicted_swe_2018-02-14.png\nCopied: 2018_predicted_swe_2018-10-13.png\nCopied: 2022_predicted_swe_2022-01-16.png\nCopied: 2017_predicted_swe_2017-12-18.png\nCopied: 2019_predicted_swe_2019-05-07.png\nCopied: 2018_predicted_swe_2018-01-10.png\nCopied: 2017_predicted_swe_2017-10-18.png\nCopied: 2018_predicted_swe_2018-01-03.png\nCopied: 2023_predicted_swe_2023-02-12.png\nCopied: 2018_predicted_swe_2018-03-27.png\nCopied: 2019_predicted_swe_2019-06-09.png\nCopied: 2018_predicted_swe_2018-04-24.png\nCopied: 2019_predicted_swe_2019-06-25.png\nCopied: 2017_predicted_swe_2017-11-05.png\nCopied: 2018_predicted_swe_2018-04-28.png\nCopied: 2023_pr_2023-06-15.png\nCopied: 2019_predicted_swe_2019-03-23.png\nCopied: 2019_predicted_swe_2019-06-01.png\nCopied: 2017_predicted_swe_2017-11-21.png\nCopied: 2018_predicted_swe_2018-03-04.png\nCopied: 2017_predicted_swe_2017-10-15.png\nCopied: 2018_predicted_swe_2018-04-01.png\nCopied: 2019_predicted_swe_2019-01-01.png\nCopied: 2018_predicted_swe_2018-10-15.png\nCopied: 2018_predicted_swe_2018-01-09.png\nCopied: 2018_predicted_swe_2018-11-22.png\nCopied: 2022_predicted_swe_2022-04-17.png\nCopied: 2022_predicted_swe_2022-02-28.png\nCopied: 2019_predicted_swe_2019-04-11.png\nCopied: 2018_predicted_swe_2018-04-20.png\nCopied: 2022_pr_2022-06-15.png\nCopied: 2018_predicted_swe_2018-01-08.png\nCopied: 2017_predicted_swe_2017-10-24.png\nCopied: 2018_predicted_swe_2018-04-14.png\nCopied: 2019_predicted_swe_2019-01-18.png\nCopied: 2018_predicted_swe_2018-03-02.png\nCopied: 2019_predicted_swe_2019-02-20.png\nCopied: 2017_predicted_swe_2017-11-25.png\nCopied: 2018_predicted_swe_2018-11-10.png\nCopied: 2019_predicted_swe_2019-05-05.png\nCopied: 2017_predicted_swe_2017-11-29.png\nCopied: 2019_predicted_swe_2019-04-15.png\nCopied: 2019_predicted_swe_2019-01-30.png\nCopied: 2018_predicted_swe_2018-06-18.png\nCopied: 2018_pr_2018-01-01.png\nCopied: 2019_predicted_swe_2019-04-06.png\nCopied: 2018_predicted_swe_2018-12-10.png\nCopied: 2018_predicted_swe_2018-11-02.png\nCopied: 2018_predicted_swe_2018-06-25.png\nCopied: 2018_predicted_swe_2018-01-15.png\nCopied: 2022_predicted_swe_2022-10-15.png\nCopied: 2019_predicted_swe_2019-03-29.png\nCopied: 2018_predicted_swe_2018-03-28.png\nCopied: 2023_predicted_swe_2023-05-18.png\nCopied: 2023_pr_2023-02-11.png\nCopied: 2018_predicted_swe_2018-06-13.png\nCopied: 2018_predicted_swe_2018-12-26.png\nCopied: 2019_predicted_swe_2019-01-11.png\nCopied: 2017_predicted_swe_2017-12-11.png\nCopied: 2018_predicted_swe_2018-03-30.png\nCopied: 2022_predicted_swe_2022-02-22.png\nCopied: 2018_predicted_swe_2018-11-21.png\nCopied: 2018_predicted_swe_2018-05-01.png\nCopied: 2018_predicted_swe_2018-02-17.png\nCopied: 2018_predicted_swe_2018-04-12.png\nCopied: 2018_predicted_swe_2018-11-16.png\nCopied: 2023_predicted_swe_2023-01-18.png\nCopied: 2019_predicted_swe_2019-03-25.png\nCopied: 2017_predicted_swe_2017-11-02.png\nCopied: 2018_predicted_swe_2018-06-20.png\nCopied: 2022_predicted_swe_2022-10-03.png\nCopied: 2018_predicted_swe_2018-04-08.png\nCopied: 2017_predicted_swe_2017-10-06.png\nCopied: 2019_predicted_swe_2019-05-20.png\nCopied: 2018_predicted_swe_2018-05-02.png\nCopied: 2019_predicted_swe_2019-06-11.png\nCopied: 2017_predicted_swe_2017-12-14.png\nCopied: 2018_predicted_swe_2018-04-02.png\nCopied: 2019_predicted_swe_2019-04-01.png\nCopied: 2017_predicted_swe_2017-10-20.png\nCopied: 2018_predicted_swe_2018-10-03.png\nCopied: 2019_predicted_swe_2019-03-19.png\nCopied: 2018_predicted_swe_2018-10-10.png\nCopied: 2018_predicted_swe_2018-02-03.png\nCopied: 2018_predicted_swe_2018-04-21.png\nCopied: 2019_predicted_swe_2019-03-30.png\nCopied: importance_summary_plot_2023-09-15.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2017_predicted_swe_2017-10-10.png\nCopied: 2018_predicted_swe_2018-01-29.png\nCopied: 2018_predicted_swe_2018-03-10.png\nCopied: 2018_predicted_swe_2018-02-13.png\nCopied: 2018_predicted_swe_2018-04-13.png\nCopied: 2018_predicted_swe_2018-01-07.png\nCopied: 2019_predicted_swe_2019-04-05.png\nCopied: 2018_predicted_swe_2018-10-27.png\nCopied: 2018_predicted_swe_2018-02-09.png\nCopied: 2019_predicted_swe_2019-06-10.png\nCopied: 2019_predicted_swe_2019-02-24.png\nCopied: 2018_predicted_swe_2018-02-07.png\nCopied: 2019_predicted_swe_2019-06-13.png\nCopied: 2019_predicted_swe_2019-02-22.png\nCopied: 2019_predicted_swe_2019-05-13.png\nCopied: et-model-feature-importance-13.png\nCopied: 2023_predicted_swe_2023-01-19.png\nCopied: 2019_predicted_swe_2019-02-28.png\nCopied: 2017_predicted_swe_2017-12-06.png\nCopied: 2018_predicted_swe_2018-05-14.png\nCopied: 2018_predicted_swe_2018-10-22.png\nCopied: 2019_predicted_swe_2019-04-24.png\nCopied: 2023_predicted_swe_2023-01-20.png\nCopied: 2023_pr_2023-01-19.png\nCopied: 2019_predicted_swe_2019-01-29.png\nCopied: 2017_predicted_swe_2017-12-12.png\nCopied: 2018_predicted_swe_2018-02-12.png\nCopied: 2018_predicted_swe_2018-06-14.png\nCopied: 2018_predicted_swe_2018-11-08.png\nCopied: 2018_predicted_swe_2018-02-23.png\nCopied: 2022_pr_2022-02-28.png\nCopied: 2023_pr_2023-05-18.png\nCopied: 2023_pr_2023-03-15.png\nCopied: 2018_predicted_swe_2018-03-11.png\nCopied: 2019_predicted_swe_2019-04-14.png\nCopied: 2018_predicted_swe_2018-02-08.png\nCopied: 2019_predicted_swe_2019-04-30.png\nCopied: 2018_predicted_swe_2018-02-16.png\nCopied: 2018_predicted_swe_2018-10-26.png\nCopied: 2019_predicted_swe_2019-04-12.png\nCopied: 2019_predicted_swe_2019-05-19.png\nCopied: 2017_predicted_swe_2017-11-04.png\nCopied: 2019_predicted_swe_2019-01-21.png\nCopied: 2019_predicted_swe_2019-02-10.png\nCopied: 2018_predicted_swe_2018-06-19.png\nCopied: 2017_predicted_swe_2017-10-30.png\nCopied: 2018_predicted_swe_2018-03-12.png\nCopied: 2023_pr_2023-07-15.png\nCopied: 2019_predicted_swe_2019-04-09.png\nCopied: 2019_predicted_swe_2019-04-27.png\nCopied: 2017_predicted_swe_2017-12-28.png\nCopied: 2023_pr_2023-09-15.png\nCopied: 2018_predicted_swe_2018-03-23.png\nCopied: 2018_predicted_swe_2018-03-24.png\nCopied: 2019_predicted_swe_2019-03-14.png\nCopied: 2019_predicted_swe_2019-06-05.png\nCopied: 2018_predicted_swe_2018-10-07.png\nCopied: 2019_predicted_swe_2019-03-20.png\nCopied: 2019_predicted_swe_2019-03-31.png\nCopied: 2018_predicted_swe_2018-10-04.png\nCopied: 2018_predicted_swe_2018-04-26.png\nCopied: 2019_predicted_swe_2019-02-02.png\nCopied: 2019_predicted_swe_2019-04-26.png\nCopied: 2018_predicted_swe_2018-04-23.png\nCopied: et-model-feature-importance-26.png\nCopied: 2018_predicted_swe_2018-05-07.png\nCopied: 2019_predicted_swe_2019-03-01.png\nCopied: 2018_predicted_swe_2018-11-05.png\nCopied: 2023_predicted_swe_2023-03-15.png\nCopied: 2017_predicted_swe_2017-10-05.png\nCopied: 2018_predicted_swe_2018-03-07.png\nCopied: 2018_predicted_swe_2018-11-30.png\nCopied: shap_summary_plot_2023-01-20.png\nCopied: 2018_predicted_swe_2018-06-29.png\nCopied: 2017_predicted_swe_2017-11-06.png\nCopied: 2018_predicted_swe_2018-05-19.png\nCopied: 2023_pr_2023-01-20.png\nCopied: 2018_predicted_swe_2018-03-21.png\nCopied: 2018_predicted_swe_2018-05-03.png\nCopied: 2018_predicted_swe_2018-11-06.png\nCopied: 2017_predicted_swe_2017-12-24.png\nCopied: 2019_predicted_swe_2019-06-03.png\nCopied: 2019_predicted_swe_2019-01-25.png\nCopied: 2018_predicted_swe_2018-10-17.png\nCopied: 2018_predicted_swe_2018-10-01.png\nCopied: 2018_predicted_swe_2018-04-10.png\nCopied: importance_summary_plot_2023-05-16.png\nCopied: 2018_predicted_swe_2018-03-25.png\nCopied: 2018_predicted_swe_2018-04-07.png\nCopied: 2019_predicted_swe_2019-03-06.png\nCopied: 2019_predicted_swe_2019-03-11.png\nCopied: 2017_predicted_swe_2017-10-23.png\nCopied: 2019_predicted_swe_2019-03-24.png\nCopied: 2018_predicted_swe_2018-12-15.png\nCopied: 2018_predicted_swe_2018-02-05.png\nCopied: 2018_predicted_swe_2018-03-08.png\nCopied: 2018_predicted_swe_2018-04-18.png\nCopied: 2018_predicted_swe_2018-05-23.png\nCopied: 2018_predicted_swe_2018-05-26.png\nCopied: 2018_predicted_swe_2018-06-06.png\nCopied: 2019_predicted_swe_2019-06-08.png\nCopied: 2017_predicted_swe_2017-12-23.png\nCopied: 2019_predicted_swe_2019-02-14.png\nCopied: 2019_predicted_swe_2019-05-31.png\nCopied: 2019_predicted_swe_2019-06-19.png\nCopied: 2023_pr_2023-01-18.png\nCopied: 2019_predicted_swe_2019-02-08.png\nCopied: 2018_predicted_swe_2018-10-28.png\nCopied: 2019_predicted_swe_2019-05-04.png\nCopied: 2018_predicted_swe_2018-06-27.png\nCopied: 2017_predicted_swe_2017-11-08.png\nCopied: 2019_predicted_swe_2019-05-12.png\nCopied: 2017_predicted_swe_2017-10-29.png\nCopied: 2019_predicted_swe_2019-06-02.png\nCopied: 2017_predicted_swe_2017-11-30.png\nCopied: 2019_predicted_swe_2019-06-30.png\nCopied: 2019_predicted_swe_2019-02-27.png\nCopied: 2019_predicted_swe_2019-03-07.png\nCopied: 2018_predicted_swe_2018-03-31.png\nCopied: 2019_predicted_swe_2019-04-13.png\nCopied: 2018_predicted_swe_2018-02-18.png\nCopied: importance_summary_plot_2023-02-11.png\nCopied: 2023_pr_2023-05-28.png\nCopied: 2018_predicted_swe_2018-02-28.png\nCopied: 2017_predicted_swe_2017-12-29.png\nCopied: 2017_predicted_swe_2017-10-26.png\nCopied: 2018_predicted_swe_2018-11-23.png\nCopied: 2019_predicted_swe_2019-02-17.png\nCopied: 2018_predicted_swe_2018-05-20.png\nCopied: et-model-feature-importance-20.png\nCopied: 2018_predicted_swe_2018-10-06.png\nCopied: 2018_predicted_swe_2018-05-29.png\nCopied: 2018_predicted_swe_2018-12-06.png\nCopied: 2019_predicted_swe_2019-05-30.png\nCopied: 2019_predicted_swe_2019-05-29.png\nCopied: importance_summary_plot_2023-03-15.png\nCopied: 2017_predicted_swe_2017-10-14.png\nCopied: 2018_predicted_swe_2018-02-11.png\nCopied: 2019_predicted_swe_2019-06-26.png\nCopied: 2023_predicted_swe_2023-02-11.png\nCopied: 2023_pr_2023-01-15.png\nCopied: 2018_predicted_swe_2018-04-25.png\nCopied: 2017_predicted_swe_2017-11-01.png\nCopied: 2018_predicted_swe_2018-06-23.png\nCopied: 2017_predicted_swe_2017-12-08.png\nCopied: 2018_predicted_swe_2018-01-05.png\nCopied: 2018_predicted_swe_2018-11-13.png\nCopied: 2019_predicted_swe_2019-02-12.png\nCopied: 2019_predicted_swe_2019-05-09.png\nCopied: 2018_predicted_swe_2018-06-10.png\nCopied: 2019_predicted_swe_2019-01-09.png\nCopied: 2019_predicted_swe_2019-01-05.png\nCopied: 2017_predicted_swe_2017-12-02.png\nCopied: 2018_predicted_swe_2018-02-26.png\nCopied: 2017_predicted_swe_2017-12-26.png\nCopied: 2017_predicted_swe_2017-10-11.png\nCopied: 2019_predicted_swe_2019-02-01.png\nCopied: 2018_predicted_swe_2018-06-15.png\nCopied: 2017_predicted_swe_2017-12-13.png\nCopied: 2019_predicted_swe_2019-05-16.png\nCopied: 2018_predicted_swe_2018-12-28.png\nCopied: 2017_predicted_swe_2017-10-09.png\nCopied: 2019_predicted_swe_2019-01-03.png\nCopied: 2018_predicted_swe_2018-04-09.png\nCopied: 2017_predicted_swe_2017-10-13.png\nCopied: 2018_predicted_swe_2018-03-06.png\nCopied: importance_summary_plot_2023-06-15.png\nCopied: 2018_predicted_swe_2018-04-05.png\nCopied: 2022_pr_2022-01-16.png\nCopied: 2019_predicted_swe_2019-01-22.png\nCopied: 2017_predicted_swe_2017-10-22.png\nCopied: et-model-feature-importance-3.png\nCopied: 2018_predicted_swe_2018-06-04.png\nCopied: 2018_predicted_swe_2018-05-05.png\nCopied: 2023_predicted_swe_2023-01-15.png\nCopied: 2017_predicted_swe_2017-11-15.png\nCopied: 2018_predicted_swe_2018-11-04.png\nCopied: 2019_predicted_swe_2019-06-17.png\nCopied: 2018_predicted_swe_2018-05-08.png\nCopied: 2019_predicted_swe_2019-04-21.png\nCopied: 2018_predicted_swe_2018-01-22.png\nCopied: 2019_predicted_swe_2019-01-15.png\nCopied: 2018_predicted_swe_2018-04-17.png\nCopied: 2018_predicted_swe_2018-02-01.png\nCopied: 2018_predicted_swe_2018-05-27.png\nCopied: 2018_predicted_swe_2018-02-22.png\nCopied: 2018_predicted_swe_2018-11-07.png\nCopied: 2019_predicted_swe_2019-06-20.png\nCopied: 2018_predicted_swe_2018-12-09.png\nCopied: 2017_predicted_swe_2017-12-03.png\nCopied: 2019_predicted_swe_2019-06-14.png\nCopied: 2017_predicted_swe_2017-10-19.png\nCopied: 2018_predicted_swe_2018-12-23.png\nCopied: 2017_predicted_swe_2017-10-12.png\nCopied: 2019_predicted_swe_2019-05-11.png\nCopied: 2017_predicted_swe_2017-12-22.png\nCopied: 2017_predicted_swe_2017-11-23.png\nCopied: 2017_predicted_swe_2017-12-25.png\nCopied: importance_summary_plot_2023-07-15.png\nCopied: 2017_predicted_swe_2017-11-24.png\nCopied: 2018_predicted_swe_2018-06-07.png\nCopied: 2019_predicted_swe_2019-03-26.png\nCopied: 2019_predicted_swe_2019-03-04.png\nCopied: 2017_predicted_swe_2017-12-04.png\nCopied: 2019_predicted_swe_2019-05-25.png\nCopied: 2019_predicted_swe_2019-04-28.png\nCopied: 2022_pr_2022-12-29.png\nCopied: 2017_predicted_swe_2017-10-04.png\nCopied: 2017_predicted_swe_2017-12-27.png\nCopied: 2018_predicted_swe_2018-01-13.png\nCopied: 2018_predicted_swe_2018-03-18.png\nCopied: 2019_predicted_swe_2019-01-23.png\nCopied: 2023_predicted_swe_2023-03-02.png\nCopied: 2019_predicted_swe_2019-06-24.png\nCopied: 2022_pr_2022-10-15.png\nCopied: 2018_predicted_swe_2018-01-06.png\nCopied: 2018_predicted_swe_2018-01-25.png\nCopied: 2023_predicted_swe_2023-06-15.png\nCopied: 2018_predicted_swe_2018-05-17.png\nCopied: 2017_predicted_swe_2017-12-19.png\nCopied: 2018_predicted_swe_2018-02-21.png\nCopied: 2023_pr_2023-09-16.png\nCopied: 2018_predicted_swe_2018-02-27.png\nCopied: 2019_predicted_swe_2019-04-03.png\nCopied: 2018_predicted_swe_2018-02-04.png\nCopied: 2019_predicted_swe_2019-06-06.png\nCopied: 2019_predicted_swe_2019-01-10.png\nCopied: 2019_predicted_swe_2019-01-26.png\nCopied: 2022_pr_2022-02-22.png\nCopied: 2018_predicted_swe_2018-10-31.png\nCopied: 2018_predicted_swe_2018-05-22.png\nCopied: 2019_predicted_swe_2019-03-02.png\nCopied: 2018_predicted_swe_2018-12-20.png\nCopied: 2018_predicted_swe_2018-05-06.png\nCopied: 2018_predicted_swe_2018-11-29.png\nCopied: 2018_predicted_swe_2018-10-29.png\nCopied: 2019_predicted_swe_2019-05-21.png\nCopied: 2018_predicted_swe_2018-10-12.png\nCopied: 2018_predicted_swe_2018-11-09.png\nCopied: 2019_predicted_swe_2019-03-15.png\nCopied: 2019_predicted_swe_2019-05-27.png\nCopied: 2022_pr_2022-10-16.png\nCopied: 2018_predicted_swe_2018-04-04.png\nCopied: 2018_predicted_swe_2018-03-17.png\nCopied: 2022_pr_2022-04-17.png\nCopied: 2022_predicted_swe_2022-06-15.png\nCopied: 2017_predicted_swe_2017-12-05.png\nCopied: 2018_predicted_swe_2018-01-30.png\nCopied: 2018_predicted_swe_2018-12-30.png\nCopied: 2018_predicted_swe_2018-01-28.png\nCopied: 2019_predicted_swe_2019-01-20.png\nCopied: 2018_predicted_swe_2018-06-01.png\nCopied: 2017_predicted_swe_2017-11-10.png\nCopied: 2019_predicted_swe_2019-06-23.png\nCopied: 2018_predicted_swe_2018-04-11.png\nCopied: 2018_predicted_swe_2018-04-15.png\nCopied: 2018_predicted_swe_2018-04-06.png\nCopied: 2019_predicted_swe_2019-03-10.png\nCopied: 2018_predicted_swe_2018-04-03.png\nCopied: et-model-feature-importance-6.png\nCopied: 2018_predicted_swe_2018-10-21.png\nCopied: importance_summary_plot_2023-01-20.png\nCopied: 2018_predicted_swe_2018-03-13.png\nCopied: 2023_predicted_swe_2023-03-16.png\nCopied: 2018_predicted_swe_2018-12-11.png\nCopied: 2017_predicted_swe_2017-11-13.png\nCopied: importance_summary_plot_2023-05-17.png\nCopied: 2019_predicted_swe_2019-01-27.png\nCopied: 2017_predicted_swe_2017-12-20.png\nCopied: 2019_predicted_swe_2019-03-22.png\nCopied: 2018_predicted_swe_2018-10-05.png\nCopied: 2018_predicted_swe_2018-06-03.png\nCopied: 2018_predicted_swe_2018-04-27.png\nCopied: 2017_predicted_swe_2017-10-21.png\nCopied: 2017_predicted_swe_2017-10-27.png\nCopied: 2023_predicted_swe_2023-07-15.png\nCopied: 2023_predicted_swe_2023-09-16.png\nCopied: 2019_predicted_swe_2019-05-08.png\nCopied: 2023_predicted_swe_2023-02-10.png\nCopied: 2018_predicted_swe_2018-01-14.png\nCopied: 2019_predicted_swe_2019-04-19.png\nCopied: 2018_predicted_swe_2018-05-18.png\nCopied: 2018_predicted_swe_2018-05-21.png\nCopied: 2017_predicted_swe_2017-11-22.png\nCopied: 2018_predicted_swe_2018-12-13.png\nCopied: 2018_predicted_swe_2018-12-14.png\nCopied: 2017_predicted_swe_2017-10-01.png\nCopied: 2019_predicted_swe_2019-04-10.png\nCopied: 2017_predicted_swe_2017-11-17.png\nCopied: 2017_predicted_swe_2017-11-18.png\nCopied: 2018_predicted_swe_2018-03-05.png\nCopied: 2019_predicted_swe_2019-05-28.png\nCopied: 2018_predicted_swe_2018-12-27.png\nCopied: 2018_predicted_swe_2018-12-31.png\nCopied: 2018_predicted_swe_2018-10-24.png\nCopied: 2019_predicted_swe_2019-03-08.png\nCopied: 2018_predicted_swe_2018-03-16.png\nCopied: 2018_predicted_swe_2018-05-09.png\nCopied: 2019_predicted_swe_2019-01-02.png\nCopied: 2018_predicted_swe_2018-12-02.png\nCopied: 2019_predicted_swe_2019-02-25.png\nCopied: 2018_predicted_swe_2018-11-12.png\nCopied: 2017_predicted_swe_2017-10-28.png\nCopied: 2019_predicted_swe_2019-02-06.png\nCopied: 2019_predicted_swe_2019-03-09.png\nCopied: 2017_predicted_swe_2017-12-07.png\nCopied: 2019_predicted_swe_2019-02-07.png\nCopied: 2019_predicted_swe_2019-05-10.png\nCopied: 2018_predicted_swe_2018-03-29.png\nCopied: 2018_predicted_swe_2018-06-17.png\nCopied: 2019_predicted_swe_2019-06-12.png\nCopied: 2018_predicted_swe_2018-01-24.png\nCopied: 2018_predicted_swe_2018-05-30.png\nCopied: 2018_predicted_swe_2018-03-22.png\nCopied: 2019_predicted_swe_2019-02-05.png\nCopied: 2018_predicted_swe_2018-03-15.png\nCopied: 2019_predicted_swe_2019-03-03.png\nCopied: 2018_predicted_swe_2018-12-24.png\nCopied: 2018_predicted_swe_2018-03-01.png\nCopied: 2018_predicted_swe_2018-03-14.png\nCopied: 2018_predicted_swe_2018-02-10.png\nCopied: 2019_predicted_swe_2019-03-28.png\nCopied: 2018_predicted_swe_2018-11-20.png\nCopied: importance_summary_plot_2023-09-16.png\nCopied: 2017_predicted_swe_2017-11-27.png\nCopied: 2018_predicted_swe_2018-05-28.png\nCopied: 2018_predicted_swe_2018-12-17.png\nCopied: 2022_pr_2022-03-15.png\nCopied: 2017_predicted_swe_2017-10-08.png\nCopied: 2018_predicted_swe_2018-04-29.png\nCopied: 2023_pr_2023-05-16.png\nCopied: 2017_predicted_swe_2017-10-16.png\nCopied: 2018_predicted_swe_2018-12-25.png\nCopied: 2017_predicted_swe_2017-12-17.png\nCopied: 2023_predicted_swe_2023-05-29.png\nCopied: 2018_predicted_swe_2018-11-27.png\nCopied: 2018_predicted_swe_2018-02-06.png\nCopied: 2019_predicted_swe_2019-05-03.png\nCopied: 2018_predicted_swe_2018-11-24.png\nCopied: 2018_predicted_swe_2018-05-16.png\nCopied: 2019_predicted_swe_2019-02-16.png\nCopied: 2018_predicted_swe_2018-01-21.png\nCopied: 2018_predicted_swe_2018-01-17.png\nCopied: 2018_predicted_swe_2018-12-21.png\nCopied: 2018_predicted_swe_2018-04-22.png\nCopied: 2018_predicted_swe_2018-11-25.png\nCopied: 2023_pr_2023-05-25.png\nCopied: 2019_predicted_swe_2019-04-04.png\nCopied: 2018_predicted_swe_2018-06-26.png\nCopied: 2023_pr_2023-05-29.png\nCopied: 2022_predicted_swe_2022-10-16.png\nCopied: 2018_predicted_swe_2018-11-15.png\nCopied: 2018_predicted_swe_2018-05-31.png\nCopied: 2018_predicted_swe_2018-11-17.png\nCopied: 2017_predicted_swe_2017-10-07.png\nCopied: 2018_predicted_swe_2018-01-18.png\nCopied: 2017_predicted_swe_2017-11-16.png\nCopied: 2018_predicted_swe_2018-10-14.png\nCopied: 2018_predicted_swe_2018-01-20.png\nCopied: 2018_predicted_swe_2018-12-03.png\nCopied: 2018_predicted_swe_2018-10-18.png\nCopied: 2019_predicted_swe_2019-05-26.png\nCopied: 2019_predicted_swe_2019-01-07.png\nCopied: 2022_pr_2022-01-17.png\nCopied: 2019_predicted_swe_2019-05-23.png\nCopied: 2018_predicted_swe_2018-12-19.png\nCopied: 2018_predicted_swe_2018-03-09.png\nCopied: 2023_predicted_swe_2023-05-28.png\nCopied: 2018_predicted_swe_2018-10-23.png\nCopied: 2018_predicted_swe_2018-11-01.png\nCopied: 2018_predicted_swe_2018-02-25.png\nCopied: 2019_predicted_swe_2019-01-19.png\nCopied: 2018_predicted_swe_2018-02-02.png\nCopied: 2019_predicted_swe_2019-06-27.png\nCopied: 2018_predicted_swe_2018-12-16.png\nCopied: 2017_predicted_swe_2017-12-15.png\nCopied: 2023_predicted_swe_2023-09-15.png\nCopied: 2018_predicted_swe_2018-05-13.png\nCopied: 2022_pr_2022-12-30.png\n",
  "history_begin_time" : 1699799702002,
  "history_end_time" : 1699799706622,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "ht3dw13g3gs",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-11-11\ntest start date:  2022-10-16\ntest end date:  2023-10-07\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: importance_summary_plot_2023-02-12.png\nCopied: 2023_predicted_swe_2023-05-16.png\nCopied: 2018_predicted_swe_2018-06-16.png\nCopied: 2019_predicted_swe_2019-02-15.png\nCopied: 2018_predicted_swe_2018-06-02.png\nCopied: 2019_predicted_swe_2019-05-01.png\nCopied: 2018_predicted_swe_2018-10-20.png\nCopied: 2019_predicted_swe_2019-03-12.png\nCopied: 2022_predicted_swe_2022-03-15.png\nCopied: 2019_predicted_swe_2019-05-17.png\nCopied: 2022_predicted_swe_2022-12-29.png\nCopied: 2018_predicted_swe_2018-11-19.png\nCopied: 2019_predicted_swe_2019-01-13.png\nCopied: 2018_predicted_swe_2018-10-19.png\nCopied: 2017_predicted_swe_2017-12-01.png\nCopied: 2019_predicted_swe_2019-04-20.png\nCopied: 2019_predicted_swe_2019-04-07.png\nCopied: et-model-feature-importance-28.png\nCopied: 2019_predicted_swe_2019-04-17.png\nCopied: 2018_predicted_swe_2018-06-11.png\nCopied: 2019_predicted_swe_2019-02-21.png\nCopied: 2018_predicted_swe_2018-01-16.png\nCopied: 2019_predicted_swe_2019-02-04.png\nCopied: 2019_predicted_swe_2019-01-16.png\nCopied: 2019_predicted_swe_2019-06-04.png\nCopied: 2017_predicted_swe_2017-11-14.png\nCopied: 2019_predicted_swe_2019-02-03.png\nCopied: partial_dependence_summary_plot_2023-01-20.png\nCopied: 2018_predicted_swe_2018-12-07.png\nCopied: 2019_predicted_swe_2019-06-22.png\nCopied: 2018_predicted_swe_2018-11-03.png\nCopied: 2018_predicted_swe_2018-04-16.png\nCopied: 2018_predicted_swe_2018-11-14.png\nCopied: 2018_predicted_swe_2018-05-12.png\nCopied: 2019_predicted_swe_2019-03-16.png\nCopied: 2019_predicted_swe_2019-04-02.png\nCopied: 2019_predicted_swe_2019-01-06.png\nCopied: 2019_predicted_swe_2019-01-04.png\nCopied: 2019_predicted_swe_2019-02-23.png\nCopied: importance_summary_plot_2023-02-10.png\nCopied: 2019_predicted_swe_2019-05-02.png\nCopied: 2019_predicted_swe_2019-05-18.png\nCopied: 2018_predicted_swe_2018-10-16.png\nCopied: 2017_predicted_swe_2017-12-09.png\nCopied: 2023_pr_2023-02-10.png\nCopied: 2018_predicted_swe_2018-10-30.png\nCopied: 2023_predicted_swe_2023-05-26.png\nCopied: 2019_predicted_swe_2019-03-13.png\nCopied: 2018_predicted_swe_2018-10-02.png\nCopied: 2019_predicted_swe_2019-04-08.png\nCopied: 2018_predicted_swe_2018-12-29.png\nCopied: 2018_predicted_swe_2018-01-11.png\nCopied: 2019_predicted_swe_2019-03-18.png\nCopied: 2019_predicted_swe_2019-01-08.png\nCopied: 2018_predicted_swe_2018-01-12.png\nCopied: 2018_predicted_swe_2018-06-12.png\nCopied: 2019_predicted_swe_2019-03-27.png\nCopied: 2023_pr_2023-02-12.png\nCopied: 2019_predicted_swe_2019-02-13.png\nCopied: 2018_predicted_swe_2018-12-18.png\nCopied: 2023_pr_2023-03-16.png\nCopied: 2019_predicted_swe_2019-04-29.png\nCopied: 2018_predicted_swe_2018-05-25.png\nCopied: importance_summary_plot_latest_model.png\nCopied: 2018_predicted_swe_2018-12-22.png\nCopied: 2018_predicted_swe_2018-01-26.png\nCopied: 2018_predicted_swe_2018-02-15.png\nCopied: 2023_predicted_swe_2023-05-17.png\nCopied: 2018_predicted_swe_2018-12-05.png\nCopied: 2018_predicted_swe_2018-05-04.png\nCopied: 2019_predicted_swe_2019-02-09.png\nCopied: 2019_predicted_swe_2019-06-16.png\nCopied: 2017_predicted_swe_2017-11-09.png\nCopied: 2018_predicted_swe_2018-06-08.png\nCopied: 2019_predicted_swe_2019-06-07.png\nCopied: 2019_predicted_swe_2019-06-21.png\nCopied: 2019_predicted_swe_2019-02-18.png\nCopied: 2019_predicted_swe_2019-01-12.png\nCopied: 2018_predicted_swe_2018-04-19.png\nCopied: 2017_predicted_swe_2017-10-17.png\nCopied: 2017_predicted_swe_2017-11-20.png\nCopied: 2019_predicted_swe_2019-06-18.png\nCopied: 2018_predicted_swe_2018-06-30.png\nCopied: 2018_predicted_swe_2018-01-02.png\nCopied: 2018_predicted_swe_2018-11-18.png\nCopied: 2018_predicted_swe_2018-03-03.png\nCopied: 2018_predicted_swe_2018-03-26.png\nCopied: 2018_predicted_swe_2018-01-23.png\nCopied: 2019_predicted_swe_2019-05-15.png\nCopied: 2019_predicted_swe_2019-05-06.png\nCopied: 2017_predicted_swe_2017-10-03.png\nCopied: 2017_predicted_swe_2017-11-03.png\nCopied: 2019_predicted_swe_2019-06-15.png\nCopied: 2019_predicted_swe_2019-02-11.png\nCopied: 2019_predicted_swe_2019-06-28.png\nCopied: 2018_predicted_swe_2018-02-19.png\nCopied: 2023_pr_2023-03-02.png\nCopied: 2018_predicted_swe_2018-02-24.png\nCopied: 2017_predicted_swe_2017-11-12.png\nCopied: importance_summary_plot_2023-03-16.png\nCopied: 2018_predicted_swe_2018-04-30.png\nCopied: 2018_predicted_swe_2018-05-10.png\nCopied: et-model-feature-importance-21.png\nCopied: 2019_predicted_swe_2019-01-24.png\nCopied: 2019_predicted_swe_2019-06-29.png\nCopied: 2018_predicted_swe_2018-12-12.png\nCopied: 2022_predicted_swe_2022-01-17.png\nCopied: 2018_predicted_swe_2018-06-21.png\nCopied: 2019_predicted_swe_2019-04-22.png\nCopied: 2019_predicted_swe_2019-04-16.png\nCopied: 2018_predicted_swe_2018-01-31.png\nCopied: 2017_predicted_swe_2017-11-28.png\nCopied: 2018_predicted_swe_2018-12-04.png\nCopied: 2022_predicted_swe_2022-12-30.png\nCopied: 2019_predicted_swe_2019-03-05.png\nCopied: 2017_predicted_swe_2017-12-31.png\nCopied: 2018_predicted_swe_2018-01-04.png\nCopied: 2019_predicted_swe_2019-04-25.png\nCopied: 2017_predicted_swe_2017-10-31.png\nCopied: 2023_pr_2023-05-26.png\nCopied: 2023_predicted_swe_2023-05-25.png\nCopied: 2018_predicted_swe_2018-10-08.png\nCopied: 2019_predicted_swe_2019-05-22.png\nCopied: 2019_predicted_swe_2019-05-24.png\nCopied: 2018_predicted_swe_2018-05-24.png\nCopied: 2018_predicted_swe_2018-02-20.png\nCopied: 2018_predicted_swe_2018-03-19.png\nCopied: 2017_predicted_swe_2017-12-21.png\nCopied: 2019_predicted_swe_2019-01-14.png\nCopied: 2018_predicted_swe_2018-06-28.png\nCopied: 2018_predicted_swe_2018-05-11.png\nCopied: 2018_predicted_swe_2018-01-01.png\nCopied: 2017_predicted_swe_2017-12-16.png\nCopied: 2018_predicted_swe_2018-06-09.png\nCopied: 2018_predicted_swe_2018-11-26.png\nCopied: 2019_predicted_swe_2019-01-31.png\nCopied: 2018_predicted_swe_2018-05-15.png\nCopied: 2018_predicted_swe_2018-12-01.png\nCopied: 2017_predicted_swe_2017-11-11.png\nCopied: 2018_predicted_swe_2018-10-25.png\nCopied: 2018_predicted_swe_2018-11-28.png\nCopied: 2017_predicted_swe_2017-12-30.png\nCopied: 2019_predicted_swe_2019-03-21.png\nCopied: 2017_predicted_swe_2017-10-25.png\nCopied: 2019_predicted_swe_2019-04-18.png\nCopied: 2019_predicted_swe_2019-01-17.png\nCopied: 2017_predicted_swe_2017-12-10.png\nCopied: 2018_predicted_swe_2018-11-11.png\nCopied: 2019_predicted_swe_2019-02-19.png\nCopied: 2018_predicted_swe_2018-06-22.png\nCopied: 2017_predicted_swe_2017-11-07.png\nCopied: 2019_predicted_swe_2019-03-17.png\nCopied: 2017_predicted_swe_2017-10-02.png\nCopied: 2017_predicted_swe_2017-11-26.png\nCopied: 2019_predicted_swe_2019-02-26.png\nCopied: 2018_predicted_swe_2018-06-24.png\nCopied: 2019_predicted_swe_2019-01-28.png\nCopied: 2019_predicted_swe_2019-04-23.png\nCopied: 2023_pr_2023-05-17.png\nCopied: 2018_predicted_swe_2018-12-08.png\nCopied: 2018_predicted_swe_2018-01-19.png\nCopied: 2019_predicted_swe_2019-05-14.png\nCopied: 2018_predicted_swe_2018-10-09.png\nCopied: 2018_predicted_swe_2018-06-05.png\nCopied: 2018_predicted_swe_2018-01-27.png\nCopied: 2018_predicted_swe_2018-03-20.png\nCopied: 2018_predicted_swe_2018-10-11.png\nCopied: 2017_predicted_swe_2017-11-19.png\nCopied: 2018_predicted_swe_2018-02-14.png\nCopied: 2018_predicted_swe_2018-10-13.png\nCopied: 2022_predicted_swe_2022-01-16.png\nCopied: 2017_predicted_swe_2017-12-18.png\nCopied: 2019_predicted_swe_2019-05-07.png\nCopied: 2018_predicted_swe_2018-01-10.png\nCopied: 2017_predicted_swe_2017-10-18.png\nCopied: 2018_predicted_swe_2018-01-03.png\nCopied: 2023_predicted_swe_2023-02-12.png\nCopied: 2018_predicted_swe_2018-03-27.png\nCopied: 2019_predicted_swe_2019-06-09.png\nCopied: 2018_predicted_swe_2018-04-24.png\nCopied: 2019_predicted_swe_2019-06-25.png\nCopied: 2017_predicted_swe_2017-11-05.png\nCopied: 2018_predicted_swe_2018-04-28.png\nCopied: 2023_pr_2023-06-15.png\nCopied: 2019_predicted_swe_2019-03-23.png\nCopied: 2019_predicted_swe_2019-06-01.png\nCopied: 2017_predicted_swe_2017-11-21.png\nCopied: 2018_predicted_swe_2018-03-04.png\nCopied: 2017_predicted_swe_2017-10-15.png\nCopied: 2018_predicted_swe_2018-04-01.png\nCopied: 2019_predicted_swe_2019-01-01.png\nCopied: 2018_predicted_swe_2018-10-15.png\nCopied: 2018_predicted_swe_2018-01-09.png\nCopied: 2018_predicted_swe_2018-11-22.png\nCopied: 2022_predicted_swe_2022-04-17.png\nCopied: 2022_predicted_swe_2022-02-28.png\nCopied: 2019_predicted_swe_2019-04-11.png\nCopied: 2018_predicted_swe_2018-04-20.png\nCopied: 2022_pr_2022-06-15.png\nCopied: 2018_predicted_swe_2018-01-08.png\nCopied: 2017_predicted_swe_2017-10-24.png\nCopied: 2018_predicted_swe_2018-04-14.png\nCopied: 2019_predicted_swe_2019-01-18.png\nCopied: 2018_predicted_swe_2018-03-02.png\nCopied: 2019_predicted_swe_2019-02-20.png\nCopied: 2017_predicted_swe_2017-11-25.png\nCopied: 2018_predicted_swe_2018-11-10.png\nCopied: 2019_predicted_swe_2019-05-05.png\nCopied: 2017_predicted_swe_2017-11-29.png\nCopied: 2019_predicted_swe_2019-04-15.png\nCopied: 2019_predicted_swe_2019-01-30.png\nCopied: 2018_predicted_swe_2018-06-18.png\nCopied: 2018_pr_2018-01-01.png\nCopied: 2019_predicted_swe_2019-04-06.png\nCopied: 2018_predicted_swe_2018-12-10.png\nCopied: 2018_predicted_swe_2018-11-02.png\nCopied: 2018_predicted_swe_2018-06-25.png\nCopied: 2018_predicted_swe_2018-01-15.png\nCopied: 2022_predicted_swe_2022-10-15.png\nCopied: 2019_predicted_swe_2019-03-29.png\nCopied: 2018_predicted_swe_2018-03-28.png\nCopied: 2023_predicted_swe_2023-05-18.png\nCopied: 2023_pr_2023-02-11.png\nCopied: 2018_predicted_swe_2018-06-13.png\nCopied: 2018_predicted_swe_2018-12-26.png\nCopied: 2019_predicted_swe_2019-01-11.png\nCopied: 2017_predicted_swe_2017-12-11.png\nCopied: 2018_predicted_swe_2018-03-30.png\nCopied: 2022_predicted_swe_2022-02-22.png\nCopied: 2018_predicted_swe_2018-11-21.png\nCopied: 2018_predicted_swe_2018-05-01.png\nCopied: 2018_predicted_swe_2018-02-17.png\nCopied: 2018_predicted_swe_2018-04-12.png\nCopied: 2018_predicted_swe_2018-11-16.png\nCopied: 2023_predicted_swe_2023-01-18.png\nCopied: 2019_predicted_swe_2019-03-25.png\nCopied: 2017_predicted_swe_2017-11-02.png\nCopied: 2018_predicted_swe_2018-06-20.png\nCopied: 2022_predicted_swe_2022-10-03.png\nCopied: 2018_predicted_swe_2018-04-08.png\nCopied: 2017_predicted_swe_2017-10-06.png\nCopied: 2019_predicted_swe_2019-05-20.png\nCopied: 2018_predicted_swe_2018-05-02.png\nCopied: 2019_predicted_swe_2019-06-11.png\nCopied: 2017_predicted_swe_2017-12-14.png\nCopied: 2018_predicted_swe_2018-04-02.png\nCopied: 2019_predicted_swe_2019-04-01.png\nCopied: 2017_predicted_swe_2017-10-20.png\nCopied: 2018_predicted_swe_2018-10-03.png\nCopied: 2019_predicted_swe_2019-03-19.png\nCopied: 2018_predicted_swe_2018-10-10.png\nCopied: 2018_predicted_swe_2018-02-03.png\nCopied: 2018_predicted_swe_2018-04-21.png\nCopied: 2019_predicted_swe_2019-03-30.png\nCopied: importance_summary_plot_2023-09-15.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2017_predicted_swe_2017-10-10.png\nCopied: 2018_predicted_swe_2018-01-29.png\nCopied: 2018_predicted_swe_2018-03-10.png\nCopied: 2018_predicted_swe_2018-02-13.png\nCopied: 2018_predicted_swe_2018-04-13.png\nCopied: 2018_predicted_swe_2018-01-07.png\nCopied: 2019_predicted_swe_2019-04-05.png\nCopied: 2018_predicted_swe_2018-10-27.png\nCopied: 2018_predicted_swe_2018-02-09.png\nCopied: 2019_predicted_swe_2019-06-10.png\nCopied: 2019_predicted_swe_2019-02-24.png\nCopied: 2018_predicted_swe_2018-02-07.png\nCopied: 2019_predicted_swe_2019-06-13.png\nCopied: 2019_predicted_swe_2019-02-22.png\nCopied: 2019_predicted_swe_2019-05-13.png\nCopied: et-model-feature-importance-13.png\nCopied: 2023_predicted_swe_2023-01-19.png\nCopied: 2019_predicted_swe_2019-02-28.png\nCopied: 2017_predicted_swe_2017-12-06.png\nCopied: 2018_predicted_swe_2018-05-14.png\nCopied: 2018_predicted_swe_2018-10-22.png\nCopied: 2019_predicted_swe_2019-04-24.png\nCopied: 2023_predicted_swe_2023-01-20.png\nCopied: 2023_pr_2023-01-19.png\nCopied: 2019_predicted_swe_2019-01-29.png\nCopied: 2017_predicted_swe_2017-12-12.png\nCopied: 2018_predicted_swe_2018-02-12.png\nCopied: 2018_predicted_swe_2018-06-14.png\nCopied: 2018_predicted_swe_2018-11-08.png\nCopied: 2018_predicted_swe_2018-02-23.png\nCopied: 2022_pr_2022-02-28.png\nCopied: 2023_pr_2023-05-18.png\nCopied: 2023_pr_2023-03-15.png\nCopied: 2018_predicted_swe_2018-03-11.png\nCopied: 2019_predicted_swe_2019-04-14.png\nCopied: 2018_predicted_swe_2018-02-08.png\nCopied: 2019_predicted_swe_2019-04-30.png\nCopied: 2018_predicted_swe_2018-02-16.png\nCopied: 2018_predicted_swe_2018-10-26.png\nCopied: 2019_predicted_swe_2019-04-12.png\nCopied: 2019_predicted_swe_2019-05-19.png\nCopied: 2017_predicted_swe_2017-11-04.png\nCopied: 2019_predicted_swe_2019-01-21.png\nCopied: 2019_predicted_swe_2019-02-10.png\nCopied: 2018_predicted_swe_2018-06-19.png\nCopied: 2017_predicted_swe_2017-10-30.png\nCopied: 2018_predicted_swe_2018-03-12.png\nCopied: 2023_pr_2023-07-15.png\nCopied: 2019_predicted_swe_2019-04-09.png\nCopied: 2019_predicted_swe_2019-04-27.png\nCopied: 2017_predicted_swe_2017-12-28.png\nCopied: 2023_pr_2023-09-15.png\nCopied: 2018_predicted_swe_2018-03-23.png\nCopied: 2018_predicted_swe_2018-03-24.png\nCopied: 2019_predicted_swe_2019-03-14.png\nCopied: 2019_predicted_swe_2019-06-05.png\nCopied: 2018_predicted_swe_2018-10-07.png\nCopied: 2019_predicted_swe_2019-03-20.png\nCopied: 2019_predicted_swe_2019-03-31.png\nCopied: 2018_predicted_swe_2018-10-04.png\nCopied: 2018_predicted_swe_2018-04-26.png\nCopied: 2019_predicted_swe_2019-02-02.png\nCopied: 2019_predicted_swe_2019-04-26.png\nCopied: 2018_predicted_swe_2018-04-23.png\nCopied: et-model-feature-importance-26.png\nCopied: 2018_predicted_swe_2018-05-07.png\nCopied: 2019_predicted_swe_2019-03-01.png\nCopied: 2018_predicted_swe_2018-11-05.png\nCopied: 2023_predicted_swe_2023-03-15.png\nCopied: 2017_predicted_swe_2017-10-05.png\nCopied: 2018_predicted_swe_2018-03-07.png\nCopied: 2018_predicted_swe_2018-11-30.png\nCopied: shap_summary_plot_2023-01-20.png\nCopied: 2018_predicted_swe_2018-06-29.png\nCopied: 2017_predicted_swe_2017-11-06.png\nCopied: 2018_predicted_swe_2018-05-19.png\nCopied: 2023_pr_2023-01-20.png\nCopied: 2018_predicted_swe_2018-03-21.png\nCopied: 2018_predicted_swe_2018-05-03.png\nCopied: 2018_predicted_swe_2018-11-06.png\nCopied: 2017_predicted_swe_2017-12-24.png\nCopied: 2019_predicted_swe_2019-06-03.png\nCopied: 2019_predicted_swe_2019-01-25.png\nCopied: 2018_predicted_swe_2018-10-17.png\nCopied: 2018_predicted_swe_2018-10-01.png\nCopied: 2018_predicted_swe_2018-04-10.png\nCopied: importance_summary_plot_2023-05-16.png\nCopied: 2018_predicted_swe_2018-03-25.png\nCopied: 2018_predicted_swe_2018-04-07.png\nCopied: 2019_predicted_swe_2019-03-06.png\nCopied: 2019_predicted_swe_2019-03-11.png\nCopied: 2017_predicted_swe_2017-10-23.png\nCopied: 2019_predicted_swe_2019-03-24.png\nCopied: 2018_predicted_swe_2018-12-15.png\nCopied: 2018_predicted_swe_2018-02-05.png\nCopied: 2018_predicted_swe_2018-03-08.png\nCopied: 2018_predicted_swe_2018-04-18.png\nCopied: 2018_predicted_swe_2018-05-23.png\nCopied: 2018_predicted_swe_2018-05-26.png\nCopied: 2018_predicted_swe_2018-06-06.png\nCopied: 2019_predicted_swe_2019-06-08.png\nCopied: 2017_predicted_swe_2017-12-23.png\nCopied: 2019_predicted_swe_2019-02-14.png\nCopied: 2019_predicted_swe_2019-05-31.png\nCopied: 2019_predicted_swe_2019-06-19.png\nCopied: 2023_pr_2023-01-18.png\nCopied: 2019_predicted_swe_2019-02-08.png\nCopied: 2018_predicted_swe_2018-10-28.png\nCopied: 2019_predicted_swe_2019-05-04.png\nCopied: 2018_predicted_swe_2018-06-27.png\nCopied: 2017_predicted_swe_2017-11-08.png\nCopied: 2019_predicted_swe_2019-05-12.png\nCopied: 2017_predicted_swe_2017-10-29.png\nCopied: 2019_predicted_swe_2019-06-02.png\nCopied: 2017_predicted_swe_2017-11-30.png\nCopied: 2019_predicted_swe_2019-06-30.png\nCopied: 2019_predicted_swe_2019-02-27.png\nCopied: 2019_predicted_swe_2019-03-07.png\nCopied: 2018_predicted_swe_2018-03-31.png\nCopied: 2019_predicted_swe_2019-04-13.png\nCopied: 2018_predicted_swe_2018-02-18.png\nCopied: importance_summary_plot_2023-02-11.png\nCopied: 2023_pr_2023-05-28.png\nCopied: 2018_predicted_swe_2018-02-28.png\nCopied: 2017_predicted_swe_2017-12-29.png\nCopied: 2017_predicted_swe_2017-10-26.png\nCopied: 2018_predicted_swe_2018-11-23.png\nCopied: 2019_predicted_swe_2019-02-17.png\nCopied: 2018_predicted_swe_2018-05-20.png\nCopied: et-model-feature-importance-20.png\nCopied: 2018_predicted_swe_2018-10-06.png\nCopied: 2018_predicted_swe_2018-05-29.png\nCopied: 2018_predicted_swe_2018-12-06.png\nCopied: 2019_predicted_swe_2019-05-30.png\nCopied: 2019_predicted_swe_2019-05-29.png\nCopied: importance_summary_plot_2023-03-15.png\nCopied: 2017_predicted_swe_2017-10-14.png\nCopied: 2018_predicted_swe_2018-02-11.png\nCopied: 2019_predicted_swe_2019-06-26.png\nCopied: 2023_predicted_swe_2023-02-11.png\nCopied: 2023_pr_2023-01-15.png\nCopied: 2018_predicted_swe_2018-04-25.png\nCopied: 2017_predicted_swe_2017-11-01.png\nCopied: 2018_predicted_swe_2018-06-23.png\nCopied: 2017_predicted_swe_2017-12-08.png\nCopied: 2018_predicted_swe_2018-01-05.png\nCopied: 2018_predicted_swe_2018-11-13.png\nCopied: 2019_predicted_swe_2019-02-12.png\nCopied: 2019_predicted_swe_2019-05-09.png\nCopied: 2018_predicted_swe_2018-06-10.png\nCopied: 2019_predicted_swe_2019-01-09.png\nCopied: 2019_predicted_swe_2019-01-05.png\nCopied: 2017_predicted_swe_2017-12-02.png\nCopied: 2018_predicted_swe_2018-02-26.png\nCopied: 2017_predicted_swe_2017-12-26.png\nCopied: 2017_predicted_swe_2017-10-11.png\nCopied: 2019_predicted_swe_2019-02-01.png\nCopied: 2018_predicted_swe_2018-06-15.png\nCopied: 2017_predicted_swe_2017-12-13.png\nCopied: 2019_predicted_swe_2019-05-16.png\nCopied: 2018_predicted_swe_2018-12-28.png\nCopied: 2017_predicted_swe_2017-10-09.png\nCopied: 2019_predicted_swe_2019-01-03.png\nCopied: 2018_predicted_swe_2018-04-09.png\nCopied: 2017_predicted_swe_2017-10-13.png\nCopied: 2018_predicted_swe_2018-03-06.png\nCopied: importance_summary_plot_2023-06-15.png\nCopied: 2018_predicted_swe_2018-04-05.png\nCopied: 2022_pr_2022-01-16.png\nCopied: 2019_predicted_swe_2019-01-22.png\nCopied: 2017_predicted_swe_2017-10-22.png\nCopied: et-model-feature-importance-3.png\nCopied: 2018_predicted_swe_2018-06-04.png\nCopied: 2018_predicted_swe_2018-05-05.png\nCopied: 2023_predicted_swe_2023-01-15.png\nCopied: 2017_predicted_swe_2017-11-15.png\nCopied: 2018_predicted_swe_2018-11-04.png\nCopied: 2019_predicted_swe_2019-06-17.png\nCopied: 2018_predicted_swe_2018-05-08.png\nCopied: 2019_predicted_swe_2019-04-21.png\nCopied: 2018_predicted_swe_2018-01-22.png\nCopied: 2019_predicted_swe_2019-01-15.png\nCopied: 2018_predicted_swe_2018-04-17.png\nCopied: 2018_predicted_swe_2018-02-01.png\nCopied: 2018_predicted_swe_2018-05-27.png\nCopied: 2018_predicted_swe_2018-02-22.png\nCopied: 2018_predicted_swe_2018-11-07.png\nCopied: 2019_predicted_swe_2019-06-20.png\nCopied: 2018_predicted_swe_2018-12-09.png\nCopied: 2017_predicted_swe_2017-12-03.png\nCopied: 2019_predicted_swe_2019-06-14.png\nCopied: 2017_predicted_swe_2017-10-19.png\nCopied: 2018_predicted_swe_2018-12-23.png\nCopied: 2017_predicted_swe_2017-10-12.png\nCopied: 2019_predicted_swe_2019-05-11.png\nCopied: 2017_predicted_swe_2017-12-22.png\nCopied: 2017_predicted_swe_2017-11-23.png\nCopied: 2017_predicted_swe_2017-12-25.png\nCopied: importance_summary_plot_2023-07-15.png\nCopied: 2017_predicted_swe_2017-11-24.png\nCopied: 2018_predicted_swe_2018-06-07.png\nCopied: 2019_predicted_swe_2019-03-26.png\nCopied: 2019_predicted_swe_2019-03-04.png\nCopied: 2017_predicted_swe_2017-12-04.png\nCopied: 2019_predicted_swe_2019-05-25.png\nCopied: 2019_predicted_swe_2019-04-28.png\nCopied: 2022_pr_2022-12-29.png\nCopied: 2017_predicted_swe_2017-10-04.png\nCopied: 2017_predicted_swe_2017-12-27.png\nCopied: 2018_predicted_swe_2018-01-13.png\nCopied: 2018_predicted_swe_2018-03-18.png\nCopied: 2019_predicted_swe_2019-01-23.png\nCopied: 2023_predicted_swe_2023-03-02.png\nCopied: 2019_predicted_swe_2019-06-24.png\nCopied: 2022_pr_2022-10-15.png\nCopied: 2018_predicted_swe_2018-01-06.png\nCopied: 2018_predicted_swe_2018-01-25.png\nCopied: 2023_predicted_swe_2023-06-15.png\nCopied: 2018_predicted_swe_2018-05-17.png\nCopied: 2017_predicted_swe_2017-12-19.png\nCopied: 2018_predicted_swe_2018-02-21.png\nCopied: 2023_pr_2023-09-16.png\nCopied: 2018_predicted_swe_2018-02-27.png\nCopied: 2019_predicted_swe_2019-04-03.png\nCopied: 2018_predicted_swe_2018-02-04.png\nCopied: 2019_predicted_swe_2019-06-06.png\nCopied: 2019_predicted_swe_2019-01-10.png\nCopied: 2019_predicted_swe_2019-01-26.png\nCopied: 2022_pr_2022-02-22.png\nCopied: 2018_predicted_swe_2018-10-31.png\nCopied: 2018_predicted_swe_2018-05-22.png\nCopied: 2019_predicted_swe_2019-03-02.png\nCopied: 2018_predicted_swe_2018-12-20.png\nCopied: 2018_predicted_swe_2018-05-06.png\nCopied: 2018_predicted_swe_2018-11-29.png\nCopied: 2018_predicted_swe_2018-10-29.png\nCopied: 2019_predicted_swe_2019-05-21.png\nCopied: 2018_predicted_swe_2018-10-12.png\nCopied: 2018_predicted_swe_2018-11-09.png\nCopied: 2019_predicted_swe_2019-03-15.png\nCopied: 2019_predicted_swe_2019-05-27.png\nCopied: 2022_pr_2022-10-16.png\nCopied: 2018_predicted_swe_2018-04-04.png\nCopied: 2018_predicted_swe_2018-03-17.png\nCopied: 2022_pr_2022-04-17.png\nCopied: 2022_predicted_swe_2022-06-15.png\nCopied: 2017_predicted_swe_2017-12-05.png\nCopied: 2018_predicted_swe_2018-01-30.png\nCopied: 2018_predicted_swe_2018-12-30.png\nCopied: 2018_predicted_swe_2018-01-28.png\nCopied: 2019_predicted_swe_2019-01-20.png\nCopied: 2018_predicted_swe_2018-06-01.png\nCopied: 2017_predicted_swe_2017-11-10.png\nCopied: 2019_predicted_swe_2019-06-23.png\nCopied: 2018_predicted_swe_2018-04-11.png\nCopied: 2018_predicted_swe_2018-04-15.png\nCopied: 2018_predicted_swe_2018-04-06.png\nCopied: 2019_predicted_swe_2019-03-10.png\nCopied: 2018_predicted_swe_2018-04-03.png\nCopied: et-model-feature-importance-6.png\nCopied: 2018_predicted_swe_2018-10-21.png\nCopied: importance_summary_plot_2023-01-20.png\nCopied: 2018_predicted_swe_2018-03-13.png\nCopied: 2023_predicted_swe_2023-03-16.png\nCopied: 2018_predicted_swe_2018-12-11.png\nCopied: 2017_predicted_swe_2017-11-13.png\nCopied: importance_summary_plot_2023-05-17.png\nCopied: 2019_predicted_swe_2019-01-27.png\nCopied: 2017_predicted_swe_2017-12-20.png\nCopied: 2019_predicted_swe_2019-03-22.png\nCopied: 2018_predicted_swe_2018-10-05.png\nCopied: 2018_predicted_swe_2018-06-03.png\nCopied: 2018_predicted_swe_2018-04-27.png\nCopied: 2017_predicted_swe_2017-10-21.png\nCopied: 2017_predicted_swe_2017-10-27.png\nCopied: 2023_predicted_swe_2023-07-15.png\nCopied: 2023_predicted_swe_2023-09-16.png\nCopied: 2019_predicted_swe_2019-05-08.png\nCopied: 2023_predicted_swe_2023-02-10.png\nCopied: 2018_predicted_swe_2018-01-14.png\nCopied: 2019_predicted_swe_2019-04-19.png\nCopied: 2018_predicted_swe_2018-05-18.png\nCopied: 2018_predicted_swe_2018-05-21.png\nCopied: 2017_predicted_swe_2017-11-22.png\nCopied: 2018_predicted_swe_2018-12-13.png\nCopied: 2018_predicted_swe_2018-12-14.png\nCopied: 2017_predicted_swe_2017-10-01.png\nCopied: 2019_predicted_swe_2019-04-10.png\nCopied: 2017_predicted_swe_2017-11-17.png\nCopied: 2017_predicted_swe_2017-11-18.png\nCopied: 2018_predicted_swe_2018-03-05.png\nCopied: 2019_predicted_swe_2019-05-28.png\nCopied: 2018_predicted_swe_2018-12-27.png\nCopied: 2018_predicted_swe_2018-12-31.png\nCopied: 2018_predicted_swe_2018-10-24.png\nCopied: 2019_predicted_swe_2019-03-08.png\nCopied: 2018_predicted_swe_2018-03-16.png\nCopied: 2018_predicted_swe_2018-05-09.png\nCopied: 2019_predicted_swe_2019-01-02.png\nCopied: 2018_predicted_swe_2018-12-02.png\nCopied: 2019_predicted_swe_2019-02-25.png\nCopied: 2018_predicted_swe_2018-11-12.png\nCopied: 2017_predicted_swe_2017-10-28.png\nCopied: 2019_predicted_swe_2019-02-06.png\nCopied: 2019_predicted_swe_2019-03-09.png\nCopied: 2017_predicted_swe_2017-12-07.png\nCopied: 2019_predicted_swe_2019-02-07.png\nCopied: 2019_predicted_swe_2019-05-10.png\nCopied: 2018_predicted_swe_2018-03-29.png\nCopied: 2018_predicted_swe_2018-06-17.png\nCopied: 2019_predicted_swe_2019-06-12.png\nCopied: 2018_predicted_swe_2018-01-24.png\nCopied: 2018_predicted_swe_2018-05-30.png\nCopied: 2018_predicted_swe_2018-03-22.png\nCopied: 2019_predicted_swe_2019-02-05.png\nCopied: 2018_predicted_swe_2018-03-15.png\nCopied: 2019_predicted_swe_2019-03-03.png\nCopied: 2018_predicted_swe_2018-12-24.png\nCopied: 2018_predicted_swe_2018-03-01.png\nCopied: 2018_predicted_swe_2018-03-14.png\nCopied: 2018_predicted_swe_2018-02-10.png\nCopied: 2019_predicted_swe_2019-03-28.png\nCopied: 2018_predicted_swe_2018-11-20.png\nCopied: importance_summary_plot_2023-09-16.png\nCopied: 2017_predicted_swe_2017-11-27.png\nCopied: 2018_predicted_swe_2018-05-28.png\nCopied: 2018_predicted_swe_2018-12-17.png\nCopied: 2022_pr_2022-03-15.png\nCopied: 2017_predicted_swe_2017-10-08.png\nCopied: 2018_predicted_swe_2018-04-29.png\nCopied: 2023_pr_2023-05-16.png\nCopied: 2017_predicted_swe_2017-10-16.png\nCopied: 2018_predicted_swe_2018-12-25.png\nCopied: 2017_predicted_swe_2017-12-17.png\nCopied: 2023_predicted_swe_2023-05-29.png\nCopied: 2018_predicted_swe_2018-11-27.png\nCopied: 2018_predicted_swe_2018-02-06.png\nCopied: 2019_predicted_swe_2019-05-03.png\nCopied: 2018_predicted_swe_2018-11-24.png\nCopied: 2018_predicted_swe_2018-05-16.png\nCopied: 2019_predicted_swe_2019-02-16.png\nCopied: 2018_predicted_swe_2018-01-21.png\nCopied: 2018_predicted_swe_2018-01-17.png\nCopied: 2018_predicted_swe_2018-12-21.png\nCopied: 2018_predicted_swe_2018-04-22.png\nCopied: 2018_predicted_swe_2018-11-25.png\nCopied: 2023_pr_2023-05-25.png\nCopied: 2019_predicted_swe_2019-04-04.png\nCopied: 2018_predicted_swe_2018-06-26.png\nCopied: 2023_pr_2023-05-29.png\nCopied: 2022_predicted_swe_2022-10-16.png\nCopied: 2018_predicted_swe_2018-11-15.png\nCopied: 2018_predicted_swe_2018-05-31.png\nCopied: 2018_predicted_swe_2018-11-17.png\nCopied: 2017_predicted_swe_2017-10-07.png\nCopied: 2018_predicted_swe_2018-01-18.png\nCopied: 2017_predicted_swe_2017-11-16.png\nCopied: 2018_predicted_swe_2018-10-14.png\nCopied: 2018_predicted_swe_2018-01-20.png\nCopied: 2018_predicted_swe_2018-12-03.png\nCopied: 2018_predicted_swe_2018-10-18.png\nCopied: 2019_predicted_swe_2019-05-26.png\nCopied: 2019_predicted_swe_2019-01-07.png\nCopied: 2022_pr_2022-01-17.png\nCopied: 2019_predicted_swe_2019-05-23.png\nCopied: 2018_predicted_swe_2018-12-19.png\nCopied: 2018_predicted_swe_2018-03-09.png\nCopied: 2023_predicted_swe_2023-05-28.png\nCopied: 2018_predicted_swe_2018-10-23.png\nCopied: 2018_predicted_swe_2018-11-01.png\nCopied: 2018_predicted_swe_2018-02-25.png\nCopied: 2019_predicted_swe_2019-01-19.png\nCopied: 2018_predicted_swe_2018-02-02.png\nCopied: 2019_predicted_swe_2019-06-27.png\nCopied: 2018_predicted_swe_2018-12-16.png\nCopied: 2017_predicted_swe_2017-12-15.png\nCopied: 2023_predicted_swe_2023-09-15.png\nCopied: 2018_predicted_swe_2018-05-13.png\nCopied: 2022_pr_2022-12-30.png\n",
  "history_begin_time" : 1699684310946,
  "history_end_time" : 1699684311971,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "72cq4jsgvr1",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-11-11\ntest start date:  2022-10-15\ntest end date:  2023-10-07\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: importance_summary_plot_2023-02-12.png\nCopied: 2023_predicted_swe_2023-05-16.png\nCopied: 2018_predicted_swe_2018-06-16.png\nCopied: 2019_predicted_swe_2019-02-15.png\nCopied: 2018_predicted_swe_2018-06-02.png\nCopied: 2019_predicted_swe_2019-05-01.png\nCopied: 2018_predicted_swe_2018-10-20.png\nCopied: 2019_predicted_swe_2019-03-12.png\nCopied: 2022_predicted_swe_2022-03-15.png\nCopied: 2019_predicted_swe_2019-05-17.png\nCopied: 2022_predicted_swe_2022-12-29.png\nCopied: 2018_predicted_swe_2018-11-19.png\nCopied: 2019_predicted_swe_2019-01-13.png\nCopied: 2018_predicted_swe_2018-10-19.png\nCopied: 2017_predicted_swe_2017-12-01.png\nCopied: 2019_predicted_swe_2019-04-20.png\nCopied: 2019_predicted_swe_2019-04-07.png\nCopied: et-model-feature-importance-28.png\nCopied: 2019_predicted_swe_2019-04-17.png\nCopied: 2018_predicted_swe_2018-06-11.png\nCopied: 2019_predicted_swe_2019-02-21.png\nCopied: 2018_predicted_swe_2018-01-16.png\nCopied: 2019_predicted_swe_2019-02-04.png\nCopied: 2019_predicted_swe_2019-01-16.png\nCopied: 2019_predicted_swe_2019-06-04.png\nCopied: 2017_predicted_swe_2017-11-14.png\nCopied: 2019_predicted_swe_2019-02-03.png\nCopied: partial_dependence_summary_plot_2023-01-20.png\nCopied: 2018_predicted_swe_2018-12-07.png\nCopied: 2019_predicted_swe_2019-06-22.png\nCopied: 2018_predicted_swe_2018-11-03.png\nCopied: 2018_predicted_swe_2018-04-16.png\nCopied: 2018_predicted_swe_2018-11-14.png\nCopied: 2018_predicted_swe_2018-05-12.png\nCopied: 2019_predicted_swe_2019-03-16.png\nCopied: 2019_predicted_swe_2019-04-02.png\nCopied: 2019_predicted_swe_2019-01-06.png\nCopied: 2019_predicted_swe_2019-01-04.png\nCopied: 2019_predicted_swe_2019-02-23.png\nCopied: importance_summary_plot_2023-02-10.png\nCopied: 2019_predicted_swe_2019-05-02.png\nCopied: 2019_predicted_swe_2019-05-18.png\nCopied: 2018_predicted_swe_2018-10-16.png\nCopied: 2017_predicted_swe_2017-12-09.png\nCopied: 2023_pr_2023-02-10.png\nCopied: 2018_predicted_swe_2018-10-30.png\nCopied: 2023_predicted_swe_2023-05-26.png\nCopied: 2019_predicted_swe_2019-03-13.png\nCopied: 2018_predicted_swe_2018-10-02.png\nCopied: 2019_predicted_swe_2019-04-08.png\nCopied: 2018_predicted_swe_2018-12-29.png\nCopied: 2018_predicted_swe_2018-01-11.png\nCopied: 2019_predicted_swe_2019-03-18.png\nCopied: 2019_predicted_swe_2019-01-08.png\nCopied: 2018_predicted_swe_2018-01-12.png\nCopied: 2018_predicted_swe_2018-06-12.png\nCopied: 2019_predicted_swe_2019-03-27.png\nCopied: 2023_pr_2023-02-12.png\nCopied: 2019_predicted_swe_2019-02-13.png\nCopied: 2018_predicted_swe_2018-12-18.png\nCopied: 2023_pr_2023-03-16.png\nCopied: 2019_predicted_swe_2019-04-29.png\nCopied: 2018_predicted_swe_2018-05-25.png\nCopied: importance_summary_plot_latest_model.png\nCopied: 2018_predicted_swe_2018-12-22.png\nCopied: 2018_predicted_swe_2018-01-26.png\nCopied: 2018_predicted_swe_2018-02-15.png\nCopied: 2023_predicted_swe_2023-05-17.png\nCopied: 2018_predicted_swe_2018-12-05.png\nCopied: 2018_predicted_swe_2018-05-04.png\nCopied: 2019_predicted_swe_2019-02-09.png\nCopied: 2019_predicted_swe_2019-06-16.png\nCopied: 2017_predicted_swe_2017-11-09.png\nCopied: 2018_predicted_swe_2018-06-08.png\nCopied: 2019_predicted_swe_2019-06-07.png\nCopied: 2019_predicted_swe_2019-06-21.png\nCopied: 2019_predicted_swe_2019-02-18.png\nCopied: 2019_predicted_swe_2019-01-12.png\nCopied: 2018_predicted_swe_2018-04-19.png\nCopied: 2017_predicted_swe_2017-10-17.png\nCopied: 2017_predicted_swe_2017-11-20.png\nCopied: 2019_predicted_swe_2019-06-18.png\nCopied: 2018_predicted_swe_2018-06-30.png\nCopied: 2018_predicted_swe_2018-01-02.png\nCopied: 2018_predicted_swe_2018-11-18.png\nCopied: 2018_predicted_swe_2018-03-03.png\nCopied: 2018_predicted_swe_2018-03-26.png\nCopied: 2018_predicted_swe_2018-01-23.png\nCopied: 2019_predicted_swe_2019-05-15.png\nCopied: 2019_predicted_swe_2019-05-06.png\nCopied: 2017_predicted_swe_2017-10-03.png\nCopied: 2017_predicted_swe_2017-11-03.png\nCopied: 2019_predicted_swe_2019-06-15.png\nCopied: 2019_predicted_swe_2019-02-11.png\nCopied: 2019_predicted_swe_2019-06-28.png\nCopied: 2018_predicted_swe_2018-02-19.png\nCopied: 2023_pr_2023-03-02.png\nCopied: 2018_predicted_swe_2018-02-24.png\nCopied: 2017_predicted_swe_2017-11-12.png\nCopied: importance_summary_plot_2023-03-16.png\nCopied: 2018_predicted_swe_2018-04-30.png\nCopied: 2018_predicted_swe_2018-05-10.png\nCopied: et-model-feature-importance-21.png\nCopied: 2019_predicted_swe_2019-01-24.png\nCopied: 2019_predicted_swe_2019-06-29.png\nCopied: 2018_predicted_swe_2018-12-12.png\nCopied: 2022_predicted_swe_2022-01-17.png\nCopied: 2018_predicted_swe_2018-06-21.png\nCopied: 2019_predicted_swe_2019-04-22.png\nCopied: 2019_predicted_swe_2019-04-16.png\nCopied: 2018_predicted_swe_2018-01-31.png\nCopied: 2017_predicted_swe_2017-11-28.png\nCopied: 2018_predicted_swe_2018-12-04.png\nCopied: 2022_predicted_swe_2022-12-30.png\nCopied: 2019_predicted_swe_2019-03-05.png\nCopied: 2017_predicted_swe_2017-12-31.png\nCopied: 2018_predicted_swe_2018-01-04.png\nCopied: 2019_predicted_swe_2019-04-25.png\nCopied: 2017_predicted_swe_2017-10-31.png\nCopied: 2023_pr_2023-05-26.png\nCopied: 2023_predicted_swe_2023-05-25.png\nCopied: 2018_predicted_swe_2018-10-08.png\nCopied: 2019_predicted_swe_2019-05-22.png\nCopied: 2019_predicted_swe_2019-05-24.png\nCopied: 2018_predicted_swe_2018-05-24.png\nCopied: 2018_predicted_swe_2018-02-20.png\nCopied: 2018_predicted_swe_2018-03-19.png\nCopied: 2017_predicted_swe_2017-12-21.png\nCopied: 2019_predicted_swe_2019-01-14.png\nCopied: 2018_predicted_swe_2018-06-28.png\nCopied: 2018_predicted_swe_2018-05-11.png\nCopied: 2018_predicted_swe_2018-01-01.png\nCopied: 2017_predicted_swe_2017-12-16.png\nCopied: 2018_predicted_swe_2018-06-09.png\nCopied: 2018_predicted_swe_2018-11-26.png\nCopied: 2019_predicted_swe_2019-01-31.png\nCopied: 2018_predicted_swe_2018-05-15.png\nCopied: 2018_predicted_swe_2018-12-01.png\nCopied: 2017_predicted_swe_2017-11-11.png\nCopied: 2018_predicted_swe_2018-10-25.png\nCopied: 2018_predicted_swe_2018-11-28.png\nCopied: 2017_predicted_swe_2017-12-30.png\nCopied: 2019_predicted_swe_2019-03-21.png\nCopied: 2017_predicted_swe_2017-10-25.png\nCopied: 2019_predicted_swe_2019-04-18.png\nCopied: 2019_predicted_swe_2019-01-17.png\nCopied: 2017_predicted_swe_2017-12-10.png\nCopied: 2018_predicted_swe_2018-11-11.png\nCopied: 2019_predicted_swe_2019-02-19.png\nCopied: 2018_predicted_swe_2018-06-22.png\nCopied: 2017_predicted_swe_2017-11-07.png\nCopied: 2019_predicted_swe_2019-03-17.png\nCopied: 2017_predicted_swe_2017-10-02.png\nCopied: 2017_predicted_swe_2017-11-26.png\nCopied: 2019_predicted_swe_2019-02-26.png\nCopied: 2018_predicted_swe_2018-06-24.png\nCopied: 2019_predicted_swe_2019-01-28.png\nCopied: 2019_predicted_swe_2019-04-23.png\nCopied: 2023_pr_2023-05-17.png\nCopied: 2018_predicted_swe_2018-12-08.png\nCopied: 2018_predicted_swe_2018-01-19.png\nCopied: 2019_predicted_swe_2019-05-14.png\nCopied: 2018_predicted_swe_2018-10-09.png\nCopied: 2018_predicted_swe_2018-06-05.png\nCopied: 2018_predicted_swe_2018-01-27.png\nCopied: 2018_predicted_swe_2018-03-20.png\nCopied: 2018_predicted_swe_2018-10-11.png\nCopied: 2017_predicted_swe_2017-11-19.png\nCopied: 2018_predicted_swe_2018-02-14.png\nCopied: 2018_predicted_swe_2018-10-13.png\nCopied: 2022_predicted_swe_2022-01-16.png\nCopied: 2017_predicted_swe_2017-12-18.png\nCopied: 2019_predicted_swe_2019-05-07.png\nCopied: 2018_predicted_swe_2018-01-10.png\nCopied: 2017_predicted_swe_2017-10-18.png\nCopied: 2018_predicted_swe_2018-01-03.png\nCopied: 2023_predicted_swe_2023-02-12.png\nCopied: 2018_predicted_swe_2018-03-27.png\nCopied: 2019_predicted_swe_2019-06-09.png\nCopied: 2018_predicted_swe_2018-04-24.png\nCopied: 2019_predicted_swe_2019-06-25.png\nCopied: 2017_predicted_swe_2017-11-05.png\nCopied: 2018_predicted_swe_2018-04-28.png\nCopied: 2023_pr_2023-06-15.png\nCopied: 2019_predicted_swe_2019-03-23.png\nCopied: 2019_predicted_swe_2019-06-01.png\nCopied: 2017_predicted_swe_2017-11-21.png\nCopied: 2018_predicted_swe_2018-03-04.png\nCopied: 2017_predicted_swe_2017-10-15.png\nCopied: 2018_predicted_swe_2018-04-01.png\nCopied: 2019_predicted_swe_2019-01-01.png\nCopied: 2018_predicted_swe_2018-10-15.png\nCopied: 2018_predicted_swe_2018-01-09.png\nCopied: 2018_predicted_swe_2018-11-22.png\nCopied: 2022_predicted_swe_2022-04-17.png\nCopied: 2022_predicted_swe_2022-02-28.png\nCopied: 2019_predicted_swe_2019-04-11.png\nCopied: 2018_predicted_swe_2018-04-20.png\nCopied: 2022_pr_2022-06-15.png\nCopied: 2018_predicted_swe_2018-01-08.png\nCopied: 2017_predicted_swe_2017-10-24.png\nCopied: 2018_predicted_swe_2018-04-14.png\nCopied: 2019_predicted_swe_2019-01-18.png\nCopied: 2018_predicted_swe_2018-03-02.png\nCopied: 2019_predicted_swe_2019-02-20.png\nCopied: 2017_predicted_swe_2017-11-25.png\nCopied: 2018_predicted_swe_2018-11-10.png\nCopied: 2019_predicted_swe_2019-05-05.png\nCopied: 2017_predicted_swe_2017-11-29.png\nCopied: 2019_predicted_swe_2019-04-15.png\nCopied: 2019_predicted_swe_2019-01-30.png\nCopied: 2018_predicted_swe_2018-06-18.png\nCopied: 2018_pr_2018-01-01.png\nCopied: 2019_predicted_swe_2019-04-06.png\nCopied: 2018_predicted_swe_2018-12-10.png\nCopied: 2018_predicted_swe_2018-11-02.png\nCopied: 2018_predicted_swe_2018-06-25.png\nCopied: 2018_predicted_swe_2018-01-15.png\nCopied: 2022_predicted_swe_2022-10-15.png\nCopied: 2019_predicted_swe_2019-03-29.png\nCopied: 2018_predicted_swe_2018-03-28.png\nCopied: 2023_predicted_swe_2023-05-18.png\nCopied: 2023_pr_2023-02-11.png\nCopied: 2018_predicted_swe_2018-06-13.png\nCopied: 2018_predicted_swe_2018-12-26.png\nCopied: 2019_predicted_swe_2019-01-11.png\nCopied: 2017_predicted_swe_2017-12-11.png\nCopied: 2018_predicted_swe_2018-03-30.png\nCopied: 2022_predicted_swe_2022-02-22.png\nCopied: 2018_predicted_swe_2018-11-21.png\nCopied: 2018_predicted_swe_2018-05-01.png\nCopied: 2018_predicted_swe_2018-02-17.png\nCopied: 2018_predicted_swe_2018-04-12.png\nCopied: 2018_predicted_swe_2018-11-16.png\nCopied: 2023_predicted_swe_2023-01-18.png\nCopied: 2019_predicted_swe_2019-03-25.png\nCopied: 2017_predicted_swe_2017-11-02.png\nCopied: 2018_predicted_swe_2018-06-20.png\nCopied: 2022_predicted_swe_2022-10-03.png\nCopied: 2018_predicted_swe_2018-04-08.png\nCopied: 2017_predicted_swe_2017-10-06.png\nCopied: 2019_predicted_swe_2019-05-20.png\nCopied: 2018_predicted_swe_2018-05-02.png\nCopied: 2019_predicted_swe_2019-06-11.png\nCopied: 2017_predicted_swe_2017-12-14.png\nCopied: 2018_predicted_swe_2018-04-02.png\nCopied: 2019_predicted_swe_2019-04-01.png\nCopied: 2017_predicted_swe_2017-10-20.png\nCopied: 2018_predicted_swe_2018-10-03.png\nCopied: 2019_predicted_swe_2019-03-19.png\nCopied: 2018_predicted_swe_2018-10-10.png\nCopied: 2018_predicted_swe_2018-02-03.png\nCopied: 2018_predicted_swe_2018-04-21.png\nCopied: 2019_predicted_swe_2019-03-30.png\nCopied: importance_summary_plot_2023-09-15.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2017_predicted_swe_2017-10-10.png\nCopied: 2018_predicted_swe_2018-01-29.png\nCopied: 2018_predicted_swe_2018-03-10.png\nCopied: 2018_predicted_swe_2018-02-13.png\nCopied: 2018_predicted_swe_2018-04-13.png\nCopied: 2018_predicted_swe_2018-01-07.png\nCopied: 2019_predicted_swe_2019-04-05.png\nCopied: 2018_predicted_swe_2018-10-27.png\nCopied: 2018_predicted_swe_2018-02-09.png\nCopied: 2019_predicted_swe_2019-06-10.png\nCopied: 2019_predicted_swe_2019-02-24.png\nCopied: 2018_predicted_swe_2018-02-07.png\nCopied: 2019_predicted_swe_2019-06-13.png\nCopied: 2019_predicted_swe_2019-02-22.png\nCopied: 2019_predicted_swe_2019-05-13.png\nCopied: et-model-feature-importance-13.png\nCopied: 2023_predicted_swe_2023-01-19.png\nCopied: 2019_predicted_swe_2019-02-28.png\nCopied: 2017_predicted_swe_2017-12-06.png\nCopied: 2018_predicted_swe_2018-05-14.png\nCopied: 2018_predicted_swe_2018-10-22.png\nCopied: 2019_predicted_swe_2019-04-24.png\nCopied: 2023_predicted_swe_2023-01-20.png\nCopied: 2023_pr_2023-01-19.png\nCopied: 2019_predicted_swe_2019-01-29.png\nCopied: 2017_predicted_swe_2017-12-12.png\nCopied: 2018_predicted_swe_2018-02-12.png\nCopied: 2018_predicted_swe_2018-06-14.png\nCopied: 2018_predicted_swe_2018-11-08.png\nCopied: 2018_predicted_swe_2018-02-23.png\nCopied: 2022_pr_2022-02-28.png\nCopied: 2023_pr_2023-05-18.png\nCopied: 2023_pr_2023-03-15.png\nCopied: 2018_predicted_swe_2018-03-11.png\nCopied: 2019_predicted_swe_2019-04-14.png\nCopied: 2018_predicted_swe_2018-02-08.png\nCopied: 2019_predicted_swe_2019-04-30.png\nCopied: 2018_predicted_swe_2018-02-16.png\nCopied: 2018_predicted_swe_2018-10-26.png\nCopied: 2019_predicted_swe_2019-04-12.png\nCopied: 2019_predicted_swe_2019-05-19.png\nCopied: 2017_predicted_swe_2017-11-04.png\nCopied: 2019_predicted_swe_2019-01-21.png\nCopied: 2019_predicted_swe_2019-02-10.png\nCopied: 2018_predicted_swe_2018-06-19.png\nCopied: 2017_predicted_swe_2017-10-30.png\nCopied: 2018_predicted_swe_2018-03-12.png\nCopied: 2023_pr_2023-07-15.png\nCopied: 2019_predicted_swe_2019-04-09.png\nCopied: 2019_predicted_swe_2019-04-27.png\nCopied: 2017_predicted_swe_2017-12-28.png\nCopied: 2023_pr_2023-09-15.png\nCopied: 2018_predicted_swe_2018-03-23.png\nCopied: 2018_predicted_swe_2018-03-24.png\nCopied: 2019_predicted_swe_2019-03-14.png\nCopied: 2019_predicted_swe_2019-06-05.png\nCopied: 2018_predicted_swe_2018-10-07.png\nCopied: 2019_predicted_swe_2019-03-20.png\nCopied: 2019_predicted_swe_2019-03-31.png\nCopied: 2018_predicted_swe_2018-10-04.png\nCopied: 2018_predicted_swe_2018-04-26.png\nCopied: 2019_predicted_swe_2019-02-02.png\nCopied: 2019_predicted_swe_2019-04-26.png\nCopied: 2018_predicted_swe_2018-04-23.png\nCopied: et-model-feature-importance-26.png\nCopied: 2018_predicted_swe_2018-05-07.png\nCopied: 2019_predicted_swe_2019-03-01.png\nCopied: 2018_predicted_swe_2018-11-05.png\nCopied: 2023_predicted_swe_2023-03-15.png\nCopied: 2017_predicted_swe_2017-10-05.png\nCopied: 2018_predicted_swe_2018-03-07.png\nCopied: 2018_predicted_swe_2018-11-30.png\nCopied: shap_summary_plot_2023-01-20.png\nCopied: 2018_predicted_swe_2018-06-29.png\nCopied: 2017_predicted_swe_2017-11-06.png\nCopied: 2018_predicted_swe_2018-05-19.png\nCopied: 2023_pr_2023-01-20.png\nCopied: 2018_predicted_swe_2018-03-21.png\nCopied: 2018_predicted_swe_2018-05-03.png\nCopied: 2018_predicted_swe_2018-11-06.png\nCopied: 2017_predicted_swe_2017-12-24.png\nCopied: 2019_predicted_swe_2019-06-03.png\nCopied: 2019_predicted_swe_2019-01-25.png\nCopied: 2018_predicted_swe_2018-10-17.png\nCopied: 2018_predicted_swe_2018-10-01.png\nCopied: 2018_predicted_swe_2018-04-10.png\nCopied: importance_summary_plot_2023-05-16.png\nCopied: 2018_predicted_swe_2018-03-25.png\nCopied: 2018_predicted_swe_2018-04-07.png\nCopied: 2019_predicted_swe_2019-03-06.png\nCopied: 2019_predicted_swe_2019-03-11.png\nCopied: 2017_predicted_swe_2017-10-23.png\nCopied: 2019_predicted_swe_2019-03-24.png\nCopied: 2018_predicted_swe_2018-12-15.png\nCopied: 2018_predicted_swe_2018-02-05.png\nCopied: 2018_predicted_swe_2018-03-08.png\nCopied: 2018_predicted_swe_2018-04-18.png\nCopied: 2018_predicted_swe_2018-05-23.png\nCopied: 2018_predicted_swe_2018-05-26.png\nCopied: 2018_predicted_swe_2018-06-06.png\nCopied: 2019_predicted_swe_2019-06-08.png\nCopied: 2017_predicted_swe_2017-12-23.png\nCopied: 2019_predicted_swe_2019-02-14.png\nCopied: 2019_predicted_swe_2019-05-31.png\nCopied: 2019_predicted_swe_2019-06-19.png\nCopied: 2023_pr_2023-01-18.png\nCopied: 2019_predicted_swe_2019-02-08.png\nCopied: 2018_predicted_swe_2018-10-28.png\nCopied: 2019_predicted_swe_2019-05-04.png\nCopied: 2018_predicted_swe_2018-06-27.png\nCopied: 2017_predicted_swe_2017-11-08.png\nCopied: 2019_predicted_swe_2019-05-12.png\nCopied: 2017_predicted_swe_2017-10-29.png\nCopied: 2019_predicted_swe_2019-06-02.png\nCopied: 2017_predicted_swe_2017-11-30.png\nCopied: 2019_predicted_swe_2019-06-30.png\nCopied: 2019_predicted_swe_2019-02-27.png\nCopied: 2019_predicted_swe_2019-03-07.png\nCopied: 2018_predicted_swe_2018-03-31.png\nCopied: 2019_predicted_swe_2019-04-13.png\nCopied: 2018_predicted_swe_2018-02-18.png\nCopied: importance_summary_plot_2023-02-11.png\nCopied: 2023_pr_2023-05-28.png\nCopied: 2018_predicted_swe_2018-02-28.png\nCopied: 2017_predicted_swe_2017-12-29.png\nCopied: 2017_predicted_swe_2017-10-26.png\nCopied: 2018_predicted_swe_2018-11-23.png\nCopied: 2019_predicted_swe_2019-02-17.png\nCopied: 2018_predicted_swe_2018-05-20.png\nCopied: et-model-feature-importance-20.png\nCopied: 2018_predicted_swe_2018-10-06.png\nCopied: 2018_predicted_swe_2018-05-29.png\nCopied: 2018_predicted_swe_2018-12-06.png\nCopied: 2019_predicted_swe_2019-05-30.png\nCopied: 2019_predicted_swe_2019-05-29.png\nCopied: importance_summary_plot_2023-03-15.png\nCopied: 2017_predicted_swe_2017-10-14.png\nCopied: 2018_predicted_swe_2018-02-11.png\nCopied: 2019_predicted_swe_2019-06-26.png\nCopied: 2023_predicted_swe_2023-02-11.png\nCopied: 2023_pr_2023-01-15.png\nCopied: 2018_predicted_swe_2018-04-25.png\nCopied: 2017_predicted_swe_2017-11-01.png\nCopied: 2018_predicted_swe_2018-06-23.png\nCopied: 2017_predicted_swe_2017-12-08.png\nCopied: 2018_predicted_swe_2018-01-05.png\nCopied: 2018_predicted_swe_2018-11-13.png\nCopied: 2019_predicted_swe_2019-02-12.png\nCopied: 2019_predicted_swe_2019-05-09.png\nCopied: 2018_predicted_swe_2018-06-10.png\nCopied: 2019_predicted_swe_2019-01-09.png\nCopied: 2019_predicted_swe_2019-01-05.png\nCopied: 2017_predicted_swe_2017-12-02.png\nCopied: 2018_predicted_swe_2018-02-26.png\nCopied: 2017_predicted_swe_2017-12-26.png\nCopied: 2017_predicted_swe_2017-10-11.png\nCopied: 2019_predicted_swe_2019-02-01.png\nCopied: 2018_predicted_swe_2018-06-15.png\nCopied: 2017_predicted_swe_2017-12-13.png\nCopied: 2019_predicted_swe_2019-05-16.png\nCopied: 2018_predicted_swe_2018-12-28.png\nCopied: 2017_predicted_swe_2017-10-09.png\nCopied: 2019_predicted_swe_2019-01-03.png\nCopied: 2018_predicted_swe_2018-04-09.png\nCopied: 2017_predicted_swe_2017-10-13.png\nCopied: 2018_predicted_swe_2018-03-06.png\nCopied: importance_summary_plot_2023-06-15.png\nCopied: 2018_predicted_swe_2018-04-05.png\nCopied: 2022_pr_2022-01-16.png\nCopied: 2019_predicted_swe_2019-01-22.png\nCopied: 2017_predicted_swe_2017-10-22.png\nCopied: et-model-feature-importance-3.png\nCopied: 2018_predicted_swe_2018-06-04.png\nCopied: 2018_predicted_swe_2018-05-05.png\nCopied: 2023_predicted_swe_2023-01-15.png\nCopied: 2017_predicted_swe_2017-11-15.png\nCopied: 2018_predicted_swe_2018-11-04.png\nCopied: 2019_predicted_swe_2019-06-17.png\nCopied: 2018_predicted_swe_2018-05-08.png\nCopied: 2019_predicted_swe_2019-04-21.png\nCopied: 2018_predicted_swe_2018-01-22.png\nCopied: 2019_predicted_swe_2019-01-15.png\nCopied: 2018_predicted_swe_2018-04-17.png\nCopied: 2018_predicted_swe_2018-02-01.png\nCopied: 2018_predicted_swe_2018-05-27.png\nCopied: 2018_predicted_swe_2018-02-22.png\nCopied: 2018_predicted_swe_2018-11-07.png\nCopied: 2019_predicted_swe_2019-06-20.png\nCopied: 2018_predicted_swe_2018-12-09.png\nCopied: 2017_predicted_swe_2017-12-03.png\nCopied: 2019_predicted_swe_2019-06-14.png\nCopied: 2017_predicted_swe_2017-10-19.png\nCopied: 2018_predicted_swe_2018-12-23.png\nCopied: 2017_predicted_swe_2017-10-12.png\nCopied: 2019_predicted_swe_2019-05-11.png\nCopied: 2017_predicted_swe_2017-12-22.png\nCopied: 2017_predicted_swe_2017-11-23.png\nCopied: 2017_predicted_swe_2017-12-25.png\nCopied: importance_summary_plot_2023-07-15.png\nCopied: 2017_predicted_swe_2017-11-24.png\nCopied: 2018_predicted_swe_2018-06-07.png\nCopied: 2019_predicted_swe_2019-03-26.png\nCopied: 2019_predicted_swe_2019-03-04.png\nCopied: 2017_predicted_swe_2017-12-04.png\nCopied: 2019_predicted_swe_2019-05-25.png\nCopied: 2019_predicted_swe_2019-04-28.png\nCopied: 2022_pr_2022-12-29.png\nCopied: 2017_predicted_swe_2017-10-04.png\nCopied: 2017_predicted_swe_2017-12-27.png\nCopied: 2018_predicted_swe_2018-01-13.png\nCopied: 2018_predicted_swe_2018-03-18.png\nCopied: 2019_predicted_swe_2019-01-23.png\nCopied: 2023_predicted_swe_2023-03-02.png\nCopied: 2019_predicted_swe_2019-06-24.png\nCopied: 2022_pr_2022-10-15.png\nCopied: 2018_predicted_swe_2018-01-06.png\nCopied: 2018_predicted_swe_2018-01-25.png\nCopied: 2023_predicted_swe_2023-06-15.png\nCopied: 2018_predicted_swe_2018-05-17.png\nCopied: 2017_predicted_swe_2017-12-19.png\nCopied: 2018_predicted_swe_2018-02-21.png\nCopied: 2023_pr_2023-09-16.png\nCopied: 2018_predicted_swe_2018-02-27.png\nCopied: 2019_predicted_swe_2019-04-03.png\nCopied: 2018_predicted_swe_2018-02-04.png\nCopied: 2019_predicted_swe_2019-06-06.png\nCopied: 2019_predicted_swe_2019-01-10.png\nCopied: 2019_predicted_swe_2019-01-26.png\nCopied: 2022_pr_2022-02-22.png\nCopied: 2018_predicted_swe_2018-10-31.png\nCopied: 2018_predicted_swe_2018-05-22.png\nCopied: 2019_predicted_swe_2019-03-02.png\nCopied: 2018_predicted_swe_2018-12-20.png\nCopied: 2018_predicted_swe_2018-05-06.png\nCopied: 2018_predicted_swe_2018-11-29.png\nCopied: 2018_predicted_swe_2018-10-29.png\nCopied: 2019_predicted_swe_2019-05-21.png\nCopied: 2018_predicted_swe_2018-10-12.png\nCopied: 2018_predicted_swe_2018-11-09.png\nCopied: 2019_predicted_swe_2019-03-15.png\nCopied: 2019_predicted_swe_2019-05-27.png\nCopied: 2022_pr_2022-10-16.png\nCopied: 2018_predicted_swe_2018-04-04.png\nCopied: 2018_predicted_swe_2018-03-17.png\nCopied: 2022_pr_2022-04-17.png\nCopied: 2022_predicted_swe_2022-06-15.png\nCopied: 2017_predicted_swe_2017-12-05.png\nCopied: 2018_predicted_swe_2018-01-30.png\nCopied: 2018_predicted_swe_2018-12-30.png\nCopied: 2018_predicted_swe_2018-01-28.png\nCopied: 2019_predicted_swe_2019-01-20.png\nCopied: 2018_predicted_swe_2018-06-01.png\nCopied: 2017_predicted_swe_2017-11-10.png\nCopied: 2019_predicted_swe_2019-06-23.png\nCopied: 2018_predicted_swe_2018-04-11.png\nCopied: 2018_predicted_swe_2018-04-15.png\nCopied: 2018_predicted_swe_2018-04-06.png\nCopied: 2019_predicted_swe_2019-03-10.png\nCopied: 2018_predicted_swe_2018-04-03.png\nCopied: et-model-feature-importance-6.png\nCopied: 2018_predicted_swe_2018-10-21.png\nCopied: importance_summary_plot_2023-01-20.png\nCopied: 2018_predicted_swe_2018-03-13.png\nCopied: 2023_predicted_swe_2023-03-16.png\nCopied: 2018_predicted_swe_2018-12-11.png\nCopied: 2017_predicted_swe_2017-11-13.png\nCopied: importance_summary_plot_2023-05-17.png\nCopied: 2019_predicted_swe_2019-01-27.png\nCopied: 2017_predicted_swe_2017-12-20.png\nCopied: 2019_predicted_swe_2019-03-22.png\nCopied: 2018_predicted_swe_2018-10-05.png\nCopied: 2018_predicted_swe_2018-06-03.png\nCopied: 2018_predicted_swe_2018-04-27.png\nCopied: 2017_predicted_swe_2017-10-21.png\nCopied: 2017_predicted_swe_2017-10-27.png\nCopied: 2023_predicted_swe_2023-07-15.png\nCopied: 2023_predicted_swe_2023-09-16.png\nCopied: 2019_predicted_swe_2019-05-08.png\nCopied: 2023_predicted_swe_2023-02-10.png\nCopied: 2018_predicted_swe_2018-01-14.png\nCopied: 2019_predicted_swe_2019-04-19.png\nCopied: 2018_predicted_swe_2018-05-18.png\nCopied: 2018_predicted_swe_2018-05-21.png\nCopied: 2017_predicted_swe_2017-11-22.png\nCopied: 2018_predicted_swe_2018-12-13.png\nCopied: 2018_predicted_swe_2018-12-14.png\nCopied: 2017_predicted_swe_2017-10-01.png\nCopied: 2019_predicted_swe_2019-04-10.png\nCopied: 2017_predicted_swe_2017-11-17.png\nCopied: 2017_predicted_swe_2017-11-18.png\nCopied: 2018_predicted_swe_2018-03-05.png\nCopied: 2019_predicted_swe_2019-05-28.png\nCopied: 2018_predicted_swe_2018-12-27.png\nCopied: 2018_predicted_swe_2018-12-31.png\nCopied: 2018_predicted_swe_2018-10-24.png\nCopied: 2019_predicted_swe_2019-03-08.png\nCopied: 2018_predicted_swe_2018-03-16.png\nCopied: 2018_predicted_swe_2018-05-09.png\nCopied: 2019_predicted_swe_2019-01-02.png\nCopied: 2018_predicted_swe_2018-12-02.png\nCopied: 2019_predicted_swe_2019-02-25.png\nCopied: 2018_predicted_swe_2018-11-12.png\nCopied: 2017_predicted_swe_2017-10-28.png\nCopied: 2019_predicted_swe_2019-02-06.png\nCopied: 2019_predicted_swe_2019-03-09.png\nCopied: 2017_predicted_swe_2017-12-07.png\nCopied: 2019_predicted_swe_2019-02-07.png\nCopied: 2019_predicted_swe_2019-05-10.png\nCopied: 2018_predicted_swe_2018-03-29.png\nCopied: 2018_predicted_swe_2018-06-17.png\nCopied: 2019_predicted_swe_2019-06-12.png\nCopied: 2018_predicted_swe_2018-01-24.png\nCopied: 2018_predicted_swe_2018-05-30.png\nCopied: 2018_predicted_swe_2018-03-22.png\nCopied: 2019_predicted_swe_2019-02-05.png\nCopied: 2018_predicted_swe_2018-03-15.png\nCopied: 2019_predicted_swe_2019-03-03.png\nCopied: 2018_predicted_swe_2018-12-24.png\nCopied: 2018_predicted_swe_2018-03-01.png\nCopied: 2018_predicted_swe_2018-03-14.png\nCopied: 2018_predicted_swe_2018-02-10.png\nCopied: 2019_predicted_swe_2019-03-28.png\nCopied: 2018_predicted_swe_2018-11-20.png\nCopied: importance_summary_plot_2023-09-16.png\nCopied: 2017_predicted_swe_2017-11-27.png\nCopied: 2018_predicted_swe_2018-05-28.png\nCopied: 2018_predicted_swe_2018-12-17.png\nCopied: 2022_pr_2022-03-15.png\nCopied: 2017_predicted_swe_2017-10-08.png\nCopied: 2018_predicted_swe_2018-04-29.png\nCopied: 2023_pr_2023-05-16.png\nCopied: 2017_predicted_swe_2017-10-16.png\nCopied: 2018_predicted_swe_2018-12-25.png\nCopied: 2017_predicted_swe_2017-12-17.png\nCopied: 2023_predicted_swe_2023-05-29.png\nCopied: 2018_predicted_swe_2018-11-27.png\nCopied: 2018_predicted_swe_2018-02-06.png\nCopied: 2019_predicted_swe_2019-05-03.png\nCopied: 2018_predicted_swe_2018-11-24.png\nCopied: 2018_predicted_swe_2018-05-16.png\nCopied: 2019_predicted_swe_2019-02-16.png\nCopied: 2018_predicted_swe_2018-01-21.png\nCopied: 2018_predicted_swe_2018-01-17.png\nCopied: 2018_predicted_swe_2018-12-21.png\nCopied: 2018_predicted_swe_2018-04-22.png\nCopied: 2018_predicted_swe_2018-11-25.png\nCopied: 2023_pr_2023-05-25.png\nCopied: 2019_predicted_swe_2019-04-04.png\nCopied: 2018_predicted_swe_2018-06-26.png\nCopied: 2023_pr_2023-05-29.png\nCopied: 2022_predicted_swe_2022-10-16.png\nCopied: 2018_predicted_swe_2018-11-15.png\nCopied: 2018_predicted_swe_2018-05-31.png\nCopied: 2018_predicted_swe_2018-11-17.png\nCopied: 2017_predicted_swe_2017-10-07.png\nCopied: 2018_predicted_swe_2018-01-18.png\nCopied: 2017_predicted_swe_2017-11-16.png\nCopied: 2018_predicted_swe_2018-10-14.png\nCopied: 2018_predicted_swe_2018-01-20.png\nCopied: 2018_predicted_swe_2018-12-03.png\nCopied: 2018_predicted_swe_2018-10-18.png\nCopied: 2019_predicted_swe_2019-05-26.png\nCopied: 2019_predicted_swe_2019-01-07.png\nCopied: 2022_pr_2022-01-17.png\nCopied: 2019_predicted_swe_2019-05-23.png\nCopied: 2018_predicted_swe_2018-12-19.png\nCopied: 2018_predicted_swe_2018-03-09.png\nCopied: 2023_predicted_swe_2023-05-28.png\nCopied: 2018_predicted_swe_2018-10-23.png\nCopied: 2018_predicted_swe_2018-11-01.png\nCopied: 2018_predicted_swe_2018-02-25.png\nCopied: 2019_predicted_swe_2019-01-19.png\nCopied: 2018_predicted_swe_2018-02-02.png\nCopied: 2019_predicted_swe_2019-06-27.png\nCopied: 2018_predicted_swe_2018-12-16.png\nCopied: 2017_predicted_swe_2017-12-15.png\nCopied: 2023_predicted_swe_2023-09-15.png\nCopied: 2018_predicted_swe_2018-05-13.png\nCopied: 2022_pr_2022-12-30.png\n",
  "history_begin_time" : 1699682635013,
  "history_end_time" : 1699682636396,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "KoL85KUAhNtF",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-11-11\ntest start date:  2022-10-03\ntest end date:  2022-10-07\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: importance_summary_plot_2023-02-12.png\nCopied: 2023_predicted_swe_2023-05-16.png\nCopied: 2018_predicted_swe_2018-06-16.png\nCopied: 2019_predicted_swe_2019-02-15.png\nCopied: 2018_predicted_swe_2018-06-02.png\nCopied: 2019_predicted_swe_2019-05-01.png\nCopied: 2018_predicted_swe_2018-10-20.png\nCopied: 2019_predicted_swe_2019-03-12.png\nCopied: 2022_predicted_swe_2022-03-15.png\nCopied: 2019_predicted_swe_2019-05-17.png\nCopied: 2022_predicted_swe_2022-12-29.png\nCopied: 2018_predicted_swe_2018-11-19.png\nCopied: 2019_predicted_swe_2019-01-13.png\nCopied: 2018_predicted_swe_2018-10-19.png\nCopied: 2017_predicted_swe_2017-12-01.png\nCopied: 2019_predicted_swe_2019-04-20.png\nCopied: 2019_predicted_swe_2019-04-07.png\nCopied: et-model-feature-importance-28.png\nCopied: 2019_predicted_swe_2019-04-17.png\nCopied: 2018_predicted_swe_2018-06-11.png\nCopied: 2019_predicted_swe_2019-02-21.png\nCopied: 2018_predicted_swe_2018-01-16.png\nCopied: 2019_predicted_swe_2019-02-04.png\nCopied: 2019_predicted_swe_2019-01-16.png\nCopied: 2019_predicted_swe_2019-06-04.png\nCopied: 2017_predicted_swe_2017-11-14.png\nCopied: 2019_predicted_swe_2019-02-03.png\nCopied: partial_dependence_summary_plot_2023-01-20.png\nCopied: 2018_predicted_swe_2018-12-07.png\nCopied: 2019_predicted_swe_2019-06-22.png\nCopied: 2018_predicted_swe_2018-11-03.png\nCopied: 2018_predicted_swe_2018-04-16.png\nCopied: 2018_predicted_swe_2018-11-14.png\nCopied: 2018_predicted_swe_2018-05-12.png\nCopied: 2019_predicted_swe_2019-03-16.png\nCopied: 2019_predicted_swe_2019-04-02.png\nCopied: 2019_predicted_swe_2019-01-06.png\nCopied: 2019_predicted_swe_2019-01-04.png\nCopied: 2019_predicted_swe_2019-02-23.png\nCopied: importance_summary_plot_2023-02-10.png\nCopied: 2019_predicted_swe_2019-05-02.png\nCopied: 2019_predicted_swe_2019-05-18.png\nCopied: 2018_predicted_swe_2018-10-16.png\nCopied: 2017_predicted_swe_2017-12-09.png\nCopied: 2023_pr_2023-02-10.png\nCopied: 2018_predicted_swe_2018-10-30.png\nCopied: 2023_predicted_swe_2023-05-26.png\nCopied: 2019_predicted_swe_2019-03-13.png\nCopied: 2018_predicted_swe_2018-10-02.png\nCopied: 2019_predicted_swe_2019-04-08.png\nCopied: 2018_predicted_swe_2018-12-29.png\nCopied: 2018_predicted_swe_2018-01-11.png\nCopied: 2019_predicted_swe_2019-03-18.png\nCopied: 2019_predicted_swe_2019-01-08.png\nCopied: 2018_predicted_swe_2018-01-12.png\nCopied: 2018_predicted_swe_2018-06-12.png\nCopied: 2019_predicted_swe_2019-03-27.png\nCopied: 2023_pr_2023-02-12.png\nCopied: 2019_predicted_swe_2019-02-13.png\nCopied: 2018_predicted_swe_2018-12-18.png\nCopied: 2023_pr_2023-03-16.png\nCopied: 2019_predicted_swe_2019-04-29.png\nCopied: 2018_predicted_swe_2018-05-25.png\nCopied: importance_summary_plot_latest_model.png\nCopied: 2018_predicted_swe_2018-12-22.png\nCopied: 2018_predicted_swe_2018-01-26.png\nCopied: 2018_predicted_swe_2018-02-15.png\nCopied: 2023_predicted_swe_2023-05-17.png\nCopied: 2018_predicted_swe_2018-12-05.png\nCopied: 2018_predicted_swe_2018-05-04.png\nCopied: 2019_predicted_swe_2019-02-09.png\nCopied: 2019_predicted_swe_2019-06-16.png\nCopied: 2017_predicted_swe_2017-11-09.png\nCopied: 2018_predicted_swe_2018-06-08.png\nCopied: 2019_predicted_swe_2019-06-07.png\nCopied: 2019_predicted_swe_2019-06-21.png\nCopied: 2019_predicted_swe_2019-02-18.png\nCopied: 2019_predicted_swe_2019-01-12.png\nCopied: 2018_predicted_swe_2018-04-19.png\nCopied: 2017_predicted_swe_2017-10-17.png\nCopied: 2017_predicted_swe_2017-11-20.png\nCopied: 2019_predicted_swe_2019-06-18.png\nCopied: 2018_predicted_swe_2018-06-30.png\nCopied: 2018_predicted_swe_2018-01-02.png\nCopied: 2018_predicted_swe_2018-11-18.png\nCopied: 2018_predicted_swe_2018-03-03.png\nCopied: 2018_predicted_swe_2018-03-26.png\nCopied: 2018_predicted_swe_2018-01-23.png\nCopied: 2019_predicted_swe_2019-05-15.png\nCopied: 2019_predicted_swe_2019-05-06.png\nCopied: 2017_predicted_swe_2017-10-03.png\nCopied: 2017_predicted_swe_2017-11-03.png\nCopied: 2019_predicted_swe_2019-06-15.png\nCopied: 2019_predicted_swe_2019-02-11.png\nCopied: 2019_predicted_swe_2019-06-28.png\nCopied: 2018_predicted_swe_2018-02-19.png\nCopied: 2023_pr_2023-03-02.png\nCopied: 2018_predicted_swe_2018-02-24.png\nCopied: 2017_predicted_swe_2017-11-12.png\nCopied: importance_summary_plot_2023-03-16.png\nCopied: 2018_predicted_swe_2018-04-30.png\nCopied: 2018_predicted_swe_2018-05-10.png\nCopied: et-model-feature-importance-21.png\nCopied: 2019_predicted_swe_2019-01-24.png\nCopied: 2019_predicted_swe_2019-06-29.png\nCopied: 2018_predicted_swe_2018-12-12.png\nCopied: 2022_predicted_swe_2022-01-17.png\nCopied: 2018_predicted_swe_2018-06-21.png\nCopied: 2019_predicted_swe_2019-04-22.png\nCopied: 2019_predicted_swe_2019-04-16.png\nCopied: 2018_predicted_swe_2018-01-31.png\nCopied: 2017_predicted_swe_2017-11-28.png\nCopied: 2018_predicted_swe_2018-12-04.png\nCopied: 2022_predicted_swe_2022-12-30.png\nCopied: 2019_predicted_swe_2019-03-05.png\nCopied: 2017_predicted_swe_2017-12-31.png\nCopied: 2018_predicted_swe_2018-01-04.png\nCopied: 2019_predicted_swe_2019-04-25.png\nCopied: 2017_predicted_swe_2017-10-31.png\nCopied: 2023_pr_2023-05-26.png\nCopied: 2023_predicted_swe_2023-05-25.png\nCopied: 2018_predicted_swe_2018-10-08.png\nCopied: 2019_predicted_swe_2019-05-22.png\nCopied: 2019_predicted_swe_2019-05-24.png\nCopied: 2018_predicted_swe_2018-05-24.png\nCopied: 2018_predicted_swe_2018-02-20.png\nCopied: 2018_predicted_swe_2018-03-19.png\nCopied: 2017_predicted_swe_2017-12-21.png\nCopied: 2019_predicted_swe_2019-01-14.png\nCopied: 2018_predicted_swe_2018-06-28.png\nCopied: 2018_predicted_swe_2018-05-11.png\nCopied: 2018_predicted_swe_2018-01-01.png\nCopied: 2017_predicted_swe_2017-12-16.png\nCopied: 2018_predicted_swe_2018-06-09.png\nCopied: 2018_predicted_swe_2018-11-26.png\nCopied: 2019_predicted_swe_2019-01-31.png\nCopied: 2018_predicted_swe_2018-05-15.png\nCopied: 2018_predicted_swe_2018-12-01.png\nCopied: 2017_predicted_swe_2017-11-11.png\nCopied: 2018_predicted_swe_2018-10-25.png\nCopied: 2018_predicted_swe_2018-11-28.png\nCopied: 2017_predicted_swe_2017-12-30.png\nCopied: 2019_predicted_swe_2019-03-21.png\nCopied: 2017_predicted_swe_2017-10-25.png\nCopied: 2019_predicted_swe_2019-04-18.png\nCopied: 2019_predicted_swe_2019-01-17.png\nCopied: 2017_predicted_swe_2017-12-10.png\nCopied: 2018_predicted_swe_2018-11-11.png\nCopied: 2019_predicted_swe_2019-02-19.png\nCopied: 2018_predicted_swe_2018-06-22.png\nCopied: 2017_predicted_swe_2017-11-07.png\nCopied: 2019_predicted_swe_2019-03-17.png\nCopied: 2017_predicted_swe_2017-10-02.png\nCopied: 2017_predicted_swe_2017-11-26.png\nCopied: 2019_predicted_swe_2019-02-26.png\nCopied: 2018_predicted_swe_2018-06-24.png\nCopied: 2019_predicted_swe_2019-01-28.png\nCopied: 2019_predicted_swe_2019-04-23.png\nCopied: 2023_pr_2023-05-17.png\nCopied: 2018_predicted_swe_2018-12-08.png\nCopied: 2018_predicted_swe_2018-01-19.png\nCopied: 2019_predicted_swe_2019-05-14.png\nCopied: 2018_predicted_swe_2018-10-09.png\nCopied: 2018_predicted_swe_2018-06-05.png\nCopied: 2018_predicted_swe_2018-01-27.png\nCopied: 2018_predicted_swe_2018-03-20.png\nCopied: 2018_predicted_swe_2018-10-11.png\nCopied: 2017_predicted_swe_2017-11-19.png\nCopied: 2018_predicted_swe_2018-02-14.png\nCopied: 2018_predicted_swe_2018-10-13.png\nCopied: 2022_predicted_swe_2022-01-16.png\nCopied: 2017_predicted_swe_2017-12-18.png\nCopied: 2019_predicted_swe_2019-05-07.png\nCopied: 2018_predicted_swe_2018-01-10.png\nCopied: 2017_predicted_swe_2017-10-18.png\nCopied: 2018_predicted_swe_2018-01-03.png\nCopied: 2023_predicted_swe_2023-02-12.png\nCopied: 2018_predicted_swe_2018-03-27.png\nCopied: 2019_predicted_swe_2019-06-09.png\nCopied: 2018_predicted_swe_2018-04-24.png\nCopied: 2019_predicted_swe_2019-06-25.png\nCopied: 2017_predicted_swe_2017-11-05.png\nCopied: 2018_predicted_swe_2018-04-28.png\nCopied: 2023_pr_2023-06-15.png\nCopied: 2019_predicted_swe_2019-03-23.png\nCopied: 2019_predicted_swe_2019-06-01.png\nCopied: 2017_predicted_swe_2017-11-21.png\nCopied: 2018_predicted_swe_2018-03-04.png\nCopied: 2017_predicted_swe_2017-10-15.png\nCopied: 2018_predicted_swe_2018-04-01.png\nCopied: 2019_predicted_swe_2019-01-01.png\nCopied: 2018_predicted_swe_2018-10-15.png\nCopied: 2018_predicted_swe_2018-01-09.png\nCopied: 2018_predicted_swe_2018-11-22.png\nCopied: 2022_predicted_swe_2022-04-17.png\nCopied: 2022_predicted_swe_2022-02-28.png\nCopied: 2019_predicted_swe_2019-04-11.png\nCopied: 2018_predicted_swe_2018-04-20.png\nCopied: 2022_pr_2022-06-15.png\nCopied: 2018_predicted_swe_2018-01-08.png\nCopied: 2017_predicted_swe_2017-10-24.png\nCopied: 2018_predicted_swe_2018-04-14.png\nCopied: 2019_predicted_swe_2019-01-18.png\nCopied: 2018_predicted_swe_2018-03-02.png\nCopied: 2019_predicted_swe_2019-02-20.png\nCopied: 2017_predicted_swe_2017-11-25.png\nCopied: 2018_predicted_swe_2018-11-10.png\nCopied: 2019_predicted_swe_2019-05-05.png\nCopied: 2017_predicted_swe_2017-11-29.png\nCopied: 2019_predicted_swe_2019-04-15.png\nCopied: 2019_predicted_swe_2019-01-30.png\nCopied: 2018_predicted_swe_2018-06-18.png\nCopied: 2018_pr_2018-01-01.png\nCopied: 2019_predicted_swe_2019-04-06.png\nCopied: 2018_predicted_swe_2018-12-10.png\nCopied: 2018_predicted_swe_2018-11-02.png\nCopied: 2018_predicted_swe_2018-06-25.png\nCopied: 2018_predicted_swe_2018-01-15.png\nCopied: 2022_predicted_swe_2022-10-15.png\nCopied: 2019_predicted_swe_2019-03-29.png\nCopied: 2018_predicted_swe_2018-03-28.png\nCopied: 2023_predicted_swe_2023-05-18.png\nCopied: 2023_pr_2023-02-11.png\nCopied: 2018_predicted_swe_2018-06-13.png\nCopied: 2018_predicted_swe_2018-12-26.png\nCopied: 2019_predicted_swe_2019-01-11.png\nCopied: 2017_predicted_swe_2017-12-11.png\nCopied: 2018_predicted_swe_2018-03-30.png\nCopied: 2022_predicted_swe_2022-02-22.png\nCopied: 2018_predicted_swe_2018-11-21.png\nCopied: 2018_predicted_swe_2018-05-01.png\nCopied: 2018_predicted_swe_2018-02-17.png\nCopied: 2018_predicted_swe_2018-04-12.png\nCopied: 2018_predicted_swe_2018-11-16.png\nCopied: 2023_predicted_swe_2023-01-18.png\nCopied: 2019_predicted_swe_2019-03-25.png\nCopied: 2017_predicted_swe_2017-11-02.png\nCopied: 2018_predicted_swe_2018-06-20.png\nCopied: 2022_predicted_swe_2022-10-03.png\nCopied: 2018_predicted_swe_2018-04-08.png\nCopied: 2017_predicted_swe_2017-10-06.png\nCopied: 2019_predicted_swe_2019-05-20.png\nCopied: 2018_predicted_swe_2018-05-02.png\nCopied: 2019_predicted_swe_2019-06-11.png\nCopied: 2017_predicted_swe_2017-12-14.png\nCopied: 2018_predicted_swe_2018-04-02.png\nCopied: 2019_predicted_swe_2019-04-01.png\nCopied: 2017_predicted_swe_2017-10-20.png\nCopied: 2018_predicted_swe_2018-10-03.png\nCopied: 2019_predicted_swe_2019-03-19.png\nCopied: 2018_predicted_swe_2018-10-10.png\nCopied: 2018_predicted_swe_2018-02-03.png\nCopied: 2018_predicted_swe_2018-04-21.png\nCopied: 2019_predicted_swe_2019-03-30.png\nCopied: importance_summary_plot_2023-09-15.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2017_predicted_swe_2017-10-10.png\nCopied: 2018_predicted_swe_2018-01-29.png\nCopied: 2018_predicted_swe_2018-03-10.png\nCopied: 2018_predicted_swe_2018-02-13.png\nCopied: 2018_predicted_swe_2018-04-13.png\nCopied: 2018_predicted_swe_2018-01-07.png\nCopied: 2019_predicted_swe_2019-04-05.png\nCopied: 2018_predicted_swe_2018-10-27.png\nCopied: 2018_predicted_swe_2018-02-09.png\nCopied: 2019_predicted_swe_2019-06-10.png\nCopied: 2019_predicted_swe_2019-02-24.png\nCopied: 2018_predicted_swe_2018-02-07.png\nCopied: 2019_predicted_swe_2019-06-13.png\nCopied: 2019_predicted_swe_2019-02-22.png\nCopied: 2019_predicted_swe_2019-05-13.png\nCopied: et-model-feature-importance-13.png\nCopied: 2023_predicted_swe_2023-01-19.png\nCopied: 2019_predicted_swe_2019-02-28.png\nCopied: 2017_predicted_swe_2017-12-06.png\nCopied: 2018_predicted_swe_2018-05-14.png\nCopied: 2018_predicted_swe_2018-10-22.png\nCopied: 2019_predicted_swe_2019-04-24.png\nCopied: 2023_predicted_swe_2023-01-20.png\nCopied: 2023_pr_2023-01-19.png\nCopied: 2019_predicted_swe_2019-01-29.png\nCopied: 2017_predicted_swe_2017-12-12.png\nCopied: 2018_predicted_swe_2018-02-12.png\nCopied: 2018_predicted_swe_2018-06-14.png\nCopied: 2018_predicted_swe_2018-11-08.png\nCopied: 2018_predicted_swe_2018-02-23.png\nCopied: 2022_pr_2022-02-28.png\nCopied: 2023_pr_2023-05-18.png\nCopied: 2023_pr_2023-03-15.png\nCopied: 2018_predicted_swe_2018-03-11.png\nCopied: 2019_predicted_swe_2019-04-14.png\nCopied: 2018_predicted_swe_2018-02-08.png\nCopied: 2019_predicted_swe_2019-04-30.png\nCopied: 2018_predicted_swe_2018-02-16.png\nCopied: 2018_predicted_swe_2018-10-26.png\nCopied: 2019_predicted_swe_2019-04-12.png\nCopied: 2019_predicted_swe_2019-05-19.png\nCopied: 2017_predicted_swe_2017-11-04.png\nCopied: 2019_predicted_swe_2019-01-21.png\nCopied: 2019_predicted_swe_2019-02-10.png\nCopied: 2018_predicted_swe_2018-06-19.png\nCopied: 2017_predicted_swe_2017-10-30.png\nCopied: 2018_predicted_swe_2018-03-12.png\nCopied: 2023_pr_2023-07-15.png\nCopied: 2019_predicted_swe_2019-04-09.png\nCopied: 2019_predicted_swe_2019-04-27.png\nCopied: 2017_predicted_swe_2017-12-28.png\nCopied: 2023_pr_2023-09-15.png\nCopied: 2018_predicted_swe_2018-03-23.png\nCopied: 2018_predicted_swe_2018-03-24.png\nCopied: 2019_predicted_swe_2019-03-14.png\nCopied: 2019_predicted_swe_2019-06-05.png\nCopied: 2018_predicted_swe_2018-10-07.png\nCopied: 2019_predicted_swe_2019-03-20.png\nCopied: 2019_predicted_swe_2019-03-31.png\nCopied: 2018_predicted_swe_2018-10-04.png\nCopied: 2018_predicted_swe_2018-04-26.png\nCopied: 2019_predicted_swe_2019-02-02.png\nCopied: 2019_predicted_swe_2019-04-26.png\nCopied: 2018_predicted_swe_2018-04-23.png\nCopied: et-model-feature-importance-26.png\nCopied: 2018_predicted_swe_2018-05-07.png\nCopied: 2019_predicted_swe_2019-03-01.png\nCopied: 2018_predicted_swe_2018-11-05.png\nCopied: 2023_predicted_swe_2023-03-15.png\nCopied: 2017_predicted_swe_2017-10-05.png\nCopied: 2018_predicted_swe_2018-03-07.png\nCopied: 2018_predicted_swe_2018-11-30.png\nCopied: shap_summary_plot_2023-01-20.png\nCopied: 2018_predicted_swe_2018-06-29.png\nCopied: 2017_predicted_swe_2017-11-06.png\nCopied: 2018_predicted_swe_2018-05-19.png\nCopied: 2023_pr_2023-01-20.png\nCopied: 2018_predicted_swe_2018-03-21.png\nCopied: 2018_predicted_swe_2018-05-03.png\nCopied: 2018_predicted_swe_2018-11-06.png\nCopied: 2017_predicted_swe_2017-12-24.png\nCopied: 2019_predicted_swe_2019-06-03.png\nCopied: 2019_predicted_swe_2019-01-25.png\nCopied: 2018_predicted_swe_2018-10-17.png\nCopied: 2018_predicted_swe_2018-10-01.png\nCopied: 2018_predicted_swe_2018-04-10.png\nCopied: importance_summary_plot_2023-05-16.png\nCopied: 2018_predicted_swe_2018-03-25.png\nCopied: 2018_predicted_swe_2018-04-07.png\nCopied: 2019_predicted_swe_2019-03-06.png\nCopied: 2019_predicted_swe_2019-03-11.png\nCopied: 2017_predicted_swe_2017-10-23.png\nCopied: 2019_predicted_swe_2019-03-24.png\nCopied: 2018_predicted_swe_2018-12-15.png\nCopied: 2018_predicted_swe_2018-02-05.png\nCopied: 2018_predicted_swe_2018-03-08.png\nCopied: 2018_predicted_swe_2018-04-18.png\nCopied: 2018_predicted_swe_2018-05-23.png\nCopied: 2018_predicted_swe_2018-05-26.png\nCopied: 2018_predicted_swe_2018-06-06.png\nCopied: 2019_predicted_swe_2019-06-08.png\nCopied: 2017_predicted_swe_2017-12-23.png\nCopied: 2019_predicted_swe_2019-02-14.png\nCopied: 2019_predicted_swe_2019-05-31.png\nCopied: 2019_predicted_swe_2019-06-19.png\nCopied: 2023_pr_2023-01-18.png\nCopied: 2019_predicted_swe_2019-02-08.png\nCopied: 2018_predicted_swe_2018-10-28.png\nCopied: 2019_predicted_swe_2019-05-04.png\nCopied: 2018_predicted_swe_2018-06-27.png\nCopied: 2017_predicted_swe_2017-11-08.png\nCopied: 2019_predicted_swe_2019-05-12.png\nCopied: 2017_predicted_swe_2017-10-29.png\nCopied: 2019_predicted_swe_2019-06-02.png\nCopied: 2017_predicted_swe_2017-11-30.png\nCopied: 2019_predicted_swe_2019-06-30.png\nCopied: 2019_predicted_swe_2019-02-27.png\nCopied: 2019_predicted_swe_2019-03-07.png\nCopied: 2018_predicted_swe_2018-03-31.png\nCopied: 2019_predicted_swe_2019-04-13.png\nCopied: 2018_predicted_swe_2018-02-18.png\nCopied: importance_summary_plot_2023-02-11.png\nCopied: 2023_pr_2023-05-28.png\nCopied: 2018_predicted_swe_2018-02-28.png\nCopied: 2017_predicted_swe_2017-12-29.png\nCopied: 2017_predicted_swe_2017-10-26.png\nCopied: 2018_predicted_swe_2018-11-23.png\nCopied: 2019_predicted_swe_2019-02-17.png\nCopied: 2018_predicted_swe_2018-05-20.png\nCopied: et-model-feature-importance-20.png\nCopied: 2018_predicted_swe_2018-10-06.png\nCopied: 2018_predicted_swe_2018-05-29.png\nCopied: 2018_predicted_swe_2018-12-06.png\nCopied: 2019_predicted_swe_2019-05-30.png\nCopied: 2019_predicted_swe_2019-05-29.png\nCopied: importance_summary_plot_2023-03-15.png\nCopied: 2017_predicted_swe_2017-10-14.png\nCopied: 2018_predicted_swe_2018-02-11.png\nCopied: 2019_predicted_swe_2019-06-26.png\nCopied: 2023_predicted_swe_2023-02-11.png\nCopied: 2023_pr_2023-01-15.png\nCopied: 2018_predicted_swe_2018-04-25.png\nCopied: 2017_predicted_swe_2017-11-01.png\nCopied: 2018_predicted_swe_2018-06-23.png\nCopied: 2017_predicted_swe_2017-12-08.png\nCopied: 2018_predicted_swe_2018-01-05.png\nCopied: 2018_predicted_swe_2018-11-13.png\nCopied: 2019_predicted_swe_2019-02-12.png\nCopied: 2019_predicted_swe_2019-05-09.png\nCopied: 2018_predicted_swe_2018-06-10.png\nCopied: 2019_predicted_swe_2019-01-09.png\nCopied: 2019_predicted_swe_2019-01-05.png\nCopied: 2017_predicted_swe_2017-12-02.png\nCopied: 2018_predicted_swe_2018-02-26.png\nCopied: 2017_predicted_swe_2017-12-26.png\nCopied: 2017_predicted_swe_2017-10-11.png\nCopied: 2019_predicted_swe_2019-02-01.png\nCopied: 2018_predicted_swe_2018-06-15.png\nCopied: 2017_predicted_swe_2017-12-13.png\nCopied: 2019_predicted_swe_2019-05-16.png\nCopied: 2018_predicted_swe_2018-12-28.png\nCopied: 2017_predicted_swe_2017-10-09.png\nCopied: 2019_predicted_swe_2019-01-03.png\nCopied: 2018_predicted_swe_2018-04-09.png\nCopied: 2017_predicted_swe_2017-10-13.png\nCopied: 2018_predicted_swe_2018-03-06.png\nCopied: importance_summary_plot_2023-06-15.png\nCopied: 2018_predicted_swe_2018-04-05.png\nCopied: 2022_pr_2022-01-16.png\nCopied: 2019_predicted_swe_2019-01-22.png\nCopied: 2017_predicted_swe_2017-10-22.png\nCopied: et-model-feature-importance-3.png\nCopied: 2018_predicted_swe_2018-06-04.png\nCopied: 2018_predicted_swe_2018-05-05.png\nCopied: 2023_predicted_swe_2023-01-15.png\nCopied: 2017_predicted_swe_2017-11-15.png\nCopied: 2018_predicted_swe_2018-11-04.png\nCopied: 2019_predicted_swe_2019-06-17.png\nCopied: 2018_predicted_swe_2018-05-08.png\nCopied: 2019_predicted_swe_2019-04-21.png\nCopied: 2018_predicted_swe_2018-01-22.png\nCopied: 2019_predicted_swe_2019-01-15.png\nCopied: 2018_predicted_swe_2018-04-17.png\nCopied: 2018_predicted_swe_2018-02-01.png\nCopied: 2018_predicted_swe_2018-05-27.png\nCopied: 2018_predicted_swe_2018-02-22.png\nCopied: 2018_predicted_swe_2018-11-07.png\nCopied: 2019_predicted_swe_2019-06-20.png\nCopied: 2018_predicted_swe_2018-12-09.png\nCopied: 2017_predicted_swe_2017-12-03.png\nCopied: 2019_predicted_swe_2019-06-14.png\nCopied: 2017_predicted_swe_2017-10-19.png\nCopied: 2018_predicted_swe_2018-12-23.png\nCopied: 2017_predicted_swe_2017-10-12.png\nCopied: 2019_predicted_swe_2019-05-11.png\nCopied: 2017_predicted_swe_2017-12-22.png\nCopied: 2017_predicted_swe_2017-11-23.png\nCopied: 2017_predicted_swe_2017-12-25.png\nCopied: importance_summary_plot_2023-07-15.png\nCopied: 2017_predicted_swe_2017-11-24.png\nCopied: 2018_predicted_swe_2018-06-07.png\nCopied: 2019_predicted_swe_2019-03-26.png\nCopied: 2019_predicted_swe_2019-03-04.png\nCopied: 2017_predicted_swe_2017-12-04.png\nCopied: 2019_predicted_swe_2019-05-25.png\nCopied: 2019_predicted_swe_2019-04-28.png\nCopied: 2022_pr_2022-12-29.png\nCopied: 2017_predicted_swe_2017-10-04.png\nCopied: 2017_predicted_swe_2017-12-27.png\nCopied: 2018_predicted_swe_2018-01-13.png\nCopied: 2018_predicted_swe_2018-03-18.png\nCopied: 2019_predicted_swe_2019-01-23.png\nCopied: 2023_predicted_swe_2023-03-02.png\nCopied: 2019_predicted_swe_2019-06-24.png\nCopied: 2022_pr_2022-10-15.png\nCopied: 2018_predicted_swe_2018-01-06.png\nCopied: 2018_predicted_swe_2018-01-25.png\nCopied: 2023_predicted_swe_2023-06-15.png\nCopied: 2018_predicted_swe_2018-05-17.png\nCopied: 2017_predicted_swe_2017-12-19.png\nCopied: 2018_predicted_swe_2018-02-21.png\nCopied: 2023_pr_2023-09-16.png\nCopied: 2018_predicted_swe_2018-02-27.png\nCopied: 2019_predicted_swe_2019-04-03.png\nCopied: 2018_predicted_swe_2018-02-04.png\nCopied: 2019_predicted_swe_2019-06-06.png\nCopied: 2019_predicted_swe_2019-01-10.png\nCopied: 2019_predicted_swe_2019-01-26.png\nCopied: 2022_pr_2022-02-22.png\nCopied: 2018_predicted_swe_2018-10-31.png\nCopied: 2018_predicted_swe_2018-05-22.png\nCopied: 2019_predicted_swe_2019-03-02.png\nCopied: 2018_predicted_swe_2018-12-20.png\nCopied: 2018_predicted_swe_2018-05-06.png\nCopied: 2018_predicted_swe_2018-11-29.png\nCopied: 2018_predicted_swe_2018-10-29.png\nCopied: 2019_predicted_swe_2019-05-21.png\nCopied: 2018_predicted_swe_2018-10-12.png\nCopied: 2018_predicted_swe_2018-11-09.png\nCopied: 2019_predicted_swe_2019-03-15.png\nCopied: 2019_predicted_swe_2019-05-27.png\nCopied: 2022_pr_2022-10-16.png\nCopied: 2018_predicted_swe_2018-04-04.png\nCopied: 2018_predicted_swe_2018-03-17.png\nCopied: 2022_pr_2022-04-17.png\nCopied: 2022_predicted_swe_2022-06-15.png\nCopied: 2017_predicted_swe_2017-12-05.png\nCopied: 2018_predicted_swe_2018-01-30.png\nCopied: 2018_predicted_swe_2018-12-30.png\nCopied: 2018_predicted_swe_2018-01-28.png\nCopied: 2019_predicted_swe_2019-01-20.png\nCopied: 2018_predicted_swe_2018-06-01.png\nCopied: 2017_predicted_swe_2017-11-10.png\nCopied: 2019_predicted_swe_2019-06-23.png\nCopied: 2018_predicted_swe_2018-04-11.png\nCopied: 2018_predicted_swe_2018-04-15.png\nCopied: 2018_predicted_swe_2018-04-06.png\nCopied: 2019_predicted_swe_2019-03-10.png\nCopied: 2018_predicted_swe_2018-04-03.png\nCopied: et-model-feature-importance-6.png\nCopied: 2018_predicted_swe_2018-10-21.png\nCopied: importance_summary_plot_2023-01-20.png\nCopied: 2018_predicted_swe_2018-03-13.png\nCopied: 2023_predicted_swe_2023-03-16.png\nCopied: 2018_predicted_swe_2018-12-11.png\nCopied: 2017_predicted_swe_2017-11-13.png\nCopied: importance_summary_plot_2023-05-17.png\nCopied: 2019_predicted_swe_2019-01-27.png\nCopied: 2017_predicted_swe_2017-12-20.png\nCopied: 2019_predicted_swe_2019-03-22.png\nCopied: 2018_predicted_swe_2018-10-05.png\nCopied: 2018_predicted_swe_2018-06-03.png\nCopied: 2018_predicted_swe_2018-04-27.png\nCopied: 2017_predicted_swe_2017-10-21.png\nCopied: 2017_predicted_swe_2017-10-27.png\nCopied: 2023_predicted_swe_2023-07-15.png\nCopied: 2023_predicted_swe_2023-09-16.png\nCopied: 2019_predicted_swe_2019-05-08.png\nCopied: 2023_predicted_swe_2023-02-10.png\nCopied: 2018_predicted_swe_2018-01-14.png\nCopied: 2019_predicted_swe_2019-04-19.png\nCopied: 2018_predicted_swe_2018-05-18.png\nCopied: 2018_predicted_swe_2018-05-21.png\nCopied: 2017_predicted_swe_2017-11-22.png\nCopied: 2018_predicted_swe_2018-12-13.png\nCopied: 2018_predicted_swe_2018-12-14.png\nCopied: 2017_predicted_swe_2017-10-01.png\nCopied: 2019_predicted_swe_2019-04-10.png\nCopied: 2017_predicted_swe_2017-11-17.png\nCopied: 2017_predicted_swe_2017-11-18.png\nCopied: 2018_predicted_swe_2018-03-05.png\nCopied: 2019_predicted_swe_2019-05-28.png\nCopied: 2018_predicted_swe_2018-12-27.png\nCopied: 2018_predicted_swe_2018-12-31.png\nCopied: 2018_predicted_swe_2018-10-24.png\nCopied: 2019_predicted_swe_2019-03-08.png\nCopied: 2018_predicted_swe_2018-03-16.png\nCopied: 2018_predicted_swe_2018-05-09.png\nCopied: 2019_predicted_swe_2019-01-02.png\nCopied: 2018_predicted_swe_2018-12-02.png\nCopied: 2019_predicted_swe_2019-02-25.png\nCopied: 2018_predicted_swe_2018-11-12.png\nCopied: 2017_predicted_swe_2017-10-28.png\nCopied: 2019_predicted_swe_2019-02-06.png\nCopied: 2019_predicted_swe_2019-03-09.png\nCopied: 2017_predicted_swe_2017-12-07.png\nCopied: 2019_predicted_swe_2019-02-07.png\nCopied: 2019_predicted_swe_2019-05-10.png\nCopied: 2018_predicted_swe_2018-03-29.png\nCopied: 2018_predicted_swe_2018-06-17.png\nCopied: 2019_predicted_swe_2019-06-12.png\nCopied: 2018_predicted_swe_2018-01-24.png\nCopied: 2018_predicted_swe_2018-05-30.png\nCopied: 2018_predicted_swe_2018-03-22.png\nCopied: 2019_predicted_swe_2019-02-05.png\nCopied: 2018_predicted_swe_2018-03-15.png\nCopied: 2019_predicted_swe_2019-03-03.png\nCopied: 2018_predicted_swe_2018-12-24.png\nCopied: 2018_predicted_swe_2018-03-01.png\nCopied: 2018_predicted_swe_2018-03-14.png\nCopied: 2018_predicted_swe_2018-02-10.png\nCopied: 2019_predicted_swe_2019-03-28.png\nCopied: 2018_predicted_swe_2018-11-20.png\nCopied: importance_summary_plot_2023-09-16.png\nCopied: 2017_predicted_swe_2017-11-27.png\nCopied: 2018_predicted_swe_2018-05-28.png\nCopied: 2018_predicted_swe_2018-12-17.png\nCopied: 2022_pr_2022-03-15.png\nCopied: 2017_predicted_swe_2017-10-08.png\nCopied: 2018_predicted_swe_2018-04-29.png\nCopied: 2023_pr_2023-05-16.png\nCopied: 2017_predicted_swe_2017-10-16.png\nCopied: 2018_predicted_swe_2018-12-25.png\nCopied: 2017_predicted_swe_2017-12-17.png\nCopied: 2023_predicted_swe_2023-05-29.png\nCopied: 2018_predicted_swe_2018-11-27.png\nCopied: 2018_predicted_swe_2018-02-06.png\nCopied: 2019_predicted_swe_2019-05-03.png\nCopied: 2018_predicted_swe_2018-11-24.png\nCopied: 2018_predicted_swe_2018-05-16.png\nCopied: 2019_predicted_swe_2019-02-16.png\nCopied: 2018_predicted_swe_2018-01-21.png\nCopied: 2018_predicted_swe_2018-01-17.png\nCopied: 2018_predicted_swe_2018-12-21.png\nCopied: 2018_predicted_swe_2018-04-22.png\nCopied: 2018_predicted_swe_2018-11-25.png\nCopied: 2023_pr_2023-05-25.png\nCopied: 2019_predicted_swe_2019-04-04.png\nCopied: 2018_predicted_swe_2018-06-26.png\nCopied: 2023_pr_2023-05-29.png\nCopied: 2022_predicted_swe_2022-10-16.png\nCopied: 2018_predicted_swe_2018-11-15.png\nCopied: 2018_predicted_swe_2018-05-31.png\nCopied: 2018_predicted_swe_2018-11-17.png\nCopied: 2017_predicted_swe_2017-10-07.png\nCopied: 2018_predicted_swe_2018-01-18.png\nCopied: 2017_predicted_swe_2017-11-16.png\nCopied: 2018_predicted_swe_2018-10-14.png\nCopied: 2018_predicted_swe_2018-01-20.png\nCopied: 2018_predicted_swe_2018-12-03.png\nCopied: 2018_predicted_swe_2018-10-18.png\nCopied: 2019_predicted_swe_2019-05-26.png\nCopied: 2019_predicted_swe_2019-01-07.png\nCopied: 2022_pr_2022-01-17.png\nCopied: 2019_predicted_swe_2019-05-23.png\nCopied: 2018_predicted_swe_2018-12-19.png\nCopied: 2018_predicted_swe_2018-03-09.png\nCopied: 2023_predicted_swe_2023-05-28.png\nCopied: 2018_predicted_swe_2018-10-23.png\nCopied: 2018_predicted_swe_2018-11-01.png\nCopied: 2018_predicted_swe_2018-02-25.png\nCopied: 2019_predicted_swe_2019-01-19.png\nCopied: 2018_predicted_swe_2018-02-02.png\nCopied: 2019_predicted_swe_2019-06-27.png\nCopied: 2018_predicted_swe_2018-12-16.png\nCopied: 2017_predicted_swe_2017-12-15.png\nCopied: 2023_predicted_swe_2023-09-15.png\nCopied: 2018_predicted_swe_2018-05-13.png\nCopied: 2022_pr_2022-12-30.png\n",
  "history_begin_time" : 1699680975627,
  "history_end_time" : 1699680976652,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "Iz3xOD6J9157",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-11-10\ntest start date:  2022-10-03\ntest end date:  2022-10-07\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: importance_summary_plot_2023-02-12.png\nCopied: 2023_predicted_swe_2023-05-16.png\nCopied: 2018_predicted_swe_2018-06-16.png\nCopied: 2019_predicted_swe_2019-02-15.png\nCopied: 2018_predicted_swe_2018-06-02.png\nCopied: 2019_predicted_swe_2019-05-01.png\nCopied: 2018_predicted_swe_2018-10-20.png\nCopied: 2019_predicted_swe_2019-03-12.png\nCopied: 2022_predicted_swe_2022-03-15.png\nCopied: 2019_predicted_swe_2019-05-17.png\nCopied: 2022_predicted_swe_2022-12-29.png\nCopied: 2018_predicted_swe_2018-11-19.png\nCopied: 2019_predicted_swe_2019-01-13.png\nCopied: 2018_predicted_swe_2018-10-19.png\nCopied: 2017_predicted_swe_2017-12-01.png\nCopied: 2019_predicted_swe_2019-04-20.png\nCopied: 2019_predicted_swe_2019-04-07.png\nCopied: et-model-feature-importance-28.png\nCopied: 2019_predicted_swe_2019-04-17.png\nCopied: 2018_predicted_swe_2018-06-11.png\nCopied: 2019_predicted_swe_2019-02-21.png\nCopied: 2018_predicted_swe_2018-01-16.png\nCopied: 2019_predicted_swe_2019-02-04.png\nCopied: 2019_predicted_swe_2019-01-16.png\nCopied: 2019_predicted_swe_2019-06-04.png\nCopied: 2017_predicted_swe_2017-11-14.png\nCopied: 2019_predicted_swe_2019-02-03.png\nCopied: partial_dependence_summary_plot_2023-01-20.png\nCopied: 2018_predicted_swe_2018-12-07.png\nCopied: 2019_predicted_swe_2019-06-22.png\nCopied: 2018_predicted_swe_2018-11-03.png\nCopied: 2018_predicted_swe_2018-04-16.png\nCopied: 2018_predicted_swe_2018-11-14.png\nCopied: 2018_predicted_swe_2018-05-12.png\nCopied: 2019_predicted_swe_2019-03-16.png\nCopied: 2019_predicted_swe_2019-04-02.png\nCopied: 2019_predicted_swe_2019-01-06.png\nCopied: 2019_predicted_swe_2019-01-04.png\nCopied: 2019_predicted_swe_2019-02-23.png\nCopied: importance_summary_plot_2023-02-10.png\nCopied: 2019_predicted_swe_2019-05-02.png\nCopied: 2019_predicted_swe_2019-05-18.png\nCopied: 2018_predicted_swe_2018-10-16.png\nCopied: 2017_predicted_swe_2017-12-09.png\nCopied: 2023_pr_2023-02-10.png\nCopied: 2018_predicted_swe_2018-10-30.png\nCopied: 2023_predicted_swe_2023-05-26.png\nCopied: 2019_predicted_swe_2019-03-13.png\nCopied: 2018_predicted_swe_2018-10-02.png\nCopied: 2019_predicted_swe_2019-04-08.png\nCopied: 2018_predicted_swe_2018-12-29.png\nCopied: 2018_predicted_swe_2018-01-11.png\nCopied: 2019_predicted_swe_2019-03-18.png\nCopied: 2019_predicted_swe_2019-01-08.png\nCopied: 2018_predicted_swe_2018-01-12.png\nCopied: 2018_predicted_swe_2018-06-12.png\nCopied: 2019_predicted_swe_2019-03-27.png\nCopied: 2023_pr_2023-02-12.png\nCopied: 2019_predicted_swe_2019-02-13.png\nCopied: 2018_predicted_swe_2018-12-18.png\nCopied: 2023_pr_2023-03-16.png\nCopied: 2019_predicted_swe_2019-04-29.png\nCopied: 2018_predicted_swe_2018-05-25.png\nCopied: importance_summary_plot_latest_model.png\nCopied: 2018_predicted_swe_2018-12-22.png\nCopied: 2018_predicted_swe_2018-01-26.png\nCopied: 2018_predicted_swe_2018-02-15.png\nCopied: 2023_predicted_swe_2023-05-17.png\nCopied: 2018_predicted_swe_2018-12-05.png\nCopied: 2018_predicted_swe_2018-05-04.png\nCopied: 2019_predicted_swe_2019-02-09.png\nCopied: 2019_predicted_swe_2019-06-16.png\nCopied: 2017_predicted_swe_2017-11-09.png\nCopied: 2018_predicted_swe_2018-06-08.png\nCopied: 2019_predicted_swe_2019-06-07.png\nCopied: 2019_predicted_swe_2019-06-21.png\nCopied: 2019_predicted_swe_2019-02-18.png\nCopied: 2019_predicted_swe_2019-01-12.png\nCopied: 2018_predicted_swe_2018-04-19.png\nCopied: 2017_predicted_swe_2017-10-17.png\nCopied: 2017_predicted_swe_2017-11-20.png\nCopied: 2019_predicted_swe_2019-06-18.png\nCopied: 2018_predicted_swe_2018-06-30.png\nCopied: 2018_predicted_swe_2018-01-02.png\nCopied: 2018_predicted_swe_2018-11-18.png\nCopied: 2018_predicted_swe_2018-03-03.png\nCopied: 2018_predicted_swe_2018-03-26.png\nCopied: 2018_predicted_swe_2018-01-23.png\nCopied: 2019_predicted_swe_2019-05-15.png\nCopied: 2019_predicted_swe_2019-05-06.png\nCopied: 2017_predicted_swe_2017-10-03.png\nCopied: 2017_predicted_swe_2017-11-03.png\nCopied: 2019_predicted_swe_2019-06-15.png\nCopied: 2019_predicted_swe_2019-02-11.png\nCopied: 2019_predicted_swe_2019-06-28.png\nCopied: 2018_predicted_swe_2018-02-19.png\nCopied: 2023_pr_2023-03-02.png\nCopied: 2018_predicted_swe_2018-02-24.png\nCopied: 2017_predicted_swe_2017-11-12.png\nCopied: importance_summary_plot_2023-03-16.png\nCopied: 2018_predicted_swe_2018-04-30.png\nCopied: 2018_predicted_swe_2018-05-10.png\nCopied: et-model-feature-importance-21.png\nCopied: 2019_predicted_swe_2019-01-24.png\nCopied: 2019_predicted_swe_2019-06-29.png\nCopied: 2018_predicted_swe_2018-12-12.png\nCopied: 2022_predicted_swe_2022-01-17.png\nCopied: 2018_predicted_swe_2018-06-21.png\nCopied: 2019_predicted_swe_2019-04-22.png\nCopied: 2019_predicted_swe_2019-04-16.png\nCopied: 2018_predicted_swe_2018-01-31.png\nCopied: 2017_predicted_swe_2017-11-28.png\nCopied: 2018_predicted_swe_2018-12-04.png\nCopied: 2022_predicted_swe_2022-12-30.png\nCopied: 2019_predicted_swe_2019-03-05.png\nCopied: 2017_predicted_swe_2017-12-31.png\nCopied: 2018_predicted_swe_2018-01-04.png\nCopied: 2019_predicted_swe_2019-04-25.png\nCopied: 2017_predicted_swe_2017-10-31.png\nCopied: 2023_pr_2023-05-26.png\nCopied: 2023_predicted_swe_2023-05-25.png\nCopied: 2018_predicted_swe_2018-10-08.png\nCopied: 2019_predicted_swe_2019-05-22.png\nCopied: 2019_predicted_swe_2019-05-24.png\nCopied: 2018_predicted_swe_2018-05-24.png\nCopied: 2018_predicted_swe_2018-02-20.png\nCopied: 2018_predicted_swe_2018-03-19.png\nCopied: 2017_predicted_swe_2017-12-21.png\nCopied: 2019_predicted_swe_2019-01-14.png\nCopied: 2018_predicted_swe_2018-06-28.png\nCopied: 2018_predicted_swe_2018-05-11.png\nCopied: 2018_predicted_swe_2018-01-01.png\nCopied: 2017_predicted_swe_2017-12-16.png\nCopied: 2018_predicted_swe_2018-06-09.png\nCopied: 2018_predicted_swe_2018-11-26.png\nCopied: 2019_predicted_swe_2019-01-31.png\nCopied: 2018_predicted_swe_2018-05-15.png\nCopied: 2018_predicted_swe_2018-12-01.png\nCopied: 2017_predicted_swe_2017-11-11.png\nCopied: 2018_predicted_swe_2018-10-25.png\nCopied: 2018_predicted_swe_2018-11-28.png\nCopied: 2017_predicted_swe_2017-12-30.png\nCopied: 2019_predicted_swe_2019-03-21.png\nCopied: 2017_predicted_swe_2017-10-25.png\nCopied: 2019_predicted_swe_2019-04-18.png\nCopied: 2019_predicted_swe_2019-01-17.png\nCopied: 2017_predicted_swe_2017-12-10.png\nCopied: 2018_predicted_swe_2018-11-11.png\nCopied: 2019_predicted_swe_2019-02-19.png\nCopied: 2018_predicted_swe_2018-06-22.png\nCopied: 2017_predicted_swe_2017-11-07.png\nCopied: 2019_predicted_swe_2019-03-17.png\nCopied: 2017_predicted_swe_2017-10-02.png\nCopied: 2017_predicted_swe_2017-11-26.png\nCopied: 2019_predicted_swe_2019-02-26.png\nCopied: 2018_predicted_swe_2018-06-24.png\nCopied: 2019_predicted_swe_2019-01-28.png\nCopied: 2019_predicted_swe_2019-04-23.png\nCopied: 2023_pr_2023-05-17.png\nCopied: 2018_predicted_swe_2018-12-08.png\nCopied: 2018_predicted_swe_2018-01-19.png\nCopied: 2019_predicted_swe_2019-05-14.png\nCopied: 2018_predicted_swe_2018-10-09.png\nCopied: 2018_predicted_swe_2018-06-05.png\nCopied: 2018_predicted_swe_2018-01-27.png\nCopied: 2018_predicted_swe_2018-03-20.png\nCopied: 2018_predicted_swe_2018-10-11.png\nCopied: 2017_predicted_swe_2017-11-19.png\nCopied: 2018_predicted_swe_2018-02-14.png\nCopied: 2018_predicted_swe_2018-10-13.png\nCopied: 2022_predicted_swe_2022-01-16.png\nCopied: 2017_predicted_swe_2017-12-18.png\nCopied: 2019_predicted_swe_2019-05-07.png\nCopied: 2018_predicted_swe_2018-01-10.png\nCopied: 2017_predicted_swe_2017-10-18.png\nCopied: 2018_predicted_swe_2018-01-03.png\nCopied: 2023_predicted_swe_2023-02-12.png\nCopied: 2018_predicted_swe_2018-03-27.png\nCopied: 2019_predicted_swe_2019-06-09.png\nCopied: 2018_predicted_swe_2018-04-24.png\nCopied: 2019_predicted_swe_2019-06-25.png\nCopied: 2017_predicted_swe_2017-11-05.png\nCopied: 2018_predicted_swe_2018-04-28.png\nCopied: 2023_pr_2023-06-15.png\nCopied: 2019_predicted_swe_2019-03-23.png\nCopied: 2019_predicted_swe_2019-06-01.png\nCopied: 2017_predicted_swe_2017-11-21.png\nCopied: 2018_predicted_swe_2018-03-04.png\nCopied: 2017_predicted_swe_2017-10-15.png\nCopied: 2018_predicted_swe_2018-04-01.png\nCopied: 2019_predicted_swe_2019-01-01.png\nCopied: 2018_predicted_swe_2018-10-15.png\nCopied: 2018_predicted_swe_2018-01-09.png\nCopied: 2018_predicted_swe_2018-11-22.png\nCopied: 2022_predicted_swe_2022-04-17.png\nCopied: 2022_predicted_swe_2022-02-28.png\nCopied: 2019_predicted_swe_2019-04-11.png\nCopied: 2018_predicted_swe_2018-04-20.png\nCopied: 2022_pr_2022-06-15.png\nCopied: 2018_predicted_swe_2018-01-08.png\nCopied: 2017_predicted_swe_2017-10-24.png\nCopied: 2018_predicted_swe_2018-04-14.png\nCopied: 2019_predicted_swe_2019-01-18.png\nCopied: 2018_predicted_swe_2018-03-02.png\nCopied: 2019_predicted_swe_2019-02-20.png\nCopied: 2017_predicted_swe_2017-11-25.png\nCopied: 2018_predicted_swe_2018-11-10.png\nCopied: 2019_predicted_swe_2019-05-05.png\nCopied: 2017_predicted_swe_2017-11-29.png\nCopied: 2019_predicted_swe_2019-04-15.png\nCopied: 2019_predicted_swe_2019-01-30.png\nCopied: 2018_predicted_swe_2018-06-18.png\nCopied: 2018_pr_2018-01-01.png\nCopied: 2019_predicted_swe_2019-04-06.png\nCopied: 2018_predicted_swe_2018-12-10.png\nCopied: 2018_predicted_swe_2018-11-02.png\nCopied: 2018_predicted_swe_2018-06-25.png\nCopied: 2018_predicted_swe_2018-01-15.png\nCopied: 2022_predicted_swe_2022-10-15.png\nCopied: 2019_predicted_swe_2019-03-29.png\nCopied: 2018_predicted_swe_2018-03-28.png\nCopied: 2023_predicted_swe_2023-05-18.png\nCopied: 2023_pr_2023-02-11.png\nCopied: 2018_predicted_swe_2018-06-13.png\nCopied: 2018_predicted_swe_2018-12-26.png\nCopied: 2019_predicted_swe_2019-01-11.png\nCopied: 2017_predicted_swe_2017-12-11.png\nCopied: 2018_predicted_swe_2018-03-30.png\nCopied: 2022_predicted_swe_2022-02-22.png\nCopied: 2018_predicted_swe_2018-11-21.png\nCopied: 2018_predicted_swe_2018-05-01.png\nCopied: 2018_predicted_swe_2018-02-17.png\nCopied: 2018_predicted_swe_2018-04-12.png\nCopied: 2018_predicted_swe_2018-11-16.png\nCopied: 2023_predicted_swe_2023-01-18.png\nCopied: 2019_predicted_swe_2019-03-25.png\nCopied: 2017_predicted_swe_2017-11-02.png\nCopied: 2018_predicted_swe_2018-06-20.png\nCopied: 2022_predicted_swe_2022-10-03.png\nCopied: 2018_predicted_swe_2018-04-08.png\nCopied: 2017_predicted_swe_2017-10-06.png\nCopied: 2019_predicted_swe_2019-05-20.png\nCopied: 2018_predicted_swe_2018-05-02.png\nCopied: 2019_predicted_swe_2019-06-11.png\nCopied: 2017_predicted_swe_2017-12-14.png\nCopied: 2018_predicted_swe_2018-04-02.png\nCopied: 2019_predicted_swe_2019-04-01.png\nCopied: 2017_predicted_swe_2017-10-20.png\nCopied: 2018_predicted_swe_2018-10-03.png\nCopied: 2019_predicted_swe_2019-03-19.png\nCopied: 2018_predicted_swe_2018-10-10.png\nCopied: 2018_predicted_swe_2018-02-03.png\nCopied: 2018_predicted_swe_2018-04-21.png\nCopied: 2019_predicted_swe_2019-03-30.png\nCopied: importance_summary_plot_2023-09-15.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2017_predicted_swe_2017-10-10.png\nCopied: 2018_predicted_swe_2018-01-29.png\nCopied: 2018_predicted_swe_2018-03-10.png\nCopied: 2018_predicted_swe_2018-02-13.png\nCopied: 2018_predicted_swe_2018-04-13.png\nCopied: 2018_predicted_swe_2018-01-07.png\nCopied: 2019_predicted_swe_2019-04-05.png\nCopied: 2018_predicted_swe_2018-10-27.png\nCopied: 2018_predicted_swe_2018-02-09.png\nCopied: 2019_predicted_swe_2019-06-10.png\nCopied: 2019_predicted_swe_2019-02-24.png\nCopied: 2018_predicted_swe_2018-02-07.png\nCopied: 2019_predicted_swe_2019-06-13.png\nCopied: 2019_predicted_swe_2019-02-22.png\nCopied: 2019_predicted_swe_2019-05-13.png\nCopied: et-model-feature-importance-13.png\nCopied: 2023_predicted_swe_2023-01-19.png\nCopied: 2019_predicted_swe_2019-02-28.png\nCopied: 2017_predicted_swe_2017-12-06.png\nCopied: 2018_predicted_swe_2018-05-14.png\nCopied: 2018_predicted_swe_2018-10-22.png\nCopied: 2019_predicted_swe_2019-04-24.png\nCopied: 2023_predicted_swe_2023-01-20.png\nCopied: 2023_pr_2023-01-19.png\nCopied: 2019_predicted_swe_2019-01-29.png\nCopied: 2017_predicted_swe_2017-12-12.png\nCopied: 2018_predicted_swe_2018-02-12.png\nCopied: 2018_predicted_swe_2018-06-14.png\nCopied: 2018_predicted_swe_2018-11-08.png\nCopied: 2018_predicted_swe_2018-02-23.png\nCopied: 2022_pr_2022-02-28.png\nCopied: 2023_pr_2023-05-18.png\nCopied: 2023_pr_2023-03-15.png\nCopied: 2018_predicted_swe_2018-03-11.png\nCopied: 2019_predicted_swe_2019-04-14.png\nCopied: 2018_predicted_swe_2018-02-08.png\nCopied: 2019_predicted_swe_2019-04-30.png\nCopied: 2018_predicted_swe_2018-02-16.png\nCopied: 2018_predicted_swe_2018-10-26.png\nCopied: 2019_predicted_swe_2019-04-12.png\nCopied: 2019_predicted_swe_2019-05-19.png\nCopied: 2017_predicted_swe_2017-11-04.png\nCopied: 2019_predicted_swe_2019-01-21.png\nCopied: 2019_predicted_swe_2019-02-10.png\nCopied: 2018_predicted_swe_2018-06-19.png\nCopied: 2017_predicted_swe_2017-10-30.png\nCopied: 2018_predicted_swe_2018-03-12.png\nCopied: 2023_pr_2023-07-15.png\nCopied: 2019_predicted_swe_2019-04-09.png\nCopied: 2019_predicted_swe_2019-04-27.png\nCopied: 2017_predicted_swe_2017-12-28.png\nCopied: 2023_pr_2023-09-15.png\nCopied: 2018_predicted_swe_2018-03-23.png\nCopied: 2018_predicted_swe_2018-03-24.png\nCopied: 2019_predicted_swe_2019-03-14.png\nCopied: 2019_predicted_swe_2019-06-05.png\nCopied: 2018_predicted_swe_2018-10-07.png\nCopied: 2019_predicted_swe_2019-03-20.png\nCopied: 2019_predicted_swe_2019-03-31.png\nCopied: 2018_predicted_swe_2018-10-04.png\nCopied: 2018_predicted_swe_2018-04-26.png\nCopied: 2019_predicted_swe_2019-02-02.png\nCopied: 2019_predicted_swe_2019-04-26.png\nCopied: 2018_predicted_swe_2018-04-23.png\nCopied: et-model-feature-importance-26.png\nCopied: 2018_predicted_swe_2018-05-07.png\nCopied: 2019_predicted_swe_2019-03-01.png\nCopied: 2018_predicted_swe_2018-11-05.png\nCopied: 2023_predicted_swe_2023-03-15.png\nCopied: 2017_predicted_swe_2017-10-05.png\nCopied: 2018_predicted_swe_2018-03-07.png\nCopied: 2018_predicted_swe_2018-11-30.png\nCopied: shap_summary_plot_2023-01-20.png\nCopied: 2018_predicted_swe_2018-06-29.png\nCopied: 2017_predicted_swe_2017-11-06.png\nCopied: 2018_predicted_swe_2018-05-19.png\nCopied: 2023_pr_2023-01-20.png\nCopied: 2018_predicted_swe_2018-03-21.png\nCopied: 2018_predicted_swe_2018-05-03.png\nCopied: 2018_predicted_swe_2018-11-06.png\nCopied: 2017_predicted_swe_2017-12-24.png\nCopied: 2019_predicted_swe_2019-06-03.png\nCopied: 2019_predicted_swe_2019-01-25.png\nCopied: 2018_predicted_swe_2018-10-17.png\nCopied: 2018_predicted_swe_2018-10-01.png\nCopied: 2018_predicted_swe_2018-04-10.png\nCopied: importance_summary_plot_2023-05-16.png\nCopied: 2018_predicted_swe_2018-03-25.png\nCopied: 2018_predicted_swe_2018-04-07.png\nCopied: 2019_predicted_swe_2019-03-06.png\nCopied: 2019_predicted_swe_2019-03-11.png\nCopied: 2017_predicted_swe_2017-10-23.png\nCopied: 2019_predicted_swe_2019-03-24.png\nCopied: 2018_predicted_swe_2018-12-15.png\nCopied: 2018_predicted_swe_2018-02-05.png\nCopied: 2018_predicted_swe_2018-03-08.png\nCopied: 2018_predicted_swe_2018-04-18.png\nCopied: 2018_predicted_swe_2018-05-23.png\nCopied: 2018_predicted_swe_2018-05-26.png\nCopied: 2018_predicted_swe_2018-06-06.png\nCopied: 2019_predicted_swe_2019-06-08.png\nCopied: 2017_predicted_swe_2017-12-23.png\nCopied: 2019_predicted_swe_2019-02-14.png\nCopied: 2019_predicted_swe_2019-05-31.png\nCopied: 2019_predicted_swe_2019-06-19.png\nCopied: 2023_pr_2023-01-18.png\nCopied: 2019_predicted_swe_2019-02-08.png\nCopied: 2018_predicted_swe_2018-10-28.png\nCopied: 2019_predicted_swe_2019-05-04.png\nCopied: 2018_predicted_swe_2018-06-27.png\nCopied: 2017_predicted_swe_2017-11-08.png\nCopied: 2019_predicted_swe_2019-05-12.png\nCopied: 2017_predicted_swe_2017-10-29.png\nCopied: 2019_predicted_swe_2019-06-02.png\nCopied: 2017_predicted_swe_2017-11-30.png\nCopied: 2019_predicted_swe_2019-06-30.png\nCopied: 2019_predicted_swe_2019-02-27.png\nCopied: 2019_predicted_swe_2019-03-07.png\nCopied: 2018_predicted_swe_2018-03-31.png\nCopied: 2019_predicted_swe_2019-04-13.png\nCopied: 2018_predicted_swe_2018-02-18.png\nCopied: importance_summary_plot_2023-02-11.png\nCopied: 2023_pr_2023-05-28.png\nCopied: 2018_predicted_swe_2018-02-28.png\nCopied: 2017_predicted_swe_2017-12-29.png\nCopied: 2017_predicted_swe_2017-10-26.png\nCopied: 2018_predicted_swe_2018-11-23.png\nCopied: 2019_predicted_swe_2019-02-17.png\nCopied: 2018_predicted_swe_2018-05-20.png\nCopied: et-model-feature-importance-20.png\nCopied: 2018_predicted_swe_2018-10-06.png\nCopied: 2018_predicted_swe_2018-05-29.png\nCopied: 2018_predicted_swe_2018-12-06.png\nCopied: 2019_predicted_swe_2019-05-30.png\nCopied: 2019_predicted_swe_2019-05-29.png\nCopied: importance_summary_plot_2023-03-15.png\nCopied: 2017_predicted_swe_2017-10-14.png\nCopied: 2018_predicted_swe_2018-02-11.png\nCopied: 2019_predicted_swe_2019-06-26.png\nCopied: 2023_predicted_swe_2023-02-11.png\nCopied: 2023_pr_2023-01-15.png\nCopied: 2018_predicted_swe_2018-04-25.png\nCopied: 2017_predicted_swe_2017-11-01.png\nCopied: 2018_predicted_swe_2018-06-23.png\nCopied: 2017_predicted_swe_2017-12-08.png\nCopied: 2018_predicted_swe_2018-01-05.png\nCopied: 2018_predicted_swe_2018-11-13.png\nCopied: 2019_predicted_swe_2019-02-12.png\nCopied: 2019_predicted_swe_2019-05-09.png\nCopied: 2018_predicted_swe_2018-06-10.png\nCopied: 2019_predicted_swe_2019-01-09.png\nCopied: 2019_predicted_swe_2019-01-05.png\nCopied: 2017_predicted_swe_2017-12-02.png\nCopied: 2018_predicted_swe_2018-02-26.png\nCopied: 2017_predicted_swe_2017-12-26.png\nCopied: 2017_predicted_swe_2017-10-11.png\nCopied: 2019_predicted_swe_2019-02-01.png\nCopied: 2018_predicted_swe_2018-06-15.png\nCopied: 2017_predicted_swe_2017-12-13.png\nCopied: 2019_predicted_swe_2019-05-16.png\nCopied: 2018_predicted_swe_2018-12-28.png\nCopied: 2017_predicted_swe_2017-10-09.png\nCopied: 2019_predicted_swe_2019-01-03.png\nCopied: 2018_predicted_swe_2018-04-09.png\nCopied: 2017_predicted_swe_2017-10-13.png\nCopied: 2018_predicted_swe_2018-03-06.png\nCopied: importance_summary_plot_2023-06-15.png\nCopied: 2018_predicted_swe_2018-04-05.png\nCopied: 2022_pr_2022-01-16.png\nCopied: 2019_predicted_swe_2019-01-22.png\nCopied: 2017_predicted_swe_2017-10-22.png\nCopied: et-model-feature-importance-3.png\nCopied: 2018_predicted_swe_2018-06-04.png\nCopied: 2018_predicted_swe_2018-05-05.png\nCopied: 2023_predicted_swe_2023-01-15.png\nCopied: 2017_predicted_swe_2017-11-15.png\nCopied: 2018_predicted_swe_2018-11-04.png\nCopied: 2019_predicted_swe_2019-06-17.png\nCopied: 2018_predicted_swe_2018-05-08.png\nCopied: 2019_predicted_swe_2019-04-21.png\nCopied: 2018_predicted_swe_2018-01-22.png\nCopied: 2019_predicted_swe_2019-01-15.png\nCopied: 2018_predicted_swe_2018-04-17.png\nCopied: 2018_predicted_swe_2018-02-01.png\nCopied: 2018_predicted_swe_2018-05-27.png\nCopied: 2018_predicted_swe_2018-02-22.png\nCopied: 2018_predicted_swe_2018-11-07.png\nCopied: 2019_predicted_swe_2019-06-20.png\nCopied: 2018_predicted_swe_2018-12-09.png\nCopied: 2017_predicted_swe_2017-12-03.png\nCopied: 2019_predicted_swe_2019-06-14.png\nCopied: 2017_predicted_swe_2017-10-19.png\nCopied: 2018_predicted_swe_2018-12-23.png\nCopied: 2017_predicted_swe_2017-10-12.png\nCopied: 2019_predicted_swe_2019-05-11.png\nCopied: 2017_predicted_swe_2017-12-22.png\nCopied: 2017_predicted_swe_2017-11-23.png\nCopied: 2017_predicted_swe_2017-12-25.png\nCopied: importance_summary_plot_2023-07-15.png\nCopied: 2017_predicted_swe_2017-11-24.png\nCopied: 2018_predicted_swe_2018-06-07.png\nCopied: 2019_predicted_swe_2019-03-26.png\nCopied: 2019_predicted_swe_2019-03-04.png\nCopied: 2017_predicted_swe_2017-12-04.png\nCopied: 2019_predicted_swe_2019-05-25.png\nCopied: 2019_predicted_swe_2019-04-28.png\nCopied: 2022_pr_2022-12-29.png\nCopied: 2017_predicted_swe_2017-10-04.png\nCopied: 2017_predicted_swe_2017-12-27.png\nCopied: 2018_predicted_swe_2018-01-13.png\nCopied: 2018_predicted_swe_2018-03-18.png\nCopied: 2019_predicted_swe_2019-01-23.png\nCopied: 2023_predicted_swe_2023-03-02.png\nCopied: 2019_predicted_swe_2019-06-24.png\nCopied: 2022_pr_2022-10-15.png\nCopied: 2018_predicted_swe_2018-01-06.png\nCopied: 2018_predicted_swe_2018-01-25.png\nCopied: 2023_predicted_swe_2023-06-15.png\nCopied: 2018_predicted_swe_2018-05-17.png\nCopied: 2017_predicted_swe_2017-12-19.png\nCopied: 2018_predicted_swe_2018-02-21.png\nCopied: 2023_pr_2023-09-16.png\nCopied: 2018_predicted_swe_2018-02-27.png\nCopied: 2019_predicted_swe_2019-04-03.png\nCopied: 2018_predicted_swe_2018-02-04.png\nCopied: 2019_predicted_swe_2019-06-06.png\nCopied: 2019_predicted_swe_2019-01-10.png\nCopied: 2019_predicted_swe_2019-01-26.png\nCopied: 2022_pr_2022-02-22.png\nCopied: 2018_predicted_swe_2018-10-31.png\nCopied: 2018_predicted_swe_2018-05-22.png\nCopied: 2019_predicted_swe_2019-03-02.png\nCopied: 2018_predicted_swe_2018-12-20.png\nCopied: 2018_predicted_swe_2018-05-06.png\nCopied: 2018_predicted_swe_2018-11-29.png\nCopied: 2018_predicted_swe_2018-10-29.png\nCopied: 2019_predicted_swe_2019-05-21.png\nCopied: 2018_predicted_swe_2018-10-12.png\nCopied: 2018_predicted_swe_2018-11-09.png\nCopied: 2019_predicted_swe_2019-03-15.png\nCopied: 2019_predicted_swe_2019-05-27.png\nCopied: 2022_pr_2022-10-16.png\nCopied: 2018_predicted_swe_2018-04-04.png\nCopied: 2018_predicted_swe_2018-03-17.png\nCopied: 2022_pr_2022-04-17.png\nCopied: 2022_predicted_swe_2022-06-15.png\nCopied: 2017_predicted_swe_2017-12-05.png\nCopied: 2018_predicted_swe_2018-01-30.png\nCopied: 2018_predicted_swe_2018-12-30.png\nCopied: 2018_predicted_swe_2018-01-28.png\nCopied: 2019_predicted_swe_2019-01-20.png\nCopied: 2018_predicted_swe_2018-06-01.png\nCopied: 2017_predicted_swe_2017-11-10.png\nCopied: 2019_predicted_swe_2019-06-23.png\nCopied: 2018_predicted_swe_2018-04-11.png\nCopied: 2018_predicted_swe_2018-04-15.png\nCopied: 2018_predicted_swe_2018-04-06.png\nCopied: 2019_predicted_swe_2019-03-10.png\nCopied: 2018_predicted_swe_2018-04-03.png\nCopied: et-model-feature-importance-6.png\nCopied: 2018_predicted_swe_2018-10-21.png\nCopied: importance_summary_plot_2023-01-20.png\nCopied: 2018_predicted_swe_2018-03-13.png\nCopied: 2023_predicted_swe_2023-03-16.png\nCopied: 2018_predicted_swe_2018-12-11.png\nCopied: 2017_predicted_swe_2017-11-13.png\nCopied: importance_summary_plot_2023-05-17.png\nCopied: 2019_predicted_swe_2019-01-27.png\nCopied: 2017_predicted_swe_2017-12-20.png\nCopied: 2019_predicted_swe_2019-03-22.png\nCopied: 2018_predicted_swe_2018-10-05.png\nCopied: 2018_predicted_swe_2018-06-03.png\nCopied: 2018_predicted_swe_2018-04-27.png\nCopied: 2017_predicted_swe_2017-10-21.png\nCopied: 2017_predicted_swe_2017-10-27.png\nCopied: 2023_predicted_swe_2023-07-15.png\nCopied: 2023_predicted_swe_2023-09-16.png\nCopied: 2019_predicted_swe_2019-05-08.png\nCopied: 2023_predicted_swe_2023-02-10.png\nCopied: 2018_predicted_swe_2018-01-14.png\nCopied: 2019_predicted_swe_2019-04-19.png\nCopied: 2018_predicted_swe_2018-05-18.png\nCopied: 2018_predicted_swe_2018-05-21.png\nCopied: 2017_predicted_swe_2017-11-22.png\nCopied: 2018_predicted_swe_2018-12-13.png\nCopied: 2018_predicted_swe_2018-12-14.png\nCopied: 2017_predicted_swe_2017-10-01.png\nCopied: 2019_predicted_swe_2019-04-10.png\nCopied: 2017_predicted_swe_2017-11-17.png\nCopied: 2017_predicted_swe_2017-11-18.png\nCopied: 2018_predicted_swe_2018-03-05.png\nCopied: 2019_predicted_swe_2019-05-28.png\nCopied: 2018_predicted_swe_2018-12-27.png\nCopied: 2018_predicted_swe_2018-12-31.png\nCopied: 2018_predicted_swe_2018-10-24.png\nCopied: 2019_predicted_swe_2019-03-08.png\nCopied: 2018_predicted_swe_2018-03-16.png\nCopied: 2018_predicted_swe_2018-05-09.png\nCopied: 2019_predicted_swe_2019-01-02.png\nCopied: 2018_predicted_swe_2018-12-02.png\nCopied: 2019_predicted_swe_2019-02-25.png\nCopied: 2018_predicted_swe_2018-11-12.png\nCopied: 2017_predicted_swe_2017-10-28.png\nCopied: 2019_predicted_swe_2019-02-06.png\nCopied: 2019_predicted_swe_2019-03-09.png\nCopied: 2017_predicted_swe_2017-12-07.png\nCopied: 2019_predicted_swe_2019-02-07.png\nCopied: 2019_predicted_swe_2019-05-10.png\nCopied: 2018_predicted_swe_2018-03-29.png\nCopied: 2018_predicted_swe_2018-06-17.png\nCopied: 2019_predicted_swe_2019-06-12.png\nCopied: 2018_predicted_swe_2018-01-24.png\nCopied: 2018_predicted_swe_2018-05-30.png\nCopied: 2018_predicted_swe_2018-03-22.png\nCopied: 2019_predicted_swe_2019-02-05.png\nCopied: 2018_predicted_swe_2018-03-15.png\nCopied: 2019_predicted_swe_2019-03-03.png\nCopied: 2018_predicted_swe_2018-12-24.png\nCopied: 2018_predicted_swe_2018-03-01.png\nCopied: 2018_predicted_swe_2018-03-14.png\nCopied: 2018_predicted_swe_2018-02-10.png\nCopied: 2019_predicted_swe_2019-03-28.png\nCopied: 2018_predicted_swe_2018-11-20.png\nCopied: importance_summary_plot_2023-09-16.png\nCopied: 2017_predicted_swe_2017-11-27.png\nCopied: 2018_predicted_swe_2018-05-28.png\nCopied: 2018_predicted_swe_2018-12-17.png\nCopied: 2022_pr_2022-03-15.png\nCopied: 2017_predicted_swe_2017-10-08.png\nCopied: 2018_predicted_swe_2018-04-29.png\nCopied: 2023_pr_2023-05-16.png\nCopied: 2017_predicted_swe_2017-10-16.png\nCopied: 2018_predicted_swe_2018-12-25.png\nCopied: 2017_predicted_swe_2017-12-17.png\nCopied: 2023_predicted_swe_2023-05-29.png\nCopied: 2018_predicted_swe_2018-11-27.png\nCopied: 2018_predicted_swe_2018-02-06.png\nCopied: 2019_predicted_swe_2019-05-03.png\nCopied: 2018_predicted_swe_2018-11-24.png\nCopied: 2018_predicted_swe_2018-05-16.png\nCopied: 2019_predicted_swe_2019-02-16.png\nCopied: 2018_predicted_swe_2018-01-21.png\nCopied: 2018_predicted_swe_2018-01-17.png\nCopied: 2018_predicted_swe_2018-12-21.png\nCopied: 2018_predicted_swe_2018-04-22.png\nCopied: 2018_predicted_swe_2018-11-25.png\nCopied: 2023_pr_2023-05-25.png\nCopied: 2019_predicted_swe_2019-04-04.png\nCopied: 2018_predicted_swe_2018-06-26.png\nCopied: 2023_pr_2023-05-29.png\nCopied: 2022_predicted_swe_2022-10-16.png\nCopied: 2018_predicted_swe_2018-11-15.png\nCopied: 2018_predicted_swe_2018-05-31.png\nCopied: 2018_predicted_swe_2018-11-17.png\nCopied: 2017_predicted_swe_2017-10-07.png\nCopied: 2018_predicted_swe_2018-01-18.png\nCopied: 2017_predicted_swe_2017-11-16.png\nCopied: 2018_predicted_swe_2018-10-14.png\nCopied: 2018_predicted_swe_2018-01-20.png\nCopied: 2018_predicted_swe_2018-12-03.png\nCopied: 2018_predicted_swe_2018-10-18.png\nCopied: 2019_predicted_swe_2019-05-26.png\nCopied: 2019_predicted_swe_2019-01-07.png\nCopied: 2022_pr_2022-01-17.png\nCopied: 2019_predicted_swe_2019-05-23.png\nCopied: 2018_predicted_swe_2018-12-19.png\nCopied: 2018_predicted_swe_2018-03-09.png\nCopied: 2023_predicted_swe_2023-05-28.png\nCopied: 2018_predicted_swe_2018-10-23.png\nCopied: 2018_predicted_swe_2018-11-01.png\nCopied: 2018_predicted_swe_2018-02-25.png\nCopied: 2019_predicted_swe_2019-01-19.png\nCopied: 2018_predicted_swe_2018-02-02.png\nCopied: 2019_predicted_swe_2019-06-27.png\nCopied: 2018_predicted_swe_2018-12-16.png\nCopied: 2017_predicted_swe_2017-12-15.png\nCopied: 2023_predicted_swe_2023-09-15.png\nCopied: 2018_predicted_swe_2018-05-13.png\nCopied: 2022_pr_2022-12-30.png\n",
  "history_begin_time" : 1699608453467,
  "history_end_time" : 1699608457767,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "IcbjNggqpndN",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-11-08\ntest start date:  2018-01-01\ntest end date:  2023-11-08\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: importance_summary_plot_2023-02-12.png\nCopied: 2023_predicted_swe_2023-05-16.png\nCopied: 2018_predicted_swe_2018-06-16.png\nCopied: 2019_predicted_swe_2019-02-15.png\nCopied: 2018_predicted_swe_2018-06-02.png\nCopied: 2019_predicted_swe_2019-05-01.png\nCopied: 2018_predicted_swe_2018-10-20.png\nCopied: 2019_predicted_swe_2019-03-12.png\nCopied: 2022_predicted_swe_2022-03-15.png\nCopied: 2019_predicted_swe_2019-05-17.png\nCopied: 2022_predicted_swe_2022-12-29.png\nCopied: 2018_predicted_swe_2018-11-19.png\nCopied: 2019_predicted_swe_2019-01-13.png\nCopied: 2018_predicted_swe_2018-10-19.png\nCopied: 2017_predicted_swe_2017-12-01.png\nCopied: 2019_predicted_swe_2019-04-20.png\nCopied: 2019_predicted_swe_2019-04-07.png\nCopied: et-model-feature-importance-28.png\nCopied: 2019_predicted_swe_2019-04-17.png\nCopied: 2018_predicted_swe_2018-06-11.png\nCopied: 2019_predicted_swe_2019-02-21.png\nCopied: 2018_predicted_swe_2018-01-16.png\nCopied: 2019_predicted_swe_2019-02-04.png\nCopied: 2019_predicted_swe_2019-01-16.png\nCopied: 2019_predicted_swe_2019-06-04.png\nCopied: 2017_predicted_swe_2017-11-14.png\nCopied: 2019_predicted_swe_2019-02-03.png\nCopied: partial_dependence_summary_plot_2023-01-20.png\nCopied: 2018_predicted_swe_2018-12-07.png\nCopied: 2019_predicted_swe_2019-06-22.png\nCopied: 2018_predicted_swe_2018-11-03.png\nCopied: 2018_predicted_swe_2018-04-16.png\nCopied: 2018_predicted_swe_2018-11-14.png\nCopied: 2018_predicted_swe_2018-05-12.png\nCopied: 2019_predicted_swe_2019-03-16.png\nCopied: 2019_predicted_swe_2019-04-02.png\nCopied: 2019_predicted_swe_2019-01-06.png\nCopied: 2019_predicted_swe_2019-01-04.png\nCopied: 2019_predicted_swe_2019-02-23.png\nCopied: importance_summary_plot_2023-02-10.png\nCopied: 2019_predicted_swe_2019-05-02.png\nCopied: 2019_predicted_swe_2019-05-18.png\nCopied: 2018_predicted_swe_2018-10-16.png\nCopied: 2017_predicted_swe_2017-12-09.png\nCopied: 2023_pr_2023-02-10.png\nCopied: 2018_predicted_swe_2018-10-30.png\nCopied: 2023_predicted_swe_2023-05-26.png\nCopied: 2019_predicted_swe_2019-03-13.png\nCopied: 2018_predicted_swe_2018-10-02.png\nCopied: 2019_predicted_swe_2019-04-08.png\nCopied: 2018_predicted_swe_2018-12-29.png\nCopied: 2018_predicted_swe_2018-01-11.png\nCopied: 2019_predicted_swe_2019-03-18.png\nCopied: 2019_predicted_swe_2019-01-08.png\nCopied: 2018_predicted_swe_2018-01-12.png\nCopied: 2018_predicted_swe_2018-06-12.png\nCopied: 2019_predicted_swe_2019-03-27.png\nCopied: 2023_pr_2023-02-12.png\nCopied: 2019_predicted_swe_2019-02-13.png\nCopied: 2018_predicted_swe_2018-12-18.png\nCopied: 2023_pr_2023-03-16.png\nCopied: 2019_predicted_swe_2019-04-29.png\nCopied: 2018_predicted_swe_2018-05-25.png\nCopied: importance_summary_plot_latest_model.png\nCopied: 2018_predicted_swe_2018-12-22.png\nCopied: 2018_predicted_swe_2018-01-26.png\nCopied: 2018_predicted_swe_2018-02-15.png\nCopied: 2023_predicted_swe_2023-05-17.png\nCopied: 2018_predicted_swe_2018-12-05.png\nCopied: 2018_predicted_swe_2018-05-04.png\nCopied: 2019_predicted_swe_2019-02-09.png\nCopied: 2019_predicted_swe_2019-06-16.png\nCopied: 2017_predicted_swe_2017-11-09.png\nCopied: 2018_predicted_swe_2018-06-08.png\nCopied: 2019_predicted_swe_2019-06-07.png\nCopied: 2019_predicted_swe_2019-06-21.png\nCopied: 2019_predicted_swe_2019-02-18.png\nCopied: 2019_predicted_swe_2019-01-12.png\nCopied: 2018_predicted_swe_2018-04-19.png\nCopied: 2017_predicted_swe_2017-10-17.png\nCopied: 2017_predicted_swe_2017-11-20.png\nCopied: 2019_predicted_swe_2019-06-18.png\nCopied: 2018_predicted_swe_2018-06-30.png\nCopied: 2018_predicted_swe_2018-01-02.png\nCopied: 2018_predicted_swe_2018-11-18.png\nCopied: 2018_predicted_swe_2018-03-03.png\nCopied: 2018_predicted_swe_2018-03-26.png\nCopied: 2018_predicted_swe_2018-01-23.png\nCopied: 2019_predicted_swe_2019-05-15.png\nCopied: 2019_predicted_swe_2019-05-06.png\nCopied: 2017_predicted_swe_2017-10-03.png\nCopied: 2017_predicted_swe_2017-11-03.png\nCopied: 2019_predicted_swe_2019-06-15.png\nCopied: 2019_predicted_swe_2019-02-11.png\nCopied: 2019_predicted_swe_2019-06-28.png\nCopied: 2018_predicted_swe_2018-02-19.png\nCopied: 2023_pr_2023-03-02.png\nCopied: 2018_predicted_swe_2018-02-24.png\nCopied: 2017_predicted_swe_2017-11-12.png\nCopied: importance_summary_plot_2023-03-16.png\nCopied: 2018_predicted_swe_2018-04-30.png\nCopied: 2018_predicted_swe_2018-05-10.png\nCopied: 2019_predicted_swe_2019-01-24.png\nCopied: 2019_predicted_swe_2019-06-29.png\nCopied: 2018_predicted_swe_2018-12-12.png\nCopied: 2022_predicted_swe_2022-01-17.png\nCopied: 2018_predicted_swe_2018-06-21.png\nCopied: 2019_predicted_swe_2019-04-22.png\nCopied: 2019_predicted_swe_2019-04-16.png\nCopied: 2018_predicted_swe_2018-01-31.png\nCopied: 2017_predicted_swe_2017-11-28.png\nCopied: 2018_predicted_swe_2018-12-04.png\nCopied: 2022_predicted_swe_2022-12-30.png\nCopied: 2019_predicted_swe_2019-03-05.png\nCopied: 2017_predicted_swe_2017-12-31.png\nCopied: 2018_predicted_swe_2018-01-04.png\nCopied: 2019_predicted_swe_2019-04-25.png\nCopied: 2017_predicted_swe_2017-10-31.png\nCopied: 2023_pr_2023-05-26.png\nCopied: 2023_predicted_swe_2023-05-25.png\nCopied: 2018_predicted_swe_2018-10-08.png\nCopied: 2019_predicted_swe_2019-05-22.png\nCopied: 2019_predicted_swe_2019-05-24.png\nCopied: 2018_predicted_swe_2018-05-24.png\nCopied: 2018_predicted_swe_2018-02-20.png\nCopied: 2018_predicted_swe_2018-03-19.png\nCopied: 2017_predicted_swe_2017-12-21.png\nCopied: 2019_predicted_swe_2019-01-14.png\nCopied: 2018_predicted_swe_2018-06-28.png\nCopied: 2018_predicted_swe_2018-05-11.png\nCopied: 2018_predicted_swe_2018-01-01.png\nCopied: 2017_predicted_swe_2017-12-16.png\nCopied: 2018_predicted_swe_2018-06-09.png\nCopied: 2018_predicted_swe_2018-11-26.png\nCopied: 2019_predicted_swe_2019-01-31.png\nCopied: 2018_predicted_swe_2018-05-15.png\nCopied: 2018_predicted_swe_2018-12-01.png\nCopied: 2017_predicted_swe_2017-11-11.png\nCopied: 2018_predicted_swe_2018-10-25.png\nCopied: 2018_predicted_swe_2018-11-28.png\nCopied: 2017_predicted_swe_2017-12-30.png\nCopied: 2019_predicted_swe_2019-03-21.png\nCopied: 2017_predicted_swe_2017-10-25.png\nCopied: 2019_predicted_swe_2019-04-18.png\nCopied: 2019_predicted_swe_2019-01-17.png\nCopied: 2017_predicted_swe_2017-12-10.png\nCopied: 2018_predicted_swe_2018-11-11.png\nCopied: 2019_predicted_swe_2019-02-19.png\nCopied: 2018_predicted_swe_2018-06-22.png\nCopied: 2017_predicted_swe_2017-11-07.png\nCopied: 2019_predicted_swe_2019-03-17.png\nCopied: 2017_predicted_swe_2017-10-02.png\nCopied: 2017_predicted_swe_2017-11-26.png\nCopied: 2019_predicted_swe_2019-02-26.png\nCopied: 2018_predicted_swe_2018-06-24.png\nCopied: 2019_predicted_swe_2019-01-28.png\nCopied: 2019_predicted_swe_2019-04-23.png\nCopied: 2023_pr_2023-05-17.png\nCopied: 2018_predicted_swe_2018-12-08.png\nCopied: 2018_predicted_swe_2018-01-19.png\nCopied: 2019_predicted_swe_2019-05-14.png\nCopied: 2018_predicted_swe_2018-10-09.png\nCopied: 2018_predicted_swe_2018-06-05.png\nCopied: 2018_predicted_swe_2018-01-27.png\nCopied: 2018_predicted_swe_2018-03-20.png\nCopied: 2018_predicted_swe_2018-10-11.png\nCopied: 2017_predicted_swe_2017-11-19.png\nCopied: 2018_predicted_swe_2018-02-14.png\nCopied: 2018_predicted_swe_2018-10-13.png\nCopied: 2022_predicted_swe_2022-01-16.png\nCopied: 2017_predicted_swe_2017-12-18.png\nCopied: 2019_predicted_swe_2019-05-07.png\nCopied: 2018_predicted_swe_2018-01-10.png\nCopied: 2017_predicted_swe_2017-10-18.png\nCopied: 2018_predicted_swe_2018-01-03.png\nCopied: 2023_predicted_swe_2023-02-12.png\nCopied: 2018_predicted_swe_2018-03-27.png\nCopied: 2019_predicted_swe_2019-06-09.png\nCopied: 2018_predicted_swe_2018-04-24.png\nCopied: 2019_predicted_swe_2019-06-25.png\nCopied: 2017_predicted_swe_2017-11-05.png\nCopied: 2018_predicted_swe_2018-04-28.png\nCopied: 2023_pr_2023-06-15.png\nCopied: 2019_predicted_swe_2019-03-23.png\nCopied: 2019_predicted_swe_2019-06-01.png\nCopied: 2017_predicted_swe_2017-11-21.png\nCopied: 2018_predicted_swe_2018-03-04.png\nCopied: 2017_predicted_swe_2017-10-15.png\nCopied: 2018_predicted_swe_2018-04-01.png\nCopied: 2019_predicted_swe_2019-01-01.png\nCopied: 2018_predicted_swe_2018-10-15.png\nCopied: 2018_predicted_swe_2018-01-09.png\nCopied: 2018_predicted_swe_2018-11-22.png\nCopied: 2022_predicted_swe_2022-04-17.png\nCopied: 2022_predicted_swe_2022-02-28.png\nCopied: 2019_predicted_swe_2019-04-11.png\nCopied: 2018_predicted_swe_2018-04-20.png\nCopied: 2022_pr_2022-06-15.png\nCopied: 2018_predicted_swe_2018-01-08.png\nCopied: 2017_predicted_swe_2017-10-24.png\nCopied: 2018_predicted_swe_2018-04-14.png\nCopied: 2019_predicted_swe_2019-01-18.png\nCopied: 2018_predicted_swe_2018-03-02.png\nCopied: 2019_predicted_swe_2019-02-20.png\nCopied: 2017_predicted_swe_2017-11-25.png\nCopied: 2018_predicted_swe_2018-11-10.png\nCopied: 2019_predicted_swe_2019-05-05.png\nCopied: 2017_predicted_swe_2017-11-29.png\nCopied: 2019_predicted_swe_2019-04-15.png\nCopied: 2019_predicted_swe_2019-01-30.png\nCopied: 2018_predicted_swe_2018-06-18.png\nCopied: 2018_pr_2018-01-01.png\nCopied: 2019_predicted_swe_2019-04-06.png\nCopied: 2018_predicted_swe_2018-12-10.png\nCopied: 2018_predicted_swe_2018-11-02.png\nCopied: 2018_predicted_swe_2018-06-25.png\nCopied: 2018_predicted_swe_2018-01-15.png\nCopied: 2022_predicted_swe_2022-10-15.png\nCopied: 2019_predicted_swe_2019-03-29.png\nCopied: 2018_predicted_swe_2018-03-28.png\nCopied: 2023_predicted_swe_2023-05-18.png\nCopied: 2023_pr_2023-02-11.png\nCopied: 2018_predicted_swe_2018-06-13.png\nCopied: 2018_predicted_swe_2018-12-26.png\nCopied: 2019_predicted_swe_2019-01-11.png\nCopied: 2017_predicted_swe_2017-12-11.png\nCopied: 2018_predicted_swe_2018-03-30.png\nCopied: 2022_predicted_swe_2022-02-22.png\nCopied: 2018_predicted_swe_2018-11-21.png\nCopied: 2018_predicted_swe_2018-05-01.png\nCopied: 2018_predicted_swe_2018-02-17.png\nCopied: 2018_predicted_swe_2018-04-12.png\nCopied: 2018_predicted_swe_2018-11-16.png\nCopied: 2023_predicted_swe_2023-01-18.png\nCopied: 2019_predicted_swe_2019-03-25.png\nCopied: 2017_predicted_swe_2017-11-02.png\nCopied: 2018_predicted_swe_2018-06-20.png\nCopied: 2018_predicted_swe_2018-04-08.png\nCopied: 2017_predicted_swe_2017-10-06.png\nCopied: 2019_predicted_swe_2019-05-20.png\nCopied: 2018_predicted_swe_2018-05-02.png\nCopied: 2019_predicted_swe_2019-06-11.png\nCopied: 2017_predicted_swe_2017-12-14.png\nCopied: 2018_predicted_swe_2018-04-02.png\nCopied: 2019_predicted_swe_2019-04-01.png\nCopied: 2017_predicted_swe_2017-10-20.png\nCopied: 2018_predicted_swe_2018-10-03.png\nCopied: 2019_predicted_swe_2019-03-19.png\nCopied: 2018_predicted_swe_2018-10-10.png\nCopied: 2018_predicted_swe_2018-02-03.png\nCopied: 2018_predicted_swe_2018-04-21.png\nCopied: 2019_predicted_swe_2019-03-30.png\nCopied: importance_summary_plot_2023-09-15.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2017_predicted_swe_2017-10-10.png\nCopied: 2018_predicted_swe_2018-01-29.png\nCopied: 2018_predicted_swe_2018-03-10.png\nCopied: 2018_predicted_swe_2018-02-13.png\nCopied: 2018_predicted_swe_2018-04-13.png\nCopied: 2018_predicted_swe_2018-01-07.png\nCopied: 2019_predicted_swe_2019-04-05.png\nCopied: 2018_predicted_swe_2018-10-27.png\nCopied: 2018_predicted_swe_2018-02-09.png\nCopied: 2019_predicted_swe_2019-06-10.png\nCopied: 2019_predicted_swe_2019-02-24.png\nCopied: 2018_predicted_swe_2018-02-07.png\nCopied: 2019_predicted_swe_2019-06-13.png\nCopied: 2019_predicted_swe_2019-02-22.png\nCopied: 2019_predicted_swe_2019-05-13.png\nCopied: et-model-feature-importance-13.png\nCopied: 2023_predicted_swe_2023-01-19.png\nCopied: 2019_predicted_swe_2019-02-28.png\nCopied: 2017_predicted_swe_2017-12-06.png\nCopied: 2018_predicted_swe_2018-05-14.png\nCopied: 2018_predicted_swe_2018-10-22.png\nCopied: 2019_predicted_swe_2019-04-24.png\nCopied: 2023_predicted_swe_2023-01-20.png\nCopied: 2023_pr_2023-01-19.png\nCopied: 2019_predicted_swe_2019-01-29.png\nCopied: 2017_predicted_swe_2017-12-12.png\nCopied: 2018_predicted_swe_2018-02-12.png\nCopied: 2018_predicted_swe_2018-06-14.png\nCopied: 2018_predicted_swe_2018-11-08.png\nCopied: 2018_predicted_swe_2018-02-23.png\nCopied: 2022_pr_2022-02-28.png\nCopied: 2023_pr_2023-05-18.png\nCopied: 2023_pr_2023-03-15.png\nCopied: 2018_predicted_swe_2018-03-11.png\nCopied: 2019_predicted_swe_2019-04-14.png\nCopied: 2018_predicted_swe_2018-02-08.png\nCopied: 2019_predicted_swe_2019-04-30.png\nCopied: 2018_predicted_swe_2018-02-16.png\nCopied: 2018_predicted_swe_2018-10-26.png\nCopied: 2019_predicted_swe_2019-04-12.png\nCopied: 2019_predicted_swe_2019-05-19.png\nCopied: 2017_predicted_swe_2017-11-04.png\nCopied: 2019_predicted_swe_2019-01-21.png\nCopied: 2019_predicted_swe_2019-02-10.png\nCopied: 2018_predicted_swe_2018-06-19.png\nCopied: 2017_predicted_swe_2017-10-30.png\nCopied: 2018_predicted_swe_2018-03-12.png\nCopied: 2023_pr_2023-07-15.png\nCopied: 2019_predicted_swe_2019-04-09.png\nCopied: 2019_predicted_swe_2019-04-27.png\nCopied: 2017_predicted_swe_2017-12-28.png\nCopied: 2023_pr_2023-09-15.png\nCopied: 2018_predicted_swe_2018-03-23.png\nCopied: 2018_predicted_swe_2018-03-24.png\nCopied: 2019_predicted_swe_2019-03-14.png\nCopied: 2019_predicted_swe_2019-06-05.png\nCopied: 2018_predicted_swe_2018-10-07.png\nCopied: 2019_predicted_swe_2019-03-20.png\nCopied: 2019_predicted_swe_2019-03-31.png\nCopied: 2018_predicted_swe_2018-10-04.png\nCopied: 2018_predicted_swe_2018-04-26.png\nCopied: 2019_predicted_swe_2019-02-02.png\nCopied: 2019_predicted_swe_2019-04-26.png\nCopied: 2018_predicted_swe_2018-04-23.png\nCopied: et-model-feature-importance-26.png\nCopied: 2018_predicted_swe_2018-05-07.png\nCopied: 2019_predicted_swe_2019-03-01.png\nCopied: 2018_predicted_swe_2018-11-05.png\nCopied: 2023_predicted_swe_2023-03-15.png\nCopied: 2017_predicted_swe_2017-10-05.png\nCopied: 2018_predicted_swe_2018-03-07.png\nCopied: 2018_predicted_swe_2018-11-30.png\nCopied: shap_summary_plot_2023-01-20.png\nCopied: 2018_predicted_swe_2018-06-29.png\nCopied: 2017_predicted_swe_2017-11-06.png\nCopied: 2018_predicted_swe_2018-05-19.png\nCopied: 2023_pr_2023-01-20.png\nCopied: 2018_predicted_swe_2018-03-21.png\nCopied: 2018_predicted_swe_2018-05-03.png\nCopied: 2018_predicted_swe_2018-11-06.png\nCopied: 2017_predicted_swe_2017-12-24.png\nCopied: 2019_predicted_swe_2019-06-03.png\nCopied: 2019_predicted_swe_2019-01-25.png\nCopied: 2018_predicted_swe_2018-10-17.png\nCopied: 2018_predicted_swe_2018-10-01.png\nCopied: 2018_predicted_swe_2018-04-10.png\nCopied: importance_summary_plot_2023-05-16.png\nCopied: 2018_predicted_swe_2018-03-25.png\nCopied: 2018_predicted_swe_2018-04-07.png\nCopied: 2019_predicted_swe_2019-03-06.png\nCopied: 2019_predicted_swe_2019-03-11.png\nCopied: 2017_predicted_swe_2017-10-23.png\nCopied: 2019_predicted_swe_2019-03-24.png\nCopied: 2018_predicted_swe_2018-12-15.png\nCopied: 2018_predicted_swe_2018-02-05.png\nCopied: 2018_predicted_swe_2018-03-08.png\nCopied: 2018_predicted_swe_2018-04-18.png\nCopied: 2018_predicted_swe_2018-05-23.png\nCopied: 2018_predicted_swe_2018-05-26.png\nCopied: 2018_predicted_swe_2018-06-06.png\nCopied: 2019_predicted_swe_2019-06-08.png\nCopied: 2017_predicted_swe_2017-12-23.png\nCopied: 2019_predicted_swe_2019-02-14.png\nCopied: 2019_predicted_swe_2019-05-31.png\nCopied: 2019_predicted_swe_2019-06-19.png\nCopied: 2023_pr_2023-01-18.png\nCopied: 2019_predicted_swe_2019-02-08.png\nCopied: 2018_predicted_swe_2018-10-28.png\nCopied: 2019_predicted_swe_2019-05-04.png\nCopied: 2018_predicted_swe_2018-06-27.png\nCopied: 2017_predicted_swe_2017-11-08.png\nCopied: 2019_predicted_swe_2019-05-12.png\nCopied: 2017_predicted_swe_2017-10-29.png\nCopied: 2019_predicted_swe_2019-06-02.png\nCopied: 2017_predicted_swe_2017-11-30.png\nCopied: 2019_predicted_swe_2019-06-30.png\nCopied: 2019_predicted_swe_2019-02-27.png\nCopied: 2019_predicted_swe_2019-03-07.png\nCopied: 2018_predicted_swe_2018-03-31.png\nCopied: 2019_predicted_swe_2019-04-13.png\nCopied: 2018_predicted_swe_2018-02-18.png\nCopied: importance_summary_plot_2023-02-11.png\nCopied: 2023_pr_2023-05-28.png\nCopied: 2018_predicted_swe_2018-02-28.png\nCopied: 2017_predicted_swe_2017-12-29.png\nCopied: 2017_predicted_swe_2017-10-26.png\nCopied: 2018_predicted_swe_2018-11-23.png\nCopied: 2019_predicted_swe_2019-02-17.png\nCopied: 2018_predicted_swe_2018-05-20.png\nCopied: 2018_predicted_swe_2018-10-06.png\nCopied: 2018_predicted_swe_2018-05-29.png\nCopied: 2018_predicted_swe_2018-12-06.png\nCopied: 2019_predicted_swe_2019-05-30.png\nCopied: 2019_predicted_swe_2019-05-29.png\nCopied: importance_summary_plot_2023-03-15.png\nCopied: 2017_predicted_swe_2017-10-14.png\nCopied: 2018_predicted_swe_2018-02-11.png\nCopied: 2019_predicted_swe_2019-06-26.png\nCopied: 2023_predicted_swe_2023-02-11.png\nCopied: 2023_pr_2023-01-15.png\nCopied: 2018_predicted_swe_2018-04-25.png\nCopied: 2017_predicted_swe_2017-11-01.png\nCopied: 2018_predicted_swe_2018-06-23.png\nCopied: 2017_predicted_swe_2017-12-08.png\nCopied: 2018_predicted_swe_2018-01-05.png\nCopied: 2018_predicted_swe_2018-11-13.png\nCopied: 2019_predicted_swe_2019-02-12.png\nCopied: 2019_predicted_swe_2019-05-09.png\nCopied: 2018_predicted_swe_2018-06-10.png\nCopied: 2019_predicted_swe_2019-01-09.png\nCopied: 2019_predicted_swe_2019-01-05.png\nCopied: 2017_predicted_swe_2017-12-02.png\nCopied: 2018_predicted_swe_2018-02-26.png\nCopied: 2017_predicted_swe_2017-12-26.png\nCopied: 2017_predicted_swe_2017-10-11.png\nCopied: 2019_predicted_swe_2019-02-01.png\nCopied: 2018_predicted_swe_2018-06-15.png\nCopied: 2017_predicted_swe_2017-12-13.png\nCopied: 2019_predicted_swe_2019-05-16.png\nCopied: 2018_predicted_swe_2018-12-28.png\nCopied: 2017_predicted_swe_2017-10-09.png\nCopied: 2019_predicted_swe_2019-01-03.png\nCopied: 2018_predicted_swe_2018-04-09.png\nCopied: 2017_predicted_swe_2017-10-13.png\nCopied: 2018_predicted_swe_2018-03-06.png\nCopied: importance_summary_plot_2023-06-15.png\nCopied: 2018_predicted_swe_2018-04-05.png\nCopied: 2022_pr_2022-01-16.png\nCopied: 2019_predicted_swe_2019-01-22.png\nCopied: 2017_predicted_swe_2017-10-22.png\nCopied: et-model-feature-importance-3.png\nCopied: 2018_predicted_swe_2018-06-04.png\nCopied: 2018_predicted_swe_2018-05-05.png\nCopied: 2023_predicted_swe_2023-01-15.png\nCopied: 2017_predicted_swe_2017-11-15.png\nCopied: 2018_predicted_swe_2018-11-04.png\nCopied: 2019_predicted_swe_2019-06-17.png\nCopied: 2018_predicted_swe_2018-05-08.png\nCopied: 2019_predicted_swe_2019-04-21.png\nCopied: 2018_predicted_swe_2018-01-22.png\nCopied: 2019_predicted_swe_2019-01-15.png\nCopied: 2018_predicted_swe_2018-04-17.png\nCopied: 2018_predicted_swe_2018-02-01.png\nCopied: 2018_predicted_swe_2018-05-27.png\nCopied: 2018_predicted_swe_2018-02-22.png\nCopied: 2018_predicted_swe_2018-11-07.png\nCopied: 2019_predicted_swe_2019-06-20.png\nCopied: 2018_predicted_swe_2018-12-09.png\nCopied: 2017_predicted_swe_2017-12-03.png\nCopied: 2019_predicted_swe_2019-06-14.png\nCopied: 2017_predicted_swe_2017-10-19.png\nCopied: 2018_predicted_swe_2018-12-23.png\nCopied: 2017_predicted_swe_2017-10-12.png\nCopied: 2019_predicted_swe_2019-05-11.png\nCopied: 2017_predicted_swe_2017-12-22.png\nCopied: 2017_predicted_swe_2017-11-23.png\nCopied: 2017_predicted_swe_2017-12-25.png\nCopied: importance_summary_plot_2023-07-15.png\nCopied: 2017_predicted_swe_2017-11-24.png\nCopied: 2018_predicted_swe_2018-06-07.png\nCopied: 2019_predicted_swe_2019-03-26.png\nCopied: 2019_predicted_swe_2019-03-04.png\nCopied: 2017_predicted_swe_2017-12-04.png\nCopied: 2019_predicted_swe_2019-05-25.png\nCopied: 2019_predicted_swe_2019-04-28.png\nCopied: 2022_pr_2022-12-29.png\nCopied: 2017_predicted_swe_2017-10-04.png\nCopied: 2017_predicted_swe_2017-12-27.png\nCopied: 2018_predicted_swe_2018-01-13.png\nCopied: 2018_predicted_swe_2018-03-18.png\nCopied: 2019_predicted_swe_2019-01-23.png\nCopied: 2023_predicted_swe_2023-03-02.png\nCopied: 2019_predicted_swe_2019-06-24.png\nCopied: 2022_pr_2022-10-15.png\nCopied: 2018_predicted_swe_2018-01-06.png\nCopied: 2018_predicted_swe_2018-01-25.png\nCopied: 2023_predicted_swe_2023-06-15.png\nCopied: 2018_predicted_swe_2018-05-17.png\nCopied: 2017_predicted_swe_2017-12-19.png\nCopied: 2018_predicted_swe_2018-02-21.png\nCopied: 2023_pr_2023-09-16.png\nCopied: 2018_predicted_swe_2018-02-27.png\nCopied: 2019_predicted_swe_2019-04-03.png\nCopied: 2018_predicted_swe_2018-02-04.png\nCopied: 2019_predicted_swe_2019-06-06.png\nCopied: 2019_predicted_swe_2019-01-10.png\nCopied: 2019_predicted_swe_2019-01-26.png\nCopied: 2022_pr_2022-02-22.png\nCopied: 2018_predicted_swe_2018-10-31.png\nCopied: 2018_predicted_swe_2018-05-22.png\nCopied: 2019_predicted_swe_2019-03-02.png\nCopied: 2018_predicted_swe_2018-12-20.png\nCopied: 2018_predicted_swe_2018-05-06.png\nCopied: 2018_predicted_swe_2018-11-29.png\nCopied: 2018_predicted_swe_2018-10-29.png\nCopied: 2019_predicted_swe_2019-05-21.png\nCopied: 2018_predicted_swe_2018-10-12.png\nCopied: 2018_predicted_swe_2018-11-09.png\nCopied: 2019_predicted_swe_2019-03-15.png\nCopied: 2019_predicted_swe_2019-05-27.png\nCopied: 2022_pr_2022-10-16.png\nCopied: 2018_predicted_swe_2018-04-04.png\nCopied: 2018_predicted_swe_2018-03-17.png\nCopied: 2022_pr_2022-04-17.png\nCopied: 2022_predicted_swe_2022-06-15.png\nCopied: 2017_predicted_swe_2017-12-05.png\nCopied: 2018_predicted_swe_2018-01-30.png\nCopied: 2018_predicted_swe_2018-12-30.png\nCopied: 2018_predicted_swe_2018-01-28.png\nCopied: 2019_predicted_swe_2019-01-20.png\nCopied: 2018_predicted_swe_2018-06-01.png\nCopied: 2017_predicted_swe_2017-11-10.png\nCopied: 2019_predicted_swe_2019-06-23.png\nCopied: 2018_predicted_swe_2018-04-11.png\nCopied: 2018_predicted_swe_2018-04-15.png\nCopied: 2018_predicted_swe_2018-04-06.png\nCopied: 2019_predicted_swe_2019-03-10.png\nCopied: 2018_predicted_swe_2018-04-03.png\nCopied: et-model-feature-importance-6.png\nCopied: 2018_predicted_swe_2018-10-21.png\nCopied: importance_summary_plot_2023-01-20.png\nCopied: 2018_predicted_swe_2018-03-13.png\nCopied: 2023_predicted_swe_2023-03-16.png\nCopied: 2018_predicted_swe_2018-12-11.png\nCopied: 2017_predicted_swe_2017-11-13.png\nCopied: importance_summary_plot_2023-05-17.png\nCopied: 2019_predicted_swe_2019-01-27.png\nCopied: 2017_predicted_swe_2017-12-20.png\nCopied: 2019_predicted_swe_2019-03-22.png\nCopied: 2018_predicted_swe_2018-10-05.png\nCopied: 2018_predicted_swe_2018-06-03.png\nCopied: 2018_predicted_swe_2018-04-27.png\nCopied: 2017_predicted_swe_2017-10-21.png\nCopied: 2017_predicted_swe_2017-10-27.png\nCopied: 2023_predicted_swe_2023-07-15.png\nCopied: 2023_predicted_swe_2023-09-16.png\nCopied: 2019_predicted_swe_2019-05-08.png\nCopied: 2023_predicted_swe_2023-02-10.png\nCopied: 2018_predicted_swe_2018-01-14.png\nCopied: 2019_predicted_swe_2019-04-19.png\nCopied: 2018_predicted_swe_2018-05-18.png\nCopied: 2018_predicted_swe_2018-05-21.png\nCopied: 2017_predicted_swe_2017-11-22.png\nCopied: 2018_predicted_swe_2018-12-13.png\nCopied: 2018_predicted_swe_2018-12-14.png\nCopied: 2017_predicted_swe_2017-10-01.png\nCopied: 2019_predicted_swe_2019-04-10.png\nCopied: 2017_predicted_swe_2017-11-17.png\nCopied: 2017_predicted_swe_2017-11-18.png\nCopied: 2018_predicted_swe_2018-03-05.png\nCopied: 2019_predicted_swe_2019-05-28.png\nCopied: 2018_predicted_swe_2018-12-27.png\nCopied: 2018_predicted_swe_2018-12-31.png\nCopied: 2018_predicted_swe_2018-10-24.png\nCopied: 2019_predicted_swe_2019-03-08.png\nCopied: 2018_predicted_swe_2018-03-16.png\nCopied: 2018_predicted_swe_2018-05-09.png\nCopied: 2019_predicted_swe_2019-01-02.png\nCopied: 2018_predicted_swe_2018-12-02.png\nCopied: 2019_predicted_swe_2019-02-25.png\nCopied: 2018_predicted_swe_2018-11-12.png\nCopied: 2017_predicted_swe_2017-10-28.png\nCopied: 2019_predicted_swe_2019-02-06.png\nCopied: 2019_predicted_swe_2019-03-09.png\nCopied: 2017_predicted_swe_2017-12-07.png\nCopied: 2019_predicted_swe_2019-02-07.png\nCopied: 2019_predicted_swe_2019-05-10.png\nCopied: 2018_predicted_swe_2018-03-29.png\nCopied: 2018_predicted_swe_2018-06-17.png\nCopied: 2019_predicted_swe_2019-06-12.png\nCopied: 2018_predicted_swe_2018-01-24.png\nCopied: 2018_predicted_swe_2018-05-30.png\nCopied: 2018_predicted_swe_2018-03-22.png\nCopied: 2019_predicted_swe_2019-02-05.png\nCopied: 2018_predicted_swe_2018-03-15.png\nCopied: 2019_predicted_swe_2019-03-03.png\nCopied: 2018_predicted_swe_2018-12-24.png\nCopied: 2018_predicted_swe_2018-03-01.png\nCopied: 2018_predicted_swe_2018-03-14.png\nCopied: 2018_predicted_swe_2018-02-10.png\nCopied: 2019_predicted_swe_2019-03-28.png\nCopied: 2018_predicted_swe_2018-11-20.png\nCopied: importance_summary_plot_2023-09-16.png\nCopied: 2017_predicted_swe_2017-11-27.png\nCopied: 2018_predicted_swe_2018-05-28.png\nCopied: 2018_predicted_swe_2018-12-17.png\nCopied: 2022_pr_2022-03-15.png\nCopied: 2017_predicted_swe_2017-10-08.png\nCopied: 2018_predicted_swe_2018-04-29.png\nCopied: 2023_pr_2023-05-16.png\nCopied: 2017_predicted_swe_2017-10-16.png\nCopied: 2018_predicted_swe_2018-12-25.png\nCopied: 2017_predicted_swe_2017-12-17.png\nCopied: 2023_predicted_swe_2023-05-29.png\nCopied: 2018_predicted_swe_2018-11-27.png\nCopied: 2018_predicted_swe_2018-02-06.png\nCopied: 2019_predicted_swe_2019-05-03.png\nCopied: 2018_predicted_swe_2018-11-24.png\nCopied: 2018_predicted_swe_2018-05-16.png\nCopied: 2019_predicted_swe_2019-02-16.png\nCopied: 2018_predicted_swe_2018-01-21.png\nCopied: 2018_predicted_swe_2018-01-17.png\nCopied: 2018_predicted_swe_2018-12-21.png\nCopied: 2018_predicted_swe_2018-04-22.png\nCopied: 2018_predicted_swe_2018-11-25.png\nCopied: 2023_pr_2023-05-25.png\nCopied: 2019_predicted_swe_2019-04-04.png\nCopied: 2018_predicted_swe_2018-06-26.png\nCopied: 2023_pr_2023-05-29.png\nCopied: 2022_predicted_swe_2022-10-16.png\nCopied: 2018_predicted_swe_2018-11-15.png\nCopied: 2018_predicted_swe_2018-05-31.png\nCopied: 2018_predicted_swe_2018-11-17.png\nCopied: 2017_predicted_swe_2017-10-07.png\nCopied: 2018_predicted_swe_2018-01-18.png\nCopied: 2017_predicted_swe_2017-11-16.png\nCopied: 2018_predicted_swe_2018-10-14.png\nCopied: 2018_predicted_swe_2018-01-20.png\nCopied: 2018_predicted_swe_2018-12-03.png\nCopied: 2018_predicted_swe_2018-10-18.png\nCopied: 2019_predicted_swe_2019-05-26.png\nCopied: 2019_predicted_swe_2019-01-07.png\nCopied: 2022_pr_2022-01-17.png\nCopied: 2019_predicted_swe_2019-05-23.png\nCopied: 2018_predicted_swe_2018-12-19.png\nCopied: 2018_predicted_swe_2018-03-09.png\nCopied: 2023_predicted_swe_2023-05-28.png\nCopied: 2018_predicted_swe_2018-10-23.png\nCopied: 2018_predicted_swe_2018-11-01.png\nCopied: 2018_predicted_swe_2018-02-25.png\nCopied: 2019_predicted_swe_2019-01-19.png\nCopied: 2018_predicted_swe_2018-02-02.png\nCopied: 2019_predicted_swe_2019-06-27.png\nCopied: 2018_predicted_swe_2018-12-16.png\nCopied: 2017_predicted_swe_2017-12-15.png\nCopied: 2023_predicted_swe_2023-09-15.png\nCopied: 2018_predicted_swe_2018-05-13.png\nCopied: 2022_pr_2022-12-30.png\n",
  "history_begin_time" : 1699459449697,
  "history_end_time" : 1699459453528,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "fjc8kvj0j0z",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698762678699,
  "history_end_time" : 1698762678699,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "yw60rhmoop6",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698762637979,
  "history_end_time" : 1698762637979,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "niuw12m3m5g",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-10-25\ntest start date:  2018-01-01\ntest end date:  2023-10-25\n/home/ubuntu\nmove the plots and the results into the http folder\nFolder '/home/ubuntu/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: 2023_pr_2023-03-02.png\nCopied: 2023_predicted_swe_2023-05-28.png\nCopied: 2023_pr_2023-05-26.png\nCopied: 2023_predicted_swe_2023-05-25.png\nCopied: 2023_predicted_swe_2023-03-02.png\nCopied: 2018_predicted_swe_2018-01-01.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2023_pr_2023-05-25.png\nCopied: 2023_pr_2023-05-29.png\nCopied: 2023_predicted_swe_2023-05-26.png\nCopied: 2023_pr_2023-05-28.png\nCopied: 2023_predicted_swe_2023-05-29.png\nCopied: 2018_pr_2018-01-01.png\n",
  "history_begin_time" : 1698276653034,
  "history_end_time" : 1698276653606,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "a55pvhuc9d2",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-10-25\ntest start date:  2023-03-02\ntest end date:  2023-10-25\n/home/ubuntu\nmove the plots and the results into the http folder\nFolder '/home/ubuntu/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: 2023_pr_2023-03-02.png\nCopied: 2023_predicted_swe_2023-05-28.png\nCopied: 2023_pr_2023-05-26.png\nCopied: 2023_predicted_swe_2023-05-25.png\nCopied: 2023_predicted_swe_2023-03-02.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2023_pr_2023-05-25.png\nCopied: 2023_pr_2023-05-29.png\nCopied: 2023_predicted_swe_2023-05-26.png\nCopied: 2023_pr_2023-05-28.png\nCopied: 2023_predicted_swe_2023-05-29.png\n",
  "history_begin_time" : 1698252402342,
  "history_end_time" : 1698252403168,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "kx5wloe73vo",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-10-25\ntest start date:  2023-05-29\ntest end date:  2023-10-25\n/home/ubuntu\nmove the plots and the results into the http folder\nFolder '/home/ubuntu/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: 2023_predicted_swe_2023-05-28.png\nCopied: 2023_pr_2023-05-26.png\nCopied: 2023_predicted_swe_2023-05-25.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2023_pr_2023-05-25.png\nCopied: 2023_pr_2023-05-29.png\nCopied: 2023_predicted_swe_2023-05-26.png\nCopied: 2023_pr_2023-05-28.png\nCopied: 2023_predicted_swe_2023-05-29.png\n",
  "history_begin_time" : 1698251453158,
  "history_end_time" : 1698251453981,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "v0m3pddj94p",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-10-25\ntest start date:  2023-05-26\ntest end date:  2023-10-25\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: importance_summary_plot_2023-02-12.png\nCopied: 2023_predicted_swe_2023-05-16.png\nCopied: 2022_predicted_swe_2022-03-15.png\nCopied: 2022_predicted_swe_2022-12-29.png\nCopied: partial_dependence_summary_plot_2023-01-20.png\nCopied: importance_summary_plot_2023-02-10.png\nCopied: 2023_pr_2023-02-10.png\nCopied: 2023_predicted_swe_2023-05-26.png\nCopied: 2023_pr_2023-02-12.png\nCopied: 2023_pr_2023-03-16.png\nCopied: importance_summary_plot_latest_model.png\nCopied: 2023_predicted_swe_2023-05-17.png\nCopied: importance_summary_plot_2023-03-16.png\nCopied: 2022_predicted_swe_2022-01-17.png\nCopied: 2022_predicted_swe_2022-12-30.png\nCopied: 2023_pr_2023-05-26.png\nCopied: 2023_pr_2023-05-17.png\nCopied: 2022_predicted_swe_2022-01-16.png\nCopied: 2023_predicted_swe_2023-02-12.png\nCopied: 2023_pr_2023-06-15.png\nCopied: 2022_predicted_swe_2022-04-17.png\nCopied: 2022_predicted_swe_2022-02-28.png\nCopied: 2022_pr_2022-06-15.png\nCopied: 2022_predicted_swe_2022-10-15.png\nCopied: 2023_predicted_swe_2023-05-18.png\nCopied: 2023_pr_2023-02-11.png\nCopied: 2022_predicted_swe_2022-02-22.png\nCopied: 2023_predicted_swe_2023-01-18.png\nCopied: importance_summary_plot_2023-09-15.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2023_predicted_swe_2023-01-19.png\nCopied: 2023_predicted_swe_2023-01-20.png\nCopied: 2023_pr_2023-01-19.png\nCopied: 2022_pr_2022-02-28.png\nCopied: 2023_pr_2023-05-18.png\nCopied: 2023_pr_2023-03-15.png\nCopied: 2023_pr_2023-07-15.png\nCopied: 2023_pr_2023-09-15.png\nCopied: 2023_predicted_swe_2023-03-15.png\nCopied: shap_summary_plot_2023-01-20.png\nCopied: 2023_pr_2023-01-20.png\nCopied: importance_summary_plot_2023-05-16.png\nCopied: 2023_pr_2023-01-18.png\nCopied: importance_summary_plot_2023-02-11.png\nCopied: importance_summary_plot_2023-03-15.png\nCopied: 2023_predicted_swe_2023-02-11.png\nCopied: 2023_pr_2023-01-15.png\nCopied: importance_summary_plot_2023-06-15.png\nCopied: 2022_pr_2022-01-16.png\nCopied: 2023_predicted_swe_2023-01-15.png\nCopied: importance_summary_plot_2023-07-15.png\nCopied: 2022_pr_2022-12-29.png\nCopied: 2022_pr_2022-10-15.png\nCopied: 2023_predicted_swe_2023-06-15.png\nCopied: 2023_pr_2023-09-16.png\nCopied: 2022_pr_2022-02-22.png\nCopied: 2022_pr_2022-10-16.png\nCopied: 2022_pr_2022-04-17.png\nCopied: 2022_predicted_swe_2022-06-15.png\nCopied: importance_summary_plot_2023-01-20.png\nCopied: 2023_predicted_swe_2023-03-16.png\nCopied: importance_summary_plot_2023-05-17.png\nCopied: 2023_predicted_swe_2023-07-15.png\nCopied: 2023_predicted_swe_2023-09-16.png\nCopied: 2023_predicted_swe_2023-02-10.png\nCopied: importance_summary_plot_2023-09-16.png\nCopied: 2022_pr_2022-03-15.png\nCopied: 2023_pr_2023-05-16.png\nCopied: 2022_predicted_swe_2022-10-16.png\nCopied: 2022_pr_2022-01-17.png\nCopied: 2023_predicted_swe_2023-09-15.png\nCopied: 2022_pr_2022-12-30.png\n",
  "history_begin_time" : 1698228390988,
  "history_end_time" : 1698228393068,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "9oi2grtvcym",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-10-25\ntest start date:  2023-05-29\ntest end date:  2023-10-25\n/home/ubuntu\nmove the plots and the results into the http folder\nFolder '/home/ubuntu/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: 2023_predicted_swe_2023-05-28.png\nCopied: 2023_pr_2023-05-26.png\nCopied: 2023_predicted_swe_2023-05-25.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2023_pr_2023-05-25.png\nCopied: 2023_pr_2023-05-29.png\nCopied: 2023_predicted_swe_2023-05-26.png\nCopied: 2023_pr_2023-05-28.png\nCopied: 2023_predicted_swe_2023-05-29.png\n",
  "history_begin_time" : 1698227961133,
  "history_end_time" : 1698227961953,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "7RXRsw7rBcIH",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-10-25\ntest start date:  2023-05-29\ntest end date:  2023-10-25\n/home/ubuntu\nmove the plots and the results into the http folder\nFolder '/home/ubuntu/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: 2023_predicted_swe_2023-05-28.png\nCopied: 2023_pr_2023-05-26.png\nCopied: 2023_predicted_swe_2023-05-25.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2023_pr_2023-05-25.png\nCopied: 2023_pr_2023-05-29.png\nCopied: 2023_predicted_swe_2023-05-26.png\nCopied: 2023_pr_2023-05-28.png\nCopied: 2023_predicted_swe_2023-05-29.png\n",
  "history_begin_time" : 1698206976485,
  "history_end_time" : 1698206976989,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "kdimda4tqyo",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-10-24\ntest start date:  2023-05-29\ntest end date:  2023-10-24\n/home/ubuntu\nmove the plots and the results into the http folder\nFolder '/home/ubuntu/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: 2023_predicted_swe_2023-05-28.png\nCopied: 2023_pr_2023-05-26.png\nCopied: 2023_predicted_swe_2023-05-25.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2023_pr_2023-05-25.png\nCopied: 2023_pr_2023-05-29.png\nCopied: 2023_predicted_swe_2023-05-26.png\nCopied: 2023_pr_2023-05-28.png\n",
  "history_begin_time" : 1698163879667,
  "history_end_time" : 1698163880553,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "99bfk2zt8ww",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-10-24\ntest start date:  2023-05-28\ntest end date:  2023-10-24\n/home/ubuntu\nmove the plots and the results into the http folder\nFolder '/home/ubuntu/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: 2023_predicted_swe_2023-05-28.png\nCopied: 2023_pr_2023-05-26.png\nCopied: 2023_predicted_swe_2023-05-25.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2023_pr_2023-05-25.png\nCopied: 2023_predicted_swe_2023-05-26.png\nCopied: 2023_pr_2023-05-28.png\n",
  "history_begin_time" : 1698163590278,
  "history_end_time" : 1698163591160,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "gb44x27j5ye",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-10-24\ntest start date:  2023-05-26\ntest end date:  2023-10-24\n/home/ubuntu\nmove the plots and the results into the http folder\nFolder '/home/ubuntu/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: 2023_pr_2023-05-26.png\nCopied: 2023_predicted_swe_2023-05-25.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2023_pr_2023-05-25.png\nCopied: 2023_predicted_swe_2023-05-26.png\n",
  "history_begin_time" : 1698163267224,
  "history_end_time" : 1698163267749,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "3mjEqijHu1uC",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-10-24\ntest start date:  2023-05-25\ntest end date:  2023-10-24\n/home/ubuntu\nmove the plots and the results into the http folder\nFolder '/home/ubuntu/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: 2023_predicted_swe_2023-05-25.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2023_pr_2023-05-25.png\n",
  "history_begin_time" : 1698162984909,
  "history_end_time" : 1698162985439,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "7mmzGyu3RqbU",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-10-24\ntest start date:  2023-05-25\ntest end date:  2023-10-24\n/home/ubuntu\nmove the plots and the results into the http folder\nTraceback (most recent call last):\n  File \"/home/ubuntu/anaconda3/lib/python3.11/site-packages/setuptools/_distutils/dir_util.py\", line 75, in mkpath\n    os.mkdir(head, mode)\nPermissionError: [Errno 13] Permission denied: '/var/www'\nDuring handling of the above exception, another exception occurred:\nTraceback (most recent call last):\n  File \"/home/ubuntu/gw-workspace/7mmzGyu3RqbU/deploy_images_to_website.py\", line 13, in <module>\n    distutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n  File \"/home/ubuntu/anaconda3/lib/python3.11/site-packages/setuptools/_distutils/dir_util.py\", line 151, in copy_tree\n    mkpath(dst, verbose=verbose)\n  File \"/home/ubuntu/anaconda3/lib/python3.11/site-packages/setuptools/_distutils/dir_util.py\", line 78, in mkpath\n    raise DistutilsFileError(\ndistutils.errors.DistutilsFileError: could not create '/var/www': Permission denied\n",
  "history_begin_time" : 1698162801922,
  "history_end_time" : 1698162802470,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "m01t2f3tg7f",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-10-24\ntest start date:  2023-05-26\ntest end date:  2023-10-24\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: importance_summary_plot_2023-02-12.png\nCopied: 2023_predicted_swe_2023-05-16.png\nCopied: 2022_predicted_swe_2022-03-15.png\nCopied: 2022_predicted_swe_2022-12-29.png\nCopied: partial_dependence_summary_plot_2023-01-20.png\nCopied: importance_summary_plot_2023-02-10.png\nCopied: 2023_pr_2023-02-10.png\nCopied: 2023_predicted_swe_2023-05-26.png\nCopied: 2023_pr_2023-02-12.png\nCopied: 2023_pr_2023-03-16.png\nCopied: importance_summary_plot_latest_model.png\nCopied: 2023_predicted_swe_2023-05-17.png\nCopied: importance_summary_plot_2023-03-16.png\nCopied: 2022_predicted_swe_2022-01-17.png\nCopied: 2022_predicted_swe_2022-12-30.png\nCopied: 2023_pr_2023-05-26.png\nCopied: 2023_pr_2023-05-17.png\nCopied: 2022_predicted_swe_2022-01-16.png\nCopied: 2023_predicted_swe_2023-02-12.png\nCopied: 2023_pr_2023-06-15.png\nCopied: 2022_predicted_swe_2022-04-17.png\nCopied: 2022_predicted_swe_2022-02-28.png\nCopied: 2022_pr_2022-06-15.png\nCopied: 2022_predicted_swe_2022-10-15.png\nCopied: 2023_predicted_swe_2023-05-18.png\nCopied: 2023_pr_2023-02-11.png\nCopied: 2022_predicted_swe_2022-02-22.png\nCopied: 2023_predicted_swe_2023-01-18.png\nCopied: importance_summary_plot_2023-09-15.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2023_predicted_swe_2023-01-19.png\nCopied: 2023_predicted_swe_2023-01-20.png\nCopied: 2023_pr_2023-01-19.png\nCopied: 2022_pr_2022-02-28.png\nCopied: 2023_pr_2023-05-18.png\nCopied: 2023_pr_2023-03-15.png\nCopied: 2023_pr_2023-07-15.png\nCopied: 2023_pr_2023-09-15.png\nCopied: 2023_predicted_swe_2023-03-15.png\nCopied: shap_summary_plot_2023-01-20.png\nCopied: 2023_pr_2023-01-20.png\nCopied: importance_summary_plot_2023-05-16.png\nCopied: 2023_pr_2023-01-18.png\nCopied: importance_summary_plot_2023-02-11.png\nCopied: importance_summary_plot_2023-03-15.png\nCopied: 2023_predicted_swe_2023-02-11.png\nCopied: 2023_pr_2023-01-15.png\nCopied: importance_summary_plot_2023-06-15.png\nCopied: 2022_pr_2022-01-16.png\nCopied: 2023_predicted_swe_2023-01-15.png\nCopied: importance_summary_plot_2023-07-15.png\nCopied: 2022_pr_2022-12-29.png\nCopied: 2022_pr_2022-10-15.png\nCopied: 2023_predicted_swe_2023-06-15.png\nCopied: 2023_pr_2023-09-16.png\nCopied: 2022_pr_2022-02-22.png\nCopied: 2022_pr_2022-10-16.png\nCopied: 2022_pr_2022-04-17.png\nCopied: 2022_predicted_swe_2022-06-15.png\nCopied: importance_summary_plot_2023-01-20.png\nCopied: 2023_predicted_swe_2023-03-16.png\nCopied: importance_summary_plot_2023-05-17.png\nCopied: 2023_predicted_swe_2023-07-15.png\nCopied: 2023_predicted_swe_2023-09-16.png\nCopied: 2023_predicted_swe_2023-02-10.png\nCopied: importance_summary_plot_2023-09-16.png\nCopied: 2022_pr_2022-03-15.png\nCopied: 2023_pr_2023-05-16.png\nCopied: 2022_predicted_swe_2022-10-16.png\nCopied: 2022_pr_2022-01-17.png\nCopied: 2023_predicted_swe_2023-09-15.png\nCopied: 2022_pr_2022-12-30.png\n",
  "history_begin_time" : 1698161185984,
  "history_end_time" : 1698161187644,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "t2vb6efjo4h",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-10-24\ntest start date:  2023-05-25\ntest end date:  2023-10-24\n/home/ubuntu\nmove the plots and the results into the http folder\nTraceback (most recent call last):\n  File \"/home/ubuntu/anaconda3/lib/python3.11/site-packages/setuptools/_distutils/dir_util.py\", line 75, in mkpath\n    os.mkdir(head, mode)\nPermissionError: [Errno 13] Permission denied: '/var/www'\nDuring handling of the above exception, another exception occurred:\nTraceback (most recent call last):\n  File \"/home/ubuntu/gw-workspace/t2vb6efjo4h/deploy_images_to_website.py\", line 13, in <module>\n    distutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n  File \"/home/ubuntu/anaconda3/lib/python3.11/site-packages/setuptools/_distutils/dir_util.py\", line 151, in copy_tree\n    mkpath(dst, verbose=verbose)\n  File \"/home/ubuntu/anaconda3/lib/python3.11/site-packages/setuptools/_distutils/dir_util.py\", line 78, in mkpath\n    raise DistutilsFileError(\ndistutils.errors.DistutilsFileError: could not create '/var/www': Permission denied\n",
  "history_begin_time" : 1698157869438,
  "history_end_time" : 1698157870312,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "mx4ob4shno1",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-10-24\ntest start date:  2023-05-17\ntest end date:  2023-10-24\n/home/ubuntu\nmove the plots and the results into the http folder\nTraceback (most recent call last):\n  File \"/home/ubuntu/gw-workspace/mx4ob4shno1/deploy_images_to_website.py\", line 13, in <module>\n    distutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n  File \"/home/ubuntu/anaconda3/lib/python3.11/site-packages/setuptools/_distutils/dir_util.py\", line 139, in copy_tree\n    raise DistutilsFileError(\"cannot copy tree '%s': not a directory\" % src)\ndistutils.errors.DistutilsFileError: cannot copy tree '/home/chetana/gridmet_test_run/var_comparison/': not a directory\n",
  "history_begin_time" : 1698152117749,
  "history_end_time" : 1698152118280,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "je0rq7qyvii",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-10-23\ntest start date:  2023-05-18\ntest end date:  2023-10-23\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: importance_summary_plot_2023-02-12.png\nCopied: 2023_predicted_swe_2023-05-16.png\nCopied: 2022_predicted_swe_2022-03-15.png\nCopied: 2022_predicted_swe_2022-12-29.png\nCopied: partial_dependence_summary_plot_2023-01-20.png\nCopied: importance_summary_plot_2023-02-10.png\nCopied: 2023_pr_2023-02-10.png\nCopied: 2023_pr_2023-02-12.png\nCopied: 2023_pr_2023-03-16.png\nCopied: importance_summary_plot_latest_model.png\nCopied: 2023_predicted_swe_2023-05-17.png\nCopied: importance_summary_plot_2023-03-16.png\nCopied: 2022_predicted_swe_2022-01-17.png\nCopied: 2022_predicted_swe_2022-12-30.png\nCopied: 2023_pr_2023-05-17.png\nCopied: 2022_predicted_swe_2022-01-16.png\nCopied: 2023_predicted_swe_2023-02-12.png\nCopied: 2023_pr_2023-06-15.png\nCopied: 2022_predicted_swe_2022-04-17.png\nCopied: 2022_predicted_swe_2022-02-28.png\nCopied: 2022_pr_2022-06-15.png\nCopied: 2022_predicted_swe_2022-10-15.png\nCopied: 2023_predicted_swe_2023-05-18.png\nCopied: 2023_pr_2023-02-11.png\nCopied: 2022_predicted_swe_2022-02-22.png\nCopied: 2023_predicted_swe_2023-01-18.png\nCopied: importance_summary_plot_2023-09-15.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2023_predicted_swe_2023-01-19.png\nCopied: 2023_predicted_swe_2023-01-20.png\nCopied: 2023_pr_2023-01-19.png\nCopied: 2022_pr_2022-02-28.png\nCopied: 2023_pr_2023-05-18.png\nCopied: 2023_pr_2023-03-15.png\nCopied: 2023_pr_2023-07-15.png\nCopied: 2023_pr_2023-09-15.png\nCopied: 2023_predicted_swe_2023-03-15.png\nCopied: shap_summary_plot_2023-01-20.png\nCopied: 2023_pr_2023-01-20.png\nCopied: importance_summary_plot_2023-05-16.png\nCopied: 2023_pr_2023-01-18.png\nCopied: importance_summary_plot_2023-02-11.png\nCopied: importance_summary_plot_2023-03-15.png\nCopied: 2023_predicted_swe_2023-02-11.png\nCopied: 2023_pr_2023-01-15.png\nCopied: importance_summary_plot_2023-06-15.png\nCopied: 2022_pr_2022-01-16.png\nCopied: 2023_predicted_swe_2023-01-15.png\nCopied: importance_summary_plot_2023-07-15.png\nCopied: 2022_pr_2022-12-29.png\nCopied: 2022_pr_2022-10-15.png\nCopied: 2023_predicted_swe_2023-06-15.png\nCopied: 2023_pr_2023-09-16.png\nCopied: 2022_pr_2022-02-22.png\nCopied: 2022_pr_2022-10-16.png\nCopied: 2022_pr_2022-04-17.png\nCopied: 2022_predicted_swe_2022-06-15.png\nCopied: importance_summary_plot_2023-01-20.png\nCopied: 2023_predicted_swe_2023-03-16.png\nCopied: importance_summary_plot_2023-05-17.png\nCopied: 2023_predicted_swe_2023-07-15.png\nCopied: 2023_predicted_swe_2023-09-16.png\nCopied: 2023_predicted_swe_2023-02-10.png\nCopied: importance_summary_plot_2023-09-16.png\nCopied: 2022_pr_2022-03-15.png\nCopied: 2023_pr_2023-05-16.png\nCopied: 2022_predicted_swe_2022-10-16.png\nCopied: 2022_pr_2022-01-17.png\nCopied: 2023_predicted_swe_2023-09-15.png\nCopied: 2022_pr_2022-12-30.png\n",
  "history_begin_time" : 1698095684911,
  "history_end_time" : 1698095686542,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "4ETL7mO7zAN0",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-10-23\ntest start date:  2023-05-18\ntest end date:  2023-10-23\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: importance_summary_plot_2023-02-12.png\nCopied: 2023_predicted_swe_2023-05-16.png\nCopied: 2022_predicted_swe_2022-03-15.png\nCopied: 2022_predicted_swe_2022-12-29.png\nCopied: partial_dependence_summary_plot_2023-01-20.png\nCopied: importance_summary_plot_2023-02-10.png\nCopied: 2023_pr_2023-02-10.png\nCopied: 2023_pr_2023-02-12.png\nCopied: 2023_pr_2023-03-16.png\nCopied: importance_summary_plot_latest_model.png\nCopied: 2023_predicted_swe_2023-05-17.png\nCopied: importance_summary_plot_2023-03-16.png\nCopied: 2022_predicted_swe_2022-01-17.png\nCopied: 2022_predicted_swe_2022-12-30.png\nCopied: 2023_pr_2023-05-17.png\nCopied: 2022_predicted_swe_2022-01-16.png\nCopied: 2023_predicted_swe_2023-02-12.png\nCopied: 2023_pr_2023-06-15.png\nCopied: 2022_predicted_swe_2022-04-17.png\nCopied: 2022_predicted_swe_2022-02-28.png\nCopied: 2022_pr_2022-06-15.png\nCopied: 2022_predicted_swe_2022-10-15.png\nCopied: 2023_predicted_swe_2023-05-18.png\nCopied: 2023_pr_2023-02-11.png\nCopied: 2022_predicted_swe_2022-02-22.png\nCopied: 2023_predicted_swe_2023-01-18.png\nCopied: importance_summary_plot_2023-09-15.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2023_predicted_swe_2023-01-19.png\nCopied: 2023_predicted_swe_2023-01-20.png\nCopied: 2023_pr_2023-01-19.png\nCopied: 2022_pr_2022-02-28.png\nCopied: 2023_pr_2023-05-18.png\nCopied: 2023_pr_2023-03-15.png\nCopied: 2023_pr_2023-07-15.png\nCopied: 2023_pr_2023-09-15.png\nCopied: 2023_predicted_swe_2023-03-15.png\nCopied: shap_summary_plot_2023-01-20.png\nCopied: 2023_pr_2023-01-20.png\nCopied: importance_summary_plot_2023-05-16.png\nCopied: 2023_pr_2023-01-18.png\nCopied: importance_summary_plot_2023-02-11.png\nCopied: importance_summary_plot_2023-03-15.png\nCopied: 2023_predicted_swe_2023-02-11.png\nCopied: 2023_pr_2023-01-15.png\nCopied: importance_summary_plot_2023-06-15.png\nCopied: 2022_pr_2022-01-16.png\nCopied: 2023_predicted_swe_2023-01-15.png\nCopied: importance_summary_plot_2023-07-15.png\nCopied: 2022_pr_2022-12-29.png\nCopied: 2022_pr_2022-10-15.png\nCopied: 2023_predicted_swe_2023-06-15.png\nCopied: 2023_pr_2023-09-16.png\nCopied: 2022_pr_2022-02-22.png\nCopied: 2022_pr_2022-10-16.png\nCopied: 2022_pr_2022-04-17.png\nCopied: 2022_predicted_swe_2022-06-15.png\nCopied: importance_summary_plot_2023-01-20.png\nCopied: 2023_predicted_swe_2023-03-16.png\nCopied: importance_summary_plot_2023-05-17.png\nCopied: 2023_predicted_swe_2023-07-15.png\nCopied: 2023_predicted_swe_2023-09-16.png\nCopied: 2023_predicted_swe_2023-02-10.png\nCopied: importance_summary_plot_2023-09-16.png\nCopied: 2022_pr_2022-03-15.png\nCopied: 2023_pr_2023-05-16.png\nCopied: 2022_predicted_swe_2022-10-16.png\nCopied: 2022_pr_2022-01-17.png\nCopied: 2023_predicted_swe_2023-09-15.png\nCopied: 2022_pr_2022-12-30.png\n",
  "history_begin_time" : 1698090827678,
  "history_end_time" : 1698090828634,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "she9pkfom8n",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-10-23\ntest start date:  2023-05-18\ntest end date:  2023-10-23\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: importance_summary_plot_2023-02-12.png\nCopied: 2023_predicted_swe_2023-05-16.png\nCopied: 2022_predicted_swe_2022-03-15.png\nCopied: 2022_predicted_swe_2022-12-29.png\nCopied: partial_dependence_summary_plot_2023-01-20.png\nCopied: importance_summary_plot_2023-02-10.png\nCopied: 2023_pr_2023-02-10.png\nCopied: 2023_pr_2023-02-12.png\nCopied: 2023_pr_2023-03-16.png\nCopied: importance_summary_plot_latest_model.png\nCopied: 2023_predicted_swe_2023-05-17.png\nCopied: importance_summary_plot_2023-03-16.png\nCopied: 2022_predicted_swe_2022-01-17.png\nCopied: 2022_predicted_swe_2022-12-30.png\nCopied: 2023_pr_2023-05-17.png\nCopied: 2022_predicted_swe_2022-01-16.png\nCopied: 2023_predicted_swe_2023-02-12.png\nCopied: 2023_pr_2023-06-15.png\nCopied: 2022_predicted_swe_2022-04-17.png\nCopied: 2022_predicted_swe_2022-02-28.png\nCopied: 2022_pr_2022-06-15.png\nCopied: 2022_predicted_swe_2022-10-15.png\nCopied: 2023_pr_2023-02-11.png\nCopied: 2022_predicted_swe_2022-02-22.png\nCopied: 2023_predicted_swe_2023-01-18.png\nCopied: importance_summary_plot_2023-09-15.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2023_predicted_swe_2023-01-19.png\nCopied: 2023_predicted_swe_2023-01-20.png\nCopied: 2023_pr_2023-01-19.png\nCopied: 2022_pr_2022-02-28.png\nCopied: 2023_pr_2023-05-18.png\nCopied: 2023_pr_2023-03-15.png\nCopied: 2023_pr_2023-07-15.png\nCopied: 2023_pr_2023-09-15.png\nCopied: 2023_predicted_swe_2023-03-15.png\nCopied: shap_summary_plot_2023-01-20.png\nCopied: 2023_pr_2023-01-20.png\nCopied: importance_summary_plot_2023-05-16.png\nCopied: 2023_pr_2023-01-18.png\nCopied: importance_summary_plot_2023-02-11.png\nCopied: importance_summary_plot_2023-03-15.png\nCopied: 2023_predicted_swe_2023-02-11.png\nCopied: 2023_pr_2023-01-15.png\nCopied: importance_summary_plot_2023-06-15.png\nCopied: 2022_pr_2022-01-16.png\nCopied: 2023_predicted_swe_2023-01-15.png\nCopied: importance_summary_plot_2023-07-15.png\nCopied: 2022_pr_2022-12-29.png\nCopied: 2022_pr_2022-10-15.png\nCopied: 2023_predicted_swe_2023-06-15.png\nCopied: 2023_pr_2023-09-16.png\nCopied: 2022_pr_2022-02-22.png\nCopied: 2022_pr_2022-10-16.png\nCopied: 2022_pr_2022-04-17.png\nCopied: 2022_predicted_swe_2022-06-15.png\nCopied: importance_summary_plot_2023-01-20.png\nCopied: 2023_predicted_swe_2023-03-16.png\nCopied: importance_summary_plot_2023-05-17.png\nCopied: 2023_predicted_swe_2023-07-15.png\nCopied: 2023_predicted_swe_2023-09-16.png\nCopied: 2023_predicted_swe_2023-02-10.png\nCopied: importance_summary_plot_2023-09-16.png\nCopied: 2022_pr_2022-03-15.png\nCopied: 2023_pr_2023-05-16.png\nCopied: 2022_predicted_swe_2022-10-16.png\nCopied: 2022_pr_2022-01-17.png\nCopied: 2023_predicted_swe_2023-09-15.png\nCopied: 2022_pr_2022-12-30.png\n",
  "history_begin_time" : 1698075791261,
  "history_end_time" : 1698075794431,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "8eNDCkI1c438",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-10-16\ntest start date:  2023-05-17\ntest end date:  2023-10-16\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: importance_summary_plot_2023-02-12.png\nCopied: 2023_predicted_swe_2023-05-16.png\nCopied: 2022_predicted_swe_2022-03-15.png\nCopied: 2022_predicted_swe_2022-12-29.png\nCopied: partial_dependence_summary_plot_2023-01-20.png\nCopied: importance_summary_plot_2023-02-10.png\nCopied: 2023_pr_2023-02-10.png\nCopied: 2023_pr_2023-02-12.png\nCopied: 2023_pr_2023-03-16.png\nCopied: importance_summary_plot_latest_model.png\nCopied: 2023_predicted_swe_2023-05-17.png\nCopied: importance_summary_plot_2023-03-16.png\nCopied: 2022_predicted_swe_2022-01-17.png\nCopied: 2022_predicted_swe_2022-12-30.png\nCopied: 2023_pr_2023-05-17.png\nCopied: 2022_predicted_swe_2022-01-16.png\nCopied: 2023_predicted_swe_2023-02-12.png\nCopied: 2023_pr_2023-06-15.png\nCopied: 2022_predicted_swe_2022-04-17.png\nCopied: 2022_predicted_swe_2022-02-28.png\nCopied: 2022_pr_2022-06-15.png\nCopied: 2022_predicted_swe_2022-10-15.png\nCopied: 2023_pr_2023-02-11.png\nCopied: 2022_predicted_swe_2022-02-22.png\nCopied: 2023_predicted_swe_2023-01-18.png\nCopied: importance_summary_plot_2023-09-15.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2023_predicted_swe_2023-01-19.png\nCopied: 2023_predicted_swe_2023-01-20.png\nCopied: 2023_pr_2023-01-19.png\nCopied: 2022_pr_2022-02-28.png\nCopied: 2023_pr_2023-03-15.png\nCopied: 2023_pr_2023-07-15.png\nCopied: 2023_pr_2023-09-15.png\nCopied: 2023_predicted_swe_2023-03-15.png\nCopied: 2023_pr_2023-01-20.png\nCopied: importance_summary_plot_2023-05-16.png\nCopied: 2023_pr_2023-01-18.png\nCopied: importance_summary_plot_2023-02-11.png\nCopied: importance_summary_plot_2023-03-15.png\nCopied: 2023_predicted_swe_2023-02-11.png\nCopied: 2023_pr_2023-01-15.png\nCopied: importance_summary_plot_2023-06-15.png\nCopied: 2022_pr_2022-01-16.png\nCopied: 2023_predicted_swe_2023-01-15.png\nCopied: importance_summary_plot_2023-07-15.png\nCopied: 2022_pr_2022-12-29.png\nCopied: 2022_pr_2022-10-15.png\nCopied: 2023_predicted_swe_2023-06-15.png\nCopied: 2023_pr_2023-09-16.png\nCopied: 2022_pr_2022-02-22.png\nCopied: 2022_pr_2022-10-16.png\nCopied: 2022_pr_2022-04-17.png\nCopied: 2022_predicted_swe_2022-06-15.png\nCopied: importance_summary_plot_2023-01-20.png\nCopied: 2023_predicted_swe_2023-03-16.png\nCopied: importance_summary_plot_2023-05-17.png\nCopied: 2023_predicted_swe_2023-07-15.png\nCopied: 2023_predicted_swe_2023-09-16.png\nCopied: 2023_predicted_swe_2023-02-10.png\nCopied: importance_summary_plot_2023-09-16.png\nCopied: 2022_pr_2022-03-15.png\nCopied: 2023_pr_2023-05-16.png\nCopied: 2022_predicted_swe_2022-10-16.png\nCopied: 2022_pr_2022-01-17.png\nCopied: 2023_predicted_swe_2023-09-15.png\nCopied: 2022_pr_2022-12-30.png\n",
  "history_begin_time" : 1697424602676,
  "history_end_time" : 1697424605046,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "nN8gpFWS6w5n",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-10-15\ntest start date:  2023-05-17\ntest end date:  2023-10-15\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: importance_summary_plot_2023-02-12.png\nCopied: 2023_predicted_swe_2023-05-16.png\nCopied: 2022_predicted_swe_2022-03-15.png\nCopied: 2022_predicted_swe_2022-12-29.png\nCopied: partial_dependence_summary_plot_2023-01-20.png\nCopied: importance_summary_plot_2023-02-10.png\nCopied: 2023_pr_2023-02-10.png\nCopied: 2023_pr_2023-02-12.png\nCopied: 2023_pr_2023-03-16.png\nCopied: importance_summary_plot_latest_model.png\nCopied: 2023_predicted_swe_2023-05-17.png\nCopied: importance_summary_plot_2023-03-16.png\nCopied: 2022_predicted_swe_2022-01-17.png\nCopied: 2022_predicted_swe_2022-12-30.png\nCopied: 2023_pr_2023-05-17.png\nCopied: 2022_predicted_swe_2022-01-16.png\nCopied: 2023_predicted_swe_2023-02-12.png\nCopied: 2023_pr_2023-06-15.png\nCopied: 2022_predicted_swe_2022-04-17.png\nCopied: 2022_predicted_swe_2022-02-28.png\nCopied: 2022_pr_2022-06-15.png\nCopied: 2022_predicted_swe_2022-10-15.png\nCopied: 2023_pr_2023-02-11.png\nCopied: 2022_predicted_swe_2022-02-22.png\nCopied: 2023_predicted_swe_2023-01-18.png\nCopied: importance_summary_plot_2023-09-15.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2023_predicted_swe_2023-01-19.png\nCopied: 2023_predicted_swe_2023-01-20.png\nCopied: 2023_pr_2023-01-19.png\nCopied: 2022_pr_2022-02-28.png\nCopied: 2023_pr_2023-03-15.png\nCopied: 2023_pr_2023-07-15.png\nCopied: 2023_pr_2023-09-15.png\nCopied: 2023_predicted_swe_2023-03-15.png\nCopied: 2023_pr_2023-01-20.png\nCopied: importance_summary_plot_2023-05-16.png\nCopied: 2023_pr_2023-01-18.png\nCopied: importance_summary_plot_2023-02-11.png\nCopied: importance_summary_plot_2023-03-15.png\nCopied: 2023_predicted_swe_2023-02-11.png\nCopied: 2023_pr_2023-01-15.png\nCopied: importance_summary_plot_2023-06-15.png\nCopied: 2022_pr_2022-01-16.png\nCopied: 2023_predicted_swe_2023-01-15.png\nCopied: importance_summary_plot_2023-07-15.png\nCopied: 2022_pr_2022-12-29.png\nCopied: 2022_pr_2022-10-15.png\nCopied: 2023_predicted_swe_2023-06-15.png\nCopied: 2023_pr_2023-09-16.png\nCopied: 2022_pr_2022-02-22.png\nCopied: 2022_pr_2022-10-16.png\nCopied: 2022_pr_2022-04-17.png\nCopied: 2022_predicted_swe_2022-06-15.png\nCopied: importance_summary_plot_2023-01-20.png\nCopied: 2023_predicted_swe_2023-03-16.png\nCopied: importance_summary_plot_2023-05-17.png\nCopied: 2023_predicted_swe_2023-07-15.png\nCopied: 2023_predicted_swe_2023-09-16.png\nCopied: 2023_predicted_swe_2023-02-10.png\nCopied: importance_summary_plot_2023-09-16.png\nCopied: 2022_pr_2022-03-15.png\nCopied: 2023_pr_2023-05-16.png\nCopied: 2022_predicted_swe_2022-10-16.png\nCopied: 2022_pr_2022-01-17.png\nCopied: 2023_predicted_swe_2023-09-15.png\nCopied: 2022_pr_2022-12-30.png\n",
  "history_begin_time" : 1697402815751,
  "history_end_time" : 1697402817431,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "la3z99few5q",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-10-15\ntest start date:  2023-05-17\ntest end date:  2023-10-15\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: importance_summary_plot_2023-02-12.png\nCopied: 2023_predicted_swe_2023-05-16.png\nCopied: 2022_predicted_swe_2022-03-15.png\nCopied: 2022_predicted_swe_2022-12-29.png\nCopied: partial_dependence_summary_plot_2023-01-20.png\nCopied: importance_summary_plot_2023-02-10.png\nCopied: 2023_pr_2023-02-10.png\nCopied: 2023_pr_2023-02-12.png\nCopied: 2023_pr_2023-03-16.png\nCopied: 2023_predicted_swe_2023-05-17.png\nCopied: importance_summary_plot_2023-03-16.png\nCopied: 2022_predicted_swe_2022-01-17.png\nCopied: 2022_predicted_swe_2022-12-30.png\nCopied: 2023_pr_2023-05-17.png\nCopied: 2022_predicted_swe_2022-01-16.png\nCopied: 2023_predicted_swe_2023-02-12.png\nCopied: 2023_pr_2023-06-15.png\nCopied: 2022_predicted_swe_2022-04-17.png\nCopied: 2022_predicted_swe_2022-02-28.png\nCopied: 2022_pr_2022-06-15.png\nCopied: 2022_predicted_swe_2022-10-15.png\nCopied: 2023_pr_2023-02-11.png\nCopied: 2022_predicted_swe_2022-02-22.png\nCopied: 2023_predicted_swe_2023-01-18.png\nCopied: importance_summary_plot_2023-09-15.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2023_predicted_swe_2023-01-19.png\nCopied: 2023_predicted_swe_2023-01-20.png\nCopied: 2023_pr_2023-01-19.png\nCopied: 2022_pr_2022-02-28.png\nCopied: 2023_pr_2023-03-15.png\nCopied: 2023_pr_2023-07-15.png\nCopied: 2023_pr_2023-09-15.png\nCopied: 2023_predicted_swe_2023-03-15.png\nCopied: 2023_pr_2023-01-20.png\nCopied: importance_summary_plot_2023-05-16.png\nCopied: 2023_pr_2023-01-18.png\nCopied: importance_summary_plot_2023-02-11.png\nCopied: importance_summary_plot_2023-03-15.png\nCopied: 2023_predicted_swe_2023-02-11.png\nCopied: 2023_pr_2023-01-15.png\nCopied: importance_summary_plot_2023-06-15.png\nCopied: 2022_pr_2022-01-16.png\nCopied: 2023_predicted_swe_2023-01-15.png\nCopied: importance_summary_plot_2023-07-15.png\nCopied: 2022_pr_2022-12-29.png\nCopied: 2022_pr_2022-10-15.png\nCopied: 2023_predicted_swe_2023-06-15.png\nCopied: 2023_pr_2023-09-16.png\nCopied: 2022_pr_2022-02-22.png\nCopied: 2022_pr_2022-10-16.png\nCopied: 2022_pr_2022-04-17.png\nCopied: 2022_predicted_swe_2022-06-15.png\nCopied: importance_summary_plot_2023-01-20.png\nCopied: 2023_predicted_swe_2023-03-16.png\nCopied: importance_summary_plot_2023-05-17.png\nCopied: 2023_predicted_swe_2023-07-15.png\nCopied: 2023_predicted_swe_2023-09-16.png\nCopied: 2023_predicted_swe_2023-02-10.png\nCopied: importance_summary_plot_2023-09-16.png\nCopied: 2022_pr_2022-03-15.png\nCopied: 2023_pr_2023-05-16.png\nCopied: 2022_predicted_swe_2022-10-16.png\nCopied: 2022_pr_2022-01-17.png\nCopied: 2023_predicted_swe_2023-09-15.png\nCopied: 2022_pr_2022-12-30.png\n",
  "history_begin_time" : 1697349829846,
  "history_end_time" : 1697349832270,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "xp2endis6ab",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-10-15\ntest start date:  2023-05-16\ntest end date:  2023-10-15\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: importance_summary_plot_2023-02-12.png\nCopied: 2023_predicted_swe_2023-05-16.png\nCopied: 2022_predicted_swe_2022-03-15.png\nCopied: 2022_predicted_swe_2022-12-29.png\nCopied: partial_dependence_summary_plot_2023-01-20.png\nCopied: importance_summary_plot_2023-02-10.png\nCopied: 2023_pr_2023-02-10.png\nCopied: 2023_pr_2023-02-12.png\nCopied: 2023_pr_2023-03-16.png\nCopied: importance_summary_plot_2023-03-16.png\nCopied: 2022_predicted_swe_2022-01-17.png\nCopied: 2022_predicted_swe_2022-12-30.png\nCopied: 2022_predicted_swe_2022-01-16.png\nCopied: 2023_predicted_swe_2023-02-12.png\nCopied: 2023_pr_2023-06-15.png\nCopied: 2022_predicted_swe_2022-04-17.png\nCopied: 2022_predicted_swe_2022-02-28.png\nCopied: 2022_pr_2022-06-15.png\nCopied: 2022_predicted_swe_2022-10-15.png\nCopied: 2023_pr_2023-02-11.png\nCopied: 2022_predicted_swe_2022-02-22.png\nCopied: 2023_predicted_swe_2023-01-18.png\nCopied: importance_summary_plot_2023-09-15.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2023_predicted_swe_2023-01-19.png\nCopied: 2023_predicted_swe_2023-01-20.png\nCopied: 2023_pr_2023-01-19.png\nCopied: 2022_pr_2022-02-28.png\nCopied: 2023_pr_2023-03-15.png\nCopied: 2023_pr_2023-07-15.png\nCopied: 2023_pr_2023-09-15.png\nCopied: 2023_predicted_swe_2023-03-15.png\nCopied: 2023_pr_2023-01-20.png\nCopied: importance_summary_plot_2023-05-16.png\nCopied: 2023_pr_2023-01-18.png\nCopied: importance_summary_plot_2023-02-11.png\nCopied: importance_summary_plot_2023-03-15.png\nCopied: 2023_predicted_swe_2023-02-11.png\nCopied: 2023_pr_2023-01-15.png\nCopied: importance_summary_plot_2023-06-15.png\nCopied: 2022_pr_2022-01-16.png\nCopied: 2023_predicted_swe_2023-01-15.png\nCopied: importance_summary_plot_2023-07-15.png\nCopied: 2022_pr_2022-12-29.png\nCopied: 2022_pr_2022-10-15.png\nCopied: 2023_predicted_swe_2023-06-15.png\nCopied: 2023_pr_2023-09-16.png\nCopied: 2022_pr_2022-02-22.png\nCopied: 2022_pr_2022-10-16.png\nCopied: 2022_pr_2022-04-17.png\nCopied: 2022_predicted_swe_2022-06-15.png\nCopied: importance_summary_plot_2023-01-20.png\nCopied: 2023_predicted_swe_2023-03-16.png\nCopied: 2023_predicted_swe_2023-07-15.png\nCopied: 2023_predicted_swe_2023-09-16.png\nCopied: 2023_predicted_swe_2023-02-10.png\nCopied: importance_summary_plot_2023-09-16.png\nCopied: 2022_pr_2022-03-15.png\nCopied: 2023_pr_2023-05-16.png\nCopied: 2022_predicted_swe_2022-10-16.png\nCopied: 2022_pr_2022-01-17.png\nCopied: 2023_predicted_swe_2023-09-15.png\nCopied: 2022_pr_2022-12-30.png\n",
  "history_begin_time" : 1697349123376,
  "history_end_time" : 1697349126269,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "KYxfShx6ZbQe",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-10-15\ntest start date:  2023-03-16\ntest end date:  2023-10-15\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: importance_summary_plot_2023-02-12.png\nCopied: 2022_predicted_swe_2022-03-15.png\nCopied: 2022_predicted_swe_2022-12-29.png\nCopied: partial_dependence_summary_plot_2023-01-20.png\nCopied: importance_summary_plot_2023-02-10.png\nCopied: 2023_pr_2023-02-10.png\nCopied: 2023_pr_2023-02-12.png\nCopied: 2023_pr_2023-03-16.png\nCopied: importance_summary_plot_2023-03-16.png\nCopied: 2022_predicted_swe_2022-01-17.png\nCopied: 2022_predicted_swe_2022-12-30.png\nCopied: 2022_predicted_swe_2022-01-16.png\nCopied: 2023_predicted_swe_2023-02-12.png\nCopied: 2023_pr_2023-06-15.png\nCopied: 2022_predicted_swe_2022-04-17.png\nCopied: 2022_predicted_swe_2022-02-28.png\nCopied: 2022_pr_2022-06-15.png\nCopied: 2022_predicted_swe_2022-10-15.png\nCopied: 2023_pr_2023-02-11.png\nCopied: 2022_predicted_swe_2022-02-22.png\nCopied: 2023_predicted_swe_2023-01-18.png\nCopied: importance_summary_plot_2023-09-15.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2023_predicted_swe_2023-01-19.png\nCopied: 2023_predicted_swe_2023-01-20.png\nCopied: 2023_pr_2023-01-19.png\nCopied: 2022_pr_2022-02-28.png\nCopied: 2023_pr_2023-03-15.png\nCopied: 2023_pr_2023-07-15.png\nCopied: 2023_pr_2023-09-15.png\nCopied: 2023_predicted_swe_2023-03-15.png\nCopied: 2023_pr_2023-01-20.png\nCopied: 2023_pr_2023-01-18.png\nCopied: importance_summary_plot_2023-02-11.png\nCopied: importance_summary_plot_2023-03-15.png\nCopied: 2023_predicted_swe_2023-02-11.png\nCopied: 2023_pr_2023-01-15.png\nCopied: importance_summary_plot_2023-06-15.png\nCopied: 2022_pr_2022-01-16.png\nCopied: 2023_predicted_swe_2023-01-15.png\nCopied: importance_summary_plot_2023-07-15.png\nCopied: 2022_pr_2022-12-29.png\nCopied: 2022_pr_2022-10-15.png\nCopied: 2023_predicted_swe_2023-06-15.png\nCopied: 2023_pr_2023-09-16.png\nCopied: 2022_pr_2022-02-22.png\nCopied: 2022_pr_2022-10-16.png\nCopied: 2022_pr_2022-04-17.png\nCopied: 2022_predicted_swe_2022-06-15.png\nCopied: importance_summary_plot_2023-01-20.png\nCopied: 2023_predicted_swe_2023-03-16.png\nCopied: 2023_predicted_swe_2023-07-15.png\nCopied: 2023_predicted_swe_2023-09-16.png\nCopied: 2023_predicted_swe_2023-02-10.png\nCopied: importance_summary_plot_2023-09-16.png\nCopied: 2022_pr_2022-03-15.png\nCopied: 2022_predicted_swe_2022-10-16.png\nCopied: 2022_pr_2022-01-17.png\nCopied: 2023_predicted_swe_2023-09-15.png\nCopied: 2022_pr_2022-12-30.png\n",
  "history_begin_time" : 1697347636292,
  "history_end_time" : 1697347637241,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "qO5rIB80nXtf",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-10-15\ntest start date:  2023-03-16\ntest end date:  2023-10-15\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: importance_summary_plot_2023-02-12.png\nCopied: 2022_predicted_swe_2022-03-15.png\nCopied: 2022_predicted_swe_2022-12-29.png\nCopied: partial_dependence_summary_plot_2023-01-20.png\nCopied: importance_summary_plot_2023-02-10.png\nCopied: 2023_pr_2023-02-10.png\nCopied: 2023_pr_2023-02-12.png\nCopied: 2023_pr_2023-03-16.png\nCopied: importance_summary_plot_2023-03-16.png\nCopied: 2022_predicted_swe_2022-01-17.png\nCopied: 2022_predicted_swe_2022-12-30.png\nCopied: 2022_predicted_swe_2022-01-16.png\nCopied: 2023_predicted_swe_2023-02-12.png\nCopied: 2023_pr_2023-06-15.png\nCopied: 2022_predicted_swe_2022-04-17.png\nCopied: 2022_predicted_swe_2022-02-28.png\nCopied: 2022_pr_2022-06-15.png\nCopied: 2022_predicted_swe_2022-10-15.png\nCopied: 2023_pr_2023-02-11.png\nCopied: 2022_predicted_swe_2022-02-22.png\nCopied: 2023_predicted_swe_2023-01-18.png\nCopied: importance_summary_plot_2023-09-15.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2023_predicted_swe_2023-01-19.png\nCopied: 2023_predicted_swe_2023-01-20.png\nCopied: 2023_pr_2023-01-19.png\nCopied: 2022_pr_2022-02-28.png\nCopied: 2023_pr_2023-03-15.png\nCopied: 2023_pr_2023-07-15.png\nCopied: 2023_pr_2023-09-15.png\nCopied: 2023_predicted_swe_2023-03-15.png\nCopied: 2023_pr_2023-01-20.png\nCopied: 2023_pr_2023-01-18.png\nCopied: importance_summary_plot_2023-02-11.png\nCopied: importance_summary_plot_2023-03-15.png\nCopied: 2023_predicted_swe_2023-02-11.png\nCopied: 2023_pr_2023-01-15.png\nCopied: importance_summary_plot_2023-06-15.png\nCopied: 2022_pr_2022-01-16.png\nCopied: 2023_predicted_swe_2023-01-15.png\nCopied: importance_summary_plot_2023-07-15.png\nCopied: 2022_pr_2022-12-29.png\nCopied: 2022_pr_2022-10-15.png\nCopied: 2023_predicted_swe_2023-06-15.png\nCopied: 2023_pr_2023-09-16.png\nCopied: 2022_pr_2022-02-22.png\nCopied: 2022_pr_2022-10-16.png\nCopied: 2022_pr_2022-04-17.png\nCopied: 2022_predicted_swe_2022-06-15.png\nCopied: importance_summary_plot_2023-01-20.png\nCopied: 2023_predicted_swe_2023-03-16.png\nCopied: 2023_predicted_swe_2023-07-15.png\nCopied: 2023_predicted_swe_2023-09-16.png\nCopied: 2023_predicted_swe_2023-02-10.png\nCopied: importance_summary_plot_2023-09-16.png\nCopied: 2022_pr_2022-03-15.png\nCopied: 2022_predicted_swe_2022-10-16.png\nCopied: 2022_pr_2022-01-17.png\nCopied: 2023_predicted_swe_2023-09-15.png\nCopied: 2022_pr_2022-12-30.png\n",
  "history_begin_time" : 1697347179619,
  "history_end_time" : 1697347181352,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "IUffGQSTDdnT",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-10-13\ntest start date:  2023-03-16\ntest end date:  2023-10-13\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: importance_summary_plot_2023-02-12.png\nCopied: 2022_predicted_swe_2022-03-15.png\nCopied: 2022_predicted_swe_2022-12-29.png\nCopied: partial_dependence_summary_plot_2023-01-20.png\nCopied: importance_summary_plot_2023-02-10.png\nCopied: 2023_pr_2023-02-10.png\nCopied: 2023_pr_2023-02-12.png\nCopied: 2023_pr_2023-03-16.png\nCopied: importance_summary_plot_2023-03-16.png\nCopied: 2022_predicted_swe_2022-01-17.png\nCopied: 2022_predicted_swe_2022-12-30.png\nCopied: 2022_predicted_swe_2022-01-16.png\nCopied: 2023_predicted_swe_2023-02-12.png\nCopied: 2023_pr_2023-06-15.png\nCopied: 2022_predicted_swe_2022-04-17.png\nCopied: 2022_predicted_swe_2022-02-28.png\nCopied: 2022_pr_2022-06-15.png\nCopied: 2022_predicted_swe_2022-10-15.png\nCopied: 2023_pr_2023-02-11.png\nCopied: 2022_predicted_swe_2022-02-22.png\nCopied: 2023_predicted_swe_2023-01-18.png\nCopied: importance_summary_plot_2023-09-15.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2023_predicted_swe_2023-01-19.png\nCopied: 2023_predicted_swe_2023-01-20.png\nCopied: 2023_pr_2023-01-19.png\nCopied: 2022_pr_2022-02-28.png\nCopied: 2023_pr_2023-03-15.png\nCopied: 2023_pr_2023-07-15.png\nCopied: 2023_pr_2023-09-15.png\nCopied: 2023_predicted_swe_2023-03-15.png\nCopied: 2023_pr_2023-01-20.png\nCopied: 2023_pr_2023-01-18.png\nCopied: importance_summary_plot_2023-02-11.png\nCopied: importance_summary_plot_2023-03-15.png\nCopied: 2023_predicted_swe_2023-02-11.png\nCopied: 2023_pr_2023-01-15.png\nCopied: importance_summary_plot_2023-06-15.png\nCopied: 2022_pr_2022-01-16.png\nCopied: 2023_predicted_swe_2023-01-15.png\nCopied: importance_summary_plot_2023-07-15.png\nCopied: 2022_pr_2022-12-29.png\nCopied: 2022_pr_2022-10-15.png\nCopied: 2023_predicted_swe_2023-06-15.png\nCopied: 2023_pr_2023-09-16.png\nCopied: 2022_pr_2022-02-22.png\nCopied: 2022_pr_2022-10-16.png\nCopied: 2022_pr_2022-04-17.png\nCopied: 2022_predicted_swe_2022-06-15.png\nCopied: importance_summary_plot_2023-01-20.png\nCopied: 2023_predicted_swe_2023-03-16.png\nCopied: 2023_predicted_swe_2023-07-15.png\nCopied: 2023_predicted_swe_2023-09-16.png\nCopied: 2023_predicted_swe_2023-02-10.png\nCopied: importance_summary_plot_2023-09-16.png\nCopied: 2022_pr_2022-03-15.png\nCopied: 2022_predicted_swe_2022-10-16.png\nCopied: 2022_pr_2022-01-17.png\nCopied: 2023_predicted_swe_2023-09-15.png\nCopied: 2022_pr_2022-12-30.png\n",
  "history_begin_time" : 1697190399135,
  "history_end_time" : 1697190400074,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "KwuMWTCRB2Lb",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-10-13\ntest start date:  2023-03-16\ntest end date:  2023-10-13\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: importance_summary_plot_2023-02-12.png\nCopied: 2022_predicted_swe_2022-03-15.png\nCopied: 2022_predicted_swe_2022-12-29.png\nCopied: partial_dependence_summary_plot_2023-01-20.png\nCopied: importance_summary_plot_2023-02-10.png\nCopied: 2023_pr_2023-02-10.png\nCopied: 2023_pr_2023-02-12.png\nCopied: 2023_pr_2023-03-16.png\nCopied: importance_summary_plot_2023-03-16.png\nCopied: 2022_predicted_swe_2022-01-17.png\nCopied: 2022_predicted_swe_2022-12-30.png\nCopied: 2022_predicted_swe_2022-01-16.png\nCopied: 2023_predicted_swe_2023-02-12.png\nCopied: 2023_pr_2023-06-15.png\nCopied: 2022_predicted_swe_2022-04-17.png\nCopied: 2022_predicted_swe_2022-02-28.png\nCopied: 2022_pr_2022-06-15.png\nCopied: 2022_predicted_swe_2022-10-15.png\nCopied: 2023_pr_2023-02-11.png\nCopied: 2022_predicted_swe_2022-02-22.png\nCopied: 2023_predicted_swe_2023-01-18.png\nCopied: importance_summary_plot_2023-09-15.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2023_predicted_swe_2023-01-19.png\nCopied: 2023_predicted_swe_2023-01-20.png\nCopied: 2023_pr_2023-01-19.png\nCopied: 2022_pr_2022-02-28.png\nCopied: 2023_pr_2023-03-15.png\nCopied: 2023_pr_2023-07-15.png\nCopied: 2023_pr_2023-09-15.png\nCopied: 2023_predicted_swe_2023-03-15.png\nCopied: 2023_pr_2023-01-20.png\nCopied: 2023_pr_2023-01-18.png\nCopied: importance_summary_plot_2023-02-11.png\nCopied: importance_summary_plot_2023-03-15.png\nCopied: 2023_predicted_swe_2023-02-11.png\nCopied: 2023_pr_2023-01-15.png\nCopied: importance_summary_plot_2023-06-15.png\nCopied: 2022_pr_2022-01-16.png\nCopied: 2023_predicted_swe_2023-01-15.png\nCopied: importance_summary_plot_2023-07-15.png\nCopied: 2022_pr_2022-12-29.png\nCopied: 2022_pr_2022-10-15.png\nCopied: 2023_predicted_swe_2023-06-15.png\nCopied: 2023_pr_2023-09-16.png\nCopied: 2022_pr_2022-02-22.png\nCopied: 2022_pr_2022-10-16.png\nCopied: 2022_pr_2022-04-17.png\nCopied: 2022_predicted_swe_2022-06-15.png\nCopied: importance_summary_plot_2023-01-20.png\nCopied: 2023_predicted_swe_2023-03-16.png\nCopied: 2023_predicted_swe_2023-07-15.png\nCopied: 2023_predicted_swe_2023-09-16.png\nCopied: 2023_predicted_swe_2023-02-10.png\nCopied: importance_summary_plot_2023-09-16.png\nCopied: 2022_pr_2022-03-15.png\nCopied: 2022_predicted_swe_2022-10-16.png\nCopied: 2022_pr_2022-01-17.png\nCopied: 2023_predicted_swe_2023-09-15.png\nCopied: 2022_pr_2022-12-30.png\n",
  "history_begin_time" : 1697190293308,
  "history_end_time" : 1697190294229,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "0ahrwkmhmru",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-10-13\ntest start date:  2023-03-16\ntest end date:  2023-10-13\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: importance_summary_plot_2023-02-12.png\nCopied: 2022_predicted_swe_2022-03-15.png\nCopied: 2022_predicted_swe_2022-12-29.png\nCopied: partial_dependence_summary_plot_2023-01-20.png\nCopied: importance_summary_plot_2023-02-10.png\nCopied: 2023_pr_2023-02-10.png\nCopied: 2023_pr_2023-02-12.png\nCopied: 2023_pr_2023-03-16.png\nCopied: importance_summary_plot_2023-03-16.png\nCopied: 2022_predicted_swe_2022-01-17.png\nCopied: 2022_predicted_swe_2022-12-30.png\nCopied: 2022_predicted_swe_2022-01-16.png\nCopied: 2023_predicted_swe_2023-02-12.png\nCopied: 2023_pr_2023-06-15.png\nCopied: 2022_predicted_swe_2022-04-17.png\nCopied: 2022_predicted_swe_2022-02-28.png\nCopied: 2022_pr_2022-06-15.png\nCopied: 2022_predicted_swe_2022-10-15.png\nCopied: 2023_pr_2023-02-11.png\nCopied: 2022_predicted_swe_2022-02-22.png\nCopied: 2023_predicted_swe_2023-01-18.png\nCopied: importance_summary_plot_2023-09-15.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2023_predicted_swe_2023-01-19.png\nCopied: 2023_predicted_swe_2023-01-20.png\nCopied: 2023_pr_2023-01-19.png\nCopied: 2022_pr_2022-02-28.png\nCopied: 2023_pr_2023-03-15.png\nCopied: 2023_pr_2023-07-15.png\nCopied: 2023_pr_2023-09-15.png\nCopied: 2023_predicted_swe_2023-03-15.png\nCopied: 2023_pr_2023-01-20.png\nCopied: 2023_pr_2023-01-18.png\nCopied: importance_summary_plot_2023-02-11.png\nCopied: importance_summary_plot_2023-03-15.png\nCopied: 2023_predicted_swe_2023-02-11.png\nCopied: 2023_pr_2023-01-15.png\nCopied: importance_summary_plot_2023-06-15.png\nCopied: 2022_pr_2022-01-16.png\nCopied: 2023_predicted_swe_2023-01-15.png\nCopied: importance_summary_plot_2023-07-15.png\nCopied: 2022_pr_2022-12-29.png\nCopied: 2022_pr_2022-10-15.png\nCopied: 2023_predicted_swe_2023-06-15.png\nCopied: 2023_pr_2023-09-16.png\nCopied: 2022_pr_2022-02-22.png\nCopied: 2022_pr_2022-10-16.png\nCopied: 2022_pr_2022-04-17.png\nCopied: 2022_predicted_swe_2022-06-15.png\nCopied: importance_summary_plot_2023-01-20.png\nCopied: 2023_predicted_swe_2023-03-16.png\nCopied: 2023_predicted_swe_2023-07-15.png\nCopied: 2023_predicted_swe_2023-09-16.png\nCopied: 2023_predicted_swe_2023-02-10.png\nCopied: importance_summary_plot_2023-09-16.png\nCopied: 2022_pr_2022-03-15.png\nCopied: 2022_predicted_swe_2022-10-16.png\nCopied: 2022_pr_2022-01-17.png\nCopied: 2023_predicted_swe_2023-09-15.png\nCopied: 2022_pr_2022-12-30.png\n",
  "history_begin_time" : 1697190062688,
  "history_end_time" : 1697190065078,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "NqSxRgYBI0Wr",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-10-13\ntest start date:  2023-03-16\ntest end date:  2023-10-13\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: importance_summary_plot_2023-02-12.png\nCopied: 2022_predicted_swe_2022-03-15.png\nCopied: 2022_predicted_swe_2022-12-29.png\nCopied: partial_dependence_summary_plot_2023-01-20.png\nCopied: importance_summary_plot_2023-02-10.png\nCopied: 2023_pr_2023-02-10.png\nCopied: 2023_pr_2023-02-12.png\nCopied: 2023_pr_2023-03-16.png\nCopied: importance_summary_plot_2023-03-16.png\nCopied: 2022_predicted_swe_2022-01-17.png\nCopied: 2022_predicted_swe_2022-12-30.png\nCopied: 2022_predicted_swe_2022-01-16.png\nCopied: 2023_predicted_swe_2023-02-12.png\nCopied: 2023_pr_2023-06-15.png\nCopied: 2022_predicted_swe_2022-04-17.png\nCopied: 2022_predicted_swe_2022-02-28.png\nCopied: 2022_pr_2022-06-15.png\nCopied: 2022_predicted_swe_2022-10-15.png\nCopied: 2023_pr_2023-02-11.png\nCopied: 2022_predicted_swe_2022-02-22.png\nCopied: 2023_predicted_swe_2023-01-18.png\nCopied: importance_summary_plot_2023-09-15.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2023_predicted_swe_2023-01-19.png\nCopied: 2023_predicted_swe_2023-01-20.png\nCopied: 2023_pr_2023-01-19.png\nCopied: 2022_pr_2022-02-28.png\nCopied: 2023_pr_2023-03-15.png\nCopied: 2023_pr_2023-07-15.png\nCopied: 2023_pr_2023-09-15.png\nCopied: 2023_predicted_swe_2023-03-15.png\nCopied: 2023_pr_2023-01-20.png\nCopied: 2023_pr_2023-01-18.png\nCopied: importance_summary_plot_2023-02-11.png\nCopied: importance_summary_plot_2023-03-15.png\nCopied: 2023_predicted_swe_2023-02-11.png\nCopied: 2023_pr_2023-01-15.png\nCopied: importance_summary_plot_2023-06-15.png\nCopied: 2022_pr_2022-01-16.png\nCopied: 2023_predicted_swe_2023-01-15.png\nCopied: importance_summary_plot_2023-07-15.png\nCopied: 2022_pr_2022-12-29.png\nCopied: 2022_pr_2022-10-15.png\nCopied: 2023_predicted_swe_2023-06-15.png\nCopied: 2023_pr_2023-09-16.png\nCopied: 2022_pr_2022-02-22.png\nCopied: 2022_pr_2022-10-16.png\nCopied: 2022_pr_2022-04-17.png\nCopied: 2022_predicted_swe_2022-06-15.png\nCopied: importance_summary_plot_2023-01-20.png\nCopied: 2023_predicted_swe_2023-03-16.png\nCopied: 2023_predicted_swe_2023-07-15.png\nCopied: 2023_predicted_swe_2023-09-16.png\nCopied: 2023_predicted_swe_2023-02-10.png\nCopied: importance_summary_plot_2023-09-16.png\nCopied: 2022_pr_2022-03-15.png\nCopied: 2022_predicted_swe_2022-10-16.png\nCopied: 2022_pr_2022-01-17.png\nCopied: 2023_predicted_swe_2023-09-15.png\nCopied: 2022_pr_2022-12-30.png\n",
  "history_begin_time" : 1697188974142,
  "history_end_time" : 1697188975959,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "gms0uznmrai",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-10-13\ntest start date:  2023-03-16\ntest end date:  2023-10-13\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: importance_summary_plot_2023-02-12.png\nCopied: 2022_predicted_swe_2022-03-15.png\nCopied: 2022_predicted_swe_2022-12-29.png\nCopied: partial_dependence_summary_plot_2023-01-20.png\nCopied: importance_summary_plot_2023-02-10.png\nCopied: 2023_pr_2023-02-10.png\nCopied: 2023_pr_2023-02-12.png\nCopied: 2023_pr_2023-03-16.png\nCopied: 2022_predicted_swe_2022-01-17.png\nCopied: 2022_predicted_swe_2022-12-30.png\nCopied: 2022_predicted_swe_2022-01-16.png\nCopied: 2023_predicted_swe_2023-02-12.png\nCopied: 2023_pr_2023-06-15.png\nCopied: 2022_predicted_swe_2022-04-17.png\nCopied: 2022_predicted_swe_2022-02-28.png\nCopied: 2022_pr_2022-06-15.png\nCopied: 2022_predicted_swe_2022-10-15.png\nCopied: 2023_pr_2023-02-11.png\nCopied: 2022_predicted_swe_2022-02-22.png\nCopied: 2023_predicted_swe_2023-01-18.png\nCopied: importance_summary_plot_2023-09-15.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2023_predicted_swe_2023-01-19.png\nCopied: 2023_predicted_swe_2023-01-20.png\nCopied: 2023_pr_2023-01-19.png\nCopied: 2022_pr_2022-02-28.png\nCopied: 2023_pr_2023-03-15.png\nCopied: 2023_pr_2023-07-15.png\nCopied: 2023_pr_2023-09-15.png\nCopied: 2023_predicted_swe_2023-03-15.png\nCopied: 2023_pr_2023-01-20.png\nCopied: 2023_pr_2023-01-18.png\nCopied: importance_summary_plot_2023-02-11.png\nCopied: importance_summary_plot_2023-03-15.png\nCopied: 2023_predicted_swe_2023-02-11.png\nCopied: 2023_pr_2023-01-15.png\nCopied: importance_summary_plot_2023-06-15.png\nCopied: 2022_pr_2022-01-16.png\nCopied: 2023_predicted_swe_2023-01-15.png\nCopied: importance_summary_plot_2023-07-15.png\nCopied: 2022_pr_2022-12-29.png\nCopied: 2022_pr_2022-10-15.png\nCopied: 2023_predicted_swe_2023-06-15.png\nCopied: 2023_pr_2023-09-16.png\nCopied: 2022_pr_2022-02-22.png\nCopied: 2022_pr_2022-10-16.png\nCopied: 2022_pr_2022-04-17.png\nCopied: 2022_predicted_swe_2022-06-15.png\nCopied: importance_summary_plot_2023-01-20.png\nCopied: 2023_predicted_swe_2023-03-16.png\nCopied: 2023_predicted_swe_2023-07-15.png\nCopied: 2023_predicted_swe_2023-09-16.png\nCopied: 2023_predicted_swe_2023-02-10.png\nCopied: importance_summary_plot_2023-09-16.png\nCopied: 2022_pr_2022-03-15.png\nCopied: 2022_predicted_swe_2022-10-16.png\nCopied: 2022_pr_2022-01-17.png\nCopied: 2023_predicted_swe_2023-09-15.png\nCopied: 2022_pr_2022-12-30.png\n",
  "history_begin_time" : 1697188833682,
  "history_end_time" : 1697188836345,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "l0g2gen2ch8",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-10-13\ntest start date:  2023-07-15\ntest end date:  2023-10-13\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: importance_summary_plot_2023-02-12.png\nCopied: 2022_predicted_swe_2022-03-15.png\nCopied: 2022_predicted_swe_2022-12-29.png\nCopied: partial_dependence_summary_plot_2023-01-20.png\nCopied: importance_summary_plot_2023-02-10.png\nCopied: 2023_pr_2023-02-10.png\nCopied: 2023_pr_2023-02-12.png\nCopied: 2022_predicted_swe_2022-01-17.png\nCopied: 2022_predicted_swe_2022-12-30.png\nCopied: 2022_predicted_swe_2022-01-16.png\nCopied: 2023_predicted_swe_2023-02-12.png\nCopied: 2023_pr_2023-06-15.png\nCopied: 2022_predicted_swe_2022-04-17.png\nCopied: 2022_predicted_swe_2022-02-28.png\nCopied: 2022_pr_2022-06-15.png\nCopied: 2022_predicted_swe_2022-10-15.png\nCopied: 2023_pr_2023-02-11.png\nCopied: 2022_predicted_swe_2022-02-22.png\nCopied: 2023_predicted_swe_2023-01-18.png\nCopied: importance_summary_plot_2023-09-15.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2023_predicted_swe_2023-01-19.png\nCopied: 2023_predicted_swe_2023-01-20.png\nCopied: 2023_pr_2023-01-19.png\nCopied: 2022_pr_2022-02-28.png\nCopied: 2023_pr_2023-03-15.png\nCopied: 2023_pr_2023-07-15.png\nCopied: 2023_pr_2023-09-15.png\nCopied: 2023_predicted_swe_2023-03-15.png\nCopied: 2023_pr_2023-01-20.png\nCopied: 2023_pr_2023-01-18.png\nCopied: importance_summary_plot_2023-02-11.png\nCopied: importance_summary_plot_2023-03-15.png\nCopied: 2023_predicted_swe_2023-02-11.png\nCopied: 2023_pr_2023-01-15.png\nCopied: importance_summary_plot_2023-06-15.png\nCopied: 2022_pr_2022-01-16.png\nCopied: 2023_predicted_swe_2023-01-15.png\nCopied: importance_summary_plot_2023-07-15.png\nCopied: 2022_pr_2022-12-29.png\nCopied: 2022_pr_2022-10-15.png\nCopied: 2023_predicted_swe_2023-06-15.png\nCopied: 2023_pr_2023-09-16.png\nCopied: 2022_pr_2022-02-22.png\nCopied: 2022_pr_2022-10-16.png\nCopied: 2022_pr_2022-04-17.png\nCopied: 2022_predicted_swe_2022-06-15.png\nCopied: importance_summary_plot_2023-01-20.png\nCopied: 2023_predicted_swe_2023-07-15.png\nCopied: 2023_predicted_swe_2023-09-16.png\nCopied: 2023_predicted_swe_2023-02-10.png\nCopied: importance_summary_plot_2023-09-16.png\nCopied: 2022_pr_2022-03-15.png\nCopied: 2022_predicted_swe_2022-10-16.png\nCopied: 2022_pr_2022-01-17.png\nCopied: 2023_predicted_swe_2023-09-15.png\nCopied: 2022_pr_2022-12-30.png\n",
  "history_begin_time" : 1697188213399,
  "history_end_time" : 1697188216507,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "k4kkrqta5jb",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-10-13\ntest start date:  2023-03-15\ntest end date:  2023-10-13\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: importance_summary_plot_2023-02-12.png\nCopied: 2022_predicted_swe_2022-03-15.png\nCopied: 2022_predicted_swe_2022-12-29.png\nCopied: partial_dependence_summary_plot_2023-01-20.png\nCopied: importance_summary_plot_2023-02-10.png\nCopied: 2023_pr_2023-02-10.png\nCopied: 2023_pr_2023-02-12.png\nCopied: 2022_predicted_swe_2022-01-17.png\nCopied: 2022_predicted_swe_2022-12-30.png\nCopied: 2022_predicted_swe_2022-01-16.png\nCopied: 2023_predicted_swe_2023-02-12.png\nCopied: 2023_pr_2023-06-15.png\nCopied: 2022_predicted_swe_2022-04-17.png\nCopied: 2022_predicted_swe_2022-02-28.png\nCopied: 2022_pr_2022-06-15.png\nCopied: 2022_predicted_swe_2022-10-15.png\nCopied: 2023_pr_2023-02-11.png\nCopied: 2022_predicted_swe_2022-02-22.png\nCopied: 2023_predicted_swe_2023-01-18.png\nCopied: importance_summary_plot_2023-09-15.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2023_predicted_swe_2023-01-19.png\nCopied: 2023_predicted_swe_2023-01-20.png\nCopied: 2023_pr_2023-01-19.png\nCopied: 2022_pr_2022-02-28.png\nCopied: 2023_pr_2023-03-15.png\nCopied: 2023_pr_2023-09-15.png\nCopied: 2023_predicted_swe_2023-03-15.png\nCopied: 2023_pr_2023-01-20.png\nCopied: 2023_pr_2023-01-18.png\nCopied: importance_summary_plot_2023-02-11.png\nCopied: importance_summary_plot_2023-03-15.png\nCopied: 2023_predicted_swe_2023-02-11.png\nCopied: 2023_pr_2023-01-15.png\nCopied: importance_summary_plot_2023-06-15.png\nCopied: 2022_pr_2022-01-16.png\nCopied: 2023_predicted_swe_2023-01-15.png\nCopied: 2022_pr_2022-12-29.png\nCopied: 2022_pr_2022-10-15.png\nCopied: 2023_predicted_swe_2023-06-15.png\nCopied: 2023_pr_2023-09-16.png\nCopied: 2022_pr_2022-02-22.png\nCopied: 2022_pr_2022-10-16.png\nCopied: 2022_pr_2022-04-17.png\nCopied: 2022_predicted_swe_2022-06-15.png\nCopied: importance_summary_plot_2023-01-20.png\nCopied: 2023_predicted_swe_2023-09-16.png\nCopied: 2023_predicted_swe_2023-02-10.png\nCopied: importance_summary_plot_2023-09-16.png\nCopied: 2022_pr_2022-03-15.png\nCopied: 2022_predicted_swe_2022-10-16.png\nCopied: 2022_pr_2022-01-17.png\nCopied: 2023_predicted_swe_2023-09-15.png\nCopied: 2022_pr_2022-12-30.png\n",
  "history_begin_time" : 1697187723143,
  "history_end_time" : 1697187726463,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "Y79LmizZ5qEW",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-10-13\ntest start date:  2023-09-16\ntest end date:  2023-10-13\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: importance_summary_plot_2023-02-12.png\nCopied: 2022_predicted_swe_2022-03-15.png\nCopied: 2022_predicted_swe_2022-12-29.png\nCopied: partial_dependence_summary_plot_2023-01-20.png\nCopied: importance_summary_plot_2023-02-10.png\nCopied: 2023_pr_2023-02-10.png\nCopied: 2023_pr_2023-02-12.png\nCopied: 2022_predicted_swe_2022-01-17.png\nCopied: 2022_predicted_swe_2022-12-30.png\nCopied: 2022_predicted_swe_2022-01-16.png\nCopied: 2023_predicted_swe_2023-02-12.png\nCopied: 2023_pr_2023-06-15.png\nCopied: 2022_predicted_swe_2022-04-17.png\nCopied: 2022_predicted_swe_2022-02-28.png\nCopied: 2022_pr_2022-06-15.png\nCopied: 2022_predicted_swe_2022-10-15.png\nCopied: 2023_pr_2023-02-11.png\nCopied: 2022_predicted_swe_2022-02-22.png\nCopied: 2023_predicted_swe_2023-01-18.png\nCopied: importance_summary_plot_2023-09-15.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2023_predicted_swe_2023-01-19.png\nCopied: 2023_predicted_swe_2023-01-20.png\nCopied: 2023_pr_2023-01-19.png\nCopied: 2022_pr_2022-02-28.png\nCopied: 2023_pr_2023-09-15.png\nCopied: 2023_pr_2023-01-20.png\nCopied: 2023_pr_2023-01-18.png\nCopied: importance_summary_plot_2023-02-11.png\nCopied: 2023_predicted_swe_2023-02-11.png\nCopied: 2023_pr_2023-01-15.png\nCopied: importance_summary_plot_2023-06-15.png\nCopied: 2022_pr_2022-01-16.png\nCopied: 2023_predicted_swe_2023-01-15.png\nCopied: 2022_pr_2022-12-29.png\nCopied: 2022_pr_2022-10-15.png\nCopied: 2023_predicted_swe_2023-06-15.png\nCopied: 2023_pr_2023-09-16.png\nCopied: 2022_pr_2022-02-22.png\nCopied: 2022_pr_2022-10-16.png\nCopied: 2022_pr_2022-04-17.png\nCopied: 2022_predicted_swe_2022-06-15.png\nCopied: importance_summary_plot_2023-01-20.png\nCopied: 2023_predicted_swe_2023-09-16.png\nCopied: 2023_predicted_swe_2023-02-10.png\nCopied: importance_summary_plot_2023-09-16.png\nCopied: 2022_pr_2022-03-15.png\nCopied: 2022_predicted_swe_2022-10-16.png\nCopied: 2022_pr_2022-01-17.png\nCopied: 2023_predicted_swe_2023-09-15.png\nCopied: 2022_pr_2022-12-30.png\n",
  "history_begin_time" : 1697187283052,
  "history_end_time" : 1697187284983,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "muoh37z56v1",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-10-09\ntest start date:  2023-09-16\ntest end date:  2023-10-09\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: importance_summary_plot_2023-02-12.png\nCopied: 2022_predicted_swe_2022-03-15.png\nCopied: 2022_predicted_swe_2022-12-29.png\nCopied: partial_dependence_summary_plot_2023-01-20.png\nCopied: importance_summary_plot_2023-02-10.png\nCopied: 2023_pr_2023-02-10.png\nCopied: 2023_pr_2023-02-12.png\nCopied: 2022_predicted_swe_2022-01-17.png\nCopied: 2022_predicted_swe_2022-12-30.png\nCopied: 2022_predicted_swe_2022-01-16.png\nCopied: 2023_predicted_swe_2023-02-12.png\nCopied: 2023_pr_2023-06-15.png\nCopied: 2022_predicted_swe_2022-04-17.png\nCopied: 2022_predicted_swe_2022-02-28.png\nCopied: 2022_pr_2022-06-15.png\nCopied: 2022_predicted_swe_2022-10-15.png\nCopied: 2023_pr_2023-02-11.png\nCopied: 2022_predicted_swe_2022-02-22.png\nCopied: 2023_predicted_swe_2023-01-18.png\nCopied: importance_summary_plot_2023-09-15.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2023_predicted_swe_2023-01-19.png\nCopied: 2023_predicted_swe_2023-01-20.png\nCopied: 2023_pr_2023-01-19.png\nCopied: 2022_pr_2022-02-28.png\nCopied: 2023_pr_2023-09-15.png\nCopied: 2023_pr_2023-01-20.png\nCopied: 2023_pr_2023-01-18.png\nCopied: importance_summary_plot_2023-02-11.png\nCopied: 2023_predicted_swe_2023-02-11.png\nCopied: 2023_pr_2023-01-15.png\nCopied: importance_summary_plot_2023-06-15.png\nCopied: 2022_pr_2022-01-16.png\nCopied: 2023_predicted_swe_2023-01-15.png\nCopied: 2022_pr_2022-12-29.png\nCopied: 2022_pr_2022-10-15.png\nCopied: 2023_predicted_swe_2023-06-15.png\nCopied: 2023_pr_2023-09-16.png\nCopied: 2022_pr_2022-02-22.png\nCopied: 2022_pr_2022-10-16.png\nCopied: 2022_pr_2022-04-17.png\nCopied: 2022_predicted_swe_2022-06-15.png\nCopied: importance_summary_plot_2023-01-20.png\nCopied: 2023_predicted_swe_2023-09-16.png\nCopied: 2023_predicted_swe_2023-02-10.png\nCopied: importance_summary_plot_2023-09-16.png\nCopied: 2022_pr_2022-03-15.png\nCopied: 2022_predicted_swe_2022-10-16.png\nCopied: 2022_pr_2022-01-17.png\nCopied: 2023_predicted_swe_2023-09-15.png\nCopied: 2022_pr_2022-12-30.png\n",
  "history_begin_time" : 1696864262292,
  "history_end_time" : 1696864264800,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "md0gddfmafp",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-10-09\ntest start date:  2023-09-15\ntest end date:  2023-10-09\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: importance_summary_plot_2023-02-12.png\nCopied: 2022_predicted_swe_2022-03-15.png\nCopied: 2022_predicted_swe_2022-12-29.png\nCopied: partial_dependence_summary_plot_2023-01-20.png\nCopied: importance_summary_plot_2023-02-10.png\nCopied: 2023_pr_2023-02-10.png\nCopied: 2023_pr_2023-02-12.png\nCopied: 2022_predicted_swe_2022-01-17.png\nCopied: 2022_predicted_swe_2022-12-30.png\nCopied: 2022_predicted_swe_2022-01-16.png\nCopied: 2023_predicted_swe_2023-02-12.png\nCopied: 2023_pr_2023-06-15.png\nCopied: 2022_predicted_swe_2022-04-17.png\nCopied: 2022_predicted_swe_2022-02-28.png\nCopied: 2022_pr_2022-06-15.png\nCopied: 2022_predicted_swe_2022-10-15.png\nCopied: 2023_pr_2023-02-11.png\nCopied: 2022_predicted_swe_2022-02-22.png\nCopied: 2023_predicted_swe_2023-01-18.png\nCopied: importance_summary_plot_2023-09-15.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2023_predicted_swe_2023-01-19.png\nCopied: 2023_predicted_swe_2023-01-20.png\nCopied: 2023_pr_2023-01-19.png\nCopied: 2022_pr_2022-02-28.png\nCopied: 2023_pr_2023-09-15.png\nCopied: 2023_pr_2023-01-20.png\nCopied: 2023_pr_2023-01-18.png\nCopied: importance_summary_plot_2023-02-11.png\nCopied: 2023_predicted_swe_2023-02-11.png\nCopied: 2023_pr_2023-01-15.png\nCopied: importance_summary_plot_2023-06-15.png\nCopied: 2022_pr_2022-01-16.png\nCopied: 2023_predicted_swe_2023-01-15.png\nCopied: 2022_pr_2022-12-29.png\nCopied: 2022_pr_2022-10-15.png\nCopied: 2023_predicted_swe_2023-06-15.png\nCopied: 2022_pr_2022-02-22.png\nCopied: 2022_pr_2022-10-16.png\nCopied: 2022_pr_2022-04-17.png\nCopied: 2022_predicted_swe_2022-06-15.png\nCopied: importance_summary_plot_2023-01-20.png\nCopied: 2023_predicted_swe_2023-02-10.png\nCopied: 2022_pr_2022-03-15.png\nCopied: 2022_predicted_swe_2022-10-16.png\nCopied: 2022_pr_2022-01-17.png\nCopied: 2023_predicted_swe_2023-09-15.png\nCopied: 2022_pr_2022-12-30.png\n",
  "history_begin_time" : 1696862761762,
  "history_end_time" : 1696862765220,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "x1297da3en8",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-10-09\ntest start date:  2023-06-15\ntest end date:  2023-10-09\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: importance_summary_plot_2023-02-12.png\nCopied: 2022_predicted_swe_2022-03-15.png\nCopied: 2022_predicted_swe_2022-12-29.png\nCopied: partial_dependence_summary_plot_2023-01-20.png\nCopied: importance_summary_plot_2023-02-10.png\nCopied: 2023_pr_2023-02-10.png\nCopied: 2023_pr_2023-02-12.png\nCopied: 2022_predicted_swe_2022-01-17.png\nCopied: 2022_predicted_swe_2022-12-30.png\nCopied: 2022_predicted_swe_2022-01-16.png\nCopied: 2023_predicted_swe_2023-02-12.png\nCopied: 2023_pr_2023-06-15.png\nCopied: 2022_predicted_swe_2022-04-17.png\nCopied: 2022_predicted_swe_2022-02-28.png\nCopied: 2022_pr_2022-06-15.png\nCopied: 2022_predicted_swe_2022-10-15.png\nCopied: 2023_pr_2023-02-11.png\nCopied: 2022_predicted_swe_2022-02-22.png\nCopied: 2023_predicted_swe_2023-01-18.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2023_predicted_swe_2023-01-19.png\nCopied: 2023_predicted_swe_2023-01-20.png\nCopied: 2023_pr_2023-01-19.png\nCopied: 2022_pr_2022-02-28.png\nCopied: 2023_pr_2023-01-20.png\nCopied: 2023_pr_2023-01-18.png\nCopied: importance_summary_plot_2023-02-11.png\nCopied: 2023_predicted_swe_2023-02-11.png\nCopied: 2023_pr_2023-01-15.png\nCopied: importance_summary_plot_2023-06-15.png\nCopied: 2022_pr_2022-01-16.png\nCopied: 2023_predicted_swe_2023-01-15.png\nCopied: 2022_pr_2022-12-29.png\nCopied: 2022_pr_2022-10-15.png\nCopied: 2023_predicted_swe_2023-06-15.png\nCopied: 2022_pr_2022-02-22.png\nCopied: 2022_pr_2022-10-16.png\nCopied: 2022_pr_2022-04-17.png\nCopied: 2022_predicted_swe_2022-06-15.png\nCopied: importance_summary_plot_2023-01-20.png\nCopied: 2023_predicted_swe_2023-02-10.png\nCopied: 2022_pr_2022-03-15.png\nCopied: 2022_predicted_swe_2022-10-16.png\nCopied: 2022_pr_2022-01-17.png\nCopied: 2022_pr_2022-12-30.png\n",
  "history_begin_time" : 1696832548979,
  "history_end_time" : 1696832551330,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "l0NsZez8yo4y",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-10-09\ntest start date:  2023-02-12\ntest end date:  2023-10-09\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: importance_summary_plot_2023-02-12.png\nCopied: 2022_predicted_swe_2022-03-15.png\nCopied: 2022_predicted_swe_2022-12-29.png\nCopied: partial_dependence_summary_plot_2023-01-20.png\nCopied: importance_summary_plot_2023-02-10.png\nCopied: 2023_pr_2023-02-10.png\nCopied: 2023_pr_2023-02-12.png\nCopied: 2022_predicted_swe_2022-01-17.png\nCopied: 2022_predicted_swe_2022-12-30.png\nCopied: 2022_predicted_swe_2022-01-16.png\nCopied: 2023_predicted_swe_2023-02-12.png\nCopied: 2022_predicted_swe_2022-04-17.png\nCopied: 2022_predicted_swe_2022-02-28.png\nCopied: 2022_pr_2022-06-15.png\nCopied: 2022_predicted_swe_2022-10-15.png\nCopied: 2023_pr_2023-02-11.png\nCopied: 2022_predicted_swe_2022-02-22.png\nCopied: 2023_predicted_swe_2023-01-18.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2023_predicted_swe_2023-01-19.png\nCopied: 2023_predicted_swe_2023-01-20.png\nCopied: 2023_pr_2023-01-19.png\nCopied: 2022_pr_2022-02-28.png\nCopied: 2023_pr_2023-01-20.png\nCopied: 2023_pr_2023-01-18.png\nCopied: importance_summary_plot_2023-02-11.png\nCopied: 2023_predicted_swe_2023-02-11.png\nCopied: 2023_pr_2023-01-15.png\nCopied: 2022_pr_2022-01-16.png\nCopied: 2023_predicted_swe_2023-01-15.png\nCopied: 2022_pr_2022-12-29.png\nCopied: 2022_pr_2022-10-15.png\nCopied: 2022_pr_2022-02-22.png\nCopied: 2022_pr_2022-10-16.png\nCopied: 2022_pr_2022-04-17.png\nCopied: 2022_predicted_swe_2022-06-15.png\nCopied: importance_summary_plot_2023-01-20.png\nCopied: 2023_predicted_swe_2023-02-10.png\nCopied: 2022_pr_2022-03-15.png\nCopied: 2022_predicted_swe_2022-10-16.png\nCopied: 2022_pr_2022-01-17.png\nCopied: 2022_pr_2022-12-30.png\n",
  "history_begin_time" : 1696832170373,
  "history_end_time" : 1696832171284,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "yg8orw6jgt0",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-10-09\ntest start date:  2023-02-12\ntest end date:  2023-10-09\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: 2022_predicted_swe_2022-03-15.png\nCopied: 2022_predicted_swe_2022-12-29.png\nCopied: partial_dependence_summary_plot_2023-01-20.png\nCopied: importance_summary_plot_2023-02-10.png\nCopied: 2023_pr_2023-02-10.png\nCopied: 2023_pr_2023-02-12.png\nCopied: 2022_predicted_swe_2022-01-17.png\nCopied: 2022_predicted_swe_2022-12-30.png\nCopied: 2022_predicted_swe_2022-01-16.png\nCopied: 2023_predicted_swe_2023-02-12.png\nCopied: 2022_predicted_swe_2022-04-17.png\nCopied: 2022_predicted_swe_2022-02-28.png\nCopied: 2022_pr_2022-06-15.png\nCopied: 2022_predicted_swe_2022-10-15.png\nCopied: 2023_pr_2023-02-11.png\nCopied: 2022_predicted_swe_2022-02-22.png\nCopied: 2023_predicted_swe_2023-01-18.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2023_predicted_swe_2023-01-19.png\nCopied: 2023_predicted_swe_2023-01-20.png\nCopied: 2023_pr_2023-01-19.png\nCopied: 2022_pr_2022-02-28.png\nCopied: 2023_pr_2023-01-20.png\nCopied: 2023_pr_2023-01-18.png\nCopied: importance_summary_plot_2023-02-11.png\nCopied: 2023_predicted_swe_2023-02-11.png\nCopied: 2023_pr_2023-01-15.png\nCopied: 2022_pr_2022-01-16.png\nCopied: 2023_predicted_swe_2023-01-15.png\nCopied: 2022_pr_2022-12-29.png\nCopied: 2022_pr_2022-10-15.png\nCopied: 2022_pr_2022-02-22.png\nCopied: 2022_pr_2022-10-16.png\nCopied: 2022_pr_2022-04-17.png\nCopied: 2022_predicted_swe_2022-06-15.png\nCopied: importance_summary_plot_2023-01-20.png\nCopied: 2023_predicted_swe_2023-02-10.png\nCopied: 2022_pr_2022-03-15.png\nCopied: 2022_predicted_swe_2022-10-16.png\nCopied: 2022_pr_2022-01-17.png\nCopied: 2022_pr_2022-12-30.png\n",
  "history_begin_time" : 1696832124179,
  "history_end_time" : 1696832126631,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "WKpSjoWW7X7w",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-10-09\ntest start date:  2023-02-11\ntest end date:  2023-10-09\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: 2022_predicted_swe_2022-03-15.png\nCopied: 2022_predicted_swe_2022-12-29.png\nCopied: partial_dependence_summary_plot_2023-01-20.png\nCopied: importance_summary_plot_2023-02-10.png\nCopied: 2023_pr_2023-02-10.png\nCopied: 2022_predicted_swe_2022-01-17.png\nCopied: 2022_predicted_swe_2022-12-30.png\nCopied: 2022_predicted_swe_2022-01-16.png\nCopied: 2022_predicted_swe_2022-04-17.png\nCopied: 2022_predicted_swe_2022-02-28.png\nCopied: 2022_pr_2022-06-15.png\nCopied: 2022_predicted_swe_2022-10-15.png\nCopied: 2023_pr_2023-02-11.png\nCopied: 2022_predicted_swe_2022-02-22.png\nCopied: 2023_predicted_swe_2023-01-18.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2023_predicted_swe_2023-01-19.png\nCopied: 2023_predicted_swe_2023-01-20.png\nCopied: 2023_pr_2023-01-19.png\nCopied: 2022_pr_2022-02-28.png\nCopied: 2023_pr_2023-01-20.png\nCopied: 2023_pr_2023-01-18.png\nCopied: importance_summary_plot_2023-02-11.png\nCopied: 2023_predicted_swe_2023-02-11.png\nCopied: 2023_pr_2023-01-15.png\nCopied: 2022_pr_2022-01-16.png\nCopied: 2023_predicted_swe_2023-01-15.png\nCopied: 2022_pr_2022-12-29.png\nCopied: 2022_pr_2022-10-15.png\nCopied: 2022_pr_2022-02-22.png\nCopied: 2022_pr_2022-10-16.png\nCopied: 2022_pr_2022-04-17.png\nCopied: 2022_predicted_swe_2022-06-15.png\nCopied: importance_summary_plot_2023-01-20.png\nCopied: 2023_predicted_swe_2023-02-10.png\nCopied: 2022_pr_2022-03-15.png\nCopied: 2022_predicted_swe_2022-10-16.png\nCopied: 2022_pr_2022-01-17.png\nCopied: 2022_pr_2022-12-30.png\n",
  "history_begin_time" : 1696831808254,
  "history_end_time" : 1696831809239,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "D8zzNjQtIYw9",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-10-09\ntest start date:  2023-02-11\ntest end date:  2023-10-09\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: 2022_predicted_swe_2022-03-15.png\nCopied: 2022_predicted_swe_2022-12-29.png\nCopied: partial_dependence_summary_plot_2023-01-20.png\nCopied: importance_summary_plot_2023-02-10.png\nCopied: 2023_pr_2023-02-10.png\nCopied: 2022_predicted_swe_2022-01-17.png\nCopied: 2022_predicted_swe_2022-12-30.png\nCopied: 2022_predicted_swe_2022-01-16.png\nCopied: 2022_predicted_swe_2022-04-17.png\nCopied: 2022_predicted_swe_2022-02-28.png\nCopied: 2022_pr_2022-06-15.png\nCopied: 2022_predicted_swe_2022-10-15.png\nCopied: 2023_pr_2023-02-11.png\nCopied: 2022_predicted_swe_2022-02-22.png\nCopied: 2023_predicted_swe_2023-01-18.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2023_predicted_swe_2023-01-19.png\nCopied: 2023_predicted_swe_2023-01-20.png\nCopied: 2023_pr_2023-01-19.png\nCopied: 2022_pr_2022-02-28.png\nCopied: 2023_pr_2023-01-20.png\nCopied: 2023_pr_2023-01-18.png\nCopied: 2023_predicted_swe_2023-02-11.png\nCopied: 2023_pr_2023-01-15.png\nCopied: 2022_pr_2022-01-16.png\nCopied: 2023_predicted_swe_2023-01-15.png\nCopied: 2022_pr_2022-12-29.png\nCopied: 2022_pr_2022-10-15.png\nCopied: 2022_pr_2022-02-22.png\nCopied: 2022_pr_2022-10-16.png\nCopied: 2022_pr_2022-04-17.png\nCopied: 2022_predicted_swe_2022-06-15.png\nCopied: importance_summary_plot_2023-01-20.png\nCopied: 2023_predicted_swe_2023-02-10.png\nCopied: 2022_pr_2022-03-15.png\nCopied: 2022_predicted_swe_2022-10-16.png\nCopied: 2022_pr_2022-01-17.png\nCopied: 2022_pr_2022-12-30.png\n",
  "history_begin_time" : 1696831339492,
  "history_end_time" : 1696831340353,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "h79o2r6peo7",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-10-09\ntest start date:  2023-02-11\ntest end date:  2023-10-09\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: 2022_predicted_swe_2022-03-15.png\nCopied: 2022_predicted_swe_2022-12-29.png\nCopied: partial_dependence_summary_plot_2023-01-20.png\nCopied: importance_summary_plot_2023-02-10.png\nCopied: 2023_pr_2023-02-10.png\nCopied: 2022_predicted_swe_2022-01-17.png\nCopied: 2022_predicted_swe_2022-12-30.png\nCopied: 2022_predicted_swe_2022-01-16.png\nCopied: 2022_predicted_swe_2022-04-17.png\nCopied: 2022_predicted_swe_2022-02-28.png\nCopied: 2022_pr_2022-06-15.png\nCopied: 2022_predicted_swe_2022-10-15.png\nCopied: 2023_pr_2023-02-11.png\nCopied: 2022_predicted_swe_2022-02-22.png\nCopied: 2023_predicted_swe_2023-01-18.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2023_predicted_swe_2023-01-19.png\nCopied: 2023_predicted_swe_2023-01-20.png\nCopied: 2023_pr_2023-01-19.png\nCopied: 2022_pr_2022-02-28.png\nCopied: 2023_pr_2023-01-20.png\nCopied: 2023_pr_2023-01-18.png\nCopied: 2023_predicted_swe_2023-02-11.png\nCopied: 2023_pr_2023-01-15.png\nCopied: 2022_pr_2022-01-16.png\nCopied: 2023_predicted_swe_2023-01-15.png\nCopied: 2022_pr_2022-12-29.png\nCopied: 2022_pr_2022-10-15.png\nCopied: 2022_pr_2022-02-22.png\nCopied: 2022_pr_2022-10-16.png\nCopied: 2022_pr_2022-04-17.png\nCopied: 2022_predicted_swe_2022-06-15.png\nCopied: importance_summary_plot_2023-01-20.png\nCopied: 2023_predicted_swe_2023-02-10.png\nCopied: 2022_pr_2022-03-15.png\nCopied: 2022_predicted_swe_2022-10-16.png\nCopied: 2022_pr_2022-01-17.png\nCopied: 2022_pr_2022-12-30.png\n",
  "history_begin_time" : 1696830439400,
  "history_end_time" : 1696830441781,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "iLA1w4scqBef",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-10-09\ntest start date:  2023-02-10\ntest end date:  2023-10-09\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: 2022_predicted_swe_2022-03-15.png\nCopied: 2022_predicted_swe_2022-12-29.png\nCopied: partial_dependence_summary_plot_2023-01-20.png\nCopied: importance_summary_plot_2023-02-10.png\nCopied: 2023_pr_2023-02-10.png\nCopied: 2022_predicted_swe_2022-01-17.png\nCopied: 2022_predicted_swe_2022-12-30.png\nCopied: 2022_predicted_swe_2022-01-16.png\nCopied: 2022_predicted_swe_2022-04-17.png\nCopied: 2022_predicted_swe_2022-02-28.png\nCopied: 2022_pr_2022-06-15.png\nCopied: 2022_predicted_swe_2022-10-15.png\nCopied: 2022_predicted_swe_2022-02-22.png\nCopied: 2023_predicted_swe_2023-01-18.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2023_predicted_swe_2023-01-19.png\nCopied: 2023_predicted_swe_2023-01-20.png\nCopied: 2023_pr_2023-01-19.png\nCopied: 2022_pr_2022-02-28.png\nCopied: 2023_pr_2023-01-20.png\nCopied: 2023_pr_2023-01-18.png\nCopied: 2023_pr_2023-01-15.png\nCopied: 2022_pr_2022-01-16.png\nCopied: 2023_predicted_swe_2023-01-15.png\nCopied: 2022_pr_2022-12-29.png\nCopied: 2022_pr_2022-10-15.png\nCopied: 2022_pr_2022-02-22.png\nCopied: 2022_pr_2022-10-16.png\nCopied: 2022_pr_2022-04-17.png\nCopied: 2022_predicted_swe_2022-06-15.png\nCopied: importance_summary_plot_2023-01-20.png\nCopied: 2023_predicted_swe_2023-02-10.png\nCopied: 2022_pr_2022-03-15.png\nCopied: 2022_predicted_swe_2022-10-16.png\nCopied: 2022_pr_2022-01-17.png\nCopied: 2022_pr_2022-12-30.png\n",
  "history_begin_time" : 1696830005855,
  "history_end_time" : 1696830007160,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "CL0ThoN0XZXO",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-10-08\ntest start date:  2023-02-10\ntest end date:  2023-10-08\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: 2022_predicted_swe_2022-03-15.png\nCopied: 2022_predicted_swe_2022-12-29.png\nCopied: partial_dependence_summary_plot_2023-01-20.png\nCopied: 2023_pr_2023-02-10.png\nCopied: 2022_predicted_swe_2022-01-17.png\nCopied: 2022_predicted_swe_2022-12-30.png\nCopied: 2022_predicted_swe_2022-01-16.png\nCopied: 2022_predicted_swe_2022-04-17.png\nCopied: 2022_predicted_swe_2022-02-28.png\nCopied: 2022_pr_2022-06-15.png\nCopied: 2022_predicted_swe_2022-10-15.png\nCopied: 2022_predicted_swe_2022-02-22.png\nCopied: 2023_predicted_swe_2023-01-18.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2023_predicted_swe_2023-01-19.png\nCopied: 2023_predicted_swe_2023-01-20.png\nCopied: 2023_pr_2023-01-19.png\nCopied: 2022_pr_2022-02-28.png\nCopied: 2023_pr_2023-01-20.png\nCopied: 2023_pr_2023-01-18.png\nCopied: 2023_pr_2023-01-15.png\nCopied: 2022_pr_2022-01-16.png\nCopied: 2023_predicted_swe_2023-01-15.png\nCopied: 2022_pr_2022-12-29.png\nCopied: 2022_pr_2022-10-15.png\nCopied: 2022_pr_2022-02-22.png\nCopied: 2022_pr_2022-10-16.png\nCopied: 2022_pr_2022-04-17.png\nCopied: 2022_predicted_swe_2022-06-15.png\nCopied: importance_summary_plot_2023-01-20.png\nCopied: 2023_predicted_swe_2023-02-10.png\nCopied: 2022_pr_2022-03-15.png\nCopied: 2022_predicted_swe_2022-10-16.png\nCopied: 2022_pr_2022-01-17.png\nCopied: 2022_pr_2022-12-30.png\n",
  "history_begin_time" : 1696787788115,
  "history_end_time" : 1696787789011,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "k9m6p42jqih",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-10-08\ntest start date:  2023-02-10\ntest end date:  2023-10-08\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: 2022_predicted_swe_2022-03-15.png\nCopied: 2022_predicted_swe_2022-12-29.png\nCopied: partial_dependence_summary_plot_2023-01-20.png\nCopied: 2023_pr_2023-02-10.png\nCopied: 2022_predicted_swe_2022-01-17.png\nCopied: 2022_predicted_swe_2022-12-30.png\nCopied: 2022_predicted_swe_2022-01-16.png\nCopied: 2022_predicted_swe_2022-04-17.png\nCopied: 2022_predicted_swe_2022-02-28.png\nCopied: 2022_pr_2022-06-15.png\nCopied: 2022_predicted_swe_2022-10-15.png\nCopied: 2022_predicted_swe_2022-02-22.png\nCopied: 2023_predicted_swe_2023-01-18.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2023_predicted_swe_2023-01-19.png\nCopied: 2023_predicted_swe_2023-01-20.png\nCopied: 2023_pr_2023-01-19.png\nCopied: 2022_pr_2022-02-28.png\nCopied: 2023_pr_2023-01-20.png\nCopied: 2023_pr_2023-01-18.png\nCopied: 2023_pr_2023-01-15.png\nCopied: 2022_pr_2022-01-16.png\nCopied: 2023_predicted_swe_2023-01-15.png\nCopied: 2022_pr_2022-12-29.png\nCopied: 2022_pr_2022-10-15.png\nCopied: 2022_pr_2022-02-22.png\nCopied: 2022_pr_2022-10-16.png\nCopied: 2022_pr_2022-04-17.png\nCopied: 2022_predicted_swe_2022-06-15.png\nCopied: importance_summary_plot_2023-01-20.png\nCopied: 2022_pr_2022-03-15.png\nCopied: 2022_predicted_swe_2022-10-16.png\nCopied: 2022_pr_2022-01-17.png\nCopied: 2022_pr_2022-12-30.png\n",
  "history_begin_time" : 1696787750802,
  "history_end_time" : 1696787753179,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "7dlepd8eht0",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-10-08\ntest start date:  2023-01-20\ntest end date:  2023-10-08\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: 2022_predicted_swe_2022-03-15.png\nCopied: 2022_predicted_swe_2022-12-29.png\nCopied: partial_dependence_summary_plot_2023-01-20.png\nCopied: 2022_predicted_swe_2022-01-17.png\nCopied: 2022_predicted_swe_2022-12-30.png\nCopied: 2022_predicted_swe_2022-01-16.png\nCopied: 2022_predicted_swe_2022-04-17.png\nCopied: 2022_predicted_swe_2022-02-28.png\nCopied: 2022_pr_2022-06-15.png\nCopied: 2022_predicted_swe_2022-10-15.png\nCopied: 2022_predicted_swe_2022-02-22.png\nCopied: 2023_predicted_swe_2023-01-18.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2023_predicted_swe_2023-01-19.png\nCopied: 2023_predicted_swe_2023-01-20.png\nCopied: 2023_pr_2023-01-19.png\nCopied: 2022_pr_2022-02-28.png\nCopied: 2023_pr_2023-01-20.png\nCopied: 2023_pr_2023-01-18.png\nCopied: 2023_pr_2023-01-15.png\nCopied: 2022_pr_2022-01-16.png\nCopied: 2023_predicted_swe_2023-01-15.png\nCopied: 2022_pr_2022-12-29.png\nCopied: 2022_pr_2022-10-15.png\nCopied: 2022_pr_2022-02-22.png\nCopied: 2022_pr_2022-10-16.png\nCopied: 2022_pr_2022-04-17.png\nCopied: 2022_predicted_swe_2022-06-15.png\nCopied: importance_summary_plot_2023-01-20.png\nCopied: 2022_pr_2022-03-15.png\nCopied: 2022_predicted_swe_2022-10-16.png\nCopied: 2022_pr_2022-01-17.png\nCopied: 2022_pr_2022-12-30.png\n",
  "history_begin_time" : 1696786928901,
  "history_end_time" : 1696786931219,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "gQK1yh70lLri",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-10-08\ntest start date:  2023-01-20\ntest end date:  2023-10-08\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: 2022_predicted_swe_2022-03-15.png\nCopied: 2022_predicted_swe_2022-12-29.png\nCopied: partial_dependence_summary_plot_2023-01-20.png\nCopied: 2022_predicted_swe_2022-01-17.png\nCopied: 2022_predicted_swe_2022-12-30.png\nCopied: 2022_predicted_swe_2022-01-16.png\nCopied: 2022_predicted_swe_2022-04-17.png\nCopied: 2022_predicted_swe_2022-02-28.png\nCopied: 2022_pr_2022-06-15.png\nCopied: 2022_predicted_swe_2022-10-15.png\nCopied: 2022_predicted_swe_2022-02-22.png\nCopied: 2023_predicted_swe_2023-01-18.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2023_predicted_swe_2023-01-19.png\nCopied: 2023_predicted_swe_2023-01-20.png\nCopied: 2023_pr_2023-01-19.png\nCopied: 2022_pr_2022-02-28.png\nCopied: 2023_pr_2023-01-20.png\nCopied: 2023_pr_2023-01-18.png\nCopied: 2023_pr_2023-01-15.png\nCopied: 2022_pr_2022-01-16.png\nCopied: 2023_predicted_swe_2023-01-15.png\nCopied: 2022_pr_2022-12-29.png\nCopied: 2022_pr_2022-10-15.png\nCopied: 2022_pr_2022-02-22.png\nCopied: 2022_pr_2022-10-16.png\nCopied: 2022_pr_2022-04-17.png\nCopied: 2022_predicted_swe_2022-06-15.png\nCopied: importance_summary_plot_2023-01-20.png\nCopied: 2022_pr_2022-03-15.png\nCopied: 2022_predicted_swe_2022-10-16.png\nCopied: 2022_pr_2022-01-17.png\nCopied: 2022_pr_2022-12-30.png\n",
  "history_begin_time" : 1696786368874,
  "history_end_time" : 1696786369779,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "vGrVbF0L17ai",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-10-08\ntest start date:  2023-01-20\ntest end date:  2023-10-08\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: 2022_predicted_swe_2022-03-15.png\nCopied: 2022_predicted_swe_2022-12-29.png\nCopied: partial_dependence_summary_plot_2023-01-20.png\nCopied: 2022_predicted_swe_2022-01-17.png\nCopied: 2022_predicted_swe_2022-12-30.png\nCopied: 2022_predicted_swe_2022-01-16.png\nCopied: 2022_predicted_swe_2022-04-17.png\nCopied: 2022_predicted_swe_2022-02-28.png\nCopied: 2022_pr_2022-06-15.png\nCopied: 2022_predicted_swe_2022-10-15.png\nCopied: 2022_predicted_swe_2022-02-22.png\nCopied: 2023_predicted_swe_2023-01-18.png\nCopied: et-model-feature-importance-latest.png\nCopied: 2023_predicted_swe_2023-01-19.png\nCopied: 2023_predicted_swe_2023-01-20.png\nCopied: 2023_pr_2023-01-19.png\nCopied: 2022_pr_2022-02-28.png\nCopied: 2023_pr_2023-01-20.png\nCopied: 2023_pr_2023-01-18.png\nCopied: 2023_pr_2023-01-15.png\nCopied: 2022_pr_2022-01-16.png\nCopied: 2023_predicted_swe_2023-01-15.png\nCopied: 2022_pr_2022-12-29.png\nCopied: 2022_pr_2022-10-15.png\nCopied: 2022_pr_2022-02-22.png\nCopied: 2022_pr_2022-10-16.png\nCopied: 2022_pr_2022-04-17.png\nCopied: 2022_predicted_swe_2022-06-15.png\nCopied: importance_summary_plot_2023-01-20.png\nCopied: 2022_pr_2022-03-15.png\nCopied: 2022_predicted_swe_2022-10-16.png\nCopied: 2022_pr_2022-01-17.png\nCopied: 2022_pr_2022-12-30.png\n",
  "history_begin_time" : 1696785865259,
  "history_end_time" : 1696785866135,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "IPipQ4vPRqc7",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "X has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\nX has feature names, but ExtraTreesRegressor was fitted without feature names\ntest start date:  2023-01-20\n",
  "history_begin_time" : 1696782560802,
  "history_end_time" : 1696782561742,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "QlwOSlU1bzT9",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename}')\n",
  "history_output" : "today date = 2023-10-08\ntest start date:  2023-01-20\ntest end date:  2023-10-08\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: 2022_predicted_swe_2022-03-15.png\nCopied: 2022_predicted_swe_2022-12-29.png\nCopied: 2022_predicted_swe_2022-01-17.png\nCopied: 2022_predicted_swe_2022-12-30.png\nCopied: 2022_predicted_swe_2022-01-16.png\nCopied: 2022_predicted_swe_2022-04-17.png\nCopied: 2022_predicted_swe_2022-02-28.png\nCopied: 2022_pr_2022-06-15.png\nCopied: 2022_predicted_swe_2022-10-15.png\nCopied: 2022_predicted_swe_2022-02-22.png\nCopied: 2023_predicted_swe_2023-01-18.png\nCopied: 2023_predicted_swe_2023-01-19.png\nCopied: 2023_predicted_swe_2023-01-20.png\nCopied: 2023_pr_2023-01-19.png\nCopied: 2022_pr_2022-02-28.png\nCopied: 2023_pr_2023-01-20.png\nCopied: 2023_pr_2023-01-18.png\nCopied: 2023_pr_2023-01-15.png\nCopied: 2022_pr_2022-01-16.png\nCopied: 2023_predicted_swe_2023-01-15.png\nCopied: 2022_pr_2022-12-29.png\nCopied: 2022_pr_2022-10-15.png\nCopied: 2022_pr_2022-02-22.png\nCopied: 2022_pr_2022-10-16.png\nCopied: 2022_pr_2022-04-17.png\nCopied: 2022_predicted_swe_2022-06-15.png\nCopied: 2022_pr_2022-03-15.png\nCopied: 2022_predicted_swe_2022-10-16.png\nCopied: 2022_pr_2022-01-17.png\nCopied: 2022_pr_2022-12-30.png\n",
  "history_begin_time" : 1696773919735,
  "history_end_time" : 1696773920555,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "WCbPlL9vshQq",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\nimport shutil\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename} to {destination_folder}')\n",
  "history_output" : "today date = 2023-10-08\ntest start date:  2023-01-20\ntest end date:  2023-10-08\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: 2022_predicted_swe_2022-03-15.png to /var/www/html/swe_forecasting/plots/\nCopied: 2022_predicted_swe_2022-12-29.png to /var/www/html/swe_forecasting/plots/\nCopied: 2022_predicted_swe_2022-01-17.png to /var/www/html/swe_forecasting/plots/\nCopied: 2022_predicted_swe_2022-12-30.png to /var/www/html/swe_forecasting/plots/\nCopied: 2022_predicted_swe_2022-01-16.png to /var/www/html/swe_forecasting/plots/\nCopied: 2022_predicted_swe_2022-04-17.png to /var/www/html/swe_forecasting/plots/\nCopied: 2022_predicted_swe_2022-02-28.png to /var/www/html/swe_forecasting/plots/\nCopied: 2022_pr_2022-06-15.png to /var/www/html/swe_forecasting/plots/\nCopied: 2022_predicted_swe_2022-10-15.png to /var/www/html/swe_forecasting/plots/\nCopied: 2022_predicted_swe_2022-02-22.png to /var/www/html/swe_forecasting/plots/\nCopied: 2023_predicted_swe_2023-01-18.png to /var/www/html/swe_forecasting/plots/\nCopied: 2023_predicted_swe_2023-01-19.png to /var/www/html/swe_forecasting/plots/\nCopied: 2023_predicted_swe_2023-01-20.png to /var/www/html/swe_forecasting/plots/\nCopied: 2023_pr_2023-01-19.png to /var/www/html/swe_forecasting/plots/\nCopied: 2022_pr_2022-02-28.png to /var/www/html/swe_forecasting/plots/\nCopied: 2023_pr_2023-01-20.png to /var/www/html/swe_forecasting/plots/\nCopied: 2023_pr_2023-01-18.png to /var/www/html/swe_forecasting/plots/\nCopied: 2023_pr_2023-01-15.png to /var/www/html/swe_forecasting/plots/\nCopied: 2022_pr_2022-01-16.png to /var/www/html/swe_forecasting/plots/\nCopied: 2023_predicted_swe_2023-01-15.png to /var/www/html/swe_forecasting/plots/\nCopied: 2022_pr_2022-12-29.png to /var/www/html/swe_forecasting/plots/\nCopied: 2022_pr_2022-10-15.png to /var/www/html/swe_forecasting/plots/\nCopied: 2022_pr_2022-02-22.png to /var/www/html/swe_forecasting/plots/\nCopied: 2022_pr_2022-10-16.png to /var/www/html/swe_forecasting/plots/\nCopied: 2022_pr_2022-04-17.png to /var/www/html/swe_forecasting/plots/\nCopied: 2022_predicted_swe_2022-06-15.png to /var/www/html/swe_forecasting/plots/\nCopied: 2022_pr_2022-03-15.png to /var/www/html/swe_forecasting/plots/\nCopied: 2022_predicted_swe_2022-10-16.png to /var/www/html/swe_forecasting/plots/\nCopied: 2022_pr_2022-01-17.png to /var/www/html/swe_forecasting/plots/\nCopied: 2022_pr_2022-12-30.png to /var/www/html/swe_forecasting/plots/\n",
  "history_begin_time" : 1696773900914,
  "history_end_time" : 1696773902208,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "fY5KsH9wnSiH",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\nimport os\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename} to {destination_folder}')\n",
  "history_output" : "today date = 2023-10-08\ntest start date:  2023-01-20\ntest end date:  2023-10-08\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/fY5KsH9wnSiH/deploy_images_to_website.py\", line 33, in <module>\n    shutil.copy(source_file, destination_file)\nNameError: name 'shutil' is not defined\n",
  "history_begin_time" : 1696773886204,
  "history_end_time" : 1696773887061,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "4r0o7wqnb5XH",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n\n\n# copy the png from testing_output to plots\nsource_folder = f\"{work_dir}/testing_output/\"\n\n# Ensure the destination folder exists, create it if necessary\nif not os.path.exists(destination_folder):\n    os.makedirs(destination_folder)\n\n# Loop through the files in the source folder\nfor filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png'):\n        # Build the source and destination file paths\n        source_file = os.path.join(source_folder, filename)\n        destination_file = os.path.join(destination_folder, filename)\n        \n        # Copy the file from the source to the destination\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {filename} to {destination_folder}')\n",
  "history_output" : "today date = 2023-10-08\ntest start date:  2023-01-20\ntest end date:  2023-10-08\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/4r0o7wqnb5XH/deploy_images_to_website.py\", line 20, in <module>\n    if not os.path.exists(destination_folder):\nNameError: name 'os' is not defined\n",
  "history_begin_time" : 1696773878224,
  "history_end_time" : 1696773879046,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "y5QoVfL8tPpz",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n",
  "history_output" : "today date = 2023-10-08\ntest start date:  2023-01-20\ntest end date:  2023-10-08\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\n",
  "history_begin_time" : 1696773730148,
  "history_end_time" : 1696773731008,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "6kretzr0t9j",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n",
  "history_output" : "today date = 2023-10-08\ntest start date:  2023-01-20\ntest end date:  2023-10-08\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\n",
  "history_begin_time" : 1696772056809,
  "history_end_time" : 1696772059206,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "prBp4gm78w9n",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n",
  "history_output" : "today date = 2023-10-08\ntest start date:  2023-01-19\ntest end date:  2023-10-08\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\n",
  "history_begin_time" : 1696732317586,
  "history_end_time" : 1696732318438,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "RxQ7P9fP52TR",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n",
  "history_output" : "today date = 2023-10-08\ntest start date:  2023-01-19\ntest end date:  2023-10-08\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\n",
  "history_begin_time" : 1696732183178,
  "history_end_time" : 1696732184010,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "CgwLW9W8bN8i",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n",
  "history_output" : "today date = 2023-10-07\ntest start date:  2023-01-19\ntest end date:  2023-10-07\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\n",
  "history_begin_time" : 1696690706404,
  "history_end_time" : 1696690707269,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "HcqRyikLnHMw",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n",
  "history_output" : "today date = 2023-10-07\ntest start date:  2023-01-19\ntest end date:  2023-10-07\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\n",
  "history_begin_time" : 1696690430032,
  "history_end_time" : 1696690430857,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "8Udf3GQjUpMl",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Copy the folder with overwriting existing files/folders\ndistutils.dir_util.copy_tree(source_folder, destination_folder, update=1)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n",
  "history_output" : "today date = 2023-10-07\ntest start date:  2023-01-19\ntest end date:  2023-10-07\n/home/chetana\nmove the plots and the results into the http folder\nFolder '/home/chetana/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\n",
  "history_begin_time" : 1696690331572,
  "history_end_time" : 1696690332429,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "WBPbzuabD5uh",
  "history_input" : "import shutil\nfrom snowcast_utils import work_dir\n\n\nprint(\"move the plots and the results into the http folder\")\n\nsource_folder = f\"{work_dir}/var_comparison/\"\ndestination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Define a custom copy function to overwrite existing files\ndef custom_copy_function(src, dst, *, follow_symlinks=True):\n    # Function to copy files and overwrite if they already exist\n    shutil.copy2(src, dst)\n\n# Use shutil.copytree to copy the entire folder and overwrite existing files\n# Copy the folder with overwriting existing files\nshutil.copytree(source_folder, destination_folder, copy_function=custom_copy_function)\n\nprint(f\"Folder '{source_folder}' copied to '{destination_folder}' with overwriting.\")\n",
  "history_output" : "today date = 2023-10-07\ntest start date:  2023-01-19\ntest end date:  2023-10-07\n/home/chetana\nmove the plots and the results into the http folder\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/WBPbzuabD5uh/deploy_images_to_website.py\", line 17, in <module>\n    shutil.copytree(source_folder, destination_folder, copy_function=custom_copy_function)\n  File \"/home/chetana/anaconda3/lib/python3.9/shutil.py\", line 568, in copytree\n    return _copytree(entries=entries, src=src, dst=dst, symlinks=symlinks,\n  File \"/home/chetana/anaconda3/lib/python3.9/shutil.py\", line 467, in _copytree\n    os.makedirs(dst, exist_ok=dirs_exist_ok)\n  File \"/home/chetana/anaconda3/lib/python3.9/os.py\", line 225, in makedirs\n    mkdir(name, mode)\nFileExistsError: [Errno 17] File exists: '/var/www/html/swe_forecasting/plots/'\n",
  "history_begin_time" : 1696690271090,
  "history_end_time" : 1696690271880,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "yh2ngpP4eXBA",
  "history_input" : "import shutil\nfrom snowcast_utils import work_dir\n\n\nprint(\"move the plots and the results into the http folder\")\n\nvar_comparison_plot_path = f\"{work_dir}/var_comparison/\"\npublic_folder_path = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Use shutil.copytree to copy the entire folder and overwrite existing files\nshutil.copytree(var_comparison_plot_path, public_folder_path, dirs_exist_ok=True)\n",
  "history_output" : "today date = 2023-10-07\ntest start date:  2023-01-19\ntest end date:  2023-10-07\n/home/chetana\nmove the plots and the results into the http folder\n",
  "history_begin_time" : 1696690189864,
  "history_end_time" : 1696690190651,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "Z7tOX29nDBbi",
  "history_input" : "import shutil\nfrom snowcast_utils import work_dir\n\n\nprint(\"move the plots and the results into the http folder\")\n\nvar_comparison_plot_path = f\"{work_dir}/var_comparison/\"\npublic_folder_path = f\"/var/www/html/swe_forecasting/plots/\"\n\n# Use shutil.copytree to copy the entire folder and overwrite existing files\nshutil.copytree(var_comparison_plot_path, public_folder_path, dirs_exist_ok=True)\n",
  "history_output" : "today date = 2023-10-07\ntest start date:  2023-01-19\ntest end date:  2023-10-07\n/home/chetana\nmove the plots and the results into the http folder\n",
  "history_begin_time" : 1696690055222,
  "history_end_time" : 1696690056007,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "C3pHMPbajlva",
  "history_input" : "import shutil\nfrom snowcast_utils import work_dir\n\n\nprint(\"move the plots and the results into the http folder\")\n\nvar_comparison_plot_path = f\"{work_dir}/var_comparison/\"\npublic_folder_path = f\"/var/www/html/swe_forecasting/plots/\"\n\n\n# Use shutil.copytree to copy the entire folder\nshutil.copytree(var_comparison_plot_path, public_folder_path)\n",
  "history_output" : "today date = 2023-10-07\ntest start date:  2023-01-19\ntest end date:  2023-10-07\n/home/chetana\nmove the plots and the results into the http folder\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/C3pHMPbajlva/deploy_images_to_website.py\", line 12, in <module>\n    shutil.copytree(var_comparison_plot_path, public_folder_path)\n  File \"/home/chetana/anaconda3/lib/python3.9/shutil.py\", line 568, in copytree\n    return _copytree(entries=entries, src=src, dst=dst, symlinks=symlinks,\n  File \"/home/chetana/anaconda3/lib/python3.9/shutil.py\", line 467, in _copytree\n    os.makedirs(dst, exist_ok=dirs_exist_ok)\n  File \"/home/chetana/anaconda3/lib/python3.9/os.py\", line 225, in makedirs\n    mkdir(name, mode)\nFileExistsError: [Errno 17] File exists: '/var/www/html/swe_forecasting/plots/'\n",
  "history_begin_time" : 1696689997450,
  "history_end_time" : 1696689998337,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "B2R3cZTrtogY",
  "history_input" : "from snowcast_utils import work_dir\n\n\nprint(\"move the plots and the results into the http folder\")\n\nvar_comparison_plot_path = f\"{work_dir}/var_comparison/\"\npublic_folder_path = f\"/var/www/html/swe_forecasting/plots/\"\n\n\n# Use shutil.copytree to copy the entire folder\nshutil.copytree(var_comparison_plot_path, public_folder_path)\n",
  "history_output" : "today date = 2023-10-07\ntest start date:  2023-01-19\ntest end date:  2023-10-07\n/home/chetana\nmove the plots and the results into the http folder\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/B2R3cZTrtogY/deploy_images_to_website.py\", line 11, in <module>\n    shutil.copytree(var_comparison_plot_path, public_folder_path)\nNameError: name 'shutil' is not defined\n",
  "history_begin_time" : 1696689975445,
  "history_end_time" : 1696689976213,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "cpysvfj5omm",
  "history_input" : "print(\"move the plots and the results into the http folder\")\n\n\n",
  "history_output" : "move the plots and the results into the http folder\n",
  "history_begin_time" : 1696603205884,
  "history_end_time" : 1696603207421,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "p9gl6b6ug0q",
  "history_input" : "print(\"move the plots and the results into the http folder\")\n",
  "history_output" : "move the plots and the results into the http folder\n",
  "history_begin_time" : 1696432531702,
  "history_end_time" : 1696432533246,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "zmp8i7gv4yw",
  "history_input" : "print(\"move the plots and the results into the http folder\")\n",
  "history_output" : "move the plots and the results into the http folder\n",
  "history_begin_time" : 1695828153852,
  "history_end_time" : 1695828155416,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "czviyfartje",
  "history_input" : "print(\"move the plots and the results into the http folder\")\n",
  "history_output" : "move the plots and the results into the http folder\n",
  "history_begin_time" : 1695696682072,
  "history_end_time" : 1695696683607,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "xmkiiwl0fo0",
  "history_input" : "print(\"move the plots and the results into the http folder\")\n",
  "history_output" : "move the plots and the results into the http folder\n",
  "history_begin_time" : 1695694446097,
  "history_end_time" : 1695694447627,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "42hj1alv1ol",
  "history_input" : "print(\"move the plots and the results into the http folder\")\n",
  "history_output" : "move the plots and the results into the http folder\n",
  "history_begin_time" : 1695693643903,
  "history_end_time" : 1695693645497,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "l0cfud3zts6",
  "history_input" : "print(\"move the plots and the results into the http folder\")\n",
  "history_output" : "move the plots and the results into the http folder\n",
  "history_begin_time" : 1695693368183,
  "history_end_time" : 1695693369725,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "hjgc2h8v07n",
  "history_input" : "print(\"move the plots and the results into the http folder\")\n",
  "history_output" : "move the plots and the results into the http folder\n",
  "history_begin_time" : 1695581108558,
  "history_end_time" : 1695581110114,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "to7wwmnskzq",
  "history_input" : "print(\"move the plots and the results into the http folder\")\n",
  "history_output" : "move the plots and the results into the http folder\n",
  "history_begin_time" : 1695576481441,
  "history_end_time" : 1695576482967,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "yrwz6eu344g",
  "history_input" : "print(\"move the plots and the results into the http folder\")\n",
  "history_output" : "move the plots and the results into the http folder\n",
  "history_begin_time" : 1695576171450,
  "history_end_time" : 1695576172973,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "5h5lmzlcd3l",
  "history_input" : "print(\"move the plots and the results into the http folder\")\n",
  "history_output" : "move the plots and the results into the http folder\n",
  "history_begin_time" : 1695535982867,
  "history_end_time" : 1695535984404,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "hfj9tmbcq9g",
  "history_input" : "print(\"move the plots and the results into the http folder\")\n",
  "history_output" : "move the plots and the results into the http folder\n",
  "history_begin_time" : 1695535675918,
  "history_end_time" : 1695535677482,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "p23brbnejxi",
  "history_input" : "print(\"move the plots and the results into the http folder\")\n",
  "history_output" : "move the plots and the results into the http folder\n",
  "history_begin_time" : 1695535411572,
  "history_end_time" : 1695535413127,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "7yluzdwmhtl",
  "history_input" : "print(\"move the plots and the results into the http folder\")\n",
  "history_output" : "move the plots and the results into the http folder\n",
  "history_begin_time" : 1695535140105,
  "history_end_time" : 1695535141642,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "b7pjz5snsnh",
  "history_input" : "print(\"move the plots and the results into the http folder\")\n",
  "history_output" : "move the plots and the results into the http folder\n",
  "history_begin_time" : 1695534861809,
  "history_end_time" : 1695534863317,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "bhabltvuwib",
  "history_input" : "print(\"move the plots and the results into the http folder\")\n",
  "history_output" : "move the plots and the results into the http folder\n",
  "history_begin_time" : 1695533205274,
  "history_end_time" : 1695533206831,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "mjr3ef3peel",
  "history_input" : "print(\"move the plots and the results into the http folder\")\n",
  "history_output" : "move the plots and the results into the http folder\n",
  "history_begin_time" : 1695529381564,
  "history_end_time" : 1695529383145,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "yeqtcaskns3",
  "history_input" : "print(\"move the plots and the results into the http folder\")\n",
  "history_output" : "move the plots and the results into the http folder\n",
  "history_begin_time" : 1695528579271,
  "history_end_time" : 1695528580790,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "u8atlhfktzl",
  "history_input" : "print(\"move the plots and the results into the http folder\")\n",
  "history_output" : "move the plots and the results into the http folder\n",
  "history_begin_time" : 1695515936403,
  "history_end_time" : 1695515937942,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "p0t5whi4uo6",
  "history_input" : "print(\"move the plots and the results into the http folder\")\n",
  "history_output" : "move the plots and the results into the http folder\n",
  "history_begin_time" : 1695506626333,
  "history_end_time" : 1695506627847,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "otoej6oti3a",
  "history_input" : "print(\"move the plots and the results into the http folder\")\n",
  "history_output" : "move the plots and the results into the http folder\n",
  "history_begin_time" : 1695418937435,
  "history_end_time" : 1695418938944,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "q71a7qxomfp",
  "history_input" : "print(\"move the plots and the results into the http folder\")\n",
  "history_output" : "move the plots and the results into the http folder\n",
  "history_begin_time" : 1695417811691,
  "history_end_time" : 1695417813204,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "fldkoed5fjg",
  "history_input" : "print(\"move the plots and the results into the http folder\")\n",
  "history_output" : "move the plots and the results into the http folder\n",
  "history_begin_time" : 1695417396700,
  "history_end_time" : 1695417398248,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "jm28zragg4m",
  "history_input" : "print(\"move the plots and the results into the http folder\")\n",
  "history_output" : "move the plots and the results into the http folder\n",
  "history_begin_time" : 1695417100143,
  "history_end_time" : 1695417101679,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "srzcfn7buys",
  "history_input" : "print(\"move the plots and the results into the http folder\")\n",
  "history_output" : "move the plots and the results into the http folder\n",
  "history_begin_time" : 1695417023746,
  "history_end_time" : 1695417025277,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "5nqd02ytakh",
  "history_input" : "print(\"move the plots and the results into the http folder\")\n",
  "history_output" : "move the plots and the results into the http folder\n",
  "history_begin_time" : 1695106538747,
  "history_end_time" : 1695106540325,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "cjclm29xcau",
  "history_input" : "print(\"move the plots and the results into the http folder\")\n",
  "history_output" : "move the plots and the results into the http folder\n",
  "history_begin_time" : 1695106473033,
  "history_end_time" : 1695106474555,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "clur6qyq87y",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\nexit(1)  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n",
  "history_output" : "",
  "history_begin_time" : 1695054088341,
  "history_end_time" : 1695054091808,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "7peiokgrz3f",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\nexit(1)  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n",
  "history_output" : "",
  "history_begin_time" : 1695053841153,
  "history_end_time" : 1695053844560,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "gj0zj2q7mmo",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\nexit(1)  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n",
  "history_output" : "",
  "history_begin_time" : 1695053782362,
  "history_end_time" : 1695053786953,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "u51qmdozu9n",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\nexit(1)  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n",
  "history_output" : "",
  "history_begin_time" : 1694970773425,
  "history_end_time" : 1694970777026,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "03046ugepr5",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\nexit(1)  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n",
  "history_output" : "",
  "history_begin_time" : 1694970652987,
  "history_end_time" : 1694970656409,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "1jp96y1fou4",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\nexit(1)  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n",
  "history_output" : "",
  "history_begin_time" : 1694970198731,
  "history_end_time" : 1694970202102,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "qrcbzgqtiof",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\nexit(1)  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n",
  "history_output" : "",
  "history_begin_time" : 1694969417161,
  "history_end_time" : 1694969420625,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "3ce5k2fgqv7",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\nexit(1)  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/3ce5k2fgqv7/service_prediction.py\", line 17, in <module>\n    import geopandas as gpd\nModuleNotFoundError: No module named 'geopandas'\n",
  "history_begin_time" : 1694908995684,
  "history_end_time" : 1694908999321,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "o1cy22ikpuo",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\nexit(1)  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/o1cy22ikpuo/service_prediction.py\", line 17, in <module>\n    import geopandas as gpd\nModuleNotFoundError: No module named 'geopandas'\n",
  "history_begin_time" : 1694901480397,
  "history_end_time" : 1694901489001,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "ikpgmzfjst1",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\nexit(1)  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/ikpgmzfjst1/service_prediction.py\", line 7, in <module>\n    import seaborn as sns\nModuleNotFoundError: No module named 'seaborn'\n",
  "history_begin_time" : 1691531390809,
  "history_end_time" : 1691531394261,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "tq3z35",
  "indicator" : "Failed"
},{
  "history_id" : "z3aw4ndxbq4",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\nexit(1)  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/z3aw4ndxbq4/service_prediction.py\", line 7, in <module>\n    import seaborn as sns\nModuleNotFoundError: No module named 'seaborn'\n",
  "history_begin_time" : 1691531317662,
  "history_end_time" : 1691531321094,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "tq3z35",
  "indicator" : "Failed"
},{
  "history_id" : "i29jtqm9tan",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\nexit(1)  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/i29jtqm9tan/service_prediction.py\", line 7, in <module>\n    import seaborn as sns\nModuleNotFoundError: No module named 'seaborn'\n",
  "history_begin_time" : 1691531222658,
  "history_end_time" : 1691531226048,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "tq3z35",
  "indicator" : "Failed"
},{
  "history_id" : "yzddwew8dwh",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\nexit(1)  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/yzddwew8dwh/service_prediction.py\", line 7, in <module>\n    import seaborn as sns\nModuleNotFoundError: No module named 'seaborn'\n",
  "history_begin_time" : 1691531148214,
  "history_end_time" : 1691531151654,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "tq3z35",
  "indicator" : "Failed"
},{
  "history_id" : "3im4vcuhgyn",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\nexit(1)  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/3im4vcuhgyn/service_prediction.py\", line 7, in <module>\n    import seaborn as sns\nModuleNotFoundError: No module named 'seaborn'\n",
  "history_begin_time" : 1691531090018,
  "history_end_time" : 1691531095401,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "tq3z35",
  "indicator" : "Failed"
},{
  "history_id" : "stdf6v41llh",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\nexit(1)  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/stdf6v41llh/service_prediction.py\", line 7, in <module>\n    import seaborn as sns\nModuleNotFoundError: No module named 'seaborn'\n",
  "history_begin_time" : 1691530872842,
  "history_end_time" : 1691530877500,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "tq3z35",
  "indicator" : "Failed"
},{
  "history_id" : "i97u3ct5b3u",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\nexit(1)  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/i97u3ct5b3u/service_prediction.py\", line 7, in <module>\n    import seaborn as sns\nModuleNotFoundError: No module named 'seaborn'\n",
  "history_begin_time" : 1691530716904,
  "history_end_time" : 1691530721495,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "tq3z35",
  "indicator" : "Failed"
},{
  "history_id" : "xsg02cmqm0l",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\nexit(1)  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/xsg02cmqm0l/service_prediction.py\", line 7, in <module>\n    import seaborn as sns\nModuleNotFoundError: No module named 'seaborn'\n",
  "history_begin_time" : 1691530644097,
  "history_end_time" : 1691530649812,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "tq3z35",
  "indicator" : "Failed"
},{
  "history_id" : "yqe6br3t7ym",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1689632045253,
  "history_end_time" : 1689632046695,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "yby8pypp5na",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\nexit(1)  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n",
  "history_output" : "  File \"service_prediction.py\", line 31\n    github_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n                                                      ^\nSyntaxError: invalid syntax\n",
  "history_begin_time" : 1689631652411,
  "history_end_time" : 1689631654690,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "tq3z35",
  "indicator" : "Failed"
},{
  "history_id" : "uomra1kgsfr",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1689135077553,
  "history_end_time" : 1689135079178,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "4ag774nsqkh",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\n#exit()  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n''' \nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\n\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n'''",
  "history_output" : "/Users/joe\n",
  "history_begin_time" : 1687547313481,
  "history_end_time" : 1687547315509,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "utpy8loakij",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1687463701393,
  "history_end_time" : 1687463702828,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "k7w6r3jci48",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1687463656563,
  "history_end_time" : 1687463657987,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "spmnv1chlyv",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\nexit(1)  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n",
  "history_output" : "sh: /home/chetana/anaconda3/condabin/python: No such file or directory\n",
  "history_begin_time" : 1686235985620,
  "history_end_time" : 1686235987930,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "jf7wuu",
  "indicator" : "Failed"
},{
  "history_id" : "yh00udot6x8",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\nexit()  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n",
  "history_output" : "  File \"service_prediction.py\", line 31\n    github_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n                                                      ^\nSyntaxError: invalid syntax\n",
  "history_begin_time" : 1686235556505,
  "history_end_time" : 1686235558793,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "jf7wuu",
  "indicator" : "Failed"
},{
  "history_id" : "1to0ojrq4we",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\nexit()  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n",
  "history_output" : "  File \"service_prediction.py\", line 31\n    github_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n                                                      ^\nSyntaxError: invalid syntax\n",
  "history_begin_time" : 1686153694188,
  "history_end_time" : 1686153695281,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "jf7wuu",
  "indicator" : "Done"
},{
  "history_id" : "vv712ycxzpd",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1681516938453,
  "history_end_time" : 1681516939922,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "14b58migwlu",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1681039721725,
  "history_end_time" : 1681039723155,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "xyjfyq05rlp",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1681007831265,
  "history_end_time" : 1681007832707,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "7jbiozf2rsq",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\nimport json\n\n#exit()  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n''' \nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\n\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n'''",
  "history_output" : "  File \"service_prediction.py\", line 32\n    github_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n                                                      ^\n",
  "history_begin_time" : 1679442763341,
  "history_end_time" : 1679442765438,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "jf7wuu",
  "indicator" : "Failed"
},{
  "history_id" : "5wce3atsl8g",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\nimport json\n\n#exit()  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n''' \nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\n\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n'''",
  "history_output" : "  File \"service_prediction.py\", line 32\n    github_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n                                                      ^\nSyntaxError: invalid syntax\n",
  "history_begin_time" : 1679332606910,
  "history_end_time" : 1679332609165,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "jf7wuu",
  "indicator" : "Done"
},{
  "history_id" : "m9wljp5y7q3",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\n#exit()  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n''' \nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\n\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n'''",
  "history_output" : "  File \"service_prediction.py\", line 31\n    github_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n                                                      ^\n",
  "history_begin_time" : 1679191275421,
  "history_end_time" : 1679191277770,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "2jifky",
  "indicator" : "Failed"
},{
  "history_id" : "pr2rshl93cs",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1678748562990,
  "history_end_time" : 1678748564466,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "l7x85m1flq9",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\n#exit()  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n''' \nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\n\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n'''",
  "history_output" : "/home/chetana\n",
  "history_begin_time" : 1678747874310,
  "history_end_time" : 1678747879485,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Done"
},{
  "history_id" : "cbgdsf12xc7",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\n#exit()  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n''' \nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\n\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n'''",
  "history_output" : "/home/chetana\n",
  "history_begin_time" : 1678743795461,
  "history_end_time" : 1678743800923,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Done"
},{
  "history_id" : "i7nlll5x5e6",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\n#exit()  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n''' \nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\n\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n'''",
  "history_output" : "/home/chetana\n",
  "history_begin_time" : 1678742679001,
  "history_end_time" : 1678742684244,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Done"
},{
  "history_id" : "8xyloxd26se",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\n#exit()  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n''' \nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\n\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n'''",
  "history_output" : "/home/chetana\n",
  "history_begin_time" : 1678725463307,
  "history_end_time" : 1678725468710,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Done"
},{
  "history_id" : "z843yky350d",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\n#exit()  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n''' \nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\n\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n'''",
  "history_output" : "/home/chetana\n",
  "history_begin_time" : 1678649634707,
  "history_end_time" : 1678649639916,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Done"
},{
  "history_id" : "bmrtzqtyu6w",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\n#exit()  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n''' \nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\n\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n'''",
  "history_output" : "/home/chetana\n",
  "history_begin_time" : 1678648426596,
  "history_end_time" : 1678648432178,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Done"
},{
  "history_id" : "j6h9szh1ig0",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\n#exit()  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n''' \nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\n\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n'''",
  "history_output" : "/home/chetana\n",
  "history_begin_time" : 1678565135358,
  "history_end_time" : 1678565140004,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Done"
},{
  "history_id" : "zqxa5tthxzt",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\n#exit()  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n''' \nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\n\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n'''",
  "history_output" : "/home/chetana\n",
  "history_begin_time" : 1678564689797,
  "history_end_time" : 1678564694663,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Done"
},{
  "history_id" : "uf4gsgc7um4",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\n#exit()  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n''' \nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\n\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n'''",
  "history_output" : "/home/chetana\n",
  "history_begin_time" : 1678557799690,
  "history_end_time" : 1678557898784,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "8rfv4h1d18t",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\n#exit()  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n''' \nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\n\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n'''",
  "history_output" : "/home/chetana\n",
  "history_begin_time" : 1678497658170,
  "history_end_time" : 1678497663095,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Done"
},{
  "history_id" : "UobjTQktZkzY",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\n#exit()  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\n'''\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\n\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n'''",
  "history_output" : "/home/chetana\n",
  "history_begin_time" : 1678496864910,
  "history_end_time" : 1678496869175,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "8wMhEdHwNCQX",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\n#exit()  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\n'''\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\n'''\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n",
  "history_output" : "/home/chetana\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/8wMhEdHwNCQX/service_prediction.py\", line 62, in <module>\n    random_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\nNameError: name 'best_random' is not defined\n",
  "history_begin_time" : 1678496831917,
  "history_end_time" : 1678496835998,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "Bxy0d6KAUfIG",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\n#exit()  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\n  \nfolder_path = f\"{github_dir}/model\"\nfiles = os.listdir(folder_path)\n\n# Filter out directories and non-files\nfiles = [f for f in files if os.path.isfile(os.path.join(folder_path, f))]\n\n# Get the most recent file based on creation time\nmost_recent_file = max(files, key=lambda f: os.path.getctime(os.path.join(folder_path, f)))\nprint(most_recent_file)\nbest_random = joblib.load(f\"{github_dir}/model/{most_recent_file}\")\n\nbest_model = joblib.load(f\"{github_dir}/model/{most_recent_file}\")\n'''\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")'''\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n",
  "history_output" : "/home/chetana\nwormhole_XGBoostHole_20230903025852.joblib\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/Bxy0d6KAUfIG/service_prediction.py\", line 74, in <module>\n    random_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n  File \"/home/chetana/gw-workspace/Bxy0d6KAUfIG/service_prediction.py\", line 41, in evaluate\n    y_predicted = model.predict(test_features)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/sklearn/ensemble/_forest.py\", line 981, in predict\n    X = self._validate_X_predict(X)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/sklearn/ensemble/_forest.py\", line 602, in _validate_X_predict\n    X = self._validate_data(X, dtype=DTYPE, accept_sparse=\"csr\", reset=False)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/sklearn/base.py\", line 569, in _validate_data\n    self._check_n_features(X, reset=reset)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/sklearn/base.py\", line 370, in _check_n_features\n    raise ValueError(\nValueError: X has 4 features, but ExtraTreesRegressor is expecting 22 features as input.\n",
  "history_begin_time" : 1678496177945,
  "history_end_time" : 1678496197831,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "ct93jswlmbo",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\n#exit()  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n",
  "history_output" : "/home/chetana\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/ct93jswlmbo/service_prediction.py\", line 56, in <module>\n    base_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/joblib/numpy_pickle.py\", line 650, in load\n    with open(filename, 'rb') as f:\nFileNotFoundError: [Errno 2] No such file or directory: '/home/chetana/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib'\n",
  "history_begin_time" : 1678330793595,
  "history_end_time" : 1678330798471,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Failed"
},{
  "history_id" : "qfiuxk9hq1r",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\n#exit()  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n",
  "history_output" : "/home/chetana\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/qfiuxk9hq1r/service_prediction.py\", line 56, in <module>\n    base_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/joblib/numpy_pickle.py\", line 650, in load\n    with open(filename, 'rb') as f:\nFileNotFoundError: [Errno 2] No such file or directory: '/home/chetana/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib'\n",
  "history_begin_time" : 1678312632864,
  "history_end_time" : 1678312637979,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Failed"
},{
  "history_id" : "81rfkkml76n",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\n#exit()  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n",
  "history_output" : "/home/chetana\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/81rfkkml76n/service_prediction.py\", line 56, in <module>\n    base_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/joblib/numpy_pickle.py\", line 650, in load\n    with open(filename, 'rb') as f:\nFileNotFoundError: [Errno 2] No such file or directory: '/home/chetana/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib'\n",
  "history_begin_time" : 1678285605423,
  "history_end_time" : 1678285609719,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Failed"
},{
  "history_id" : "YRM6lD1lru07",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\n#exit()  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n",
  "history_output" : "/home/chetana\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/YRM6lD1lru07/service_prediction.py\", line 56, in <module>\n    base_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/joblib/numpy_pickle.py\", line 650, in load\n    with open(filename, 'rb') as f:\nFileNotFoundError: [Errno 2] No such file or directory: '/home/chetana/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib'\n",
  "history_begin_time" : 1678202367870,
  "history_end_time" : 1678202371507,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "v3ggx8adah8",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\n#exit()  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n",
  "history_output" : "/home/chetana\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/v3ggx8adah8/service_prediction.py\", line 56, in <module>\n    base_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/joblib/numpy_pickle.py\", line 650, in load\n    with open(filename, 'rb') as f:\nFileNotFoundError: [Errno 2] No such file or directory: '/home/chetana/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib'\n",
  "history_begin_time" : 1678202257080,
  "history_end_time" : 1678202262210,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Failed"
},{
  "history_id" : "7c3lnc2f67f",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\n#exit()  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n",
  "history_output" : "/home/chetana\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/7c3lnc2f67f/service_prediction.py\", line 56, in <module>\n    base_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/joblib/numpy_pickle.py\", line 650, in load\n    with open(filename, 'rb') as f:\nFileNotFoundError: [Errno 2] No such file or directory: '/home/chetana/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib'\n",
  "history_begin_time" : 1678155323898,
  "history_end_time" : 1678155328867,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Failed"
},{
  "history_id" : "fG4Xfhvhp7na",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\n#exit()  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n",
  "history_output" : "/home/chetana\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/fG4Xfhvhp7na/service_prediction.py\", line 56, in <module>\n    base_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/joblib/numpy_pickle.py\", line 650, in load\n    with open(filename, 'rb') as f:\nFileNotFoundError: [Errno 2] No such file or directory: '/home/chetana/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib'\n",
  "history_begin_time" : 1677959296739,
  "history_end_time" : 1677959300491,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "ugwvl7g7zqh",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\n#exit()  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n",
  "history_output" : "/home/chetana\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/ugwvl7g7zqh/service_prediction.py\", line 56, in <module>\n    base_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/joblib/numpy_pickle.py\", line 650, in load\n    with open(filename, 'rb') as f:\nFileNotFoundError: [Errno 2] No such file or directory: '/home/chetana/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib'\n",
  "history_begin_time" : 1677791582075,
  "history_end_time" : 1677791587314,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Failed"
},{
  "history_id" : "uf47bs97958",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677784204220,
  "history_end_time" : 1677784272018,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "jl9n9cd6tn1",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677782901796,
  "history_end_time" : 1677782901796,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "230wrlksxng",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677781745157,
  "history_end_time" : 1677781745157,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "oxucnn3dv6c",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677719046568,
  "history_end_time" : 1677719046568,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "fby8o71433n",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677718179082,
  "history_end_time" : 1677718179082,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "wl33brc26ve",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677679556254,
  "history_end_time" : 1677679556254,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "9aklv5u8bpe",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677679507357,
  "history_end_time" : 1677679549075,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "6c2om5x43df",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677636286813,
  "history_end_time" : 1677636286813,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "inh0j55tg3m",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677636150347,
  "history_end_time" : 1677636150347,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "53b40u8gopm",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677636137199,
  "history_end_time" : 1677636142807,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "6o2cgr8wifx",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677636063736,
  "history_end_time" : 1677636063736,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "n3hnhu3s8ei",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677635881797,
  "history_end_time" : 1677635881797,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "YlPlGtgzNsxE",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\nexit()  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n",
  "history_output" : "",
  "history_begin_time" : 1677634405055,
  "history_end_time" : 1677634408572,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "ep1dz0ltw11",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677617762754,
  "history_end_time" : 1677617762754,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "f4cl61t6qlr",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677606170854,
  "history_end_time" : 1677606170854,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "r1tebpbzkgc",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677606114094,
  "history_end_time" : 1677606114094,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "vbtlzir6e0r",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\nexit()  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/Users/gokulprathin/gw-workspace/vbtlzir6e0r/service_prediction.py\", line 18, in <module>\n    import geojson\nModuleNotFoundError: No module named 'geojson'\n",
  "history_begin_time" : 1677582866877,
  "history_end_time" : 1677582869544,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "2fkmsvksu87",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677525425949,
  "history_end_time" : 1677525425949,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "msu3cmdbv3p",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677462325747,
  "history_end_time" : 1694185608907,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "q0yqeqo4v6h",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677462311680,
  "history_end_time" : 1694185608624,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "6bacgorrfy9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677462265121,
  "history_end_time" : 1677462265121,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "axl6915gb7t",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677428742692,
  "history_end_time" : 1677428742692,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "j3tlxwwivem",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677428687298,
  "history_end_time" : 1677428687298,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "aczy0a1c5vr",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677426262713,
  "history_end_time" : 1677426262713,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "b24p6z5foc9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677379889770,
  "history_end_time" : 1677379889770,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "kgs31c4qnsj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677379837760,
  "history_end_time" : 1677379837760,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "wh6izefavac",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677352477938,
  "history_end_time" : 1677352477938,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "xxpmfofo97b",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677352389872,
  "history_end_time" : 1677352389872,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "umuqaixuu47",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677352335816,
  "history_end_time" : 1677352335816,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "vrik88slxtq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677344119893,
  "history_end_time" : 1677344119893,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "4qn39lek953",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677282602578,
  "history_end_time" : 1677282602578,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "bg51d685z54",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677273712205,
  "history_end_time" : 1677273712205,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "ez4yd7auuzn",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677273698728,
  "history_end_time" : 1677273703950,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "s6gpw7bbcqx",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677273673895,
  "history_end_time" : 1677273679530,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "t4m5nfvgr7q",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677273657778,
  "history_end_time" : 1677273665446,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "7x9vyhwdclv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677273535979,
  "history_end_time" : 1677273535979,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "aotqjjv73yk",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677273519084,
  "history_end_time" : 1677273525482,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "orz9os7g8ek",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677273371284,
  "history_end_time" : 1677273371284,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "kwwoku143tf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677273340413,
  "history_end_time" : 1677273345436,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "gqunoc4k5ql",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677273323470,
  "history_end_time" : 1677273332226,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "lb0j3ixzkzg",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677273146622,
  "history_end_time" : 1677273146622,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "4s54x7rw7al",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677273100198,
  "history_end_time" : 1677273134480,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "0ur8j6udrvy",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677201275398,
  "history_end_time" : 1677201275398,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "f5jfq0kp4ve",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677192311032,
  "history_end_time" : 1677192311032,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "8zmtaa14rud",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677192268351,
  "history_end_time" : 1677192268351,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "zi94zqwjbkr",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677191916703,
  "history_end_time" : 1677191916703,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "o1z8bk75rwp",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677184296661,
  "history_end_time" : 1677184296661,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "0m7dcybdjtg",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677184173515,
  "history_end_time" : 1677184173515,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "vqpxkggm0et",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677113476432,
  "history_end_time" : 1677113476432,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "gzqn4glzt4a",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677108238576,
  "history_end_time" : 1677108238576,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "ekawert88i2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677108212453,
  "history_end_time" : 1677108228695,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "7h88ju4q6zu",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677107869787,
  "history_end_time" : 1677107869787,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "ghvvtbkmkv9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677107757938,
  "history_end_time" : 1677107757938,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "sxozmq0chjx",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677107718283,
  "history_end_time" : 1677107718283,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "7x4slie4v91",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677107637136,
  "history_end_time" : 1677107705671,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "fu5ypamdvks",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677107604001,
  "history_end_time" : 1677107608759,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "pvehcffn3yb",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677107556500,
  "history_end_time" : 1677107562714,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "1wf3xw9e8u6",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677107524969,
  "history_end_time" : 1677107538157,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "3pu9wn0jgvw",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677107501071,
  "history_end_time" : 1677107501071,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "hqclnd8uwhq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677107474132,
  "history_end_time" : 1677107474132,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "i4b17v1pjq9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677106516075,
  "history_end_time" : 1677106516075,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "urdoon1aluf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677106477026,
  "history_end_time" : 1677106477026,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "4exwoys5etf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677106431014,
  "history_end_time" : 1677106431014,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "dz1lt1joaxd",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677106134855,
  "history_end_time" : 1677106147545,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "io290dwy1cg",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677106010922,
  "history_end_time" : 1677106010922,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "i1sx6mvvz6o",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677030843463,
  "history_end_time" : 1677030843463,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "od9vgp3c46x",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677030771119,
  "history_end_time" : 1677030771119,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "ub5zz0zoj2o",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677030672611,
  "history_end_time" : 1677030672611,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "05pbft2lcqx",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677030562316,
  "history_end_time" : 1677030562316,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "2zpo82usf6g",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677025528628,
  "history_end_time" : 1677025528628,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "fr9kqxt3jie",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677025466414,
  "history_end_time" : 1677025466414,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "bhrl8tjt47j",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677017826394,
  "history_end_time" : 1677017826394,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "2xldqy9gwsp",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677017218399,
  "history_end_time" : 1677017218399,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "qqv9hfbgkrj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677016681286,
  "history_end_time" : 1677016681286,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "11ec53czal0",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677016142977,
  "history_end_time" : 1677016142977,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "euxftphecre",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677016063938,
  "history_end_time" : 1677016063938,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "ifdb8gvbfra",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677015787619,
  "history_end_time" : 1677015787619,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "gt1ngh7evdu",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677015739919,
  "history_end_time" : 1677015739919,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "eqmqu863na2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677014884904,
  "history_end_time" : 1677014884904,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "y12ls7ucfhz",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677014795547,
  "history_end_time" : 1677014795547,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "ijqg5m5j5zc",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677014227950,
  "history_end_time" : 1677014227950,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "yide64owho8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677013908390,
  "history_end_time" : 1677013908390,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "yg0b7cgk795",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677013832967,
  "history_end_time" : 1677013832967,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "xq0xpqkz2rw",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677011873002,
  "history_end_time" : 1677011873002,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "b9ykkz3vtq2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677008198531,
  "history_end_time" : 1677008198531,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "q4r1phudk5m",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677008162913,
  "history_end_time" : 1677008162913,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "tnzzb7cbfqq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677001999544,
  "history_end_time" : 1677001999544,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "yts034fkknb",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677001732208,
  "history_end_time" : 1677001732208,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "gsu1783xlld",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677001593752,
  "history_end_time" : 1677001593752,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "drc5jl0jw65",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677000536749,
  "history_end_time" : 1677000536749,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "0544kbfqo62",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1676999722067,
  "history_end_time" : 1676999722067,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "yb51al",
  "indicator" : "Skipped"
},{
  "history_id" : "th86wc224rg",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1676999599020,
  "history_end_time" : 1676999599020,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "zv387pba0tw",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1676862212262,
  "history_end_time" : 1676862212262,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "gickwymdj9a",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1676329536216,
  "history_end_time" : 1676329536216,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ht59qgvastx",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1676329491717,
  "history_end_time" : 1676329491717,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ywxyqhfrhsj",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\nexit()  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/Users/gokulprathin/gw-workspace/ywxyqhfrhsj/service_prediction.py\", line 18, in <module>\n    import geojson\nModuleNotFoundError: No module named 'geojson'\n",
  "history_begin_time" : 1676063639817,
  "history_end_time" : 1676063642515,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "ts4qdiid4h0",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\nexit()  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/Users/gokulprathin/gw-workspace/ts4qdiid4h0/service_prediction.py\", line 17, in <module>\n    import geopandas as gpd\nModuleNotFoundError: No module named 'geopandas'\n",
  "history_begin_time" : 1675783806605,
  "history_end_time" : 1675783809510,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "ibs2onjwuot",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\nexit()  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n",
  "history_output" : "",
  "history_begin_time" : 1672015053151,
  "history_end_time" : 1672015054853,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "r5d4dl4rrmv",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\nexit()  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n",
  "history_output" : "",
  "history_begin_time" : 1671944456857,
  "history_end_time" : 1671944458660,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "g5couhejfmh",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\nexit()  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n",
  "history_output" : "",
  "history_begin_time" : 1670910687738,
  "history_end_time" : 1670910689640,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "b6s1nd8srke",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\nexit()  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n",
  "history_output" : "",
  "history_begin_time" : 1670910572268,
  "history_end_time" : 1670910574160,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "jghyd16dz5n",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1670910268431,
  "history_end_time" : 1670910268431,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "nkv4zo04hnb",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1670019638822,
  "history_end_time" : 1670019638822,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "55n6ya1vgyg",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\nexit()  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n",
  "history_output" : "",
  "history_begin_time" : 1667484738245,
  "history_end_time" : 1667484740429,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "6p0qfuwxjby",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\nexit()  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n",
  "history_output" : "",
  "history_begin_time" : 1667410810472,
  "history_end_time" : 1667410812401,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "aslw9nt7uom",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\nexit()  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n",
  "history_output" : "",
  "history_begin_time" : 1654521117157,
  "history_end_time" : 1654521118961,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "2k746nwjlmf",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\nexit()  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n",
  "history_output" : "",
  "history_begin_time" : 1647826118938,
  "history_end_time" : 1647826120615,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "5j0bd9slqr6",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\nexit()  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n",
  "history_output" : "",
  "history_begin_time" : 1647225953750,
  "history_end_time" : 1647225955516,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "u1c7tdtbguo",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\nexit()  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n",
  "history_output" : "",
  "history_begin_time" : 1646693035831,
  "history_end_time" : 1646693037497,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "0mng6wg8pce",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\nexit()  # for now, the workflow is not ready yet\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n",
  "history_output" : "",
  "history_begin_time" : 1646604649427,
  "history_end_time" : 1646604651060,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "6kpcbdrlvyp",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n",
  "history_output" : "/Users/joe\nThe Base Model model performance for testing set\n--------------------------------------\nMAE is 7.792623252483023\nMSE is 145.6170249908291\nR2 score is -0.3497606523873109\nRMSE is 12.067187948765408\nThe Optimized model performance for testing set\n--------------------------------------\nMAE is 7.635033087628328\nMSE is 138.08187844135637\nR2 score is -0.2799154929831078\nRMSE is 11.750824585592126\n",
  "history_begin_time" : 1646272339511,
  "history_end_time" : 1646272347051,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "41zmy9i70ub",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n",
  "history_output" : "Traceback (most recent call last):\n  File \"service_prediction.py\", line 3, in <module>\n    from sklearn.ensemble import RandomForestRegressor\nModuleNotFoundError: No module named 'sklearn'\n",
  "history_begin_time" : 1645977677449,
  "history_end_time" : 1645977679115,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "je29f6",
  "indicator" : "Done"
},{
  "history_id" : "0ld354sm3kh",
  "history_input" : "# Predict results using the model\n\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.model_selection import RandomizedSearchCV\n\n# read the grid geometry file\n\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\nmodis_test_ready_file = f\"{github_dir}/data/ready_for_training/modis_test_ready.csv\"\nmodis_test_ready_pd = pd.read_csv(modis_test_ready_file, header=0, index_col=0)\n\npd_to_clean = modis_test_ready_pd[[\"year\", \"m\", \"doy\", \"ndsi\", \"swe\", \"station_id\", \"cell_id\"]].dropna()\n\nall_features = pd_to_clean[[\"year\", \"m\", \"doy\", \"ndsi\"]].to_numpy()\nall_labels = pd_to_clean[[\"swe\"]].to_numpy().ravel()\n\ndef evaluate(model, test_features, y_test, model_name):\n    y_predicted = model.predict(test_features)\n    mae = metrics.mean_absolute_error(y_test, y_predicted)\n    mse = metrics.mean_squared_error(y_test, y_predicted)\n    r2 = metrics.r2_score(y_test, y_predicted)\n    rmse = math.sqrt(mse)\n\n    print(\"The {} model performance for testing set\".format(model_name))\n    print(\"--------------------------------------\")\n    print('MAE is {}'.format(mae))\n    print('MSE is {}'.format(mse))\n    print('R2 score is {}'.format(r2))\n    print('RMSE is {}'.format(rmse))\n    \n    return y_predicted\n\nbase_model = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest_basic.joblib\")\nbasic_predicted_values = evaluate(base_model, all_features, all_labels, \"Base Model\")\n\nbest_random = joblib.load(f\"{homedir}/Documents/GitHub/snowcast_trained_model/model/wormhole_random_forest.joblib\")\nrandom_predicted_values = evaluate(best_random, all_features, all_labels, \"Optimized\")\n",
  "history_output" : "Traceback (most recent call last):\n  File \"service_prediction.py\", line 3, in <module>\n    from sklearn.ensemble import RandomForestRegressor\nModuleNotFoundError: No module named 'sklearn'\n",
  "history_begin_time" : 1645977446839,
  "history_end_time" : 1645977448515,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "je29f6",
  "indicator" : "Done"
},{
  "history_id" : "rby4m0etw7q",
  "history_input" : "# Predict results using the model\n\nprint(\"feed data into the service and monitor the results\")\n\n",
  "history_output" : "feed data into the service and monitor the results\n",
  "history_begin_time" : 1642977868759,
  "history_end_time" : 1642977868857,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "nvdos9yaf4j",
  "history_input" : "# Predict results using the model\n\nprint(\"feed data into the service and monitor the results\")\n\n",
  "history_output" : "feed data into the service and monitor the results\n",
  "history_begin_time" : 1642969783156,
  "history_end_time" : 1642969783288,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "4yf68c43e6s",
  "history_input" : "# Predict results using the model\n\nprint(\"feed data into the service and monitor the results\")\n\n",
  "history_output" : "feed data into the service and monitor the results\n",
  "history_begin_time" : 1642455233709,
  "history_end_time" : 1642455233817,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "pw8xdgyyboc",
  "history_input" : "# Predict results using the model\n\nprint(\"feed data into the service and monitor the results\")\n\n",
  "history_output" : "feed data into the service and monitor the results\n",
  "history_begin_time" : 1642454685029,
  "history_end_time" : 1642454685159,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "v338oc2fnib",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1667410703760,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "wupclhxe7ou",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1681039697759,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "tnpl59wp76w",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677809171449,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "fiuz9cohp9l",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1678201703957,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "y3yenxnvcty",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1694185611211,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "q6i4liuzn6q",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677785529412,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "k3icaasvvin",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677797113213,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "izyaltmb7ey",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677809840718,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "7h0oqm5v8ub",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677959722602,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "lw4ljqa5sdz",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1678154846156,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "el9ec72zhx8",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677959583116,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "w8jd4vdvr5o",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1678206143045,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "gjtotcqtxi5",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1694185586126,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "qj56s9rode2",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677867648064,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "5ae6qcpr8ev",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1678201687041,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "0mgawcd2urp",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677958849869,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "p0fhbvf8io0",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677809573411,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "ajx9zaj4blc",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677786042625,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "fr09lsz8jtn",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677809306572,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "6c9fwjpn0p7",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677958952851,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "g688sgwmo2e",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677958291183,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "r8zjzrk3uo5",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1678312065069,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "d3c1bidbxvh",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677785383323,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "lp2412e0tgs",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677809554667,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "wy40r6dux5z",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677784516773,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "4d8f154mc0w",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677796528249,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "f7suez7hpu3",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677958754101,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "5kh6qrwo9qo",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1678201516408,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "m034ssfu4jr",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1678206378227,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "cc9gtcsmw52",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1678888215691,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "sygrpmufexr",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1678744167048,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "gdc8873c7zc",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1678883775422,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "g26gwtm6hsz",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1678557923632,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "d2zmndc67zm",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1678884438322,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "n0yhzxo2cn3",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1678648341602,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "k0kczfuzgs4",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1678725408335,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "oygzksayso5",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1678742571498,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "5wprhfx806l",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1678743615530,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "kd5kkn1g787",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1678746792982,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "oymxjqi5iew",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1678749935968,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "ooy6rhaqwll",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1678756684679,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "8njqozuuglk",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1678884042259,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "0jxdu62tf34",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1678884140246,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "fyy1ax8388b",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1678884535323,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "fbfu9qqqzdx",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1678884986354,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "0au1b74pstu",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1678887010620,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "9vi779fndo4",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1678887836224,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "0f0laf339ed",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1678887946441,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "1cc2mu3gqli",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1679091533637,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "yws217cevi0",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1679091744924,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "0nd2k7kwdlq",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1682984800278,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "jf7wuu",
  "indicator" : "Stopped"
},{
  "history_id" : "4fillxk8s5y",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1686235423743,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "jf7wuu",
  "indicator" : "Stopped"
},{
  "history_id" : "ayra6dj4hkq",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1686235482621,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "jf7wuu",
  "indicator" : "Stopped"
},{
  "history_id" : "obdk0twfu7i",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1686237909482,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "jf7wuu",
  "indicator" : "Stopped"
},{
  "history_id" : "br1jtxmugg4",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1688416572959,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "jf7wuu",
  "indicator" : "Stopped"
},{
  "history_id" : "fp0s4tgn092",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1688416660663,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "jf7wuu",
  "indicator" : "Stopped"
},{
  "history_id" : "yrqcxas0tc4",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1688416822944,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "jf7wuu",
  "indicator" : "Stopped"
},{
  "history_id" : "gz4a0l4706r",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1688416848465,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "jf7wuu",
  "indicator" : "Stopped"
},{
  "history_id" : "j1htr3dmpwo",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1688416907363,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "jf7wuu",
  "indicator" : "Stopped"
},{
  "history_id" : "7lb02ma8lbu",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1691530614286,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "tq3z35",
  "indicator" : "Stopped"
},{
  "history_id" : "93m0o03zzf7",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1691530622442,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "tq3z35",
  "indicator" : "Stopped"
},{
  "history_id" : "c3z0snyagae",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1691530721107,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "tq3z35",
  "indicator" : "Stopped"
},{
  "history_id" : "lm7urqf0jwn",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1691531284902,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "tq3z35",
  "indicator" : "Stopped"
},{
  "history_id" : "a167j548jwi",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1694972839688,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "hm08yzerong",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1695054019277,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "ij7x9bpc93t",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1695054033332,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "poz7kto09f8",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1695827867011,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "dk657p9h9lc",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1695827965226,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "e8qaoz0sujw",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1696432482235,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "d07ak38ambw",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1699806085198,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "snz2begxzud",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1700204245685,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "j7ashv7s44g",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1700462913684,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "ep8eoxjzuld",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1701015920039,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "fpn0m1msu9b",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1701230932254,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "w4aoozcqpag",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1701230952348,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "vwrex3zt11u",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1701234158044,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "p5mjn3nfy47",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1701272363357,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "fjs9pytosc5",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1701272875113,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "ohgoshrvsq8",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1702047789484,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "rl05ya1cxri",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1702633163901,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "6a9di7p5wpv",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1703627783056,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "bofu67l5el6",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1703642074632,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "me5r51bdktk",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1703646749624,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "ra10xj6v72v",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1703650812444,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "wfxnsyoduzh",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1703737316885,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "j5rh0umzmzy",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1703786917614,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "f1zqfq2p3wv",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1703789718825,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "2cdpq5xm6n8",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1704561887038,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Stopped"
},]
