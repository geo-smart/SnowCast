[{
  "history_id" : "8o8kyepbb1x",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714977334859,
  "history_end_time" : 1714977334859,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ap5ykwbadyy",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714968021633,
  "history_end_time" : 1714968021633,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "14ivrh7pkhh",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714956082087,
  "history_end_time" : 1714956340262,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "vbx6zc",
  "indicator" : "Stopped"
},{
  "history_id" : "7kkwok00n17",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714944526017,
  "history_end_time" : 1714944767069,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "vbx6zc",
  "indicator" : "Stopped"
},{
  "history_id" : "wnta3jqxc9q",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714943546182,
  "history_end_time" : 1714943546182,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "speqd923y15",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714897025124,
  "history_end_time" : 1714897025124,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "6qngrm58f7b",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714894043977,
  "history_end_time" : 1714895139353,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "rhagxepum06",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714881609440,
  "history_end_time" : 1714881609440,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "30ay6cvu7vp",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714409076748,
  "history_end_time" : 1714409076748,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "d7rhlfhj2zn",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714407283783,
  "history_end_time" : 1714407283783,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "b89y13dfcz7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714404799987,
  "history_end_time" : 1714404799987,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "rk8z52hbgs1",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714363209844,
  "history_end_time" : 1714363209844,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "grln12jx17c",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714362032524,
  "history_end_time" : 1714362032524,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "pt0mvm0n6p0",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714355595200,
  "history_end_time" : 1714355595200,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "c6ulmd5qoni",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714351396795,
  "history_end_time" : 1714351396795,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ue31is32244",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714348539192,
  "history_end_time" : 1714348539192,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "8qu8rcjhlh2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714345973102,
  "history_end_time" : 1714345973102,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "nl48pm692h4",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714343583730,
  "history_end_time" : 1714343583730,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "xi9y9me92xa",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714340841660,
  "history_end_time" : 1714340841660,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "q6yuld8eve8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714332797940,
  "history_end_time" : 1714332797940,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "cztea28vgb2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714328816009,
  "history_end_time" : 1714328816009,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "sfud9qfxzuh",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714323529041,
  "history_end_time" : 1714323529041,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "x4u92m22duu",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714320354858,
  "history_end_time" : 1714320354858,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "8oaov8pnfra",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714315863004,
  "history_end_time" : 1714315863004,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "d8t567o5la3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714283543331,
  "history_end_time" : 1714315861870,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "5e6in7xl7bj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714281870733,
  "history_end_time" : 1714283515028,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "hteoijyxbop",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714276838134,
  "history_end_time" : 1714315876792,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "84k3dgy3tno",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714274662726,
  "history_end_time" : 1714281869536,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "ga5y23bcwxn",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714272894583,
  "history_end_time" : 1714274352422,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "njr2v7rd189",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714265253344,
  "history_end_time" : 1714272892760,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "enl6mmbdodn",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714265112514,
  "history_end_time" : 1714265250896,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "jqujpk82k29",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714192735800,
  "history_end_time" : 1714265111632,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "reokilarckh",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714190417865,
  "history_end_time" : 1714274350932,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "aq49my2qovq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714104009156,
  "history_end_time" : 1714274350432,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "3hvu8obq69q",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714017609496,
  "history_end_time" : 1714274349891,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "s3bdhznx8rr",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1713931209819,
  "history_end_time" : 1714274349301,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "grypql9cv5y",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1713844809509,
  "history_end_time" : 1714274348762,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "yypbsqirhfg",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1713758409128,
  "history_end_time" : 1714274347299,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "5nvyfvz20ew",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1713672009587,
  "history_end_time" : 1714274346316,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "o3xh8zqd6i5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1713585609321,
  "history_end_time" : 1714274345795,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "r3afyqpoqya",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1713499209500,
  "history_end_time" : 1714274345249,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "kwslzw2hr5t",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1713412808768,
  "history_end_time" : 1714274344684,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "qmt9zrfaixv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1713326408881,
  "history_end_time" : 1714274343271,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "ow54v17g9np",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1713283461191,
  "history_end_time" : 1713283461191,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "juspiir42i8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1713240008890,
  "history_end_time" : 1714274342537,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "zb6e9qx67f7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1711771209377,
  "history_end_time" : 1711771209377,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "p46iffr3vtw",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1711684813447,
  "history_end_time" : 1714282475821,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "5sh9u7x0r0x",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1711598414913,
  "history_end_time" : 1714282474476,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "6saaf3xp54o",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1711592280368,
  "history_end_time" : 1711592280368,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "btwaa0a0277",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1711592081728,
  "history_end_time" : 1711592081728,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "2j0ush9vsmb",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1711512016104,
  "history_end_time" : 1711512016104,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "fykfikh3kao",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1711425614012,
  "history_end_time" : 1714282483090,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "zl56cohax49",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1711339212522,
  "history_end_time" : 1714282483717,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "h9nwvp1nsaj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1711252813340,
  "history_end_time" : 1711252813340,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "fb6o0w8fw4x",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1711166413813,
  "history_end_time" : 1711166413813,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "9vcdzhbd29b",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1711080008927,
  "history_end_time" : 1711080008927,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "sefxmu19p6o",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710993609515,
  "history_end_time" : 1714282484610,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "b54fzdfjpr6",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710907208974,
  "history_end_time" : 1714282485236,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "6pf0lq30anp",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710820808629,
  "history_end_time" : 1714282486271,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "e9o4srqyzsr",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710734409392,
  "history_end_time" : 1714282486917,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "lxizy3mlg4s",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710690214077,
  "history_end_time" : 1710690214077,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "zc860f9tlzb",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710648009080,
  "history_end_time" : 1714282488860,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "oqbszlwwqve",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710561608557,
  "history_end_time" : 1714282489520,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "6lx4rwb21dr",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710475209143,
  "history_end_time" : 1714282490272,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "nwgijprqroo",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710388809039,
  "history_end_time" : 1714282490833,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "uvck8frivot",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710302409286,
  "history_end_time" : 1714282491493,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "cpumxmm3mpj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710216009328,
  "history_end_time" : 1714282492094,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "pulrgx67wyr",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710172046504,
  "history_end_time" : 1710172046504,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "z9369tj8w6f",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710129608990,
  "history_end_time" : 1714282493720,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "vikyamhrwk4",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710080234033,
  "history_end_time" : 1710080234033,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "3thq89w6spf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710043208692,
  "history_end_time" : 1714282495055,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "hhgei781wiy",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709998716214,
  "history_end_time" : 1709998716214,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "z1n2en08kd3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709956808820,
  "history_end_time" : 1714282495719,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "1hi6rdl8xpo",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709924987491,
  "history_end_time" : 1709924987491,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "cdomkucta3a",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709870409841,
  "history_end_time" : 1714282496789,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "nwicsfn1ukb",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709845595286,
  "history_end_time" : 1709845595286,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "yijspslu04w",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709844621889,
  "history_end_time" : 1709844621889,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ldjyhpd0grs",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709842923313,
  "history_end_time" : 1709842923313,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "43pjfuk12yk",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709827652579,
  "history_end_time" : 1709844621140,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "j960nt32r44",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709826138633,
  "history_end_time" : 1709826138633,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "r7jzzqj3p54",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709797240763,
  "history_end_time" : 1709797240763,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "dymoqem0t47",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709791537985,
  "history_end_time" : 1709791537985,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "qvfscajqqxa",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709784009341,
  "history_end_time" : 1714282504655,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "8bb2bj05ffm",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709778056629,
  "history_end_time" : 1709778056629,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "jw906p6stiq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709774843540,
  "history_end_time" : 1709774843540,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "byb5jb9yabd",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709765244601,
  "history_end_time" : 1709774842930,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "u2evo8gu8z3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709763117589,
  "history_end_time" : 1709765243431,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "68d944h99vr",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709751527335,
  "history_end_time" : 1709751527335,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "8g4hsf2c9uo",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709751443113,
  "history_end_time" : 1709751495315,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "pjgded9ebvj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709697609193,
  "history_end_time" : 1714282506623,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "78vtjcchntq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709611208665,
  "history_end_time" : 1714282507119,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "faj53n3cm1m",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709524808723,
  "history_end_time" : 1714282507678,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "4ij9moe8po0",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709438408517,
  "history_end_time" : 1709438408517,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "3efbfpjqbpg",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709352008935,
  "history_end_time" : 1709352008935,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "zgriihx6qc4",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709265609279,
  "history_end_time" : 1709265609279,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "qvgj7pr8pg8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709179209309,
  "history_end_time" : 1709179209309,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "9lm7shwbgay",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709137312875,
  "history_end_time" : 1709137312875,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "va5ftnuqn64",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709092808864,
  "history_end_time" : 1709092808864,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "hhg2j9h0iv8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709085684124,
  "history_end_time" : 1709085684124,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "ogkveco86q4",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709078942116,
  "history_end_time" : 1709085672800,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "8drjlv",
  "indicator" : "Stopped"
},{
  "history_id" : "2cvlfkox9bg",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709038894831,
  "history_end_time" : 1709038894831,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "tcri9aij5lm",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709038872952,
  "history_end_time" : 1709038879057,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "8drjlv",
  "indicator" : "Stopped"
},{
  "history_id" : "di3zykxe5h9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709006408389,
  "history_end_time" : 1709006408389,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "upcqf0dz5iw",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708971826126,
  "history_end_time" : 1708971826126,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "yaoqfkn7fjb",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708958410853,
  "history_end_time" : 1708958410853,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "kq2hw2pq1tx",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708954624155,
  "history_end_time" : 1708954624155,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "48e9782hls8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708920009309,
  "history_end_time" : 1708920009309,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "lzrq0yto2n5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708833608960,
  "history_end_time" : 1708833608960,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "trtcbgm2m4x",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708747208693,
  "history_end_time" : 1708747208693,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "m32l8xzm4r7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708660808928,
  "history_end_time" : 1708660808928,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "1w2ffjgywyv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708574409559,
  "history_end_time" : 1708574409559,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "qiulge3w7bh",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708488009974,
  "history_end_time" : 1708488009974,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ys0c80ls5ny",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708401608819,
  "history_end_time" : 1708401608819,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "v8qzpmlpops",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708352215479,
  "history_end_time" : 1708352215479,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "3izu8nyqe14",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708348193262,
  "history_end_time" : 1708352214862,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "8drjlv",
  "indicator" : "Stopped"
},{
  "history_id" : "y72w8gke1o3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708315208969,
  "history_end_time" : 1708315208969,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ev77zqrboqo",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708312689866,
  "history_end_time" : 1708312689866,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "a7sq9kfl00v",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708305309890,
  "history_end_time" : 1708312689121,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "8drjlv",
  "indicator" : "Stopped"
},{
  "history_id" : "qwe3ijd2k5a",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708242679293,
  "history_end_time" : 1708242679293,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "fnlu2vn38hs",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708240733505,
  "history_end_time" : 1708240733505,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "ju4rswh1yo6",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708238769923,
  "history_end_time" : 1708238769923,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "dzftf6rfx0s",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708237144871,
  "history_end_time" : 1708237144871,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "pyco9x3art4",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708235187221,
  "history_end_time" : 1708235187221,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "zpc5cc8lsfd",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708233874625,
  "history_end_time" : 1708233874625,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "nnizoclzmyb",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708228809061,
  "history_end_time" : 1708228809061,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "v2jbow398in",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708227613792,
  "history_end_time" : 1708227613792,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "6kq8q6l22lp",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708142409230,
  "history_end_time" : 1708142409230,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "vlgx1s8emoi",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708056009041,
  "history_end_time" : 1708056009041,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ad1s7nxw3bo",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707969608918,
  "history_end_time" : 1707969608918,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "al93484xn6c",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707883208771,
  "history_end_time" : 1707883208771,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "jdg63ebyfve",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707796809200,
  "history_end_time" : 1707796809200,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ue9ujk6pnwr",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707750669704,
  "history_end_time" : 1707750669704,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "8k2jcxuq9hi",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707710409275,
  "history_end_time" : 1707710409275,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "j7ih39az043",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707624009248,
  "history_end_time" : 1707624009248,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "cf0b1fttuib",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707537608448,
  "history_end_time" : 1707537608448,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "k1swvy0efgx",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707491746680,
  "history_end_time" : 1707491746680,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "ntb8140l0va",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707484657877,
  "history_end_time" : 1707484657877,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "97qrjuh5416",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707451209547,
  "history_end_time" : 1707451209547,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "8a2baentqru",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707434644162,
  "history_end_time" : 1707434644162,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "57jy0u7fnxc",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707432571787,
  "history_end_time" : 1707432571787,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "ji36dne8js5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707431129225,
  "history_end_time" : 1707432053947,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "8drjlv",
  "indicator" : "Stopped"
},{
  "history_id" : "jeenpu9oa9r",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707418188619,
  "history_end_time" : 1707418188619,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "mahjd7",
  "indicator" : "Skipped"
},{
  "history_id" : "aihbscar6de",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707413610252,
  "history_end_time" : 1707413610252,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "mahjd7",
  "indicator" : "Skipped"
},{
  "history_id" : "tz7bw4ytbrd",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707364808537,
  "history_end_time" : 1707364808537,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "mwu0cd6xbq3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707278408793,
  "history_end_time" : 1707278408793,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "3woifxff3wa",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707192718844,
  "history_end_time" : 1707192718844,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ifpdw9zsenb",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707192008913,
  "history_end_time" : 1707448888636,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "a5zpq1wcxxz",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707189398995,
  "history_end_time" : 1707189398995,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "99qi42lkt6i",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707105608990,
  "history_end_time" : 1707750639178,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "sw15c0a2w12",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707019209046,
  "history_end_time" : 1707750639649,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "wiu3wyfycom",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706932808921,
  "history_end_time" : 1707750640192,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "ks51xu3v463",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706846409388,
  "history_end_time" : 1707750640626,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "job4t9vfjpl",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706760009647,
  "history_end_time" : 1707750643264,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "rw73133918h",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706673609185,
  "history_end_time" : 1707750643784,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "dth90yiq81o",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706587209121,
  "history_end_time" : 1707750644968,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "frmsvthr2o4",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706500808728,
  "history_end_time" : 1707750645645,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "i7nz5krqxdi",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706414409055,
  "history_end_time" : 1707750646090,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "plwjwvjgyec",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706366105874,
  "history_end_time" : 1706366105874,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "k8p42o5omt1",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706364888422,
  "history_end_time" : 1706364888422,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "li95lnnoh1s",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706328009210,
  "history_end_time" : 1707750646888,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "px6a3owjgi0",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706280497891,
  "history_end_time" : 1706280497891,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "0yo0nz5u4et",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706244881203,
  "history_end_time" : 1706244881203,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "tbcljwrvcsg",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706241609434,
  "history_end_time" : 1706244810638,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "zdkyiqd5hth",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706155209307,
  "history_end_time" : 1706244801305,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "b3ek2o11pa3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706068808759,
  "history_end_time" : 1706244800322,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "kpocr96tv6k",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705982408725,
  "history_end_time" : 1706244799958,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "mtpzipr36r5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705896758893,
  "history_end_time" : 1706244798993,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "w5dhnp5tpwf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705896009484,
  "history_end_time" : 1706244798511,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "ugl4s9haoba",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705849063719,
  "history_end_time" : 1706244798001,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "is2s6aj1667",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705809608644,
  "history_end_time" : 1705849649585,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "kifzbbz9hrc",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705793526736,
  "history_end_time" : 1705849647043,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "s38wi5bw56d",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705790835032,
  "history_end_time" : 1705790835032,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "nlbcje96wo9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705770627676,
  "history_end_time" : 1705849642233,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "pidxurv5jos",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705762760524,
  "history_end_time" : 1705849640876,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "wkuuok9rqm5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705723209159,
  "history_end_time" : 1705789738428,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "gd708cbhqgr",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705636808556,
  "history_end_time" : 1705770636193,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "mr44xifaw8j",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705550408991,
  "history_end_time" : 1705770635518,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "dz6r0armffs",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705464008490,
  "history_end_time" : 1705770635021,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "09l6sg8j4ya",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705422422443,
  "history_end_time" : 1705422422443,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "dp8kgkzii4i",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705377609094,
  "history_end_time" : 1705770633011,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "6wx9j80v4t1",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705291208701,
  "history_end_time" : 1705770632115,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "660w4wzrs2l",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705278850554,
  "history_end_time" : 1705278850554,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "cpmpm67hrf8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705270952720,
  "history_end_time" : 1705270952720,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "lirnmos71o4",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705204809201,
  "history_end_time" : 1705789661985,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "nmh5r69sfzj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705169057156,
  "history_end_time" : 1705169057156,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "mmw9ft8qsl2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705118409320,
  "history_end_time" : 1705789660750,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "t8mocho6o7k",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705072448047,
  "history_end_time" : 1705072448047,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "jih7xbcmdje",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705032009126,
  "history_end_time" : 1705789659522,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "52s571n8kkh",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704979918269,
  "history_end_time" : 1704979918269,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "2v9xqzjbrl7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704945609330,
  "history_end_time" : 1705789658786,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "7k2h50h4cig",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704918977558,
  "history_end_time" : 1704918977558,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "3rna7xri6t1",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704908919533,
  "history_end_time" : 1704908919533,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "u7a2u04hivk",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704859207388,
  "history_end_time" : 1705789668239,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "4wbgdsbid4e",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704775840727,
  "history_end_time" : 1704775840727,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "fohx19wkmq9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704772806592,
  "history_end_time" : 1705789667266,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "4ilhlfwlicd",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704726161223,
  "history_end_time" : 1704727049019,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "tr9tap9ahrb",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704686408132,
  "history_end_time" : 1705789666631,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "yqbxbourm40",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704644803677,
  "history_end_time" : 1704644803677,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "sp1da7mfdip",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704600007925,
  "history_end_time" : 1705789665899,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "gcvc85er35x",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704566156602,
  "history_end_time" : 1704566156602,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "k9ingwpn27q",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704565587358,
  "history_end_time" : 1704565587358,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "0vxuq5sue0s",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704564424141,
  "history_end_time" : 1704564424141,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "mybhjmqzvnc",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704562992152,
  "history_end_time" : 1704562992152,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ugpezr19syn",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704561889773,
  "history_end_time" : 1704561889773,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "725vjt19hix",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704561861144,
  "history_end_time" : 1704561887029,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "bcq44rfb0m8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704555479183,
  "history_end_time" : 1704555479183,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "981uuz4gnhs",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704555028173,
  "history_end_time" : 1704555028173,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "g0smwekgmg5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704553241747,
  "history_end_time" : 1704553241747,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "nbxfdv6kqm5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704552254586,
  "history_end_time" : 1704552254586,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ronykr3kuws",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704513607162,
  "history_end_time" : 1705789671081,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "p0hcaez5xa5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704427207277,
  "history_end_time" : 1705789671854,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "mic63h4v9ss",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704340807343,
  "history_end_time" : 1705789673097,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "6zd4rn5051j",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704330109264,
  "history_end_time" : 1704330109264,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "8374bszl7zw",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704329364826,
  "history_end_time" : 1704329364826,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "bpubzqpiurt",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704254407277,
  "history_end_time" : 1705789675623,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "stne39p5j1g",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704208947939,
  "history_end_time" : 1704208947939,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "7odefiddhov",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704207351999,
  "history_end_time" : 1704207351999,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "8m0h4kkuixn",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704205859347,
  "history_end_time" : 1704205859347,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "5qtu1pfbf69",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704168007192,
  "history_end_time" : 1705789676810,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "nxo0d84ci4o",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704081607243,
  "history_end_time" : 1705789677594,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "24hgry0o3rk",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703995208029,
  "history_end_time" : 1705789678787,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "nij5f4r44pa",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703962871382,
  "history_end_time" : 1703962871382,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "sxsqkfed8gv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703960265425,
  "history_end_time" : 1703960265425,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "hranqekbx7i",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703959737817,
  "history_end_time" : 1703959737817,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "286g4eidz17",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703958611564,
  "history_end_time" : 1703958611564,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "3c4qrx69q0z",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703955838202,
  "history_end_time" : 1703955838202,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "gmihf5vghvd",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703954150326,
  "history_end_time" : 1703954150326,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "0jdkvgtw10i",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703915768049,
  "history_end_time" : 1703915768049,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "sx66kj7k4x8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703915283463,
  "history_end_time" : 1703915283463,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "zeskhuy69ay",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703914476617,
  "history_end_time" : 1703914476617,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "9b105fsv5xc",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703912302148,
  "history_end_time" : 1703912302148,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "w1595ihau7l",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703908806853,
  "history_end_time" : 1705789681215,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "2sgekt84gvf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703906215355,
  "history_end_time" : 1703906215355,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "jsx7dpeln9l",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703900919121,
  "history_end_time" : 1703900919121,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ponz1v264ey",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703899837742,
  "history_end_time" : 1703899837742,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "62zqv6xmyiw",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703897422927,
  "history_end_time" : 1703897422927,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "31ekjnegvep",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703896125559,
  "history_end_time" : 1703896125559,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "kg4l4yfmpvb",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703890275967,
  "history_end_time" : 1703890275967,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "cmdv1vzh1bq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703886800786,
  "history_end_time" : 1703886800786,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "8rkq4ysfsde",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703885997742,
  "history_end_time" : 1703885997742,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "msftmdjssnj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703880194692,
  "history_end_time" : 1703880194692,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "w3qg6u0alnr",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703872753010,
  "history_end_time" : 1703872753010,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "mzp5orfczb3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703869828217,
  "history_end_time" : 1703869828217,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "sv6hmfxo968",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703868616905,
  "history_end_time" : 1703868616905,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "rkq24lthrkq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703867114023,
  "history_end_time" : 1703867114023,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "eecz9k4wwra",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703864885420,
  "history_end_time" : 1703864885420,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "nsz7odbxk5l",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703862637319,
  "history_end_time" : 1703862637319,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "in248paws0i",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703827227292,
  "history_end_time" : 1703827227292,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "9d1lvtfrw47",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703822411203,
  "history_end_time" : 1703822411203,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "6aeihy5fliy",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703786924615,
  "history_end_time" : 1703789718815,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "4dy3lkyiyh2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703786053467,
  "history_end_time" : 1703786917606,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "rr57vqyh40u",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703778395369,
  "history_end_time" : 1703778395369,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "c41v0m40cd0",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703739034245,
  "history_end_time" : 1703739034245,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "8enlwlgseo2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703738754279,
  "history_end_time" : 1703792459270,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "4v5in1s3nqc",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703736166884,
  "history_end_time" : 1703737316871,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "gq0ieo4d3fh",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703694763528,
  "history_end_time" : 1703694763528,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "m8j1jgflijr",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703659541184,
  "history_end_time" : 1703659541184,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "l2egqih7brn",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703658144658,
  "history_end_time" : 1703658144658,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "einit9lxhp5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703650855753,
  "history_end_time" : 1703650855753,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "wjbwvygkpbj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703646751509,
  "history_end_time" : 1703650812429,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "qnvgje07g3v",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703642120879,
  "history_end_time" : 1703646749616,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "f16z3zleipe",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703641988901,
  "history_end_time" : 1703642074624,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "jy2kynl839d",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703629665487,
  "history_end_time" : 1703629665487,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "usowy2u1a9u",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703626687960,
  "history_end_time" : 1703627783046,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "nvuv902d0gu",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703625782071,
  "history_end_time" : 1703625782071,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ar6swekhhuc",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703624783790,
  "history_end_time" : 1703624783790,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "906zs9sltrf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702875592796,
  "history_end_time" : 1702875592796,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "wyn5dv5rp2i",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702871264359,
  "history_end_time" : 1702871264359,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "2q8jpwjylnx",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702867996370,
  "history_end_time" : 1702867996370,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "lujxdxoepgr",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702866593367,
  "history_end_time" : 1702866593367,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "iqw4cx5lqmg",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702866137575,
  "history_end_time" : 1702866137575,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "g1svwlec9i4",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702657305584,
  "history_end_time" : 1702657305584,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ojw7dftkczz",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702633223026,
  "history_end_time" : 1702633223026,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "yxsg9tur0nh",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702633156884,
  "history_end_time" : 1702633163891,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "46lxy7psh6c",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702274520864,
  "history_end_time" : 1702274520864,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "e1nlalhcyv3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702257109180,
  "history_end_time" : 1702257109180,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "25goijujt2x",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702253506478,
  "history_end_time" : 1702253506478,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "zznm0epjuzf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702047800874,
  "history_end_time" : 1702047800874,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "7cjq5dlcyyw",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702046671803,
  "history_end_time" : 1702047789476,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "htmkkhrhm4u",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701838623972,
  "history_end_time" : 1701838623972,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "uggdq76zebk",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701272631455,
  "history_end_time" : 1701272875100,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "lfry1crcg9a",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701272152686,
  "history_end_time" : 1701272363344,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "c82e1bpzlhp",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701269761300,
  "history_end_time" : 1701269761300,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "rbrnb7imr65",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701245471995,
  "history_end_time" : 1701245471995,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "1xa2aznv0ob",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701234300601,
  "history_end_time" : 1701234300601,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "3ork786auf8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701232375254,
  "history_end_time" : 1701234158036,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "fmbog1lahoh",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701231048651,
  "history_end_time" : 1701231048651,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "a23pd4oxybc",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701230933446,
  "history_end_time" : 1701230952338,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "dt6bwlzme3b",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701230796315,
  "history_end_time" : 1701230932243,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "snd6mblcq6j",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701230384865,
  "history_end_time" : 1701230384865,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ektrq3qvd0v",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701229983492,
  "history_end_time" : 1701229983492,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "cdw8q49llew",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701228899355,
  "history_end_time" : 1701228899355,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "p24zahuvppj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701228374784,
  "history_end_time" : 1701228374784,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "dodd3230quo",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701228236325,
  "history_end_time" : 1701228236325,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "5vqv0835ii4",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701228118487,
  "history_end_time" : 1701228118487,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "jyrimkqt50p",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701228056510,
  "history_end_time" : 1701228056510,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "aiufetivktq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701227912484,
  "history_end_time" : 1701227912484,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "8j7n5cbsweu",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701013937389,
  "history_end_time" : 1701015920033,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "bxkokoej0yj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700974688674,
  "history_end_time" : 1700974688674,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "7wnnp3da07r",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700885116779,
  "history_end_time" : 1700885116779,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "qmh1f8ehf0z",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700471590163,
  "history_end_time" : 1700471590163,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "u5f94wrhkry",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700468936386,
  "history_end_time" : 1700468936386,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "aq9fq1mera9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700461922953,
  "history_end_time" : 1700462913663,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "j00fmqmeiux",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700448500122,
  "history_end_time" : 1700448500122,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "v78sjhtppny",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700447319829,
  "history_end_time" : 1700447319829,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "mo58z5u0ilb",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700230067227,
  "history_end_time" : 1700230067227,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "s5cl6ktgnuq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700229012352,
  "history_end_time" : 1700229012352,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "y25pvugdxt1",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700210213795,
  "history_end_time" : 1700210213795,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "h0geypha6ni",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700209780147,
  "history_end_time" : 1700209780147,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "r67ogj4w5ml",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700209729233,
  "history_end_time" : 1700209729233,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "pp6eocx20q2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700203478632,
  "history_end_time" : 1700204245677,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "gmf5i4qjplk",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700201828247,
  "history_end_time" : 1700201828247,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "afkvd82vwc8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700200332840,
  "history_end_time" : 1700200332840,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "uubmn392221",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700145667857,
  "history_end_time" : 1700145667857,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "4lneqmg1xx7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700143295291,
  "history_end_time" : 1700143295291,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "qk1g5gpr0h9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700141615798,
  "history_end_time" : 1700141615798,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "3jpyl3fwu3d",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700134126823,
  "history_end_time" : 1700134126823,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "aumklyufjxt",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700133783685,
  "history_end_time" : 1700133783685,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "majxmi1poo0",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1699992839743,
  "history_end_time" : 1699992839743,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "zrljry7q0j4",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1699982145380,
  "history_end_time" : 1699982145380,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "akzzy73glz6",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1699941614787,
  "history_end_time" : 1699941614787,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "d74azjv0j2g",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1699939440522,
  "history_end_time" : 1699939440522,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "wdvshs3xjuq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1699937910451,
  "history_end_time" : 1699937910451,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "o4w0legt3ob",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1699805634584,
  "history_end_time" : 1699806085187,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "qy7nlm7ccdb",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1699684154026,
  "history_end_time" : 1705789690217,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "rg6avcjx7qk",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1699681071314,
  "history_end_time" : 1699681071314,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "x3km9i4frhw",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698762678661,
  "history_end_time" : 1698762678661,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "67ic1jefwhs",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698762637920,
  "history_end_time" : 1698762637920,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "offyvne13v0",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698276496944,
  "history_end_time" : 1698276496944,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ao7affc17o4",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698252277351,
  "history_end_time" : 1698252277351,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "f34opu1d19w",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698251392452,
  "history_end_time" : 1698251392452,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "cgeue9o7m10",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698228210920,
  "history_end_time" : 1698228210920,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "zmekyqascmf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698227897123,
  "history_end_time" : 1698227897123,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "cyb042owfq0",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698163737278,
  "history_end_time" : 1698163737278,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "53byddaxreg",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698163445812,
  "history_end_time" : 1698163445812,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "pxxcbm2nfe0",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698163121524,
  "history_end_time" : 1698163121524,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "s2hgcgk5oo7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698160809324,
  "history_end_time" : 1698160809324,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "iovzbz69fa3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698157805154,
  "history_end_time" : 1698157805154,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "g9zkcmf16j4",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698152099718,
  "history_end_time" : 1698152099718,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "cp1gus2wirl",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698095495695,
  "history_end_time" : 1698095495695,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "f2769qv2ei3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698075453524,
  "history_end_time" : 1698075453524,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "en701t9cgwr",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1697349529979,
  "history_end_time" : 1697349529979,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ndm1guw9rba",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1697348852228,
  "history_end_time" : 1697348852228,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "wnaxjuoevw1",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1697189923523,
  "history_end_time" : 1697189923523,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "jarlmkjbsp1",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1697188523267,
  "history_end_time" : 1697188523267,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "yvnc88yekx4",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1697187892229,
  "history_end_time" : 1697187892229,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "kyelefkb7zq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1697187367933,
  "history_end_time" : 1697187367933,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "22dtswav6kj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1696863953141,
  "history_end_time" : 1696863953141,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "jenmv0qaqmb",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1696862402864,
  "history_end_time" : 1696862402864,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "okut2kc1qx4",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1696832263615,
  "history_end_time" : 1696832263615,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "4k1zd2hfzna",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1696831867301,
  "history_end_time" : 1696831867301,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "u7smz8c3vr9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1696830174195,
  "history_end_time" : 1696830174195,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "q18t430fc5r",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1696787541853,
  "history_end_time" : 1696787541853,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "9jjkjrec3b2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1696786838115,
  "history_end_time" : 1696786838115,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "3o9x1gb598f",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1696771780795,
  "history_end_time" : 1696771780795,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "asz8ndiglpv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1696602943909,
  "history_end_time" : 1696602943909,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ry13pum2i7n",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1696432484304,
  "history_end_time" : 1696432484304,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "sipoakuuvi5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1696432299731,
  "history_end_time" : 1696432482227,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "3owdo423jz9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695827991061,
  "history_end_time" : 1695827991061,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "my5aa0f3psq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695827889160,
  "history_end_time" : 1695827964210,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "810uihk7s5j",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695827855627,
  "history_end_time" : 1695827867000,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "5wm029xk74v",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695696616098,
  "history_end_time" : 1695696616098,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "kr4kfm3r5qu",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695694257312,
  "history_end_time" : 1695694257312,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "swnba683wic",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695693585731,
  "history_end_time" : 1695693585731,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "667x7o45sjj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695693149337,
  "history_end_time" : 1695693149337,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "u5cztptoybq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695580915801,
  "history_end_time" : 1695580915801,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "pfml4pvt1nx",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695576291633,
  "history_end_time" : 1695576291633,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "zl6xvgs6mhg",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695575930984,
  "history_end_time" : 1695575930984,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "qtteg1uhd6z",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695535769180,
  "history_end_time" : 1695535769180,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "vzfemli95rr",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695535478670,
  "history_end_time" : 1695535478670,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "3i23enjs27q",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695535214009,
  "history_end_time" : 1695535214009,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "pdskoy9eez1",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695534943570,
  "history_end_time" : 1695534943570,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "msy6cx0a0hv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695534671809,
  "history_end_time" : 1695534671809,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "pj2vn196usd",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695533024051,
  "history_end_time" : 1695533024051,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "moilmzz4l84",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695529187848,
  "history_end_time" : 1695529187848,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "qhhi85vyq3q",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695528505127,
  "history_end_time" : 1695528505127,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "i6ceo8nbw0u",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695515862357,
  "history_end_time" : 1695515862357,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "8lm6ay6t8v1",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695506423816,
  "history_end_time" : 1695506423816,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "qgpdmk8pwol",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695418741257,
  "history_end_time" : 1695418741257,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "xuw3kb5rxru",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695417619660,
  "history_end_time" : 1695417619660,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "6374cbwxb92",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695417171263,
  "history_end_time" : 1695417171263,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "og08jp86uub",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695417052718,
  "history_end_time" : 1695417052718,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "7bp9a546vj3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695416915967,
  "history_end_time" : 1695416915967,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "dbcbft2487n",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695106488928,
  "history_end_time" : 1695106488928,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "bbh0ob36jtj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695106316134,
  "history_end_time" : 1695106316134,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "e3u6qdd3j6n",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695054045010,
  "history_end_time" : 1695054045010,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "elutq7k7th7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695054019741,
  "history_end_time" : 1695054032319,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "dpw7exzoa8x",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695053979873,
  "history_end_time" : 1695054019269,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "7eq2n9dfe2u",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695053793320,
  "history_end_time" : 1695053793320,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "fwra2fq9w22",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695053733291,
  "history_end_time" : 1695053733291,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "49pgxior238",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1694971144771,
  "history_end_time" : 1694972839682,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "2boe5kpt6hm",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1694970707899,
  "history_end_time" : 1694970707899,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "q5b6uuhsw8v",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1694970594738,
  "history_end_time" : 1694970594738,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "udpqqkdjfzm",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1694970131463,
  "history_end_time" : 1694970131463,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "eyomblaj1yo",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1694969349954,
  "history_end_time" : 1694969349954,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "d6vb9xs9y2y",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1694905307637,
  "history_end_time" : 1694905307637,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "y4dl8nmck3z",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1694897887106,
  "history_end_time" : 1694897887106,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "dahamogdttd",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1691531335734,
  "history_end_time" : 1691531335734,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "tq3z35",
  "indicator" : "Skipped"
},{
  "history_id" : "ea432yt6p1f",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1691531292592,
  "history_end_time" : 1691531292592,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "tq3z35",
  "indicator" : "Skipped"
},{
  "history_id" : "l8i44ooj56r",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1691531254441,
  "history_end_time" : 1691531284895,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "tq3z35",
  "indicator" : "Stopped"
},{
  "history_id" : "xxo3y6g9l84",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1691531163332,
  "history_end_time" : 1691531163332,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "tq3z35",
  "indicator" : "Skipped"
},{
  "history_id" : "y5mad6m79ho",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1691531120708,
  "history_end_time" : 1691531120708,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "tq3z35",
  "indicator" : "Skipped"
},{
  "history_id" : "cr5b6ibkuny",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1691531060736,
  "history_end_time" : 1691531060736,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "tq3z35",
  "indicator" : "Skipped"
},{
  "history_id" : "2ze2qjz6qip",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1691530848224,
  "history_end_time" : 1691530848224,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "tq3z35",
  "indicator" : "Skipped"
},{
  "history_id" : "oso4nqcytf3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1691530717533,
  "history_end_time" : 1691530721100,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "tq3z35",
  "indicator" : "Stopped"
},{
  "history_id" : "i79wh17ub1j",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1691530689973,
  "history_end_time" : 1691530716743,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "tq3z35",
  "indicator" : "Stopped"
},{
  "history_id" : "b36m3ltewpb",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1691530620898,
  "history_end_time" : 1691530622432,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "tq3z35",
  "indicator" : "Stopped"
},{
  "history_id" : "3wro6ao6pcy",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1691530616326,
  "history_end_time" : 1691530616326,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "tq3z35",
  "indicator" : "Skipped"
},{
  "history_id" : "y2o8qbb5xp8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1691530599533,
  "history_end_time" : 1691530614278,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "tq3z35",
  "indicator" : "Stopped"
},{
  "history_id" : "xz4ibilpi9p",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1689632033789,
  "history_end_time" : 1689632033789,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "9p9hb877vd8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1689631636416,
  "history_end_time" : 1689631636416,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "tq3z35",
  "indicator" : "Skipped"
},{
  "history_id" : "9mjzh102n0b",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1689135057823,
  "history_end_time" : 1689135057823,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "jsonokjvrpd",
  "history_input" : "import os\nimport pprint\n\n# import gdal\nimport subprocess\nfrom datetime import datetime, timedelta\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\nmodis_download_dir = \"/home/chetana/modis_download_folder/\"\nmodis_downloaded_data = modis_download_dir + \"n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\ngeo_tiff = modis_download_dir + \"geo-tiff/\"\nvrt_file_dir = modis_download_dir + \"vrt_files/\"\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(dir_path)\n\ntile_list = ['h09v04', 'h10v04', 'h11v04', 'h08v04', 'h08v05', 'h09v05', 'h10v05', 'h07v06', 'h08v06', 'h09v06']\n\n\ndef get_files(directory):\n    file_directory = list()\n    complete_directory_structure = dict()\n    for dirpath, dirnames, filenames in os.walk(directory):\n        for filename in filenames:\n            file_path = os.path.join(dirpath, filename)\n            file_directory.append(file_path)\n            complete_directory_structure[str(dirpath).rsplit('/')[-1]] = file_directory\n\n    return complete_directory_structure\n\n\ndef get_latest_date():\n    all_rows = get_web_row_data()\n\n    latest_date = None\n    for row in all_rows:\n        try:\n            new_date = datetime.strptime(row.text[:-1], '%Y.%m.%d')\n            if latest_date is None or latest_date < new_date:\n                latest_date = new_date\n        except:\n            continue\n\n    print(\"Find the latest date: \", latest_date.strftime(\"%Y.%m.%d\"))\n    second_latest_date = latest_date - timedelta(days=8)\n    return second_latest_date\n\n\ndef get_web_row_data():\n    try:\n        from BeautifulSoup import BeautifulSoup\n    except ImportError:\n        from bs4 import BeautifulSoup\n    modis_list_url = \"https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\n    print(\"Source / Product: \" + modis_list_url)\n    if os.path.exists(\"index.html\"):\n        os.remove(\"index.html\")\n    subprocess.run(\n        f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies '\n        f'--no-check-certificate --auth-no-challenge=on -np -e robots=off {modis_list_url}',\n        shell=True, stderr=subprocess.PIPE)\n    index_file = open('index.html', 'r')\n    webContent = index_file.read()\n    parsed_html = BeautifulSoup(webContent, \"html.parser\")\n    all_rows = parsed_html.body.findAll('td', attrs={'class': 'indexcolname'})\n    return all_rows\n\n\ndef download_recent_modis(date=None):\n    if date:\n        latest_date_str = date.strftime(\"%Y.%m.%d\")\n    else:\n        latest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\n    for tile in tile_list:\n        download_cmd = f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies ' \\\n                       f'--no-check-certificate --auth-no-challenge=on -r --reject \"i' \\\n                       f'ndex.html*\" -P {modis_download_dir} -np -e robots=off ' \\\n                       f'https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/ -A \"*{tile}*.hdf\" --quiet'\n        # print(download_cmd)\n        p = subprocess.run(download_cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        print(\"Downloading tile, \", tile, \" with status code \", \"OK\" if p.returncode == 0 else p.returncode)\n\n\n# def merge_wrap_tif_into_western_us_tif():\n#     latest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\n#     # traverse the folder and find the new download files\n#     for filename in os.listdir(f\"n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/\"):\n#         f = os.path.join(directory, filename)\n#         # checking if it is a file\n#         if os.path.isfile(f):\n#             print(f)\n# merge_wrap_tif_into_western_us_tif()\n\ndef hdf_tif_cvt(resource_path, destination_path):\n    if not os.path.isfile(resource_path):\n        raise Exception(\"HDF file not found\")\n\n    max_snow_extent_path = destination_path + \"maximum_snow_extent/\"\n    eight_day_snow_cover = destination_path + \"eight_day_snow_cover/\"\n    if not os.path.exists(max_snow_extent_path):\n        os.makedirs(max_snow_extent_path)\n    if not os.path.exists(eight_day_snow_cover):\n        os.makedirs(eight_day_snow_cover)\n\n    tif_file_name_snow_extent = max_snow_extent_path + resource_path.split('/')[-1].split('.hdf')[0]\n    tif_file_name_eight_day = eight_day_snow_cover + resource_path.split('/')[-1].split('.hdf')[0]\n    tif_file_extension = '.tif'\n\n    maximum_snow_extent_file_name = tif_file_name_snow_extent + '_max_snow_extent' + tif_file_extension\n    eight_day_snow_cover_file_name = tif_file_name_eight_day + '_modis_snow_500m' + tif_file_extension\n\n    maximum_snow_extent = f\"HDF4_EOS:EOS_GRID:\\\"{resource_path}\\\":MOD_Grid_Snow_500m:Maximum_Snow_Extent\"\n    eight_day_snow_cover = f\"HDF4_EOS:EOS_GRID:\\\"{resource_path}\\\":MOD_Grid_Snow_500m:Eight_Day_Snow_Cover\"\n\n    subprocess.run(f\"gdal_translate {maximum_snow_extent} {maximum_snow_extent_file_name}\", shell=True)\n    subprocess.run(f\"gdal_translate {eight_day_snow_cover} {eight_day_snow_cover_file_name}\", shell=True)\n\n\ndef combine_geotiff_gdal(vrt_array, destination):\n    subprocess.run(f\"gdalbuildvrt {destination} {' '.join(vrt_array)}\", shell=True)\n    tif_name = destination.split('.vrt')[-2] + '.tif'\n    subprocess.run(f\"gdal_translate -of GTiff {destination} {tif_name}\", shell=True)\n\n\ndef hdf_tif_conversion(resource_path, destination_path):\n    hdf_dataset = gdal.Open(resource_path)\n    if hdf_dataset is None:\n        raise Exception(\"Could not open HDF dataset\")\n\n    maximum_snow_extent = hdf_dataset.GetSubDatasets()[0][0]\n    modis_snow_500m = hdf_dataset.GetSubDatasets()[1][0]\n\n    driver = gdal.GetDriverByName('GTiff')\n\n    tif_file_name = destination_path + resource_path.split('/')[-1].split('.hdf')[0]\n    tif_file_extension = '.tif'\n\n    maximum_snow_extent_file_name = tif_file_name + '_max_snow_extent' + tif_file_extension\n    modis_snow_500m_file_name = tif_file_name + '_modis_snow_500m' + tif_file_extension\n\n    maximum_snow_extent_dataset = gdal.Open(maximum_snow_extent)\n    modis_snow_500m_dataset = gdal.Open(modis_snow_500m)\n\n    if maximum_snow_extent_dataset is None:\n        raise Exception(\"Could not open maximum_snow_extent dataset\")\n\n    if modis_snow_500m_dataset is None:\n        raise Exception(\"Could not open modis_snow_500m dataset\")\n\n    driver.CreateCopy(maximum_snow_extent_file_name, maximum_snow_extent_dataset, 0)\n    driver.CreateCopy(modis_snow_500m_file_name, modis_snow_500m_dataset, 0)\n\n    print(\"HDF to TIF conversion completed successfully.\")\n\n\ndef download_modis_archive(*, start_date, end_date):\n    all_archive_dates = list()\n\n    all_rows = get_web_row_data()\n    for r in all_rows:\n        try:\n            all_archive_dates.append(datetime.strptime(r.text.replace('/', ''), '%Y.%m.%d'))\n        except:\n            continue\n\n    for a in all_archive_dates:\n        if start_date <= a <= end_date:\n            download_recent_modis(a)\n\n\ndef step_one_download_modis():\n  download_recent_modis()\n                   \ndef step_two_merge_modis_western_us():\n  download_modis_archive(start_date=datetime(2022, 1, 1), end_date=datetime(2022, 12, 31))\n\n  files = get_files(modis_downloaded_data)\n  for k, v in get_files(modis_downloaded_data).items():\n\n    conversion_path = modis_download_dir + \"geo-tiff/\" + k + \"/\"\n    if not os.path.exists(conversion_path):\n        os.makedirs(conversion_path)\n    for hdf_file in v:\n        # print(hdf_file.split('/')[-1].split('.hdf')[0], 1)\n        hdf_tif_cvt(hdf_file, conversion_path)\n\n  if not os.path.exists(vrt_file_dir):\n    os.makedirs(vrt_file_dir)\n\n\n  directories = [d for d in os.listdir(geo_tiff) if   os.path.isdir(os.path.join(geo_tiff, d))]\n\n  for d in directories:\n    eight_day_snow_cover = geo_tiff + d + '/eight_day_snow_cover'\n    maximum_snow_extent = geo_tiff + d + '/maximum_snow_extent'\n\n    eight_day_abs_path = list()\n    snow_extent_abs_path = list()\n\n    for file in os.listdir(eight_day_snow_cover):\n        file_path = os.path.abspath(os.path.join(eight_day_snow_cover, file))\n        eight_day_abs_path.append(file_path)\n\n    for file in os.listdir(maximum_snow_extent):\n        file_path = os.path.abspath(os.path.join(maximum_snow_extent, file))\n        snow_extent_abs_path.append(file_path)\n\n    combine_geotiff_gdal(eight_day_abs_path, vrt_file_dir + f\"{d}_eight_day.vrt\")\n    combine_geotiff_gdal(snow_extent_abs_path, vrt_file_dir + f\"{d}_snow_extent.vrt\")\n\n                   \n# main workflow is here:\nstep_one_download_modis()\nstep_two_merge_modis_western_us()\n\n\n\n\n\n\n\n\n\n\n\n\n",
  "history_output" : "  File \"/home/chetana/gw-workspace/jsonokjvrpd/data_gee_modis_real_time.py\", line 77\n    f'--no-check-certificate --auth-no-challenge=on -r --reject \"i' \nIndentationError: unexpected indent\n",
  "history_begin_time" : 1688416891941,
  "history_end_time" : 1688416907374,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "jf7wuu",
  "indicator" : "Stopped"
},{
  "history_id" : "jn37ux2j7u8",
  "history_input" : "import os\nimport pprint\n\n# import gdal\nimport subprocess\nfrom datetime import datetime, timedelta\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\nmodis_download_dir = \"/home/chetana/modis_download_folder/\"\nmodis_downloaded_data = modis_download_dir + \"n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\ngeo_tiff = modis_download_dir + \"geo-tiff/\"\nvrt_file_dir = modis_download_dir + \"vrt_files/\"\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(dir_path)\n\ntile_list = ['h09v04', 'h10v04', 'h11v04', 'h08v04', 'h08v05', 'h09v05', 'h10v05', 'h07v06', 'h08v06', 'h09v06']\n\n\ndef get_files(directory):\n    file_directory = list()\n    complete_directory_structure = dict()\n    for dirpath, dirnames, filenames in os.walk(directory):\n        for filename in filenames:\n            file_path = os.path.join(dirpath, filename)\n            file_directory.append(file_path)\n            complete_directory_structure[str(dirpath).rsplit('/')[-1]] = file_directory\n\n    return complete_directory_structure\n\n\ndef get_latest_date():\n    all_rows = get_web_row_data()\n\n    latest_date = None\n    for row in all_rows:\n        try:\n            new_date = datetime.strptime(row.text[:-1], '%Y.%m.%d')\n            if latest_date is None or latest_date < new_date:\n                latest_date = new_date\n        except:\n            continue\n\n    print(\"Find the latest date: \", latest_date.strftime(\"%Y.%m.%d\"))\n    second_latest_date = latest_date - timedelta(days=8)\n    return second_latest_date\n\n\ndef get_web_row_data():\n    try:\n        from BeautifulSoup import BeautifulSoup\n    except ImportError:\n        from bs4 import BeautifulSoup\n    modis_list_url = \"https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\n    print(\"Source / Product: \" + modis_list_url)\n    if os.path.exists(\"index.html\"):\n        os.remove(\"index.html\")\n    subprocess.run(\n        f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies '\n        f'--no-check-certificate --auth-no-challenge=on -np -e robots=off {modis_list_url}',\n        shell=True, stderr=subprocess.PIPE)\n    index_file = open('index.html', 'r')\n    webContent = index_file.read()\n    parsed_html = BeautifulSoup(webContent, \"html.parser\")\n    all_rows = parsed_html.body.findAll('td', attrs={'class': 'indexcolname'})\n    return all_rows\n\n\ndef download_recent_modis(date=None):\n    if date:\n        latest_date_str = date.strftime(\"%Y.%m.%d\")\n    else:\n        latest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\n    for tile in tile_list:\n        download_cmd = f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies ' \\\n                       f'--no-check-certificate --auth-no-challenge=on -r --reject \"i' \\\n                       f'ndex.html*\" -P {modis_download_dir} -np -e robots=off ' \\\n                       f'https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/ -A \"*{tile}*.hdf\" --quiet'\n        # print(download_cmd)\n        p = subprocess.run(download_cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        print(\"Downloading tile, \", tile, \" with status code \", \"OK\" if p.returncode == 0 else p.returncode)\n\n\n# def merge_wrap_tif_into_western_us_tif():\n#     latest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\n#     # traverse the folder and find the new download files\n#     for filename in os.listdir(f\"n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/\"):\n#         f = os.path.join(directory, filename)\n#         # checking if it is a file\n#         if os.path.isfile(f):\n#             print(f)\n# merge_wrap_tif_into_western_us_tif()\n\ndef hdf_tif_cvt(resource_path, destination_path):\n    if not os.path.isfile(resource_path):\n        raise Exception(\"HDF file not found\")\n\n    max_snow_extent_path = destination_path + \"maximum_snow_extent/\"\n    eight_day_snow_cover = destination_path + \"eight_day_snow_cover/\"\n    if not os.path.exists(max_snow_extent_path):\n        os.makedirs(max_snow_extent_path)\n    if not os.path.exists(eight_day_snow_cover):\n        os.makedirs(eight_day_snow_cover)\n\n    tif_file_name_snow_extent = max_snow_extent_path + resource_path.split('/')[-1].split('.hdf')[0]\n    tif_file_name_eight_day = eight_day_snow_cover + resource_path.split('/')[-1].split('.hdf')[0]\n    tif_file_extension = '.tif'\n\n    maximum_snow_extent_file_name = tif_file_name_snow_extent + '_max_snow_extent' + tif_file_extension\n    eight_day_snow_cover_file_name = tif_file_name_eight_day + '_modis_snow_500m' + tif_file_extension\n\n    maximum_snow_extent = f\"HDF4_EOS:EOS_GRID:\\\"{resource_path}\\\":MOD_Grid_Snow_500m:Maximum_Snow_Extent\"\n    eight_day_snow_cover = f\"HDF4_EOS:EOS_GRID:\\\"{resource_path}\\\":MOD_Grid_Snow_500m:Eight_Day_Snow_Cover\"\n\n    subprocess.run(f\"gdal_translate {maximum_snow_extent} {maximum_snow_extent_file_name}\", shell=True)\n    subprocess.run(f\"gdal_translate {eight_day_snow_cover} {eight_day_snow_cover_file_name}\", shell=True)\n\n\ndef combine_geotiff_gdal(vrt_array, destination):\n    subprocess.run(f\"gdalbuildvrt {destination} {' '.join(vrt_array)}\", shell=True)\n    tif_name = destination.split('.vrt')[-2] + '.tif'\n    subprocess.run(f\"gdal_translate -of GTiff {destination} {tif_name}\", shell=True)\n\n\ndef hdf_tif_conversion(resource_path, destination_path):\n    hdf_dataset = gdal.Open(resource_path)\n    if hdf_dataset is None:\n        raise Exception(\"Could not open HDF dataset\")\n\n    maximum_snow_extent = hdf_dataset.GetSubDatasets()[0][0]\n    modis_snow_500m = hdf_dataset.GetSubDatasets()[1][0]\n\n    driver = gdal.GetDriverByName('GTiff')\n\n    tif_file_name = destination_path + resource_path.split('/')[-1].split('.hdf')[0]\n    tif_file_extension = '.tif'\n\n    maximum_snow_extent_file_name = tif_file_name + '_max_snow_extent' + tif_file_extension\n    modis_snow_500m_file_name = tif_file_name + '_modis_snow_500m' + tif_file_extension\n\n    maximum_snow_extent_dataset = gdal.Open(maximum_snow_extent)\n    modis_snow_500m_dataset = gdal.Open(modis_snow_500m)\n\n    if maximum_snow_extent_dataset is None:\n        raise Exception(\"Could not open maximum_snow_extent dataset\")\n\n    if modis_snow_500m_dataset is None:\n        raise Exception(\"Could not open modis_snow_500m dataset\")\n\n    driver.CreateCopy(maximum_snow_extent_file_name, maximum_snow_extent_dataset, 0)\n    driver.CreateCopy(modis_snow_500m_file_name, modis_snow_500m_dataset, 0)\n\n    print(\"HDF to TIF conversion completed successfully.\")\n\n\ndef download_modis_archive(*, start_date, end_date):\n    all_archive_dates = list()\n\n    all_rows = get_web_row_data()\n    for r in all_rows:\n        try:\n            all_archive_dates.append(datetime.strptime(r.text.replace('/', ''), '%Y.%m.%d'))\n        except:\n            continue\n\n    for a in all_archive_dates:\n        if start_date <= a <= end_date:\n            download_recent_modis(a)\n\n\ndef step_one_download_modis():\n  download_recent_modis()\n                   \ndef step_two_merge_modis_western_us():\n  download_modis_archive(start_date=datetime(2022, 1, 1), end_date=datetime(2022, 12, 31))\n\n  files = get_files(modis_downloaded_data)\n  for k, v in get_files(modis_downloaded_data).items():\n\n    conversion_path = modis_download_dir + \"geo-tiff/\" + k + \"/\"\n    if not os.path.exists(conversion_path):\n        os.makedirs(conversion_path)\n    for hdf_file in v:\n        # print(hdf_file.split('/')[-1].split('.hdf')[0], 1)\n        hdf_tif_cvt(hdf_file, conversion_path)\n\n  if not os.path.exists(vrt_file_dir):\n    os.makedirs(vrt_file_dir)\n\n\n  directories = [d for d in os.listdir(geo_tiff) if   os.path.isdir(os.path.join(geo_tiff, d))]\n\n  for d in directories:\n    eight_day_snow_cover = geo_tiff + d + '/eight_day_snow_cover'\n    maximum_snow_extent = geo_tiff + d + '/maximum_snow_extent'\n\n    eight_day_abs_path = list()\n    snow_extent_abs_path = list()\n\n    for file in os.listdir(eight_day_snow_cover):\n        file_path = os.path.abspath(os.path.join(eight_day_snow_cover, file))\n        eight_day_abs_path.append(file_path)\n\n    for file in os.listdir(maximum_snow_extent):\n        file_path = os.path.abspath(os.path.join(maximum_snow_extent, file))\n        snow_extent_abs_path.append(file_path)\n\n    combine_geotiff_gdal(eight_day_abs_path, vrt_file_dir + f\"{d}_eight_day.vrt\")\n    combine_geotiff_gdal(snow_extent_abs_path, vrt_file_dir + f\"{d}_snow_extent.vrt\")\n\n                   \n# main workflow is here:\nstep_one_download_modis()\nstep_two_merge_modis_western_us()\n\n\n\n\n\n\n\n\n\n\n\n\n",
  "history_output" : "  File \"data_gee_modis_real_time.py\", line 77\n    f'--no-check-certificate --auth-no-challenge=on -r --reject \"i' \n    ^\nIndentationError: unexpected indent\n",
  "history_begin_time" : 1688416834722,
  "history_end_time" : 1688416848466,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "jf7wuu",
  "indicator" : "Stopped"
},{
  "history_id" : "5iid8eabhhh",
  "history_input" : "import os\nimport pprint\n\n# import gdal\nimport subprocess\nfrom datetime import datetime, timedelta\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\nmodis_download_dir = \"/home/chetana/modis_download_folder/\"\nmodis_downloaded_data = modis_download_dir + \"n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\ngeo_tiff = modis_download_dir + \"geo-tiff/\"\nvrt_file_dir = modis_download_dir + \"vrt_files/\"\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(dir_path)\n\ntile_list = ['h09v04', 'h10v04', 'h11v04', 'h08v04', 'h08v05', 'h09v05', 'h10v05', 'h07v06', 'h08v06', 'h09v06']\n\n\ndef get_files(directory):\n    file_directory = list()\n    complete_directory_structure = dict()\n    for dirpath, dirnames, filenames in os.walk(directory):\n        for filename in filenames:\n            file_path = os.path.join(dirpath, filename)\n            file_directory.append(file_path)\n            complete_directory_structure[str(dirpath).rsplit('/')[-1]] = file_directory\n\n    return complete_directory_structure\n\n\ndef get_latest_date():\n    all_rows = get_web_row_data()\n\n    latest_date = None\n    for row in all_rows:\n        try:\n            new_date = datetime.strptime(row.text[:-1], '%Y.%m.%d')\n            if latest_date is None or latest_date < new_date:\n                latest_date = new_date\n        except:\n            continue\n\n    print(\"Find the latest date: \", latest_date.strftime(\"%Y.%m.%d\"))\n    second_latest_date = latest_date - timedelta(days=8)\n    return second_latest_date\n\n\ndef get_web_row_data():\n    try:\n        from BeautifulSoup import BeautifulSoup\n    except ImportError:\n        from bs4 import BeautifulSoup\n    modis_list_url = \"https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\n    print(\"Source / Product: \" + modis_list_url)\n    if os.path.exists(\"index.html\"):\n        os.remove(\"index.html\")\n    subprocess.run(\n        f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies '\n        f'--no-check-certificate --auth-no-challenge=on -np -e robots=off {modis_list_url}',\n        shell=True, stderr=subprocess.PIPE)\n    index_file = open('index.html', 'r')\n    webContent = index_file.read()\n    parsed_html = BeautifulSoup(webContent, \"html.parser\")\n    all_rows = parsed_html.body.findAll('td', attrs={'class': 'indexcolname'})\n    return all_rows\n\n\ndef download_recent_modis(date=None):\n    if date:\n        latest_date_str = date.strftime(\"%Y.%m.%d\")\n    else:\n        latest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\n    for tile in tile_list:\n        download_cmd = f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies ' \\\n                       f'--no-check-certificate --auth-no-challenge=on -r --reject \"i' \\\n                       f'ndex.html*\" -P {modis_download_dir} -np -e robots=off ' \\\n                       f'https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/ -A \"*{tile}*.hdf\" --quiet'\n        # print(download_cmd)\n        p = subprocess.run(download_cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        print(\"Downloading tile, \", tile, \" with status code \", \"OK\" if p.returncode == 0 else p.returncode)\n\n\n# def merge_wrap_tif_into_western_us_tif():\n#     latest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\n#     # traverse the folder and find the new download files\n#     for filename in os.listdir(f\"n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/\"):\n#         f = os.path.join(directory, filename)\n#         # checking if it is a file\n#         if os.path.isfile(f):\n#             print(f)\n# merge_wrap_tif_into_western_us_tif()\n\ndef hdf_tif_cvt(resource_path, destination_path):\n    if not os.path.isfile(resource_path):\n        raise Exception(\"HDF file not found\")\n\n    max_snow_extent_path = destination_path + \"maximum_snow_extent/\"\n    eight_day_snow_cover = destination_path + \"eight_day_snow_cover/\"\n    if not os.path.exists(max_snow_extent_path):\n        os.makedirs(max_snow_extent_path)\n    if not os.path.exists(eight_day_snow_cover):\n        os.makedirs(eight_day_snow_cover)\n\n    tif_file_name_snow_extent = max_snow_extent_path + resource_path.split('/')[-1].split('.hdf')[0]\n    tif_file_name_eight_day = eight_day_snow_cover + resource_path.split('/')[-1].split('.hdf')[0]\n    tif_file_extension = '.tif'\n\n    maximum_snow_extent_file_name = tif_file_name_snow_extent + '_max_snow_extent' + tif_file_extension\n    eight_day_snow_cover_file_name = tif_file_name_eight_day + '_modis_snow_500m' + tif_file_extension\n\n    maximum_snow_extent = f\"HDF4_EOS:EOS_GRID:\\\"{resource_path}\\\":MOD_Grid_Snow_500m:Maximum_Snow_Extent\"\n    eight_day_snow_cover = f\"HDF4_EOS:EOS_GRID:\\\"{resource_path}\\\":MOD_Grid_Snow_500m:Eight_Day_Snow_Cover\"\n\n    subprocess.run(f\"gdal_translate {maximum_snow_extent} {maximum_snow_extent_file_name}\", shell=True)\n    subprocess.run(f\"gdal_translate {eight_day_snow_cover} {eight_day_snow_cover_file_name}\", shell=True)\n\n\ndef combine_geotiff_gdal(vrt_array, destination):\n    subprocess.run(f\"gdalbuildvrt {destination} {' '.join(vrt_array)}\", shell=True)\n    tif_name = destination.split('.vrt')[-2] + '.tif'\n    subprocess.run(f\"gdal_translate -of GTiff {destination} {tif_name}\", shell=True)\n\n\ndef hdf_tif_conversion(resource_path, destination_path):\n    hdf_dataset = gdal.Open(resource_path)\n    if hdf_dataset is None:\n        raise Exception(\"Could not open HDF dataset\")\n\n    maximum_snow_extent = hdf_dataset.GetSubDatasets()[0][0]\n    modis_snow_500m = hdf_dataset.GetSubDatasets()[1][0]\n\n    driver = gdal.GetDriverByName('GTiff')\n\n    tif_file_name = destination_path + resource_path.split('/')[-1].split('.hdf')[0]\n    tif_file_extension = '.tif'\n\n    maximum_snow_extent_file_name = tif_file_name + '_max_snow_extent' + tif_file_extension\n    modis_snow_500m_file_name = tif_file_name + '_modis_snow_500m' + tif_file_extension\n\n    maximum_snow_extent_dataset = gdal.Open(maximum_snow_extent)\n    modis_snow_500m_dataset = gdal.Open(modis_snow_500m)\n\n    if maximum_snow_extent_dataset is None:\n        raise Exception(\"Could not open maximum_snow_extent dataset\")\n\n    if modis_snow_500m_dataset is None:\n        raise Exception(\"Could not open modis_snow_500m dataset\")\n\n    driver.CreateCopy(maximum_snow_extent_file_name, maximum_snow_extent_dataset, 0)\n    driver.CreateCopy(modis_snow_500m_file_name, modis_snow_500m_dataset, 0)\n\n    print(\"HDF to TIF conversion completed successfully.\")\n\n\ndef download_modis_archive(*, start_date, end_date):\n    all_archive_dates = list()\n\n    all_rows = get_web_row_data()\n    for r in all_rows:\n        try:\n            all_archive_dates.append(datetime.strptime(r.text.replace('/', ''), '%Y.%m.%d'))\n        except:\n            continue\n\n    for a in all_archive_dates:\n        if start_date <= a <= end_date:\n            download_recent_modis(a)\n\n\ndef step_one_download_modis():\n  download_recent_modis()\n                   \ndef step_two_merge_modis_western_us():\n  download_modis_archive(start_date=datetime(2022, 1, 1), end_date=datetime(2022, 12, 31))\n\n  files = get_files(modis_downloaded_data)\n  for k, v in get_files(modis_downloaded_data).items():\n\n    conversion_path = modis_download_dir + \"geo-tiff/\" + k + \"/\"\n    if not os.path.exists(conversion_path):\n        os.makedirs(conversion_path)\n    for hdf_file in v:\n        # print(hdf_file.split('/')[-1].split('.hdf')[0], 1)\n        hdf_tif_cvt(hdf_file, conversion_path)\n\n  if not os.path.exists(vrt_file_dir):\n    os.makedirs(vrt_file_dir)\n\n\n  directories = [d for d in os.listdir(geo_tiff) if   os.path.isdir(os.path.join(geo_tiff, d))]\n\n  for d in directories:\n    eight_day_snow_cover = geo_tiff + d + '/eight_day_snow_cover'\n    maximum_snow_extent = geo_tiff + d + '/maximum_snow_extent'\n\n    eight_day_abs_path = list()\n    snow_extent_abs_path = list()\n\n    for file in os.listdir(eight_day_snow_cover):\n        file_path = os.path.abspath(os.path.join(eight_day_snow_cover, file))\n        eight_day_abs_path.append(file_path)\n\n    for file in os.listdir(maximum_snow_extent):\n        file_path = os.path.abspath(os.path.join(maximum_snow_extent, file))\n        snow_extent_abs_path.append(file_path)\n\n    combine_geotiff_gdal(eight_day_abs_path, vrt_file_dir + f\"{d}_eight_day.vrt\")\n    combine_geotiff_gdal(snow_extent_abs_path, vrt_file_dir + f\"{d}_snow_extent.vrt\")\n\n                   \n# main workflow is here:\nstep_one_download_modis()\nstep_two_merge_modis_western_us()\n\n\n\n\n\n\n\n\n\n\n\n\n",
  "history_output" : "  File \"data_gee_modis_real_time.py\", line 77\n    f'--no-check-certificate --auth-no-challenge=on -r --reject \"i' \n    ^\n",
  "history_begin_time" : 1688416668616,
  "history_end_time" : 1688416822954,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "jf7wuu",
  "indicator" : "Stopped"
},{
  "history_id" : "5kstr9tths3",
  "history_input" : "import os\nimport pprint\n\n# import gdal\nimport subprocess\nfrom datetime import datetime, timedelta\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\nmodis_download_dir = \"/home/chetana/modis_download_folder/\"\nmodis_downloaded_data = modis_download_dir + \"n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\ngeo_tiff = modis_download_dir + \"geo-tiff/\"\nvrt_file_dir = modis_download_dir + \"vrt_files/\"\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(dir_path)\n\ntile_list = ['h09v04', 'h10v04', 'h11v04', 'h08v04', 'h08v05', 'h09v05', 'h10v05', 'h07v06', 'h08v06', 'h09v06']\n\n\ndef get_files(directory):\n    file_directory = list()\n    complete_directory_structure = dict()\n    for dirpath, dirnames, filenames in os.walk(directory):\n        for filename in filenames:\n            file_path = os.path.join(dirpath, filename)\n            file_directory.append(file_path)\n            complete_directory_structure[str(dirpath).rsplit('/')[-1]] = file_directory\n\n    return complete_directory_structure\n\n\ndef get_latest_date():\n    all_rows = get_web_row_data()\n\n    latest_date = None\n    for row in all_rows:\n        try:\n            new_date = datetime.strptime(row.text[:-1], '%Y.%m.%d')\n            if latest_date is None or latest_date < new_date:\n                latest_date = new_date\n        except:\n            continue\n\n    print(\"Find the latest date: \", latest_date.strftime(\"%Y.%m.%d\"))\n    second_latest_date = latest_date - timedelta(days=8)\n    return second_latest_date\n\n\ndef get_web_row_data():\n    try:\n        from BeautifulSoup import BeautifulSoup\n    except ImportError:\n        from bs4 import BeautifulSoup\n    modis_list_url = \"https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\n    print(\"Source / Product: \" + modis_list_url)\n    if os.path.exists(\"index.html\"):\n        os.remove(\"index.html\")\n    subprocess.run(\n        f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies '\n        f'--no-check-certificate --auth-no-challenge=on -np -e robots=off {modis_list_url}',\n        shell=True, stderr=subprocess.PIPE)\n    index_file = open('index.html', 'r')\n    webContent = index_file.read()\n    parsed_html = BeautifulSoup(webContent, \"html.parser\")\n    all_rows = parsed_html.body.findAll('td', attrs={'class': 'indexcolname'})\n    return all_rows\n\n\ndef download_recent_modis(date=None):\n    if date:\n        latest_date_str = date.strftime(\"%Y.%m.%d\")\n    else:\n        latest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\n    for tile in tile_list:\n        download_cmd = f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies ' \\\n                       f'--no-check-certificate --auth-no-challenge=on -r --reject \"i' \\\n                       f'ndex.html*\" -P {modis_download_dir} -np -e robots=off ' \\\n                       f'https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/ -A \"*{tile}*.hdf\" --quiet'\n        # print(download_cmd)\n        p = subprocess.run(download_cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        print(\"Downloading tile, \", tile, \" with status code \", \"OK\" if p.returncode == 0 else p.returncode)\n\n\n# def merge_wrap_tif_into_western_us_tif():\n#     latest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\n#     # traverse the folder and find the new download files\n#     for filename in os.listdir(f\"n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/\"):\n#         f = os.path.join(directory, filename)\n#         # checking if it is a file\n#         if os.path.isfile(f):\n#             print(f)\n# merge_wrap_tif_into_western_us_tif()\n\ndef hdf_tif_cvt(resource_path, destination_path):\n    if not os.path.isfile(resource_path):\n        raise Exception(\"HDF file not found\")\n\n    max_snow_extent_path = destination_path + \"maximum_snow_extent/\"\n    eight_day_snow_cover = destination_path + \"eight_day_snow_cover/\"\n    if not os.path.exists(max_snow_extent_path):\n        os.makedirs(max_snow_extent_path)\n    if not os.path.exists(eight_day_snow_cover):\n        os.makedirs(eight_day_snow_cover)\n\n    tif_file_name_snow_extent = max_snow_extent_path + resource_path.split('/')[-1].split('.hdf')[0]\n    tif_file_name_eight_day = eight_day_snow_cover + resource_path.split('/')[-1].split('.hdf')[0]\n    tif_file_extension = '.tif'\n\n    maximum_snow_extent_file_name = tif_file_name_snow_extent + '_max_snow_extent' + tif_file_extension\n    eight_day_snow_cover_file_name = tif_file_name_eight_day + '_modis_snow_500m' + tif_file_extension\n\n    maximum_snow_extent = f\"HDF4_EOS:EOS_GRID:\\\"{resource_path}\\\":MOD_Grid_Snow_500m:Maximum_Snow_Extent\"\n    eight_day_snow_cover = f\"HDF4_EOS:EOS_GRID:\\\"{resource_path}\\\":MOD_Grid_Snow_500m:Eight_Day_Snow_Cover\"\n\n    subprocess.run(f\"gdal_translate {maximum_snow_extent} {maximum_snow_extent_file_name}\", shell=True)\n    subprocess.run(f\"gdal_translate {eight_day_snow_cover} {eight_day_snow_cover_file_name}\", shell=True)\n\n\ndef combine_geotiff_gdal(vrt_array, destination):\n    subprocess.run(f\"gdalbuildvrt {destination} {' '.join(vrt_array)}\", shell=True)\n    tif_name = destination.split('.vrt')[-2] + '.tif'\n    subprocess.run(f\"gdal_translate -of GTiff {destination} {tif_name}\", shell=True)\n\n\ndef hdf_tif_conversion(resource_path, destination_path):\n    hdf_dataset = gdal.Open(resource_path)\n    if hdf_dataset is None:\n        raise Exception(\"Could not open HDF dataset\")\n\n    maximum_snow_extent = hdf_dataset.GetSubDatasets()[0][0]\n    modis_snow_500m = hdf_dataset.GetSubDatasets()[1][0]\n\n    driver = gdal.GetDriverByName('GTiff')\n\n    tif_file_name = destination_path + resource_path.split('/')[-1].split('.hdf')[0]\n    tif_file_extension = '.tif'\n\n    maximum_snow_extent_file_name = tif_file_name + '_max_snow_extent' + tif_file_extension\n    modis_snow_500m_file_name = tif_file_name + '_modis_snow_500m' + tif_file_extension\n\n    maximum_snow_extent_dataset = gdal.Open(maximum_snow_extent)\n    modis_snow_500m_dataset = gdal.Open(modis_snow_500m)\n\n    if maximum_snow_extent_dataset is None:\n        raise Exception(\"Could not open maximum_snow_extent dataset\")\n\n    if modis_snow_500m_dataset is None:\n        raise Exception(\"Could not open modis_snow_500m dataset\")\n\n    driver.CreateCopy(maximum_snow_extent_file_name, maximum_snow_extent_dataset, 0)\n    driver.CreateCopy(modis_snow_500m_file_name, modis_snow_500m_dataset, 0)\n\n    print(\"HDF to TIF conversion completed successfully.\")\n\n\ndef download_modis_archive(*, start_date, end_date):\n    all_archive_dates = list()\n\n    all_rows = get_web_row_data()\n    for r in all_rows:\n        try:\n            all_archive_dates.append(datetime.strptime(r.text.replace('/', ''), '%Y.%m.%d'))\n        except:\n            continue\n\n    for a in all_archive_dates:\n        if start_date <= a <= end_date:\n            download_recent_modis(a)\n\n\ndef step_one_download_modis():\n  download_recent_modis()\n                   \ndef step_two_merge_modis_western_us():\n  download_modis_archive(start_date=datetime(2022, 1, 1), end_date=datetime(2022, 12, 31))\n\n  files = get_files(modis_downloaded_data)\n  for k, v in get_files(modis_downloaded_data).items():\n\n    conversion_path = modis_download_dir + \"geo-tiff/\" + k + \"/\"\n    if not os.path.exists(conversion_path):\n        os.makedirs(conversion_path)\n    for hdf_file in v:\n        # print(hdf_file.split('/')[-1].split('.hdf')[0], 1)\n        hdf_tif_cvt(hdf_file, conversion_path)\n\n  if not os.path.exists(vrt_file_dir):\n    os.makedirs(vrt_file_dir)\n\n\n  directories = [d for d in os.listdir(geo_tiff) if   os.path.isdir(os.path.join(geo_tiff, d))]\n\n  for d in directories:\n    eight_day_snow_cover = geo_tiff + d + '/eight_day_snow_cover'\n    maximum_snow_extent = geo_tiff + d + '/maximum_snow_extent'\n\n    eight_day_abs_path = list()\n    snow_extent_abs_path = list()\n\n    for file in os.listdir(eight_day_snow_cover):\n        file_path = os.path.abspath(os.path.join(eight_day_snow_cover, file))\n        eight_day_abs_path.append(file_path)\n\n    for file in os.listdir(maximum_snow_extent):\n        file_path = os.path.abspath(os.path.join(maximum_snow_extent, file))\n        snow_extent_abs_path.append(file_path)\n\n    combine_geotiff_gdal(eight_day_abs_path, vrt_file_dir + f\"{d}_eight_day.vrt\")\n    combine_geotiff_gdal(snow_extent_abs_path, vrt_file_dir + f\"{d}_snow_extent.vrt\")\n\n                   \n# main workflow is here:\nstep_one_download_modis()\nstep_two_merge_modis_western_us()\n\n\n\n\n\n\n\n\n\n\n\n\n",
  "history_output" : "",
  "history_begin_time" : 1688416629539,
  "history_end_time" : 1688416660671,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "jf7wuu",
  "indicator" : "Stopped"
},{
  "history_id" : "zsaz1hkaw05",
  "history_input" : "import os\nimport pprint\n\n# import gdal\nimport subprocess\nfrom datetime import datetime, timedelta\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\nmodis_download_dir = \"/home/chetana/modis_download_folder/\"\nmodis_downloaded_data = modis_download_dir + \"n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\ngeo_tiff = modis_download_dir + \"geo-tiff/\"\nvrt_file_dir = modis_download_dir + \"vrt_files/\"\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(dir_path)\n\ntile_list = ['h09v04', 'h10v04', 'h11v04', 'h08v04', 'h08v05', 'h09v05', 'h10v05', 'h07v06', 'h08v06', 'h09v06']\n\n\ndef get_files(directory):\n    file_directory = list()\n    complete_directory_structure = dict()\n    for dirpath, dirnames, filenames in os.walk(directory):\n        for filename in filenames:\n            file_path = os.path.join(dirpath, filename)\n            file_directory.append(file_path)\n            complete_directory_structure[str(dirpath).rsplit('/')[-1]] = file_directory\n\n    return complete_directory_structure\n\n\ndef get_latest_date():\n    all_rows = get_web_row_data()\n\n    latest_date = None\n    for row in all_rows:\n        try:\n            new_date = datetime.strptime(row.text[:-1], '%Y.%m.%d')\n            if latest_date is None or latest_date < new_date:\n                latest_date = new_date\n        except:\n            continue\n\n    print(\"Find the latest date: \", latest_date.strftime(\"%Y.%m.%d\"))\n    second_latest_date = latest_date - timedelta(days=8)\n    return second_latest_date\n\n\ndef get_web_row_data():\n    try:\n        from BeautifulSoup import BeautifulSoup\n    except ImportError:\n        from bs4 import BeautifulSoup\n    modis_list_url = \"https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\n    print(\"Source / Product: \" + modis_list_url)\n    if os.path.exists(\"index.html\"):\n        os.remove(\"index.html\")\n    subprocess.run(\n        f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies '\n        f'--no-check-certificate --auth-no-challenge=on -np -e robots=off {modis_list_url}',\n        shell=True, stderr=subprocess.PIPE)\n    index_file = open('index.html', 'r')\n    webContent = index_file.read()\n    parsed_html = BeautifulSoup(webContent, \"html.parser\")\n    all_rows = parsed_html.body.findAll('td', attrs={'class': 'indexcolname'})\n    return all_rows\n\n\ndef download_recent_modis(date=None):\n    if date:\n        latest_date_str = date.strftime(\"%Y.%m.%d\")\n    else:\n        latest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\n    for tile in tile_list:\n        download_cmd = f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies ' \\\n                       f'--no-check-certificate --auth-no-challenge=on -r --reject \"i' \\\n                       f'ndex.html*\" -P {modis_download_dir} -np -e robots=off ' \\\n                       f'https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/ -A \"*{tile}*.hdf\" --quiet'\n        # print(download_cmd)\n        p = subprocess.run(download_cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        print(\"Downloading tile, \", tile, \" with status code \", \"OK\" if p.returncode == 0 else p.returncode)\n\n\n# def merge_wrap_tif_into_western_us_tif():\n#     latest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\n#     # traverse the folder and find the new download files\n#     for filename in os.listdir(f\"n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/\"):\n#         f = os.path.join(directory, filename)\n#         # checking if it is a file\n#         if os.path.isfile(f):\n#             print(f)\n# merge_wrap_tif_into_western_us_tif()\n\ndef hdf_tif_cvt(resource_path, destination_path):\n    if not os.path.isfile(resource_path):\n        raise Exception(\"HDF file not found\")\n\n    max_snow_extent_path = destination_path + \"maximum_snow_extent/\"\n    eight_day_snow_cover = destination_path + \"eight_day_snow_cover/\"\n    if not os.path.exists(max_snow_extent_path):\n        os.makedirs(max_snow_extent_path)\n    if not os.path.exists(eight_day_snow_cover):\n        os.makedirs(eight_day_snow_cover)\n\n    tif_file_name_snow_extent = max_snow_extent_path + resource_path.split('/')[-1].split('.hdf')[0]\n    tif_file_name_eight_day = eight_day_snow_cover + resource_path.split('/')[-1].split('.hdf')[0]\n    tif_file_extension = '.tif'\n\n    maximum_snow_extent_file_name = tif_file_name_snow_extent + '_max_snow_extent' + tif_file_extension\n    eight_day_snow_cover_file_name = tif_file_name_eight_day + '_modis_snow_500m' + tif_file_extension\n\n    maximum_snow_extent = f\"HDF4_EOS:EOS_GRID:\\\"{resource_path}\\\":MOD_Grid_Snow_500m:Maximum_Snow_Extent\"\n    eight_day_snow_cover = f\"HDF4_EOS:EOS_GRID:\\\"{resource_path}\\\":MOD_Grid_Snow_500m:Eight_Day_Snow_Cover\"\n\n    subprocess.run(f\"gdal_translate {maximum_snow_extent} {maximum_snow_extent_file_name}\", shell=True)\n    subprocess.run(f\"gdal_translate {eight_day_snow_cover} {eight_day_snow_cover_file_name}\", shell=True)\n\n\ndef combine_geotiff_gdal(vrt_array, destination):\n    subprocess.run(f\"gdalbuildvrt {destination} {' '.join(vrt_array)}\", shell=True)\n    tif_name = destination.split('.vrt')[-2] + '.tif'\n    subprocess.run(f\"gdal_translate -of GTiff {destination} {tif_name}\", shell=True)\n\n\ndef hdf_tif_conversion(resource_path, destination_path):\n    hdf_dataset = gdal.Open(resource_path)\n    if hdf_dataset is None:\n        raise Exception(\"Could not open HDF dataset\")\n\n    maximum_snow_extent = hdf_dataset.GetSubDatasets()[0][0]\n    modis_snow_500m = hdf_dataset.GetSubDatasets()[1][0]\n\n    driver = gdal.GetDriverByName('GTiff')\n\n    tif_file_name = destination_path + resource_path.split('/')[-1].split('.hdf')[0]\n    tif_file_extension = '.tif'\n\n    maximum_snow_extent_file_name = tif_file_name + '_max_snow_extent' + tif_file_extension\n    modis_snow_500m_file_name = tif_file_name + '_modis_snow_500m' + tif_file_extension\n\n    maximum_snow_extent_dataset = gdal.Open(maximum_snow_extent)\n    modis_snow_500m_dataset = gdal.Open(modis_snow_500m)\n\n    if maximum_snow_extent_dataset is None:\n        raise Exception(\"Could not open maximum_snow_extent dataset\")\n\n    if modis_snow_500m_dataset is None:\n        raise Exception(\"Could not open modis_snow_500m dataset\")\n\n    driver.CreateCopy(maximum_snow_extent_file_name, maximum_snow_extent_dataset, 0)\n    driver.CreateCopy(modis_snow_500m_file_name, modis_snow_500m_dataset, 0)\n\n    print(\"HDF to TIF conversion completed successfully.\")\n\n\ndef download_modis_archive(*, start_date, end_date):\n    all_archive_dates = list()\n\n    all_rows = get_web_row_data()\n    for r in all_rows:\n        try:\n            all_archive_dates.append(datetime.strptime(r.text.replace('/', ''), '%Y.%m.%d'))\n        except:\n            continue\n\n    for a in all_archive_dates:\n        if start_date <= a <= end_date:\n            download_recent_modis(a)\n\n\ndef step_one_download_modis():\n  download_recent_modis()\n                   \ndef step_two_merge_modis_western_us():\n  download_modis_archive(start_date=datetime(2022, 1, 1), end_date=datetime(2022, 12, 31))\n\n  files = get_files(modis_downloaded_data)\n  for k, v in get_files(modis_downloaded_data).items():\n\n    conversion_path = modis_download_dir + \"geo-tiff/\" + k + \"/\"\n    if not os.path.exists(conversion_path):\n        os.makedirs(conversion_path)\n    for hdf_file in v:\n        # print(hdf_file.split('/')[-1].split('.hdf')[0], 1)\n        hdf_tif_cvt(hdf_file, conversion_path)\n\n  if not os.path.exists(vrt_file_dir):\n    os.makedirs(vrt_file_dir)\n\n\n  directories = [d for d in os.listdir(geo_tiff) if   os.path.isdir(os.path.join(geo_tiff, d))]\n\n  for d in directories:\n    eight_day_snow_cover = geo_tiff + d + '/eight_day_snow_cover'\n    maximum_snow_extent = geo_tiff + d + '/maximum_snow_extent'\n\n    eight_day_abs_path = list()\n    snow_extent_abs_path = list()\n\n    for file in os.listdir(eight_day_snow_cover):\n        file_path = os.path.abspath(os.path.join(eight_day_snow_cover, file))\n        eight_day_abs_path.append(file_path)\n\n    for file in os.listdir(maximum_snow_extent):\n        file_path = os.path.abspath(os.path.join(maximum_snow_extent, file))\n        snow_extent_abs_path.append(file_path)\n\n    combine_geotiff_gdal(eight_day_abs_path, vrt_file_dir + f\"{d}_eight_day.vrt\")\n    combine_geotiff_gdal(snow_extent_abs_path, vrt_file_dir + f\"{d}_snow_extent.vrt\")\n\n                   \n# main workflow is here:\nstep_one_download_modis()\nstep_two_merge_modis_western_us()\n\n\n\n\n\n\n\n\n\n\n\n\n",
  "history_output" : "  File \"data_gee_modis_real_time.py\", line 77\n    f'--no-check-certificate --auth-no-challenge=on -r --reject \"i' \n    ^\nIndentationError: unexpected indent\n",
  "history_begin_time" : 1688416567461,
  "history_end_time" : 1688416575010,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "jf7wuu",
  "indicator" : "Stopped"
},{
  "history_id" : "a0t5k0hm37k",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1687546866687,
  "history_end_time" : 1687546866687,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "h45z1op40q8",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1687463685030,
  "history_end_time" : 1687463686564,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "tlnzq8tsw6n",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1687463635933,
  "history_end_time" : 1687463637549,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "a9eu77r1a64",
  "history_input" : "import os\nimport pprint\n\n# import gdal\nimport subprocess\nfrom datetime import datetime, timedelta\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\nmodis_download_dir = \"/home/chetana/modis_download_folder/\"\nmodis_downloaded_data = modis_download_dir + \"n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\ngeo_tiff = modis_download_dir + \"geo-tiff/\"\nvrt_file_dir = modis_download_dir + \"vrt_files/\"\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(dir_path)\n\ntile_list = ['h09v04', 'h10v04', 'h11v04', 'h08v04', 'h08v05', 'h09v05', 'h10v05', 'h07v06', 'h08v06', 'h09v06']\n\n\ndef get_files(directory):\n    file_directory = list()\n    complete_directory_structure = dict()\n    for dirpath, dirnames, filenames in os.walk(directory):\n        for filename in filenames:\n            file_path = os.path.join(dirpath, filename)\n            file_directory.append(file_path)\n            complete_directory_structure[str(dirpath).rsplit('/')[-1]] = file_directory\n\n    return complete_directory_structure\n\n\ndef get_latest_date():\n    all_rows = get_web_row_data()\n\n    latest_date = None\n    for row in all_rows:\n        try:\n            new_date = datetime.strptime(row.text[:-1], '%Y.%m.%d')\n            if latest_date is None or latest_date < new_date:\n                latest_date = new_date\n        except:\n            continue\n\n    print(\"Find the latest date: \", latest_date.strftime(\"%Y.%m.%d\"))\n    second_latest_date = latest_date - timedelta(days=8)\n    return second_latest_date\n\n\ndef get_web_row_data():\n    try:\n        from BeautifulSoup import BeautifulSoup\n    except ImportError:\n        from bs4 import BeautifulSoup\n    modis_list_url = \"https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\n    print(\"Source / Product: \" + modis_list_url)\n    if os.path.exists(\"index.html\"):\n        os.remove(\"index.html\")\n    subprocess.run(\n        f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies '\n        f'--no-check-certificate --auth-no-challenge=on -np -e robots=off {modis_list_url}',\n        shell=True, stderr=subprocess.PIPE)\n    index_file = open('index.html', 'r')\n    webContent = index_file.read()\n    parsed_html = BeautifulSoup(webContent, \"html.parser\")\n    all_rows = parsed_html.body.findAll('td', attrs={'class': 'indexcolname'})\n    return all_rows\n\n\ndef download_recent_modis(date=None):\n    if date:\n        latest_date_str = date.strftime(\"%Y.%m.%d\")\n    else:\n        latest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\n    for tile in tile_list:\n        download_cmd = f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies ' \\\n                       f'--no-check-certificate --auth-no-challenge=on -r --reject \"i' \\\n                       f'ndex.html*\" -P {modis_download_dir} -np -e robots=off ' \\\n                       f'https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/ -A \"*{tile}*.hdf\" --quiet'\n        # print(download_cmd)\n        p = subprocess.run(download_cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        print(\"Downloading tile, \", tile, \" with status code \", \"OK\" if p.returncode == 0 else p.returncode)\n\n\n# def merge_wrap_tif_into_western_us_tif():\n#     latest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\n#     # traverse the folder and find the new download files\n#     for filename in os.listdir(f\"n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/\"):\n#         f = os.path.join(directory, filename)\n#         # checking if it is a file\n#         if os.path.isfile(f):\n#             print(f)\n# merge_wrap_tif_into_western_us_tif()\n\ndef hdf_tif_cvt(resource_path, destination_path):\n    if not os.path.isfile(resource_path):\n        raise Exception(\"HDF file not found\")\n\n    max_snow_extent_path = destination_path + \"maximum_snow_extent/\"\n    eight_day_snow_cover = destination_path + \"eight_day_snow_cover/\"\n    if not os.path.exists(max_snow_extent_path):\n        os.makedirs(max_snow_extent_path)\n    if not os.path.exists(eight_day_snow_cover):\n        os.makedirs(eight_day_snow_cover)\n\n    tif_file_name_snow_extent = max_snow_extent_path + resource_path.split('/')[-1].split('.hdf')[0]\n    tif_file_name_eight_day = eight_day_snow_cover + resource_path.split('/')[-1].split('.hdf')[0]\n    tif_file_extension = '.tif'\n\n    maximum_snow_extent_file_name = tif_file_name_snow_extent + '_max_snow_extent' + tif_file_extension\n    eight_day_snow_cover_file_name = tif_file_name_eight_day + '_modis_snow_500m' + tif_file_extension\n\n    maximum_snow_extent = f\"HDF4_EOS:EOS_GRID:\\\"{resource_path}\\\":MOD_Grid_Snow_500m:Maximum_Snow_Extent\"\n    eight_day_snow_cover = f\"HDF4_EOS:EOS_GRID:\\\"{resource_path}\\\":MOD_Grid_Snow_500m:Eight_Day_Snow_Cover\"\n\n    subprocess.run(f\"gdal_translate {maximum_snow_extent} {maximum_snow_extent_file_name}\", shell=True)\n    subprocess.run(f\"gdal_translate {eight_day_snow_cover} {eight_day_snow_cover_file_name}\", shell=True)\n\n\ndef combine_geotiff_gdal(vrt_array, destination):\n    subprocess.run(f\"gdalbuildvrt {destination} {' '.join(vrt_array)}\", shell=True)\n    tif_name = destination.split('.vrt')[-2] + '.tif'\n    subprocess.run(f\"gdal_translate -of GTiff {destination} {tif_name}\", shell=True)\n\n\ndef hdf_tif_conversion(resource_path, destination_path):\n    hdf_dataset = gdal.Open(resource_path)\n    if hdf_dataset is None:\n        raise Exception(\"Could not open HDF dataset\")\n\n    maximum_snow_extent = hdf_dataset.GetSubDatasets()[0][0]\n    modis_snow_500m = hdf_dataset.GetSubDatasets()[1][0]\n\n    driver = gdal.GetDriverByName('GTiff')\n\n    tif_file_name = destination_path + resource_path.split('/')[-1].split('.hdf')[0]\n    tif_file_extension = '.tif'\n\n    maximum_snow_extent_file_name = tif_file_name + '_max_snow_extent' + tif_file_extension\n    modis_snow_500m_file_name = tif_file_name + '_modis_snow_500m' + tif_file_extension\n\n    maximum_snow_extent_dataset = gdal.Open(maximum_snow_extent)\n    modis_snow_500m_dataset = gdal.Open(modis_snow_500m)\n\n    if maximum_snow_extent_dataset is None:\n        raise Exception(\"Could not open maximum_snow_extent dataset\")\n\n    if modis_snow_500m_dataset is None:\n        raise Exception(\"Could not open modis_snow_500m dataset\")\n\n    driver.CreateCopy(maximum_snow_extent_file_name, maximum_snow_extent_dataset, 0)\n    driver.CreateCopy(modis_snow_500m_file_name, modis_snow_500m_dataset, 0)\n\n    print(\"HDF to TIF conversion completed successfully.\")\n\n\ndef download_modis_archive(*, start_date, end_date):\n    all_archive_dates = list()\n\n    all_rows = get_web_row_data()\n    for r in all_rows:\n        try:\n            all_archive_dates.append(datetime.strptime(r.text.replace('/', ''), '%Y.%m.%d'))\n        except:\n            continue\n\n    for a in all_archive_dates:\n        if start_date <= a <= end_date:\n            download_recent_modis(a)\n\n\ndef step_one_download_modis():\n  download_recent_modis()\n                   \ndef step_two_merge_modis_western_us():\n  download_modis_archive(start_date=datetime(2022, 1, 1), end_date=datetime(2022, 12, 31))\n\n  files = get_files(modis_downloaded_data)\n  for k, v in get_files(modis_downloaded_data).items():\n\n    conversion_path = modis_download_dir + \"geo-tiff/\" + k + \"/\"\n    if not os.path.exists(conversion_path):\n        os.makedirs(conversion_path)\n    for hdf_file in v:\n        # print(hdf_file.split('/')[-1].split('.hdf')[0], 1)\n        hdf_tif_cvt(hdf_file, conversion_path)\n\n  if not os.path.exists(vrt_file_dir):\n    os.makedirs(vrt_file_dir)\n\n\n  directories = [d for d in os.listdir(geo_tiff) if   os.path.isdir(os.path.join(geo_tiff, d))]\n\n  for d in directories:\n    eight_day_snow_cover = geo_tiff + d + '/eight_day_snow_cover'\n    maximum_snow_extent = geo_tiff + d + '/maximum_snow_extent'\n\n    eight_day_abs_path = list()\n    snow_extent_abs_path = list()\n\n    for file in os.listdir(eight_day_snow_cover):\n        file_path = os.path.abspath(os.path.join(eight_day_snow_cover, file))\n        eight_day_abs_path.append(file_path)\n\n    for file in os.listdir(maximum_snow_extent):\n        file_path = os.path.abspath(os.path.join(maximum_snow_extent, file))\n        snow_extent_abs_path.append(file_path)\n\n    combine_geotiff_gdal(eight_day_abs_path, vrt_file_dir + f\"{d}_eight_day.vrt\")\n    combine_geotiff_gdal(snow_extent_abs_path, vrt_file_dir + f\"{d}_snow_extent.vrt\")\n\n                   \n# main workflow is here:\nstep_one_download_modis()\nstep_two_merge_modis_western_us()\n\n\n\n\n\n\n\n\n\n\n\n\n",
  "history_output" : "  File \"/home/chetana/gw-workspace/a9eu77r1a64/data_gee_modis_real_time.py\", line 77\n    f'--no-check-certificate --auth-no-challenge=on -r --reject \"i' \nIndentationError: unexpected indent\n",
  "history_begin_time" : 1686236147958,
  "history_end_time" : 1686237909492,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "jf7wuu",
  "indicator" : "Stopped"
},{
  "history_id" : "8p8tfmy7qjj",
  "history_input" : "import os\nimport pprint\n\n# import gdal\nimport subprocess\nfrom datetime import datetime, timedelta\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\nmodis_download_dir = \"/home/chetana/modis_download_folder/\"\nmodis_downloaded_data = modis_download_dir + \"n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\ngeo_tiff = modis_download_dir + \"geo-tiff/\"\nvrt_file_dir = modis_download_dir + \"vrt_files/\"\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(dir_path)\n\ntile_list = ['h09v04', 'h10v04', 'h11v04', 'h08v04', 'h08v05', 'h09v05', 'h10v05', 'h07v06', 'h08v06', 'h09v06']\n\n\ndef get_files(directory):\n    file_directory = list()\n    complete_directory_structure = dict()\n    for dirpath, dirnames, filenames in os.walk(directory):\n        for filename in filenames:\n            file_path = os.path.join(dirpath, filename)\n            file_directory.append(file_path)\n            complete_directory_structure[str(dirpath).rsplit('/')[-1]] = file_directory\n\n    return complete_directory_structure\n\n\ndef get_latest_date():\n    all_rows = get_web_row_data()\n\n    latest_date = None\n    for row in all_rows:\n        try:\n            new_date = datetime.strptime(row.text[:-1], '%Y.%m.%d')\n            if latest_date is None or latest_date < new_date:\n                latest_date = new_date\n        except:\n            continue\n\n    print(\"Find the latest date: \", latest_date.strftime(\"%Y.%m.%d\"))\n    second_latest_date = latest_date - timedelta(days=8)\n    return second_latest_date\n\n\ndef get_web_row_data():\n    try:\n        from BeautifulSoup import BeautifulSoup\n    except ImportError:\n        from bs4 import BeautifulSoup\n    modis_list_url = \"https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\n    print(\"Source / Product: \" + modis_list_url)\n    if os.path.exists(\"index.html\"):\n        os.remove(\"index.html\")\n    subprocess.run(\n        f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies '\n        f'--no-check-certificate --auth-no-challenge=on -np -e robots=off {modis_list_url}',\n        shell=True, stderr=subprocess.PIPE)\n    index_file = open('index.html', 'r')\n    webContent = index_file.read()\n    parsed_html = BeautifulSoup(webContent, \"html.parser\")\n    all_rows = parsed_html.body.findAll('td', attrs={'class': 'indexcolname'})\n    return all_rows\n\n\ndef download_recent_modis(date=None):\n    if date:\n        latest_date_str = date.strftime(\"%Y.%m.%d\")\n    else:\n        latest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\n    for tile in tile_list:\n        download_cmd = f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies ' \\\n                       f'--no-check-certificate --auth-no-challenge=on -r --reject \"i' \\\n                       f'ndex.html*\" -P {modis_download_dir} -np -e robots=off ' \\\n                       f'https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/ -A \"*{tile}*.hdf\" --quiet'\n        # print(download_cmd)\n        p = subprocess.run(download_cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        print(\"Downloading tile, \", tile, \" with status code \", \"OK\" if p.returncode == 0 else p.returncode)\n\n\n# def merge_wrap_tif_into_western_us_tif():\n#     latest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\n#     # traverse the folder and find the new download files\n#     for filename in os.listdir(f\"n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/\"):\n#         f = os.path.join(directory, filename)\n#         # checking if it is a file\n#         if os.path.isfile(f):\n#             print(f)\n# merge_wrap_tif_into_western_us_tif()\n\ndef hdf_tif_cvt(resource_path, destination_path):\n    if not os.path.isfile(resource_path):\n        raise Exception(\"HDF file not found\")\n\n    max_snow_extent_path = destination_path + \"maximum_snow_extent/\"\n    eight_day_snow_cover = destination_path + \"eight_day_snow_cover/\"\n    if not os.path.exists(max_snow_extent_path):\n        os.makedirs(max_snow_extent_path)\n    if not os.path.exists(eight_day_snow_cover):\n        os.makedirs(eight_day_snow_cover)\n\n    tif_file_name_snow_extent = max_snow_extent_path + resource_path.split('/')[-1].split('.hdf')[0]\n    tif_file_name_eight_day = eight_day_snow_cover + resource_path.split('/')[-1].split('.hdf')[0]\n    tif_file_extension = '.tif'\n\n    maximum_snow_extent_file_name = tif_file_name_snow_extent + '_max_snow_extent' + tif_file_extension\n    eight_day_snow_cover_file_name = tif_file_name_eight_day + '_modis_snow_500m' + tif_file_extension\n\n    maximum_snow_extent = f\"HDF4_EOS:EOS_GRID:\\\"{resource_path}\\\":MOD_Grid_Snow_500m:Maximum_Snow_Extent\"\n    eight_day_snow_cover = f\"HDF4_EOS:EOS_GRID:\\\"{resource_path}\\\":MOD_Grid_Snow_500m:Eight_Day_Snow_Cover\"\n\n    subprocess.run(f\"gdal_translate {maximum_snow_extent} {maximum_snow_extent_file_name}\", shell=True)\n    subprocess.run(f\"gdal_translate {eight_day_snow_cover} {eight_day_snow_cover_file_name}\", shell=True)\n\n\ndef combine_geotiff_gdal(vrt_array, destination):\n    subprocess.run(f\"gdalbuildvrt {destination} {' '.join(vrt_array)}\", shell=True)\n    tif_name = destination.split('.vrt')[-2] + '.tif'\n    subprocess.run(f\"gdal_translate -of GTiff {destination} {tif_name}\", shell=True)\n\n\ndef hdf_tif_conversion(resource_path, destination_path):\n    hdf_dataset = gdal.Open(resource_path)\n    if hdf_dataset is None:\n        raise Exception(\"Could not open HDF dataset\")\n\n    maximum_snow_extent = hdf_dataset.GetSubDatasets()[0][0]\n    modis_snow_500m = hdf_dataset.GetSubDatasets()[1][0]\n\n    driver = gdal.GetDriverByName('GTiff')\n\n    tif_file_name = destination_path + resource_path.split('/')[-1].split('.hdf')[0]\n    tif_file_extension = '.tif'\n\n    maximum_snow_extent_file_name = tif_file_name + '_max_snow_extent' + tif_file_extension\n    modis_snow_500m_file_name = tif_file_name + '_modis_snow_500m' + tif_file_extension\n\n    maximum_snow_extent_dataset = gdal.Open(maximum_snow_extent)\n    modis_snow_500m_dataset = gdal.Open(modis_snow_500m)\n\n    if maximum_snow_extent_dataset is None:\n        raise Exception(\"Could not open maximum_snow_extent dataset\")\n\n    if modis_snow_500m_dataset is None:\n        raise Exception(\"Could not open modis_snow_500m dataset\")\n\n    driver.CreateCopy(maximum_snow_extent_file_name, maximum_snow_extent_dataset, 0)\n    driver.CreateCopy(modis_snow_500m_file_name, modis_snow_500m_dataset, 0)\n\n    print(\"HDF to TIF conversion completed successfully.\")\n\n\ndef download_modis_archive(*, start_date, end_date):\n    all_archive_dates = list()\n\n    all_rows = get_web_row_data()\n    for r in all_rows:\n        try:\n            all_archive_dates.append(datetime.strptime(r.text.replace('/', ''), '%Y.%m.%d'))\n        except:\n            continue\n\n    for a in all_archive_dates:\n        if start_date <= a <= end_date:\n            download_recent_modis(a)\n\n\ndef step_one_download_modis():\n  download_recent_modis()\n                   \ndef step_two_merge_modis_western_us():\n  download_modis_archive(start_date=datetime(2022, 1, 1), end_date=datetime(2022, 12, 31))\n\n  files = get_files(modis_downloaded_data)\n  for k, v in get_files(modis_downloaded_data).items():\n\n    conversion_path = modis_download_dir + \"geo-tiff/\" + k + \"/\"\n    if not os.path.exists(conversion_path):\n        os.makedirs(conversion_path)\n    for hdf_file in v:\n        # print(hdf_file.split('/')[-1].split('.hdf')[0], 1)\n        hdf_tif_cvt(hdf_file, conversion_path)\n\n  if not os.path.exists(vrt_file_dir):\n    os.makedirs(vrt_file_dir)\n\n\n  directories = [d for d in os.listdir(geo_tiff) if   os.path.isdir(os.path.join(geo_tiff, d))]\n\n  for d in directories:\n    eight_day_snow_cover = geo_tiff + d + '/eight_day_snow_cover'\n    maximum_snow_extent = geo_tiff + d + '/maximum_snow_extent'\n\n    eight_day_abs_path = list()\n    snow_extent_abs_path = list()\n\n    for file in os.listdir(eight_day_snow_cover):\n        file_path = os.path.abspath(os.path.join(eight_day_snow_cover, file))\n        eight_day_abs_path.append(file_path)\n\n    for file in os.listdir(maximum_snow_extent):\n        file_path = os.path.abspath(os.path.join(maximum_snow_extent, file))\n        snow_extent_abs_path.append(file_path)\n\n    combine_geotiff_gdal(eight_day_abs_path, vrt_file_dir + f\"{d}_eight_day.vrt\")\n    combine_geotiff_gdal(snow_extent_abs_path, vrt_file_dir + f\"{d}_snow_extent.vrt\")\n\n                   \n# main workflow is here:\nstep_one_download_modis()\nstep_two_merge_modis_western_us()\n\n\n\n\n\n\n\n\n\n\n\n\n",
  "history_output" : "sh: /home/chetana/anaconda3/condabin/python: No such file or directory\n",
  "history_begin_time" : 1686235961949,
  "history_end_time" : 1686235985411,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "jf7wuu",
  "indicator" : "Stopped"
},{
  "history_id" : "b96qt62s3t8",
  "history_input" : "import os\nimport pprint\n\n# import gdal\nimport subprocess\nfrom datetime import datetime, timedelta\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\nmodis_download_dir = \"/home/chetana/modis_download_folder/\"\nmodis_downloaded_data = modis_download_dir + \"n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\ngeo_tiff = modis_download_dir + \"geo-tiff/\"\nvrt_file_dir = modis_download_dir + \"vrt_files/\"\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(dir_path)\n\ntile_list = ['h09v04', 'h10v04', 'h11v04', 'h08v04', 'h08v05', 'h09v05', 'h10v05', 'h07v06', 'h08v06', 'h09v06']\n\n\ndef get_files(directory):\n    file_directory = list()\n    complete_directory_structure = dict()\n    for dirpath, dirnames, filenames in os.walk(directory):\n        for filename in filenames:\n            file_path = os.path.join(dirpath, filename)\n            file_directory.append(file_path)\n            complete_directory_structure[str(dirpath).rsplit('/')[-1]] = file_directory\n\n    return complete_directory_structure\n\n\ndef get_latest_date():\n    all_rows = get_web_row_data()\n\n    latest_date = None\n    for row in all_rows:\n        try:\n            new_date = datetime.strptime(row.text[:-1], '%Y.%m.%d')\n            if latest_date is None or latest_date < new_date:\n                latest_date = new_date\n        except:\n            continue\n\n    print(\"Find the latest date: \", latest_date.strftime(\"%Y.%m.%d\"))\n    second_latest_date = latest_date - timedelta(days=8)\n    return second_latest_date\n\n\ndef get_web_row_data():\n    try:\n        from BeautifulSoup import BeautifulSoup\n    except ImportError:\n        from bs4 import BeautifulSoup\n    modis_list_url = \"https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\n    print(\"Source / Product: \" + modis_list_url)\n    if os.path.exists(\"index.html\"):\n        os.remove(\"index.html\")\n    subprocess.run(\n        f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies '\n        f'--no-check-certificate --auth-no-challenge=on -np -e robots=off {modis_list_url}',\n        shell=True, stderr=subprocess.PIPE)\n    index_file = open('index.html', 'r')\n    webContent = index_file.read()\n    parsed_html = BeautifulSoup(webContent, \"html.parser\")\n    all_rows = parsed_html.body.findAll('td', attrs={'class': 'indexcolname'})\n    return all_rows\n\n\ndef download_recent_modis(date=None):\n    if date:\n        latest_date_str = date.strftime(\"%Y.%m.%d\")\n    else:\n        latest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\n    for tile in tile_list:\n        download_cmd = f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies ' \\\n                       f'--no-check-certificate --auth-no-challenge=on -r --reject \"i' \\\n                       f'ndex.html*\" -P {modis_download_dir} -np -e robots=off ' \\\n                       f'https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/ -A \"*{tile}*.hdf\" --quiet'\n        # print(download_cmd)\n        p = subprocess.run(download_cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        print(\"Downloading tile, \", tile, \" with status code \", \"OK\" if p.returncode == 0 else p.returncode)\n\n\n# def merge_wrap_tif_into_western_us_tif():\n#     latest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\n#     # traverse the folder and find the new download files\n#     for filename in os.listdir(f\"n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/\"):\n#         f = os.path.join(directory, filename)\n#         # checking if it is a file\n#         if os.path.isfile(f):\n#             print(f)\n# merge_wrap_tif_into_western_us_tif()\n\ndef hdf_tif_cvt(resource_path, destination_path):\n    if not os.path.isfile(resource_path):\n        raise Exception(\"HDF file not found\")\n\n    max_snow_extent_path = destination_path + \"maximum_snow_extent/\"\n    eight_day_snow_cover = destination_path + \"eight_day_snow_cover/\"\n    if not os.path.exists(max_snow_extent_path):\n        os.makedirs(max_snow_extent_path)\n    if not os.path.exists(eight_day_snow_cover):\n        os.makedirs(eight_day_snow_cover)\n\n    tif_file_name_snow_extent = max_snow_extent_path + resource_path.split('/')[-1].split('.hdf')[0]\n    tif_file_name_eight_day = eight_day_snow_cover + resource_path.split('/')[-1].split('.hdf')[0]\n    tif_file_extension = '.tif'\n\n    maximum_snow_extent_file_name = tif_file_name_snow_extent + '_max_snow_extent' + tif_file_extension\n    eight_day_snow_cover_file_name = tif_file_name_eight_day + '_modis_snow_500m' + tif_file_extension\n\n    maximum_snow_extent = f\"HDF4_EOS:EOS_GRID:\\\"{resource_path}\\\":MOD_Grid_Snow_500m:Maximum_Snow_Extent\"\n    eight_day_snow_cover = f\"HDF4_EOS:EOS_GRID:\\\"{resource_path}\\\":MOD_Grid_Snow_500m:Eight_Day_Snow_Cover\"\n\n    subprocess.run(f\"gdal_translate {maximum_snow_extent} {maximum_snow_extent_file_name}\", shell=True)\n    subprocess.run(f\"gdal_translate {eight_day_snow_cover} {eight_day_snow_cover_file_name}\", shell=True)\n\n\ndef combine_geotiff_gdal(vrt_array, destination):\n    subprocess.run(f\"gdalbuildvrt {destination} {' '.join(vrt_array)}\", shell=True)\n    tif_name = destination.split('.vrt')[-2] + '.tif'\n    subprocess.run(f\"gdal_translate -of GTiff {destination} {tif_name}\", shell=True)\n\n\ndef hdf_tif_conversion(resource_path, destination_path):\n    hdf_dataset = gdal.Open(resource_path)\n    if hdf_dataset is None:\n        raise Exception(\"Could not open HDF dataset\")\n\n    maximum_snow_extent = hdf_dataset.GetSubDatasets()[0][0]\n    modis_snow_500m = hdf_dataset.GetSubDatasets()[1][0]\n\n    driver = gdal.GetDriverByName('GTiff')\n\n    tif_file_name = destination_path + resource_path.split('/')[-1].split('.hdf')[0]\n    tif_file_extension = '.tif'\n\n    maximum_snow_extent_file_name = tif_file_name + '_max_snow_extent' + tif_file_extension\n    modis_snow_500m_file_name = tif_file_name + '_modis_snow_500m' + tif_file_extension\n\n    maximum_snow_extent_dataset = gdal.Open(maximum_snow_extent)\n    modis_snow_500m_dataset = gdal.Open(modis_snow_500m)\n\n    if maximum_snow_extent_dataset is None:\n        raise Exception(\"Could not open maximum_snow_extent dataset\")\n\n    if modis_snow_500m_dataset is None:\n        raise Exception(\"Could not open modis_snow_500m dataset\")\n\n    driver.CreateCopy(maximum_snow_extent_file_name, maximum_snow_extent_dataset, 0)\n    driver.CreateCopy(modis_snow_500m_file_name, modis_snow_500m_dataset, 0)\n\n    print(\"HDF to TIF conversion completed successfully.\")\n\n\ndef download_modis_archive(*, start_date, end_date):\n    all_archive_dates = list()\n\n    all_rows = get_web_row_data()\n    for r in all_rows:\n        try:\n            all_archive_dates.append(datetime.strptime(r.text.replace('/', ''), '%Y.%m.%d'))\n        except:\n            continue\n\n    for a in all_archive_dates:\n        if start_date <= a <= end_date:\n            download_recent_modis(a)\n\n\ndef step_one_download_modis():\n  download_recent_modis()\n                   \ndef step_two_merge_modis_western_us():\n  download_modis_archive(start_date=datetime(2022, 1, 1), end_date=datetime(2022, 12, 31))\n\n  files = get_files(modis_downloaded_data)\n  for k, v in get_files(modis_downloaded_data).items():\n\n    conversion_path = modis_download_dir + \"geo-tiff/\" + k + \"/\"\n    if not os.path.exists(conversion_path):\n        os.makedirs(conversion_path)\n    for hdf_file in v:\n        # print(hdf_file.split('/')[-1].split('.hdf')[0], 1)\n        hdf_tif_cvt(hdf_file, conversion_path)\n\n  if not os.path.exists(vrt_file_dir):\n    os.makedirs(vrt_file_dir)\n\n\n  directories = [d for d in os.listdir(geo_tiff) if   os.path.isdir(os.path.join(geo_tiff, d))]\n\n  for d in directories:\n    eight_day_snow_cover = geo_tiff + d + '/eight_day_snow_cover'\n    maximum_snow_extent = geo_tiff + d + '/maximum_snow_extent'\n\n    eight_day_abs_path = list()\n    snow_extent_abs_path = list()\n\n    for file in os.listdir(eight_day_snow_cover):\n        file_path = os.path.abspath(os.path.join(eight_day_snow_cover, file))\n        eight_day_abs_path.append(file_path)\n\n    for file in os.listdir(maximum_snow_extent):\n        file_path = os.path.abspath(os.path.join(maximum_snow_extent, file))\n        snow_extent_abs_path.append(file_path)\n\n    combine_geotiff_gdal(eight_day_abs_path, vrt_file_dir + f\"{d}_eight_day.vrt\")\n    combine_geotiff_gdal(snow_extent_abs_path, vrt_file_dir + f\"{d}_snow_extent.vrt\")\n\n                   \n# main workflow is here:\nstep_one_download_modis()\nstep_two_merge_modis_western_us()\n\n\n\n\n\n\n\n\n\n\n\n\n",
  "history_output" : "",
  "history_begin_time" : 1686235530086,
  "history_end_time" : 1686235532300,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "jf7wuu",
  "indicator" : "Done"
},{
  "history_id" : "sojqqd8tvjd",
  "history_input" : "import os\nimport pprint\n\n# import gdal\nimport subprocess\nfrom datetime import datetime, timedelta\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\nmodis_download_dir = \"/home/chetana/modis_download_folder/\"\nmodis_downloaded_data = modis_download_dir + \"n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\ngeo_tiff = modis_download_dir + \"geo-tiff/\"\nvrt_file_dir = modis_download_dir + \"vrt_files/\"\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(dir_path)\n\ntile_list = ['h09v04', 'h10v04', 'h11v04', 'h08v04', 'h08v05', 'h09v05', 'h10v05', 'h07v06', 'h08v06', 'h09v06']\n\n\ndef get_files(directory):\n    file_directory = list()\n    complete_directory_structure = dict()\n    for dirpath, dirnames, filenames in os.walk(directory):\n        for filename in filenames:\n            file_path = os.path.join(dirpath, filename)\n            file_directory.append(file_path)\n            complete_directory_structure[str(dirpath).rsplit('/')[-1]] = file_directory\n\n    return complete_directory_structure\n\n\ndef get_latest_date():\n    all_rows = get_web_row_data()\n\n    latest_date = None\n    for row in all_rows:\n        try:\n            new_date = datetime.strptime(row.text[:-1], '%Y.%m.%d')\n            if latest_date is None or latest_date < new_date:\n                latest_date = new_date\n        except:\n            continue\n\n    print(\"Find the latest date: \", latest_date.strftime(\"%Y.%m.%d\"))\n    second_latest_date = latest_date - timedelta(days=8)\n    return second_latest_date\n\n\ndef get_web_row_data():\n    try:\n        from BeautifulSoup import BeautifulSoup\n    except ImportError:\n        from bs4 import BeautifulSoup\n    modis_list_url = \"https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\n    print(\"Source / Product: \" + modis_list_url)\n    if os.path.exists(\"index.html\"):\n        os.remove(\"index.html\")\n    subprocess.run(\n        f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies '\n        f'--no-check-certificate --auth-no-challenge=on -np -e robots=off {modis_list_url}',\n        shell=True, stderr=subprocess.PIPE)\n    index_file = open('index.html', 'r')\n    webContent = index_file.read()\n    parsed_html = BeautifulSoup(webContent, \"html.parser\")\n    all_rows = parsed_html.body.findAll('td', attrs={'class': 'indexcolname'})\n    return all_rows\n\n\ndef download_recent_modis(date=None):\n    if date:\n        latest_date_str = date.strftime(\"%Y.%m.%d\")\n    else:\n        latest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\n    for tile in tile_list:\n        download_cmd = f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies ' \\\n                       f'--no-check-certificate --auth-no-challenge=on -r --reject \"i' \\\n                       f'ndex.html*\" -P {modis_download_dir} -np -e robots=off ' \\\n                       f'https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/ -A \"*{tile}*.hdf\" --quiet'\n        # print(download_cmd)\n        p = subprocess.run(download_cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        print(\"Downloading tile, \", tile, \" with status code \", \"OK\" if p.returncode == 0 else p.returncode)\n\n\n# def merge_wrap_tif_into_western_us_tif():\n#     latest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\n#     # traverse the folder and find the new download files\n#     for filename in os.listdir(f\"n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/\"):\n#         f = os.path.join(directory, filename)\n#         # checking if it is a file\n#         if os.path.isfile(f):\n#             print(f)\n# merge_wrap_tif_into_western_us_tif()\n\ndef hdf_tif_cvt(resource_path, destination_path):\n    if not os.path.isfile(resource_path):\n        raise Exception(\"HDF file not found\")\n\n    max_snow_extent_path = destination_path + \"maximum_snow_extent/\"\n    eight_day_snow_cover = destination_path + \"eight_day_snow_cover/\"\n    if not os.path.exists(max_snow_extent_path):\n        os.makedirs(max_snow_extent_path)\n    if not os.path.exists(eight_day_snow_cover):\n        os.makedirs(eight_day_snow_cover)\n\n    tif_file_name_snow_extent = max_snow_extent_path + resource_path.split('/')[-1].split('.hdf')[0]\n    tif_file_name_eight_day = eight_day_snow_cover + resource_path.split('/')[-1].split('.hdf')[0]\n    tif_file_extension = '.tif'\n\n    maximum_snow_extent_file_name = tif_file_name_snow_extent + '_max_snow_extent' + tif_file_extension\n    eight_day_snow_cover_file_name = tif_file_name_eight_day + '_modis_snow_500m' + tif_file_extension\n\n    maximum_snow_extent = f\"HDF4_EOS:EOS_GRID:\\\"{resource_path}\\\":MOD_Grid_Snow_500m:Maximum_Snow_Extent\"\n    eight_day_snow_cover = f\"HDF4_EOS:EOS_GRID:\\\"{resource_path}\\\":MOD_Grid_Snow_500m:Eight_Day_Snow_Cover\"\n\n    subprocess.run(f\"gdal_translate {maximum_snow_extent} {maximum_snow_extent_file_name}\", shell=True)\n    subprocess.run(f\"gdal_translate {eight_day_snow_cover} {eight_day_snow_cover_file_name}\", shell=True)\n\n\ndef combine_geotiff_gdal(vrt_array, destination):\n    subprocess.run(f\"gdalbuildvrt {destination} {' '.join(vrt_array)}\", shell=True)\n    tif_name = destination.split('.vrt')[-2] + '.tif'\n    subprocess.run(f\"gdal_translate -of GTiff {destination} {tif_name}\", shell=True)\n\n\ndef hdf_tif_conversion(resource_path, destination_path):\n    hdf_dataset = gdal.Open(resource_path)\n    if hdf_dataset is None:\n        raise Exception(\"Could not open HDF dataset\")\n\n    maximum_snow_extent = hdf_dataset.GetSubDatasets()[0][0]\n    modis_snow_500m = hdf_dataset.GetSubDatasets()[1][0]\n\n    driver = gdal.GetDriverByName('GTiff')\n\n    tif_file_name = destination_path + resource_path.split('/')[-1].split('.hdf')[0]\n    tif_file_extension = '.tif'\n\n    maximum_snow_extent_file_name = tif_file_name + '_max_snow_extent' + tif_file_extension\n    modis_snow_500m_file_name = tif_file_name + '_modis_snow_500m' + tif_file_extension\n\n    maximum_snow_extent_dataset = gdal.Open(maximum_snow_extent)\n    modis_snow_500m_dataset = gdal.Open(modis_snow_500m)\n\n    if maximum_snow_extent_dataset is None:\n        raise Exception(\"Could not open maximum_snow_extent dataset\")\n\n    if modis_snow_500m_dataset is None:\n        raise Exception(\"Could not open modis_snow_500m dataset\")\n\n    driver.CreateCopy(maximum_snow_extent_file_name, maximum_snow_extent_dataset, 0)\n    driver.CreateCopy(modis_snow_500m_file_name, modis_snow_500m_dataset, 0)\n\n    print(\"HDF to TIF conversion completed successfully.\")\n\n\ndef download_modis_archive(*, start_date, end_date):\n    all_archive_dates = list()\n\n    all_rows = get_web_row_data()\n    for r in all_rows:\n        try:\n            all_archive_dates.append(datetime.strptime(r.text.replace('/', ''), '%Y.%m.%d'))\n        except:\n            continue\n\n    for a in all_archive_dates:\n        if start_date <= a <= end_date:\n            download_recent_modis(a)\n\n\ndef step_one_download_modis():\n  download_recent_modis()\n                   \ndef step_two_merge_modis_western_us():\n  download_modis_archive(start_date=datetime(2022, 1, 1), end_date=datetime(2022, 12, 31))\n\n  files = get_files(modis_downloaded_data)\n  for k, v in get_files(modis_downloaded_data).items():\n\n    conversion_path = modis_download_dir + \"geo-tiff/\" + k + \"/\"\n    if not os.path.exists(conversion_path):\n        os.makedirs(conversion_path)\n    for hdf_file in v:\n        # print(hdf_file.split('/')[-1].split('.hdf')[0], 1)\n        hdf_tif_cvt(hdf_file, conversion_path)\n\n  if not os.path.exists(vrt_file_dir):\n    os.makedirs(vrt_file_dir)\n\n\n  directories = [d for d in os.listdir(geo_tiff) if   os.path.isdir(os.path.join(geo_tiff, d))]\n\n  for d in directories:\n    eight_day_snow_cover = geo_tiff + d + '/eight_day_snow_cover'\n    maximum_snow_extent = geo_tiff + d + '/maximum_snow_extent'\n\n    eight_day_abs_path = list()\n    snow_extent_abs_path = list()\n\n    for file in os.listdir(eight_day_snow_cover):\n        file_path = os.path.abspath(os.path.join(eight_day_snow_cover, file))\n        eight_day_abs_path.append(file_path)\n\n    for file in os.listdir(maximum_snow_extent):\n        file_path = os.path.abspath(os.path.join(maximum_snow_extent, file))\n        snow_extent_abs_path.append(file_path)\n\n    combine_geotiff_gdal(eight_day_abs_path, vrt_file_dir + f\"{d}_eight_day.vrt\")\n    combine_geotiff_gdal(snow_extent_abs_path, vrt_file_dir + f\"{d}_snow_extent.vrt\")\n\n                   \n# main workflow is here:\nstep_one_download_modis()\nstep_two_merge_modis_western_us()\n\n\n\n\n\n\n\n\n\n\n\n\n",
  "history_output" : "sh: /home/chetana/anaconda3/condabin/python: No such file or directory\n",
  "history_begin_time" : 1686235448514,
  "history_end_time" : 1686235482626,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "jf7wuu",
  "indicator" : "Stopped"
},{
  "history_id" : "sp1sxwqgrrn",
  "history_input" : "import os\nimport pprint\n\n# import gdal\nimport subprocess\nfrom datetime import datetime, timedelta\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\nmodis_download_dir = \"/home/chetana/modis_download_folder/\"\nmodis_downloaded_data = modis_download_dir + \"n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\ngeo_tiff = modis_download_dir + \"geo-tiff/\"\nvrt_file_dir = modis_download_dir + \"vrt_files/\"\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(dir_path)\n\ntile_list = ['h09v04', 'h10v04', 'h11v04', 'h08v04', 'h08v05', 'h09v05', 'h10v05', 'h07v06', 'h08v06', 'h09v06']\n\n\ndef get_files(directory):\n    file_directory = list()\n    complete_directory_structure = dict()\n    for dirpath, dirnames, filenames in os.walk(directory):\n        for filename in filenames:\n            file_path = os.path.join(dirpath, filename)\n            file_directory.append(file_path)\n            complete_directory_structure[str(dirpath).rsplit('/')[-1]] = file_directory\n\n    return complete_directory_structure\n\n\ndef get_latest_date():\n    all_rows = get_web_row_data()\n\n    latest_date = None\n    for row in all_rows:\n        try:\n            new_date = datetime.strptime(row.text[:-1], '%Y.%m.%d')\n            if latest_date is None or latest_date < new_date:\n                latest_date = new_date\n        except:\n            continue\n\n    print(\"Find the latest date: \", latest_date.strftime(\"%Y.%m.%d\"))\n    second_latest_date = latest_date - timedelta(days=8)\n    return second_latest_date\n\n\ndef get_web_row_data():\n    try:\n        from BeautifulSoup import BeautifulSoup\n    except ImportError:\n        from bs4 import BeautifulSoup\n    modis_list_url = \"https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\n    print(\"Source / Product: \" + modis_list_url)\n    if os.path.exists(\"index.html\"):\n        os.remove(\"index.html\")\n    subprocess.run(\n        f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies '\n        f'--no-check-certificate --auth-no-challenge=on -np -e robots=off {modis_list_url}',\n        shell=True, stderr=subprocess.PIPE)\n    index_file = open('index.html', 'r')\n    webContent = index_file.read()\n    parsed_html = BeautifulSoup(webContent, \"html.parser\")\n    all_rows = parsed_html.body.findAll('td', attrs={'class': 'indexcolname'})\n    return all_rows\n\n\ndef download_recent_modis(date=None):\n    if date:\n        latest_date_str = date.strftime(\"%Y.%m.%d\")\n    else:\n        latest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\n    for tile in tile_list:\n        download_cmd = f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies ' \\\n                       f'--no-check-certificate --auth-no-challenge=on -r --reject \"i' \\\n                       f'ndex.html*\" -P {modis_download_dir} -np -e robots=off ' \\\n                       f'https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/ -A \"*{tile}*.hdf\" --quiet'\n        # print(download_cmd)\n        p = subprocess.run(download_cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        print(\"Downloading tile, \", tile, \" with status code \", \"OK\" if p.returncode == 0 else p.returncode)\n\n\n# def merge_wrap_tif_into_western_us_tif():\n#     latest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\n#     # traverse the folder and find the new download files\n#     for filename in os.listdir(f\"n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/\"):\n#         f = os.path.join(directory, filename)\n#         # checking if it is a file\n#         if os.path.isfile(f):\n#             print(f)\n# merge_wrap_tif_into_western_us_tif()\n\ndef hdf_tif_cvt(resource_path, destination_path):\n    if not os.path.isfile(resource_path):\n        raise Exception(\"HDF file not found\")\n\n    max_snow_extent_path = destination_path + \"maximum_snow_extent/\"\n    eight_day_snow_cover = destination_path + \"eight_day_snow_cover/\"\n    if not os.path.exists(max_snow_extent_path):\n        os.makedirs(max_snow_extent_path)\n    if not os.path.exists(eight_day_snow_cover):\n        os.makedirs(eight_day_snow_cover)\n\n    tif_file_name_snow_extent = max_snow_extent_path + resource_path.split('/')[-1].split('.hdf')[0]\n    tif_file_name_eight_day = eight_day_snow_cover + resource_path.split('/')[-1].split('.hdf')[0]\n    tif_file_extension = '.tif'\n\n    maximum_snow_extent_file_name = tif_file_name_snow_extent + '_max_snow_extent' + tif_file_extension\n    eight_day_snow_cover_file_name = tif_file_name_eight_day + '_modis_snow_500m' + tif_file_extension\n\n    maximum_snow_extent = f\"HDF4_EOS:EOS_GRID:\\\"{resource_path}\\\":MOD_Grid_Snow_500m:Maximum_Snow_Extent\"\n    eight_day_snow_cover = f\"HDF4_EOS:EOS_GRID:\\\"{resource_path}\\\":MOD_Grid_Snow_500m:Eight_Day_Snow_Cover\"\n\n    subprocess.run(f\"gdal_translate {maximum_snow_extent} {maximum_snow_extent_file_name}\", shell=True)\n    subprocess.run(f\"gdal_translate {eight_day_snow_cover} {eight_day_snow_cover_file_name}\", shell=True)\n\n\ndef combine_geotiff_gdal(vrt_array, destination):\n    subprocess.run(f\"gdalbuildvrt {destination} {' '.join(vrt_array)}\", shell=True)\n    tif_name = destination.split('.vrt')[-2] + '.tif'\n    subprocess.run(f\"gdal_translate -of GTiff {destination} {tif_name}\", shell=True)\n\n\ndef hdf_tif_conversion(resource_path, destination_path):\n    hdf_dataset = gdal.Open(resource_path)\n    if hdf_dataset is None:\n        raise Exception(\"Could not open HDF dataset\")\n\n    maximum_snow_extent = hdf_dataset.GetSubDatasets()[0][0]\n    modis_snow_500m = hdf_dataset.GetSubDatasets()[1][0]\n\n    driver = gdal.GetDriverByName('GTiff')\n\n    tif_file_name = destination_path + resource_path.split('/')[-1].split('.hdf')[0]\n    tif_file_extension = '.tif'\n\n    maximum_snow_extent_file_name = tif_file_name + '_max_snow_extent' + tif_file_extension\n    modis_snow_500m_file_name = tif_file_name + '_modis_snow_500m' + tif_file_extension\n\n    maximum_snow_extent_dataset = gdal.Open(maximum_snow_extent)\n    modis_snow_500m_dataset = gdal.Open(modis_snow_500m)\n\n    if maximum_snow_extent_dataset is None:\n        raise Exception(\"Could not open maximum_snow_extent dataset\")\n\n    if modis_snow_500m_dataset is None:\n        raise Exception(\"Could not open modis_snow_500m dataset\")\n\n    driver.CreateCopy(maximum_snow_extent_file_name, maximum_snow_extent_dataset, 0)\n    driver.CreateCopy(modis_snow_500m_file_name, modis_snow_500m_dataset, 0)\n\n    print(\"HDF to TIF conversion completed successfully.\")\n\n\ndef download_modis_archive(*, start_date, end_date):\n    all_archive_dates = list()\n\n    all_rows = get_web_row_data()\n    for r in all_rows:\n        try:\n            all_archive_dates.append(datetime.strptime(r.text.replace('/', ''), '%Y.%m.%d'))\n        except:\n            continue\n\n    for a in all_archive_dates:\n        if start_date <= a <= end_date:\n            download_recent_modis(a)\n\n\ndef step_one_download_modis():\n  download_recent_modis()\n                   \ndef step_two_merge_modis_western_us():\n  download_modis_archive(start_date=datetime(2022, 1, 1), end_date=datetime(2022, 12, 31))\n\n  files = get_files(modis_downloaded_data)\n  for k, v in get_files(modis_downloaded_data).items():\n\n    conversion_path = modis_download_dir + \"geo-tiff/\" + k + \"/\"\n    if not os.path.exists(conversion_path):\n        os.makedirs(conversion_path)\n    for hdf_file in v:\n        # print(hdf_file.split('/')[-1].split('.hdf')[0], 1)\n        hdf_tif_cvt(hdf_file, conversion_path)\n\n  if not os.path.exists(vrt_file_dir):\n    os.makedirs(vrt_file_dir)\n\n\n  directories = [d for d in os.listdir(geo_tiff) if   os.path.isdir(os.path.join(geo_tiff, d))]\n\n  for d in directories:\n    eight_day_snow_cover = geo_tiff + d + '/eight_day_snow_cover'\n    maximum_snow_extent = geo_tiff + d + '/maximum_snow_extent'\n\n    eight_day_abs_path = list()\n    snow_extent_abs_path = list()\n\n    for file in os.listdir(eight_day_snow_cover):\n        file_path = os.path.abspath(os.path.join(eight_day_snow_cover, file))\n        eight_day_abs_path.append(file_path)\n\n    for file in os.listdir(maximum_snow_extent):\n        file_path = os.path.abspath(os.path.join(maximum_snow_extent, file))\n        snow_extent_abs_path.append(file_path)\n\n    combine_geotiff_gdal(eight_day_abs_path, vrt_file_dir + f\"{d}_eight_day.vrt\")\n    combine_geotiff_gdal(snow_extent_abs_path, vrt_file_dir + f\"{d}_snow_extent.vrt\")\n\n                   \n# main workflow is here:\nstep_one_download_modis()\nstep_two_merge_modis_western_us()\n\n\n\n\n\n\n\n\n\n\n\n\n",
  "history_output" : "usage: conda [-h] [-V] command ...\nconda: error: argument command: invalid choice: 'data_gee_modis_real_time.py' (choose from 'clean', 'compare', 'config', 'create', 'info', 'init', 'install', 'list', 'package', 'remove', 'uninstall', 'rename', 'run', 'search', 'update', 'upgrade', 'notices')\n",
  "history_begin_time" : 1686235402241,
  "history_end_time" : 1686235424777,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "jf7wuu",
  "indicator" : "Stopped"
},{
  "history_id" : "zafj4g5t2s7",
  "history_input" : "import os\nimport pprint\n\n# import gdal\nimport subprocess\nfrom datetime import datetime, timedelta\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\nmodis_download_dir = \"/home/chetana/modis_download_folder/\"\nmodis_downloaded_data = modis_download_dir + \"n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\ngeo_tiff = modis_download_dir + \"geo-tiff/\"\nvrt_file_dir = modis_download_dir + \"vrt_files/\"\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(dir_path)\n\ntile_list = ['h09v04', 'h10v04', 'h11v04', 'h08v04', 'h08v05', 'h09v05', 'h10v05', 'h07v06', 'h08v06', 'h09v06']\n\n\ndef get_files(directory):\n    file_directory = list()\n    complete_directory_structure = dict()\n    for dirpath, dirnames, filenames in os.walk(directory):\n        for filename in filenames:\n            file_path = os.path.join(dirpath, filename)\n            file_directory.append(file_path)\n            complete_directory_structure[str(dirpath).rsplit('/')[-1]] = file_directory\n\n    return complete_directory_structure\n\n\ndef get_latest_date():\n    all_rows = get_web_row_data()\n\n    latest_date = None\n    for row in all_rows:\n        try:\n            new_date = datetime.strptime(row.text[:-1], '%Y.%m.%d')\n            if latest_date is None or latest_date < new_date:\n                latest_date = new_date\n        except:\n            continue\n\n    print(\"Find the latest date: \", latest_date.strftime(\"%Y.%m.%d\"))\n    second_latest_date = latest_date - timedelta(days=8)\n    return second_latest_date\n\n\ndef get_web_row_data():\n    try:\n        from BeautifulSoup import BeautifulSoup\n    except ImportError:\n        from bs4 import BeautifulSoup\n    modis_list_url = \"https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\n    print(\"Source / Product: \" + modis_list_url)\n    if os.path.exists(\"index.html\"):\n        os.remove(\"index.html\")\n    subprocess.run(\n        f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies '\n        f'--no-check-certificate --auth-no-challenge=on -np -e robots=off {modis_list_url}',\n        shell=True, stderr=subprocess.PIPE)\n    index_file = open('index.html', 'r')\n    webContent = index_file.read()\n    parsed_html = BeautifulSoup(webContent, \"html.parser\")\n    all_rows = parsed_html.body.findAll('td', attrs={'class': 'indexcolname'})\n    return all_rows\n\n\ndef download_recent_modis(date=None):\n    if date:\n        latest_date_str = date.strftime(\"%Y.%m.%d\")\n    else:\n        latest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\n    for tile in tile_list:\n        download_cmd = f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies ' \\\n                       f'--no-check-certificate --auth-no-challenge=on -r --reject \"i' \\\n                       f'ndex.html*\" -P {modis_download_dir} -np -e robots=off ' \\\n                       f'https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/ -A \"*{tile}*.hdf\" --quiet'\n        # print(download_cmd)\n        p = subprocess.run(download_cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        print(\"Downloading tile, \", tile, \" with status code \", \"OK\" if p.returncode == 0 else p.returncode)\n\n\n# def merge_wrap_tif_into_western_us_tif():\n#     latest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\n#     # traverse the folder and find the new download files\n#     for filename in os.listdir(f\"n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/\"):\n#         f = os.path.join(directory, filename)\n#         # checking if it is a file\n#         if os.path.isfile(f):\n#             print(f)\n# merge_wrap_tif_into_western_us_tif()\n\ndef hdf_tif_cvt(resource_path, destination_path):\n    if not os.path.isfile(resource_path):\n        raise Exception(\"HDF file not found\")\n\n    max_snow_extent_path = destination_path + \"maximum_snow_extent/\"\n    eight_day_snow_cover = destination_path + \"eight_day_snow_cover/\"\n    if not os.path.exists(max_snow_extent_path):\n        os.makedirs(max_snow_extent_path)\n    if not os.path.exists(eight_day_snow_cover):\n        os.makedirs(eight_day_snow_cover)\n\n    tif_file_name_snow_extent = max_snow_extent_path + resource_path.split('/')[-1].split('.hdf')[0]\n    tif_file_name_eight_day = eight_day_snow_cover + resource_path.split('/')[-1].split('.hdf')[0]\n    tif_file_extension = '.tif'\n\n    maximum_snow_extent_file_name = tif_file_name_snow_extent + '_max_snow_extent' + tif_file_extension\n    eight_day_snow_cover_file_name = tif_file_name_eight_day + '_modis_snow_500m' + tif_file_extension\n\n    maximum_snow_extent = f\"HDF4_EOS:EOS_GRID:\\\"{resource_path}\\\":MOD_Grid_Snow_500m:Maximum_Snow_Extent\"\n    eight_day_snow_cover = f\"HDF4_EOS:EOS_GRID:\\\"{resource_path}\\\":MOD_Grid_Snow_500m:Eight_Day_Snow_Cover\"\n\n    subprocess.run(f\"gdal_translate {maximum_snow_extent} {maximum_snow_extent_file_name}\", shell=True)\n    subprocess.run(f\"gdal_translate {eight_day_snow_cover} {eight_day_snow_cover_file_name}\", shell=True)\n\n\ndef combine_geotiff_gdal(vrt_array, destination):\n    subprocess.run(f\"gdalbuildvrt {destination} {' '.join(vrt_array)}\", shell=True)\n    tif_name = destination.split('.vrt')[-2] + '.tif'\n    subprocess.run(f\"gdal_translate -of GTiff {destination} {tif_name}\", shell=True)\n\n\ndef hdf_tif_conversion(resource_path, destination_path):\n    hdf_dataset = gdal.Open(resource_path)\n    if hdf_dataset is None:\n        raise Exception(\"Could not open HDF dataset\")\n\n    maximum_snow_extent = hdf_dataset.GetSubDatasets()[0][0]\n    modis_snow_500m = hdf_dataset.GetSubDatasets()[1][0]\n\n    driver = gdal.GetDriverByName('GTiff')\n\n    tif_file_name = destination_path + resource_path.split('/')[-1].split('.hdf')[0]\n    tif_file_extension = '.tif'\n\n    maximum_snow_extent_file_name = tif_file_name + '_max_snow_extent' + tif_file_extension\n    modis_snow_500m_file_name = tif_file_name + '_modis_snow_500m' + tif_file_extension\n\n    maximum_snow_extent_dataset = gdal.Open(maximum_snow_extent)\n    modis_snow_500m_dataset = gdal.Open(modis_snow_500m)\n\n    if maximum_snow_extent_dataset is None:\n        raise Exception(\"Could not open maximum_snow_extent dataset\")\n\n    if modis_snow_500m_dataset is None:\n        raise Exception(\"Could not open modis_snow_500m dataset\")\n\n    driver.CreateCopy(maximum_snow_extent_file_name, maximum_snow_extent_dataset, 0)\n    driver.CreateCopy(modis_snow_500m_file_name, modis_snow_500m_dataset, 0)\n\n    print(\"HDF to TIF conversion completed successfully.\")\n\n\ndef download_modis_archive(*, start_date, end_date):\n    all_archive_dates = list()\n\n    all_rows = get_web_row_data()\n    for r in all_rows:\n        try:\n            all_archive_dates.append(datetime.strptime(r.text.replace('/', ''), '%Y.%m.%d'))\n        except:\n            continue\n\n    for a in all_archive_dates:\n        if start_date <= a <= end_date:\n            download_recent_modis(a)\n\n\ndef step_one_download_modis():\n  download_recent_modis()\n                   \ndef step_two_merge_modis_western_us():\n  download_modis_archive(start_date=datetime(2022, 1, 1), end_date=datetime(2022, 12, 31))\n\n  files = get_files(modis_downloaded_data)\n  for k, v in get_files(modis_downloaded_data).items():\n\n    conversion_path = modis_download_dir + \"geo-tiff/\" + k + \"/\"\n    if not os.path.exists(conversion_path):\n        os.makedirs(conversion_path)\n    for hdf_file in v:\n        # print(hdf_file.split('/')[-1].split('.hdf')[0], 1)\n        hdf_tif_cvt(hdf_file, conversion_path)\n\n  if not os.path.exists(vrt_file_dir):\n    os.makedirs(vrt_file_dir)\n\n\n  directories = [d for d in os.listdir(geo_tiff) if   os.path.isdir(os.path.join(geo_tiff, d))]\n\n  for d in directories:\n    eight_day_snow_cover = geo_tiff + d + '/eight_day_snow_cover'\n    maximum_snow_extent = geo_tiff + d + '/maximum_snow_extent'\n\n    eight_day_abs_path = list()\n    snow_extent_abs_path = list()\n\n    for file in os.listdir(eight_day_snow_cover):\n        file_path = os.path.abspath(os.path.join(eight_day_snow_cover, file))\n        eight_day_abs_path.append(file_path)\n\n    for file in os.listdir(maximum_snow_extent):\n        file_path = os.path.abspath(os.path.join(maximum_snow_extent, file))\n        snow_extent_abs_path.append(file_path)\n\n    combine_geotiff_gdal(eight_day_abs_path, vrt_file_dir + f\"{d}_eight_day.vrt\")\n    combine_geotiff_gdal(snow_extent_abs_path, vrt_file_dir + f\"{d}_snow_extent.vrt\")\n\n                   \n# main workflow is here:\nstep_one_download_modis()\nstep_two_merge_modis_western_us()\n\n\n\n\n\n\n\n\n\n\n\n\n",
  "history_output" : "  File \"data_gee_modis_real_time.py\", line 60\n    f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies '\n                                                                                              ^\nSyntaxError: invalid syntax\n",
  "history_begin_time" : 1686153654931,
  "history_end_time" : 1686153658245,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "jf7wuu",
  "indicator" : "Done"
},{
  "history_id" : "x2i6shv55yu",
  "history_input" : "import os\nimport pprint\n\n# import gdal\nimport subprocess\nfrom datetime import datetime, timedelta\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\nmodis_download_dir = \"/home/chetana/modis_download_folder/\"\nmodis_downloaded_data = modis_download_dir + \"n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\ngeo_tiff = modis_download_dir + \"geo-tiff/\"\nvrt_file_dir = modis_download_dir + \"vrt_files/\"\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(dir_path)\n\ntile_list = ['h09v04', 'h10v04', 'h11v04', 'h08v04', 'h08v05', 'h09v05', 'h10v05', 'h07v06', 'h08v06', 'h09v06']\n\n\ndef get_files(directory):\n    file_directory = list()\n    complete_directory_structure = dict()\n    for dirpath, dirnames, filenames in os.walk(directory):\n        for filename in filenames:\n            file_path = os.path.join(dirpath, filename)\n            file_directory.append(file_path)\n            complete_directory_structure[str(dirpath).rsplit('/')[-1]] = file_directory\n\n    return complete_directory_structure\n\n\ndef get_latest_date():\n    all_rows = get_web_row_data()\n\n    latest_date = None\n    for row in all_rows:\n        try:\n            new_date = datetime.strptime(row.text[:-1], '%Y.%m.%d')\n            if latest_date is None or latest_date < new_date:\n                latest_date = new_date\n        except:\n            continue\n\n    print(\"Find the latest date: \", latest_date.strftime(\"%Y.%m.%d\"))\n    second_latest_date = latest_date - timedelta(days=8)\n    return second_latest_date\n\n\ndef get_web_row_data():\n    try:\n        from BeautifulSoup import BeautifulSoup\n    except ImportError:\n        from bs4 import BeautifulSoup\n    modis_list_url = \"https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\n    print(\"Source / Product: \" + modis_list_url)\n    if os.path.exists(\"index.html\"):\n        os.remove(\"index.html\")\n    subprocess.run(\n        f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies '\n        f'--no-check-certificate --auth-no-challenge=on -np -e robots=off {modis_list_url}',\n        shell=True, stderr=subprocess.PIPE)\n    index_file = open('index.html', 'r')\n    webContent = index_file.read()\n    parsed_html = BeautifulSoup(webContent, \"html.parser\")\n    all_rows = parsed_html.body.findAll('td', attrs={'class': 'indexcolname'})\n    return all_rows\n\n\ndef download_recent_modis(date=None):\n    if date:\n        latest_date_str = date.strftime(\"%Y.%m.%d\")\n    else:\n        latest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\n    for tile in tile_list:\n        download_cmd = f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies ' \\\n                       f'--no-check-certificate --auth-no-challenge=on -r --reject \"i' \\\n                       f'ndex.html*\" -P {modis_download_dir} -np -e robots=off ' \\\n                       f'https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/ -A \"*{tile}*.hdf\" --quiet'\n        # print(download_cmd)\n        p = subprocess.run(download_cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        print(\"Downloading tile, \", tile, \" with status code \", \"OK\" if p.returncode == 0 else p.returncode)\n\n\n# def merge_wrap_tif_into_western_us_tif():\n#     latest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\n#     # traverse the folder and find the new download files\n#     for filename in os.listdir(f\"n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/\"):\n#         f = os.path.join(directory, filename)\n#         # checking if it is a file\n#         if os.path.isfile(f):\n#             print(f)\n# merge_wrap_tif_into_western_us_tif()\n\ndef hdf_tif_cvt(resource_path, destination_path):\n    if not os.path.isfile(resource_path):\n        raise Exception(\"HDF file not found\")\n\n    max_snow_extent_path = destination_path + \"maximum_snow_extent/\"\n    eight_day_snow_cover = destination_path + \"eight_day_snow_cover/\"\n    if not os.path.exists(max_snow_extent_path):\n        os.makedirs(max_snow_extent_path)\n    if not os.path.exists(eight_day_snow_cover):\n        os.makedirs(eight_day_snow_cover)\n\n    tif_file_name_snow_extent = max_snow_extent_path + resource_path.split('/')[-1].split('.hdf')[0]\n    tif_file_name_eight_day = eight_day_snow_cover + resource_path.split('/')[-1].split('.hdf')[0]\n    tif_file_extension = '.tif'\n\n    maximum_snow_extent_file_name = tif_file_name_snow_extent + '_max_snow_extent' + tif_file_extension\n    eight_day_snow_cover_file_name = tif_file_name_eight_day + '_modis_snow_500m' + tif_file_extension\n\n    maximum_snow_extent = f\"HDF4_EOS:EOS_GRID:\\\"{resource_path}\\\":MOD_Grid_Snow_500m:Maximum_Snow_Extent\"\n    eight_day_snow_cover = f\"HDF4_EOS:EOS_GRID:\\\"{resource_path}\\\":MOD_Grid_Snow_500m:Eight_Day_Snow_Cover\"\n\n    subprocess.run(f\"gdal_translate {maximum_snow_extent} {maximum_snow_extent_file_name}\", shell=True)\n    subprocess.run(f\"gdal_translate {eight_day_snow_cover} {eight_day_snow_cover_file_name}\", shell=True)\n\n\ndef combine_geotiff_gdal(vrt_array, destination):\n    subprocess.run(f\"gdalbuildvrt {destination} {' '.join(vrt_array)}\", shell=True)\n    tif_name = destination.split('.vrt')[-2] + '.tif'\n    subprocess.run(f\"gdal_translate -of GTiff {destination} {tif_name}\", shell=True)\n\n\ndef hdf_tif_conversion(resource_path, destination_path):\n    hdf_dataset = gdal.Open(resource_path)\n    if hdf_dataset is None:\n        raise Exception(\"Could not open HDF dataset\")\n\n    maximum_snow_extent = hdf_dataset.GetSubDatasets()[0][0]\n    modis_snow_500m = hdf_dataset.GetSubDatasets()[1][0]\n\n    driver = gdal.GetDriverByName('GTiff')\n\n    tif_file_name = destination_path + resource_path.split('/')[-1].split('.hdf')[0]\n    tif_file_extension = '.tif'\n\n    maximum_snow_extent_file_name = tif_file_name + '_max_snow_extent' + tif_file_extension\n    modis_snow_500m_file_name = tif_file_name + '_modis_snow_500m' + tif_file_extension\n\n    maximum_snow_extent_dataset = gdal.Open(maximum_snow_extent)\n    modis_snow_500m_dataset = gdal.Open(modis_snow_500m)\n\n    if maximum_snow_extent_dataset is None:\n        raise Exception(\"Could not open maximum_snow_extent dataset\")\n\n    if modis_snow_500m_dataset is None:\n        raise Exception(\"Could not open modis_snow_500m dataset\")\n\n    driver.CreateCopy(maximum_snow_extent_file_name, maximum_snow_extent_dataset, 0)\n    driver.CreateCopy(modis_snow_500m_file_name, modis_snow_500m_dataset, 0)\n\n    print(\"HDF to TIF conversion completed successfully.\")\n\n\ndef download_modis_archive(*, start_date, end_date):\n    all_archive_dates = list()\n\n    all_rows = get_web_row_data()\n    for r in all_rows:\n        try:\n            all_archive_dates.append(datetime.strptime(r.text.replace('/', ''), '%Y.%m.%d'))\n        except:\n            continue\n\n    for a in all_archive_dates:\n        if start_date <= a <= end_date:\n            download_recent_modis(a)\n\n\ndef step_one_download_modis():\n  download_recent_modis()\n                   \ndef step_two_merge_modis_western_us():\n  download_modis_archive(start_date=datetime(2022, 1, 1), end_date=datetime(2022, 12, 31))\n\n  files = get_files(modis_downloaded_data)\n  for k, v in get_files(modis_downloaded_data).items():\n\n    conversion_path = modis_download_dir + \"geo-tiff/\" + k + \"/\"\n    if not os.path.exists(conversion_path):\n        os.makedirs(conversion_path)\n    for hdf_file in v:\n        # print(hdf_file.split('/')[-1].split('.hdf')[0], 1)\n        hdf_tif_cvt(hdf_file, conversion_path)\n\n  if not os.path.exists(vrt_file_dir):\n    os.makedirs(vrt_file_dir)\n\n\n  directories = [d for d in os.listdir(geo_tiff) if   os.path.isdir(os.path.join(geo_tiff, d))]\n\n  for d in directories:\n    eight_day_snow_cover = geo_tiff + d + '/eight_day_snow_cover'\n    maximum_snow_extent = geo_tiff + d + '/maximum_snow_extent'\n\n    eight_day_abs_path = list()\n    snow_extent_abs_path = list()\n\n    for file in os.listdir(eight_day_snow_cover):\n        file_path = os.path.abspath(os.path.join(eight_day_snow_cover, file))\n        eight_day_abs_path.append(file_path)\n\n    for file in os.listdir(maximum_snow_extent):\n        file_path = os.path.abspath(os.path.join(maximum_snow_extent, file))\n        snow_extent_abs_path.append(file_path)\n\n    combine_geotiff_gdal(eight_day_abs_path, vrt_file_dir + f\"{d}_eight_day.vrt\")\n    combine_geotiff_gdal(snow_extent_abs_path, vrt_file_dir + f\"{d}_snow_extent.vrt\")\n\n                   \n# main workflow is here:\nstep_one_download_modis()\nstep_two_merge_modis_western_us()\n\n\n\n\n\n\n\n\n\n\n\n\n",
  "history_output" : "sh: /home/chetana/anaconda3/condabin/python: No such file or directory\n",
  "history_begin_time" : 1682984798437,
  "history_end_time" : 1682984801625,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "jf7wuu",
  "indicator" : "Failed"
},{
  "history_id" : "IkADodUcfGKS",
  "history_input" : "import gdal\nimport subprocess\nfrom datetime import datetime, timedelta\n\n\n# Write first python in Geoweaver\nimport os\nimport urllib.request, urllib.error, urllib.parse\nimport sys\n\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(dir_path)\n\ntile_list = ['h09v04', 'h10v04', 'h11v04', 'h08v05', 'h09v05', 'h10v05', 'h07v06', 'h08v06', 'h09v06']\n\n\ndef get_latest_date():\n  try:\n    from BeautifulSoup import BeautifulSoup\n  except ImportError:\n      from bs4 import BeautifulSoup\n\n  modis_list_url = \"https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\n\n  print(modis_list_url)\n  if os.path.exists(\"index.html\"):\n    os.remove(\"index.html\")\n  \n  response = subprocess.run(f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -np -e robots=off {modis_list_url}', shell=True,  stderr=subprocess.PIPE)\n  index_file = open('index.html', 'r')\n  webContent = index_file.read()\n  \n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n  print('----------------------')\n  all_rows = parsed_html.body.findAll('td', attrs={'class':'indexcolname'})\n  \n  latest_date = None\n  for row in all_rows:\n    try:\n      new_date = datetime.strptime(row.text[:-1], '%Y.%m.%d')\n      if latest_date is None or latest_date < new_date:\n        latest_date = new_date\n    except:\n      continue\n  \n  print(\"Find the latest date: \", latest_date.strftime(\"%Y.%m.%d\"))\n  second_latest_date = latest_date - timedelta(days=8)\n  return second_latest_date\n  \n  \ndef download_recent_modis():\n  latest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\n  print(latest_date_str)\n  modis_download_dir = \"/home/chetana/modis_download_folder/\"\n  for tile in tile_list:\n    download_cmd = f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P {modis_download_dir} -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/ -A \"*{tile}*.hdf\" --quiet'\n    #print(download_cmd)\n    p = subprocess.run(download_cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    print(\"Downloading tile, \", tile, \" returns \", p.returncode)\n\ndef merge_wrap_tif_into_western_us_tif():\n  latest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\n  # traverse the folder and find the newly download files\n  for filename in os.listdir(f\"n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/\"):\n    f = os.path.join(directory, filename)\n    # checking if it is a file\n    if os.path.isfile(f):\n        print(f)\n    \n#download_recent_modis()\n#merge_wrap_tif_into_western_us_tif()\n\ndef hdf_tif_conversion(resource_path):\n    hdf_dataset = gdal.Open(resource_path)\n    if hdf_dataset is None:\n        raise Exception(\"Could not open HDF dataset\")\n\n    maximum_snow_extent = hdf_dataset.GetSubDatasets()[0][0]\n    modis_snow_500m = hdf_dataset.GetSubDatasets()[1][0]\n\n    driver = gdal.GetDriverByName('GTiff')\n\n    tif_file_name = resource_path.split('/')[-1].split('.hdf')[0]\n    tif_file_extension = '.tif'\n\n    maximum_snow_extent_file_name = tif_file_name + '_max_snow_extent' + tif_file_extension\n    modis_snow_500m_file_name = tif_file_name + '_modis_snow_500m' + tif_file_extension\n\n    maximum_snow_extent_dataset = gdal.Open(maximum_snow_extent)\n    modis_snow_500m_dataset = gdal.Open(modis_snow_500m)\n\n    if maximum_snow_extent_dataset is None:\n        raise Exception(\"Could not open maximum_snow_extent dataset\")\n\n    if modis_snow_500m_dataset is None:\n        raise Exception(\"Could not open modis_snow_500m dataset\")\n\n    driver.CreateCopy(maximum_snow_extent_file_name, maximum_snow_extent_dataset, 0)\n    driver.CreateCopy(modis_snow_500m_file_name, modis_snow_500m_dataset, 0)\n\n    print(\"HDF to TIF conversion completed successfully.\")\n\n    \nhdf_tif_conversion('/home/chetana/modis_download_folder/n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.04.07/MOD10A2.A2023097.h08v06.061.2023107141802.hdf')    \n\ndef merge_multiple_tiff(part_one, part_two, out_file):\n    subprocess.run(f\"tifftools {part_one} {part_two} {out_file}\")",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/IkADodUcfGKS/data_gee_modis_real_time.py\", line 1, in <module>\n    import gdal\nModuleNotFoundError: No module named 'gdal'\n",
  "history_begin_time" : 1682432680956,
  "history_end_time" : 1682432682028,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "atU3KOJxmOwX",
  "history_input" : "import gdal\nimport subprocess\nfrom datetime import datetime, timedelta\n\n\n# Write first python in Geoweaver\nimport os\nimport urllib.request, urllib.error, urllib.parse\nimport sys\n\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(dir_path)\n\ntile_list = ['h09v04', 'h10v04', 'h11v04', 'h08v05', 'h09v05', 'h10v05', 'h07v06', 'h08v06', 'h09v06']\n\n\ndef get_latest_date():\n  try:\n    from BeautifulSoup import BeautifulSoup\n  except ImportError:\n      from bs4 import BeautifulSoup\n\n  modis_list_url = \"https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\n\n  print(modis_list_url)\n  if os.path.exists(\"index.html\"):\n    os.remove(\"index.html\")\n  \n  response = subprocess.run(f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -np -e robots=off {modis_list_url}', shell=True,  stderr=subprocess.PIPE)\n  index_file = open('index.html', 'r')\n  webContent = index_file.read()\n  \n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n  print('----------------------')\n  all_rows = parsed_html.body.findAll('td', attrs={'class':'indexcolname'})\n  \n  latest_date = None\n  for row in all_rows:\n    try:\n      new_date = datetime.strptime(row.text[:-1], '%Y.%m.%d')\n      if latest_date is None or latest_date < new_date:\n        latest_date = new_date\n    except:\n      continue\n  \n  print(\"Find the latest date: \", latest_date.strftime(\"%Y.%m.%d\"))\n  second_latest_date = latest_date - timedelta(days=8)\n  return second_latest_date\n  \n  \ndef download_recent_modis():\n  latest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\n  print(latest_date_str)\n  modis_download_dir = \"/home/chetana/modis_download_folder/\"\n  for tile in tile_list:\n    download_cmd = f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P {modis_download_dir} -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/ -A \"*{tile}*.hdf\" --quiet'\n    #print(download_cmd)\n    p = subprocess.run(download_cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    print(\"Downloading tile, \", tile, \" returns \", p.returncode)\n\ndef merge_wrap_tif_into_western_us_tif():\n  latest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\n  # traverse the folder and find the newly download files\n  for filename in os.listdir(f\"n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/\"):\n    f = os.path.join(directory, filename)\n    # checking if it is a file\n    if os.path.isfile(f):\n        print(f)\n    \n#download_recent_modis()\n#merge_wrap_tif_into_western_us_tif()\n\ndef hdf_tif_conversion(resource_path):\n    hdf_dataset = gdal.Open(resource_path)\n    if hdf_dataset is None:\n        raise Exception(\"Could not open HDF dataset\")\n\n    maximum_snow_extent = hdf_dataset.GetSubDatasets()[0][0]\n    modis_snow_500m = hdf_dataset.GetSubDatasets()[1][0]\n\n    driver = gdal.GetDriverByName('GTiff')\n\n    tif_file_name = resource_path.split('/')[-1].split('.hdf')[0]\n    tif_file_extension = '.tif'\n\n    maximum_snow_extent_file_name = tif_file_name + '_max_snow_extent' + tif_file_extension\n    modis_snow_500m_file_name = tif_file_name + '_modis_snow_500m' + tif_file_extension\n\n    maximum_snow_extent_dataset = gdal.Open(maximum_snow_extent)\n    modis_snow_500m_dataset = gdal.Open(modis_snow_500m)\n\n    if maximum_snow_extent_dataset is None:\n        raise Exception(\"Could not open maximum_snow_extent dataset\")\n\n    if modis_snow_500m_dataset is None:\n        raise Exception(\"Could not open modis_snow_500m dataset\")\n\n    driver.CreateCopy(maximum_snow_extent_file_name, maximum_snow_extent_dataset, 0)\n    driver.CreateCopy(modis_snow_500m_file_name, modis_snow_500m_dataset, 0)\n\n    print(\"HDF to TIF conversion completed successfully.\")\n\n    \nhdf_tif_conversion('/home/chetana/modis_download_folder/n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.04.07/MOD10A2.A2023097.h08v06.061.2023107141802.hdf')    \n\ndef merge_multiple_tiff(part_one, part_two, out_file):\n    subprocess.run(f\"tifftools {part_one} {part_two} {out_file}\")",
  "history_output" : "sh: /home/chetana/anaconda3/condabin/python: No such file or directory\n",
  "history_begin_time" : 1682432655489,
  "history_end_time" : 1682432656547,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "TSGpxyNxel3n",
  "history_input" : "import gdal\nimport subprocess\nfrom datetime import datetime, timedelta\n\n\n# Write first python in Geoweaver\nimport os\nimport urllib.request, urllib.error, urllib.parse\nimport sys\n\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\n!pip3 install gdal\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(dir_path)\n\ntile_list = ['h09v04', 'h10v04', 'h11v04', 'h08v05', 'h09v05', 'h10v05', 'h07v06', 'h08v06', 'h09v06']\n\n\ndef get_latest_date():\n  try:\n    from BeautifulSoup import BeautifulSoup\n  except ImportError:\n      from bs4 import BeautifulSoup\n\n  modis_list_url = \"https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\n\n  print(modis_list_url)\n  if os.path.exists(\"index.html\"):\n    os.remove(\"index.html\")\n  \n  response = subprocess.run(f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -np -e robots=off {modis_list_url}', shell=True,  stderr=subprocess.PIPE)\n  index_file = open('index.html', 'r')\n  webContent = index_file.read()\n  \n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n  print('----------------------')\n  all_rows = parsed_html.body.findAll('td', attrs={'class':'indexcolname'})\n  \n  latest_date = None\n  for row in all_rows:\n    try:\n      new_date = datetime.strptime(row.text[:-1], '%Y.%m.%d')\n      if latest_date is None or latest_date < new_date:\n        latest_date = new_date\n    except:\n      continue\n  \n  print(\"Find the latest date: \", latest_date.strftime(\"%Y.%m.%d\"))\n  second_latest_date = latest_date - timedelta(days=8)\n  return second_latest_date\n  \n  \ndef download_recent_modis():\n  latest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\n  print(latest_date_str)\n  modis_download_dir = \"/home/chetana/modis_download_folder/\"\n  for tile in tile_list:\n    download_cmd = f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P {modis_download_dir} -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/ -A \"*{tile}*.hdf\" --quiet'\n    #print(download_cmd)\n    p = subprocess.run(download_cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    print(\"Downloading tile, \", tile, \" returns \", p.returncode)\n\ndef merge_wrap_tif_into_western_us_tif():\n  latest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\n  # traverse the folder and find the newly download files\n  for filename in os.listdir(f\"n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/\"):\n    f = os.path.join(directory, filename)\n    # checking if it is a file\n    if os.path.isfile(f):\n        print(f)\n    \n#download_recent_modis()\n#merge_wrap_tif_into_western_us_tif()\n\ndef hdf_tif_conversion(resource_path):\n    hdf_dataset = gdal.Open(resource_path)\n    if hdf_dataset is None:\n        raise Exception(\"Could not open HDF dataset\")\n\n    maximum_snow_extent = hdf_dataset.GetSubDatasets()[0][0]\n    modis_snow_500m = hdf_dataset.GetSubDatasets()[1][0]\n\n    driver = gdal.GetDriverByName('GTiff')\n\n    tif_file_name = resource_path.split('/')[-1].split('.hdf')[0]\n    tif_file_extension = '.tif'\n\n    maximum_snow_extent_file_name = tif_file_name + '_max_snow_extent' + tif_file_extension\n    modis_snow_500m_file_name = tif_file_name + '_modis_snow_500m' + tif_file_extension\n\n    maximum_snow_extent_dataset = gdal.Open(maximum_snow_extent)\n    modis_snow_500m_dataset = gdal.Open(modis_snow_500m)\n\n    if maximum_snow_extent_dataset is None:\n        raise Exception(\"Could not open maximum_snow_extent dataset\")\n\n    if modis_snow_500m_dataset is None:\n        raise Exception(\"Could not open modis_snow_500m dataset\")\n\n    driver.CreateCopy(maximum_snow_extent_file_name, maximum_snow_extent_dataset, 0)\n    driver.CreateCopy(modis_snow_500m_file_name, modis_snow_500m_dataset, 0)\n\n    print(\"HDF to TIF conversion completed successfully.\")\n\n    \nhdf_tif_conversion('/home/chetana/modis_download_folder/n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.04.07/MOD10A2.A2023097.h08v06.061.2023107141802.hdf')    \n\ndef merge_multiple_tiff(part_one, part_two, out_file):\n    subprocess.run(f\"tifftools {part_one} {part_two} {out_file}\")",
  "history_output" : "usage: conda [-h] [-V] command ...\nconda: error: argument command: invalid choice: 'data_gee_modis_real_time.py' (choose from 'clean', 'compare', 'config', 'create', 'info', 'init', 'install', 'list', 'package', 'remove', 'uninstall', 'rename', 'run', 'search', 'update', 'upgrade', 'notices')\n",
  "history_begin_time" : 1682432621201,
  "history_end_time" : 1682432622997,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "84rEnh6D1TRi",
  "history_input" : "import gdal\nimport subprocess\nfrom datetime import datetime, timedelta\n\n\n# Write first python in Geoweaver\nimport os\nimport urllib.request, urllib.error, urllib.parse\nimport sys\n\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\n\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(dir_path)\n\ntile_list = ['h09v04', 'h10v04', 'h11v04', 'h08v05', 'h09v05', 'h10v05', 'h07v06', 'h08v06', 'h09v06']\n\n\ndef get_latest_date():\n  try:\n    from BeautifulSoup import BeautifulSoup\n  except ImportError:\n      from bs4 import BeautifulSoup\n\n  modis_list_url = \"https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\n\n  print(modis_list_url)\n  if os.path.exists(\"index.html\"):\n    os.remove(\"index.html\")\n  \n  response = subprocess.run(f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -np -e robots=off {modis_list_url}', shell=True,  stderr=subprocess.PIPE)\n  index_file = open('index.html', 'r')\n  webContent = index_file.read()\n  \n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n  print('----------------------')\n  all_rows = parsed_html.body.findAll('td', attrs={'class':'indexcolname'})\n  \n  latest_date = None\n  for row in all_rows:\n    try:\n      new_date = datetime.strptime(row.text[:-1], '%Y.%m.%d')\n      if latest_date is None or latest_date < new_date:\n        latest_date = new_date\n    except:\n      continue\n  \n  print(\"Find the latest date: \", latest_date.strftime(\"%Y.%m.%d\"))\n  second_latest_date = latest_date - timedelta(days=8)\n  return second_latest_date\n  \n  \ndef download_recent_modis():\n  latest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\n  print(latest_date_str)\n  modis_download_dir = \"/home/chetana/modis_download_folder/\"\n  for tile in tile_list:\n    download_cmd = f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P {modis_download_dir} -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/ -A \"*{tile}*.hdf\" --quiet'\n    #print(download_cmd)\n    p = subprocess.run(download_cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    print(\"Downloading tile, \", tile, \" returns \", p.returncode)\n\ndef merge_wrap_tif_into_western_us_tif():\n  latest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\n  # traverse the folder and find the newly download files\n  for filename in os.listdir(f\"n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/\"):\n    f = os.path.join(directory, filename)\n    # checking if it is a file\n    if os.path.isfile(f):\n        print(f)\n    \n#download_recent_modis()\n#merge_wrap_tif_into_western_us_tif()\n\ndef hdf_tif_conversion(resource_path):\n    hdf_dataset = gdal.Open(resource_path)\n    if hdf_dataset is None:\n        raise Exception(\"Could not open HDF dataset\")\n\n    maximum_snow_extent = hdf_dataset.GetSubDatasets()[0][0]\n    modis_snow_500m = hdf_dataset.GetSubDatasets()[1][0]\n\n    driver = gdal.GetDriverByName('GTiff')\n\n    tif_file_name = resource_path.split('/')[-1].split('.hdf')[0]\n    tif_file_extension = '.tif'\n\n    maximum_snow_extent_file_name = tif_file_name + '_max_snow_extent' + tif_file_extension\n    modis_snow_500m_file_name = tif_file_name + '_modis_snow_500m' + tif_file_extension\n\n    maximum_snow_extent_dataset = gdal.Open(maximum_snow_extent)\n    modis_snow_500m_dataset = gdal.Open(modis_snow_500m)\n\n    if maximum_snow_extent_dataset is None:\n        raise Exception(\"Could not open maximum_snow_extent dataset\")\n\n    if modis_snow_500m_dataset is None:\n        raise Exception(\"Could not open modis_snow_500m dataset\")\n\n    driver.CreateCopy(maximum_snow_extent_file_name, maximum_snow_extent_dataset, 0)\n    driver.CreateCopy(modis_snow_500m_file_name, modis_snow_500m_dataset, 0)\n\n    print(\"HDF to TIF conversion completed successfully.\")\n\n    \nhdf_tif_conversion('/home/chetana/modis_download_folder/n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.04.07/MOD10A2.A2023097.h08v06.061.2023107141802.hdf')    \n\ndef merge_multiple_tiff(part_one, part_two, out_file):\n    subprocess.run(f\"tifftools {part_one} {part_two} {out_file}\")",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/84rEnh6D1TRi/data_gee_modis_real_time.py\", line 1, in <module>\n    import gdal\nModuleNotFoundError: No module named 'gdal'\n",
  "history_begin_time" : 1682432545165,
  "history_end_time" : 1682432546260,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "T14gfd3byI7T",
  "history_input" : "import gdal\nimport subprocess\nfrom datetime import datetime, timedelta\n\n\n# Write first python in Geoweaver\nimport os\nimport urllib.request, urllib.error, urllib.parse\nimport sys\n\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\n\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(dir_path)\n\ntile_list = ['h09v04', 'h10v04', 'h11v04', 'h08v05', 'h09v05', 'h10v05', 'h07v06', 'h08v06', 'h09v06']\n\n\ndef get_latest_date():\n  try:\n    from BeautifulSoup import BeautifulSoup\n  except ImportError:\n      from bs4 import BeautifulSoup\n\n  modis_list_url = \"https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\n\n  print(modis_list_url)\n  if os.path.exists(\"index.html\"):\n    os.remove(\"index.html\")\n  \n  response = subprocess.run(f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -np -e robots=off {modis_list_url}', shell=True,  stderr=subprocess.PIPE)\n  index_file = open('index.html', 'r')\n  webContent = index_file.read()\n  \n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n  print('----------------------')\n  all_rows = parsed_html.body.findAll('td', attrs={'class':'indexcolname'})\n  \n  latest_date = None\n  for row in all_rows:\n    try:\n      new_date = datetime.strptime(row.text[:-1], '%Y.%m.%d')\n      if latest_date is None or latest_date < new_date:\n        latest_date = new_date\n    except:\n      continue\n  \n  print(\"Find the latest date: \", latest_date.strftime(\"%Y.%m.%d\"))\n  second_latest_date = latest_date - timedelta(days=8)\n  return second_latest_date\n  \n  \ndef download_recent_modis():\n  latest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\n  print(latest_date_str)\n  modis_download_dir = \"/home/chetana/modis_download_folder/\"\n  for tile in tile_list:\n    download_cmd = f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P {modis_download_dir} -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/ -A \"*{tile}*.hdf\" --quiet'\n    #print(download_cmd)\n    p = subprocess.run(download_cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    print(\"Downloading tile, \", tile, \" returns \", p.returncode)\n\ndef merge_wrap_tif_into_western_us_tif():\n  latest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\n  # traverse the folder and find the newly download files\n  for filename in os.listdir(f\"n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/\"):\n    f = os.path.join(directory, filename)\n    # checking if it is a file\n    if os.path.isfile(f):\n        print(f)\n    \n#download_recent_modis()\n#merge_wrap_tif_into_western_us_tif()\n\ndef hdf_tif_conversion(resource_path):\n    hdf_dataset = gdal.Open(resource_path)\n    if hdf_dataset is None:\n        raise Exception(\"Could not open HDF dataset\")\n\n    maximum_snow_extent = hdf_dataset.GetSubDatasets()[0][0]\n    modis_snow_500m = hdf_dataset.GetSubDatasets()[1][0]\n\n    driver = gdal.GetDriverByName('GTiff')\n\n    tif_file_name = resource_path.split('/')[-1].split('.hdf')[0]\n    tif_file_extension = '.tif'\n\n    maximum_snow_extent_file_name = tif_file_name + '_max_snow_extent' + tif_file_extension\n    modis_snow_500m_file_name = tif_file_name + '_modis_snow_500m' + tif_file_extension\n\n    maximum_snow_extent_dataset = gdal.Open(maximum_snow_extent)\n    modis_snow_500m_dataset = gdal.Open(modis_snow_500m)\n\n    if maximum_snow_extent_dataset is None:\n        raise Exception(\"Could not open maximum_snow_extent dataset\")\n\n    if modis_snow_500m_dataset is None:\n        raise Exception(\"Could not open modis_snow_500m dataset\")\n\n    driver.CreateCopy(maximum_snow_extent_file_name, maximum_snow_extent_dataset, 0)\n    driver.CreateCopy(modis_snow_500m_file_name, modis_snow_500m_dataset, 0)\n\n    print(\"HDF to TIF conversion completed successfully.\")\n\n    \nhdf_tif_conversion('/home/chetana/modis_download_folder/n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.04.07/MOD10A2.A2023097.h08v06.061.2023107141802.hdf')    \n\ndef merge_multiple_tiff(part_one, part_two, out_file):\n    subprocess.run(f\"tifftools {part_one} {part_two} {out_file}\")",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/T14gfd3byI7T/data_gee_modis_real_time.py\", line 1, in <module>\n    import gdal\nModuleNotFoundError: No module named 'gdal'\n",
  "history_begin_time" : 1682432506744,
  "history_end_time" : 1682432507893,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "lTf0GwXCxB4M",
  "history_input" : "import gdal\nimport subprocess\nfrom datetime import datetime, timedelta\n\n\n# Write first python in Geoweaver\nimport os\nimport urllib.request, urllib.error, urllib.parse\nimport sys\n\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\n\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(dir_path)\n\ntile_list = ['h09v04', 'h10v04', 'h11v04', 'h08v05', 'h09v05', 'h10v05', 'h07v06', 'h08v06', 'h09v06']\n\n\ndef get_latest_date():\n  try:\n    from BeautifulSoup import BeautifulSoup\n  except ImportError:\n      from bs4 import BeautifulSoup\n\n  modis_list_url = \"https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\n\n  print(modis_list_url)\n  if os.path.exists(\"index.html\"):\n    os.remove(\"index.html\")\n  \n  response = subprocess.run(f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -np -e robots=off {modis_list_url}', shell=True,  stderr=subprocess.PIPE)\n  index_file = open('index.html', 'r')\n  webContent = index_file.read()\n  \n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n  print('----------------------')\n  all_rows = parsed_html.body.findAll('td', attrs={'class':'indexcolname'})\n  \n  latest_date = None\n  for row in all_rows:\n    try:\n      new_date = datetime.strptime(row.text[:-1], '%Y.%m.%d')\n      if latest_date is None or latest_date < new_date:\n        latest_date = new_date\n    except:\n      continue\n  \n  print(\"Find the latest date: \", latest_date.strftime(\"%Y.%m.%d\"))\n  second_latest_date = latest_date - timedelta(days=8)\n  return second_latest_date\n  \n  \ndef download_recent_modis():\n  latest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\n  print(latest_date_str)\n  modis_download_dir = \"/home/chetana/modis_download_folder/\"\n  for tile in tile_list:\n    download_cmd = f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P {modis_download_dir} -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/ -A \"*{tile}*.hdf\" --quiet'\n    #print(download_cmd)\n    p = subprocess.run(download_cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    print(\"Downloading tile, \", tile, \" returns \", p.returncode)\n\ndef merge_wrap_tif_into_western_us_tif():\n  latest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\n  # traverse the folder and find the newly download files\n  for filename in os.listdir(f\"n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/\"):\n    f = os.path.join(directory, filename)\n    # checking if it is a file\n    if os.path.isfile(f):\n        print(f)\n    \n#download_recent_modis()\n#merge_wrap_tif_into_western_us_tif()\n\ndef hdf_tif_conversion(resource_path):\n    hdf_dataset = gdal.Open(resource_path)\n    if hdf_dataset is None:\n        raise Exception(\"Could not open HDF dataset\")\n\n    maximum_snow_extent = hdf_dataset.GetSubDatasets()[0][0]\n    modis_snow_500m = hdf_dataset.GetSubDatasets()[1][0]\n\n    driver = gdal.GetDriverByName('GTiff')\n\n    tif_file_name = resource_path.split('/')[-1].split('.hdf')[0]\n    tif_file_extension = '.tif'\n\n    maximum_snow_extent_file_name = tif_file_name + '_max_snow_extent' + tif_file_extension\n    modis_snow_500m_file_name = tif_file_name + '_modis_snow_500m' + tif_file_extension\n\n    maximum_snow_extent_dataset = gdal.Open(maximum_snow_extent)\n    modis_snow_500m_dataset = gdal.Open(modis_snow_500m)\n\n    if maximum_snow_extent_dataset is None:\n        raise Exception(\"Could not open maximum_snow_extent dataset\")\n\n    if modis_snow_500m_dataset is None:\n        raise Exception(\"Could not open modis_snow_500m dataset\")\n\n    driver.CreateCopy(maximum_snow_extent_file_name, maximum_snow_extent_dataset, 0)\n    driver.CreateCopy(modis_snow_500m_file_name, modis_snow_500m_dataset, 0)\n\n    print(\"HDF to TIF conversion completed successfully.\")\n\n    \nhdf_tif_conversion('/home/chetana/modis_download_folder/n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.04.07/MOD10A2.A2023097.h08v06.061.2023107141802.hdf')    \n\ndef merge_multiple_tiff(part_one, part_two, out_file):\n    subprocess.run(f\"tifftools {part_one} {part_two} {out_file}\")",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/lTf0GwXCxB4M/data_gee_modis_real_time.py\", line 1, in <module>\n    import gdal\nModuleNotFoundError: No module named 'gdal'\n",
  "history_begin_time" : 1682432460138,
  "history_end_time" : 1682432461226,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "ACzOU7Y80yfy",
  "history_input" : "import gdal\nimport subprocess\nfrom datetime import datetime, timedelta\n\n\n# Write first python in Geoweaver\nimport os\nimport urllib.request, urllib.error, urllib.parse\nimport sys\n\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\n\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(dir_path)\n\ntile_list = ['h09v04', 'h10v04', 'h11v04', 'h08v05', 'h09v05', 'h10v05', 'h07v06', 'h08v06', 'h09v06']\n\n\ndef get_latest_date():\n  try:\n    from BeautifulSoup import BeautifulSoup\n  except ImportError:\n      from bs4 import BeautifulSoup\n\n  modis_list_url = \"https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\n\n  print(modis_list_url)\n  if os.path.exists(\"index.html\"):\n    os.remove(\"index.html\")\n  \n  response = subprocess.run(f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -np -e robots=off {modis_list_url}', shell=True,  stderr=subprocess.PIPE)\n  index_file = open('index.html', 'r')\n  webContent = index_file.read()\n  \n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n  print('----------------------')\n  all_rows = parsed_html.body.findAll('td', attrs={'class':'indexcolname'})\n  \n  latest_date = None\n  for row in all_rows:\n    try:\n      new_date = datetime.strptime(row.text[:-1], '%Y.%m.%d')\n      if latest_date is None or latest_date < new_date:\n        latest_date = new_date\n    except:\n      continue\n  \n  print(\"Find the latest date: \", latest_date.strftime(\"%Y.%m.%d\"))\n  second_latest_date = latest_date - timedelta(days=8)\n  return second_latest_date\n  \n  \ndef download_recent_modis():\n  latest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\n  print(latest_date_str)\n  modis_download_dir = \"/home/chetana/modis_download_folder/\"\n  for tile in tile_list:\n    download_cmd = f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P {modis_download_dir} -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/ -A \"*{tile}*.hdf\" --quiet'\n    #print(download_cmd)\n    p = subprocess.run(download_cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    print(\"Downloading tile, \", tile, \" returns \", p.returncode)\n\ndef merge_wrap_tif_into_western_us_tif():\n  latest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\n  # traverse the folder and find the newly download files\n  for filename in os.listdir(f\"n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/\"):\n    f = os.path.join(directory, filename)\n    # checking if it is a file\n    if os.path.isfile(f):\n        print(f)\n    \n#download_recent_modis()\n#merge_wrap_tif_into_western_us_tif()\n\ndef hdf_tif_conversion(resource_path):\n    hdf_dataset = gdal.Open(resource_path)\n    if hdf_dataset is None:\n        raise Exception(\"Could not open HDF dataset\")\n\n    maximum_snow_extent = hdf_dataset.GetSubDatasets()[0][0]\n    modis_snow_500m = hdf_dataset.GetSubDatasets()[1][0]\n\n    driver = gdal.GetDriverByName('GTiff')\n\n    tif_file_name = resource_path.split('/')[-1].split('.hdf')[0]\n    tif_file_extension = '.tif'\n\n    maximum_snow_extent_file_name = tif_file_name + '_max_snow_extent' + tif_file_extension\n    modis_snow_500m_file_name = tif_file_name + '_modis_snow_500m' + tif_file_extension\n\n    maximum_snow_extent_dataset = gdal.Open(maximum_snow_extent)\n    modis_snow_500m_dataset = gdal.Open(modis_snow_500m)\n\n    if maximum_snow_extent_dataset is None:\n        raise Exception(\"Could not open maximum_snow_extent dataset\")\n\n    if modis_snow_500m_dataset is None:\n        raise Exception(\"Could not open modis_snow_500m dataset\")\n\n    driver.CreateCopy(maximum_snow_extent_file_name, maximum_snow_extent_dataset, 0)\n    driver.CreateCopy(modis_snow_500m_file_name, modis_snow_500m_dataset, 0)\n\n    print(\"HDF to TIF conversion completed successfully.\")\n\n    \nhdf_tif_conversion('/home/chetana/modis_download_folder/n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.04.07/MOD10A2.A2023097.h08v06.061.2023107141802.hdf')    \n\ndef merge_multiple_tiff(part_one, part_two, out_file):\n    subprocess.run(f\"tifftools {part_one} {part_two} {out_file}\")",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/ACzOU7Y80yfy/data_gee_modis_real_time.py\", line 1, in <module>\n    import gdal\nModuleNotFoundError: No module named 'gdal'\n",
  "history_begin_time" : 1682431910177,
  "history_end_time" : 1682431911232,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "rZ33xZXfZB7G",
  "history_input" : "import subprocess\nfrom datetime import datetime, timedelta\n\n\n# Write first python in Geoweaver\nimport os\nimport urllib.request, urllib.error, urllib.parse\nimport sys\n\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\n\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(dir_path)\n\ntile_list = ['h09v04', 'h10v04', 'h11v04', 'h08v05', 'h09v05', 'h10v05', 'h07v06', 'h08v06', 'h09v06']\n\n\ndef get_latest_date():\n  try:\n    from BeautifulSoup import BeautifulSoup\n  except ImportError:\n      from bs4 import BeautifulSoup\n\n  modis_list_url = \"https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\n\n  print(modis_list_url)\n  if os.path.exists(\"index.html\"):\n    os.remove(\"index.html\")\n  \n  response = subprocess.run(f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -np -e robots=off {modis_list_url}', shell=True,  stderr=subprocess.PIPE)\n  index_file = open('index.html', 'r')\n  webContent = index_file.read()\n  \n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n  print('----------------------')\n  all_rows = parsed_html.body.findAll('td', attrs={'class':'indexcolname'})\n  \n  latest_date = None\n  for row in all_rows:\n    try:\n      new_date = datetime.strptime(row.text[:-1], '%Y.%m.%d')\n      if latest_date is None or latest_date < new_date:\n        latest_date = new_date\n    except:\n      continue\n  \n  print(\"Find the latest date: \", latest_date.strftime(\"%Y.%m.%d\"))\n  second_latest_date = latest_date - timedelta(days=8)\n  return second_latest_date\n  \n  \ndef download_recent_modis():\n  latest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\n  print(latest_date_str)\n  modis_download_dir = \"/home/chetana/modis_download_folder/\"\n  for tile in tile_list:\n    download_cmd = f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P {modis_download_dir} -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/ -A \"*{tile}*.hdf\" --quiet'\n    #print(download_cmd)\n    p = subprocess.run(download_cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    print(\"Downloading tile, \", tile, \" returns \", p.returncode)\n\ndef merge_wrap_tif_into_western_us_tif():\n  latest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\n  # traverse the folder and find the newly download files\n  for filename in os.listdir(f\"n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/\"):\n    f = os.path.join(directory, filename)\n    # checking if it is a file\n    if os.path.isfile(f):\n        print(f)\n    \n#download_recent_modis()\n#merge_wrap_tif_into_western_us_tif()\n\ndef hdf_tif_conversion(resource_path):\n    hdf_dataset = gdal.Open(resource_path)\n    if hdf_dataset is None:\n        raise Exception(\"Could not open HDF dataset\")\n\n    maximum_snow_extent = hdf_dataset.GetSubDatasets()[0][0]\n    modis_snow_500m = hdf_dataset.GetSubDatasets()[1][0]\n\n    driver = gdal.GetDriverByName('GTiff')\n\n    tif_file_name = resource_path.split('/')[-1].split('.hdf')[0]\n    tif_file_extension = '.tif'\n\n    maximum_snow_extent_file_name = tif_file_name + '_max_snow_extent' + tif_file_extension\n    modis_snow_500m_file_name = tif_file_name + '_modis_snow_500m' + tif_file_extension\n\n    maximum_snow_extent_dataset = gdal.Open(maximum_snow_extent)\n    modis_snow_500m_dataset = gdal.Open(modis_snow_500m)\n\n    if maximum_snow_extent_dataset is None:\n        raise Exception(\"Could not open maximum_snow_extent dataset\")\n\n    if modis_snow_500m_dataset is None:\n        raise Exception(\"Could not open modis_snow_500m dataset\")\n\n    driver.CreateCopy(maximum_snow_extent_file_name, maximum_snow_extent_dataset, 0)\n    driver.CreateCopy(modis_snow_500m_file_name, modis_snow_500m_dataset, 0)\n\n    print(\"HDF to TIF conversion completed successfully.\")\n\n    \nhdf_tif_conversion('/home/chetana/modis_download_folder/n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.04.07/MOD10A2.A2023097.h08v06.061.2023107141802.hdf')    \n\ndef merge_multiple_tiff(part_one, part_two, out_file):\n    subprocess.run(f\"tifftools {part_one} {part_two} {out_file}\")",
  "history_output" : "/home/chetana/gw-workspace/rZ33xZXfZB7G\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/rZ33xZXfZB7G/data_gee_modis_real_time.py\", line 109, in <module>\n    hdf_tif_conversion('/home/chetana/modis_download_folder/n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.04.07/MOD10A2.A2023097.h08v06.061.2023107141802.hdf')    \n  File \"/home/chetana/gw-workspace/rZ33xZXfZB7G/data_gee_modis_real_time.py\", line 79, in hdf_tif_conversion\n    hdf_dataset = gdal.Open(resource_path)\nNameError: name 'gdal' is not defined\n",
  "history_begin_time" : 1682431889555,
  "history_end_time" : 1682431890666,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "GFnJef806xBn",
  "history_input" : "import subprocess\nfrom datetime import datetime, timedelta\n\n\n# Write first python in Geoweaver\nimport os\nimport urllib.request, urllib.error, urllib.parse\nimport sys\n\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\n\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(dir_path)\n\ntile_list = ['h09v04', 'h10v04', 'h11v04', 'h08v05', 'h09v05', 'h10v05', 'h07v06', 'h08v06', 'h09v06']\n\n\ndef get_latest_date():\n  try:\n    from BeautifulSoup import BeautifulSoup\n  except ImportError:\n      from bs4 import BeautifulSoup\n\n  modis_list_url = \"https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\n\n  print(modis_list_url)\n  if os.path.exists(\"index.html\"):\n    os.remove(\"index.html\")\n  \n  response = subprocess.run(f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -np -e robots=off {modis_list_url}', shell=True,  stderr=subprocess.PIPE)\n  index_file = open('index.html', 'r')\n  webContent = index_file.read()\n  \n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n  print('----------------------')\n  all_rows = parsed_html.body.findAll('td', attrs={'class':'indexcolname'})\n  \n  latest_date = None\n  for row in all_rows:\n    try:\n      new_date = datetime.strptime(row.text[:-1], '%Y.%m.%d')\n      if latest_date is None or latest_date < new_date:\n        latest_date = new_date\n    except:\n      continue\n  \n  print(\"Find the latest date: \", latest_date.strftime(\"%Y.%m.%d\"))\n  second_latest_date = latest_date - timedelta(days=8)\n  return second_latest_date\n  \n  \ndef download_recent_modis():\n  latest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\n  print(latest_date_str)\n  modis_download_dir = \"/home/chetana/modis_download_folder/\"\n  for tile in tile_list:\n    download_cmd = f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P {modis_download_dir} -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/ -A \"*{tile}*.hdf\" --quiet'\n    #print(download_cmd)\n    p = subprocess.run(download_cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    print(\"Downloading tile, \", tile, \" returns \", p.returncode)\n\ndef merge_wrap_tif_into_western_us_tif():\n  latest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\n  # traverse the folder and find the newly download files\n  for filename in os.listdir(f\"n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/\"):\n    f = os.path.join(directory, filename)\n    # checking if it is a file\n    if os.path.isfile(f):\n        print(f)\n    \n#download_recent_modis()\n#merge_wrap_tif_into_western_us_tif()\n\ndef hdf_tif_conversion(resource_path):\n    hdf_dataset = gdal.Open(resource_path)\n    if hdf_dataset is None:\n        raise Exception(\"Could not open HDF dataset\")\n\n    maximum_snow_extent = hdf_dataset.GetSubDatasets()[0][0]\n    modis_snow_500m = hdf_dataset.GetSubDatasets()[1][0]\n\n    driver = gdal.GetDriverByName('GTiff')\n\n    tif_file_name = resource_path.split('/')[-1].split('.hdf')[0]\n    tif_file_extension = '.tif'\n\n    maximum_snow_extent_file_name = tif_file_name + '_max_snow_extent' + tif_file_extension\n    modis_snow_500m_file_name = tif_file_name + '_modis_snow_500m' + tif_file_extension\n\n    maximum_snow_extent_dataset = gdal.Open(maximum_snow_extent)\n    modis_snow_500m_dataset = gdal.Open(modis_snow_500m)\n\n    if maximum_snow_extent_dataset is None:\n        raise Exception(\"Could not open maximum_snow_extent dataset\")\n\n    if modis_snow_500m_dataset is None:\n        raise Exception(\"Could not open modis_snow_500m dataset\")\n\n    driver.CreateCopy(maximum_snow_extent_file_name, maximum_snow_extent_dataset, 0)\n    driver.CreateCopy(modis_snow_500m_file_name, modis_snow_500m_dataset, 0)\n\n    print(\"HDF to TIF conversion completed successfully.\")\n\n    \nhdf_tif_conversion('/home/chetana/modis_download_folder/n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.04.07/MOD10A2.A2023097.h08v06.061.2023107141802.hdf')    \n\ndef merge_multiple_tiff(part_one, part_two, out_file):\n    subprocess.run(f\"tifftools {part_one} {part_two} {out_file}\")",
  "history_output" : "/home/chetana/gw-workspace/GFnJef806xBn\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/GFnJef806xBn/data_gee_modis_real_time.py\", line 109, in <module>\n    hdf_tif_conversion('/home/chetana/modis_download_folder/n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.04.07/MOD10A2.A2023097.h08v06.061.2023107141802.hdf')    \n  File \"/home/chetana/gw-workspace/GFnJef806xBn/data_gee_modis_real_time.py\", line 79, in hdf_tif_conversion\n    hdf_dataset = gdal.Open(resource_path)\nNameError: name 'gdal' is not defined\n",
  "history_begin_time" : 1682431848323,
  "history_end_time" : 1682431849478,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "Ax0xVPfkfW0k",
  "history_input" : "import subprocess\nfrom datetime import datetime, timedelta\n\n\n# Write first python in Geoweaver\nimport os\nimport urllib.request, urllib.error, urllib.parse\nimport sys\n\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\n\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(dir_path)\n\ntile_list = ['h09v04', 'h10v04', 'h11v04', 'h08v05', 'h09v05', 'h10v05', 'h07v06', 'h08v06', 'h09v06']\n\n\ndef get_latest_date():\n  try:\n    from BeautifulSoup import BeautifulSoup\n  except ImportError:\n      from bs4 import BeautifulSoup\n\n  modis_list_url = \"https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\n\n  print(modis_list_url)\n  if os.path.exists(\"index.html\"):\n    os.remove(\"index.html\")\n  \n  response = subprocess.run(f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -np -e robots=off {modis_list_url}', shell=True,  stderr=subprocess.PIPE)\n  index_file = open('index.html', 'r')\n  webContent = index_file.read()\n  \n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n  print('----------------------')\n  all_rows = parsed_html.body.findAll('td', attrs={'class':'indexcolname'})\n  \n  latest_date = None\n  for row in all_rows:\n    try:\n      new_date = datetime.strptime(row.text[:-1], '%Y.%m.%d')\n      if latest_date is None or latest_date < new_date:\n        latest_date = new_date\n    except:\n      continue\n  \n  print(\"Find the latest date: \", latest_date.strftime(\"%Y.%m.%d\"))\n  second_latest_date = latest_date - timedelta(days=8)\n  return second_latest_date\n  \n  \ndef download_recent_modis():\n  latest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\n  print(latest_date_str)\n  modis_download_dir = \"/home/chetana/modis_download_folder/\"\n  for tile in tile_list:\n    download_cmd = f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P {modis_download_dir} -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/ -A \"*{tile}*.hdf\" --quiet'\n    #print(download_cmd)\n    p = subprocess.run(download_cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    print(\"Downloading tile, \", tile, \" returns \", p.returncode)\n\ndef merge_wrap_tif_into_western_us_tif():\n  latest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\n  # traverse the folder and find the newly download files\n  for filename in os.listdir(f\"n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/\"):\n    f = os.path.join(directory, filename)\n    # checking if it is a file\n    if os.path.isfile(f):\n        print(f)\n    \n#download_recent_modis()\nmerge_wrap_tif_into_western_us_tif()",
  "history_output" : "/home/chetana/gw-workspace/Ax0xVPfkfW0k\nhttps://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\n/home/chetana/gw-workspace/Ax0xVPfkfW0k/data_gee_modis_real_time.py:38: GuessedAtParserWarning: No parser was explicitly specified, so I'm using the best available HTML parser for this system (\"lxml\"). This usually isn't a problem, but if you run this code on another system, or in a different virtual environment, it may use a different parser and behave differently.\n\nThe code that caused this warning is on line 38 of the file /home/chetana/gw-workspace/Ax0xVPfkfW0k/data_gee_modis_real_time.py. To get rid of this warning, pass the additional argument 'features=\"lxml\"' to the BeautifulSoup constructor.\n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n----------------------\nFind the latest date:  2023.04.07\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/Ax0xVPfkfW0k/data_gee_modis_real_time.py\", line 76, in <module>\n    merge_wrap_tif_into_western_us_tif()\n  File \"/home/chetana/gw-workspace/Ax0xVPfkfW0k/data_gee_modis_real_time.py\", line 69, in merge_wrap_tif_into_western_us_tif\n    for filename in os.listdir(f\"n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/\"):\nFileNotFoundError: [Errno 2] No such file or directory: 'n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.03.30/'\n",
  "history_begin_time" : 1682281643808,
  "history_end_time" : 1682281646340,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "bWbhqTlLX2ho",
  "history_input" : "import subprocess\nfrom datetime import datetime, timedelta\n\n\n# Write first python in Geoweaver\nimport os\nimport urllib.request, urllib.error, urllib.parse\nimport sys\n\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\n\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(dir_path)\n\ntile_list = ['h09v04', 'h10v04', 'h11v04', 'h08v05', 'h09v05', 'h10v05', 'h07v06', 'h08v06', 'h09v06']\n\n\ndef get_latest_date():\n  try:\n    from BeautifulSoup import BeautifulSoup\n  except ImportError:\n      from bs4 import BeautifulSoup\n\n  modis_list_url = \"https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\n\n  print(modis_list_url)\n  if os.path.exists(\"index.html\"):\n    os.remove(\"index.html\")\n  \n  response = subprocess.run(f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -np -e robots=off {modis_list_url}', shell=True,  stderr=subprocess.PIPE)\n  index_file = open('index.html', 'r')\n  webContent = index_file.read()\n  \n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n  print('----------------------')\n  all_rows = parsed_html.body.findAll('td', attrs={'class':'indexcolname'})\n  \n  latest_date = None\n  for row in all_rows:\n    try:\n      new_date = datetime.strptime(row.text[:-1], '%Y.%m.%d')\n      if latest_date is None or latest_date < new_date:\n        latest_date = new_date\n    except:\n      continue\n  \n  print(\"Find the latest date: \", latest_date.strftime(\"%Y.%m.%d\"))\n  second_latest_date = latest_date - timedelta(days=8)\n  return second_latest_date\n  \n  \ndef download_recent_modis():\n  latest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\n  print(latest_date_str)\n  modis_download_dir = \"/home/chetana/modis_download_folder/\"\n  for tile in tile_list:\n    download_cmd = f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P {modis_download_dir} -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/ -A \"*{tile}*.hdf\" --quiet'\n    #print(download_cmd)\n    p = subprocess.run(download_cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    print(\"Downloading tile, \", tile, \" returns \", p.returncode)\n\n    \ndownload_recent_modis()",
  "history_output" : "/home/chetana/gw-workspace/bWbhqTlLX2ho\nhttps://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\n/home/chetana/gw-workspace/bWbhqTlLX2ho/data_gee_modis_real_time.py:38: GuessedAtParserWarning: No parser was explicitly specified, so I'm using the best available HTML parser for this system (\"lxml\"). This usually isn't a problem, but if you run this code on another system, or in a different virtual environment, it may use a different parser and behave differently.\n\nThe code that caused this warning is on line 38 of the file /home/chetana/gw-workspace/bWbhqTlLX2ho/data_gee_modis_real_time.py. To get rid of this warning, pass the additional argument 'features=\"lxml\"' to the BeautifulSoup constructor.\n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n----------------------\nFind the latest date:  2023.04.07\n2023.03.30\nDownloading tile,  h09v04  returns  0\nDownloading tile,  h10v04  returns  0\nDownloading tile,  h11v04  returns  0\nDownloading tile,  h08v05  returns  0\nDownloading tile,  h09v05  returns  0\nDownloading tile,  h10v05  returns  0\nDownloading tile,  h07v06  returns  0\nDownloading tile,  h08v06  returns  0\nDownloading tile,  h09v06  returns  0\n",
  "history_begin_time" : 1682280583531,
  "history_end_time" : 1682280601729,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "Il2hYZObF7V8",
  "history_input" : "import subprocess\nfrom datetime import datetime, timedelta\n\n\n# Write first python in Geoweaver\nimport os\nimport urllib.request, urllib.error, urllib.parse\nimport sys\n\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\n\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(dir_path)\n\ntile_list = ['h09v04', 'h10v04', 'h11v04', 'h08v05', 'h09v05', 'h10v05', 'h07v06', 'h08v06', 'h09v06']\n\n\ndef get_latest_date():\n  try:\n    from BeautifulSoup import BeautifulSoup\n  except ImportError:\n      from bs4 import BeautifulSoup\n\n  modis_list_url = \"https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\n\n  print(modis_list_url)\n\n  response = subprocess.run(f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -np -e robots=off {modis_list_url}', shell=True,  stderr=subprocess.PIPE)\n  index_file = open('index.html', 'r')\n  webContent = index_file.read()\n\n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n  print('----------------------')\n  all_rows = parsed_html.body.findAll('td', attrs={'class':'indexcolname'})\n  \n  latest_date = None\n  for row in all_rows:\n    try:\n      new_date = datetime.strptime(row.text[:-1], '%Y.%m.%d')\n      if latest_date is None or latest_date < new_date:\n        latest_date = new_date\n    except:\n      continue\n  \n  print(\"Find the latest date: \", latest_date.strftime(\"%Y.%m.%d\"))\n  second_latest_date = latest_date - timedelta(days=8)\n  return second_latest_date\n      \n\n#get_latest_date()\n\ndef download_recent_modis():\n  latest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\n  print(latest_date_str)\n  modis_download_dir = \"/home/chetana/modis_download_folder/\"\n  for tile in tile_list:\n    download_cmd = f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P {modis_download_dir} -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/ -A \"*{tile}*.hdf\" --quiet'\n    print(download_cmd)\n    #p = subprocess.run(download_cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    #print(p.returncode)\n\n    \n    \ndownload_recent_modis()",
  "history_output" : "/home/chetana/gw-workspace/Il2hYZObF7V8\nhttps://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\n/home/chetana/gw-workspace/Il2hYZObF7V8/data_gee_modis_real_time.py:36: GuessedAtParserWarning: No parser was explicitly specified, so I'm using the best available HTML parser for this system (\"lxml\"). This usually isn't a problem, but if you run this code on another system, or in a different virtual environment, it may use a different parser and behave differently.\n\nThe code that caused this warning is on line 36 of the file /home/chetana/gw-workspace/Il2hYZObF7V8/data_gee_modis_real_time.py. To get rid of this warning, pass the additional argument 'features=\"lxml\"' to the BeautifulSoup constructor.\n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n----------------------\nFind the latest date:  2023.04.07\n2023.03.30\nwget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P /home/chetana/modis_download_folder/ -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.03.30/ -A \"*h09v04*.hdf\" --quiet\nwget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P /home/chetana/modis_download_folder/ -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.03.30/ -A \"*h10v04*.hdf\" --quiet\nwget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P /home/chetana/modis_download_folder/ -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.03.30/ -A \"*h11v04*.hdf\" --quiet\nwget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P /home/chetana/modis_download_folder/ -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.03.30/ -A \"*h08v05*.hdf\" --quiet\nwget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P /home/chetana/modis_download_folder/ -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.03.30/ -A \"*h09v05*.hdf\" --quiet\nwget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P /home/chetana/modis_download_folder/ -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.03.30/ -A \"*h10v05*.hdf\" --quiet\nwget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P /home/chetana/modis_download_folder/ -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.03.30/ -A \"*h07v06*.hdf\" --quiet\nwget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P /home/chetana/modis_download_folder/ -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.03.30/ -A \"*h08v06*.hdf\" --quiet\nwget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P /home/chetana/modis_download_folder/ -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.03.30/ -A \"*h09v06*.hdf\" --quiet\n",
  "history_begin_time" : 1682280475742,
  "history_end_time" : 1682280478012,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "l20BSaS6K29A",
  "history_input" : "import subprocess\nfrom datetime import datetime\n\n\n# Write first python in Geoweaver\nimport os\nimport urllib.request, urllib.error, urllib.parse\nimport sys\n\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\n\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(dir_path)\n\ntile_list = ['h09v04', 'h10v04', 'h11v04', 'h08v05', 'h09v05', 'h10v05', 'h07v06', 'h08v06', 'h09v06']\n\n\ndef get_latest_date():\n  try:\n    from BeautifulSoup import BeautifulSoup\n  except ImportError:\n      from bs4 import BeautifulSoup\n\n  modis_list_url = \"https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\n\n  print(modis_list_url)\n\n  response = subprocess.run(f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -np -e robots=off {modis_list_url}', shell=True,  stderr=subprocess.PIPE)\n  index_file = open('index.html', 'r')\n  webContent = index_file.read()\n\n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n  print('----------------------')\n  all_rows = parsed_html.body.findAll('td', attrs={'class':'indexcolname'})\n  \n  latest_date = None\n  for row in all_rows:\n    try:\n      new_date = datetime.strptime(row.text[:-1], '%Y.%m.%d')\n      if latest_date is None or latest_date < new_date:\n        latest_date = new_date\n    except:\n      continue\n  \n  print(\"Find the latest date: \", latest_date.strftime(\"%Y.%m.%d\"))\n  second_latest_date = latest_date - timedelta(days=8)\n  return second_latest_date\n      \n\n#get_latest_date()\n\ndef download_recent_modis():\n  latest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\n  print(latest_date_str)\n  modis_download_dir = \"/home/chetana/modis_download_folder/\"\n  for tile in tile_list:\n    download_cmd = f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P {modis_download_dir} -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/ -A \"*{tile}*.hdf\" --quiet'\n    print(download_cmd)\n    #p = subprocess.run(download_cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    print(p.returncode)\n\n    \n    \ndownload_recent_modis()",
  "history_output" : "/home/chetana/gw-workspace/l20BSaS6K29A\nhttps://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\n/home/chetana/gw-workspace/l20BSaS6K29A/data_gee_modis_real_time.py:36: GuessedAtParserWarning: No parser was explicitly specified, so I'm using the best available HTML parser for this system (\"lxml\"). This usually isn't a problem, but if you run this code on another system, or in a different virtual environment, it may use a different parser and behave differently.\n\nThe code that caused this warning is on line 36 of the file /home/chetana/gw-workspace/l20BSaS6K29A/data_gee_modis_real_time.py. To get rid of this warning, pass the additional argument 'features=\"lxml\"' to the BeautifulSoup constructor.\n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n----------------------\nFind the latest date:  2023.04.07\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/l20BSaS6K29A/data_gee_modis_real_time.py\", line 68, in <module>\n    download_recent_modis()\n  File \"/home/chetana/gw-workspace/l20BSaS6K29A/data_gee_modis_real_time.py\", line 57, in download_recent_modis\n    latest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\n  File \"/home/chetana/gw-workspace/l20BSaS6K29A/data_gee_modis_real_time.py\", line 50, in get_latest_date\n    second_latest_date = latest_date - timedelta(days=8)\nNameError: name 'timedelta' is not defined\n",
  "history_begin_time" : 1682280452247,
  "history_end_time" : 1682280454698,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "X0pBpDWihLnm",
  "history_input" : "import subprocess\nfrom datetime import datetime\n\n\n# Write first python in Geoweaver\nimport os\nimport urllib.request, urllib.error, urllib.parse\nimport sys\n\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\n\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(dir_path)\n\ntile_list = ['h09v04', 'h10v04', 'h11v04', 'h08v05', 'h09v05', 'h10v05', 'h07v06', 'h08v06', 'h09v06']\n\n\ndef get_latest_date():\n  try:\n    from BeautifulSoup import BeautifulSoup\n  except ImportError:\n      from bs4 import BeautifulSoup\n\n  modis_list_url = \"https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\n\n  print(modis_list_url)\n\n  response = subprocess.run(f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -np -e robots=off {modis_list_url}', shell=True,  stderr=subprocess.PIPE)\n  index_file = open('index.html', 'r')\n  webContent = index_file.read()\n\n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n  print('----------------------')\n  all_rows = parsed_html.body.findAll('td', attrs={'class':'indexcolname'})\n  \n  latest_date = None\n  for row in all_rows:\n    try:\n      new_date = datetime.strptime(row.text[:-1], '%Y.%m.%d')\n      if latest_date is None or latest_date < new_date:\n        latest_date = new_date\n    except:\n      continue\n  \n  print(\"Find the latest date: \", latest_date.strftime(\"%Y.%m.%d\"))\n  second_latest_date = latest_date - timedelta(days=8)\n  return second_latest_date\n      \n\n#get_latest_date()\n\ndef download_recent_modis():\n  latest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\n  print(latest_date_str)\n  modis_download_dir = \"/home/chetana/modis_download_folder/\"\n  for tile in tile_list:\n    download_cmd = f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P {modis_download_dir} -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/ -A \"*{tile}*.hdf\" --quiet'\n    print(download_cmd)\n    #p = subprocess.run(download_cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    print(p.returncode)\n\n",
  "history_output" : "/home/chetana/gw-workspace/X0pBpDWihLnm\n",
  "history_begin_time" : 1682280429806,
  "history_end_time" : 1682280430972,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "XexcQlhw4gqd",
  "history_input" : "import subprocess\nfrom datetime import datetime\n\n\n# Write first python in Geoweaver\nimport os\nimport urllib.request, urllib.error, urllib.parse\nimport sys\n\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\n\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(dir_path)\n\ntile_list = ['h09v04', 'h10v04', 'h11v04', 'h08v05', 'h09v05', 'h10v05', 'h07v06', 'h08v06', 'h09v06']\n\n\ndef get_latest_date():\n  try:\n    from BeautifulSoup import BeautifulSoup\n  except ImportError:\n      from bs4 import BeautifulSoup\n\n  modis_list_url = \"https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\n\n  print(modis_list_url)\n\n  response = subprocess.run(f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -np -e robots=off {modis_list_url}', shell=True,  stderr=subprocess.PIPE)\n  index_file = open('index.html', 'r')\n  webContent = index_file.read()\n\n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n  print('----------------------')\n  all_rows = parsed_html.body.findAll('td', attrs={'class':'indexcolname'})\n  \n  latest_date = None\n  for row in all_rows:\n    try:\n      new_date = datetime.strptime(row.text[:-1], '%Y.%m.%d')\n      if latest_date is None or latest_date < new_date:\n        latest_date = new_date\n    except:\n      continue\n  \n  print(\"Find the latest date: \", latest_date.strftime(\"%Y.%m.%d\"))\n  return latest_date\n      \n\n#get_latest_date()\nlatest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\nlatest_date_str = \"2023.03.30\"\nmodis_download_dir = \"/home/chetana/modis_download_folder/\"\nfor tile in tile_list:\n  download_cmd = f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P {modis_download_dir} -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/ -A \"*{tile}*.hdf\" --quiet'\n  print(download_cmd)\n  p = subprocess.run(download_cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n  print(p.returncode)\n\n",
  "history_output" : "/home/chetana/gw-workspace/XexcQlhw4gqd\nhttps://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\n/home/chetana/gw-workspace/XexcQlhw4gqd/data_gee_modis_real_time.py:36: GuessedAtParserWarning: No parser was explicitly specified, so I'm using the best available HTML parser for this system (\"lxml\"). This usually isn't a problem, but if you run this code on another system, or in a different virtual environment, it may use a different parser and behave differently.\n\nThe code that caused this warning is on line 36 of the file /home/chetana/gw-workspace/XexcQlhw4gqd/data_gee_modis_real_time.py. To get rid of this warning, pass the additional argument 'features=\"lxml\"' to the BeautifulSoup constructor.\n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n----------------------\nFind the latest date:  2023.04.07\nwget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P /home/chetana/modis_download_folder/ -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.03.30/ -A \"*h09v04*.hdf\" --quiet\n0\nwget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P /home/chetana/modis_download_folder/ -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.03.30/ -A \"*h10v04*.hdf\" --quiet\n0\nwget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P /home/chetana/modis_download_folder/ -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.03.30/ -A \"*h11v04*.hdf\" --quiet\n0\nwget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P /home/chetana/modis_download_folder/ -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.03.30/ -A \"*h08v05*.hdf\" --quiet\n0\nwget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P /home/chetana/modis_download_folder/ -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.03.30/ -A \"*h09v05*.hdf\" --quiet\n0\nwget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P /home/chetana/modis_download_folder/ -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.03.30/ -A \"*h10v05*.hdf\" --quiet\n0\nwget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P /home/chetana/modis_download_folder/ -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.03.30/ -A \"*h07v06*.hdf\" --quiet\n0\nwget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P /home/chetana/modis_download_folder/ -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.03.30/ -A \"*h08v06*.hdf\" --quiet\n0\nwget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P /home/chetana/modis_download_folder/ -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.03.30/ -A \"*h09v06*.hdf\" --quiet\n0\n",
  "history_begin_time" : 1682280273139,
  "history_end_time" : 1682280291432,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "b3BLgrLO7JXs",
  "history_input" : "import subprocess\nfrom datetime import datetime\n\n\n# Write first python in Geoweaver\nimport os\nimport urllib.request, urllib.error, urllib.parse\nimport sys\n\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\n\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(dir_path)\n\ntile_list = ['h09v04', 'h10v04', 'h11v04', 'h08v05', 'h09v05', 'h10v05', 'h07v06', 'h08v06', 'h09v06']\n\n\ndef get_latest_date():\n  try:\n    from BeautifulSoup import BeautifulSoup\n  except ImportError:\n      from bs4 import BeautifulSoup\n\n  modis_list_url = \"https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\n\n  print(modis_list_url)\n\n  response = subprocess.run(f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -np -e robots=off {modis_list_url}', shell=True,  stderr=subprocess.PIPE)\n  index_file = open('index.html', 'r')\n  webContent = index_file.read()\n\n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n  print('----------------------')\n  all_rows = parsed_html.body.findAll('td', attrs={'class':'indexcolname'})\n  \n  latest_date = None\n  for row in all_rows:\n    try:\n      new_date = datetime.strptime(row.text[:-1], '%Y.%m.%d')\n      if latest_date is None or latest_date < new_date:\n        latest_date = new_date\n    except:\n      continue\n  \n  print(\"Find the latest date: \", latest_date.strftime(\"%Y.%m.%d\"))\n  return latest_date\n      \n\n#get_latest_date()\nlatest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\nmodis_download_dir = \"/home/chetana/modis_download_folder/\"\nfor tile in tile_list:\n  download_cmd = f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P {modis_download_dir} -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/ -A \"*{tile}*.hdf\" --quiet'\n  print(download_cmd)\n  p = subprocess.run(download_cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n  print(p.returncode)\n\n",
  "history_output" : "/home/chetana/gw-workspace/b3BLgrLO7JXs\nhttps://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\n/home/chetana/gw-workspace/b3BLgrLO7JXs/data_gee_modis_real_time.py:36: GuessedAtParserWarning: No parser was explicitly specified, so I'm using the best available HTML parser for this system (\"lxml\"). This usually isn't a problem, but if you run this code on another system, or in a different virtual environment, it may use a different parser and behave differently.\n\nThe code that caused this warning is on line 36 of the file /home/chetana/gw-workspace/b3BLgrLO7JXs/data_gee_modis_real_time.py. To get rid of this warning, pass the additional argument 'features=\"lxml\"' to the BeautifulSoup constructor.\n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n----------------------\nFind the latest date:  2023.04.07\nwget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P /home/chetana/modis_download_folder/ -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.04.07/ -A \"*h09v04*.hdf\" --quiet\n0\nwget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P /home/chetana/modis_download_folder/ -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.04.07/ -A \"*h10v04*.hdf\" --quiet\n0\nwget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P /home/chetana/modis_download_folder/ -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.04.07/ -A \"*h11v04*.hdf\" --quiet\n0\nwget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P /home/chetana/modis_download_folder/ -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.04.07/ -A \"*h08v05*.hdf\" --quiet\n0\nwget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P /home/chetana/modis_download_folder/ -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.04.07/ -A \"*h09v05*.hdf\" --quiet\n0\nwget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P /home/chetana/modis_download_folder/ -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.04.07/ -A \"*h10v05*.hdf\" --quiet\n0\nwget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P /home/chetana/modis_download_folder/ -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.04.07/ -A \"*h07v06*.hdf\" --quiet\n0\nwget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P /home/chetana/modis_download_folder/ -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.04.07/ -A \"*h08v06*.hdf\" --quiet\n0\nwget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P /home/chetana/modis_download_folder/ -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.04.07/ -A \"*h09v06*.hdf\" --quiet\n0\n",
  "history_begin_time" : 1682280160063,
  "history_end_time" : 1682280171271,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "TinyydhiSe8R",
  "history_input" : "import subprocess\nfrom datetime import datetime\n\n\n# Write first python in Geoweaver\nimport os\nimport urllib.request, urllib.error, urllib.parse\nimport sys\n\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\n\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(dir_path)\n\ntile_list = ['h09v04', 'h10v04', 'h11v04', 'h08v05', 'h09v05', 'h10v05', 'h07v06', 'h08v06', 'h09v06']\n\n\ndef get_latest_date():\n  try:\n    from BeautifulSoup import BeautifulSoup\n  except ImportError:\n      from bs4 import BeautifulSoup\n\n  modis_list_url = \"https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\n\n  print(modis_list_url)\n\n  response = subprocess.run(f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -np -e robots=off {modis_list_url}', shell=True,  stderr=subprocess.PIPE)\n  index_file = open('index.html', 'r')\n  webContent = index_file.read()\n\n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n  print('----------------------')\n  all_rows = parsed_html.body.findAll('td', attrs={'class':'indexcolname'})\n  \n  latest_date = None\n  for row in all_rows:\n    try:\n      new_date = datetime.strptime(row.text[:-1], '%Y.%m.%d')\n      if latest_date is None or latest_date < new_date:\n        latest_date = new_date\n    except:\n      continue\n  \n  print(\"Find the latest date: \", latest_date.strftime(\"%Y.%m.%d\"))\n  return latest_date\n      \n\n#get_latest_date()\nlatest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\nmodis_download_dir = \"/home/chetana/modis_download_folder/\"\nfor tile in tile_list:\n  download_cmd = f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P {modis_download_dir} -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/ -A \"*{tile}*.hdf\" --quiet'\n  print(download_cmd)\n  p = subprocess.run(download_cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n  print(p.returncode)\n\n",
  "history_output" : "/home/chetana/gw-workspace/TinyydhiSe8R\nhttps://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\n/home/chetana/gw-workspace/TinyydhiSe8R/data_gee_modis_real_time.py:36: GuessedAtParserWarning: No parser was explicitly specified, so I'm using the best available HTML parser for this system (\"lxml\"). This usually isn't a problem, but if you run this code on another system, or in a different virtual environment, it may use a different parser and behave differently.\n\nThe code that caused this warning is on line 36 of the file /home/chetana/gw-workspace/TinyydhiSe8R/data_gee_modis_real_time.py. To get rid of this warning, pass the additional argument 'features=\"lxml\"' to the BeautifulSoup constructor.\n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n----------------------\nFind the latest date:  2023.04.07\nwget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P /home/chetana/modis_download_folder/ -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.04.07/ -A \"*h09v04*.hdf\" --quiet\n0\nwget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P /home/chetana/modis_download_folder/ -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.04.07/ -A \"*h10v04*.hdf\" --quiet\n0\nwget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P /home/chetana/modis_download_folder/ -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.04.07/ -A \"*h11v04*.hdf\" --quiet\n0\nwget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P /home/chetana/modis_download_folder/ -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.04.07/ -A \"*h08v05*.hdf\" --quiet\n0\nwget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P /home/chetana/modis_download_folder/ -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.04.07/ -A \"*h09v05*.hdf\" --quiet\n0\nwget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P /home/chetana/modis_download_folder/ -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.04.07/ -A \"*h10v05*.hdf\" --quiet\n0\nwget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P /home/chetana/modis_download_folder/ -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.04.07/ -A \"*h07v06*.hdf\" --quiet\n0\nwget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P /home/chetana/modis_download_folder/ -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.04.07/ -A \"*h08v06*.hdf\" --quiet\n0\nwget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -P /home/chetana/modis_download_folder/ -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.04.07/ -A \"*h09v06*.hdf\" --quiet\n0\n",
  "history_begin_time" : 1682279588691,
  "history_end_time" : 1682279599884,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "AYuw6q5eGCZi",
  "history_input" : "import subprocess\nfrom datetime import datetime\n\n\n# Write first python in Geoweaver\nimport os\nimport urllib.request, urllib.error, urllib.parse\nimport sys\n\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\n\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(dir_path)\n\ntile_list = ['h08v04', 'h09v04', 'h10v04', 'h11v04', 'h08v05', 'h09v05', 'h10v05', 'h07v06', 'h08v06', 'h09v06']\n\n\ndef get_latest_date():\n  try:\n    from BeautifulSoup import BeautifulSoup\n  except ImportError:\n      from bs4 import BeautifulSoup\n\n  modis_list_url = \"https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\n\n  print(modis_list_url)\n\n  response = subprocess.run(f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -np -e robots=off {modis_list_url}', shell=True,  stderr=subprocess.PIPE)\n  index_file = open('index.html', 'r')\n  webContent = index_file.read()\n\n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n  print('----------------------')\n  all_rows = parsed_html.body.findAll('td', attrs={'class':'indexcolname'})\n  \n  latest_date = None\n  for row in all_rows:\n    try:\n      new_date = datetime.strptime(row.text[:-1], '%Y.%m.%d')\n      if latest_date is None or latest_date < new_date:\n        latest_date = new_date\n    except:\n      continue\n  \n  print(\"Find the latest date: \", latest_date.strftime(\"%Y.%m.%d\"))\n  return latest_date\n      \n\n#get_latest_date()\nlatest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\nfor tile in tile_list:\n  download_cmd = f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/*{tile}*.hdf --quiet'\n  print(download_cmd)\n  p = subprocess.run(download_cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n  print(p.stdout)\n  print(p.stderr)\n  break\n\n",
  "history_output" : "/home/chetana/gw-workspace/AYuw6q5eGCZi\nhttps://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\n/home/chetana/gw-workspace/AYuw6q5eGCZi/data_gee_modis_real_time.py:36: GuessedAtParserWarning: No parser was explicitly specified, so I'm using the best available HTML parser for this system (\"lxml\"). This usually isn't a problem, but if you run this code on another system, or in a different virtual environment, it may use a different parser and behave differently.\n\nThe code that caused this warning is on line 36 of the file /home/chetana/gw-workspace/AYuw6q5eGCZi/data_gee_modis_real_time.py. To get rid of this warning, pass the additional argument 'features=\"lxml\"' to the BeautifulSoup constructor.\n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n----------------------\nFind the latest date:  2023.04.07\nwget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.04.07/*h08v04*.hdf --quiet\nb''\nb''\n",
  "history_begin_time" : 1682279018586,
  "history_end_time" : 1682279020969,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "QhYCe8KtkRAc",
  "history_input" : "import subprocess\nfrom datetime import datetime\n\n\n# Write first python in Geoweaver\nimport os\nimport urllib.request, urllib.error, urllib.parse\nimport sys\n\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\n\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(dir_path)\n\ntile_list = ['h08v04', 'h09v04', 'h10v04', 'h11v04', 'h08v05', 'h09v05', 'h10v05', 'h07v06', 'h08v06', 'h09v06']\n\n\ndef get_latest_date():\n  try:\n    from BeautifulSoup import BeautifulSoup\n  except ImportError:\n      from bs4 import BeautifulSoup\n\n  modis_list_url = \"https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\n\n  print(modis_list_url)\n\n  response = subprocess.run(f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -np -e robots=off {modis_list_url}', shell=True,  stderr=subprocess.PIPE)\n  index_file = open('index.html', 'r')\n  webContent = index_file.read()\n\n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n  print('----------------------')\n  all_rows = parsed_html.body.findAll('td', attrs={'class':'indexcolname'})\n  \n  latest_date = None\n  for row in all_rows:\n    try:\n      new_date = datetime.strptime(row.text[:-1], '%Y.%m.%d')\n      if latest_date is None or latest_date < new_date:\n        latest_date = new_date\n    except:\n      continue\n  \n  print(\"Find the latest date: \", latest_date.strftime(\"%Y.%m.%d\"))\n  return latest_date\n      \n\n#get_latest_date()\nlatest_date_str = get_latest_date().strftime(\"%Y.%m.%d\")\nfor tile in tile_list:\n  download_cmd = f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/*{tile}*.hdf --quiet'\n  print(download_cmd)\n  p = subprocess.run(download_cmd, shell=True,  stderr=subprocess.PIPE)\n  break\n\n",
  "history_output" : "/home/chetana/gw-workspace/QhYCe8KtkRAc\nhttps://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\n/home/chetana/gw-workspace/QhYCe8KtkRAc/data_gee_modis_real_time.py:36: GuessedAtParserWarning: No parser was explicitly specified, so I'm using the best available HTML parser for this system (\"lxml\"). This usually isn't a problem, but if you run this code on another system, or in a different virtual environment, it may use a different parser and behave differently.\n\nThe code that caused this warning is on line 36 of the file /home/chetana/gw-workspace/QhYCe8KtkRAc/data_gee_modis_real_time.py. To get rid of this warning, pass the additional argument 'features=\"lxml\"' to the BeautifulSoup constructor.\n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n----------------------\nFind the latest date:  2023.04.07\nwget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/2023.04.07/*h08v04*.hdf --quiet\n",
  "history_begin_time" : 1682278977565,
  "history_end_time" : 1682278980255,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "36lkVSedHVKQ",
  "history_input" : "import subprocess\nfrom datetime import datetime\n\n\n# Write first python in Geoweaver\nimport os\nimport urllib.request, urllib.error, urllib.parse\nimport sys\n\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\n\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(dir_path)\n\ntile_list = ['h08v04', 'h09v04', 'h10v04', 'h11v04', 'h08v05', 'h09v05', 'h10v05', 'h07v06', 'h08v06', 'h09v06']\n\n\ndef get_latest_date():\n  try:\n    from BeautifulSoup import BeautifulSoup\n  except ImportError:\n      from bs4 import BeautifulSoup\n\n  modis_list_url = \"https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\n\n  print(modis_list_url)\n\n  response = subprocess.run(f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -np -e robots=off {modis_list_url}', shell=True,  stderr=subprocess.PIPE)\n  index_file = open('index.html', 'r')\n  webContent = index_file.read()\n\n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n  print('----------------------')\n  all_rows = parsed_html.body.findAll('td', attrs={'class':'indexcolname'})\n  \n  latest_date = None\n  for row in all_rows:\n    try:\n      new_date = datetime.strptime(row.text[:-1], '%Y.%m.%d')\n      if latest_date is None or latest_date < new_date:\n        latest_date = new_date\n    except:\n      continue\n  \n  print(\"Find the latest date: \", latest_date.strftime(\"%Y.%m.%d\"))\n  return latest_date\n      \n\n#get_latest_date()\nlatest_date_str = latest_date.strftime(\"%Y.%m.%d\")\nfor tile in tile_list:\n  download_cmd = f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -np -e robots=off https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/{latest_date_str}/*{tile}*.hdf --quiet'\n  print(download_cmd)\n  p = subprocess.run(download_cmd, shell=True,  stderr=subprocess.PIPE)\n  break\n\n",
  "history_output" : "/home/chetana/gw-workspace/36lkVSedHVKQ\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/36lkVSedHVKQ/data_gee_modis_real_time.py\", line 54, in <module>\n    latest_date_str = latest_date.strftime(\"%Y.%m.%d\")\nNameError: name 'latest_date' is not defined\n",
  "history_begin_time" : 1682278963830,
  "history_end_time" : 1682278964943,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "1Nd1eb6UyC5u",
  "history_input" : "import subprocess\nfrom datetime import datetime\n\n\n# Write first python in Geoweaver\nimport os\nimport urllib.request, urllib.error, urllib.parse\nimport sys\n\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\n\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(dir_path)\n\ntile_list = ['h08v04', 'h09v04', 'h10v04', 'h11v04', 'h08v05', 'h09v05', 'h10v05', 'h07v06', 'h08v06', 'h09v06']\n\n\ndef get_latest_date():\n  try:\n    from BeautifulSoup import BeautifulSoup\n  except ImportError:\n      from bs4 import BeautifulSoup\n\n  modis_list_url = \"https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\n\n  print(modis_list_url)\n\n  response = subprocess.run(f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -np -e robots=off {modis_list_url}', shell=True,  stderr=subprocess.PIPE)\n  index_file = open('index.html', 'r')\n  webContent = index_file.read()\n\n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n  print('----------------------')\n  all_rows = parsed_html.body.findAll('td', attrs={'class':'indexcolname'})\n  \n  latest_date = None\n  for row in all_rows:\n    try:\n      new_date = datetime.strptime(row.text[:-1], '%Y.%m.%d')\n      if latest_date is None or latest_date < new_date:\n        latest_date = new_date\n    except:\n      continue\n  \n  print(\"Find the latest date: \", latest_date)\n      \n\nget_latest_date()\n#p = subprocess.run('wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -np -e robots=off https://n5eil01u.ecs.nsidc.org/SMAP/SPL4CMDL.006/2019.10.07/SMAP_L4_C_mdl_20191007T000000_Vv6042_001.h5 --quiet', shell=True,  stderr=subprocess.PIPE)\n\n",
  "history_output" : "/home/chetana/gw-workspace/1Nd1eb6UyC5u\nhttps://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\n/home/chetana/gw-workspace/1Nd1eb6UyC5u/data_gee_modis_real_time.py:36: GuessedAtParserWarning: No parser was explicitly specified, so I'm using the best available HTML parser for this system (\"lxml\"). This usually isn't a problem, but if you run this code on another system, or in a different virtual environment, it may use a different parser and behave differently.\n\nThe code that caused this warning is on line 36 of the file /home/chetana/gw-workspace/1Nd1eb6UyC5u/data_gee_modis_real_time.py. To get rid of this warning, pass the additional argument 'features=\"lxml\"' to the BeautifulSoup constructor.\n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n----------------------\nFind the latest date:  2023-04-07 00:00:00\n",
  "history_begin_time" : 1682278462726,
  "history_end_time" : 1682278464973,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "yzS5vhcyVeTc",
  "history_input" : "import subprocess\nfrom datetime import datetime\n\n\n# Write first python in Geoweaver\nimport os\nimport urllib.request, urllib.error, urllib.parse\nimport sys\n\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\n\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(dir_path)\n\ntile_list = ['h08v04', 'h09v04', 'h10v04', 'h11v04', 'h08v05', 'h09v05', 'h10v05', 'h07v06', 'h08v06', 'h09v06']\n\n\ndef get_latest_date():\n  try:\n    from BeautifulSoup import BeautifulSoup\n  except ImportError:\n      from bs4 import BeautifulSoup\n\n  modis_list_url = \"https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\n\n  print(modis_list_url)\n\n  response = subprocess.run(f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -np -e robots=off {modis_list_url}', shell=True,  stderr=subprocess.PIPE)\n  index_file = open('index.html', 'r')\n  webContent = index_file.read()\n\n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n  print('----------------------')\n  all_rows = parsed_html.body.findAll('td', attrs={'class':'indexcolname'})\n  \n  latest_date = None\n  for row in all_rows:\n    if \"Directory\" not in row.text:\n      print(row.text[:-1])\n      try:\n        new_date = datetime.strptime(row.text[:-1], '%Y.%m.%d')\n        if latest_date is None or latest_date < new_date:\n          latest_date = new_date\n      except:\n        continue\n  \n  print(\"Find the latest date: \", latest_date)\n      \n\nget_latest_date()\n#p = subprocess.run('wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -np -e robots=off https://n5eil01u.ecs.nsidc.org/SMAP/SPL4CMDL.006/2019.10.07/SMAP_L4_C_mdl_20191007T000000_Vv6042_001.h5 --quiet', shell=True,  stderr=subprocess.PIPE)\n\n",
  "history_output" : "/home/chetana/gw-workspace/yzS5vhcyVeTc\nhttps://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\n/home/chetana/gw-workspace/yzS5vhcyVeTc/data_gee_modis_real_time.py:36: GuessedAtParserWarning: No parser was explicitly specified, so I'm using the best available HTML parser for this system (\"lxml\"). This usually isn't a problem, but if you run this code on another system, or in a different virtual environment, it may use a different parser and behave differently.\n\nThe code that caused this warning is on line 36 of the file /home/chetana/gw-workspace/yzS5vhcyVeTc/data_gee_modis_real_time.py. To get rid of this warning, pass the additional argument 'features=\"lxml\"' to the BeautifulSoup constructor.\n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n----------------------\n2000.02.18\n2000.02.26\n2000.03.05\n2000.03.13\n2000.03.21\n2000.03.29\n2000.04.06\n2000.04.14\n2000.04.22\n2000.04.30\n2000.05.08\n2000.05.16\n2000.05.24\n2000.06.01\n2000.06.09\n2000.06.17\n2000.06.25\n2000.07.03\n2000.07.11\n2000.07.19\n2000.07.27\n2000.08.04\n2000.08.12\n2000.08.20\n2000.08.28\n2000.09.05\n2000.09.13\n2000.09.21\n2000.09.29\n2000.10.07\n2000.10.15\n2000.10.23\n2000.10.31\n2000.11.08\n2000.11.16\n2000.11.24\n2000.12.02\n2000.12.10\n2000.12.18\n2000.12.26\n2001.01.01\n2001.01.09\n2001.01.17\n2001.01.25\n2001.02.02\n2001.02.10\n2001.02.18\n2001.02.26\n2001.03.06\n2001.03.14\n2001.03.22\n2001.03.30\n2001.04.07\n2001.04.15\n2001.04.23\n2001.05.01\n2001.05.09\n2001.05.17\n2001.05.25\n2001.06.02\n2001.06.10\n2001.07.04\n2001.07.12\n2001.07.20\n2001.07.28\n2001.08.05\n2001.08.13\n2001.08.21\n2001.08.29\n2001.09.06\n2001.09.14\n2001.09.22\n2001.09.30\n2001.10.08\n2001.10.16\n2001.10.24\n2001.11.01\n2001.11.09\n2001.11.17\n2001.11.25\n2001.12.03\n2001.12.11\n2001.12.19\n2001.12.27\n2002.01.01\n2002.01.09\n2002.01.17\n2002.01.25\n2002.02.02\n2002.02.10\n2002.02.18\n2002.02.26\n2002.03.06\n2002.03.14\n2002.03.22\n2002.03.30\n2002.04.07\n2002.04.15\n2002.04.23\n2002.05.01\n2002.05.09\n2002.05.17\n2002.05.25\n2002.06.02\n2002.06.10\n2002.06.18\n2002.06.26\n2002.07.04\n2002.07.12\n2002.07.20\n2002.07.28\n2002.08.05\n2002.08.13\n2002.08.21\n2002.08.29\n2002.09.06\n2002.09.14\n2002.09.22\n2002.09.30\n2002.10.08\n2002.10.16\n2002.10.24\n2002.11.01\n2002.11.09\n2002.11.17\n2002.11.25\n2002.12.03\n2002.12.11\n2002.12.19\n2002.12.27\n2003.01.01\n2003.01.09\n2003.01.17\n2003.01.25\n2003.02.02\n2003.02.10\n2003.02.18\n2003.02.26\n2003.03.06\n2003.03.14\n2003.03.22\n2003.03.30\n2003.04.07\n2003.04.15\n2003.04.23\n2003.05.01\n2003.05.09\n2003.05.17\n2003.05.25\n2003.06.02\n2003.06.10\n2003.06.18\n2003.06.26\n2003.07.04\n2003.07.12\n2003.07.20\n2003.07.28\n2003.08.05\n2003.08.13\n2003.08.21\n2003.08.29\n2003.09.06\n2003.09.14\n2003.09.22\n2003.09.30\n2003.10.08\n2003.10.16\n2003.10.24\n2003.11.01\n2003.11.09\n2003.11.17\n2003.11.25\n2003.12.03\n2003.12.11\n2003.12.19\n2003.12.27\n2004.01.01\n2004.01.09\n2004.01.17\n2004.01.25\n2004.02.02\n2004.02.10\n2004.02.18\n2004.02.26\n2004.03.05\n2004.03.13\n2004.03.21\n2004.03.29\n2004.04.06\n2004.04.14\n2004.04.22\n2004.04.30\n2004.05.08\n2004.05.16\n2004.05.24\n2004.06.01\n2004.06.09\n2004.06.17\n2004.06.25\n2004.07.03\n2004.07.11\n2004.07.19\n2004.07.27\n2004.08.04\n2004.08.12\n2004.08.20\n2004.08.28\n2004.09.05\n2004.09.13\n2004.09.21\n2004.09.29\n2004.10.07\n2004.10.15\n2004.10.23\n2004.10.31\n2004.11.08\n2004.11.16\n2004.11.24\n2004.12.02\n2004.12.10\n2004.12.18\n2004.12.26\n2005.01.01\n2005.01.09\n2005.01.17\n2005.01.25\n2005.02.02\n2005.02.10\n2005.02.18\n2005.02.26\n2005.03.06\n2005.03.14\n2005.03.22\n2005.03.30\n2005.04.07\n2005.04.15\n2005.04.23\n2005.05.01\n2005.05.09\n2005.05.17\n2005.05.25\n2005.06.02\n2005.06.10\n2005.06.18\n2005.06.26\n2005.07.04\n2005.07.12\n2005.07.20\n2005.07.28\n2005.08.05\n2005.08.13\n2005.08.21\n2005.08.29\n2005.09.06\n2005.09.14\n2005.09.22\n2005.09.30\n2005.10.08\n2005.10.16\n2005.10.24\n2005.11.01\n2005.11.09\n2005.11.17\n2005.11.25\n2005.12.03\n2005.12.11\n2005.12.19\n2005.12.27\n2006.01.01\n2006.01.09\n2006.01.17\n2006.01.25\n2006.02.02\n2006.02.10\n2006.02.18\n2006.02.26\n2006.03.06\n2006.03.14\n2006.03.22\n2006.03.30\n2006.04.07\n2006.04.15\n2006.04.23\n2006.05.01\n2006.05.09\n2006.05.17\n2006.05.25\n2006.06.02\n2006.06.10\n2006.06.18\n2006.06.26\n2006.07.04\n2006.07.12\n2006.07.20\n2006.07.28\n2006.08.05\n2006.08.13\n2006.08.21\n2006.08.29\n2006.09.06\n2006.09.14\n2006.09.22\n2006.09.30\n2006.10.08\n2006.10.16\n2006.10.24\n2006.11.01\n2006.11.09\n2006.11.17\n2006.11.25\n2006.12.03\n2006.12.11\n2006.12.19\n2006.12.27\n2007.01.01\n2007.01.09\n2007.01.17\n2007.01.25\n2007.02.02\n2007.02.10\n2007.02.18\n2007.02.26\n2007.03.06\n2007.03.14\n2007.03.22\n2007.03.30\n2007.04.07\n2007.04.15\n2007.04.23\n2007.05.01\n2007.05.09\n2007.05.17\n2007.05.25\n2007.06.02\n2007.06.10\n2007.06.18\n2007.06.26\n2007.07.04\n2007.07.12\n2007.07.20\n2007.07.28\n2007.08.05\n2007.08.13\n2007.08.21\n2007.08.29\n2007.09.06\n2007.09.14\n2007.09.22\n2007.09.30\n2007.10.08\n2007.10.16\n2007.10.24\n2007.11.01\n2007.11.09\n2007.11.17\n2007.11.25\n2007.12.03\n2007.12.11\n2007.12.19\n2007.12.27\n2008.01.01\n2008.01.09\n2008.01.17\n2008.01.25\n2008.02.02\n2008.02.10\n2008.02.18\n2008.02.26\n2008.03.05\n2008.03.13\n2008.03.21\n2008.03.29\n2008.04.06\n2008.04.14\n2008.04.22\n2008.04.30\n2008.05.08\n2008.05.16\n2008.05.24\n2008.06.01\n2008.06.09\n2008.06.17\n2008.06.25\n2008.07.03\n2008.07.11\n2008.07.19\n2008.07.27\n2008.08.04\n2008.08.12\n2008.08.20\n2008.08.28\n2008.09.05\n2008.09.13\n2008.09.21\n2008.09.29\n2008.10.07\n2008.10.15\n2008.10.23\n2008.10.31\n2008.11.08\n2008.11.16\n2008.11.24\n2008.12.02\n2008.12.10\n2008.12.18\n2008.12.26\n2009.01.01\n2009.01.09\n2009.01.17\n2009.01.25\n2009.02.02\n2009.02.10\n2009.02.18\n2009.02.26\n2009.03.06\n2009.03.14\n2009.03.22\n2009.03.30\n2009.04.07\n2009.04.15\n2009.04.23\n2009.05.01\n2009.05.09\n2009.05.17\n2009.05.25\n2009.06.02\n2009.06.10\n2009.06.18\n2009.06.26\n2009.07.04\n2009.07.12\n2009.07.20\n2009.07.28\n2009.08.05\n2009.08.13\n2009.08.21\n2009.08.29\n2009.09.06\n2009.09.14\n2009.09.22\n2009.09.30\n2009.10.08\n2009.10.16\n2009.10.24\n2009.11.01\n2009.11.09\n2009.11.17\n2009.11.25\n2009.12.03\n2009.12.11\n2009.12.19\n2009.12.27\n2010.01.01\n2010.01.09\n2010.01.17\n2010.01.25\n2010.02.02\n2010.02.10\n2010.02.18\n2010.02.26\n2010.03.06\n2010.03.14\n2010.03.22\n2010.03.30\n2010.04.07\n2010.04.15\n2010.04.23\n2010.05.01\n2010.05.09\n2010.05.17\n2010.05.25\n2010.06.02\n2010.06.10\n2010.06.18\n2010.06.26\n2010.07.04\n2010.07.12\n2010.07.20\n2010.07.28\n2010.08.05\n2010.08.13\n2010.08.21\n2010.08.29\n2010.09.06\n2010.09.14\n2010.09.22\n2010.09.30\n2010.10.08\n2010.10.16\n2010.10.24\n2010.11.01\n2010.11.09\n2010.11.17\n2010.11.25\n2010.12.03\n2010.12.11\n2010.12.19\n2010.12.27\n2011.01.01\n2011.01.09\n2011.01.17\n2011.01.25\n2011.02.02\n2011.02.10\n2011.02.18\n2011.02.26\n2011.03.06\n2011.03.14\n2011.03.22\n2011.03.30\n2011.04.07\n2011.04.15\n2011.04.23\n2011.05.01\n2011.05.09\n2011.05.17\n2011.05.25\n2011.06.02\n2011.06.10\n2011.06.18\n2011.06.26\n2011.07.04\n2011.07.12\n2011.07.20\n2011.07.28\n2011.08.05\n2011.08.13\n2011.08.21\n2011.08.29\n2011.09.06\n2011.09.14\n2011.09.22\n2011.09.30\n2011.10.08\n2011.10.16\n2011.10.24\n2011.11.01\n2011.11.09\n2011.11.17\n2011.11.25\n2011.12.03\n2011.12.11\n2011.12.19\n2011.12.27\n2012.01.01\n2012.01.09\n2012.01.17\n2012.01.25\n2012.02.02\n2012.02.10\n2012.02.18\n2012.02.26\n2012.03.05\n2012.03.13\n2012.03.21\n2012.03.29\n2012.04.06\n2012.04.14\n2012.04.22\n2012.04.30\n2012.05.08\n2012.05.16\n2012.05.24\n2012.06.01\n2012.06.09\n2012.06.17\n2012.06.25\n2012.07.03\n2012.07.11\n2012.07.19\n2012.07.27\n2012.08.04\n2012.08.12\n2012.08.20\n2012.08.28\n2012.09.05\n2012.09.13\n2012.09.21\n2012.09.29\n2012.10.07\n2012.10.15\n2012.10.23\n2012.10.31\n2012.11.08\n2012.11.16\n2012.11.24\n2012.12.02\n2012.12.10\n2012.12.18\n2012.12.26\n2013.01.01\n2013.01.09\n2013.01.17\n2013.01.25\n2013.02.02\n2013.02.10\n2013.02.18\n2013.02.26\n2013.03.06\n2013.03.14\n2013.03.22\n2013.03.30\n2013.04.07\n2013.04.15\n2013.04.23\n2013.05.01\n2013.05.09\n2013.05.17\n2013.05.25\n2013.06.02\n2013.06.10\n2013.06.18\n2013.06.26\n2013.07.04\n2013.07.12\n2013.07.20\n2013.07.28\n2013.08.05\n2013.08.13\n2013.08.21\n2013.08.29\n2013.09.06\n2013.09.14\n2013.09.22\n2013.09.30\n2013.10.08\n2013.10.16\n2013.10.24\n2013.11.01\n2013.11.09\n2013.11.17\n2013.11.25\n2013.12.03\n2013.12.11\n2013.12.19\n2013.12.27\n2014.01.01\n2014.01.09\n2014.01.17\n2014.01.25\n2014.02.02\n2014.02.10\n2014.02.18\n2014.02.26\n2014.03.06\n2014.03.14\n2014.03.22\n2014.03.30\n2014.04.07\n2014.04.15\n2014.04.23\n2014.05.01\n2014.05.09\n2014.05.17\n2014.05.25\n2014.06.02\n2014.06.10\n2014.06.18\n2014.06.26\n2014.07.04\n2014.07.12\n2014.07.20\n2014.07.28\n2014.08.05\n2014.08.13\n2014.08.21\n2014.08.29\n2014.09.06\n2014.09.14\n2014.09.22\n2014.09.30\n2014.10.08\n2014.10.16\n2014.10.24\n2014.11.01\n2014.11.09\n2014.11.17\n2014.11.25\n2014.12.03\n2014.12.11\n2014.12.19\n2014.12.27\n2015.01.01\n2015.01.09\n2015.01.17\n2015.01.25\n2015.02.02\n2015.02.10\n2015.02.18\n2015.02.26\n2015.03.06\n2015.03.14\n2015.03.22\n2015.03.30\n2015.04.07\n2015.04.15\n2015.04.23\n2015.05.01\n2015.05.09\n2015.05.17\n2015.05.25\n2015.06.02\n2015.06.10\n2015.06.18\n2015.06.26\n2015.07.04\n2015.07.12\n2015.07.20\n2015.07.28\n2015.08.05\n2015.08.13\n2015.08.21\n2015.08.29\n2015.09.06\n2015.09.14\n2015.09.22\n2015.09.30\n2015.10.08\n2015.10.16\n2015.10.24\n2015.11.01\n2015.11.09\n2015.11.17\n2015.11.25\n2015.12.03\n2015.12.11\n2015.12.19\n2015.12.27\n2016.01.01\n2016.01.09\n2016.01.17\n2016.01.25\n2016.02.02\n2016.02.10\n2016.02.26\n2016.03.05\n2016.03.13\n2016.03.21\n2016.03.29\n2016.04.06\n2016.04.14\n2016.04.22\n2016.04.30\n2016.05.08\n2016.05.16\n2016.05.24\n2016.06.01\n2016.06.09\n2016.06.17\n2016.06.25\n2016.07.03\n2016.07.11\n2016.07.19\n2016.07.27\n2016.08.04\n2016.08.12\n2016.08.20\n2016.08.28\n2016.09.05\n2016.09.13\n2016.09.21\n2016.09.29\n2016.10.07\n2016.10.15\n2016.10.23\n2016.10.31\n2016.11.08\n2016.11.16\n2016.11.24\n2016.12.02\n2016.12.10\n2016.12.18\n2016.12.26\n2017.01.01\n2017.01.09\n2017.01.17\n2017.01.25\n2017.02.02\n2017.02.10\n2017.02.18\n2017.02.26\n2017.03.06\n2017.03.14\n2017.03.22\n2017.03.30\n2017.04.07\n2017.04.15\n2017.04.23\n2017.05.01\n2017.05.09\n2017.05.17\n2017.05.25\n2017.06.02\n2017.06.10\n2017.06.18\n2017.06.26\n2017.07.04\n2017.07.12\n2017.07.20\n2017.07.28\n2017.08.05\n2017.08.13\n2017.08.21\n2017.08.29\n2017.09.06\n2017.09.14\n2017.09.22\n2017.09.30\n2017.10.08\n2017.10.16\n2017.10.24\n2017.11.01\n2017.11.09\n2017.11.17\n2017.11.25\n2017.12.03\n2017.12.11\n2017.12.19\n2017.12.27\n2018.01.01\n2018.01.09\n2018.01.17\n2018.01.25\n2018.02.02\n2018.02.10\n2018.02.18\n2018.02.26\n2018.03.06\n2018.03.14\n2018.03.22\n2018.03.30\n2018.04.07\n2018.04.15\n2018.04.23\n2018.05.01\n2018.05.09\n2018.05.17\n2018.05.25\n2018.06.02\n2018.06.10\n2018.06.18\n2018.06.26\n2018.07.04\n2018.07.12\n2018.07.20\n2018.07.28\n2018.08.05\n2018.08.13\n2018.08.21\n2018.08.29\n2018.09.06\n2018.09.14\n2018.09.22\n2018.09.30\n2018.10.08\n2018.10.16\n2018.10.24\n2018.11.01\n2018.11.09\n2018.11.17\n2018.11.25\n2018.12.03\n2018.12.11\n2018.12.19\n2018.12.27\n2019.01.01\n2019.01.09\n2019.01.17\n2019.01.25\n2019.02.02\n2019.02.10\n2019.02.18\n2019.02.26\n2019.03.06\n2019.03.14\n2019.03.22\n2019.03.30\n2019.04.07\n2019.04.15\n2019.04.23\n2019.05.01\n2019.05.09\n2019.05.17\n2019.05.25\n2019.06.02\n2019.06.10\n2019.06.18\n2019.06.26\n2019.07.04\n2019.07.12\n2019.07.20\n2019.07.28\n2019.08.05\n2019.08.13\n2019.08.21\n2019.08.29\n2019.09.06\n2019.09.14\n2019.09.22\n2019.09.30\n2019.10.08\n2019.10.16\n2019.10.24\n2019.11.01\n2019.11.09\n2019.11.17\n2019.11.25\n2019.12.03\n2019.12.11\n2019.12.19\n2019.12.27\n2020.01.01\n2020.01.09\n2020.01.17\n2020.01.25\n2020.02.02\n2020.02.10\n2020.02.18\n2020.02.26\n2020.03.05\n2020.03.13\n2020.03.21\n2020.03.29\n2020.04.06\n2020.04.14\n2020.04.22\n2020.04.30\n2020.05.08\n2020.05.16\n2020.05.24\n2020.06.01\n2020.06.09\n2020.06.17\n2020.06.25\n2020.07.03\n2020.07.11\n2020.07.19\n2020.07.27\n2020.08.04\n2020.08.12\n2020.08.20\n2020.08.28\n2020.09.05\n2020.09.13\n2020.09.21\n2020.09.29\n2020.10.07\n2020.10.15\n2020.10.23\n2020.10.31\n2020.11.08\n2020.11.16\n2020.11.24\n2020.12.02\n2020.12.10\n2020.12.18\n2020.12.26\n2021.01.01\n2021.01.09\n2021.01.17\n2021.01.25\n2021.02.02\n2021.02.10\n2021.02.18\n2021.02.26\n2021.03.06\n2021.03.14\n2021.03.22\n2021.03.30\n2021.04.07\n2021.04.15\n2021.04.23\n2021.05.01\n2021.05.09\n2021.05.17\n2021.05.25\n2021.06.02\n2021.06.10\n2021.06.18\n2021.06.26\n2021.07.04\n2021.07.12\n2021.07.20\n2021.07.28\n2021.08.05\n2021.08.13\n2021.08.21\n2021.08.29\n2021.09.06\n2021.09.14\n2021.09.22\n2021.09.30\n2021.10.08\n2021.10.16\n2021.10.24\n2021.11.01\n2021.11.09\n2021.11.17\n2021.11.25\n2021.12.03\n2021.12.11\n2021.12.19\n2021.12.27\n2022.01.01\n2022.01.09\n2022.01.17\n2022.01.25\n2022.02.02\n2022.02.10\n2022.02.18\n2022.02.26\n2022.03.06\n2022.03.14\n2022.03.22\n2022.03.30\n2022.04.07\n2022.04.15\n2022.04.23\n2022.05.01\n2022.05.09\n2022.05.17\n2022.05.25\n2022.06.02\n2022.06.10\n2022.06.18\n2022.06.26\n2022.07.04\n2022.07.12\n2022.07.20\n2022.07.28\n2022.08.05\n2022.08.13\n2022.08.21\n2022.08.29\n2022.09.06\n2022.09.14\n2022.09.22\n2022.09.30\n2022.10.08\n2022.10.24\n2022.11.01\n2022.11.09\n2022.11.17\n2022.11.25\n2022.12.03\n2022.12.11\n2022.12.19\n2022.12.27\n2023.01.01\n2023.01.09\n2023.01.17\n2023.01.25\n2023.02.02\n2023.02.10\n2023.02.18\n2023.02.26\n2023.03.06\n2023.03.14\n2023.03.22\n2023.03.30\n2023.04.07\nDPRecentInserts_MOD10A2_061_2022082\nDPRecentInserts_MOD10A2_061_2022082\nDPRecentInserts_MOD10A2_061_2022090\nDPRecentInserts_MOD10A2_061_2022091\nDPRecentInserts_MOD10A2_061_2022092\nDPRecentInserts_MOD10A2_061_2022092\nDPRecentInserts_MOD10A2_061_2022093\nDPRecentInserts_MOD10A2_061_2022100\nDPRecentInserts_MOD10A2_061_2022101\nDPRecentInserts_MOD10A2_061_2022102\nDPRecentInserts_MOD10A2_061_2022110\nDPRecentInserts_MOD10A2_061_2022110\nDPRecentInserts_MOD10A2_061_2022110\nDPRecentInserts_MOD10A2_061_2022111\nDPRecentInserts_MOD10A2_061_2022111\nDPRecentInserts_MOD10A2_061_2022111\nDPRecentInserts_MOD10A2_061_2022111\nDPRecentInserts_MOD10A2_061_2022112\nDPRecentInserts_MOD10A2_061_2022112\nDPRecentInserts_MOD10A2_061_2022121\nDPRecentInserts_MOD10A2_061_2022121\nDPRecentInserts_MOD10A2_061_2022122\nDPRecentInserts_MOD10A2_061_2022122\nDPRecentInserts_MOD10A2_061_2022122\nDPRecentInserts_MOD10A2_061_2023010\nDPRecentInserts_MOD10A2_061_2023011\nDPRecentInserts_MOD10A2_061_2023011\nDPRecentInserts_MOD10A2_061_2023020\nDPRecentInserts_MOD10A2_061_2023020\nDPRecentInserts_MOD10A2_061_2023021\nDPRecentInserts_MOD10A2_061_2023021\nDPRecentInserts_MOD10A2_061_2023022\nDPRecentInserts_MOD10A2_061_2023022\nDPRecentInserts_MOD10A2_061_2023022\nDPRecentInserts_MOD10A2_061_2023031\nDPRecentInserts_MOD10A2_061_2023031\nDPRecentInserts_MOD10A2_061_2023032\nDPRecentInserts_MOD10A2_061_2023032\nDPRecentInserts_MOD10A2_061_2023033\nDPRecentInserts_MOD10A2_061_2023040\nDPRecentInserts_MOD10A2_061_2023041\nDPRecentInserts_MOD10A2_061_2023041\nFind the latest date:  2023-04-07 00:00:00\n",
  "history_begin_time" : 1682278435077,
  "history_end_time" : 1682278437524,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "p2ka07s5kyHM",
  "history_input" : "import subprocess\nfrom datetime import datetime\n\n\n# Write first python in Geoweaver\nimport os\nimport urllib.request, urllib.error, urllib.parse\nimport sys\n\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\n\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(dir_path)\n\ntile_list = ['h08v04', 'h09v04', 'h10v04', 'h11v04', 'h08v05', 'h09v05', 'h10v05', 'h07v06', 'h08v06', 'h09v06']\n\n\ndef get_latest_date():\n  try:\n    from BeautifulSoup import BeautifulSoup\n  except ImportError:\n      from bs4 import BeautifulSoup\n\n  modis_list_url = \"https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\n\n  print(modis_list_url)\n\n  response = subprocess.run(f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -np -e robots=off {modis_list_url}', shell=True,  stderr=subprocess.PIPE)\n  index_file = open('index.html', 'r')\n  webContent = index_file.read()\n\n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n  print('----------------------')\n  all_rows = parsed_html.body.findAll('td', attrs={'class':'indexcolname'})\n  \n  latest_date = None\n  for row in all_rows:\n    if \"Directory\" not in row.text:\n      print(row.text[:-1])\n      new_date = datetime.strptime(row.text[:-1], '%Y.%m.%d')\n      if latest_date is None or latest_date < new_date:\n        latest_date = new_date\n  \n  print(\"Find the latest date: \", latest_date)\n      \n\nget_latest_date()\n#p = subprocess.run('wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -np -e robots=off https://n5eil01u.ecs.nsidc.org/SMAP/SPL4CMDL.006/2019.10.07/SMAP_L4_C_mdl_20191007T000000_Vv6042_001.h5 --quiet', shell=True,  stderr=subprocess.PIPE)\n\n",
  "history_output" : "/home/chetana/gw-workspace/p2ka07s5kyHM\nhttps://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\n/home/chetana/gw-workspace/p2ka07s5kyHM/data_gee_modis_real_time.py:36: GuessedAtParserWarning: No parser was explicitly specified, so I'm using the best available HTML parser for this system (\"lxml\"). This usually isn't a problem, but if you run this code on another system, or in a different virtual environment, it may use a different parser and behave differently.\n\nThe code that caused this warning is on line 36 of the file /home/chetana/gw-workspace/p2ka07s5kyHM/data_gee_modis_real_time.py. To get rid of this warning, pass the additional argument 'features=\"lxml\"' to the BeautifulSoup constructor.\n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n----------------------\n2000.02.18\n2000.02.26\n2000.03.05\n2000.03.13\n2000.03.21\n2000.03.29\n2000.04.06\n2000.04.14\n2000.04.22\n2000.04.30\n2000.05.08\n2000.05.16\n2000.05.24\n2000.06.01\n2000.06.09\n2000.06.17\n2000.06.25\n2000.07.03\n2000.07.11\n2000.07.19\n2000.07.27\n2000.08.04\n2000.08.12\n2000.08.20\n2000.08.28\n2000.09.05\n2000.09.13\n2000.09.21\n2000.09.29\n2000.10.07\n2000.10.15\n2000.10.23\n2000.10.31\n2000.11.08\n2000.11.16\n2000.11.24\n2000.12.02\n2000.12.10\n2000.12.18\n2000.12.26\n2001.01.01\n2001.01.09\n2001.01.17\n2001.01.25\n2001.02.02\n2001.02.10\n2001.02.18\n2001.02.26\n2001.03.06\n2001.03.14\n2001.03.22\n2001.03.30\n2001.04.07\n2001.04.15\n2001.04.23\n2001.05.01\n2001.05.09\n2001.05.17\n2001.05.25\n2001.06.02\n2001.06.10\n2001.07.04\n2001.07.12\n2001.07.20\n2001.07.28\n2001.08.05\n2001.08.13\n2001.08.21\n2001.08.29\n2001.09.06\n2001.09.14\n2001.09.22\n2001.09.30\n2001.10.08\n2001.10.16\n2001.10.24\n2001.11.01\n2001.11.09\n2001.11.17\n2001.11.25\n2001.12.03\n2001.12.11\n2001.12.19\n2001.12.27\n2002.01.01\n2002.01.09\n2002.01.17\n2002.01.25\n2002.02.02\n2002.02.10\n2002.02.18\n2002.02.26\n2002.03.06\n2002.03.14\n2002.03.22\n2002.03.30\n2002.04.07\n2002.04.15\n2002.04.23\n2002.05.01\n2002.05.09\n2002.05.17\n2002.05.25\n2002.06.02\n2002.06.10\n2002.06.18\n2002.06.26\n2002.07.04\n2002.07.12\n2002.07.20\n2002.07.28\n2002.08.05\n2002.08.13\n2002.08.21\n2002.08.29\n2002.09.06\n2002.09.14\n2002.09.22\n2002.09.30\n2002.10.08\n2002.10.16\n2002.10.24\n2002.11.01\n2002.11.09\n2002.11.17\n2002.11.25\n2002.12.03\n2002.12.11\n2002.12.19\n2002.12.27\n2003.01.01\n2003.01.09\n2003.01.17\n2003.01.25\n2003.02.02\n2003.02.10\n2003.02.18\n2003.02.26\n2003.03.06\n2003.03.14\n2003.03.22\n2003.03.30\n2003.04.07\n2003.04.15\n2003.04.23\n2003.05.01\n2003.05.09\n2003.05.17\n2003.05.25\n2003.06.02\n2003.06.10\n2003.06.18\n2003.06.26\n2003.07.04\n2003.07.12\n2003.07.20\n2003.07.28\n2003.08.05\n2003.08.13\n2003.08.21\n2003.08.29\n2003.09.06\n2003.09.14\n2003.09.22\n2003.09.30\n2003.10.08\n2003.10.16\n2003.10.24\n2003.11.01\n2003.11.09\n2003.11.17\n2003.11.25\n2003.12.03\n2003.12.11\n2003.12.19\n2003.12.27\n2004.01.01\n2004.01.09\n2004.01.17\n2004.01.25\n2004.02.02\n2004.02.10\n2004.02.18\n2004.02.26\n2004.03.05\n2004.03.13\n2004.03.21\n2004.03.29\n2004.04.06\n2004.04.14\n2004.04.22\n2004.04.30\n2004.05.08\n2004.05.16\n2004.05.24\n2004.06.01\n2004.06.09\n2004.06.17\n2004.06.25\n2004.07.03\n2004.07.11\n2004.07.19\n2004.07.27\n2004.08.04\n2004.08.12\n2004.08.20\n2004.08.28\n2004.09.05\n2004.09.13\n2004.09.21\n2004.09.29\n2004.10.07\n2004.10.15\n2004.10.23\n2004.10.31\n2004.11.08\n2004.11.16\n2004.11.24\n2004.12.02\n2004.12.10\n2004.12.18\n2004.12.26\n2005.01.01\n2005.01.09\n2005.01.17\n2005.01.25\n2005.02.02\n2005.02.10\n2005.02.18\n2005.02.26\n2005.03.06\n2005.03.14\n2005.03.22\n2005.03.30\n2005.04.07\n2005.04.15\n2005.04.23\n2005.05.01\n2005.05.09\n2005.05.17\n2005.05.25\n2005.06.02\n2005.06.10\n2005.06.18\n2005.06.26\n2005.07.04\n2005.07.12\n2005.07.20\n2005.07.28\n2005.08.05\n2005.08.13\n2005.08.21\n2005.08.29\n2005.09.06\n2005.09.14\n2005.09.22\n2005.09.30\n2005.10.08\n2005.10.16\n2005.10.24\n2005.11.01\n2005.11.09\n2005.11.17\n2005.11.25\n2005.12.03\n2005.12.11\n2005.12.19\n2005.12.27\n2006.01.01\n2006.01.09\n2006.01.17\n2006.01.25\n2006.02.02\n2006.02.10\n2006.02.18\n2006.02.26\n2006.03.06\n2006.03.14\n2006.03.22\n2006.03.30\n2006.04.07\n2006.04.15\n2006.04.23\n2006.05.01\n2006.05.09\n2006.05.17\n2006.05.25\n2006.06.02\n2006.06.10\n2006.06.18\n2006.06.26\n2006.07.04\n2006.07.12\n2006.07.20\n2006.07.28\n2006.08.05\n2006.08.13\n2006.08.21\n2006.08.29\n2006.09.06\n2006.09.14\n2006.09.22\n2006.09.30\n2006.10.08\n2006.10.16\n2006.10.24\n2006.11.01\n2006.11.09\n2006.11.17\n2006.11.25\n2006.12.03\n2006.12.11\n2006.12.19\n2006.12.27\n2007.01.01\n2007.01.09\n2007.01.17\n2007.01.25\n2007.02.02\n2007.02.10\n2007.02.18\n2007.02.26\n2007.03.06\n2007.03.14\n2007.03.22\n2007.03.30\n2007.04.07\n2007.04.15\n2007.04.23\n2007.05.01\n2007.05.09\n2007.05.17\n2007.05.25\n2007.06.02\n2007.06.10\n2007.06.18\n2007.06.26\n2007.07.04\n2007.07.12\n2007.07.20\n2007.07.28\n2007.08.05\n2007.08.13\n2007.08.21\n2007.08.29\n2007.09.06\n2007.09.14\n2007.09.22\n2007.09.30\n2007.10.08\n2007.10.16\n2007.10.24\n2007.11.01\n2007.11.09\n2007.11.17\n2007.11.25\n2007.12.03\n2007.12.11\n2007.12.19\n2007.12.27\n2008.01.01\n2008.01.09\n2008.01.17\n2008.01.25\n2008.02.02\n2008.02.10\n2008.02.18\n2008.02.26\n2008.03.05\n2008.03.13\n2008.03.21\n2008.03.29\n2008.04.06\n2008.04.14\n2008.04.22\n2008.04.30\n2008.05.08\n2008.05.16\n2008.05.24\n2008.06.01\n2008.06.09\n2008.06.17\n2008.06.25\n2008.07.03\n2008.07.11\n2008.07.19\n2008.07.27\n2008.08.04\n2008.08.12\n2008.08.20\n2008.08.28\n2008.09.05\n2008.09.13\n2008.09.21\n2008.09.29\n2008.10.07\n2008.10.15\n2008.10.23\n2008.10.31\n2008.11.08\n2008.11.16\n2008.11.24\n2008.12.02\n2008.12.10\n2008.12.18\n2008.12.26\n2009.01.01\n2009.01.09\n2009.01.17\n2009.01.25\n2009.02.02\n2009.02.10\n2009.02.18\n2009.02.26\n2009.03.06\n2009.03.14\n2009.03.22\n2009.03.30\n2009.04.07\n2009.04.15\n2009.04.23\n2009.05.01\n2009.05.09\n2009.05.17\n2009.05.25\n2009.06.02\n2009.06.10\n2009.06.18\n2009.06.26\n2009.07.04\n2009.07.12\n2009.07.20\n2009.07.28\n2009.08.05\n2009.08.13\n2009.08.21\n2009.08.29\n2009.09.06\n2009.09.14\n2009.09.22\n2009.09.30\n2009.10.08\n2009.10.16\n2009.10.24\n2009.11.01\n2009.11.09\n2009.11.17\n2009.11.25\n2009.12.03\n2009.12.11\n2009.12.19\n2009.12.27\n2010.01.01\n2010.01.09\n2010.01.17\n2010.01.25\n2010.02.02\n2010.02.10\n2010.02.18\n2010.02.26\n2010.03.06\n2010.03.14\n2010.03.22\n2010.03.30\n2010.04.07\n2010.04.15\n2010.04.23\n2010.05.01\n2010.05.09\n2010.05.17\n2010.05.25\n2010.06.02\n2010.06.10\n2010.06.18\n2010.06.26\n2010.07.04\n2010.07.12\n2010.07.20\n2010.07.28\n2010.08.05\n2010.08.13\n2010.08.21\n2010.08.29\n2010.09.06\n2010.09.14\n2010.09.22\n2010.09.30\n2010.10.08\n2010.10.16\n2010.10.24\n2010.11.01\n2010.11.09\n2010.11.17\n2010.11.25\n2010.12.03\n2010.12.11\n2010.12.19\n2010.12.27\n2011.01.01\n2011.01.09\n2011.01.17\n2011.01.25\n2011.02.02\n2011.02.10\n2011.02.18\n2011.02.26\n2011.03.06\n2011.03.14\n2011.03.22\n2011.03.30\n2011.04.07\n2011.04.15\n2011.04.23\n2011.05.01\n2011.05.09\n2011.05.17\n2011.05.25\n2011.06.02\n2011.06.10\n2011.06.18\n2011.06.26\n2011.07.04\n2011.07.12\n2011.07.20\n2011.07.28\n2011.08.05\n2011.08.13\n2011.08.21\n2011.08.29\n2011.09.06\n2011.09.14\n2011.09.22\n2011.09.30\n2011.10.08\n2011.10.16\n2011.10.24\n2011.11.01\n2011.11.09\n2011.11.17\n2011.11.25\n2011.12.03\n2011.12.11\n2011.12.19\n2011.12.27\n2012.01.01\n2012.01.09\n2012.01.17\n2012.01.25\n2012.02.02\n2012.02.10\n2012.02.18\n2012.02.26\n2012.03.05\n2012.03.13\n2012.03.21\n2012.03.29\n2012.04.06\n2012.04.14\n2012.04.22\n2012.04.30\n2012.05.08\n2012.05.16\n2012.05.24\n2012.06.01\n2012.06.09\n2012.06.17\n2012.06.25\n2012.07.03\n2012.07.11\n2012.07.19\n2012.07.27\n2012.08.04\n2012.08.12\n2012.08.20\n2012.08.28\n2012.09.05\n2012.09.13\n2012.09.21\n2012.09.29\n2012.10.07\n2012.10.15\n2012.10.23\n2012.10.31\n2012.11.08\n2012.11.16\n2012.11.24\n2012.12.02\n2012.12.10\n2012.12.18\n2012.12.26\n2013.01.01\n2013.01.09\n2013.01.17\n2013.01.25\n2013.02.02\n2013.02.10\n2013.02.18\n2013.02.26\n2013.03.06\n2013.03.14\n2013.03.22\n2013.03.30\n2013.04.07\n2013.04.15\n2013.04.23\n2013.05.01\n2013.05.09\n2013.05.17\n2013.05.25\n2013.06.02\n2013.06.10\n2013.06.18\n2013.06.26\n2013.07.04\n2013.07.12\n2013.07.20\n2013.07.28\n2013.08.05\n2013.08.13\n2013.08.21\n2013.08.29\n2013.09.06\n2013.09.14\n2013.09.22\n2013.09.30\n2013.10.08\n2013.10.16\n2013.10.24\n2013.11.01\n2013.11.09\n2013.11.17\n2013.11.25\n2013.12.03\n2013.12.11\n2013.12.19\n2013.12.27\n2014.01.01\n2014.01.09\n2014.01.17\n2014.01.25\n2014.02.02\n2014.02.10\n2014.02.18\n2014.02.26\n2014.03.06\n2014.03.14\n2014.03.22\n2014.03.30\n2014.04.07\n2014.04.15\n2014.04.23\n2014.05.01\n2014.05.09\n2014.05.17\n2014.05.25\n2014.06.02\n2014.06.10\n2014.06.18\n2014.06.26\n2014.07.04\n2014.07.12\n2014.07.20\n2014.07.28\n2014.08.05\n2014.08.13\n2014.08.21\n2014.08.29\n2014.09.06\n2014.09.14\n2014.09.22\n2014.09.30\n2014.10.08\n2014.10.16\n2014.10.24\n2014.11.01\n2014.11.09\n2014.11.17\n2014.11.25\n2014.12.03\n2014.12.11\n2014.12.19\n2014.12.27\n2015.01.01\n2015.01.09\n2015.01.17\n2015.01.25\n2015.02.02\n2015.02.10\n2015.02.18\n2015.02.26\n2015.03.06\n2015.03.14\n2015.03.22\n2015.03.30\n2015.04.07\n2015.04.15\n2015.04.23\n2015.05.01\n2015.05.09\n2015.05.17\n2015.05.25\n2015.06.02\n2015.06.10\n2015.06.18\n2015.06.26\n2015.07.04\n2015.07.12\n2015.07.20\n2015.07.28\n2015.08.05\n2015.08.13\n2015.08.21\n2015.08.29\n2015.09.06\n2015.09.14\n2015.09.22\n2015.09.30\n2015.10.08\n2015.10.16\n2015.10.24\n2015.11.01\n2015.11.09\n2015.11.17\n2015.11.25\n2015.12.03\n2015.12.11\n2015.12.19\n2015.12.27\n2016.01.01\n2016.01.09\n2016.01.17\n2016.01.25\n2016.02.02\n2016.02.10\n2016.02.26\n2016.03.05\n2016.03.13\n2016.03.21\n2016.03.29\n2016.04.06\n2016.04.14\n2016.04.22\n2016.04.30\n2016.05.08\n2016.05.16\n2016.05.24\n2016.06.01\n2016.06.09\n2016.06.17\n2016.06.25\n2016.07.03\n2016.07.11\n2016.07.19\n2016.07.27\n2016.08.04\n2016.08.12\n2016.08.20\n2016.08.28\n2016.09.05\n2016.09.13\n2016.09.21\n2016.09.29\n2016.10.07\n2016.10.15\n2016.10.23\n2016.10.31\n2016.11.08\n2016.11.16\n2016.11.24\n2016.12.02\n2016.12.10\n2016.12.18\n2016.12.26\n2017.01.01\n2017.01.09\n2017.01.17\n2017.01.25\n2017.02.02\n2017.02.10\n2017.02.18\n2017.02.26\n2017.03.06\n2017.03.14\n2017.03.22\n2017.03.30\n2017.04.07\n2017.04.15\n2017.04.23\n2017.05.01\n2017.05.09\n2017.05.17\n2017.05.25\n2017.06.02\n2017.06.10\n2017.06.18\n2017.06.26\n2017.07.04\n2017.07.12\n2017.07.20\n2017.07.28\n2017.08.05\n2017.08.13\n2017.08.21\n2017.08.29\n2017.09.06\n2017.09.14\n2017.09.22\n2017.09.30\n2017.10.08\n2017.10.16\n2017.10.24\n2017.11.01\n2017.11.09\n2017.11.17\n2017.11.25\n2017.12.03\n2017.12.11\n2017.12.19\n2017.12.27\n2018.01.01\n2018.01.09\n2018.01.17\n2018.01.25\n2018.02.02\n2018.02.10\n2018.02.18\n2018.02.26\n2018.03.06\n2018.03.14\n2018.03.22\n2018.03.30\n2018.04.07\n2018.04.15\n2018.04.23\n2018.05.01\n2018.05.09\n2018.05.17\n2018.05.25\n2018.06.02\n2018.06.10\n2018.06.18\n2018.06.26\n2018.07.04\n2018.07.12\n2018.07.20\n2018.07.28\n2018.08.05\n2018.08.13\n2018.08.21\n2018.08.29\n2018.09.06\n2018.09.14\n2018.09.22\n2018.09.30\n2018.10.08\n2018.10.16\n2018.10.24\n2018.11.01\n2018.11.09\n2018.11.17\n2018.11.25\n2018.12.03\n2018.12.11\n2018.12.19\n2018.12.27\n2019.01.01\n2019.01.09\n2019.01.17\n2019.01.25\n2019.02.02\n2019.02.10\n2019.02.18\n2019.02.26\n2019.03.06\n2019.03.14\n2019.03.22\n2019.03.30\n2019.04.07\n2019.04.15\n2019.04.23\n2019.05.01\n2019.05.09\n2019.05.17\n2019.05.25\n2019.06.02\n2019.06.10\n2019.06.18\n2019.06.26\n2019.07.04\n2019.07.12\n2019.07.20\n2019.07.28\n2019.08.05\n2019.08.13\n2019.08.21\n2019.08.29\n2019.09.06\n2019.09.14\n2019.09.22\n2019.09.30\n2019.10.08\n2019.10.16\n2019.10.24\n2019.11.01\n2019.11.09\n2019.11.17\n2019.11.25\n2019.12.03\n2019.12.11\n2019.12.19\n2019.12.27\n2020.01.01\n2020.01.09\n2020.01.17\n2020.01.25\n2020.02.02\n2020.02.10\n2020.02.18\n2020.02.26\n2020.03.05\n2020.03.13\n2020.03.21\n2020.03.29\n2020.04.06\n2020.04.14\n2020.04.22\n2020.04.30\n2020.05.08\n2020.05.16\n2020.05.24\n2020.06.01\n2020.06.09\n2020.06.17\n2020.06.25\n2020.07.03\n2020.07.11\n2020.07.19\n2020.07.27\n2020.08.04\n2020.08.12\n2020.08.20\n2020.08.28\n2020.09.05\n2020.09.13\n2020.09.21\n2020.09.29\n2020.10.07\n2020.10.15\n2020.10.23\n2020.10.31\n2020.11.08\n2020.11.16\n2020.11.24\n2020.12.02\n2020.12.10\n2020.12.18\n2020.12.26\n2021.01.01\n2021.01.09\n2021.01.17\n2021.01.25\n2021.02.02\n2021.02.10\n2021.02.18\n2021.02.26\n2021.03.06\n2021.03.14\n2021.03.22\n2021.03.30\n2021.04.07\n2021.04.15\n2021.04.23\n2021.05.01\n2021.05.09\n2021.05.17\n2021.05.25\n2021.06.02\n2021.06.10\n2021.06.18\n2021.06.26\n2021.07.04\n2021.07.12\n2021.07.20\n2021.07.28\n2021.08.05\n2021.08.13\n2021.08.21\n2021.08.29\n2021.09.06\n2021.09.14\n2021.09.22\n2021.09.30\n2021.10.08\n2021.10.16\n2021.10.24\n2021.11.01\n2021.11.09\n2021.11.17\n2021.11.25\n2021.12.03\n2021.12.11\n2021.12.19\n2021.12.27\n2022.01.01\n2022.01.09\n2022.01.17\n2022.01.25\n2022.02.02\n2022.02.10\n2022.02.18\n2022.02.26\n2022.03.06\n2022.03.14\n2022.03.22\n2022.03.30\n2022.04.07\n2022.04.15\n2022.04.23\n2022.05.01\n2022.05.09\n2022.05.17\n2022.05.25\n2022.06.02\n2022.06.10\n2022.06.18\n2022.06.26\n2022.07.04\n2022.07.12\n2022.07.20\n2022.07.28\n2022.08.05\n2022.08.13\n2022.08.21\n2022.08.29\n2022.09.06\n2022.09.14\n2022.09.22\n2022.09.30\n2022.10.08\n2022.10.24\n2022.11.01\n2022.11.09\n2022.11.17\n2022.11.25\n2022.12.03\n2022.12.11\n2022.12.19\n2022.12.27\n2023.01.01\n2023.01.09\n2023.01.17\n2023.01.25\n2023.02.02\n2023.02.10\n2023.02.18\n2023.02.26\n2023.03.06\n2023.03.14\n2023.03.22\n2023.03.30\n2023.04.07\nDPRecentInserts_MOD10A2_061_2022082\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/p2ka07s5kyHM/data_gee_modis_real_time.py\", line 51, in <module>\n    get_latest_date()\n  File \"/home/chetana/gw-workspace/p2ka07s5kyHM/data_gee_modis_real_time.py\", line 44, in get_latest_date\n    new_date = datetime.strptime(row.text[:-1], '%Y.%m.%d')\n  File \"/home/chetana/anaconda3/lib/python3.9/_strptime.py\", line 568, in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n  File \"/home/chetana/anaconda3/lib/python3.9/_strptime.py\", line 349, in _strptime\n    raise ValueError(\"time data %r does not match format %r\" %\nValueError: time data 'DPRecentInserts_MOD10A2_061_2022082' does not match format '%Y.%m.%d'\n",
  "history_begin_time" : 1682278384716,
  "history_end_time" : 1682278387677,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "PeERnXxEyeLd",
  "history_input" : "import subprocess\nfrom datetime import datetime\n\n\n# Write first python in Geoweaver\nimport os\nimport urllib.request, urllib.error, urllib.parse\nimport sys\n\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\n\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(dir_path)\n\ntile_list = ['h08v04', 'h09v04', 'h10v04', 'h11v04', 'h08v05', 'h09v05', 'h10v05', 'h07v06', 'h08v06', 'h09v06']\n\n\ndef get_latest_date():\n  try:\n    from BeautifulSoup import BeautifulSoup\n  except ImportError:\n      from bs4 import BeautifulSoup\n\n  modis_list_url = \"https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\n\n  print(modis_list_url)\n\n  response = subprocess.run(f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -np -e robots=off {modis_list_url}', shell=True,  stderr=subprocess.PIPE)\n  index_file = open('index.html', 'r')\n  webContent = index_file.read()\n\n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n  print('----------------------')\n  all_rows = parsed_html.body.findAll('td', attrs={'class':'indexcolname'})\n  \n  latest_date = None\n  for row in all_rows:\n    if \"Directory\" not in row.text:\n      print(row.text[:-1])\n      new_date = datetime.strptime(row.text[:-1], '%y.%m.%d')\n      if latest_date is None or latest_date < new_date:\n        latest_date = new_date\n  \n  print(\"Find the latest date: \", latest_date)\n      \n\nget_latest_date()\n#p = subprocess.run('wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -np -e robots=off https://n5eil01u.ecs.nsidc.org/SMAP/SPL4CMDL.006/2019.10.07/SMAP_L4_C_mdl_20191007T000000_Vv6042_001.h5 --quiet', shell=True,  stderr=subprocess.PIPE)\n\n",
  "history_output" : "/home/chetana/gw-workspace/PeERnXxEyeLd\nhttps://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\n/home/chetana/gw-workspace/PeERnXxEyeLd/data_gee_modis_real_time.py:36: GuessedAtParserWarning: No parser was explicitly specified, so I'm using the best available HTML parser for this system (\"lxml\"). This usually isn't a problem, but if you run this code on another system, or in a different virtual environment, it may use a different parser and behave differently.\n\nThe code that caused this warning is on line 36 of the file /home/chetana/gw-workspace/PeERnXxEyeLd/data_gee_modis_real_time.py. To get rid of this warning, pass the additional argument 'features=\"lxml\"' to the BeautifulSoup constructor.\n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n----------------------\n2000.02.18\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/PeERnXxEyeLd/data_gee_modis_real_time.py\", line 51, in <module>\n    get_latest_date()\n  File \"/home/chetana/gw-workspace/PeERnXxEyeLd/data_gee_modis_real_time.py\", line 44, in get_latest_date\n    new_date = datetime.strptime(row.text[:-1], '%y.%m.%d')\n  File \"/home/chetana/anaconda3/lib/python3.9/_strptime.py\", line 568, in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n  File \"/home/chetana/anaconda3/lib/python3.9/_strptime.py\", line 349, in _strptime\n    raise ValueError(\"time data %r does not match format %r\" %\nValueError: time data '2000.02.18' does not match format '%y.%m.%d'\n",
  "history_begin_time" : 1682278322325,
  "history_end_time" : 1682278324759,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "28P97CftS9He",
  "history_input" : "import subprocess\nfrom datetime import datetime\n\n\n# Write first python in Geoweaver\nimport os\nimport urllib.request, urllib.error, urllib.parse\nimport sys\n\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\n\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(dir_path)\n\ntile_list = ['h08v04', 'h09v04', 'h10v04', 'h11v04', 'h08v05', 'h09v05', 'h10v05', 'h07v06', 'h08v06', 'h09v06']\n\n\ndef get_latest_date():\n  try:\n    from BeautifulSoup import BeautifulSoup\n  except ImportError:\n      from bs4 import BeautifulSoup\n\n  modis_list_url = \"https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\n\n  print(modis_list_url)\n\n  response = subprocess.run(f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -np -e robots=off {modis_list_url}', shell=True,  stderr=subprocess.PIPE)\n  index_file = open('index.html', 'r')\n  webContent = index_file.read()\n\n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n  print('----------------------')\n  all_rows = parsed_html.body.findAll('td', attrs={'class':'indexcolname'})\n  \n  for row in all_rows:\n    if \"Directory\" not in row.text:\n      print(row.text[:-1])\n\nget_latest_date()\n#p = subprocess.run('wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -np -e robots=off https://n5eil01u.ecs.nsidc.org/SMAP/SPL4CMDL.006/2019.10.07/SMAP_L4_C_mdl_20191007T000000_Vv6042_001.h5 --quiet', shell=True,  stderr=subprocess.PIPE)\n\n",
  "history_output" : "/home/chetana/gw-workspace/28P97CftS9He\nhttps://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\n/home/chetana/gw-workspace/28P97CftS9He/data_gee_modis_real_time.py:36: GuessedAtParserWarning: No parser was explicitly specified, so I'm using the best available HTML parser for this system (\"lxml\"). This usually isn't a problem, but if you run this code on another system, or in a different virtual environment, it may use a different parser and behave differently.\n\nThe code that caused this warning is on line 36 of the file /home/chetana/gw-workspace/28P97CftS9He/data_gee_modis_real_time.py. To get rid of this warning, pass the additional argument 'features=\"lxml\"' to the BeautifulSoup constructor.\n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n----------------------\n2000.02.18\n2000.02.26\n2000.03.05\n2000.03.13\n2000.03.21\n2000.03.29\n2000.04.06\n2000.04.14\n2000.04.22\n2000.04.30\n2000.05.08\n2000.05.16\n2000.05.24\n2000.06.01\n2000.06.09\n2000.06.17\n2000.06.25\n2000.07.03\n2000.07.11\n2000.07.19\n2000.07.27\n2000.08.04\n2000.08.12\n2000.08.20\n2000.08.28\n2000.09.05\n2000.09.13\n2000.09.21\n2000.09.29\n2000.10.07\n2000.10.15\n2000.10.23\n2000.10.31\n2000.11.08\n2000.11.16\n2000.11.24\n2000.12.02\n2000.12.10\n2000.12.18\n2000.12.26\n2001.01.01\n2001.01.09\n2001.01.17\n2001.01.25\n2001.02.02\n2001.02.10\n2001.02.18\n2001.02.26\n2001.03.06\n2001.03.14\n2001.03.22\n2001.03.30\n2001.04.07\n2001.04.15\n2001.04.23\n2001.05.01\n2001.05.09\n2001.05.17\n2001.05.25\n2001.06.02\n2001.06.10\n2001.07.04\n2001.07.12\n2001.07.20\n2001.07.28\n2001.08.05\n2001.08.13\n2001.08.21\n2001.08.29\n2001.09.06\n2001.09.14\n2001.09.22\n2001.09.30\n2001.10.08\n2001.10.16\n2001.10.24\n2001.11.01\n2001.11.09\n2001.11.17\n2001.11.25\n2001.12.03\n2001.12.11\n2001.12.19\n2001.12.27\n2002.01.01\n2002.01.09\n2002.01.17\n2002.01.25\n2002.02.02\n2002.02.10\n2002.02.18\n2002.02.26\n2002.03.06\n2002.03.14\n2002.03.22\n2002.03.30\n2002.04.07\n2002.04.15\n2002.04.23\n2002.05.01\n2002.05.09\n2002.05.17\n2002.05.25\n2002.06.02\n2002.06.10\n2002.06.18\n2002.06.26\n2002.07.04\n2002.07.12\n2002.07.20\n2002.07.28\n2002.08.05\n2002.08.13\n2002.08.21\n2002.08.29\n2002.09.06\n2002.09.14\n2002.09.22\n2002.09.30\n2002.10.08\n2002.10.16\n2002.10.24\n2002.11.01\n2002.11.09\n2002.11.17\n2002.11.25\n2002.12.03\n2002.12.11\n2002.12.19\n2002.12.27\n2003.01.01\n2003.01.09\n2003.01.17\n2003.01.25\n2003.02.02\n2003.02.10\n2003.02.18\n2003.02.26\n2003.03.06\n2003.03.14\n2003.03.22\n2003.03.30\n2003.04.07\n2003.04.15\n2003.04.23\n2003.05.01\n2003.05.09\n2003.05.17\n2003.05.25\n2003.06.02\n2003.06.10\n2003.06.18\n2003.06.26\n2003.07.04\n2003.07.12\n2003.07.20\n2003.07.28\n2003.08.05\n2003.08.13\n2003.08.21\n2003.08.29\n2003.09.06\n2003.09.14\n2003.09.22\n2003.09.30\n2003.10.08\n2003.10.16\n2003.10.24\n2003.11.01\n2003.11.09\n2003.11.17\n2003.11.25\n2003.12.03\n2003.12.11\n2003.12.19\n2003.12.27\n2004.01.01\n2004.01.09\n2004.01.17\n2004.01.25\n2004.02.02\n2004.02.10\n2004.02.18\n2004.02.26\n2004.03.05\n2004.03.13\n2004.03.21\n2004.03.29\n2004.04.06\n2004.04.14\n2004.04.22\n2004.04.30\n2004.05.08\n2004.05.16\n2004.05.24\n2004.06.01\n2004.06.09\n2004.06.17\n2004.06.25\n2004.07.03\n2004.07.11\n2004.07.19\n2004.07.27\n2004.08.04\n2004.08.12\n2004.08.20\n2004.08.28\n2004.09.05\n2004.09.13\n2004.09.21\n2004.09.29\n2004.10.07\n2004.10.15\n2004.10.23\n2004.10.31\n2004.11.08\n2004.11.16\n2004.11.24\n2004.12.02\n2004.12.10\n2004.12.18\n2004.12.26\n2005.01.01\n2005.01.09\n2005.01.17\n2005.01.25\n2005.02.02\n2005.02.10\n2005.02.18\n2005.02.26\n2005.03.06\n2005.03.14\n2005.03.22\n2005.03.30\n2005.04.07\n2005.04.15\n2005.04.23\n2005.05.01\n2005.05.09\n2005.05.17\n2005.05.25\n2005.06.02\n2005.06.10\n2005.06.18\n2005.06.26\n2005.07.04\n2005.07.12\n2005.07.20\n2005.07.28\n2005.08.05\n2005.08.13\n2005.08.21\n2005.08.29\n2005.09.06\n2005.09.14\n2005.09.22\n2005.09.30\n2005.10.08\n2005.10.16\n2005.10.24\n2005.11.01\n2005.11.09\n2005.11.17\n2005.11.25\n2005.12.03\n2005.12.11\n2005.12.19\n2005.12.27\n2006.01.01\n2006.01.09\n2006.01.17\n2006.01.25\n2006.02.02\n2006.02.10\n2006.02.18\n2006.02.26\n2006.03.06\n2006.03.14\n2006.03.22\n2006.03.30\n2006.04.07\n2006.04.15\n2006.04.23\n2006.05.01\n2006.05.09\n2006.05.17\n2006.05.25\n2006.06.02\n2006.06.10\n2006.06.18\n2006.06.26\n2006.07.04\n2006.07.12\n2006.07.20\n2006.07.28\n2006.08.05\n2006.08.13\n2006.08.21\n2006.08.29\n2006.09.06\n2006.09.14\n2006.09.22\n2006.09.30\n2006.10.08\n2006.10.16\n2006.10.24\n2006.11.01\n2006.11.09\n2006.11.17\n2006.11.25\n2006.12.03\n2006.12.11\n2006.12.19\n2006.12.27\n2007.01.01\n2007.01.09\n2007.01.17\n2007.01.25\n2007.02.02\n2007.02.10\n2007.02.18\n2007.02.26\n2007.03.06\n2007.03.14\n2007.03.22\n2007.03.30\n2007.04.07\n2007.04.15\n2007.04.23\n2007.05.01\n2007.05.09\n2007.05.17\n2007.05.25\n2007.06.02\n2007.06.10\n2007.06.18\n2007.06.26\n2007.07.04\n2007.07.12\n2007.07.20\n2007.07.28\n2007.08.05\n2007.08.13\n2007.08.21\n2007.08.29\n2007.09.06\n2007.09.14\n2007.09.22\n2007.09.30\n2007.10.08\n2007.10.16\n2007.10.24\n2007.11.01\n2007.11.09\n2007.11.17\n2007.11.25\n2007.12.03\n2007.12.11\n2007.12.19\n2007.12.27\n2008.01.01\n2008.01.09\n2008.01.17\n2008.01.25\n2008.02.02\n2008.02.10\n2008.02.18\n2008.02.26\n2008.03.05\n2008.03.13\n2008.03.21\n2008.03.29\n2008.04.06\n2008.04.14\n2008.04.22\n2008.04.30\n2008.05.08\n2008.05.16\n2008.05.24\n2008.06.01\n2008.06.09\n2008.06.17\n2008.06.25\n2008.07.03\n2008.07.11\n2008.07.19\n2008.07.27\n2008.08.04\n2008.08.12\n2008.08.20\n2008.08.28\n2008.09.05\n2008.09.13\n2008.09.21\n2008.09.29\n2008.10.07\n2008.10.15\n2008.10.23\n2008.10.31\n2008.11.08\n2008.11.16\n2008.11.24\n2008.12.02\n2008.12.10\n2008.12.18\n2008.12.26\n2009.01.01\n2009.01.09\n2009.01.17\n2009.01.25\n2009.02.02\n2009.02.10\n2009.02.18\n2009.02.26\n2009.03.06\n2009.03.14\n2009.03.22\n2009.03.30\n2009.04.07\n2009.04.15\n2009.04.23\n2009.05.01\n2009.05.09\n2009.05.17\n2009.05.25\n2009.06.02\n2009.06.10\n2009.06.18\n2009.06.26\n2009.07.04\n2009.07.12\n2009.07.20\n2009.07.28\n2009.08.05\n2009.08.13\n2009.08.21\n2009.08.29\n2009.09.06\n2009.09.14\n2009.09.22\n2009.09.30\n2009.10.08\n2009.10.16\n2009.10.24\n2009.11.01\n2009.11.09\n2009.11.17\n2009.11.25\n2009.12.03\n2009.12.11\n2009.12.19\n2009.12.27\n2010.01.01\n2010.01.09\n2010.01.17\n2010.01.25\n2010.02.02\n2010.02.10\n2010.02.18\n2010.02.26\n2010.03.06\n2010.03.14\n2010.03.22\n2010.03.30\n2010.04.07\n2010.04.15\n2010.04.23\n2010.05.01\n2010.05.09\n2010.05.17\n2010.05.25\n2010.06.02\n2010.06.10\n2010.06.18\n2010.06.26\n2010.07.04\n2010.07.12\n2010.07.20\n2010.07.28\n2010.08.05\n2010.08.13\n2010.08.21\n2010.08.29\n2010.09.06\n2010.09.14\n2010.09.22\n2010.09.30\n2010.10.08\n2010.10.16\n2010.10.24\n2010.11.01\n2010.11.09\n2010.11.17\n2010.11.25\n2010.12.03\n2010.12.11\n2010.12.19\n2010.12.27\n2011.01.01\n2011.01.09\n2011.01.17\n2011.01.25\n2011.02.02\n2011.02.10\n2011.02.18\n2011.02.26\n2011.03.06\n2011.03.14\n2011.03.22\n2011.03.30\n2011.04.07\n2011.04.15\n2011.04.23\n2011.05.01\n2011.05.09\n2011.05.17\n2011.05.25\n2011.06.02\n2011.06.10\n2011.06.18\n2011.06.26\n2011.07.04\n2011.07.12\n2011.07.20\n2011.07.28\n2011.08.05\n2011.08.13\n2011.08.21\n2011.08.29\n2011.09.06\n2011.09.14\n2011.09.22\n2011.09.30\n2011.10.08\n2011.10.16\n2011.10.24\n2011.11.01\n2011.11.09\n2011.11.17\n2011.11.25\n2011.12.03\n2011.12.11\n2011.12.19\n2011.12.27\n2012.01.01\n2012.01.09\n2012.01.17\n2012.01.25\n2012.02.02\n2012.02.10\n2012.02.18\n2012.02.26\n2012.03.05\n2012.03.13\n2012.03.21\n2012.03.29\n2012.04.06\n2012.04.14\n2012.04.22\n2012.04.30\n2012.05.08\n2012.05.16\n2012.05.24\n2012.06.01\n2012.06.09\n2012.06.17\n2012.06.25\n2012.07.03\n2012.07.11\n2012.07.19\n2012.07.27\n2012.08.04\n2012.08.12\n2012.08.20\n2012.08.28\n2012.09.05\n2012.09.13\n2012.09.21\n2012.09.29\n2012.10.07\n2012.10.15\n2012.10.23\n2012.10.31\n2012.11.08\n2012.11.16\n2012.11.24\n2012.12.02\n2012.12.10\n2012.12.18\n2012.12.26\n2013.01.01\n2013.01.09\n2013.01.17\n2013.01.25\n2013.02.02\n2013.02.10\n2013.02.18\n2013.02.26\n2013.03.06\n2013.03.14\n2013.03.22\n2013.03.30\n2013.04.07\n2013.04.15\n2013.04.23\n2013.05.01\n2013.05.09\n2013.05.17\n2013.05.25\n2013.06.02\n2013.06.10\n2013.06.18\n2013.06.26\n2013.07.04\n2013.07.12\n2013.07.20\n2013.07.28\n2013.08.05\n2013.08.13\n2013.08.21\n2013.08.29\n2013.09.06\n2013.09.14\n2013.09.22\n2013.09.30\n2013.10.08\n2013.10.16\n2013.10.24\n2013.11.01\n2013.11.09\n2013.11.17\n2013.11.25\n2013.12.03\n2013.12.11\n2013.12.19\n2013.12.27\n2014.01.01\n2014.01.09\n2014.01.17\n2014.01.25\n2014.02.02\n2014.02.10\n2014.02.18\n2014.02.26\n2014.03.06\n2014.03.14\n2014.03.22\n2014.03.30\n2014.04.07\n2014.04.15\n2014.04.23\n2014.05.01\n2014.05.09\n2014.05.17\n2014.05.25\n2014.06.02\n2014.06.10\n2014.06.18\n2014.06.26\n2014.07.04\n2014.07.12\n2014.07.20\n2014.07.28\n2014.08.05\n2014.08.13\n2014.08.21\n2014.08.29\n2014.09.06\n2014.09.14\n2014.09.22\n2014.09.30\n2014.10.08\n2014.10.16\n2014.10.24\n2014.11.01\n2014.11.09\n2014.11.17\n2014.11.25\n2014.12.03\n2014.12.11\n2014.12.19\n2014.12.27\n2015.01.01\n2015.01.09\n2015.01.17\n2015.01.25\n2015.02.02\n2015.02.10\n2015.02.18\n2015.02.26\n2015.03.06\n2015.03.14\n2015.03.22\n2015.03.30\n2015.04.07\n2015.04.15\n2015.04.23\n2015.05.01\n2015.05.09\n2015.05.17\n2015.05.25\n2015.06.02\n2015.06.10\n2015.06.18\n2015.06.26\n2015.07.04\n2015.07.12\n2015.07.20\n2015.07.28\n2015.08.05\n2015.08.13\n2015.08.21\n2015.08.29\n2015.09.06\n2015.09.14\n2015.09.22\n2015.09.30\n2015.10.08\n2015.10.16\n2015.10.24\n2015.11.01\n2015.11.09\n2015.11.17\n2015.11.25\n2015.12.03\n2015.12.11\n2015.12.19\n2015.12.27\n2016.01.01\n2016.01.09\n2016.01.17\n2016.01.25\n2016.02.02\n2016.02.10\n2016.02.26\n2016.03.05\n2016.03.13\n2016.03.21\n2016.03.29\n2016.04.06\n2016.04.14\n2016.04.22\n2016.04.30\n2016.05.08\n2016.05.16\n2016.05.24\n2016.06.01\n2016.06.09\n2016.06.17\n2016.06.25\n2016.07.03\n2016.07.11\n2016.07.19\n2016.07.27\n2016.08.04\n2016.08.12\n2016.08.20\n2016.08.28\n2016.09.05\n2016.09.13\n2016.09.21\n2016.09.29\n2016.10.07\n2016.10.15\n2016.10.23\n2016.10.31\n2016.11.08\n2016.11.16\n2016.11.24\n2016.12.02\n2016.12.10\n2016.12.18\n2016.12.26\n2017.01.01\n2017.01.09\n2017.01.17\n2017.01.25\n2017.02.02\n2017.02.10\n2017.02.18\n2017.02.26\n2017.03.06\n2017.03.14\n2017.03.22\n2017.03.30\n2017.04.07\n2017.04.15\n2017.04.23\n2017.05.01\n2017.05.09\n2017.05.17\n2017.05.25\n2017.06.02\n2017.06.10\n2017.06.18\n2017.06.26\n2017.07.04\n2017.07.12\n2017.07.20\n2017.07.28\n2017.08.05\n2017.08.13\n2017.08.21\n2017.08.29\n2017.09.06\n2017.09.14\n2017.09.22\n2017.09.30\n2017.10.08\n2017.10.16\n2017.10.24\n2017.11.01\n2017.11.09\n2017.11.17\n2017.11.25\n2017.12.03\n2017.12.11\n2017.12.19\n2017.12.27\n2018.01.01\n2018.01.09\n2018.01.17\n2018.01.25\n2018.02.02\n2018.02.10\n2018.02.18\n2018.02.26\n2018.03.06\n2018.03.14\n2018.03.22\n2018.03.30\n2018.04.07\n2018.04.15\n2018.04.23\n2018.05.01\n2018.05.09\n2018.05.17\n2018.05.25\n2018.06.02\n2018.06.10\n2018.06.18\n2018.06.26\n2018.07.04\n2018.07.12\n2018.07.20\n2018.07.28\n2018.08.05\n2018.08.13\n2018.08.21\n2018.08.29\n2018.09.06\n2018.09.14\n2018.09.22\n2018.09.30\n2018.10.08\n2018.10.16\n2018.10.24\n2018.11.01\n2018.11.09\n2018.11.17\n2018.11.25\n2018.12.03\n2018.12.11\n2018.12.19\n2018.12.27\n2019.01.01\n2019.01.09\n2019.01.17\n2019.01.25\n2019.02.02\n2019.02.10\n2019.02.18\n2019.02.26\n2019.03.06\n2019.03.14\n2019.03.22\n2019.03.30\n2019.04.07\n2019.04.15\n2019.04.23\n2019.05.01\n2019.05.09\n2019.05.17\n2019.05.25\n2019.06.02\n2019.06.10\n2019.06.18\n2019.06.26\n2019.07.04\n2019.07.12\n2019.07.20\n2019.07.28\n2019.08.05\n2019.08.13\n2019.08.21\n2019.08.29\n2019.09.06\n2019.09.14\n2019.09.22\n2019.09.30\n2019.10.08\n2019.10.16\n2019.10.24\n2019.11.01\n2019.11.09\n2019.11.17\n2019.11.25\n2019.12.03\n2019.12.11\n2019.12.19\n2019.12.27\n2020.01.01\n2020.01.09\n2020.01.17\n2020.01.25\n2020.02.02\n2020.02.10\n2020.02.18\n2020.02.26\n2020.03.05\n2020.03.13\n2020.03.21\n2020.03.29\n2020.04.06\n2020.04.14\n2020.04.22\n2020.04.30\n2020.05.08\n2020.05.16\n2020.05.24\n2020.06.01\n2020.06.09\n2020.06.17\n2020.06.25\n2020.07.03\n2020.07.11\n2020.07.19\n2020.07.27\n2020.08.04\n2020.08.12\n2020.08.20\n2020.08.28\n2020.09.05\n2020.09.13\n2020.09.21\n2020.09.29\n2020.10.07\n2020.10.15\n2020.10.23\n2020.10.31\n2020.11.08\n2020.11.16\n2020.11.24\n2020.12.02\n2020.12.10\n2020.12.18\n2020.12.26\n2021.01.01\n2021.01.09\n2021.01.17\n2021.01.25\n2021.02.02\n2021.02.10\n2021.02.18\n2021.02.26\n2021.03.06\n2021.03.14\n2021.03.22\n2021.03.30\n2021.04.07\n2021.04.15\n2021.04.23\n2021.05.01\n2021.05.09\n2021.05.17\n2021.05.25\n2021.06.02\n2021.06.10\n2021.06.18\n2021.06.26\n2021.07.04\n2021.07.12\n2021.07.20\n2021.07.28\n2021.08.05\n2021.08.13\n2021.08.21\n2021.08.29\n2021.09.06\n2021.09.14\n2021.09.22\n2021.09.30\n2021.10.08\n2021.10.16\n2021.10.24\n2021.11.01\n2021.11.09\n2021.11.17\n2021.11.25\n2021.12.03\n2021.12.11\n2021.12.19\n2021.12.27\n2022.01.01\n2022.01.09\n2022.01.17\n2022.01.25\n2022.02.02\n2022.02.10\n2022.02.18\n2022.02.26\n2022.03.06\n2022.03.14\n2022.03.22\n2022.03.30\n2022.04.07\n2022.04.15\n2022.04.23\n2022.05.01\n2022.05.09\n2022.05.17\n2022.05.25\n2022.06.02\n2022.06.10\n2022.06.18\n2022.06.26\n2022.07.04\n2022.07.12\n2022.07.20\n2022.07.28\n2022.08.05\n2022.08.13\n2022.08.21\n2022.08.29\n2022.09.06\n2022.09.14\n2022.09.22\n2022.09.30\n2022.10.08\n2022.10.24\n2022.11.01\n2022.11.09\n2022.11.17\n2022.11.25\n2022.12.03\n2022.12.11\n2022.12.19\n2022.12.27\n2023.01.01\n2023.01.09\n2023.01.17\n2023.01.25\n2023.02.02\n2023.02.10\n2023.02.18\n2023.02.26\n2023.03.06\n2023.03.14\n2023.03.22\n2023.03.30\n2023.04.07\nDPRecentInserts_MOD10A2_061_2022082\nDPRecentInserts_MOD10A2_061_2022082\nDPRecentInserts_MOD10A2_061_2022090\nDPRecentInserts_MOD10A2_061_2022091\nDPRecentInserts_MOD10A2_061_2022092\nDPRecentInserts_MOD10A2_061_2022092\nDPRecentInserts_MOD10A2_061_2022093\nDPRecentInserts_MOD10A2_061_2022100\nDPRecentInserts_MOD10A2_061_2022101\nDPRecentInserts_MOD10A2_061_2022102\nDPRecentInserts_MOD10A2_061_2022110\nDPRecentInserts_MOD10A2_061_2022110\nDPRecentInserts_MOD10A2_061_2022110\nDPRecentInserts_MOD10A2_061_2022111\nDPRecentInserts_MOD10A2_061_2022111\nDPRecentInserts_MOD10A2_061_2022111\nDPRecentInserts_MOD10A2_061_2022111\nDPRecentInserts_MOD10A2_061_2022112\nDPRecentInserts_MOD10A2_061_2022112\nDPRecentInserts_MOD10A2_061_2022121\nDPRecentInserts_MOD10A2_061_2022121\nDPRecentInserts_MOD10A2_061_2022122\nDPRecentInserts_MOD10A2_061_2022122\nDPRecentInserts_MOD10A2_061_2022122\nDPRecentInserts_MOD10A2_061_2023010\nDPRecentInserts_MOD10A2_061_2023011\nDPRecentInserts_MOD10A2_061_2023011\nDPRecentInserts_MOD10A2_061_2023020\nDPRecentInserts_MOD10A2_061_2023020\nDPRecentInserts_MOD10A2_061_2023021\nDPRecentInserts_MOD10A2_061_2023021\nDPRecentInserts_MOD10A2_061_2023022\nDPRecentInserts_MOD10A2_061_2023022\nDPRecentInserts_MOD10A2_061_2023022\nDPRecentInserts_MOD10A2_061_2023031\nDPRecentInserts_MOD10A2_061_2023031\nDPRecentInserts_MOD10A2_061_2023032\nDPRecentInserts_MOD10A2_061_2023032\nDPRecentInserts_MOD10A2_061_2023033\nDPRecentInserts_MOD10A2_061_2023040\nDPRecentInserts_MOD10A2_061_2023041\nDPRecentInserts_MOD10A2_061_2023041\n",
  "history_begin_time" : 1682278146152,
  "history_end_time" : 1682278148662,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "l7KXuU1vohJG",
  "history_input" : "import subprocess\nfrom datetime import datetime\n\n\n# Write first python in Geoweaver\nimport os\nimport urllib.request, urllib.error, urllib.parse\nimport sys\n\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\n\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(dir_path)\n\ntile_list = ['h08v04', 'h09v04', 'h10v04', 'h11v04', 'h08v05', 'h09v05', 'h10v05', 'h07v06', 'h08v06', 'h09v06']\n\n\ndef get_latest_date():\n  try:\n    from BeautifulSoup import BeautifulSoup\n  except ImportError:\n      from bs4 import BeautifulSoup\n\n  modis_list_url = \"https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\n\n  print(modis_list_url)\n\n  response = subprocess.run(f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -np -e robots=off {modis_list_url}', shell=True,  stderr=subprocess.PIPE)\n  index_file = open('index.html', 'r')\n  webContent = index_file.read()\n\n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n  print('----------------------')\n  all_rows = parsed_html.body.findAll('td', attrs={'class':'indexcolname'})\n  \n  for row in all_rows:\n    if \"Directory\" not in row.text:\n      print(row.text[-1])\n\nget_latest_date()\n#p = subprocess.run('wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -np -e robots=off https://n5eil01u.ecs.nsidc.org/SMAP/SPL4CMDL.006/2019.10.07/SMAP_L4_C_mdl_20191007T000000_Vv6042_001.h5 --quiet', shell=True,  stderr=subprocess.PIPE)\n\n",
  "history_output" : "/home/chetana/gw-workspace/l7KXuU1vohJG\nhttps://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\n/home/chetana/gw-workspace/l7KXuU1vohJG/data_gee_modis_real_time.py:36: GuessedAtParserWarning: No parser was explicitly specified, so I'm using the best available HTML parser for this system (\"lxml\"). This usually isn't a problem, but if you run this code on another system, or in a different virtual environment, it may use a different parser and behave differently.\n\nThe code that caused this warning is on line 36 of the file /home/chetana/gw-workspace/l7KXuU1vohJG/data_gee_modis_real_time.py. To get rid of this warning, pass the additional argument 'features=\"lxml\"' to the BeautifulSoup constructor.\n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n----------------------\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n/\n0\n2\n8\n5\n2\n3\n0\n1\n0\n4\n1\n2\n3\n0\n1\n7\n8\n5\n6\n6\n7\n6\n8\n9\n6\n4\n9\n1\n3\n0\n1\n2\n3\n8\n1\n5\n2\n3\n1\n9\n0\n8\n",
  "history_begin_time" : 1682278136605,
  "history_end_time" : 1682278139098,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "gqRYXRPqZxVK",
  "history_input" : "import subprocess\nfrom datetime import datetime\n\n\n# Write first python in Geoweaver\nimport os\nimport urllib.request, urllib.error, urllib.parse\nimport sys\n\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\n\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(dir_path)\n\ntile_list = ['h08v04', 'h09v04', 'h10v04', 'h11v04', 'h08v05', 'h09v05', 'h10v05', 'h07v06', 'h08v06', 'h09v06']\n\n\ndef get_latest_date():\n  try:\n    from BeautifulSoup import BeautifulSoup\n  except ImportError:\n      from bs4 import BeautifulSoup\n\n  modis_list_url = \"https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\n\n  print(modis_list_url)\n\n  response = subprocess.run(f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -np -e robots=off {modis_list_url}', shell=True,  stderr=subprocess.PIPE)\n  index_file = open('index.html', 'r')\n  webContent = index_file.read()\n\n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n  print('----------------------')\n  all_rows = parsed_html.body.findAll('td', attrs={'class':'indexcolname'})\n  \n  for row in all_rows:\n    print(row.text)\n\nget_latest_date()\n#p = subprocess.run('wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -np -e robots=off https://n5eil01u.ecs.nsidc.org/SMAP/SPL4CMDL.006/2019.10.07/SMAP_L4_C_mdl_20191007T000000_Vv6042_001.h5 --quiet', shell=True,  stderr=subprocess.PIPE)\n\n",
  "history_output" : "/home/chetana/gw-workspace/gqRYXRPqZxVK\nhttps://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\n/home/chetana/gw-workspace/gqRYXRPqZxVK/data_gee_modis_real_time.py:36: GuessedAtParserWarning: No parser was explicitly specified, so I'm using the best available HTML parser for this system (\"lxml\"). This usually isn't a problem, but if you run this code on another system, or in a different virtual environment, it may use a different parser and behave differently.\n\nThe code that caused this warning is on line 36 of the file /home/chetana/gw-workspace/gqRYXRPqZxVK/data_gee_modis_real_time.py. To get rid of this warning, pass the additional argument 'features=\"lxml\"' to the BeautifulSoup constructor.\n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n----------------------\nParent Directory\n2000.02.18/\n2000.02.26/\n2000.03.05/\n2000.03.13/\n2000.03.21/\n2000.03.29/\n2000.04.06/\n2000.04.14/\n2000.04.22/\n2000.04.30/\n2000.05.08/\n2000.05.16/\n2000.05.24/\n2000.06.01/\n2000.06.09/\n2000.06.17/\n2000.06.25/\n2000.07.03/\n2000.07.11/\n2000.07.19/\n2000.07.27/\n2000.08.04/\n2000.08.12/\n2000.08.20/\n2000.08.28/\n2000.09.05/\n2000.09.13/\n2000.09.21/\n2000.09.29/\n2000.10.07/\n2000.10.15/\n2000.10.23/\n2000.10.31/\n2000.11.08/\n2000.11.16/\n2000.11.24/\n2000.12.02/\n2000.12.10/\n2000.12.18/\n2000.12.26/\n2001.01.01/\n2001.01.09/\n2001.01.17/\n2001.01.25/\n2001.02.02/\n2001.02.10/\n2001.02.18/\n2001.02.26/\n2001.03.06/\n2001.03.14/\n2001.03.22/\n2001.03.30/\n2001.04.07/\n2001.04.15/\n2001.04.23/\n2001.05.01/\n2001.05.09/\n2001.05.17/\n2001.05.25/\n2001.06.02/\n2001.06.10/\n2001.07.04/\n2001.07.12/\n2001.07.20/\n2001.07.28/\n2001.08.05/\n2001.08.13/\n2001.08.21/\n2001.08.29/\n2001.09.06/\n2001.09.14/\n2001.09.22/\n2001.09.30/\n2001.10.08/\n2001.10.16/\n2001.10.24/\n2001.11.01/\n2001.11.09/\n2001.11.17/\n2001.11.25/\n2001.12.03/\n2001.12.11/\n2001.12.19/\n2001.12.27/\n2002.01.01/\n2002.01.09/\n2002.01.17/\n2002.01.25/\n2002.02.02/\n2002.02.10/\n2002.02.18/\n2002.02.26/\n2002.03.06/\n2002.03.14/\n2002.03.22/\n2002.03.30/\n2002.04.07/\n2002.04.15/\n2002.04.23/\n2002.05.01/\n2002.05.09/\n2002.05.17/\n2002.05.25/\n2002.06.02/\n2002.06.10/\n2002.06.18/\n2002.06.26/\n2002.07.04/\n2002.07.12/\n2002.07.20/\n2002.07.28/\n2002.08.05/\n2002.08.13/\n2002.08.21/\n2002.08.29/\n2002.09.06/\n2002.09.14/\n2002.09.22/\n2002.09.30/\n2002.10.08/\n2002.10.16/\n2002.10.24/\n2002.11.01/\n2002.11.09/\n2002.11.17/\n2002.11.25/\n2002.12.03/\n2002.12.11/\n2002.12.19/\n2002.12.27/\n2003.01.01/\n2003.01.09/\n2003.01.17/\n2003.01.25/\n2003.02.02/\n2003.02.10/\n2003.02.18/\n2003.02.26/\n2003.03.06/\n2003.03.14/\n2003.03.22/\n2003.03.30/\n2003.04.07/\n2003.04.15/\n2003.04.23/\n2003.05.01/\n2003.05.09/\n2003.05.17/\n2003.05.25/\n2003.06.02/\n2003.06.10/\n2003.06.18/\n2003.06.26/\n2003.07.04/\n2003.07.12/\n2003.07.20/\n2003.07.28/\n2003.08.05/\n2003.08.13/\n2003.08.21/\n2003.08.29/\n2003.09.06/\n2003.09.14/\n2003.09.22/\n2003.09.30/\n2003.10.08/\n2003.10.16/\n2003.10.24/\n2003.11.01/\n2003.11.09/\n2003.11.17/\n2003.11.25/\n2003.12.03/\n2003.12.11/\n2003.12.19/\n2003.12.27/\n2004.01.01/\n2004.01.09/\n2004.01.17/\n2004.01.25/\n2004.02.02/\n2004.02.10/\n2004.02.18/\n2004.02.26/\n2004.03.05/\n2004.03.13/\n2004.03.21/\n2004.03.29/\n2004.04.06/\n2004.04.14/\n2004.04.22/\n2004.04.30/\n2004.05.08/\n2004.05.16/\n2004.05.24/\n2004.06.01/\n2004.06.09/\n2004.06.17/\n2004.06.25/\n2004.07.03/\n2004.07.11/\n2004.07.19/\n2004.07.27/\n2004.08.04/\n2004.08.12/\n2004.08.20/\n2004.08.28/\n2004.09.05/\n2004.09.13/\n2004.09.21/\n2004.09.29/\n2004.10.07/\n2004.10.15/\n2004.10.23/\n2004.10.31/\n2004.11.08/\n2004.11.16/\n2004.11.24/\n2004.12.02/\n2004.12.10/\n2004.12.18/\n2004.12.26/\n2005.01.01/\n2005.01.09/\n2005.01.17/\n2005.01.25/\n2005.02.02/\n2005.02.10/\n2005.02.18/\n2005.02.26/\n2005.03.06/\n2005.03.14/\n2005.03.22/\n2005.03.30/\n2005.04.07/\n2005.04.15/\n2005.04.23/\n2005.05.01/\n2005.05.09/\n2005.05.17/\n2005.05.25/\n2005.06.02/\n2005.06.10/\n2005.06.18/\n2005.06.26/\n2005.07.04/\n2005.07.12/\n2005.07.20/\n2005.07.28/\n2005.08.05/\n2005.08.13/\n2005.08.21/\n2005.08.29/\n2005.09.06/\n2005.09.14/\n2005.09.22/\n2005.09.30/\n2005.10.08/\n2005.10.16/\n2005.10.24/\n2005.11.01/\n2005.11.09/\n2005.11.17/\n2005.11.25/\n2005.12.03/\n2005.12.11/\n2005.12.19/\n2005.12.27/\n2006.01.01/\n2006.01.09/\n2006.01.17/\n2006.01.25/\n2006.02.02/\n2006.02.10/\n2006.02.18/\n2006.02.26/\n2006.03.06/\n2006.03.14/\n2006.03.22/\n2006.03.30/\n2006.04.07/\n2006.04.15/\n2006.04.23/\n2006.05.01/\n2006.05.09/\n2006.05.17/\n2006.05.25/\n2006.06.02/\n2006.06.10/\n2006.06.18/\n2006.06.26/\n2006.07.04/\n2006.07.12/\n2006.07.20/\n2006.07.28/\n2006.08.05/\n2006.08.13/\n2006.08.21/\n2006.08.29/\n2006.09.06/\n2006.09.14/\n2006.09.22/\n2006.09.30/\n2006.10.08/\n2006.10.16/\n2006.10.24/\n2006.11.01/\n2006.11.09/\n2006.11.17/\n2006.11.25/\n2006.12.03/\n2006.12.11/\n2006.12.19/\n2006.12.27/\n2007.01.01/\n2007.01.09/\n2007.01.17/\n2007.01.25/\n2007.02.02/\n2007.02.10/\n2007.02.18/\n2007.02.26/\n2007.03.06/\n2007.03.14/\n2007.03.22/\n2007.03.30/\n2007.04.07/\n2007.04.15/\n2007.04.23/\n2007.05.01/\n2007.05.09/\n2007.05.17/\n2007.05.25/\n2007.06.02/\n2007.06.10/\n2007.06.18/\n2007.06.26/\n2007.07.04/\n2007.07.12/\n2007.07.20/\n2007.07.28/\n2007.08.05/\n2007.08.13/\n2007.08.21/\n2007.08.29/\n2007.09.06/\n2007.09.14/\n2007.09.22/\n2007.09.30/\n2007.10.08/\n2007.10.16/\n2007.10.24/\n2007.11.01/\n2007.11.09/\n2007.11.17/\n2007.11.25/\n2007.12.03/\n2007.12.11/\n2007.12.19/\n2007.12.27/\n2008.01.01/\n2008.01.09/\n2008.01.17/\n2008.01.25/\n2008.02.02/\n2008.02.10/\n2008.02.18/\n2008.02.26/\n2008.03.05/\n2008.03.13/\n2008.03.21/\n2008.03.29/\n2008.04.06/\n2008.04.14/\n2008.04.22/\n2008.04.30/\n2008.05.08/\n2008.05.16/\n2008.05.24/\n2008.06.01/\n2008.06.09/\n2008.06.17/\n2008.06.25/\n2008.07.03/\n2008.07.11/\n2008.07.19/\n2008.07.27/\n2008.08.04/\n2008.08.12/\n2008.08.20/\n2008.08.28/\n2008.09.05/\n2008.09.13/\n2008.09.21/\n2008.09.29/\n2008.10.07/\n2008.10.15/\n2008.10.23/\n2008.10.31/\n2008.11.08/\n2008.11.16/\n2008.11.24/\n2008.12.02/\n2008.12.10/\n2008.12.18/\n2008.12.26/\n2009.01.01/\n2009.01.09/\n2009.01.17/\n2009.01.25/\n2009.02.02/\n2009.02.10/\n2009.02.18/\n2009.02.26/\n2009.03.06/\n2009.03.14/\n2009.03.22/\n2009.03.30/\n2009.04.07/\n2009.04.15/\n2009.04.23/\n2009.05.01/\n2009.05.09/\n2009.05.17/\n2009.05.25/\n2009.06.02/\n2009.06.10/\n2009.06.18/\n2009.06.26/\n2009.07.04/\n2009.07.12/\n2009.07.20/\n2009.07.28/\n2009.08.05/\n2009.08.13/\n2009.08.21/\n2009.08.29/\n2009.09.06/\n2009.09.14/\n2009.09.22/\n2009.09.30/\n2009.10.08/\n2009.10.16/\n2009.10.24/\n2009.11.01/\n2009.11.09/\n2009.11.17/\n2009.11.25/\n2009.12.03/\n2009.12.11/\n2009.12.19/\n2009.12.27/\n2010.01.01/\n2010.01.09/\n2010.01.17/\n2010.01.25/\n2010.02.02/\n2010.02.10/\n2010.02.18/\n2010.02.26/\n2010.03.06/\n2010.03.14/\n2010.03.22/\n2010.03.30/\n2010.04.07/\n2010.04.15/\n2010.04.23/\n2010.05.01/\n2010.05.09/\n2010.05.17/\n2010.05.25/\n2010.06.02/\n2010.06.10/\n2010.06.18/\n2010.06.26/\n2010.07.04/\n2010.07.12/\n2010.07.20/\n2010.07.28/\n2010.08.05/\n2010.08.13/\n2010.08.21/\n2010.08.29/\n2010.09.06/\n2010.09.14/\n2010.09.22/\n2010.09.30/\n2010.10.08/\n2010.10.16/\n2010.10.24/\n2010.11.01/\n2010.11.09/\n2010.11.17/\n2010.11.25/\n2010.12.03/\n2010.12.11/\n2010.12.19/\n2010.12.27/\n2011.01.01/\n2011.01.09/\n2011.01.17/\n2011.01.25/\n2011.02.02/\n2011.02.10/\n2011.02.18/\n2011.02.26/\n2011.03.06/\n2011.03.14/\n2011.03.22/\n2011.03.30/\n2011.04.07/\n2011.04.15/\n2011.04.23/\n2011.05.01/\n2011.05.09/\n2011.05.17/\n2011.05.25/\n2011.06.02/\n2011.06.10/\n2011.06.18/\n2011.06.26/\n2011.07.04/\n2011.07.12/\n2011.07.20/\n2011.07.28/\n2011.08.05/\n2011.08.13/\n2011.08.21/\n2011.08.29/\n2011.09.06/\n2011.09.14/\n2011.09.22/\n2011.09.30/\n2011.10.08/\n2011.10.16/\n2011.10.24/\n2011.11.01/\n2011.11.09/\n2011.11.17/\n2011.11.25/\n2011.12.03/\n2011.12.11/\n2011.12.19/\n2011.12.27/\n2012.01.01/\n2012.01.09/\n2012.01.17/\n2012.01.25/\n2012.02.02/\n2012.02.10/\n2012.02.18/\n2012.02.26/\n2012.03.05/\n2012.03.13/\n2012.03.21/\n2012.03.29/\n2012.04.06/\n2012.04.14/\n2012.04.22/\n2012.04.30/\n2012.05.08/\n2012.05.16/\n2012.05.24/\n2012.06.01/\n2012.06.09/\n2012.06.17/\n2012.06.25/\n2012.07.03/\n2012.07.11/\n2012.07.19/\n2012.07.27/\n2012.08.04/\n2012.08.12/\n2012.08.20/\n2012.08.28/\n2012.09.05/\n2012.09.13/\n2012.09.21/\n2012.09.29/\n2012.10.07/\n2012.10.15/\n2012.10.23/\n2012.10.31/\n2012.11.08/\n2012.11.16/\n2012.11.24/\n2012.12.02/\n2012.12.10/\n2012.12.18/\n2012.12.26/\n2013.01.01/\n2013.01.09/\n2013.01.17/\n2013.01.25/\n2013.02.02/\n2013.02.10/\n2013.02.18/\n2013.02.26/\n2013.03.06/\n2013.03.14/\n2013.03.22/\n2013.03.30/\n2013.04.07/\n2013.04.15/\n2013.04.23/\n2013.05.01/\n2013.05.09/\n2013.05.17/\n2013.05.25/\n2013.06.02/\n2013.06.10/\n2013.06.18/\n2013.06.26/\n2013.07.04/\n2013.07.12/\n2013.07.20/\n2013.07.28/\n2013.08.05/\n2013.08.13/\n2013.08.21/\n2013.08.29/\n2013.09.06/\n2013.09.14/\n2013.09.22/\n2013.09.30/\n2013.10.08/\n2013.10.16/\n2013.10.24/\n2013.11.01/\n2013.11.09/\n2013.11.17/\n2013.11.25/\n2013.12.03/\n2013.12.11/\n2013.12.19/\n2013.12.27/\n2014.01.01/\n2014.01.09/\n2014.01.17/\n2014.01.25/\n2014.02.02/\n2014.02.10/\n2014.02.18/\n2014.02.26/\n2014.03.06/\n2014.03.14/\n2014.03.22/\n2014.03.30/\n2014.04.07/\n2014.04.15/\n2014.04.23/\n2014.05.01/\n2014.05.09/\n2014.05.17/\n2014.05.25/\n2014.06.02/\n2014.06.10/\n2014.06.18/\n2014.06.26/\n2014.07.04/\n2014.07.12/\n2014.07.20/\n2014.07.28/\n2014.08.05/\n2014.08.13/\n2014.08.21/\n2014.08.29/\n2014.09.06/\n2014.09.14/\n2014.09.22/\n2014.09.30/\n2014.10.08/\n2014.10.16/\n2014.10.24/\n2014.11.01/\n2014.11.09/\n2014.11.17/\n2014.11.25/\n2014.12.03/\n2014.12.11/\n2014.12.19/\n2014.12.27/\n2015.01.01/\n2015.01.09/\n2015.01.17/\n2015.01.25/\n2015.02.02/\n2015.02.10/\n2015.02.18/\n2015.02.26/\n2015.03.06/\n2015.03.14/\n2015.03.22/\n2015.03.30/\n2015.04.07/\n2015.04.15/\n2015.04.23/\n2015.05.01/\n2015.05.09/\n2015.05.17/\n2015.05.25/\n2015.06.02/\n2015.06.10/\n2015.06.18/\n2015.06.26/\n2015.07.04/\n2015.07.12/\n2015.07.20/\n2015.07.28/\n2015.08.05/\n2015.08.13/\n2015.08.21/\n2015.08.29/\n2015.09.06/\n2015.09.14/\n2015.09.22/\n2015.09.30/\n2015.10.08/\n2015.10.16/\n2015.10.24/\n2015.11.01/\n2015.11.09/\n2015.11.17/\n2015.11.25/\n2015.12.03/\n2015.12.11/\n2015.12.19/\n2015.12.27/\n2016.01.01/\n2016.01.09/\n2016.01.17/\n2016.01.25/\n2016.02.02/\n2016.02.10/\n2016.02.26/\n2016.03.05/\n2016.03.13/\n2016.03.21/\n2016.03.29/\n2016.04.06/\n2016.04.14/\n2016.04.22/\n2016.04.30/\n2016.05.08/\n2016.05.16/\n2016.05.24/\n2016.06.01/\n2016.06.09/\n2016.06.17/\n2016.06.25/\n2016.07.03/\n2016.07.11/\n2016.07.19/\n2016.07.27/\n2016.08.04/\n2016.08.12/\n2016.08.20/\n2016.08.28/\n2016.09.05/\n2016.09.13/\n2016.09.21/\n2016.09.29/\n2016.10.07/\n2016.10.15/\n2016.10.23/\n2016.10.31/\n2016.11.08/\n2016.11.16/\n2016.11.24/\n2016.12.02/\n2016.12.10/\n2016.12.18/\n2016.12.26/\n2017.01.01/\n2017.01.09/\n2017.01.17/\n2017.01.25/\n2017.02.02/\n2017.02.10/\n2017.02.18/\n2017.02.26/\n2017.03.06/\n2017.03.14/\n2017.03.22/\n2017.03.30/\n2017.04.07/\n2017.04.15/\n2017.04.23/\n2017.05.01/\n2017.05.09/\n2017.05.17/\n2017.05.25/\n2017.06.02/\n2017.06.10/\n2017.06.18/\n2017.06.26/\n2017.07.04/\n2017.07.12/\n2017.07.20/\n2017.07.28/\n2017.08.05/\n2017.08.13/\n2017.08.21/\n2017.08.29/\n2017.09.06/\n2017.09.14/\n2017.09.22/\n2017.09.30/\n2017.10.08/\n2017.10.16/\n2017.10.24/\n2017.11.01/\n2017.11.09/\n2017.11.17/\n2017.11.25/\n2017.12.03/\n2017.12.11/\n2017.12.19/\n2017.12.27/\n2018.01.01/\n2018.01.09/\n2018.01.17/\n2018.01.25/\n2018.02.02/\n2018.02.10/\n2018.02.18/\n2018.02.26/\n2018.03.06/\n2018.03.14/\n2018.03.22/\n2018.03.30/\n2018.04.07/\n2018.04.15/\n2018.04.23/\n2018.05.01/\n2018.05.09/\n2018.05.17/\n2018.05.25/\n2018.06.02/\n2018.06.10/\n2018.06.18/\n2018.06.26/\n2018.07.04/\n2018.07.12/\n2018.07.20/\n2018.07.28/\n2018.08.05/\n2018.08.13/\n2018.08.21/\n2018.08.29/\n2018.09.06/\n2018.09.14/\n2018.09.22/\n2018.09.30/\n2018.10.08/\n2018.10.16/\n2018.10.24/\n2018.11.01/\n2018.11.09/\n2018.11.17/\n2018.11.25/\n2018.12.03/\n2018.12.11/\n2018.12.19/\n2018.12.27/\n2019.01.01/\n2019.01.09/\n2019.01.17/\n2019.01.25/\n2019.02.02/\n2019.02.10/\n2019.02.18/\n2019.02.26/\n2019.03.06/\n2019.03.14/\n2019.03.22/\n2019.03.30/\n2019.04.07/\n2019.04.15/\n2019.04.23/\n2019.05.01/\n2019.05.09/\n2019.05.17/\n2019.05.25/\n2019.06.02/\n2019.06.10/\n2019.06.18/\n2019.06.26/\n2019.07.04/\n2019.07.12/\n2019.07.20/\n2019.07.28/\n2019.08.05/\n2019.08.13/\n2019.08.21/\n2019.08.29/\n2019.09.06/\n2019.09.14/\n2019.09.22/\n2019.09.30/\n2019.10.08/\n2019.10.16/\n2019.10.24/\n2019.11.01/\n2019.11.09/\n2019.11.17/\n2019.11.25/\n2019.12.03/\n2019.12.11/\n2019.12.19/\n2019.12.27/\n2020.01.01/\n2020.01.09/\n2020.01.17/\n2020.01.25/\n2020.02.02/\n2020.02.10/\n2020.02.18/\n2020.02.26/\n2020.03.05/\n2020.03.13/\n2020.03.21/\n2020.03.29/\n2020.04.06/\n2020.04.14/\n2020.04.22/\n2020.04.30/\n2020.05.08/\n2020.05.16/\n2020.05.24/\n2020.06.01/\n2020.06.09/\n2020.06.17/\n2020.06.25/\n2020.07.03/\n2020.07.11/\n2020.07.19/\n2020.07.27/\n2020.08.04/\n2020.08.12/\n2020.08.20/\n2020.08.28/\n2020.09.05/\n2020.09.13/\n2020.09.21/\n2020.09.29/\n2020.10.07/\n2020.10.15/\n2020.10.23/\n2020.10.31/\n2020.11.08/\n2020.11.16/\n2020.11.24/\n2020.12.02/\n2020.12.10/\n2020.12.18/\n2020.12.26/\n2021.01.01/\n2021.01.09/\n2021.01.17/\n2021.01.25/\n2021.02.02/\n2021.02.10/\n2021.02.18/\n2021.02.26/\n2021.03.06/\n2021.03.14/\n2021.03.22/\n2021.03.30/\n2021.04.07/\n2021.04.15/\n2021.04.23/\n2021.05.01/\n2021.05.09/\n2021.05.17/\n2021.05.25/\n2021.06.02/\n2021.06.10/\n2021.06.18/\n2021.06.26/\n2021.07.04/\n2021.07.12/\n2021.07.20/\n2021.07.28/\n2021.08.05/\n2021.08.13/\n2021.08.21/\n2021.08.29/\n2021.09.06/\n2021.09.14/\n2021.09.22/\n2021.09.30/\n2021.10.08/\n2021.10.16/\n2021.10.24/\n2021.11.01/\n2021.11.09/\n2021.11.17/\n2021.11.25/\n2021.12.03/\n2021.12.11/\n2021.12.19/\n2021.12.27/\n2022.01.01/\n2022.01.09/\n2022.01.17/\n2022.01.25/\n2022.02.02/\n2022.02.10/\n2022.02.18/\n2022.02.26/\n2022.03.06/\n2022.03.14/\n2022.03.22/\n2022.03.30/\n2022.04.07/\n2022.04.15/\n2022.04.23/\n2022.05.01/\n2022.05.09/\n2022.05.17/\n2022.05.25/\n2022.06.02/\n2022.06.10/\n2022.06.18/\n2022.06.26/\n2022.07.04/\n2022.07.12/\n2022.07.20/\n2022.07.28/\n2022.08.05/\n2022.08.13/\n2022.08.21/\n2022.08.29/\n2022.09.06/\n2022.09.14/\n2022.09.22/\n2022.09.30/\n2022.10.08/\n2022.10.24/\n2022.11.01/\n2022.11.09/\n2022.11.17/\n2022.11.25/\n2022.12.03/\n2022.12.11/\n2022.12.19/\n2022.12.27/\n2023.01.01/\n2023.01.09/\n2023.01.17/\n2023.01.25/\n2023.02.02/\n2023.02.10/\n2023.02.18/\n2023.02.26/\n2023.03.06/\n2023.03.14/\n2023.03.22/\n2023.03.30/\n2023.04.07/\nDPRecentInserts_MOD10A2_061_20220820\nDPRecentInserts_MOD10A2_061_20220822\nDPRecentInserts_MOD10A2_061_20220908\nDPRecentInserts_MOD10A2_061_20220915\nDPRecentInserts_MOD10A2_061_20220922\nDPRecentInserts_MOD10A2_061_20220923\nDPRecentInserts_MOD10A2_061_20220930\nDPRecentInserts_MOD10A2_061_20221001\nDPRecentInserts_MOD10A2_061_20221010\nDPRecentInserts_MOD10A2_061_20221024\nDPRecentInserts_MOD10A2_061_20221101\nDPRecentInserts_MOD10A2_061_20221102\nDPRecentInserts_MOD10A2_061_20221103\nDPRecentInserts_MOD10A2_061_20221110\nDPRecentInserts_MOD10A2_061_20221111\nDPRecentInserts_MOD10A2_061_20221117\nDPRecentInserts_MOD10A2_061_20221118\nDPRecentInserts_MOD10A2_061_20221125\nDPRecentInserts_MOD10A2_061_20221126\nDPRecentInserts_MOD10A2_061_20221216\nDPRecentInserts_MOD10A2_061_20221217\nDPRecentInserts_MOD10A2_061_20221226\nDPRecentInserts_MOD10A2_061_20221228\nDPRecentInserts_MOD10A2_061_20221229\nDPRecentInserts_MOD10A2_061_20230106\nDPRecentInserts_MOD10A2_061_20230114\nDPRecentInserts_MOD10A2_061_20230119\nDPRecentInserts_MOD10A2_061_20230201\nDPRecentInserts_MOD10A2_061_20230203\nDPRecentInserts_MOD10A2_061_20230210\nDPRecentInserts_MOD10A2_061_20230211\nDPRecentInserts_MOD10A2_061_20230222\nDPRecentInserts_MOD10A2_061_20230223\nDPRecentInserts_MOD10A2_061_20230228\nDPRecentInserts_MOD10A2_061_20230311\nDPRecentInserts_MOD10A2_061_20230315\nDPRecentInserts_MOD10A2_061_20230322\nDPRecentInserts_MOD10A2_061_20230323\nDPRecentInserts_MOD10A2_061_20230331\nDPRecentInserts_MOD10A2_061_20230409\nDPRecentInserts_MOD10A2_061_20230410\nDPRecentInserts_MOD10A2_061_20230418\n",
  "history_begin_time" : 1682278102841,
  "history_end_time" : 1682278105321,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "sp54xIpaqNy3",
  "history_input" : "import subprocess\nfrom datetime import datetime\n\n\n# Write first python in Geoweaver\nimport os\nimport urllib.request, urllib.error, urllib.parse\nimport sys\n\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\n\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(dir_path)\n\ntile_list = ['h08v04', 'h09v04', 'h10v04', 'h11v04', 'h08v05', 'h09v05', 'h10v05', 'h07v06', 'h08v06', 'h09v06']\n\n\ndef get_latest_date():\n  try:\n    from BeautifulSoup import BeautifulSoup\n  except ImportError:\n      from bs4 import BeautifulSoup\n\n  modis_list_url = \"https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\n\n  print(modis_list_url)\n\n  response = subprocess.run(f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -np -e robots=off {modis_list_url}', shell=True,  stderr=subprocess.PIPE)\n  index_file = open('index.html', 'r')\n  webContent = index_file.read()\n\n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n  print('----------------------')\n  all_rows = parsed_html.body.findAll('td', attrs={'class':'indexcolname'})\n  \n  for row in all_rows:\n    print(row.text.split('\"'))\n\nget_latest_date()\n#p = subprocess.run('wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -np -e robots=off https://n5eil01u.ecs.nsidc.org/SMAP/SPL4CMDL.006/2019.10.07/SMAP_L4_C_mdl_20191007T000000_Vv6042_001.h5 --quiet', shell=True,  stderr=subprocess.PIPE)\n\n",
  "history_output" : "/home/chetana/gw-workspace/sp54xIpaqNy3\nhttps://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\n/home/chetana/gw-workspace/sp54xIpaqNy3/data_gee_modis_real_time.py:36: GuessedAtParserWarning: No parser was explicitly specified, so I'm using the best available HTML parser for this system (\"lxml\"). This usually isn't a problem, but if you run this code on another system, or in a different virtual environment, it may use a different parser and behave differently.\n\nThe code that caused this warning is on line 36 of the file /home/chetana/gw-workspace/sp54xIpaqNy3/data_gee_modis_real_time.py. To get rid of this warning, pass the additional argument 'features=\"lxml\"' to the BeautifulSoup constructor.\n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n----------------------\n['Parent Directory']\n['2000.02.18/']\n['2000.02.26/']\n['2000.03.05/']\n['2000.03.13/']\n['2000.03.21/']\n['2000.03.29/']\n['2000.04.06/']\n['2000.04.14/']\n['2000.04.22/']\n['2000.04.30/']\n['2000.05.08/']\n['2000.05.16/']\n['2000.05.24/']\n['2000.06.01/']\n['2000.06.09/']\n['2000.06.17/']\n['2000.06.25/']\n['2000.07.03/']\n['2000.07.11/']\n['2000.07.19/']\n['2000.07.27/']\n['2000.08.04/']\n['2000.08.12/']\n['2000.08.20/']\n['2000.08.28/']\n['2000.09.05/']\n['2000.09.13/']\n['2000.09.21/']\n['2000.09.29/']\n['2000.10.07/']\n['2000.10.15/']\n['2000.10.23/']\n['2000.10.31/']\n['2000.11.08/']\n['2000.11.16/']\n['2000.11.24/']\n['2000.12.02/']\n['2000.12.10/']\n['2000.12.18/']\n['2000.12.26/']\n['2001.01.01/']\n['2001.01.09/']\n['2001.01.17/']\n['2001.01.25/']\n['2001.02.02/']\n['2001.02.10/']\n['2001.02.18/']\n['2001.02.26/']\n['2001.03.06/']\n['2001.03.14/']\n['2001.03.22/']\n['2001.03.30/']\n['2001.04.07/']\n['2001.04.15/']\n['2001.04.23/']\n['2001.05.01/']\n['2001.05.09/']\n['2001.05.17/']\n['2001.05.25/']\n['2001.06.02/']\n['2001.06.10/']\n['2001.07.04/']\n['2001.07.12/']\n['2001.07.20/']\n['2001.07.28/']\n['2001.08.05/']\n['2001.08.13/']\n['2001.08.21/']\n['2001.08.29/']\n['2001.09.06/']\n['2001.09.14/']\n['2001.09.22/']\n['2001.09.30/']\n['2001.10.08/']\n['2001.10.16/']\n['2001.10.24/']\n['2001.11.01/']\n['2001.11.09/']\n['2001.11.17/']\n['2001.11.25/']\n['2001.12.03/']\n['2001.12.11/']\n['2001.12.19/']\n['2001.12.27/']\n['2002.01.01/']\n['2002.01.09/']\n['2002.01.17/']\n['2002.01.25/']\n['2002.02.02/']\n['2002.02.10/']\n['2002.02.18/']\n['2002.02.26/']\n['2002.03.06/']\n['2002.03.14/']\n['2002.03.22/']\n['2002.03.30/']\n['2002.04.07/']\n['2002.04.15/']\n['2002.04.23/']\n['2002.05.01/']\n['2002.05.09/']\n['2002.05.17/']\n['2002.05.25/']\n['2002.06.02/']\n['2002.06.10/']\n['2002.06.18/']\n['2002.06.26/']\n['2002.07.04/']\n['2002.07.12/']\n['2002.07.20/']\n['2002.07.28/']\n['2002.08.05/']\n['2002.08.13/']\n['2002.08.21/']\n['2002.08.29/']\n['2002.09.06/']\n['2002.09.14/']\n['2002.09.22/']\n['2002.09.30/']\n['2002.10.08/']\n['2002.10.16/']\n['2002.10.24/']\n['2002.11.01/']\n['2002.11.09/']\n['2002.11.17/']\n['2002.11.25/']\n['2002.12.03/']\n['2002.12.11/']\n['2002.12.19/']\n['2002.12.27/']\n['2003.01.01/']\n['2003.01.09/']\n['2003.01.17/']\n['2003.01.25/']\n['2003.02.02/']\n['2003.02.10/']\n['2003.02.18/']\n['2003.02.26/']\n['2003.03.06/']\n['2003.03.14/']\n['2003.03.22/']\n['2003.03.30/']\n['2003.04.07/']\n['2003.04.15/']\n['2003.04.23/']\n['2003.05.01/']\n['2003.05.09/']\n['2003.05.17/']\n['2003.05.25/']\n['2003.06.02/']\n['2003.06.10/']\n['2003.06.18/']\n['2003.06.26/']\n['2003.07.04/']\n['2003.07.12/']\n['2003.07.20/']\n['2003.07.28/']\n['2003.08.05/']\n['2003.08.13/']\n['2003.08.21/']\n['2003.08.29/']\n['2003.09.06/']\n['2003.09.14/']\n['2003.09.22/']\n['2003.09.30/']\n['2003.10.08/']\n['2003.10.16/']\n['2003.10.24/']\n['2003.11.01/']\n['2003.11.09/']\n['2003.11.17/']\n['2003.11.25/']\n['2003.12.03/']\n['2003.12.11/']\n['2003.12.19/']\n['2003.12.27/']\n['2004.01.01/']\n['2004.01.09/']\n['2004.01.17/']\n['2004.01.25/']\n['2004.02.02/']\n['2004.02.10/']\n['2004.02.18/']\n['2004.02.26/']\n['2004.03.05/']\n['2004.03.13/']\n['2004.03.21/']\n['2004.03.29/']\n['2004.04.06/']\n['2004.04.14/']\n['2004.04.22/']\n['2004.04.30/']\n['2004.05.08/']\n['2004.05.16/']\n['2004.05.24/']\n['2004.06.01/']\n['2004.06.09/']\n['2004.06.17/']\n['2004.06.25/']\n['2004.07.03/']\n['2004.07.11/']\n['2004.07.19/']\n['2004.07.27/']\n['2004.08.04/']\n['2004.08.12/']\n['2004.08.20/']\n['2004.08.28/']\n['2004.09.05/']\n['2004.09.13/']\n['2004.09.21/']\n['2004.09.29/']\n['2004.10.07/']\n['2004.10.15/']\n['2004.10.23/']\n['2004.10.31/']\n['2004.11.08/']\n['2004.11.16/']\n['2004.11.24/']\n['2004.12.02/']\n['2004.12.10/']\n['2004.12.18/']\n['2004.12.26/']\n['2005.01.01/']\n['2005.01.09/']\n['2005.01.17/']\n['2005.01.25/']\n['2005.02.02/']\n['2005.02.10/']\n['2005.02.18/']\n['2005.02.26/']\n['2005.03.06/']\n['2005.03.14/']\n['2005.03.22/']\n['2005.03.30/']\n['2005.04.07/']\n['2005.04.15/']\n['2005.04.23/']\n['2005.05.01/']\n['2005.05.09/']\n['2005.05.17/']\n['2005.05.25/']\n['2005.06.02/']\n['2005.06.10/']\n['2005.06.18/']\n['2005.06.26/']\n['2005.07.04/']\n['2005.07.12/']\n['2005.07.20/']\n['2005.07.28/']\n['2005.08.05/']\n['2005.08.13/']\n['2005.08.21/']\n['2005.08.29/']\n['2005.09.06/']\n['2005.09.14/']\n['2005.09.22/']\n['2005.09.30/']\n['2005.10.08/']\n['2005.10.16/']\n['2005.10.24/']\n['2005.11.01/']\n['2005.11.09/']\n['2005.11.17/']\n['2005.11.25/']\n['2005.12.03/']\n['2005.12.11/']\n['2005.12.19/']\n['2005.12.27/']\n['2006.01.01/']\n['2006.01.09/']\n['2006.01.17/']\n['2006.01.25/']\n['2006.02.02/']\n['2006.02.10/']\n['2006.02.18/']\n['2006.02.26/']\n['2006.03.06/']\n['2006.03.14/']\n['2006.03.22/']\n['2006.03.30/']\n['2006.04.07/']\n['2006.04.15/']\n['2006.04.23/']\n['2006.05.01/']\n['2006.05.09/']\n['2006.05.17/']\n['2006.05.25/']\n['2006.06.02/']\n['2006.06.10/']\n['2006.06.18/']\n['2006.06.26/']\n['2006.07.04/']\n['2006.07.12/']\n['2006.07.20/']\n['2006.07.28/']\n['2006.08.05/']\n['2006.08.13/']\n['2006.08.21/']\n['2006.08.29/']\n['2006.09.06/']\n['2006.09.14/']\n['2006.09.22/']\n['2006.09.30/']\n['2006.10.08/']\n['2006.10.16/']\n['2006.10.24/']\n['2006.11.01/']\n['2006.11.09/']\n['2006.11.17/']\n['2006.11.25/']\n['2006.12.03/']\n['2006.12.11/']\n['2006.12.19/']\n['2006.12.27/']\n['2007.01.01/']\n['2007.01.09/']\n['2007.01.17/']\n['2007.01.25/']\n['2007.02.02/']\n['2007.02.10/']\n['2007.02.18/']\n['2007.02.26/']\n['2007.03.06/']\n['2007.03.14/']\n['2007.03.22/']\n['2007.03.30/']\n['2007.04.07/']\n['2007.04.15/']\n['2007.04.23/']\n['2007.05.01/']\n['2007.05.09/']\n['2007.05.17/']\n['2007.05.25/']\n['2007.06.02/']\n['2007.06.10/']\n['2007.06.18/']\n['2007.06.26/']\n['2007.07.04/']\n['2007.07.12/']\n['2007.07.20/']\n['2007.07.28/']\n['2007.08.05/']\n['2007.08.13/']\n['2007.08.21/']\n['2007.08.29/']\n['2007.09.06/']\n['2007.09.14/']\n['2007.09.22/']\n['2007.09.30/']\n['2007.10.08/']\n['2007.10.16/']\n['2007.10.24/']\n['2007.11.01/']\n['2007.11.09/']\n['2007.11.17/']\n['2007.11.25/']\n['2007.12.03/']\n['2007.12.11/']\n['2007.12.19/']\n['2007.12.27/']\n['2008.01.01/']\n['2008.01.09/']\n['2008.01.17/']\n['2008.01.25/']\n['2008.02.02/']\n['2008.02.10/']\n['2008.02.18/']\n['2008.02.26/']\n['2008.03.05/']\n['2008.03.13/']\n['2008.03.21/']\n['2008.03.29/']\n['2008.04.06/']\n['2008.04.14/']\n['2008.04.22/']\n['2008.04.30/']\n['2008.05.08/']\n['2008.05.16/']\n['2008.05.24/']\n['2008.06.01/']\n['2008.06.09/']\n['2008.06.17/']\n['2008.06.25/']\n['2008.07.03/']\n['2008.07.11/']\n['2008.07.19/']\n['2008.07.27/']\n['2008.08.04/']\n['2008.08.12/']\n['2008.08.20/']\n['2008.08.28/']\n['2008.09.05/']\n['2008.09.13/']\n['2008.09.21/']\n['2008.09.29/']\n['2008.10.07/']\n['2008.10.15/']\n['2008.10.23/']\n['2008.10.31/']\n['2008.11.08/']\n['2008.11.16/']\n['2008.11.24/']\n['2008.12.02/']\n['2008.12.10/']\n['2008.12.18/']\n['2008.12.26/']\n['2009.01.01/']\n['2009.01.09/']\n['2009.01.17/']\n['2009.01.25/']\n['2009.02.02/']\n['2009.02.10/']\n['2009.02.18/']\n['2009.02.26/']\n['2009.03.06/']\n['2009.03.14/']\n['2009.03.22/']\n['2009.03.30/']\n['2009.04.07/']\n['2009.04.15/']\n['2009.04.23/']\n['2009.05.01/']\n['2009.05.09/']\n['2009.05.17/']\n['2009.05.25/']\n['2009.06.02/']\n['2009.06.10/']\n['2009.06.18/']\n['2009.06.26/']\n['2009.07.04/']\n['2009.07.12/']\n['2009.07.20/']\n['2009.07.28/']\n['2009.08.05/']\n['2009.08.13/']\n['2009.08.21/']\n['2009.08.29/']\n['2009.09.06/']\n['2009.09.14/']\n['2009.09.22/']\n['2009.09.30/']\n['2009.10.08/']\n['2009.10.16/']\n['2009.10.24/']\n['2009.11.01/']\n['2009.11.09/']\n['2009.11.17/']\n['2009.11.25/']\n['2009.12.03/']\n['2009.12.11/']\n['2009.12.19/']\n['2009.12.27/']\n['2010.01.01/']\n['2010.01.09/']\n['2010.01.17/']\n['2010.01.25/']\n['2010.02.02/']\n['2010.02.10/']\n['2010.02.18/']\n['2010.02.26/']\n['2010.03.06/']\n['2010.03.14/']\n['2010.03.22/']\n['2010.03.30/']\n['2010.04.07/']\n['2010.04.15/']\n['2010.04.23/']\n['2010.05.01/']\n['2010.05.09/']\n['2010.05.17/']\n['2010.05.25/']\n['2010.06.02/']\n['2010.06.10/']\n['2010.06.18/']\n['2010.06.26/']\n['2010.07.04/']\n['2010.07.12/']\n['2010.07.20/']\n['2010.07.28/']\n['2010.08.05/']\n['2010.08.13/']\n['2010.08.21/']\n['2010.08.29/']\n['2010.09.06/']\n['2010.09.14/']\n['2010.09.22/']\n['2010.09.30/']\n['2010.10.08/']\n['2010.10.16/']\n['2010.10.24/']\n['2010.11.01/']\n['2010.11.09/']\n['2010.11.17/']\n['2010.11.25/']\n['2010.12.03/']\n['2010.12.11/']\n['2010.12.19/']\n['2010.12.27/']\n['2011.01.01/']\n['2011.01.09/']\n['2011.01.17/']\n['2011.01.25/']\n['2011.02.02/']\n['2011.02.10/']\n['2011.02.18/']\n['2011.02.26/']\n['2011.03.06/']\n['2011.03.14/']\n['2011.03.22/']\n['2011.03.30/']\n['2011.04.07/']\n['2011.04.15/']\n['2011.04.23/']\n['2011.05.01/']\n['2011.05.09/']\n['2011.05.17/']\n['2011.05.25/']\n['2011.06.02/']\n['2011.06.10/']\n['2011.06.18/']\n['2011.06.26/']\n['2011.07.04/']\n['2011.07.12/']\n['2011.07.20/']\n['2011.07.28/']\n['2011.08.05/']\n['2011.08.13/']\n['2011.08.21/']\n['2011.08.29/']\n['2011.09.06/']\n['2011.09.14/']\n['2011.09.22/']\n['2011.09.30/']\n['2011.10.08/']\n['2011.10.16/']\n['2011.10.24/']\n['2011.11.01/']\n['2011.11.09/']\n['2011.11.17/']\n['2011.11.25/']\n['2011.12.03/']\n['2011.12.11/']\n['2011.12.19/']\n['2011.12.27/']\n['2012.01.01/']\n['2012.01.09/']\n['2012.01.17/']\n['2012.01.25/']\n['2012.02.02/']\n['2012.02.10/']\n['2012.02.18/']\n['2012.02.26/']\n['2012.03.05/']\n['2012.03.13/']\n['2012.03.21/']\n['2012.03.29/']\n['2012.04.06/']\n['2012.04.14/']\n['2012.04.22/']\n['2012.04.30/']\n['2012.05.08/']\n['2012.05.16/']\n['2012.05.24/']\n['2012.06.01/']\n['2012.06.09/']\n['2012.06.17/']\n['2012.06.25/']\n['2012.07.03/']\n['2012.07.11/']\n['2012.07.19/']\n['2012.07.27/']\n['2012.08.04/']\n['2012.08.12/']\n['2012.08.20/']\n['2012.08.28/']\n['2012.09.05/']\n['2012.09.13/']\n['2012.09.21/']\n['2012.09.29/']\n['2012.10.07/']\n['2012.10.15/']\n['2012.10.23/']\n['2012.10.31/']\n['2012.11.08/']\n['2012.11.16/']\n['2012.11.24/']\n['2012.12.02/']\n['2012.12.10/']\n['2012.12.18/']\n['2012.12.26/']\n['2013.01.01/']\n['2013.01.09/']\n['2013.01.17/']\n['2013.01.25/']\n['2013.02.02/']\n['2013.02.10/']\n['2013.02.18/']\n['2013.02.26/']\n['2013.03.06/']\n['2013.03.14/']\n['2013.03.22/']\n['2013.03.30/']\n['2013.04.07/']\n['2013.04.15/']\n['2013.04.23/']\n['2013.05.01/']\n['2013.05.09/']\n['2013.05.17/']\n['2013.05.25/']\n['2013.06.02/']\n['2013.06.10/']\n['2013.06.18/']\n['2013.06.26/']\n['2013.07.04/']\n['2013.07.12/']\n['2013.07.20/']\n['2013.07.28/']\n['2013.08.05/']\n['2013.08.13/']\n['2013.08.21/']\n['2013.08.29/']\n['2013.09.06/']\n['2013.09.14/']\n['2013.09.22/']\n['2013.09.30/']\n['2013.10.08/']\n['2013.10.16/']\n['2013.10.24/']\n['2013.11.01/']\n['2013.11.09/']\n['2013.11.17/']\n['2013.11.25/']\n['2013.12.03/']\n['2013.12.11/']\n['2013.12.19/']\n['2013.12.27/']\n['2014.01.01/']\n['2014.01.09/']\n['2014.01.17/']\n['2014.01.25/']\n['2014.02.02/']\n['2014.02.10/']\n['2014.02.18/']\n['2014.02.26/']\n['2014.03.06/']\n['2014.03.14/']\n['2014.03.22/']\n['2014.03.30/']\n['2014.04.07/']\n['2014.04.15/']\n['2014.04.23/']\n['2014.05.01/']\n['2014.05.09/']\n['2014.05.17/']\n['2014.05.25/']\n['2014.06.02/']\n['2014.06.10/']\n['2014.06.18/']\n['2014.06.26/']\n['2014.07.04/']\n['2014.07.12/']\n['2014.07.20/']\n['2014.07.28/']\n['2014.08.05/']\n['2014.08.13/']\n['2014.08.21/']\n['2014.08.29/']\n['2014.09.06/']\n['2014.09.14/']\n['2014.09.22/']\n['2014.09.30/']\n['2014.10.08/']\n['2014.10.16/']\n['2014.10.24/']\n['2014.11.01/']\n['2014.11.09/']\n['2014.11.17/']\n['2014.11.25/']\n['2014.12.03/']\n['2014.12.11/']\n['2014.12.19/']\n['2014.12.27/']\n['2015.01.01/']\n['2015.01.09/']\n['2015.01.17/']\n['2015.01.25/']\n['2015.02.02/']\n['2015.02.10/']\n['2015.02.18/']\n['2015.02.26/']\n['2015.03.06/']\n['2015.03.14/']\n['2015.03.22/']\n['2015.03.30/']\n['2015.04.07/']\n['2015.04.15/']\n['2015.04.23/']\n['2015.05.01/']\n['2015.05.09/']\n['2015.05.17/']\n['2015.05.25/']\n['2015.06.02/']\n['2015.06.10/']\n['2015.06.18/']\n['2015.06.26/']\n['2015.07.04/']\n['2015.07.12/']\n['2015.07.20/']\n['2015.07.28/']\n['2015.08.05/']\n['2015.08.13/']\n['2015.08.21/']\n['2015.08.29/']\n['2015.09.06/']\n['2015.09.14/']\n['2015.09.22/']\n['2015.09.30/']\n['2015.10.08/']\n['2015.10.16/']\n['2015.10.24/']\n['2015.11.01/']\n['2015.11.09/']\n['2015.11.17/']\n['2015.11.25/']\n['2015.12.03/']\n['2015.12.11/']\n['2015.12.19/']\n['2015.12.27/']\n['2016.01.01/']\n['2016.01.09/']\n['2016.01.17/']\n['2016.01.25/']\n['2016.02.02/']\n['2016.02.10/']\n['2016.02.26/']\n['2016.03.05/']\n['2016.03.13/']\n['2016.03.21/']\n['2016.03.29/']\n['2016.04.06/']\n['2016.04.14/']\n['2016.04.22/']\n['2016.04.30/']\n['2016.05.08/']\n['2016.05.16/']\n['2016.05.24/']\n['2016.06.01/']\n['2016.06.09/']\n['2016.06.17/']\n['2016.06.25/']\n['2016.07.03/']\n['2016.07.11/']\n['2016.07.19/']\n['2016.07.27/']\n['2016.08.04/']\n['2016.08.12/']\n['2016.08.20/']\n['2016.08.28/']\n['2016.09.05/']\n['2016.09.13/']\n['2016.09.21/']\n['2016.09.29/']\n['2016.10.07/']\n['2016.10.15/']\n['2016.10.23/']\n['2016.10.31/']\n['2016.11.08/']\n['2016.11.16/']\n['2016.11.24/']\n['2016.12.02/']\n['2016.12.10/']\n['2016.12.18/']\n['2016.12.26/']\n['2017.01.01/']\n['2017.01.09/']\n['2017.01.17/']\n['2017.01.25/']\n['2017.02.02/']\n['2017.02.10/']\n['2017.02.18/']\n['2017.02.26/']\n['2017.03.06/']\n['2017.03.14/']\n['2017.03.22/']\n['2017.03.30/']\n['2017.04.07/']\n['2017.04.15/']\n['2017.04.23/']\n['2017.05.01/']\n['2017.05.09/']\n['2017.05.17/']\n['2017.05.25/']\n['2017.06.02/']\n['2017.06.10/']\n['2017.06.18/']\n['2017.06.26/']\n['2017.07.04/']\n['2017.07.12/']\n['2017.07.20/']\n['2017.07.28/']\n['2017.08.05/']\n['2017.08.13/']\n['2017.08.21/']\n['2017.08.29/']\n['2017.09.06/']\n['2017.09.14/']\n['2017.09.22/']\n['2017.09.30/']\n['2017.10.08/']\n['2017.10.16/']\n['2017.10.24/']\n['2017.11.01/']\n['2017.11.09/']\n['2017.11.17/']\n['2017.11.25/']\n['2017.12.03/']\n['2017.12.11/']\n['2017.12.19/']\n['2017.12.27/']\n['2018.01.01/']\n['2018.01.09/']\n['2018.01.17/']\n['2018.01.25/']\n['2018.02.02/']\n['2018.02.10/']\n['2018.02.18/']\n['2018.02.26/']\n['2018.03.06/']\n['2018.03.14/']\n['2018.03.22/']\n['2018.03.30/']\n['2018.04.07/']\n['2018.04.15/']\n['2018.04.23/']\n['2018.05.01/']\n['2018.05.09/']\n['2018.05.17/']\n['2018.05.25/']\n['2018.06.02/']\n['2018.06.10/']\n['2018.06.18/']\n['2018.06.26/']\n['2018.07.04/']\n['2018.07.12/']\n['2018.07.20/']\n['2018.07.28/']\n['2018.08.05/']\n['2018.08.13/']\n['2018.08.21/']\n['2018.08.29/']\n['2018.09.06/']\n['2018.09.14/']\n['2018.09.22/']\n['2018.09.30/']\n['2018.10.08/']\n['2018.10.16/']\n['2018.10.24/']\n['2018.11.01/']\n['2018.11.09/']\n['2018.11.17/']\n['2018.11.25/']\n['2018.12.03/']\n['2018.12.11/']\n['2018.12.19/']\n['2018.12.27/']\n['2019.01.01/']\n['2019.01.09/']\n['2019.01.17/']\n['2019.01.25/']\n['2019.02.02/']\n['2019.02.10/']\n['2019.02.18/']\n['2019.02.26/']\n['2019.03.06/']\n['2019.03.14/']\n['2019.03.22/']\n['2019.03.30/']\n['2019.04.07/']\n['2019.04.15/']\n['2019.04.23/']\n['2019.05.01/']\n['2019.05.09/']\n['2019.05.17/']\n['2019.05.25/']\n['2019.06.02/']\n['2019.06.10/']\n['2019.06.18/']\n['2019.06.26/']\n['2019.07.04/']\n['2019.07.12/']\n['2019.07.20/']\n['2019.07.28/']\n['2019.08.05/']\n['2019.08.13/']\n['2019.08.21/']\n['2019.08.29/']\n['2019.09.06/']\n['2019.09.14/']\n['2019.09.22/']\n['2019.09.30/']\n['2019.10.08/']\n['2019.10.16/']\n['2019.10.24/']\n['2019.11.01/']\n['2019.11.09/']\n['2019.11.17/']\n['2019.11.25/']\n['2019.12.03/']\n['2019.12.11/']\n['2019.12.19/']\n['2019.12.27/']\n['2020.01.01/']\n['2020.01.09/']\n['2020.01.17/']\n['2020.01.25/']\n['2020.02.02/']\n['2020.02.10/']\n['2020.02.18/']\n['2020.02.26/']\n['2020.03.05/']\n['2020.03.13/']\n['2020.03.21/']\n['2020.03.29/']\n['2020.04.06/']\n['2020.04.14/']\n['2020.04.22/']\n['2020.04.30/']\n['2020.05.08/']\n['2020.05.16/']\n['2020.05.24/']\n['2020.06.01/']\n['2020.06.09/']\n['2020.06.17/']\n['2020.06.25/']\n['2020.07.03/']\n['2020.07.11/']\n['2020.07.19/']\n['2020.07.27/']\n['2020.08.04/']\n['2020.08.12/']\n['2020.08.20/']\n['2020.08.28/']\n['2020.09.05/']\n['2020.09.13/']\n['2020.09.21/']\n['2020.09.29/']\n['2020.10.07/']\n['2020.10.15/']\n['2020.10.23/']\n['2020.10.31/']\n['2020.11.08/']\n['2020.11.16/']\n['2020.11.24/']\n['2020.12.02/']\n['2020.12.10/']\n['2020.12.18/']\n['2020.12.26/']\n['2021.01.01/']\n['2021.01.09/']\n['2021.01.17/']\n['2021.01.25/']\n['2021.02.02/']\n['2021.02.10/']\n['2021.02.18/']\n['2021.02.26/']\n['2021.03.06/']\n['2021.03.14/']\n['2021.03.22/']\n['2021.03.30/']\n['2021.04.07/']\n['2021.04.15/']\n['2021.04.23/']\n['2021.05.01/']\n['2021.05.09/']\n['2021.05.17/']\n['2021.05.25/']\n['2021.06.02/']\n['2021.06.10/']\n['2021.06.18/']\n['2021.06.26/']\n['2021.07.04/']\n['2021.07.12/']\n['2021.07.20/']\n['2021.07.28/']\n['2021.08.05/']\n['2021.08.13/']\n['2021.08.21/']\n['2021.08.29/']\n['2021.09.06/']\n['2021.09.14/']\n['2021.09.22/']\n['2021.09.30/']\n['2021.10.08/']\n['2021.10.16/']\n['2021.10.24/']\n['2021.11.01/']\n['2021.11.09/']\n['2021.11.17/']\n['2021.11.25/']\n['2021.12.03/']\n['2021.12.11/']\n['2021.12.19/']\n['2021.12.27/']\n['2022.01.01/']\n['2022.01.09/']\n['2022.01.17/']\n['2022.01.25/']\n['2022.02.02/']\n['2022.02.10/']\n['2022.02.18/']\n['2022.02.26/']\n['2022.03.06/']\n['2022.03.14/']\n['2022.03.22/']\n['2022.03.30/']\n['2022.04.07/']\n['2022.04.15/']\n['2022.04.23/']\n['2022.05.01/']\n['2022.05.09/']\n['2022.05.17/']\n['2022.05.25/']\n['2022.06.02/']\n['2022.06.10/']\n['2022.06.18/']\n['2022.06.26/']\n['2022.07.04/']\n['2022.07.12/']\n['2022.07.20/']\n['2022.07.28/']\n['2022.08.05/']\n['2022.08.13/']\n['2022.08.21/']\n['2022.08.29/']\n['2022.09.06/']\n['2022.09.14/']\n['2022.09.22/']\n['2022.09.30/']\n['2022.10.08/']\n['2022.10.24/']\n['2022.11.01/']\n['2022.11.09/']\n['2022.11.17/']\n['2022.11.25/']\n['2022.12.03/']\n['2022.12.11/']\n['2022.12.19/']\n['2022.12.27/']\n['2023.01.01/']\n['2023.01.09/']\n['2023.01.17/']\n['2023.01.25/']\n['2023.02.02/']\n['2023.02.10/']\n['2023.02.18/']\n['2023.02.26/']\n['2023.03.06/']\n['2023.03.14/']\n['2023.03.22/']\n['2023.03.30/']\n['2023.04.07/']\n['DPRecentInserts_MOD10A2_061_20220820']\n['DPRecentInserts_MOD10A2_061_20220822']\n['DPRecentInserts_MOD10A2_061_20220908']\n['DPRecentInserts_MOD10A2_061_20220915']\n['DPRecentInserts_MOD10A2_061_20220922']\n['DPRecentInserts_MOD10A2_061_20220923']\n['DPRecentInserts_MOD10A2_061_20220930']\n['DPRecentInserts_MOD10A2_061_20221001']\n['DPRecentInserts_MOD10A2_061_20221010']\n['DPRecentInserts_MOD10A2_061_20221024']\n['DPRecentInserts_MOD10A2_061_20221101']\n['DPRecentInserts_MOD10A2_061_20221102']\n['DPRecentInserts_MOD10A2_061_20221103']\n['DPRecentInserts_MOD10A2_061_20221110']\n['DPRecentInserts_MOD10A2_061_20221111']\n['DPRecentInserts_MOD10A2_061_20221117']\n['DPRecentInserts_MOD10A2_061_20221118']\n['DPRecentInserts_MOD10A2_061_20221125']\n['DPRecentInserts_MOD10A2_061_20221126']\n['DPRecentInserts_MOD10A2_061_20221216']\n['DPRecentInserts_MOD10A2_061_20221217']\n['DPRecentInserts_MOD10A2_061_20221226']\n['DPRecentInserts_MOD10A2_061_20221228']\n['DPRecentInserts_MOD10A2_061_20221229']\n['DPRecentInserts_MOD10A2_061_20230106']\n['DPRecentInserts_MOD10A2_061_20230114']\n['DPRecentInserts_MOD10A2_061_20230119']\n['DPRecentInserts_MOD10A2_061_20230201']\n['DPRecentInserts_MOD10A2_061_20230203']\n['DPRecentInserts_MOD10A2_061_20230210']\n['DPRecentInserts_MOD10A2_061_20230211']\n['DPRecentInserts_MOD10A2_061_20230222']\n['DPRecentInserts_MOD10A2_061_20230223']\n['DPRecentInserts_MOD10A2_061_20230228']\n['DPRecentInserts_MOD10A2_061_20230311']\n['DPRecentInserts_MOD10A2_061_20230315']\n['DPRecentInserts_MOD10A2_061_20230322']\n['DPRecentInserts_MOD10A2_061_20230323']\n['DPRecentInserts_MOD10A2_061_20230331']\n['DPRecentInserts_MOD10A2_061_20230409']\n['DPRecentInserts_MOD10A2_061_20230410']\n['DPRecentInserts_MOD10A2_061_20230418']\n",
  "history_begin_time" : 1682278076682,
  "history_end_time" : 1682278079625,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "Db7rU2tt0fCP",
  "history_input" : "import subprocess\nfrom datetime import datetime\n\n\n# Write first python in Geoweaver\nimport os\nimport urllib.request, urllib.error, urllib.parse\nimport sys\n\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\n\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(dir_path)\n\ntile_list = ['h08v04', 'h09v04', 'h10v04', 'h11v04', 'h08v05', 'h09v05', 'h10v05', 'h07v06', 'h08v06', 'h09v06']\n\n\ndef get_latest_date():\n  try:\n    from BeautifulSoup import BeautifulSoup\n  except ImportError:\n      from bs4 import BeautifulSoup\n\n  modis_list_url = \"https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\n\n  print(modis_list_url)\n\n  response = subprocess.run(f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -np -e robots=off {modis_list_url}', shell=True,  stderr=subprocess.PIPE)\n  index_file = open('index.html', 'r')\n  webContent = index_file.read()\n\n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n  print('----------------------')\n  print(parsed_html.body.find('td', attrs={'class':'indexcolname'}).text.split('\"'))\n\nget_latest_date()\n#p = subprocess.run('wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -np -e robots=off https://n5eil01u.ecs.nsidc.org/SMAP/SPL4CMDL.006/2019.10.07/SMAP_L4_C_mdl_20191007T000000_Vv6042_001.h5 --quiet', shell=True,  stderr=subprocess.PIPE)\n\n",
  "history_output" : "/home/chetana/gw-workspace/Db7rU2tt0fCP\nhttps://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\n/home/chetana/gw-workspace/Db7rU2tt0fCP/data_gee_modis_real_time.py:36: GuessedAtParserWarning: No parser was explicitly specified, so I'm using the best available HTML parser for this system (\"lxml\"). This usually isn't a problem, but if you run this code on another system, or in a different virtual environment, it may use a different parser and behave differently.\n\nThe code that caused this warning is on line 36 of the file /home/chetana/gw-workspace/Db7rU2tt0fCP/data_gee_modis_real_time.py. To get rid of this warning, pass the additional argument 'features=\"lxml\"' to the BeautifulSoup constructor.\n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n----------------------\n['Parent Directory']\n",
  "history_begin_time" : 1682277941697,
  "history_end_time" : 1682277943923,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "jNJ5NgtFrZA4",
  "history_input" : "import subprocess\nfrom datetime import datetime\n\n\n# Write first python in Geoweaver\nimport os\nimport urllib.request, urllib.error, urllib.parse\nimport sys\n\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\n\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(dir_path)\n\ntile_list = ['h08v04', 'h09v04', 'h10v04', 'h11v04', 'h08v05', 'h09v05', 'h10v05', 'h07v06', 'h08v06', 'h09v06']\n\n\ndef get_latest_date():\n  try:\n    from BeautifulSoup import BeautifulSoup\n  except ImportError:\n      from bs4 import BeautifulSoup\n\n  modis_list_url = \"https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\n\n  print(modis_list_url)\n\n  response = subprocess.run(f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -np -e robots=off {modis_list_url}', shell=True,  stderr=subprocess.PIPE)\n  index_file = open('index.html', 'r')\n  webContent = index_file.read()\n\n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n  print('----------------------')\n  print(parsed_html.body.find('td', attrs={'class':'indexcolname'}).text.split(\"\\\"\"))\n\nget_latest_date()\n#p = subprocess.run('wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -np -e robots=off https://n5eil01u.ecs.nsidc.org/SMAP/SPL4CMDL.006/2019.10.07/SMAP_L4_C_mdl_20191007T000000_Vv6042_001.h5 --quiet', shell=True,  stderr=subprocess.PIPE)\n\n",
  "history_output" : "  File \"/home/chetana/gw-workspace/jNJ5NgtFrZA4/data_gee_modis_real_time.py\", line 45\n    \n    ^\nSyntaxError: EOF while scanning triple-quoted string literal\n",
  "history_begin_time" : 1682277915750,
  "history_end_time" : 1682277916859,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "lANhdZj8Iiyv",
  "history_input" : "from all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\nimport dask.dataframe as dd\nfrom dask import delayed, compute\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Authenticate()\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(\n    submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n\n# start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(\n    f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    os.remove(final_csv_file)\n\n# Set up batch processing parameters\nbatch_size = 50  # Number of cells to query in each batch\nmax_retries = 5  # Maximum number of times to retry a batch that fails\nwait_time = 30  # Number of seconds to wait before retrying a failed batch\n\n\ndef process_batch(cell_ids):\n    # Process a batch of cells\n\n    all_cell_df = pd.DataFrame(columns=['date', column_name, 'cell_id'])\n\n    for current_cell_id in cell_ids:\n\n        try:\n            longitude = all_cell_coords_df['lon'][current_cell_id]\n            latitude = all_cell_coords_df['lat'][current_cell_id]\n\n            # identify a 20 meter buffer around our Point Of Interest (POI)\n            poi = ee.Geometry.Point(longitude, latitude).buffer(20)\n\n            def poi_mean(img):\n                reducer = img.reduceRegion(\n                    reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n                mean = reducer.get(var_name)\n                return img.set('date', img.date().format()).set(column_name, mean)\n\n            viirs1 = ee.ImageCollection(\n                product_name).filterDate(start_date, end_date)\n            poi_reduced_imgs1 = viirs1.map(poi_mean)\n            nested_list1 = poi_reduced_imgs1.reduceColumns(\n                ee.Reducer.toList(2), ['date', column_name]).values().get(0)\n\n            # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n            df = pd.DataFrame(nested_list1.getInfo(),\n                              columns=['date', column_name])\n            df['date'] = pd.to_datetime(df['date'])\n            df = df.set_index('date')\n            df['cell_id'] = current_cell_id\n\n            df_list = [all_cell_df, df]\n            all_cell_df = pd.concat(df_list)  # merge into big dataframe\n\n        except Exception as e:\n            print(f\"Error processing cell {current_cell_id}: {e}\")\n            traceback.print_exc()\n\n            # Retry failed batch up to max_retries times\n            retries = 0\n            while retries < max_retries:\n                print(\n                    f\"Retrying batch for cell {current_cell_id} in {wait_time} seconds... (retry {retries+1}/{max_retries})\")\n                time.sleep(wait_time)\n                try:\n                    df = process_batch([current_cell_id])\n                    df_list = [all_cell_df, df]\n                    # merge into big dataframe\n                    all_cell_df = pd.concat(df_list)\n                    print(\n                        f\"Batch for cell {current_cell_id} processed successfully after {retries+1} retries.\")\n                    break\n                except Exception as e:\n                    print(f\"Error processing cell {current_cell_id}: {e}\")\n                    traceback.print_exc()\n                    retries += 1\n            else:\n                print(\n                    f\"Batch for cell {current_cell_id} failed after {max_retries} retries.\")\n\n    return all_cell_df\n\n\n# Split cell IDs into batches\ncell_ids = submission_format_df.index.tolist()\nbatches = [cell_ids[i:i+batch_size]\n           for i in range(0, len(cell_ids), batch_size)]\n\n# Process batches using Dask\ndelayed_results = [delayed(process_batch)(batch) for batch in batches]\nall_results = compute(*delayed_results, scheduler='processes')\n\n# Concatenate all results\ndf_list = []\nfor result in all_results:\n    df_list.append(result)\n\nfinal_df = pd.concat(df_list)\n\n# Save results to CSV file\nfinal_df.to_csv(final_csv_file, header=True, index=True)\n\nprint(\n    f\"Batch processing completed successfully. Results saved to {final_csv_file}.\")\n",
  "history_output" : "today date = 2023-04-23\n/home/chetana\n2023-03-14 06:00:00\n['gcloud', 'auth', 'application-default', 'login', '--scopes=https://www.googleapis.com/auth/earthengine,https://www.googleapis.com/auth/devstorage.full_control', '--client-id-file=/home/chetana/.config/earthengine/credentials-client-id.json']\nFetching credentials using gcloud\norig_exe:  gcloud\nenum 2 No such file or directory gcloud\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/lANhdZj8Iiyv/data_gee_modis_real_time.py\", line 9, in <module>\n    ee.Initialize()\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/__init__.py\", line 132, in Initialize\n    data.initialize(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/data.py\", line 201, in initialize\n    _install_cloud_api_resource()\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/data.py\", line 260, in _install_cloud_api_resource\n    _cloud_api_resource = _cloud_api_utils.build_cloud_resource(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/_cloud_api_utils.py\", line 166, in build_cloud_resource\n    resource = build()\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/_cloud_api_utils.py\", line 146, in build\n    return discovery.build(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/googleapiclient/_helpers.py\", line 134, in positional_wrapper\n    return wrapped(*args, **kwargs)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/googleapiclient/discovery.py\", line 270, in build\n    content = _retrieve_discovery_doc(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/googleapiclient/discovery.py\", line 376, in _retrieve_discovery_doc\n    resp, content = req.execute(num_retries=num_retries)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/googleapiclient/_helpers.py\", line 134, in positional_wrapper\n    return wrapped(*args, **kwargs)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/googleapiclient/http.py\", line 900, in execute\n    resp, content = _retry_request(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/googleapiclient/http.py\", line 177, in _retry_request\n    resp, content = http.request(uri, method, *args, **kwargs)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/google_auth_httplib2.py\", line 209, in request\n    self.credentials.before_request(self._request, method, uri, request_headers)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/google/auth/credentials.py\", line 133, in before_request\n    self.refresh(request)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/google/oauth2/credentials.py\", line 228, in refresh\n    ) = reauth.refresh_grant(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/google/oauth2/reauth.py\", line 338, in refresh_grant\n    _client._handle_error_response(response_data)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/google/oauth2/_client.py\", line 60, in _handle_error_response\n    raise exceptions.RefreshError(error_details, response_data)\ngoogle.auth.exceptions.RefreshError: ('invalid_grant: Bad Request', {'error': 'invalid_grant', 'error_description': 'Bad Request'})\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/oauth.py\", line 299, in _load_app_default_credentials\n    subprocess.run(command, check=True)\n  File \"/home/chetana/anaconda3/lib/python3.9/subprocess.py\", line 505, in run\n    with Popen(*popenargs, **kwargs) as process:\n  File \"/home/chetana/anaconda3/lib/python3.9/subprocess.py\", line 951, in __init__\n    self._execute_child(args, executable, preexec_fn, close_fds,\n  File \"/home/chetana/anaconda3/lib/python3.9/subprocess.py\", line 1825, in _execute_child\n    raise child_exception_type(errno_num, err_msg, err_filename)\nFileNotFoundError: [Errno 2] No such file or directory: 'gcloud'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/lANhdZj8Iiyv/data_gee_modis_real_time.py\", line 12, in <module>\n    ee.Authenticate()\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/__init__.py\", line 104, in Authenticate\n    return oauth.authenticate(authorization_code, quiet, code_verifier, auth_mode,\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/oauth.py\", line 401, in authenticate\n    _load_app_default_credentials(auth_mode == 'gcloud', scopes, quiet)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/oauth.py\", line 302, in _load_app_default_credentials\n    raise Exception('gcloud command not found. ' + tip) from e\nException: gcloud command not found. Please ensure that gcloud is installed.\nMore information: https://developers.google.com/earth-engine/guides/python_install\n\n",
  "history_begin_time" : 1682276693257,
  "history_end_time" : 1682276720273,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "o1eimCLNjdkm",
  "history_input" : "import subprocess\nfrom datetime import datetime\n\n\n# Write first python in Geoweaver\nimport os\nimport urllib.request, urllib.error, urllib.parse\nimport sys\n\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\n\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(dir_path)\n\ntile_list = ['h08v04', 'h09v04', 'h10v04', 'h11v04', 'h08v05', 'h09v05', 'h10v05', 'h07v06', 'h08v06', 'h09v06']\n\n\ndef get_latest_date():\n  try:\n    from BeautifulSoup import BeautifulSoup\n  except ImportError:\n      from bs4 import BeautifulSoup\n\n  modis_list_url = \"https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\n\n  print(modis_list_url)\n\n  response = subprocess.run(f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -np -e robots=off {modis_list_url}', shell=True,  stderr=subprocess.PIPE)\n  index_file = open('index.html', 'r')\n  webContent = index_file.read()\n\n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n  print('----------------------')\n  print(parsed_html.body.find('td', attrs={'class':'indexcolname'}).text.split(\"\\\"\"))\n\nget_latest_date()\n#p = subprocess.run('wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -np -e robots=off https://n5eil01u.ecs.nsidc.org/SMAP/SPL4CMDL.006/2019.10.07/SMAP_L4_C_mdl_20191007T000000_Vv6042_001.h5 --quiet', shell=True,  stderr=subprocess.PIPE)\n\n",
  "history_output" : "  File \"/home/chetana/gw-workspace/o1eimCLNjdkm/data_gee_modis_real_time.py\", line 45\n    \n    ^\nSyntaxError: EOF while scanning triple-quoted string literal\n",
  "history_begin_time" : 1682276676496,
  "history_end_time" : 1682276677652,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "f92EvUkOlJsl",
  "history_input" : "import subprocess\nfrom datetime import datetime\n\n\n# Write first python in Geoweaver\nimport os\nimport urllib.request, urllib.error, urllib.parse\nimport sys\n\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\n\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(dir_path)\n\ntile_list = ['h08v04', 'h09v04', 'h10v04', 'h11v04', 'h08v05', 'h09v05', 'h10v05', 'h07v06', 'h08v06', 'h09v06']\n\n\ndef get_latest_date():\n  try:\n    from BeautifulSoup import BeautifulSoup\n  except ImportError:\n      from bs4 import BeautifulSoup\n\n  modis_list_url = \"https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\n\n  print(modis_list_url)\n\n  response = subprocess.run(f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -np -e robots=off {modis_list_url}', shell=True,  stderr=subprocess.PIPE)\n  index_file = open('index.html', 'r')\n  webContent = index_file.read()\n\n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n  print(parsed_html.body.find('td'))\n  print('----------------------')\n  print(parsed_html.body.find('td', attrs={'class':'indexcolname'}).text)\n\nget_latest_date()\n#p = subprocess.run('wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -np -e robots=off https://n5eil01u.ecs.nsidc.org/SMAP/SPL4CMDL.006/2019.10.07/SMAP_L4_C_mdl_20191007T000000_Vv6042_001.h5 --quiet', shell=True,  stderr=subprocess.PIPE)\n\n",
  "history_output" : "/home/chetana/gw-workspace/f92EvUkOlJsl\nhttps://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\n/home/chetana/gw-workspace/f92EvUkOlJsl/data_gee_modis_real_time.py:36: GuessedAtParserWarning: No parser was explicitly specified, so I'm using the best available HTML parser for this system (\"lxml\"). This usually isn't a problem, but if you run this code on another system, or in a different virtual environment, it may use a different parser and behave differently.\n\nThe code that caused this warning is on line 36 of the file /home/chetana/gw-workspace/f92EvUkOlJsl/data_gee_modis_real_time.py. To get rid of this warning, pass the additional argument 'features=\"lxml\"' to the BeautifulSoup constructor.\n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n<td class=\"indexcolicon\"><a href=\"/MOST/\"><img alt=\"[PARENTDIR]\" src=\"/theme/icons/folder-home.png\"/></a></td>\n----------------------\nParent Directory\n",
  "history_begin_time" : 1682276492213,
  "history_end_time" : 1682276494624,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "owwtgd1SsYc7",
  "history_input" : "from all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\nimport dask.dataframe as dd\nfrom dask import delayed, compute\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Authenticate()\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(\n    submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n\n# start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(\n    f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    os.remove(final_csv_file)\n\n# Set up batch processing parameters\nbatch_size = 50  # Number of cells to query in each batch\nmax_retries = 5  # Maximum number of times to retry a batch that fails\nwait_time = 30  # Number of seconds to wait before retrying a failed batch\n\n\ndef process_batch(cell_ids):\n    # Process a batch of cells\n\n    all_cell_df = pd.DataFrame(columns=['date', column_name, 'cell_id'])\n\n    for current_cell_id in cell_ids:\n\n        try:\n            longitude = all_cell_coords_df['lon'][current_cell_id]\n            latitude = all_cell_coords_df['lat'][current_cell_id]\n\n            # identify a 20 meter buffer around our Point Of Interest (POI)\n            poi = ee.Geometry.Point(longitude, latitude).buffer(20)\n\n            def poi_mean(img):\n                reducer = img.reduceRegion(\n                    reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n                mean = reducer.get(var_name)\n                return img.set('date', img.date().format()).set(column_name, mean)\n\n            viirs1 = ee.ImageCollection(\n                product_name).filterDate(start_date, end_date)\n            poi_reduced_imgs1 = viirs1.map(poi_mean)\n            nested_list1 = poi_reduced_imgs1.reduceColumns(\n                ee.Reducer.toList(2), ['date', column_name]).values().get(0)\n\n            # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n            df = pd.DataFrame(nested_list1.getInfo(),\n                              columns=['date', column_name])\n            df['date'] = pd.to_datetime(df['date'])\n            df = df.set_index('date')\n            df['cell_id'] = current_cell_id\n\n            df_list = [all_cell_df, df]\n            all_cell_df = pd.concat(df_list)  # merge into big dataframe\n\n        except Exception as e:\n            print(f\"Error processing cell {current_cell_id}: {e}\")\n            traceback.print_exc()\n\n            # Retry failed batch up to max_retries times\n            retries = 0\n            while retries < max_retries:\n                print(\n                    f\"Retrying batch for cell {current_cell_id} in {wait_time} seconds... (retry {retries+1}/{max_retries})\")\n                time.sleep(wait_time)\n                try:\n                    df = process_batch([current_cell_id])\n                    df_list = [all_cell_df, df]\n                    # merge into big dataframe\n                    all_cell_df = pd.concat(df_list)\n                    print(\n                        f\"Batch for cell {current_cell_id} processed successfully after {retries+1} retries.\")\n                    break\n                except Exception as e:\n                    print(f\"Error processing cell {current_cell_id}: {e}\")\n                    traceback.print_exc()\n                    retries += 1\n            else:\n                print(\n                    f\"Batch for cell {current_cell_id} failed after {max_retries} retries.\")\n\n    return all_cell_df\n\n\n# Split cell IDs into batches\ncell_ids = submission_format_df.index.tolist()\nbatches = [cell_ids[i:i+batch_size]\n           for i in range(0, len(cell_ids), batch_size)]\n\n# Process batches using Dask\ndelayed_results = [delayed(process_batch)(batch) for batch in batches]\nall_results = compute(*delayed_results, scheduler='processes')\n\n# Concatenate all results\ndf_list = []\nfor result in all_results:\n    df_list.append(result)\n\nfinal_df = pd.concat(df_list)\n\n# Save results to CSV file\nfinal_df.to_csv(final_csv_file, header=True, index=True)\n\nprint(\n    f\"Batch processing completed successfully. Results saved to {final_csv_file}.\")\n",
  "history_output" : "today date = 2023-04-23\n/home/chetana\n2023-03-14 06:00:00\n['gcloud', 'auth', 'application-default', 'login', '--scopes=https://www.googleapis.com/auth/earthengine,https://www.googleapis.com/auth/devstorage.full_control', '--client-id-file=/home/chetana/.config/earthengine/credentials-client-id.json']\nFetching credentials using gcloud\norig_exe:  gcloud\nenum 2 No such file or directory gcloud\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/owwtgd1SsYc7/data_gee_modis_real_time.py\", line 9, in <module>\n    ee.Initialize()\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/__init__.py\", line 132, in Initialize\n    data.initialize(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/data.py\", line 201, in initialize\n    _install_cloud_api_resource()\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/data.py\", line 260, in _install_cloud_api_resource\n    _cloud_api_resource = _cloud_api_utils.build_cloud_resource(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/_cloud_api_utils.py\", line 166, in build_cloud_resource\n    resource = build()\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/_cloud_api_utils.py\", line 146, in build\n    return discovery.build(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/googleapiclient/_helpers.py\", line 134, in positional_wrapper\n    return wrapped(*args, **kwargs)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/googleapiclient/discovery.py\", line 270, in build\n    content = _retrieve_discovery_doc(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/googleapiclient/discovery.py\", line 376, in _retrieve_discovery_doc\n    resp, content = req.execute(num_retries=num_retries)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/googleapiclient/_helpers.py\", line 134, in positional_wrapper\n    return wrapped(*args, **kwargs)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/googleapiclient/http.py\", line 900, in execute\n    resp, content = _retry_request(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/googleapiclient/http.py\", line 177, in _retry_request\n    resp, content = http.request(uri, method, *args, **kwargs)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/google_auth_httplib2.py\", line 209, in request\n    self.credentials.before_request(self._request, method, uri, request_headers)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/google/auth/credentials.py\", line 133, in before_request\n    self.refresh(request)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/google/oauth2/credentials.py\", line 228, in refresh\n    ) = reauth.refresh_grant(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/google/oauth2/reauth.py\", line 338, in refresh_grant\n    _client._handle_error_response(response_data)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/google/oauth2/_client.py\", line 60, in _handle_error_response\n    raise exceptions.RefreshError(error_details, response_data)\ngoogle.auth.exceptions.RefreshError: ('invalid_grant: Bad Request', {'error': 'invalid_grant', 'error_description': 'Bad Request'})\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/oauth.py\", line 299, in _load_app_default_credentials\n    subprocess.run(command, check=True)\n  File \"/home/chetana/anaconda3/lib/python3.9/subprocess.py\", line 505, in run\n    with Popen(*popenargs, **kwargs) as process:\n  File \"/home/chetana/anaconda3/lib/python3.9/subprocess.py\", line 951, in __init__\n    self._execute_child(args, executable, preexec_fn, close_fds,\n  File \"/home/chetana/anaconda3/lib/python3.9/subprocess.py\", line 1825, in _execute_child\n    raise child_exception_type(errno_num, err_msg, err_filename)\nFileNotFoundError: [Errno 2] No such file or directory: 'gcloud'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/owwtgd1SsYc7/data_gee_modis_real_time.py\", line 12, in <module>\n    ee.Authenticate()\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/__init__.py\", line 104, in Authenticate\n    return oauth.authenticate(authorization_code, quiet, code_verifier, auth_mode,\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/oauth.py\", line 401, in authenticate\n    _load_app_default_credentials(auth_mode == 'gcloud', scopes, quiet)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/oauth.py\", line 302, in _load_app_default_credentials\n    raise Exception('gcloud command not found. ' + tip) from e\nException: gcloud command not found. Please ensure that gcloud is installed.\nMore information: https://developers.google.com/earth-engine/guides/python_install\n\n",
  "history_begin_time" : 1682276215638,
  "history_end_time" : 1682276242728,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "R8h4tMRaWdsA",
  "history_input" : "from all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\nimport dask.dataframe as dd\nfrom dask import delayed, compute\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Authenticate()\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(\n    submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n\n# start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(\n    f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    os.remove(final_csv_file)\n\n# Set up batch processing parameters\nbatch_size = 50  # Number of cells to query in each batch\nmax_retries = 5  # Maximum number of times to retry a batch that fails\nwait_time = 30  # Number of seconds to wait before retrying a failed batch\n\n\ndef process_batch(cell_ids):\n    # Process a batch of cells\n\n    all_cell_df = pd.DataFrame(columns=['date', column_name, 'cell_id'])\n\n    for current_cell_id in cell_ids:\n\n        try:\n            longitude = all_cell_coords_df['lon'][current_cell_id]\n            latitude = all_cell_coords_df['lat'][current_cell_id]\n\n            # identify a 20 meter buffer around our Point Of Interest (POI)\n            poi = ee.Geometry.Point(longitude, latitude).buffer(20)\n\n            def poi_mean(img):\n                reducer = img.reduceRegion(\n                    reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n                mean = reducer.get(var_name)\n                return img.set('date', img.date().format()).set(column_name, mean)\n\n            viirs1 = ee.ImageCollection(\n                product_name).filterDate(start_date, end_date)\n            poi_reduced_imgs1 = viirs1.map(poi_mean)\n            nested_list1 = poi_reduced_imgs1.reduceColumns(\n                ee.Reducer.toList(2), ['date', column_name]).values().get(0)\n\n            # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n            df = pd.DataFrame(nested_list1.getInfo(),\n                              columns=['date', column_name])\n            df['date'] = pd.to_datetime(df['date'])\n            df = df.set_index('date')\n            df['cell_id'] = current_cell_id\n\n            df_list = [all_cell_df, df]\n            all_cell_df = pd.concat(df_list)  # merge into big dataframe\n\n        except Exception as e:\n            print(f\"Error processing cell {current_cell_id}: {e}\")\n            traceback.print_exc()\n\n            # Retry failed batch up to max_retries times\n            retries = 0\n            while retries < max_retries:\n                print(\n                    f\"Retrying batch for cell {current_cell_id} in {wait_time} seconds... (retry {retries+1}/{max_retries})\")\n                time.sleep(wait_time)\n                try:\n                    df = process_batch([current_cell_id])\n                    df_list = [all_cell_df, df]\n                    # merge into big dataframe\n                    all_cell_df = pd.concat(df_list)\n                    print(\n                        f\"Batch for cell {current_cell_id} processed successfully after {retries+1} retries.\")\n                    break\n                except Exception as e:\n                    print(f\"Error processing cell {current_cell_id}: {e}\")\n                    traceback.print_exc()\n                    retries += 1\n            else:\n                print(\n                    f\"Batch for cell {current_cell_id} failed after {max_retries} retries.\")\n\n    return all_cell_df\n\n\n# Split cell IDs into batches\ncell_ids = submission_format_df.index.tolist()\nbatches = [cell_ids[i:i+batch_size]\n           for i in range(0, len(cell_ids), batch_size)]\n\n# Process batches using Dask\ndelayed_results = [delayed(process_batch)(batch) for batch in batches]\nall_results = compute(*delayed_results, scheduler='processes')\n\n# Concatenate all results\ndf_list = []\nfor result in all_results:\n    df_list.append(result)\n\nfinal_df = pd.concat(df_list)\n\n# Save results to CSV file\nfinal_df.to_csv(final_csv_file, header=True, index=True)\n\nprint(\n    f\"Batch processing completed successfully. Results saved to {final_csv_file}.\")\n",
  "history_output" : "today date = 2023-04-23\n/home/chetana\n2023-03-14 06:00:00\n['gcloud', 'auth', 'application-default', 'login', '--scopes=https://www.googleapis.com/auth/earthengine,https://www.googleapis.com/auth/devstorage.full_control', '--client-id-file=/home/chetana/.config/earthengine/credentials-client-id.json']\nFetching credentials using gcloud\norig_exe:  gcloud\nenum 2 No such file or directory gcloud\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/R8h4tMRaWdsA/data_gee_modis_real_time.py\", line 9, in <module>\n    ee.Initialize()\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/__init__.py\", line 132, in Initialize\n    data.initialize(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/data.py\", line 201, in initialize\n    _install_cloud_api_resource()\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/data.py\", line 260, in _install_cloud_api_resource\n    _cloud_api_resource = _cloud_api_utils.build_cloud_resource(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/_cloud_api_utils.py\", line 166, in build_cloud_resource\n    resource = build()\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/_cloud_api_utils.py\", line 146, in build\n    return discovery.build(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/googleapiclient/_helpers.py\", line 134, in positional_wrapper\n    return wrapped(*args, **kwargs)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/googleapiclient/discovery.py\", line 270, in build\n    content = _retrieve_discovery_doc(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/googleapiclient/discovery.py\", line 376, in _retrieve_discovery_doc\n    resp, content = req.execute(num_retries=num_retries)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/googleapiclient/_helpers.py\", line 134, in positional_wrapper\n    return wrapped(*args, **kwargs)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/googleapiclient/http.py\", line 900, in execute\n    resp, content = _retry_request(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/googleapiclient/http.py\", line 177, in _retry_request\n    resp, content = http.request(uri, method, *args, **kwargs)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/google_auth_httplib2.py\", line 209, in request\n    self.credentials.before_request(self._request, method, uri, request_headers)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/google/auth/credentials.py\", line 133, in before_request\n    self.refresh(request)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/google/oauth2/credentials.py\", line 228, in refresh\n    ) = reauth.refresh_grant(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/google/oauth2/reauth.py\", line 338, in refresh_grant\n    _client._handle_error_response(response_data)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/google/oauth2/_client.py\", line 60, in _handle_error_response\n    raise exceptions.RefreshError(error_details, response_data)\ngoogle.auth.exceptions.RefreshError: ('invalid_grant: Bad Request', {'error': 'invalid_grant', 'error_description': 'Bad Request'})\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/oauth.py\", line 299, in _load_app_default_credentials\n    subprocess.run(command, check=True)\n  File \"/home/chetana/anaconda3/lib/python3.9/subprocess.py\", line 505, in run\n    with Popen(*popenargs, **kwargs) as process:\n  File \"/home/chetana/anaconda3/lib/python3.9/subprocess.py\", line 951, in __init__\n    self._execute_child(args, executable, preexec_fn, close_fds,\n  File \"/home/chetana/anaconda3/lib/python3.9/subprocess.py\", line 1825, in _execute_child\n    raise child_exception_type(errno_num, err_msg, err_filename)\nFileNotFoundError: [Errno 2] No such file or directory: 'gcloud'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/R8h4tMRaWdsA/data_gee_modis_real_time.py\", line 12, in <module>\n    ee.Authenticate()\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/__init__.py\", line 104, in Authenticate\n    return oauth.authenticate(authorization_code, quiet, code_verifier, auth_mode,\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/oauth.py\", line 401, in authenticate\n    _load_app_default_credentials(auth_mode == 'gcloud', scopes, quiet)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/oauth.py\", line 302, in _load_app_default_credentials\n    raise Exception('gcloud command not found. ' + tip) from e\nException: gcloud command not found. Please ensure that gcloud is installed.\nMore information: https://developers.google.com/earth-engine/guides/python_install\n\n",
  "history_begin_time" : 1682276179078,
  "history_end_time" : 1682276205861,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "O5YH9fjIsChT",
  "history_input" : "import subprocess\nfrom datetime import datetime\n\n\n# Write first python in Geoweaver\nimport os\nimport urllib.request, urllib.error, urllib.parse\nimport sys\n\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\n\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(dir_path)\n\ntile_list = ['h08v04', 'h09v04', 'h10v04', 'h11v04', 'h08v05', 'h09v05', 'h10v05', 'h07v06', 'h08v06', 'h09v06']\n\n\ndef get_latest_date():\n  try:\n    from BeautifulSoup import BeautifulSoup\n  except ImportError:\n      from bs4 import BeautifulSoup\n\n  modis_list_url = \"https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\n\n  print(modis_list_url)\n\n  response = subprocess.run(f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -np -e robots=off {modis_list_url}', shell=True,  stderr=subprocess.PIPE)\n  index_file = open('index.html', 'r')\n  webContent = index_file.read()\n\n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n  print(parsed_html.body.find('td'))\n  print('----------------------')\n  print(parsed_html.body.find('td', attrs={'class':'indexcolname'}).text)\n\nget_latest_date()\n#p = subprocess.run('wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -np -e robots=off https://n5eil01u.ecs.nsidc.org/SMAP/SPL4CMDL.006/2019.10.07/SMAP_L4_C_mdl_20191007T000000_Vv6042_001.h5 --quiet', shell=True,  stderr=subprocess.PIPE)\n\n",
  "history_output" : "/home/chetana/gw-workspace/O5YH9fjIsChT\nhttps://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\n/home/chetana/gw-workspace/O5YH9fjIsChT/data_gee_modis_real_time.py:36: GuessedAtParserWarning: No parser was explicitly specified, so I'm using the best available HTML parser for this system (\"lxml\"). This usually isn't a problem, but if you run this code on another system, or in a different virtual environment, it may use a different parser and behave differently.\n\nThe code that caused this warning is on line 36 of the file /home/chetana/gw-workspace/O5YH9fjIsChT/data_gee_modis_real_time.py. To get rid of this warning, pass the additional argument 'features=\"lxml\"' to the BeautifulSoup constructor.\n\n  parsed_html = BeautifulSoup(webContent, parser=\"html.parser\")\n<td class=\"indexcolicon\"><a href=\"/MOST/\"><img alt=\"[PARENTDIR]\" src=\"/theme/icons/folder-home.png\"/></a></td>\n----------------------\nParent Directory\n",
  "history_begin_time" : 1682276148026,
  "history_end_time" : 1682276150129,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "GBpXD1zpCh8G",
  "history_input" : "import subprocess\nfrom datetime import datetime\n\n\n# Write first python in Geoweaver\nimport os\nimport urllib.request, urllib.error, urllib.parse\nimport sys\n\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\n\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(dir_path)\n\ntile_list = ['h08v04', 'h09v04', 'h10v04', 'h11v04', 'h08v05', 'h09v05', 'h10v05', 'h07v06', 'h08v06', 'h09v06']\n\n\ndef get_latest_date():\n  try:\n    from BeautifulSoup import BeautifulSoup\n  except ImportError:\n      from bs4 import BeautifulSoup\n\n  modis_list_url = \"https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\n\n  print(modis_list_url)\n\n  response = subprocess.run(f'wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -np -e robots=off {modis_list_url}', shell=True,  stderr=subprocess.PIPE)\n  index_file = open('index.html', 'r')\n  webContent = index_file.read()\n\n\n  parsed_html = BeautifulSoup(webContent)\n  print(parsed_html.body.find('td', attrs={'class':'indexcolname'}).text)\n\nget_latest_date()\n#p = subprocess.run('wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -np -e robots=off https://n5eil01u.ecs.nsidc.org/SMAP/SPL4CMDL.006/2019.10.07/SMAP_L4_C_mdl_20191007T000000_Vv6042_001.h5 --quiet', shell=True,  stderr=subprocess.PIPE)\n\n",
  "history_output" : "/home/chetana/gw-workspace/GBpXD1zpCh8G\nhttps://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\n/home/chetana/gw-workspace/GBpXD1zpCh8G/data_gee_modis_real_time.py:36: GuessedAtParserWarning: No parser was explicitly specified, so I'm using the best available HTML parser for this system (\"lxml\"). This usually isn't a problem, but if you run this code on another system, or in a different virtual environment, it may use a different parser and behave differently.\n\nThe code that caused this warning is on line 36 of the file /home/chetana/gw-workspace/GBpXD1zpCh8G/data_gee_modis_real_time.py. To get rid of this warning, pass the additional argument 'features=\"lxml\"' to the BeautifulSoup constructor.\n\n  parsed_html = BeautifulSoup(webContent)\nParent Directory\n",
  "history_begin_time" : 1682276035355,
  "history_end_time" : 1682276037394,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "WxTqV5mzap8Q",
  "history_input" : "from all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\nimport dask.dataframe as dd\nfrom dask import delayed, compute\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Authenticate()\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(\n    submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n\n# start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(\n    f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    os.remove(final_csv_file)\n\n# Set up batch processing parameters\nbatch_size = 50  # Number of cells to query in each batch\nmax_retries = 5  # Maximum number of times to retry a batch that fails\nwait_time = 30  # Number of seconds to wait before retrying a failed batch\n\n\ndef process_batch(cell_ids):\n    # Process a batch of cells\n\n    all_cell_df = pd.DataFrame(columns=['date', column_name, 'cell_id'])\n\n    for current_cell_id in cell_ids:\n\n        try:\n            longitude = all_cell_coords_df['lon'][current_cell_id]\n            latitude = all_cell_coords_df['lat'][current_cell_id]\n\n            # identify a 20 meter buffer around our Point Of Interest (POI)\n            poi = ee.Geometry.Point(longitude, latitude).buffer(20)\n\n            def poi_mean(img):\n                reducer = img.reduceRegion(\n                    reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n                mean = reducer.get(var_name)\n                return img.set('date', img.date().format()).set(column_name, mean)\n\n            viirs1 = ee.ImageCollection(\n                product_name).filterDate(start_date, end_date)\n            poi_reduced_imgs1 = viirs1.map(poi_mean)\n            nested_list1 = poi_reduced_imgs1.reduceColumns(\n                ee.Reducer.toList(2), ['date', column_name]).values().get(0)\n\n            # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n            df = pd.DataFrame(nested_list1.getInfo(),\n                              columns=['date', column_name])\n            df['date'] = pd.to_datetime(df['date'])\n            df = df.set_index('date')\n            df['cell_id'] = current_cell_id\n\n            df_list = [all_cell_df, df]\n            all_cell_df = pd.concat(df_list)  # merge into big dataframe\n\n        except Exception as e:\n            print(f\"Error processing cell {current_cell_id}: {e}\")\n            traceback.print_exc()\n\n            # Retry failed batch up to max_retries times\n            retries = 0\n            while retries < max_retries:\n                print(\n                    f\"Retrying batch for cell {current_cell_id} in {wait_time} seconds... (retry {retries+1}/{max_retries})\")\n                time.sleep(wait_time)\n                try:\n                    df = process_batch([current_cell_id])\n                    df_list = [all_cell_df, df]\n                    # merge into big dataframe\n                    all_cell_df = pd.concat(df_list)\n                    print(\n                        f\"Batch for cell {current_cell_id} processed successfully after {retries+1} retries.\")\n                    break\n                except Exception as e:\n                    print(f\"Error processing cell {current_cell_id}: {e}\")\n                    traceback.print_exc()\n                    retries += 1\n            else:\n                print(\n                    f\"Batch for cell {current_cell_id} failed after {max_retries} retries.\")\n\n    return all_cell_df\n\n\n# Split cell IDs into batches\ncell_ids = submission_format_df.index.tolist()\nbatches = [cell_ids[i:i+batch_size]\n           for i in range(0, len(cell_ids), batch_size)]\n\n# Process batches using Dask\ndelayed_results = [delayed(process_batch)(batch) for batch in batches]\nall_results = compute(*delayed_results, scheduler='processes')\n\n# Concatenate all results\ndf_list = []\nfor result in all_results:\n    df_list.append(result)\n\nfinal_df = pd.concat(df_list)\n\n# Save results to CSV file\nfinal_df.to_csv(final_csv_file, header=True, index=True)\n\nprint(\n    f\"Batch processing completed successfully. Results saved to {final_csv_file}.\")\n",
  "history_output" : "today date = 2023-04-23\n/home/chetana\n2023-03-14 06:00:00\n['gcloud', 'auth', 'application-default', 'login', '--scopes=https://www.googleapis.com/auth/earthengine,https://www.googleapis.com/auth/devstorage.full_control', '--client-id-file=/home/chetana/.config/earthengine/credentials-client-id.json']\nFetching credentials using gcloud\norig_exe:  gcloud\nenum 2 No such file or directory gcloud\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/WxTqV5mzap8Q/data_gee_modis_real_time.py\", line 9, in <module>\n    ee.Initialize()\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/__init__.py\", line 132, in Initialize\n    data.initialize(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/data.py\", line 201, in initialize\n    _install_cloud_api_resource()\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/data.py\", line 260, in _install_cloud_api_resource\n    _cloud_api_resource = _cloud_api_utils.build_cloud_resource(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/_cloud_api_utils.py\", line 166, in build_cloud_resource\n    resource = build()\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/_cloud_api_utils.py\", line 146, in build\n    return discovery.build(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/googleapiclient/_helpers.py\", line 134, in positional_wrapper\n    return wrapped(*args, **kwargs)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/googleapiclient/discovery.py\", line 270, in build\n    content = _retrieve_discovery_doc(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/googleapiclient/discovery.py\", line 376, in _retrieve_discovery_doc\n    resp, content = req.execute(num_retries=num_retries)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/googleapiclient/_helpers.py\", line 134, in positional_wrapper\n    return wrapped(*args, **kwargs)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/googleapiclient/http.py\", line 900, in execute\n    resp, content = _retry_request(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/googleapiclient/http.py\", line 177, in _retry_request\n    resp, content = http.request(uri, method, *args, **kwargs)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/google_auth_httplib2.py\", line 209, in request\n    self.credentials.before_request(self._request, method, uri, request_headers)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/google/auth/credentials.py\", line 133, in before_request\n    self.refresh(request)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/google/oauth2/credentials.py\", line 228, in refresh\n    ) = reauth.refresh_grant(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/google/oauth2/reauth.py\", line 338, in refresh_grant\n    _client._handle_error_response(response_data)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/google/oauth2/_client.py\", line 60, in _handle_error_response\n    raise exceptions.RefreshError(error_details, response_data)\ngoogle.auth.exceptions.RefreshError: ('invalid_grant: Bad Request', {'error': 'invalid_grant', 'error_description': 'Bad Request'})\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/oauth.py\", line 299, in _load_app_default_credentials\n    subprocess.run(command, check=True)\n  File \"/home/chetana/anaconda3/lib/python3.9/subprocess.py\", line 505, in run\n    with Popen(*popenargs, **kwargs) as process:\n  File \"/home/chetana/anaconda3/lib/python3.9/subprocess.py\", line 951, in __init__\n    self._execute_child(args, executable, preexec_fn, close_fds,\n  File \"/home/chetana/anaconda3/lib/python3.9/subprocess.py\", line 1825, in _execute_child\n    raise child_exception_type(errno_num, err_msg, err_filename)\nFileNotFoundError: [Errno 2] No such file or directory: 'gcloud'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/WxTqV5mzap8Q/data_gee_modis_real_time.py\", line 12, in <module>\n    ee.Authenticate()\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/__init__.py\", line 104, in Authenticate\n    return oauth.authenticate(authorization_code, quiet, code_verifier, auth_mode,\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/oauth.py\", line 401, in authenticate\n    _load_app_default_credentials(auth_mode == 'gcloud', scopes, quiet)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/oauth.py\", line 302, in _load_app_default_credentials\n    raise Exception('gcloud command not found. ' + tip) from e\nException: gcloud command not found. Please ensure that gcloud is installed.\nMore information: https://developers.google.com/earth-engine/guides/python_install\n\n",
  "history_begin_time" : 1682275955698,
  "history_end_time" : 1682275982522,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "3orANWVk4DZa",
  "history_input" : "from all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\nimport dask.dataframe as dd\nfrom dask import delayed, compute\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Authenticate()\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(\n    submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n\n# start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(\n    f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    os.remove(final_csv_file)\n\n# Set up batch processing parameters\nbatch_size = 50  # Number of cells to query in each batch\nmax_retries = 5  # Maximum number of times to retry a batch that fails\nwait_time = 30  # Number of seconds to wait before retrying a failed batch\n\n\ndef process_batch(cell_ids):\n    # Process a batch of cells\n\n    all_cell_df = pd.DataFrame(columns=['date', column_name, 'cell_id'])\n\n    for current_cell_id in cell_ids:\n\n        try:\n            longitude = all_cell_coords_df['lon'][current_cell_id]\n            latitude = all_cell_coords_df['lat'][current_cell_id]\n\n            # identify a 20 meter buffer around our Point Of Interest (POI)\n            poi = ee.Geometry.Point(longitude, latitude).buffer(20)\n\n            def poi_mean(img):\n                reducer = img.reduceRegion(\n                    reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n                mean = reducer.get(var_name)\n                return img.set('date', img.date().format()).set(column_name, mean)\n\n            viirs1 = ee.ImageCollection(\n                product_name).filterDate(start_date, end_date)\n            poi_reduced_imgs1 = viirs1.map(poi_mean)\n            nested_list1 = poi_reduced_imgs1.reduceColumns(\n                ee.Reducer.toList(2), ['date', column_name]).values().get(0)\n\n            # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n            df = pd.DataFrame(nested_list1.getInfo(),\n                              columns=['date', column_name])\n            df['date'] = pd.to_datetime(df['date'])\n            df = df.set_index('date')\n            df['cell_id'] = current_cell_id\n\n            df_list = [all_cell_df, df]\n            all_cell_df = pd.concat(df_list)  # merge into big dataframe\n\n        except Exception as e:\n            print(f\"Error processing cell {current_cell_id}: {e}\")\n            traceback.print_exc()\n\n            # Retry failed batch up to max_retries times\n            retries = 0\n            while retries < max_retries:\n                print(\n                    f\"Retrying batch for cell {current_cell_id} in {wait_time} seconds... (retry {retries+1}/{max_retries})\")\n                time.sleep(wait_time)\n                try:\n                    df = process_batch([current_cell_id])\n                    df_list = [all_cell_df, df]\n                    # merge into big dataframe\n                    all_cell_df = pd.concat(df_list)\n                    print(\n                        f\"Batch for cell {current_cell_id} processed successfully after {retries+1} retries.\")\n                    break\n                except Exception as e:\n                    print(f\"Error processing cell {current_cell_id}: {e}\")\n                    traceback.print_exc()\n                    retries += 1\n            else:\n                print(\n                    f\"Batch for cell {current_cell_id} failed after {max_retries} retries.\")\n\n    return all_cell_df\n\n\n# Split cell IDs into batches\ncell_ids = submission_format_df.index.tolist()\nbatches = [cell_ids[i:i+batch_size]\n           for i in range(0, len(cell_ids), batch_size)]\n\n# Process batches using Dask\ndelayed_results = [delayed(process_batch)(batch) for batch in batches]\nall_results = compute(*delayed_results, scheduler='processes')\n\n# Concatenate all results\ndf_list = []\nfor result in all_results:\n    df_list.append(result)\n\nfinal_df = pd.concat(df_list)\n\n# Save results to CSV file\nfinal_df.to_csv(final_csv_file, header=True, index=True)\n\nprint(\n    f\"Batch processing completed successfully. Results saved to {final_csv_file}.\")\n",
  "history_output" : "today date = 2023-04-23\n/home/chetana\n2023-03-14 06:00:00\n['gcloud', 'auth', 'application-default', 'login', '--scopes=https://www.googleapis.com/auth/earthengine,https://www.googleapis.com/auth/devstorage.full_control', '--client-id-file=/home/chetana/.config/earthengine/credentials-client-id.json']\nFetching credentials using gcloud\norig_exe:  gcloud\nenum 2 No such file or directory gcloud\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/3orANWVk4DZa/data_gee_modis_real_time.py\", line 9, in <module>\n    ee.Initialize()\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/__init__.py\", line 132, in Initialize\n    data.initialize(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/data.py\", line 201, in initialize\n    _install_cloud_api_resource()\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/data.py\", line 260, in _install_cloud_api_resource\n    _cloud_api_resource = _cloud_api_utils.build_cloud_resource(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/_cloud_api_utils.py\", line 166, in build_cloud_resource\n    resource = build()\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/_cloud_api_utils.py\", line 146, in build\n    return discovery.build(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/googleapiclient/_helpers.py\", line 134, in positional_wrapper\n    return wrapped(*args, **kwargs)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/googleapiclient/discovery.py\", line 270, in build\n    content = _retrieve_discovery_doc(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/googleapiclient/discovery.py\", line 376, in _retrieve_discovery_doc\n    resp, content = req.execute(num_retries=num_retries)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/googleapiclient/_helpers.py\", line 134, in positional_wrapper\n    return wrapped(*args, **kwargs)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/googleapiclient/http.py\", line 900, in execute\n    resp, content = _retry_request(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/googleapiclient/http.py\", line 177, in _retry_request\n    resp, content = http.request(uri, method, *args, **kwargs)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/google_auth_httplib2.py\", line 209, in request\n    self.credentials.before_request(self._request, method, uri, request_headers)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/google/auth/credentials.py\", line 133, in before_request\n    self.refresh(request)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/google/oauth2/credentials.py\", line 228, in refresh\n    ) = reauth.refresh_grant(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/google/oauth2/reauth.py\", line 338, in refresh_grant\n    _client._handle_error_response(response_data)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/google/oauth2/_client.py\", line 60, in _handle_error_response\n    raise exceptions.RefreshError(error_details, response_data)\ngoogle.auth.exceptions.RefreshError: ('invalid_grant: Bad Request', {'error': 'invalid_grant', 'error_description': 'Bad Request'})\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/oauth.py\", line 299, in _load_app_default_credentials\n    subprocess.run(command, check=True)\n  File \"/home/chetana/anaconda3/lib/python3.9/subprocess.py\", line 505, in run\n    with Popen(*popenargs, **kwargs) as process:\n  File \"/home/chetana/anaconda3/lib/python3.9/subprocess.py\", line 951, in __init__\n    self._execute_child(args, executable, preexec_fn, close_fds,\n  File \"/home/chetana/anaconda3/lib/python3.9/subprocess.py\", line 1825, in _execute_child\n    raise child_exception_type(errno_num, err_msg, err_filename)\nFileNotFoundError: [Errno 2] No such file or directory: 'gcloud'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/3orANWVk4DZa/data_gee_modis_real_time.py\", line 12, in <module>\n    ee.Authenticate()\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/__init__.py\", line 104, in Authenticate\n    return oauth.authenticate(authorization_code, quiet, code_verifier, auth_mode,\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/oauth.py\", line 401, in authenticate\n    _load_app_default_credentials(auth_mode == 'gcloud', scopes, quiet)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/oauth.py\", line 302, in _load_app_default_credentials\n    raise Exception('gcloud command not found. ' + tip) from e\nException: gcloud command not found. Please ensure that gcloud is installed.\nMore information: https://developers.google.com/earth-engine/guides/python_install\n\n",
  "history_begin_time" : 1682275644193,
  "history_end_time" : 1682275694281,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "8GtZ5VLzwuf2",
  "history_input" : "import subprocess\nfrom datetime import datetime\nfrom metloom.pointdata import SnotelPointData\n\n\n# Write first python in Geoweaver\nimport os\nimport urllib.request, urllib.error, urllib.parse\nimport sys\n\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\ntile_list = ['h08v04', 'h09v04', 'h10v04', 'h11v04', 'h08v05', 'h09v05', 'h10v05', 'h07v06', 'h08v06', 'h09v06']\n\n\ndef get_latest_date():\n  try:\n    from BeautifulSoup import BeautifulSoup\n  except ImportError:\n      from bs4 import BeautifulSoup\n\n  modis_list_url = \"https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\"\n\n  print(modis_list_url)\n\n  response = urllib.request.urlopen(modis_list_url)\n  webContent = response.read().decode('UTF-8')\n\n  print(webContent)\n\n\n  parsed_html = BeautifulSoup(webContent)\n  print(parsed_html.body.find('td', attrs={'class':'indexcolname'}).text)\n\nget_latest_date()\n#p = subprocess.run('wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -np -e robots=off https://n5eil01u.ecs.nsidc.org/SMAP/SPL4CMDL.006/2019.10.07/SMAP_L4_C_mdl_20191007T000000_Vv6042_001.h5 --quiet', shell=True,  stderr=subprocess.PIPE)\n\n",
  "history_output" : "https://n5eil01u.ecs.nsidc.org/MOST/MOD10A2.061/\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/8GtZ5VLzwuf2/data_gee_modis_real_time.py\", line 37, in <module>\n    get_latest_date()\n  File \"/home/chetana/gw-workspace/8GtZ5VLzwuf2/data_gee_modis_real_time.py\", line 28, in get_latest_date\n    response = urllib.request.urlopen(modis_list_url)\n  File \"/home/chetana/anaconda3/lib/python3.9/urllib/request.py\", line 214, in urlopen\n    return opener.open(url, data, timeout)\n  File \"/home/chetana/anaconda3/lib/python3.9/urllib/request.py\", line 523, in open\n    response = meth(req, response)\n  File \"/home/chetana/anaconda3/lib/python3.9/urllib/request.py\", line 632, in http_response\n    response = self.parent.error(\n  File \"/home/chetana/anaconda3/lib/python3.9/urllib/request.py\", line 555, in error\n    result = self._call_chain(*args)\n  File \"/home/chetana/anaconda3/lib/python3.9/urllib/request.py\", line 494, in _call_chain\n    result = func(*args)\n  File \"/home/chetana/anaconda3/lib/python3.9/urllib/request.py\", line 747, in http_error_302\n    return self.parent.open(new, timeout=req.timeout)\n  File \"/home/chetana/anaconda3/lib/python3.9/urllib/request.py\", line 523, in open\n    response = meth(req, response)\n  File \"/home/chetana/anaconda3/lib/python3.9/urllib/request.py\", line 632, in http_response\n    response = self.parent.error(\n  File \"/home/chetana/anaconda3/lib/python3.9/urllib/request.py\", line 561, in error\n    return self._call_chain(*args)\n  File \"/home/chetana/anaconda3/lib/python3.9/urllib/request.py\", line 494, in _call_chain\n    result = func(*args)\n  File \"/home/chetana/anaconda3/lib/python3.9/urllib/request.py\", line 641, in http_error_default\n    raise HTTPError(req.full_url, code, msg, hdrs, fp)\nurllib.error.HTTPError: HTTP Error 401: Unauthorized\n",
  "history_begin_time" : 1682275326318,
  "history_end_time" : 1682275337088,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "xJjpwDPbg6hj",
  "history_input" : "import subprocess\n\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\np = subprocess.run('wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -np -e robots=off https://n5eil01u.ecs.nsidc.org/SMAP/SPL4CMDL.006/2019.10.07/SMAP_L4_C_mdl_20191007T000000_Vv6042_001.h5 --quiet', shell=True,  stderr=subprocess.PIPE)\n",
  "history_output" : "",
  "history_begin_time" : 1682274559562,
  "history_end_time" : 1682274563124,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "49wd52jcqc3Z",
  "history_input" : "import subprocess\n\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\np = subprocess.run('wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -np -e robots=off https://n5eil01u.ecs.nsidc.org/SMAP/SPL4CMDL.006/2019.10.07/SMAP_L4_C_mdl_20191007T000000_Vv6042_001.h5', shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\nprint(p.return_code)",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/49wd52jcqc3Z/data_gee_modis_real_time.py\", line 9, in <module>\n    print(p.return_code)\nAttributeError: 'CompletedProcess' object has no attribute 'return_code'\n",
  "history_begin_time" : 1682274445373,
  "history_end_time" : 1682274449119,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "QzqD5kHOz51g",
  "history_input" : "import subprocess\nimport wget\n\n\n# set up your credentials using\n# echo 'machine urs.earthdata.nasa.gov login <uid> password <password>' >> ~/.netrc\n\np = subprocess.run('wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --keep-session-cookies --no-check-certificate --auth-no-challenge=on -r --reject \"index.html*\" -np -e robots=off https://n5eil01u.ecs.nsidc.org/SMAP/SPL4CMDL.006/2019.10.07/SMAP_L4_C_mdl_20191007T000000_Vv6042_001.h5', shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\nprint(p.return_code)",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/QzqD5kHOz51g/data_gee_modis_real_time.py\", line 2, in <module>\n    import wget\nModuleNotFoundError: No module named 'wget'\n",
  "history_begin_time" : 1682274418381,
  "history_end_time" : 1682274419487,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "6mf1r461y2u",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1681516928472,
  "history_end_time" : 1681516929998,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "tFe5O1D4yQsD",
  "history_input" : "# This script will download modis data for all the testing sites from Google Earth Engine.\n# The start date is the last stop date of the last run.\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\n\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n#start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "Go to the following link in your browser:\n    https://accounts.google.com/o/oauth2/auth?response_type=code&client_id=517222506229-vsmmajv00ul0bs7p89v5m89qs8eb9359.apps.googleusercontent.com&redirect_uri=https%3A%2F%2Fsdk.cloud.google.com%2Fapplicationdefaultauthcode.html&scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fearthengine+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdevstorage.full_control+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Faccounts.reauth&state=u0VeATqLYaIuttvlcKWdObJTgNyDT5&prompt=consent&access_type=offline&code_challenge=8CtPOKDTpWLgJTxuZkOX60pwS46ncR0PTqzpNYWpREM&code_challenge_method=S256\n\nStream closed",
  "history_begin_time" : 1681253181362,
  "history_end_time" : 1681253276570,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "sISzNzmeNLUS",
  "history_input" : "# This script will download modis data for all the testing sites from Google Earth Engine.\n# The start date is the last stop date of the last run.\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\n\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n#start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "Running",
  "history_begin_time" : 1681253089146,
  "history_end_time" : 1681253276438,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "smtvolkwode",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1681039708518,
  "history_end_time" : 1681039710009,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "9aljhgjuix6",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1681039690062,
  "history_end_time" : 1681039697764,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "42u79b456gr",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1681007820841,
  "history_end_time" : 1681007822384,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "Ih5C8cTVaMnO",
  "history_input" : "from all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\nimport dask.dataframe as dd\nfrom dask import delayed, compute\n\nservice_account = 'eartheginegcloud@earthengine58.iam.gserviceaccount.com'\ncreds = ee.ServiceAccountCredentials(\n    service_account, '/home/chetana/bhargavi-creds.json')\n\nee.Initialize(creds)\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n\n#start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    os.remove(final_csv_file)\n\n# Set up batch processing parameters\nbatch_size = 50 # Number of cells to query in each batch\nmax_retries = 5 # Maximum number of times to retry a batch that fails\nwait_time = 30 # Number of seconds to wait before retrying a failed batch\n\ndef process_batch(cell_ids):\n    # Process a batch of cells\n    \n    all_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id'])\n    \n    for current_cell_id in cell_ids:\n        \n        try:\n            longitude = all_cell_coords_df['lon'][current_cell_id]\n            latitude = all_cell_coords_df['lat'][current_cell_id]\n\n            # identify a 20 meter buffer around our Point Of Interest (POI)\n            poi = ee.Geometry.Point(longitude, latitude).buffer(20)\n\n            def poi_mean(img):\n                reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n                mean = reducer.get(var_name)\n                return img.set('date', img.date().format()).set(column_name,mean)\n\n            viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n            poi_reduced_imgs1 = viirs1.map(poi_mean)\n            nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n\n            # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n            df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n            df['date'] = pd.to_datetime(df['date'])\n            df = df.set_index('date')\n            df['cell_id'] = current_cell_id\n\n            df_list = [all_cell_df, df]\n            all_cell_df = pd.concat(df_list) # merge into big dataframe\n\n        except Exception as e:\n            print(f\"Error processing cell {current_cell_id}: {e}\")\n            traceback.print_exc()\n\n            # Retry failed batch up to max_retries times\n            retries = 0\n            while retries < max_retries:\n                print(f\"Retrying batch for cell {current_cell_id} in {wait_time} seconds... (retry {retries+1}/{max_retries})\")\n                time.sleep(wait_time)\n                try:\n                    df = process_batch([current_cell_id])\n                    df_list = [all_cell_df, df]\n                    all_cell_df = pd.concat(df_list) # merge into big dataframe\n                    print(f\"Batch for cell {current_cell_id} processed successfully after {retries+1} retries.\")\n                    break\n                except Exception as e:\n                    print(f\"Error processing cell {current_cell_id}: {e}\")\n                    traceback.print_exc()\n                    retries += 1\n            else:\n                print(f\"Batch for cell {current_cell_id} failed after {max_retries} retries.\")\n                \n    return all_cell_df\n\n# Split cell IDs into batches\ncell_ids = submission_format_df.index.tolist()\nbatches = [cell_ids[i:i+batch_size] for i in range(0, len(cell_ids), batch_size)]\n\n# Process batches using Dask\ndelayed_results = [delayed(process_batch)(batch) for batch in batches]\nall_results = compute(*delayed_results, scheduler='processes')\n\n# Concatenate all results\ndf_list = []\nfor result in all_results:\n    df_list.append(result)\n    \nfinal_df = pd.concat(df_list)\n\n# Save results to CSV file\nfinal_df.to_csv(final_csv_file, header=True, index=True)\n\nprint(f\"Batch processing completed successfully. Results saved to {final_csv_file}.\")\n",
  "history_output" : "today date = 2023-03-30\n/home/chetana\n2023-03-14 06:00:00\n2021-12-30\nResults will be saved to /home/chetana/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2021-12-30_2023-03-30.csv\ntoday date = 2023-03-30\n/home/chetana\ntoday date = 2023-03-30\n/home/chetana\ntoday date = 2023-03-30\n/home/chetana\ntoday date = 2023-03-30\n/home/chetana\ntoday date = 2023-03-30\n/home/chetana\ntoday date = 2023-03-30\n/home/chetana\ntoday date = 2023-03-30\n/home/chetana\ntoday date = 2023-03-30\n/home/chetana\ntoday date = 2023-03-30\n/home/chetana\ntoday date = 2023-03-30\n/home/chetana\ntoday date = 2023-03-30\n/home/chetana\ntoday date = 2023-03-30\n/home/chetana\ntoday date = 2023-03-30\n/home/chetana\ntoday date = 2023-03-30\n/home/chetana\ntoday date = 2023-03-30\n/home/chetana\ntoday date = 2023-03-30\n/home/chetana\ntoday date = 2023-03-30\n/home/chetana\ntoday date = 2023-03-30\n/home/chetana\ntoday date = 2023-03-30\n/home/chetana\ntoday date = 2023-03-30\n/home/chetana\ntoday date = 2023-03-30\n/home/chetana\ntoday date = 2023-03-30\n/home/chetana\ntoday date = 2023-03-30\n/home/chetana\ntoday date = 2023-03-30\n/home/chetana\ntoday date = 2023-03-30\n/home/chetana\ntoday date = 2023-03-30\n/home/chetana\ntoday date = 2023-03-30\n/home/chetana\ntoday date = 2023-03-30\n/home/chetana\ntoday date = 2023-03-30\n/home/chetana\ntoday date = 2023-03-30\n/home/chetana\ntoday date = 2023-03-30\n/home/chetana\ntoday date = 2023-03-30\n/home/chetana\ntoday date = 2023-03-30\n/home/chetana\ntoday date = 2023-03-30\n/home/chetana\ntoday date = 2023-03-30\n/home/chetana\ntoday date = 2023-03-30\n/home/chetana\ntoday date = 2023-03-30\n/home/chetana\ntoday date = 2023-03-30\n/home/chetana\ntoday date = 2023-03-30\n/home/chetana\ntoday date = 2023-03-30\n/home/chetana\ntoday date = 2023-03-30\n/home/chetana\ntoday date = 2023-03-30\n/home/chetana\ntoday date = 2023-03-30\n/home/chetana\ntoday date = 2023-03-30\n/home/chetana\ntoday date = 2023-03-30\n/home/chetana\ntoday date = 2023-03-30\n/home/chetana\ntoday date = 2023-03-30\n/home/chetana\ntoday date = 2023-03-30\n/home/chetana\n2023-03-14 06:00:00\n2023-03-14 06:00:00\n2023-03-14 06:00:00\n2023-03-14 06:00:00\n2023-03-14 06:00:00\n2023-03-14 06:00:00\n2021-12-30\nResults will be saved to /home/chetana/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2021-12-30_2023-03-30.csv\nTraceback (most recent call last):\n  File \"<string>\", line 1, in <module>\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/spawn.py\", line 116, in spawn_main\n    exitcode = _main(fd, parent_sentinel)\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/spawn.py\", line 125, in _main\n    prepare(preparation_data)\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/spawn.py\", line 236, in prepare\n    _fixup_main_from_path(data['init_main_from_path'])\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/spawn.py\", line 287, in _fixup_main_from_path\n    main_content = runpy.run_path(main_path,\n  File \"/home/chetana/anaconda3/lib/python3.9/runpy.py\", line 288, in run_path\n    return _run_module_code(code, init_globals, run_name,\n  File \"/home/chetana/anaconda3/lib/python3.9/runpy.py\", line 97, in _run_module_code\n    _run_code(code, mod_globals, init_globals,\n  File \"/home/chetana/anaconda3/lib/python3.9/runpy.py\", line 87, in _run_code\n    exec(code, run_globals)\n  File \"/home/chetana/gw-workspace/Ih5C8cTVaMnO/data_gee_modis_real_time.py\", line 107, in <module>\n    all_results = compute(*delayed_results, scheduler='processes')\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/dask/base.py\", line 603, in compute\n2021-12-30\nResults will be saved to /home/chetana/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2021-12-30_2023-03-30.csv\n    results = schedule(dsk, keys, **kwargs)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/dask/multiprocessing.py\", line 233, in get\n    result = get_async(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/dask/local.py\", line 499, in get_async\n    fire_tasks(chunksize)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/dask/local.py\", line 494, in fire_tasks\n    fut = submit(batch_execute_tasks, each_args)\n  File \"/home/chetana/anaconda3/lib/python3.9/concurrent/futures/process.py\", line 724, in submit\n    self._adjust_process_count()\n  File \"/home/chetana/anaconda3/lib/python3.9/concurrent/futures/process.py\", line 684, in _adjust_process_count\n    self._spawn_process()\n  File \"/home/chetana/anaconda3/lib/python3.9/concurrent/futures/process.py\", line 701, in _spawn_process\n    p.start()\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/process.py\", line 121, in start\n    self._popen = self._Popen(self)\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/context.py\", line 284, in _Popen\n    return Popen(process_obj)\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/popen_spawn_posix.py\", line 32, in __init__\n    super().__init__(process_obj)\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/popen_fork.py\", line 19, in __init__\n    self._launch(process_obj)\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/popen_spawn_posix.py\", line 42, in _launch\n    prep_data = spawn.get_preparation_data(process_obj._name)\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/spawn.py\", line 154, in get_preparation_data\n    _check_not_importing_main()\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/spawn.py\", line 134, in _check_not_importing_main\n    raise RuntimeError('''\nRuntimeError: \n        An attempt has been made to start a new process before the\n        current process has finished its bootstrapping phase.\n\n        This probably means that you are not using fork to start your\n        child processes and you have forgotten to use the proper idiom\n        in the main module:\n\n            if __name__ == '__main__':\n                freeze_support()\n                ...\n\n        The \"freeze_support()\" line can be omitted if the program\n        is not going to be frozen to produce an executable.\nTraceback (most recent call last):\n  File \"<string>\", line 1, in <module>\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/spawn.py\", line 116, in spawn_main\n    exitcode = _main(fd, parent_sentinel)\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/spawn.py\", line 125, in _main\n    prepare(preparation_data)\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/spawn.py\", line 236, in prepare\n    _fixup_main_from_path(data['init_main_from_path'])\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/spawn.py\", line 287, in _fixup_main_from_path\n    main_content = runpy.run_path(main_path,\n  File \"/home/chetana/anaconda3/lib/python3.9/runpy.py\", line 288, in run_path\n    return _run_module_code(code, init_globals, run_name,\n  File \"/home/chetana/anaconda3/lib/python3.9/runpy.py\", line 97, in _run_module_code\n    _run_code(code, mod_globals, init_globals,\n  File \"/home/chetana/anaconda3/lib/python3.9/runpy.py\", line 87, in _run_code\n    exec(code, run_globals)\n  File \"/home/chetana/gw-workspace/Ih5C8cTVaMnO/data_gee_modis_real_time.py\", line 107, in <module>\n    all_results = compute(*delayed_results, scheduler='processes')\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/dask/base.py\", line 603, in compute\n    results = schedule(dsk, keys, **kwargs)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/dask/multiprocessing.py\", line 233, in get\n    result = get_async(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/dask/local.py\", line 499, in get_async\n    fire_tasks(chunksize)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/dask/local.py\", line 494, in fire_tasks\n    fut = submit(batch_execute_tasks, each_args)\n  File \"/home/chetana/anaconda3/lib/python3.9/concurrent/futures/process.py\", line 724, in submit\n    self._adjust_process_count()\n  File \"/home/chetana/anaconda3/lib/python3.9/concurrent/futures/process.py\", line 684, in _adjust_process_count\n    self._spawn_process()\n  File \"/home/chetana/anaconda3/lib/python3.9/concurrent/futures/process.py\", line 701, in _spawn_process\n    p.start()\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/process.py\", line 121, in start\n    self._popen = self._Popen(self)\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/context.py\", line 284, in _Popen\n    return Popen(process_obj)\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/popen_spawn_posix.py\", line 32, in __init__\n    super().__init__(process_obj)\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/popen_fork.py\", line 19, in __init__\n    self._launch(process_obj)\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/popen_spawn_posix.py\", line 42, in _launch\n    prep_data = spawn.get_preparation_data(process_obj._name)\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/spawn.py\", line 154, in get_preparation_data\n    _check_not_importing_main()\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/spawn.py\", line 134, in _check_not_importing_main\n    raise RuntimeError('''\nRuntimeError: \n        An attempt has been made to start a new process before the\n        current process has finished its bootstrapping phase.\n\n        This probably means that you are not using fork to start your\n        child processes and you have forgotten to use the proper idiom\n        in the main module:\n\n            if __name__ == '__main__':\n                freeze_support()\n                ...\n\n        The \"freeze_support()\" line can be omitted if the program\n        is not going to be frozen to produce an executable.\n2023-03-14 06:00:00\n",
  "history_begin_time" : 1680168909636,
  "history_end_time" : null,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Running"
},{
  "history_id" : "UNjJRJ7EVLFv",
  "history_input" : "from all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\nimport dask.dataframe as dd\nfrom dask import delayed, compute\n\nservice_account = 'eartheginegcloud@earthengine58.iam.gserviceaccount.com'\ncreds = ee.ServiceAccountCredentials(\n    service_account, '/home/chetana/bhargavi-creds.json')\n\nee.Initialize(creds)\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n\n#start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    os.remove(final_csv_file)\n\n# Set up batch processing parameters\nbatch_size = 50 # Number of cells to query in each batch\nmax_retries = 5 # Maximum number of times to retry a batch that fails\nwait_time = 30 # Number of seconds to wait before retrying a failed batch\n\ndef process_batch(cell_ids):\n    # Process a batch of cells\n    \n    all_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id'])\n    \n    for current_cell_id in cell_ids:\n        \n        try:\n            longitude = all_cell_coords_df['lon'][current_cell_id]\n            latitude = all_cell_coords_df['lat'][current_cell_id]\n\n            # identify a 20 meter buffer around our Point Of Interest (POI)\n            poi = ee.Geometry.Point(longitude, latitude).buffer(20)\n\n            def poi_mean(img):\n                reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n                mean = reducer.get(var_name)\n                return img.set('date', img.date().format()).set(column_name,mean)\n\n            viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n            poi_reduced_imgs1 = viirs1.map(poi_mean)\n            nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n\n            # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n            df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n            df['date'] = pd.to_datetime(df['date'])\n            df = df.set_index('date')\n            df['cell_id'] = current_cell_id\n\n            df_list = [all_cell_df, df]\n            all_cell_df = pd.concat(df_list) # merge into big dataframe\n\n        except Exception as e:\n            print(f\"Error processing cell {current_cell_id}: {e}\")\n            traceback.print_exc()\n\n            # Retry failed batch up to max_retries times\n            retries = 0\n            while retries < max_retries:\n                print(f\"Retrying batch for cell {current_cell_id} in {wait_time} seconds... (retry {retries+1}/{max_retries})\")\n                time.sleep(wait_time)\n                try:\n                    df = process_batch([current_cell_id])\n                    df_list = [all_cell_df, df]\n                    all_cell_df = pd.concat(df_list) # merge into big dataframe\n                    print(f\"Batch for cell {current_cell_id} processed successfully after {retries+1} retries.\")\n                    break\n                except Exception as e:\n                    print(f\"Error processing cell {current_cell_id}: {e}\")\n                    traceback.print_exc()\n                    retries += 1\n            else:\n                print(f\"Batch for cell {current_cell_id} failed after {max_retries} retries.\")\n                \n    return all_cell_df\n\n# Split cell IDs into batches\ncell_ids = submission_format_df.index.tolist()\nbatches = [cell_ids[i:i+batch_size] for i in range(0, len(cell_ids), batch_size)]\n\n# Process batches using Dask\ndelayed_results = [delayed(process_batch)(batch) for batch in batches]\nall_results = compute(*delayed_results, scheduler='processes')\n\n# Concatenate all results\ndf_list = []\nfor result in all_results:\n    df_list.append(result)\n    \nfinal_df = pd.concat(df_list)\n\n# Save results to CSV file\nfinal_df.to_csv(final_csv_file, header=True, index=True)\n\nprint(f\"Batch processing completed successfully. Results saved to {final_csv_file}.\")\n",
  "history_output" : "today date = 2023-03-28\n/home/chetana\n2023-03-14 06:00:00\n2021-12-30\nResults will be saved to /home/chetana/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2021-12-30_2023-03-28.csv\ntoday date = 2023-03-28\n/home/chetana\ntoday date = 2023-03-28\n/home/chetana\ntoday date = 2023-03-28\n/home/chetana\ntoday date = 2023-03-28\n/home/chetana\ntoday date = 2023-03-28\n/home/chetana\ntoday date = 2023-03-28\n/home/chetana\ntoday date = 2023-03-28\n/home/chetana\ntoday date = 2023-03-28\n/home/chetana\ntoday date = 2023-03-28\n/home/chetana\ntoday date = 2023-03-28\n/home/chetana\ntoday date = 2023-03-28\n/home/chetana\ntoday date = 2023-03-28\n/home/chetana\ntoday date = 2023-03-28\n/home/chetana\ntoday date = 2023-03-28\n/home/chetana\ntoday date = 2023-03-28\n/home/chetana\ntoday date = 2023-03-28\n/home/chetana\ntoday date = 2023-03-28\n/home/chetana\ntoday date = 2023-03-28\n/home/chetana\ntoday date = 2023-03-28\n/home/chetana\ntoday date = 2023-03-28\n/home/chetana\ntoday date = 2023-03-28\n/home/chetana\ntoday date = 2023-03-28\n/home/chetana\ntoday date = 2023-03-28\n/home/chetana\ntoday date = 2023-03-28\n/home/chetana\ntoday date = 2023-03-28\n/home/chetana\ntoday date = 2023-03-28\n/home/chetana\ntoday date = 2023-03-28\n/home/chetana\ntoday date = 2023-03-28\n/home/chetana\ntoday date = 2023-03-28\n/home/chetana\ntoday date = 2023-03-28\n/home/chetana\ntoday date = 2023-03-28\n/home/chetana\ntoday date = 2023-03-28\n/home/chetana\ntoday date = 2023-03-28\ntoday date = 2023-03-28\n/home/chetana\n/home/chetana\ntoday date = 2023-03-28\n/home/chetana\ntoday date = 2023-03-28\n/home/chetana\ntoday date = 2023-03-28\n/home/chetana\ntoday date = 2023-03-28\n/home/chetana\ntoday date = 2023-03-28\n/home/chetana\ntoday date = 2023-03-28\n/home/chetana\ntoday date = 2023-03-28\n/home/chetana\ntoday date = 2023-03-28\n/home/chetana\ntoday date = 2023-03-28\n/home/chetana\ntoday date = 2023-03-28\n/home/chetana\ntoday date = 2023-03-28\n/home/chetana\ntoday date = 2023-03-28\n/home/chetana\ntoday date = 2023-03-28\n/home/chetana\ntoday date = 2023-03-28\n/home/chetana\n2023-03-14 06:00:00\n2023-03-14 06:00:00\n2023-03-14 06:00:00\n2023-03-14 06:00:00\n2023-03-14 06:00:00\n2023-03-14 06:00:00\n2023-03-14 06:00:00\n2023-03-14 06:00:00\n2023-03-14 06:00:00\n2023-03-14 06:00:00\n2023-03-14 06:00:00\n2023-03-14 06:00:00\n2023-03-14 06:00:00\n2023-03-14 06:00:00\n2023-03-14 06:00:00\n2023-03-14 06:00:00\n2023-03-14 06:00:00\n2023-03-14 06:00:00\n2023-03-14 06:00:00\n2023-03-14 06:00:00\n2023-03-14 06:00:00\n2023-03-14 06:00:00\n2021-12-30\nResults will be saved to /home/chetana/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2021-12-30_2023-03-28.csv\nTraceback (most recent call last):\n  File \"<string>\", line 1, in <module>\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/spawn.py\", line 116, in spawn_main\n    exitcode = _main(fd, parent_sentinel)\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/spawn.py\", line 125, in _main\n    prepare(preparation_data)\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/spawn.py\", line 236, in prepare\n    _fixup_main_from_path(data['init_main_from_path'])\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/spawn.py\", line 287, in _fixup_main_from_path\n    main_content = runpy.run_path(main_path,\n  File \"/home/chetana/anaconda3/lib/python3.9/runpy.py\", line 288, in run_path\n    return _run_module_code(code, init_globals, run_name,\n  File \"/home/chetana/anaconda3/lib/python3.9/runpy.py\", line 97, in _run_module_code\n    _run_code(code, mod_globals, init_globals,\n  File \"/home/chetana/anaconda3/lib/python3.9/runpy.py\", line 87, in _run_code\n    exec(code, run_globals)\n  File \"/home/chetana/gw-workspace/UNjJRJ7EVLFv/data_gee_modis_real_time.py\", line 107, in <module>\n    all_results = compute(*delayed_results, scheduler='processes')\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/dask/base.py\", line 603, in compute\n    results = schedule(dsk, keys, **kwargs)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/dask/multiprocessing.py\", line 233, in get\n    result = get_async(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/dask/local.py\", line 499, in get_async\n    fire_tasks(chunksize)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/dask/local.py\", line 494, in fire_tasks\n    fut = submit(batch_execute_tasks, each_args)\n  File \"/home/chetana/anaconda3/lib/python3.9/concurrent/futures/process.py\", line 724, in submit\n    self._adjust_process_count()\n  File \"/home/chetana/anaconda3/lib/python3.9/concurrent/futures/process.py\", line 684, in _adjust_process_count\n    self._spawn_process()\n  File \"/home/chetana/anaconda3/lib/python3.9/concurrent/futures/process.py\", line 701, in _spawn_process\n    p.start()\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/process.py\", line 121, in start\n    self._popen = self._Popen(self)\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/context.py\", line 284, in _Popen\n    return Popen(process_obj)\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/popen_spawn_posix.py\", line 32, in __init__\n    super().__init__(process_obj)\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/popen_fork.py\", line 19, in __init__\n    self._launch(process_obj)\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/popen_spawn_posix.py\", line 42, in _launch\n    prep_data = spawn.get_preparation_data(process_obj._name)\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/spawn.py\", line 154, in get_preparation_data\n    _check_not_importing_main()\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/spawn.py\", line 134, in _check_not_importing_main\n    raise RuntimeError('''\nRuntimeError: \n        An attempt has been made to start a new process before the\n        current process has finished its bootstrapping phase.\n\n        This probably means that you are not using fork to start your\n        child processes and you have forgotten to use the proper idiom\n        in the main module:\n\n            if __name__ == '__main__':\n                freeze_support()\n                ...\n\n        The \"freeze_support()\" line can be omitted if the program\n        is not going to be frozen to produce an executable.\n2021-12-30\nResults will be saved to /home/chetana/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2021-12-30_2023-03-28.csv\nTraceback (most recent call last):\n  File \"<string>\", line 1, in <module>\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/spawn.py\", line 116, in spawn_main\n    exitcode = _main(fd, parent_sentinel)\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/spawn.py\", line 125, in _main\n    prepare(preparation_data)\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/spawn.py\", line 236, in prepare\n    _fixup_main_from_path(data['init_main_from_path'])\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/spawn.py\", line 287, in _fixup_main_from_path\n    main_content = runpy.run_path(main_path,\n  File \"/home/chetana/anaconda3/lib/python3.9/runpy.py\", line 288, in run_path\n    return _run_module_code(code, init_globals, run_name,\n  File \"/home/chetana/anaconda3/lib/python3.9/runpy.py\", line 97, in _run_module_code\n    _run_code(code, mod_globals, init_globals,\n  File \"/home/chetana/anaconda3/lib/python3.9/runpy.py\", line 87, in _run_code\n    exec(code, run_globals)\n  File \"/home/chetana/gw-workspace/UNjJRJ7EVLFv/data_gee_modis_real_time.py\", line 107, in <module>\n    all_results = compute(*delayed_results, scheduler='processes')\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/dask/base.py\", line 603, in compute\n    results = schedule(dsk, keys, **kwargs)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/dask/multiprocessing.py\", line 233, in get\n    result = get_async(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/dask/local.py\", line 499, in get_async\n    fire_tasks(chunksize)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/dask/local.py\", line 494, in fire_tasks\n    fut = submit(batch_execute_tasks, each_args)\n  File \"/home/chetana/anaconda3/lib/python3.9/concurrent/futures/process.py\", line 724, in submit\n    self._adjust_process_count()\n  File \"/home/chetana/anaconda3/lib/python3.9/concurrent/futures/process.py\", line 684, in _adjust_process_count\n    self._spawn_process()\n  File \"/home/chetana/anaconda3/lib/python3.9/concurrent/futures/process.py\", line 701, in _spawn_process\n    p.start()\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/process.py\", line 121, in start\n    self._popen = self._Popen(self)\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/context.py\", line 284, in _Popen\n    return Popen(process_obj)\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/popen_spawn_posix.py\", line 32, in __init__\n    super().__init__(process_obj)\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/popen_fork.py\", line 19, in __init__\n    self._launch(process_obj)\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/popen_spawn_posix.py\", line 42, in _launch\n    prep_data = spawn.get_preparation_data(process_obj._name)\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/spawn.py\", line 154, in get_preparation_data\n    _check_not_importing_main()\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/spawn.py\", line 134, in _check_not_importing_main\n    raise RuntimeError('''\nRuntimeError: \n        An attempt has been made to start a new process before the\n        current process has finished its bootstrapping phase.\n\n        This probably means that you are not using fork to start your\n        child processes and you have forgotten to use the proper idiom\n        in the main module:\n\n            if __name__ == '__main__':\n                freeze_support()\n                ...\n\n        The \"freeze_support()\" line can be omitted if the program\n        is not going to be frozen to produce an executable.\n2021-12-30\nResults will be saved to /home/chetana/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2021-12-30_2023-03-28.csv\nTraceback (most recent call last):\n  File \"<string>\", line 1, in <module>\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/spawn.py\", line 116, in spawn_main\n    exitcode = _main(fd, parent_sentinel)\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/spawn.py\", line 125, in _main\n    prepare(preparation_data)\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/spawn.py\", line 236, in prepare\n    _fixup_main_from_path(data['init_main_from_path'])\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/spawn.py\", line 287, in _fixup_main_from_path\n    main_content = runpy.run_path(main_path,\n  File \"/home/chetana/anaconda3/lib/python3.9/runpy.py\", line 288, in run_path\n    return _run_module_code(code, init_globals, run_name,\n  File \"/home/chetana/anaconda3/lib/python3.9/runpy.py\", line 97, in _run_module_code\n    _run_code(code, mod_globals, init_globals,\n  File \"/home/chetana/anaconda3/lib/python3.9/runpy.py\", line 87, in _run_code\n    exec(code, run_globals)\n  File \"/home/chetana/gw-workspace/UNjJRJ7EVLFv/data_gee_modis_real_time.py\", line 107, in <module>\n    all_results = compute(*delayed_results, scheduler='processes')\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/dask/base.py\", line 603, in compute\n    results = schedule(dsk, keys, **kwargs)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/dask/multiprocessing.py\", line 233, in get\n    result = get_async(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/dask/local.py\", line 499, in get_async\n    fire_tasks(chunksize)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/dask/local.py\", line 494, in fire_tasks\n    fut = submit(batch_execute_tasks, each_args)\n  File \"/home/chetana/anaconda3/lib/python3.9/concurrent/futures/process.py\", line 724, in submit\n    self._adjust_process_count()\n  File \"/home/chetana/anaconda3/lib/python3.9/concurrent/futures/process.py\", line 684, in _adjust_process_count\n    self._spawn_process()\n  File \"/home/chetana/anaconda3/lib/python3.9/concurrent/futures/process.py\", line 701, in _spawn_process\n    p.start()\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/process.py\", line 121, in start\n    self._popen = self._Popen(self)\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/context.py\", line 284, in _Popen\n    return Popen(process_obj)\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/popen_spawn_posix.py\", line 32, in __init__\n    super().__init__(process_obj)\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/popen_fork.py\", line 19, in __init__\n    self._launch(process_obj)\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/popen_spawn_posix.py\", line 42, in _launch\n    prep_data = spawn.get_preparation_data(process_obj._name)\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/spawn.py\", line 154, in get_preparation_data\n    _check_not_importing_main()\n  File \"/home/chetana/anaconda3/lib/python3.9/multiprocessing/spawn.py\", line 134, in _check_not_importing_main\n    raise RuntimeError('''\nRuntimeError: \n        An attempt has been made to start a new process before the\n        current process has finished its bootstrapping phase.\n\n        This probably means that you are not using fork to start your\n        child processes and you have forgotten to use the proper idiom\n        in the main module:\n\n            if __name__ == '__main__':\n                freeze_support()\n                ...\n\n        The \"freeze_support()\" line can be omitted if the program\n        is not going to be frozen to produce an executable.\n",
  "history_begin_time" : 1680036041176,
  "history_end_time" : null,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Running"
},{
  "history_id" : "uK3yKkRWtD15",
  "history_input" : "from all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\nimport dask.dataframe as dd\nfrom dask import delayed, compute\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n\n#start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    os.remove(final_csv_file)\n\n# Set up batch processing parameters\nbatch_size = 50 # Number of cells to query in each batch\nmax_retries = 5 # Maximum number of times to retry a batch that fails\nwait_time = 30 # Number of seconds to wait before retrying a failed batch\n\ndef process_batch(cell_ids):\n    # Process a batch of cells\n    \n    all_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id'])\n    \n    for current_cell_id in cell_ids:\n        \n        try:\n            longitude = all_cell_coords_df['lon'][current_cell_id]\n            latitude = all_cell_coords_df['lat'][current_cell_id]\n\n            # identify a 20 meter buffer around our Point Of Interest (POI)\n            poi = ee.Geometry.Point(longitude, latitude).buffer(20)\n\n            def poi_mean(img):\n                reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n                mean = reducer.get(var_name)\n                return img.set('date', img.date().format()).set(column_name,mean)\n\n            viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n            poi_reduced_imgs1 = viirs1.map(poi_mean)\n            nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n\n            # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n            df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n            df['date'] = pd.to_datetime(df['date'])\n            df = df.set_index('date')\n            df['cell_id'] = current_cell_id\n\n            df_list = [all_cell_df, df]\n            all_cell_df = pd.concat(df_list) # merge into big dataframe\n\n        except Exception as e:\n            print(f\"Error processing cell {current_cell_id}: {e}\")\n            traceback.print_exc()\n\n            # Retry failed batch up to max_retries times\n            retries = 0\n            while retries < max_retries:\n                print(f\"Retrying batch for cell {current_cell_id} in {wait_time} seconds... (retry {retries+1}/{max_retries})\")\n                time.sleep(wait_time)\n                try:\n                    df = process_batch([current_cell_id])\n                    df_list = [all_cell_df, df]\n                    all_cell_df = pd.concat(df_list) # merge into big dataframe\n                    print(f\"Batch for cell {current_cell_id} processed successfully after {retries+1} retries.\")\n                    break\n                except Exception as e:\n                    print(f\"Error processing cell {current_cell_id}: {e}\")\n                    traceback.print_exc()\n                    retries += 1\n            else:\n                print(f\"Batch for cell {current_cell_id} failed after {max_retries} retries.\")\n                \n    return all_cell_df\n\n# Split cell IDs into batches\ncell_ids = submission_format_df.index.tolist()\nbatches = [cell_ids[i:i+batch_size] for i in range(0, len(cell_ids), batch_size)]\n\n# Process batches using Dask\ndelayed_results = [delayed(process_batch)(batch) for batch in batches]\nall_results = compute(*delayed_results, scheduler='processes')\n\n# Concatenate all results\ndf_list = []\nfor result in all_results:\n    df_list.append(result)\n    \nfinal_df = pd.concat(df_list)\n\n# Save results to CSV file\nfinal_df.to_csv(final_csv_file, header=True, index=True)\n\nprint(f\"Batch processing completed successfully. Results saved to {final_csv_file}.\")\n",
  "history_output" : "today date = 2023-03-28\n/home/chetana\n2023-03-14 06:00:00\n['gcloud', 'auth', 'application-default', 'login', '--scopes=https://www.googleapis.com/auth/earthengine,https://www.googleapis.com/auth/devstorage.full_control', '--client-id-file=/home/chetana/.config/earthengine/credentials-client-id.json']\nFetching credentials using gcloud\norig_exe:  gcloud\nenum 2 No such file or directory gcloud\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/uK3yKkRWtD15/data_gee_modis_real_time.py\", line 9, in <module>\n    ee.Initialize()\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/__init__.py\", line 132, in Initialize\n    data.initialize(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/data.py\", line 201, in initialize\n    _install_cloud_api_resource()\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/data.py\", line 260, in _install_cloud_api_resource\n    _cloud_api_resource = _cloud_api_utils.build_cloud_resource(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/_cloud_api_utils.py\", line 166, in build_cloud_resource\n    resource = build()\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/_cloud_api_utils.py\", line 146, in build\n    return discovery.build(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/googleapiclient/_helpers.py\", line 134, in positional_wrapper\n    return wrapped(*args, **kwargs)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/googleapiclient/discovery.py\", line 270, in build\n    content = _retrieve_discovery_doc(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/googleapiclient/discovery.py\", line 376, in _retrieve_discovery_doc\n    resp, content = req.execute(num_retries=num_retries)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/googleapiclient/_helpers.py\", line 134, in positional_wrapper\n    return wrapped(*args, **kwargs)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/googleapiclient/http.py\", line 900, in execute\n    resp, content = _retry_request(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/googleapiclient/http.py\", line 177, in _retry_request\n    resp, content = http.request(uri, method, *args, **kwargs)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/google_auth_httplib2.py\", line 209, in request\n    self.credentials.before_request(self._request, method, uri, request_headers)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/google/auth/credentials.py\", line 133, in before_request\n    self.refresh(request)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/google/oauth2/credentials.py\", line 228, in refresh\n    ) = reauth.refresh_grant(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/google/oauth2/reauth.py\", line 338, in refresh_grant\n    _client._handle_error_response(response_data)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/google/oauth2/_client.py\", line 60, in _handle_error_response\n    raise exceptions.RefreshError(error_details, response_data)\ngoogle.auth.exceptions.RefreshError: ('invalid_grant: Bad Request', {'error': 'invalid_grant', 'error_description': 'Bad Request'})\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/oauth.py\", line 299, in _load_app_default_credentials\n    subprocess.run(command, check=True)\n  File \"/home/chetana/anaconda3/lib/python3.9/subprocess.py\", line 505, in run\n    with Popen(*popenargs, **kwargs) as process:\n  File \"/home/chetana/anaconda3/lib/python3.9/subprocess.py\", line 951, in __init__\n    self._execute_child(args, executable, preexec_fn, close_fds,\n  File \"/home/chetana/anaconda3/lib/python3.9/subprocess.py\", line 1825, in _execute_child\n    raise child_exception_type(errno_num, err_msg, err_filename)\nFileNotFoundError: [Errno 2] No such file or directory: 'gcloud'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/uK3yKkRWtD15/data_gee_modis_real_time.py\", line 11, in <module>\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/__init__.py\", line 104, in Authenticate\n    return oauth.authenticate(authorization_code, quiet, code_verifier, auth_mode,\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/oauth.py\", line 401, in authenticate\n    _load_app_default_credentials(auth_mode == 'gcloud', scopes, quiet)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/ee/oauth.py\", line 302, in _load_app_default_credentials\n    raise Exception('gcloud command not found. ' + tip) from e\nException: gcloud command not found. Please ensure that gcloud is installed.\nMore information: https://developers.google.com/earth-engine/guides/python_install\n\n",
  "history_begin_time" : 1680035818905,
  "history_end_time" : 1680035877164,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "o4sHJpDnz9BK",
  "history_input" : "from all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\nimport dask.dataframe as dd\nfrom dask import delayed, compute\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n\n#start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    os.remove(final_csv_file)\n\n# Set up batch processing parameters\nbatch_size = 50 # Number of cells to query in each batch\nmax_retries = 5 # Maximum number of times to retry a batch that fails\nwait_time = 30 # Number of seconds to wait before retrying a failed batch\n\ndef process_batch(cell_ids):\n    # Process a batch of cells\n    \n    all_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id'])\n    \n    for current_cell_id in cell_ids:\n        \n        try:\n            longitude = all_cell_coords_df['lon'][current_cell_id]\n            latitude = all_cell_coords_df['lat'][current_cell_id]\n\n            # identify a 20 meter buffer around our Point Of Interest (POI)\n            poi = ee.Geometry.Point(longitude, latitude).buffer(20)\n\n            def poi_mean(img):\n                reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n                mean = reducer.get(var_name)\n                return img.set('date', img.date().format()).set(column_name,mean)\n\n            viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n            poi_reduced_imgs1 = viirs1.map(poi_mean)\n            nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n\n            # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n            df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n            df['date'] = pd.to_datetime(df['date'])\n            df = df.set_index('date')\n            df['cell_id'] = current_cell_id\n\n            df_list = [all_cell_df, df]\n            all_cell_df = pd.concat(df_list) # merge into big dataframe\n\n        except Exception as e:\n            print(f\"Error processing cell {current_cell_id}: {e}\")\n            traceback.print_exc()\n\n            # Retry failed batch up to max_retries times\n            retries = 0\n            while retries < max_retries:\n                print(f\"Retrying batch for cell {current_cell_id} in {wait_time} seconds... (retry {retries+1}/{max_retries})\")\n                time.sleep(wait_time)\n                try:\n                    df = process_batch([current_cell_id])\n                    df_list = [all_cell_df, df]\n                    all_cell_df = pd.concat(df_list) # merge into big dataframe\n                    print(f\"Batch for cell {current_cell_id} processed successfully after {retries+1} retries.\")\n                    break\n                except Exception as e:\n                    print(f\"Error processing cell {current_cell_id}: {e}\")\n                    traceback.print_exc()\n                    retries += 1\n            else:\n                print(f\"Batch for cell {current_cell_id} failed after {max_retries} retries.\")\n                \n    return all_cell_df\n\n# Split cell IDs into batches\ncell_ids = submission_format_df.index.tolist()\nbatches = [cell_ids[i:i+batch_size] for i in range(0, len(cell_ids), batch_size)]\n\n# Process batches using Dask\ndelayed_results = [delayed(process_batch)(batch) for batch in batches]\nall_results = compute(*delayed_results, scheduler='processes')\n\n# Concatenate all results\ndf_list = []\nfor result in all_results:\n    df_list.append(result)\n    \nfinal_df = pd.concat(df_list)\n\n# Save results to CSV file\nfinal_df.to_csv(final_csv_file, header=True, index=True)\n\nprint(f\"Batch processing completed successfully. Results saved to {final_csv_file}.\")\n",
  "history_output" : "",
  "history_begin_time" : 1680035806893,
  "history_end_time" : 1680035818918,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "frp7u4mc0za",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1679442743744,
  "history_end_time" : 1679442743744,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "jf7wuu",
  "indicator" : "Skipped"
},{
  "history_id" : "u9ddbyfovut",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1679332584756,
  "history_end_time" : 1679332584756,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "jf7wuu",
  "indicator" : "Skipped"
},{
  "history_id" : "0rnpbnhd4p9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1679191258481,
  "history_end_time" : 1679191258481,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "2jifky",
  "indicator" : "Skipped"
},{
  "history_id" : "UwbMQv1wGy35",
  "history_input" : "# This script will download modis data for all the testing sites from Google Earth Engine.\n# The start date is the last stop date of the last run.\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\nimport eeauth as e\nfrom snowcast_utils import test_start_date as start_date, test_end_date as end_date\n\n#exit() # done, uncomment if you want to download new files.\n\ntry:\n    ee.Initialize(e.creds())\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n#start_date = \"2022-04-20\"#test_start_date\n#start_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\n#end_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : null,
  "history_begin_time" : 1679165956336,
  "history_end_time" : null,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : null
},{
  "history_id" : "dl4cstqif5u",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1679091534942,
  "history_end_time" : 1679091744961,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "z2h3ysd6a2y",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1679091525985,
  "history_end_time" : 1679091533650,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "qnaax4o06cp",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678887964056,
  "history_end_time" : 1678888215693,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "yifl1hgv6dh",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678887944916,
  "history_end_time" : 1678887946443,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "ascf20jb4bn",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678887287213,
  "history_end_time" : 1678887836229,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "9tdd8jnsl8x",
  "history_input" : "# This script will download modis data for all the testing sites from Google Earth Engine.\n# The start date is the last stop date of the last run.\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\nimport eeauth as e\nfrom snowcast_utils import test_start_date as start_date, test_end_date as end_date\n\n#exit() # done, uncomment if you want to download new files.\n\ntry:\n    ee.Initialize(e.creds())\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n#start_date = \"2022-04-20\"#test_start_date\n#start_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\n#end_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "today date = 2023-03-15\n/home/chetana\nResults will be saved to /home/chetana/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2023-03-01_2023-03-15.csv\nstart to traverse the cells in submission_format_eval.csv..\n",
  "history_begin_time" : 1678886722762,
  "history_end_time" : 1678888245570,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Done"
},{
  "history_id" : "n98s32caive",
  "history_input" : "# This script will download modis data for all the testing sites from Google Earth Engine.\n# The start date is the last stop date of the last run.\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\nimport eeauth as e\nfrom snowcast_utils import test_start_date as start_date, test_end_date as end_date\n\n#exit() # done, uncomment if you want to download new files.\n\ntry:\n    ee.Initialize(e.creds())\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n#start_date = \"2022-04-20\"#test_start_date\n#start_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\n#end_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "",
  "history_begin_time" : 1678884592420,
  "history_end_time" : 1678884986355,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "bbf91y5cem4",
  "history_input" : "# This script will download modis data for all the testing sites from Google Earth Engine.\n# The start date is the last stop date of the last run.\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\nimport eeauth as e\nfrom snowcast_utils import test_start_date as start_date, test_end_date as end_date\n\n#exit() # done, uncomment if you want to download new files.\n\ntry:\n    ee.Initialize(e.creds())\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n#start_date = \"2022-04-20\"#test_start_date\n#start_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\n#end_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "today date = 2023-03-15\n/home/chetana\nResults will be saved to /home/chetana/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-03-01_2023-03-15.csv\nstart to traverse the cells in submission_format_eval.csv..\n",
  "history_begin_time" : 1678884241421,
  "history_end_time" : 1678884438326,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "kgio9wn170a",
  "history_input" : "# This script will download modis data for all the testing sites from Google Earth Engine.\n# The start date is the last stop date of the last run.\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\nimport eeauth as e\n\nexit() # done, uncomment if you want to download new files.\n\ntry:\n    ee.Initialize(e.creds())\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n#start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "today date = 2023-03-15\n/home/chetana\n",
  "history_begin_time" : 1678883377673,
  "history_end_time" : 1678883775437,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "0wcna9s34vh",
  "history_input" : "# This script will download modis data for all the testing sites from Google Earth Engine.\n# The start date is the last stop date of the last run.\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\nimport eeauth as e\n\nexit() # done, uncomment if you want to download new files.\n\ntry:\n    ee.Initialize(e.creds())\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n#start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "today date = 2023-03-14\n/home/chetana\n",
  "history_begin_time" : 1678756812676,
  "history_end_time" : 1678756819065,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Done"
},{
  "history_id" : "hcojqy6c60i",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678756683130,
  "history_end_time" : 1678756684749,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "l34365skk6h",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678749631647,
  "history_end_time" : 1678749935999,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "nhxrmgvepkn",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678748546691,
  "history_end_time" : 1678748546691,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ipnx2j61rkn",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678747245222,
  "history_end_time" : 1678747245222,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "e0jh29piois",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678746480980,
  "history_end_time" : 1678746793023,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "rmmptqppwtu",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678743868471,
  "history_end_time" : 1678744167080,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "jkl38urw3l8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678743628997,
  "history_end_time" : 1678743628997,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "sb2daxh9rm1",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678743144785,
  "history_end_time" : 1678743615532,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "rv8vdcxukw1",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678742583251,
  "history_end_time" : 1678742583251,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "asxzznl0ip8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678742209421,
  "history_end_time" : 1678742571506,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "uw2oas2hs70",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678738707224,
  "history_end_time" : 1678738707224,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "0x779hp5ftn",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678725423236,
  "history_end_time" : 1678725423236,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "q07461g2t7g",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678723111629,
  "history_end_time" : 1678725408343,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "qa10u1s5px3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678649002010,
  "history_end_time" : 1678649002010,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "dhjgoegftut",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678648366813,
  "history_end_time" : 1678648366813,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "cg3cyzxp367",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678648337216,
  "history_end_time" : 1678648341619,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "7t56vjl21ym",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678564567680,
  "history_end_time" : 1678564567680,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "loa9ojbguuv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678564538507,
  "history_end_time" : 1678564538507,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "qg6qi45un2u",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678557921910,
  "history_end_time" : 1678557923642,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "su8kanw96sw",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678557705719,
  "history_end_time" : 1678557898787,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "nraoa7j7d87",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678497028100,
  "history_end_time" : 1678497028100,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "y3razmoqbn0",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678330214162,
  "history_end_time" : 1678330214162,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "4b47goykelz",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678326965025,
  "history_end_time" : 1694185584686,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "nspdfvm9wwg",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678312067604,
  "history_end_time" : 1678312067604,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "siy3txhzokm",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678312030746,
  "history_end_time" : 1678312065070,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "wond5krvxgu",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678312001413,
  "history_end_time" : 1694185586175,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "dwj1jtfo8ex",
  "history_input" : "# This script will download modis data for all the testing sites from Google Earth Engine.\n# The start date is the last stop date of the last run.\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\nimport eeauth as e\n\nexit() # done, uncomment if you want to download new files.\n\ntry:\n    ee.Initialize(e.creds())\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n#start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "today date = 2023-03-08\n/home/chetana\n",
  "history_begin_time" : 1678283570168,
  "history_end_time" : 1678283603093,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Done"
},{
  "history_id" : "vdenoy0rfdm",
  "history_input" : "# This script will download modis data for all the testing sites from Google Earth Engine.\n# The start date is the last stop date of the last run.\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\nimport eeauth as e\n\nexit() # done, uncomment if you want to download new files.\n\ntry:\n    ee.Initialize(e.creds())\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n#start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "today date = 2023-03-08\n/home/chetana\n",
  "history_begin_time" : 1678242480753,
  "history_end_time" : 1694185587988,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "jqhoaxfvqkf",
  "history_input" : "# This script will download modis data for all the testing sites from Google Earth Engine.\n# The start date is the last stop date of the last run.\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\nimport eeauth as e\n\nexit() # done, uncomment if you want to download new files.\n\ntry:\n    ee.Initialize(e.creds())\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n#start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "today date = 2023-03-08\n/home/chetana\n",
  "history_begin_time" : 1678241847783,
  "history_end_time" : 1694185588467,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "o7s0dkwhmx3",
  "history_input" : "# This script will download modis data for all the testing sites from Google Earth Engine.\n# The start date is the last stop date of the last run.\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\nimport eeauth as e\n\nexit() # done, uncomment if you want to download new files.\n\ntry:\n    ee.Initialize(e.creds())\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n#start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "today date = 2023-03-07\n/home/chetana\n",
  "history_begin_time" : 1678206377835,
  "history_end_time" : 1678206406934,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Failed"
},{
  "history_id" : "sijqr6pex5n",
  "history_input" : "# This script will download modis data for all the testing sites from Google Earth Engine.\n# The start date is the last stop date of the last run.\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\nimport eeauth as e\n\nexit() # done, uncomment if you want to download new files.\n\ntry:\n    ee.Initialize(e.creds())\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n#start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "today date = 2023-03-07\n/home/chetana\n",
  "history_begin_time" : 1678201952705,
  "history_end_time" : 1678201957953,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Done"
},{
  "history_id" : "316ceax961y",
  "history_input" : "# This script will download modis data for all the testing sites from Google Earth Engine.\n# The start date is the last stop date of the last run.\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\nimport eeauth as e\n\nexit() # done, uncomment if you want to download new files.\n\ntry:\n    ee.Initialize(e.creds())\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n#start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "today date = 2023-03-07\n/home/chetana\n",
  "history_begin_time" : 1678155221327,
  "history_end_time" : 1678155249695,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Done"
},{
  "history_id" : "iSAO01BUml6X",
  "history_input" : "# This script will download modis data for all the testing sites from Google Earth Engine.\n# The start date is the last stop date of the last run.\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\nimport eeauth as e\n\n#exit() # done, uncomment if you want to download new files.\n\ntry:\n    ee.Initialize(e.creds())\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n#start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "today date = 2023-03-07\n/home/chetana\nResults will be saved to /home/chetana/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2021-12-30_2023-03-07.csv\nstart to traverse the cells in submission_format_eval.csv..\n",
  "history_begin_time" : 1678154527219,
  "history_end_time" : 1678154969886,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "ehLisbVYNFZO",
  "history_input" : "# This script will download modis data for all the testing sites from Google Earth Engine.\n# The start date is the last stop date of the last run.\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\nimport eeauth as e\n\n#exit() # done, uncomment if you want to download new files.\n\ntry:\n    ee.Initialize(e.creds())\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n#start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "",
  "history_begin_time" : 1678154523483,
  "history_end_time" : 1678154527224,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "WzwP4oyeFlz2",
  "history_input" : "# This script will download modis data for all the testing sites from Google Earth Engine.\n# The start date is the last stop date of the last run.\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\nimport eeauth as e\n\n#exit() # done, uncomment if you want to download new files.\n\ntry:\n    ee.Initialize(e.creds())\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n#start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "",
  "history_begin_time" : 1678154502453,
  "history_end_time" : 1678154523494,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "5xktawedn0z",
  "history_input" : "# This script will download modis data for all the testing sites from Google Earth Engine.\n# The start date is the last stop date of the last run.\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\nimport eeauth as e\n\n#exit() # done, uncomment if you want to download new files.\n\ntry:\n    ee.Initialize(e.creds())\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n#start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "today date = 2023-03-06\n/home/chetana\nResults will be saved to /home/chetana/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2021-12-30_2023-03-06.csv\nstart to traverse the cells in submission_format_eval.csv..\n",
  "history_begin_time" : 1678144783813,
  "history_end_time" : 1678154846202,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "WwBY139OfvPk",
  "history_input" : "# This script will download modis data for all the testing sites from Google Earth Engine.\n# The start date is the last stop date of the last run.\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\nimport eeauth as e\n\n#exit() # done, uncomment if you want to download new files.\n\ntry:\n    ee.Initialize(e.creds())\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n#start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "today date = 2023-03-04\n/home/chetana\nResults will be saved to /home/chetana/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2021-12-30_2023-03-04.csv\nstart to traverse the cells in submission_format_eval.csv..\n",
  "history_begin_time" : 1677958986780,
  "history_end_time" : 1677959192638,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "CcqpPEjxfAWk",
  "history_input" : "# This script will download modis data for all the testing sites from Google Earth Engine.\n# The start date is the last stop date of the last run.\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\nimport eeauth as e\n\n#exit() # done, uncomment if you want to download new files.\n\ntry:\n    ee.Initialize(e.creds())\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n#start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "today date = 2023-03-04\n/home/chetana\n",
  "history_begin_time" : 1677954790060,
  "history_end_time" : 1677954819489,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "iVM3rbRBZdvJ",
  "history_input" : "# This script will download modis data for all the testing sites from Google Earth Engine.\n# The start date is the last stop date of the last run.\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\nimport eeauth as e\n\n#exit() # done, uncomment if you want to download new files.\n\ntry:\n    ee.Initialize(e.creds())\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n#start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : null,
  "history_begin_time" : 1677954533285,
  "history_end_time" : null,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : null
},{
  "history_id" : "yFxEyaDhdjDO",
  "history_input" : "# This script will download modis data for all the testing sites from Google Earth Engine.\n# The start date is the last stop date of the last run.\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\nimport eeauth as e\n\n#exit() # done, uncomment if you want to download new files.\n\ntry:\n    ee.Initialize(e.creds())\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n#start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "today date = 2023-03-04\n/home/chetana\nResults will be saved to /home/chetana/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2021-12-30_2023-03-04.csv\nstart to traverse the cells in submission_format_eval.csv..\n",
  "history_begin_time" : 1677937727687,
  "history_end_time" : 1677954552491,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "DHrJQwsLPPzW",
  "history_input" : "# This script will download modis data for all the testing sites from Google Earth Engine.\n# The start date is the last stop date of the last run.\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\nimport eeauth as e\n\n#exit() # done, uncomment if you want to download new files.\n\ntry:\n    ee.Initialize(e.creds())\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n#start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : null,
  "history_begin_time" : 1677937687800,
  "history_end_time" : null,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : null
},{
  "history_id" : "qbszccqt0qo",
  "history_input" : "# This script will download modis data for all the testing sites from Google Earth Engine.\n# The start date is the last stop date of the last run.\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\nimport eeauth as e\n\n#exit() # done, uncomment if you want to download new files.\n\ntry:\n    ee.Initialize(e.creds())\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n#start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "today date = 2023-03-03\n/home/chetana\nResults will be saved to /home/chetana/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2021-12-30_2023-03-03.csv\nstart to traverse the cells in submission_format_eval.csv..\n",
  "history_begin_time" : 1677858986668,
  "history_end_time" : 1677867648482,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "s6oi1o6kh9f",
  "history_input" : "# This script will download modis data for all the testing sites from Google Earth Engine.\n# The start date is the last stop date of the last run.\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\nimport eeauth as e\n\n#exit() # done, uncomment if you want to download new files.\n\ntry:\n    ee.Initialize(e.creds())\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n#start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "today date = 2023-03-03\n/home/chetana\nResults will be saved to /home/chetana/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2021-12-30_2023-03-03.csv\nstart to traverse the cells in submission_format_eval.csv..\n",
  "history_begin_time" : 1677858834402,
  "history_end_time" : 1694185596801,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "ituz3zptneq",
  "history_input" : "# This script will download modis data for all the testing sites from Google Earth Engine.\n# The start date is the last stop date of the last run.\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\nimport eeauth as e\n\n#exit() # done, uncomment if you want to download new files.\n\ntry:\n    ee.Initialize(e.creds())\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n#start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "today date = 2023-03-03\n/home/chetana\nResults will be saved to /home/chetana/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2021-12-30_2023-03-03.csv\nstart to traverse the cells in submission_format_eval.csv..\n",
  "history_begin_time" : 1677809727063,
  "history_end_time" : 1694185596343,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "kazo5dpk449",
  "history_input" : "# This script will download modis data for all the testing sites from Google Earth Engine.\n# The start date is the last stop date of the last run.\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\nimport eeauth as e\n\n#exit() # done, uncomment if you want to download new files.\n\ntry:\n    ee.Initialize(e.creds())\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n#start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "today date = 2023-03-03\n/home/chetana\nResults will be saved to /home/chetana/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2021-12-30_2023-03-03.csv\nstart to traverse the cells in submission_format_eval.csv..\n",
  "history_begin_time" : 1677809458398,
  "history_end_time" : 1694185620799,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "1MMFuQj0kRCe",
  "history_input" : "# This script will download modis data for all the testing sites from Google Earth Engine.\n# The start date is the last stop date of the last run.\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\nimport eeauth as e\n\n#exit() # done, uncomment if you want to download new files.\n\ntry:\n    ee.Initialize(e.creds())\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n#start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "today date = 2023-03-03\n/home/chetana\nResults will be saved to /home/chetana/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2021-12-30_2023-03-03.csv\nstart to traverse the cells in submission_format_eval.csv..\n",
  "history_begin_time" : 1677805405427,
  "history_end_time" : 1677809014996,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "fYLFrRXlLVEk",
  "history_input" : "# This script will download modis data for all the testing sites from Google Earth Engine.\n# The start date is the last stop date of the last run.\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\nimport eeauth as e\n\n#exit() # done, uncomment if you want to download new files.\n\ntry:\n    ee.Initialize(e.creds())\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n#start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "today date = 2023-03-03\n/home/chetana\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/fYLFrRXlLVEk/data_gee_modis_real_time.py\", line 33, in <module>\n    start_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\n  File \"/home/chetana/gw-workspace/fYLFrRXlLVEk/snowcast_utils.py\", line 69, in findLastStopDate\n    for filename in os.listdir(target_testing_dir):\nFileNotFoundError: [Errno 2] No such file or directory: '/home/chetana/Documents/GitHub/SnowCast/data/sat_testing/modis'\n",
  "history_begin_time" : 1677804348987,
  "history_end_time" : 1677804377424,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "6QPAXSZj8b1u",
  "history_input" : "# This script will download modis data for all the testing sites from Google Earth Engine.\n# The start date is the last stop date of the last run.\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\nimport eeauth as e\n\n#exit() # done, uncomment if you want to download new files.\n\ntry:\n    ee.Initialize(e.creds())\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n#start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : null,
  "history_begin_time" : 1677804339823,
  "history_end_time" : null,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : null
},{
  "history_id" : "bwj695furoz",
  "history_input" : "# This script will download modis data for all the testing sites from Google Earth Engine.\n# The start date is the last stop date of the last run.\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\nimport eeauth as e\n\n#exit() # done, uncomment if you want to download new files.\n\ntry:\n    ee.Initialize(e.creds())\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n#start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "today date = 2023-03-02\n/home/chetana\n                           rmax  ...   longitude\ndate                             ...            \n2018-10-01 06:00:00   97.004180  ... -109.515714\n2018-10-02 06:00:00   80.655136  ... -109.515714\n2018-10-03 06:00:00  100.000000  ... -109.515714\n2018-10-04 06:00:00   97.914374  ... -109.515714\n2018-10-05 06:00:00   92.226305  ... -109.515714\n...                         ...  ...         ...\n2019-09-25 06:00:00   73.365242  ... -109.515714\n2019-09-26 06:00:00   81.833539  ... -109.515714\n2019-09-27 06:00:00   87.855661  ... -109.515714\n2019-09-28 06:00:00  100.000000  ... -109.515714\n2019-09-29 06:00:00  100.000000  ... -109.515714\n\n[364 rows x 4 columns]\n                          rmin  ... longitude\ndate                            ...          \n2018-10-01 06:00:00  31.700001  ... -115.9746\n2018-10-02 06:00:00  65.300003  ... -115.9746\n2018-10-03 06:00:00  33.299999  ... -115.9746\n2018-10-04 06:00:00  56.099998  ... -115.9746\n2018-10-05 06:00:00  49.299999  ... -115.9746\n...                        ...  ...       ...\n2019-09-25 06:00:00  30.000000  ... -115.9746\n2019-09-26 06:00:00  42.299999  ... -115.9746\n2019-09-27 06:00:00  39.400002  ... -115.9746\n2019-09-28 06:00:00  60.500000  ... -115.9746\n2019-09-29 06:00:00  66.300003  ... -115.9746\n\n[364 rows x 4 columns]\n                           tmmx  ...   longitude\ndate                             ...            \n2018-10-01 06:00:00  289.700012  ... -106.093131\n2018-10-02 06:00:00  292.200012  ... -106.093131\n2018-10-03 06:00:00  287.700012  ... -106.093131\n2018-10-04 06:00:00  285.399994  ... -106.093131\n2018-10-05 06:00:00  278.700012  ... -106.093131\n...                         ...  ...         ...\n2019-09-25 06:00:00  288.100006  ... -106.093131\n2019-09-26 06:00:00  293.600006  ... -106.093131\n2019-09-27 06:00:00  279.799988  ... -106.093131\n2019-09-28 06:00:00  288.200012  ... -106.093131\n2019-09-29 06:00:00  290.700012  ... -106.093131\n\n[364 rows x 4 columns]\n                           vs  ...   longitude\ndate                           ...            \n2018-10-01 06:00:00  4.329614  ... -123.448583\n2018-10-02 06:00:00  6.069442  ... -123.448583\n2018-10-03 06:00:00  2.367640  ... -123.448583\n2018-10-04 06:00:00  2.200000  ... -123.448583\n2018-10-05 06:00:00  4.100000  ... -123.448583\n...                       ...  ...         ...\n2019-09-25 06:00:00  3.192618  ... -123.448583\n2019-09-26 06:00:00  5.869442  ... -123.448583\n2019-09-27 06:00:00  7.208326  ... -123.448583\n2019-09-28 06:00:00  3.540601  ... -123.448583\n2019-09-29 06:00:00  4.861116  ... -123.448583\n\n[364 rows x 4 columns]\n                            pr  ...   longitude\ndate                            ...            \n2018-10-01 06:00:00   2.657043  ... -106.623137\n2018-10-02 06:00:00  14.000699  ... -106.623137\n2018-10-03 06:00:00   2.334266  ... -106.623137\n2018-10-04 06:00:00   8.570430  ... -106.623137\n2018-10-05 06:00:00   0.000000  ... -106.623137\n...                        ...  ...         ...\n2019-09-25 06:00:00   0.000000  ... -106.623137\n2019-09-26 06:00:00   0.000000  ... -106.623137\n2019-09-27 06:00:00   0.647652  ... -106.623137\n2019-09-28 06:00:00   0.190609  ... -106.623137\n2019-09-29 06:00:00   0.000000  ... -106.623137\n\n[364 rows x 4 columns]\n                           tmmn  ...  longitude\ndate                             ...           \n2018-10-01 06:00:00  273.387494  ... -113.95339\n2018-10-02 06:00:00  277.503577  ... -113.95339\n2018-10-03 06:00:00  272.357585  ... -113.95339\n2018-10-04 06:00:00  271.881247  ... -113.95339\n2018-10-05 06:00:00  269.702676  ... -113.95339\n...                         ...  ...        ...\n2019-09-25 06:00:00  275.497773  ... -113.95339\n2019-09-26 06:00:00  274.742853  ... -113.95339\n2019-09-27 06:00:00  274.813843  ... -113.95339\n2019-09-28 06:00:00  268.099554  ... -113.95339\n2019-09-29 06:00:00  266.819641  ... -113.95339\n\n[364 rows x 4 columns]\n                           rmax  ...   longitude\ndate                             ...            \n2018-10-01 06:00:00   56.599998  ... -106.093131\n2018-10-02 06:00:00   66.699997  ... -106.093131\n2018-10-03 06:00:00  100.000000  ... -106.093131\n2018-10-04 06:00:00   88.000000  ... -106.093131\n2018-10-05 06:00:00  100.000000  ... -106.093131\n...                         ...  ...         ...\n2019-09-25 06:00:00   75.699997  ... -106.093131\n2019-09-26 06:00:00   63.000000  ... -106.093131\n2019-09-27 06:00:00   96.099998  ... -106.093131\n2019-09-28 06:00:00   89.000000  ... -106.093131\n2019-09-29 06:00:00   77.699997  ... -106.093131\n\n[364 rows x 4 columns]\n                            pr  ...   longitude\ndate                            ...            \n2018-10-01 06:00:00   1.804360  ... -109.758258\n2018-10-02 06:00:00   2.271707  ... -109.758258\n2018-10-03 06:00:00   4.392579  ... -109.758258\n2018-10-04 06:00:00  10.782653  ... -109.758258\n2018-10-05 06:00:00   0.000000  ... -109.758258\n...                        ...  ...         ...\n2019-09-25 06:00:00   0.000000  ... -109.758258\n2019-09-26 06:00:00   0.000000  ... -109.758258\n2019-09-27 06:00:00   0.709462  ... -109.758258\n2019-09-28 06:00:00  15.960668  ... -109.758258\n2019-09-29 06:00:00   5.371800  ... -109.758258\n\n[364 rows x 4 columns]\n                           vs  ...   longitude\ndate                           ...            \n2018-10-01 06:00:00  5.307754  ... -119.028872\n2018-10-02 06:00:00  4.207753  ... -119.028872\n2018-10-03 06:00:00  2.800000  ... -119.028872\n2018-10-04 06:00:00  3.407754  ... -119.028872\n2018-10-05 06:00:00  2.207754  ... -119.028872\n...                       ...  ...         ...\n2019-09-25 06:00:00  2.903877  ... -119.028872\n2019-09-26 06:00:00  2.907754  ... -119.028872\n2019-09-27 06:00:00  4.725348  ... -119.028872\n2019-09-28 06:00:00  9.440855  ... -119.028872\n2019-09-29 06:00:00  5.525348  ... -119.028872\n\n[364 rows x 4 columns]\n                      vs  ... longitude\ndate                      ...          \n2018-10-01 06:00:00  4.1  ... -109.3091\n2018-10-02 06:00:00  6.5  ... -109.3091\n2018-10-03 06:00:00  4.0  ... -109.3091\n2018-10-04 06:00:00  6.0  ... -109.3091\n2018-10-05 06:00:00  5.2  ... -109.3091\n...                  ...  ...       ...\n2019-09-25 06:00:00  3.7  ... -109.3091\n2019-09-26 06:00:00  5.6  ... -109.3091\n2019-09-27 06:00:00  3.7  ... -109.3091\n2019-09-28 06:00:00  4.2  ... -109.3091\n2019-09-29 06:00:00  8.5  ... -109.3091\n\n[364 rows x 4 columns]\n                          vpd  ...   longitude\ndate                           ...            \n2018-10-01 06:00:00  0.647544  ... -111.950147\n2018-10-02 06:00:00  0.742340  ... -111.950147\n2018-10-03 06:00:00  0.748772  ... -111.950147\n2018-10-04 06:00:00  0.264386  ... -111.950147\n2018-10-05 06:00:00  0.273568  ... -111.950147\n...                       ...  ...         ...\n2019-09-25 06:00:00  0.702749  ... -111.950147\n2019-09-26 06:00:00  0.907135  ... -111.950147\n2019-09-27 06:00:00  0.587954  ... -111.950147\n2019-09-28 06:00:00  0.059181  ... -111.950147\n2019-09-29 06:00:00  0.000000  ... -111.950147\n\n[364 rows x 4 columns]\n                           tmmx  ...  longitude\ndate                             ...           \n2018-10-01 06:00:00  288.100006  ... -106.22788\n2018-10-02 06:00:00  287.399994  ... -106.22788\n2018-10-03 06:00:00  284.500000  ... -106.22788\n2018-10-04 06:00:00  279.299988  ... -106.22788\n2018-10-05 06:00:00  276.899994  ... -106.22788\n...                         ...  ...        ...\n2019-09-25 06:00:00  287.000000  ... -106.22788\n2019-09-26 06:00:00  290.100006  ... -106.22788\n2019-09-27 06:00:00  285.299988  ... -106.22788\n2019-09-28 06:00:00  288.700012  ... -106.22788\n2019-09-29 06:00:00  289.000000  ... -106.22788\n\n[364 rows x 4 columns]\n                     eto  ...   longitude\ndate                      ...            \n2018-10-01 06:00:00  4.0  ... -119.262434\n2018-10-02 06:00:00  2.4  ... -119.262434\n2018-10-03 06:00:00  1.5  ... -119.262434\n2018-10-04 06:00:00  1.8  ... -119.262434\n2018-10-05 06:00:00  2.3  ... -119.262434\n...                  ...  ...         ...\n2019-09-25 06:00:00  3.3  ... -119.262434\n2019-09-26 06:00:00  3.7  ... -119.262434\n2019-09-27 06:00:00  3.8  ... -119.262434\n2019-09-28 06:00:00  2.3  ... -119.262434\n2019-09-29 06:00:00  1.7  ... -119.262434\n\n[364 rows x 4 columns]\n                           tmmx  ...   longitude\ndate                             ...            \n2018-10-01 06:00:00  291.767671  ... -119.918205\n2018-10-02 06:00:00  291.403814  ... -119.918205\n2018-10-03 06:00:00  285.282318  ... -119.918205\n2018-10-04 06:00:00  282.833110  ... -119.918205\n2018-10-05 06:00:00  286.711126  ... -119.918205\n...                         ...  ...         ...\n2019-09-25 06:00:00  293.979207  ... -119.918205\n2019-09-26 06:00:00  296.060344  ... -119.918205\n2019-09-27 06:00:00  291.860356  ... -119.918205\n2019-09-28 06:00:00  283.680755  ... -119.918205\n2019-09-29 06:00:00  276.873443  ... -119.918205\n\n[364 rows x 4 columns]\n                     eto  ...   longitude\ndate                      ...            \n2018-10-01 06:00:00  3.2  ... -117.393939\n2018-10-02 06:00:00  2.7  ... -117.393939\n2018-10-03 06:00:00  2.3  ... -117.393939\n2018-10-04 06:00:00  2.0  ... -117.393939\n2018-10-05 06:00:00  2.4  ... -117.393939\n...                  ...  ...         ...\n2019-09-25 06:00:00  3.5  ... -117.393939\n2019-09-26 06:00:00  2.8  ... -117.393939\n2019-09-27 06:00:00  3.4  ... -117.393939\n2019-09-28 06:00:00  0.6  ... -117.393939\n2019-09-29 06:00:00  0.7  ... -117.393939\n\n[364 rows x 4 columns]\n                           pr  ...   longitude\ndate                           ...            \n2018-10-01 06:00:00  2.903018  ... -106.605171\n2018-10-02 06:00:00  4.887324  ... -106.605171\n2018-10-03 06:00:00  1.493964  ... -106.605171\n2018-10-04 06:00:00  2.097585  ... -106.605171\n2018-10-05 06:00:00  0.000000  ... -106.605171\n...                       ...  ...         ...\n2019-09-25 06:00:00  0.000000  ... -106.605171\n2019-09-26 06:00:00  0.000000  ... -106.605171\n2019-09-27 06:00:00  1.296378  ... -106.605171\n2019-09-28 06:00:00  0.000000  ... -106.605171\n2019-09-29 06:00:00  3.704225  ... -106.605171\n\n[364 rows x 4 columns]\n                           vs  ...   longitude\ndate                           ...            \n2018-10-01 06:00:00  4.700000  ... -111.833366\n2018-10-02 06:00:00  4.293056  ... -111.833366\n2018-10-03 06:00:00  3.893056  ... -111.833366\n2018-10-04 06:00:00  4.413889  ... -111.833366\n2018-10-05 06:00:00  3.593055  ... -111.833366\n...                       ...  ...         ...\n2019-09-25 06:00:00  2.693056  ... -111.833366\n2019-09-26 06:00:00  2.713889  ... -111.833366\n2019-09-27 06:00:00  4.593055  ... -111.833366\n2019-09-28 06:00:00  8.213889  ... -111.833366\n2019-09-29 06:00:00  9.620834  ... -111.833366\n\n[364 rows x 4 columns]\n                           pr  ...  longitude\ndate                           ...           \n2018-10-01 06:00:00  0.500000  ... -119.08277\n2018-10-02 06:00:00  8.861953  ... -119.08277\n2018-10-03 06:00:00  6.985657  ... -119.08277\n2018-10-04 06:00:00  1.247610  ... -119.08277\n2018-10-05 06:00:00  1.647610  ... -119.08277\n...                       ...  ...        ...\n2019-09-25 06:00:00  0.000000  ... -119.08277\n2019-09-26 06:00:00  0.000000  ... -119.08277\n2019-09-27 06:00:00  0.000000  ... -119.08277\n2019-09-28 06:00:00  0.709562  ... -119.08277\n2019-09-29 06:00:00  0.000000  ... -119.08277\n\n[364 rows x 4 columns]\n                           rmax  ...   longitude\ndate                             ...            \n2018-10-01 06:00:00   72.543048  ... -110.234365\n2018-10-02 06:00:00   62.085919  ... -110.234365\n2018-10-03 06:00:00   74.063947  ... -110.234365\n2018-10-04 06:00:00  100.000000  ... -110.234365\n2018-10-05 06:00:00   85.240181  ... -110.234365\n...                         ...  ...         ...\n2019-09-25 06:00:00   53.487712  ... -110.234365\n2019-09-26 06:00:00   64.472017  ... -110.234365\n2019-09-27 06:00:00   69.208072  ... -110.234365\n2019-09-28 06:00:00   99.609508  ... -110.234365\n2019-09-29 06:00:00  100.000000  ... -110.234365\n\n[364 rows x 4 columns]\n                          vpd  ...   longitude\ndate                           ...            \n2018-10-01 06:00:00  0.848631  ... -115.273914\n2018-10-02 06:00:00  0.860356  ... -115.273914\n2018-10-03 06:00:00  0.710000  ... -115.273914\n2018-10-04 06:00:00  0.162062  ... -115.273914\n2018-10-05 06:00:00  0.391031  ... -115.273914\n...                       ...  ...         ...\n2019-09-25 06:00:00  0.918969  ... -115.273914\n2019-09-26 06:00:00  0.950693  ... -115.273914\n2019-09-27 06:00:00  0.651031  ... -115.273914\n2019-09-28 06:00:00  0.261724  ... -115.273914\n2019-09-29 06:00:00  0.152755  ... -115.273914\n\n[364 rows x 4 columns]\n                          vpd  ...   longitude\ndate                           ...            \n2018-10-01 06:00:00  0.344235  ... -116.073414\n2018-10-02 06:00:00  0.044844  ... -116.073414\n2018-10-03 06:00:00  0.225097  ... -116.073414\n2018-10-04 06:00:00  0.284066  ... -116.073414\n2018-10-05 06:00:00  0.314066  ... -116.073414\n...                       ...  ...         ...\n2019-09-25 06:00:00  0.503288  ... -116.073414\n2019-09-26 06:00:00  0.198047  ... -116.073414\n2019-09-27 06:00:00  0.160110  ... -116.073414\n2019-09-28 06:00:00  0.074066  ... -116.073414\n2019-09-29 06:00:00  0.105013  ... -116.073414\n\n[364 rows x 4 columns]\n                          rmin  ...   longitude\ndate                            ...            \n2018-10-01 06:00:00  28.299999  ... -105.599058\n2018-10-02 06:00:00  40.000000  ... -105.599058\n2018-10-03 06:00:00  38.799999  ... -105.599058\n2018-10-04 06:00:00  46.299999  ... -105.599058\n2018-10-05 06:00:00  46.000000  ... -105.599058\n...                        ...  ...         ...\n2019-09-25 06:00:00  18.799999  ... -105.599058\n2019-09-26 06:00:00  20.500000  ... -105.599058\n2019-09-27 06:00:00  27.500000  ... -105.599058\n2019-09-28 06:00:00  40.799999  ... -105.599058\n2019-09-29 06:00:00  19.299999  ... -105.599058\n\n[364 rows x 4 columns]\n                          rmin  ...   longitude\ndate                            ...            \n2018-10-01 06:00:00  36.636672  ... -115.705106\n2018-10-02 06:00:00  74.176569  ... -115.705106\n2018-10-03 06:00:00  34.135569  ... -115.705106\n2018-10-04 06:00:00  43.495586  ... -115.705106\n2018-10-05 06:00:00  40.620204  ... -115.705106\n...                        ...  ...         ...\n2019-09-25 06:00:00  34.412649  ... -115.705106\n2019-09-26 06:00:00  65.575128  ... -115.705106\n2019-09-27 06:00:00  66.648643  ... -115.705106\n2019-09-28 06:00:00  79.430901  ... -115.705106\n2019-09-29 06:00:00  80.507726  ... -115.705106\n\n[364 rows x 4 columns]\n                          rmin  ...   longitude\ndate                            ...            \n2018-10-01 06:00:00  41.857243  ... -106.865683\n2018-10-02 06:00:00  55.016097  ... -106.865683\n2018-10-03 06:00:00  39.013481  ... -106.865683\n2018-10-04 06:00:00  50.689939  ... -106.865683\n2018-10-05 06:00:00  38.996780  ... -106.865683\n...                        ...  ...         ...\n2019-09-25 06:00:00  19.949396  ... -106.865683\n2019-09-26 06:00:00  28.755231  ... -106.865683\n2019-09-27 06:00:00  37.028571  ... -106.865683\n2019-09-28 06:00:00  35.775855  ... -106.865683\n2019-09-29 06:00:00  39.293762  ... -106.865683\n\n[364 rows x 4 columns]\n                          vpd  ...   longitude\ndate                           ...            \n2018-10-01 06:00:00  0.200445  ... -115.956633\n2018-10-02 06:00:00  0.000000  ... -115.956633\n2018-10-03 06:00:00  0.080419  ... -115.956633\n2018-10-04 06:00:00  0.220445  ... -115.956633\n2018-10-05 06:00:00  0.250478  ... -115.956633\n...                       ...  ...         ...\n2019-09-25 06:00:00  0.395696  ... -115.956633\n2019-09-26 06:00:00  0.120445  ... -115.956633\n2019-09-27 06:00:00  0.080453  ... -115.956633\n2019-09-28 06:00:00  0.000050  ... -115.956633\n2019-09-29 06:00:00  0.060436  ... -115.956633\n\n[364 rows x 4 columns]\n                           tmmx  ... longitude\ndate                             ...          \n2018-10-01 06:00:00  286.100006  ... -115.9746\n2018-10-02 06:00:00  281.500000  ... -115.9746\n2018-10-03 06:00:00  284.600006  ... -115.9746\n2018-10-04 06:00:00  279.899994  ... -115.9746\n2018-10-05 06:00:00  277.799988  ... -115.9746\n...                         ...  ...       ...\n2019-09-25 06:00:00  287.200012  ... -115.9746\n2019-09-26 06:00:00  284.799988  ... -115.9746\n2019-09-27 06:00:00  283.100006  ... -115.9746\n2019-09-28 06:00:00  277.100006  ... -115.9746\n2019-09-29 06:00:00  273.299988  ... -115.9746\n\n[364 rows x 4 columns]\n                           tmmn  ...   longitude\ndate                             ...            \n2018-10-01 06:00:00  279.377920  ... -121.077031\n2018-10-02 06:00:00  272.069328  ... -121.077031\n2018-10-03 06:00:00  271.212881  ... -121.077031\n2018-10-04 06:00:00  273.660730  ... -121.077031\n2018-10-05 06:00:00  273.608580  ... -121.077031\n...                         ...  ...         ...\n2019-09-25 06:00:00  277.473617  ... -121.077031\n2019-09-26 06:00:00  278.721485  ... -121.077031\n2019-09-27 06:00:00  271.117184  ... -121.077031\n2019-09-28 06:00:00  269.665025  ... -121.077031\n2019-09-29 06:00:00  269.021472  ... -121.077031\n\n[364 rows x 4 columns]\n                           rmax  ...  longitude\ndate                             ...           \n2018-10-01 06:00:00   49.939100  ... -119.62176\n2018-10-02 06:00:00   73.279801  ... -119.62176\n2018-10-03 06:00:00   95.708300  ... -119.62176\n2018-10-04 06:00:00  100.000000  ... -119.62176\n2018-10-05 06:00:00   97.477301  ... -119.62176\n...                         ...  ...        ...\n2019-09-25 06:00:00   84.378600  ... -119.62176\n2019-09-26 06:00:00   81.798199  ... -119.62176\n2019-09-27 06:00:00   70.398697  ... -119.62176\n2019-09-28 06:00:00   96.990200  ... -119.62176\n2019-09-29 06:00:00   96.455401  ... -119.62176\n\n[364 rows x 4 columns]\n                           tmmx  ... longitude\ndate                             ...          \n2018-10-01 06:00:00  291.323155  ... -111.8154\n2018-10-02 06:00:00  289.617831  ... -111.8154\n2018-10-03 06:00:00  287.907223  ... -111.8154\n2018-10-04 06:00:00  281.523138  ... -111.8154\n2018-10-05 06:00:00  279.007200  ... -111.8154\n...                         ...  ...       ...\n2019-09-25 06:00:00  289.307216  ... -111.8154\n2019-09-26 06:00:00  290.512512  ... -111.8154\n2019-09-27 06:00:00  286.507200  ... -111.8154\n2019-09-28 06:00:00  283.807216  ... -111.8154\n2019-09-29 06:00:00  277.901909  ... -111.8154\n\n[364 rows x 4 columns]\n                           tmmn  ...   longitude\ndate                             ...            \n2018-10-01 06:00:00  277.762512  ... -111.833366\n2018-10-02 06:00:00  279.555555  ... -111.833366\n2018-10-03 06:00:00  276.455551  ... -111.833366\n2018-10-04 06:00:00  273.355545  ... -111.833366\n2018-10-05 06:00:00  270.469438  ... -111.833366\n...                         ...  ...         ...\n2019-09-25 06:00:00  273.248622  ... -111.833366\n2019-09-26 06:00:00  275.734734  ... -111.833366\n2019-09-27 06:00:00  274.934716  ... -111.833366\n2019-09-28 06:00:00  277.255567  ... -111.833366\n2019-09-29 06:00:00  271.020832  ... -111.833366\n\n[364 rows x 4 columns]\n                           tmmx  ...   longitude\ndate                             ...            \n2018-10-01 06:00:00  280.572602  ... -121.193811\n2018-10-02 06:00:00  278.672580  ... -121.193811\n2018-10-03 06:00:00  274.911795  ... -121.193811\n2018-10-04 06:00:00  279.892192  ... -121.193811\n2018-10-05 06:00:00  276.182382  ... -121.193811\n...                         ...  ...         ...\n2019-09-25 06:00:00  283.882391  ... -121.193811\n2019-09-26 06:00:00  284.472596  ... -121.193811\n2019-09-27 06:00:00  276.072602  ... -121.193811\n2019-09-28 06:00:00  273.733384  ... -121.193811\n2019-09-29 06:00:00  273.352990  ... -121.193811\n\n[364 rows x 4 columns]\n                           rmax  ...   longitude\ndate                             ...            \n2018-10-01 06:00:00  100.000000  ... -123.448583\n2018-10-02 06:00:00  100.000000  ... -123.448583\n2018-10-03 06:00:00   99.891931  ... -123.448583\n2018-10-04 06:00:00   89.424034  ... -123.448583\n2018-10-05 06:00:00  100.000000  ... -123.448583\n...                         ...  ...         ...\n2019-09-25 06:00:00   99.994592  ... -123.448583\n2019-09-26 06:00:00  100.000000  ... -123.448583\n2019-09-27 06:00:00  100.000000  ... -123.448583\n2019-09-28 06:00:00  100.000000  ... -123.448583\n2019-09-29 06:00:00   99.940515  ... -123.448583\n\n[364 rows x 4 columns]\n                          vpd  ...   longitude\ndate                           ...            \n2018-10-01 06:00:00  0.472468  ... -105.913468\n2018-10-02 06:00:00  0.389420  ... -105.913468\n2018-10-03 06:00:00  0.510206  ... -105.913468\n2018-10-04 06:00:00  0.407542  ... -105.913468\n2018-10-05 06:00:00  0.363451  ... -105.913468\n...                       ...  ...         ...\n2019-09-25 06:00:00  0.883933  ... -105.913468\n2019-09-26 06:00:00  0.817227  ... -105.913468\n2019-09-27 06:00:00  0.634602  ... -105.913468\n2019-09-28 06:00:00  0.724975  ... -105.913468\n2019-09-29 06:00:00  0.853510  ... -105.913468\n\n[364 rows x 4 columns]\n                          rmin  ...   longitude\ndate                            ...            \n2018-10-01 06:00:00  24.799999  ... -106.551272\n2018-10-02 06:00:00  41.633334  ... -106.551272\n2018-10-03 06:00:00  43.266665  ... -106.551272\n2018-10-04 06:00:00  40.466667  ... -106.551272\n2018-10-05 06:00:00  27.833333  ... -106.551272\n...                        ...  ...         ...\n2019-09-25 06:00:00  22.333333  ... -106.551272\n2019-09-26 06:00:00  21.300001  ... -106.551272\n2019-09-27 06:00:00  32.600001  ... -106.551272\n2019-09-28 06:00:00  28.100000  ... -106.551272\n2019-09-29 06:00:00  28.499999  ... -106.551272\n\n[364 rows x 4 columns]\n                            vs  ...   longitude\ndate                            ...            \n2018-10-01 06:00:00   4.413979  ... -106.757886\n2018-10-02 06:00:00   3.686022  ... -106.757886\n2018-10-03 06:00:00   5.214663  ... -106.757886\n2018-10-04 06:00:00   7.386706  ... -106.757886\n2018-10-05 06:00:00   5.200000  ... -106.757886\n...                        ...  ...         ...\n2019-09-25 06:00:00   4.079374  ... -106.757886\n2019-09-26 06:00:00   6.186021  ... -106.757886\n2019-09-27 06:00:00   6.100000  ... -106.757886\n2019-09-28 06:00:00   7.057380  ... -106.757886\n2019-09-29 06:00:00  11.008114  ... -106.757886\n\n[364 rows x 4 columns]\n                          eto  ...  longitude\ndate                           ...           \n2018-10-01 06:00:00  2.771608  ... -112.98321\n2018-10-02 06:00:00  3.550314  ... -112.98321\n2018-10-03 06:00:00  3.264510  ... -112.98321\n2018-10-04 06:00:00  1.264510  ... -112.98321\n2018-10-05 06:00:00  1.571608  ... -112.98321\n...                       ...  ...        ...\n2019-09-25 06:00:00  3.178706  ... -112.98321\n2019-09-26 06:00:00  3.571608  ... -112.98321\n2019-09-27 06:00:00  2.671608  ... -112.98321\n2019-09-28 06:00:00  1.085804  ... -112.98321\n2019-09-29 06:00:00  0.692902  ... -112.98321\n\n[364 rows x 4 columns]\n                           tmmx  ...   longitude\ndate                             ...            \n2018-10-01 06:00:00  290.293650  ... -121.705851\n2018-10-02 06:00:00  287.616555  ... -121.705851\n2018-10-03 06:00:00  284.164431  ... -121.705851\n2018-10-04 06:00:00  283.777640  ... -121.705851\n2018-10-05 06:00:00  280.225704  ... -121.705851\n...                         ...  ...         ...\n2019-09-25 06:00:00  289.577468  ... -121.705851\n2019-09-26 06:00:00  287.782922  ... -121.705851\n2019-09-27 06:00:00  282.624654  ... -121.705851\n2019-09-28 06:00:00  279.592594  ... -121.705851\n2019-09-29 06:00:00  274.411452  ... -121.705851\n\n[364 rows x 4 columns]\n                           vs  ...   longitude\ndate                           ...            \n2018-10-01 06:00:00  3.610485  ... -121.858565\n2018-10-02 06:00:00  8.535507  ... -121.858565\n2018-10-03 06:00:00  2.484846  ... -121.858565\n2018-10-04 06:00:00  5.369692  ... -121.858565\n2018-10-05 06:00:00  4.303877  ... -121.858565\n...                       ...  ...         ...\n2019-09-25 06:00:00  3.284846  ... -121.858565\n2019-09-26 06:00:00  7.127929  ... -121.858565\n2019-09-27 06:00:00  7.953568  ... -121.858565\n2019-09-28 06:00:00  3.984846  ... -121.858565\n2019-09-29 06:00:00  3.683877  ... -121.858565\n\n[364 rows x 4 columns]\n                           tmmn  ...   longitude\ndate                             ...            \n2018-10-01 06:00:00  282.284802  ... -116.863933\n2018-10-02 06:00:00  283.084819  ... -116.863933\n2018-10-03 06:00:00  279.784802  ... -116.863933\n2018-10-04 06:00:00  274.884808  ... -116.863933\n2018-10-05 06:00:00  272.605068  ... -116.863933\n...                         ...  ...         ...\n2019-09-25 06:00:00  281.679763  ... -116.863933\n2019-09-26 06:00:00  281.469627  ... -116.863933\n2019-09-27 06:00:00  281.549385  ... -116.863933\n2019-09-28 06:00:00  271.464565  ... -116.863933\n2019-09-29 06:00:00  269.444317  ... -116.863933\n\n[364 rows x 4 columns]\n                           tmmn  ...   longitude\ndate                             ...            \n2018-10-01 06:00:00  281.500000  ... -117.393939\n2018-10-02 06:00:00  276.600006  ... -117.393939\n2018-10-03 06:00:00  274.500000  ... -117.393939\n2018-10-04 06:00:00  276.600006  ... -117.393939\n2018-10-05 06:00:00  276.000000  ... -117.393939\n...                         ...  ...         ...\n2019-09-25 06:00:00  280.700012  ... -117.393939\n2019-09-26 06:00:00  282.399994  ... -117.393939\n2019-09-27 06:00:00  278.399994  ... -117.393939\n2019-09-28 06:00:00  273.000000  ... -117.393939\n2019-09-29 06:00:00  272.000000  ... -117.393939\n\n[364 rows x 4 columns]\n                          rmin  ...   longitude\ndate                            ...            \n2018-10-01 06:00:00  47.816322  ... -107.153143\n2018-10-02 06:00:00  68.751135  ... -107.153143\n2018-10-03 06:00:00  43.714047  ... -107.153143\n2018-10-04 06:00:00  53.274382  ... -107.153143\n2018-10-05 06:00:00  49.818694  ... -107.153143\n...                        ...  ...         ...\n2019-09-25 06:00:00  18.018595  ... -107.153143\n2019-09-26 06:00:00  28.181405  ... -107.153143\n2019-09-27 06:00:00  32.867459  ... -107.153143\n2019-09-28 06:00:00  26.672108  ... -107.153143\n2019-09-29 06:00:00  28.439565  ... -107.153143\n\n[364 rows x 4 columns]\n                           tmmx  ...   longitude\ndate                             ...            \n2018-10-01 06:00:00  293.562195  ... -119.235484\n2018-10-02 06:00:00  288.473532  ... -119.235484\n2018-10-03 06:00:00  286.658420  ... -119.235484\n2018-10-04 06:00:00  285.454626  ... -119.235484\n2018-10-05 06:00:00  288.558414  ... -119.235484\n...                         ...  ...         ...\n2019-09-25 06:00:00  298.365964  ... -119.235484\n2019-09-26 06:00:00  298.262177  ... -119.235484\n2019-09-27 06:00:00  295.758397  ... -119.235484\n2019-09-28 06:00:00  286.069757  ... -119.235484\n2019-09-29 06:00:00  281.462189  ... -119.235484\n\n[364 rows x 4 columns]\n                           tmmn  ...   longitude\ndate                             ...            \n2018-10-01 06:00:00  277.000000  ... -106.605171\n2018-10-02 06:00:00  276.899994  ... -106.605171\n2018-10-03 06:00:00  277.399994  ... -106.605171\n2018-10-04 06:00:00  274.700012  ... -106.605171\n2018-10-05 06:00:00  270.600006  ... -106.605171\n...                         ...  ...         ...\n2019-09-25 06:00:00  273.600006  ... -106.605171\n2019-09-26 06:00:00  274.399994  ... -106.605171\n2019-09-27 06:00:00  277.299988  ... -106.605171\n2019-09-28 06:00:00  277.000000  ... -106.605171\n2019-09-29 06:00:00  279.399994  ... -106.605171\n\n[364 rows x 4 columns]\n                      pr  ...   longitude\ndate                      ...            \n2018-10-01 06:00:00  1.1  ... -107.728065\n2018-10-02 06:00:00  7.9  ... -107.728065\n2018-10-03 06:00:00  1.4  ... -107.728065\n2018-10-04 06:00:00  4.5  ... -107.728065\n2018-10-05 06:00:00  0.4  ... -107.728065\n...                  ...  ...         ...\n2019-09-25 06:00:00  0.0  ... -107.728065\n2019-09-26 06:00:00  0.0  ... -107.728065\n2019-09-27 06:00:00  0.0  ... -107.728065\n2019-09-28 06:00:00  0.0  ... -107.728065\n2019-09-29 06:00:00  2.1  ... -107.728065\n\n[364 rows x 4 columns]\n                      pr  ...   longitude\ndate                      ...            \n2018-10-01 06:00:00  0.0  ... -105.850587\n2018-10-02 06:00:00  1.1  ... -105.850587\n2018-10-03 06:00:00  0.9  ... -105.850587\n2018-10-04 06:00:00  2.5  ... -105.850587\n2018-10-05 06:00:00  9.8  ... -105.850587\n...                  ...  ...         ...\n2019-09-25 06:00:00  0.0  ... -105.850587\n2019-09-26 06:00:00  0.0  ... -105.850587\n2019-09-27 06:00:00  1.4  ... -105.850587\n2019-09-28 06:00:00  0.0  ... -105.850587\n2019-09-29 06:00:00  0.0  ... -105.850587\n\n[364 rows x 4 columns]\n                          rmin  ...   longitude\ndate                            ...            \n2018-10-01 06:00:00  17.427777  ... -119.666675\n2018-10-02 06:00:00  35.441668  ... -119.666675\n2018-10-03 06:00:00  54.613887  ... -119.666675\n2018-10-04 06:00:00  60.320833  ... -119.666675\n2018-10-05 06:00:00  31.134723  ... -119.666675\n...                        ...  ...         ...\n2019-09-25 06:00:00  25.990277  ... -119.666675\n2019-09-26 06:00:00  25.383333  ... -119.666675\n2019-09-27 06:00:00  35.055556  ... -119.666675\n2019-09-28 06:00:00  45.062500  ... -119.666675\n2019-09-29 06:00:00  57.413890  ... -119.666675\n\n[364 rows x 4 columns]\n                            pr  ...   longitude\ndate                            ...            \n2018-10-01 06:00:00   0.000000  ... -119.289383\n2018-10-02 06:00:00  11.153486  ... -119.289383\n2018-10-03 06:00:00  17.692331  ... -119.289383\n2018-10-04 06:00:00   3.823606  ... -119.289383\n2018-10-05 06:00:00   6.205080  ... -119.289383\n...                        ...  ...         ...\n2019-09-25 06:00:00   0.000000  ... -119.289383\n2019-09-26 06:00:00   0.000000  ... -119.289383\n2019-09-27 06:00:00   0.000000  ... -119.289383\n2019-09-28 06:00:00   1.004980  ... -119.289383\n2019-09-29 06:00:00   0.000000  ... -119.289383\n\n[364 rows x 4 columns]\n                           vs  ...   longitude\ndate                           ...            \n2018-10-01 06:00:00  4.891242  ... -109.659443\n2018-10-02 06:00:00  8.434674  ... -109.659443\n2018-10-03 06:00:00  7.986863  ... -109.659443\n2018-10-04 06:00:00  5.339053  ... -109.659443\n2018-10-05 06:00:00  3.395621  ... -109.659443\n...                       ...  ...         ...\n2019-09-25 06:00:00  6.139053  ... -109.659443\n2019-09-26 06:00:00  8.434674  ... -109.659443\n2019-09-27 06:00:00  2.695621  ... -109.659443\n2019-09-28 06:00:00  2.843432  ... -109.659443\n2019-09-29 06:00:00  4.986863  ... -109.659443\n\n[364 rows x 4 columns]\n                           rmax  ...   longitude\ndate                             ...            \n2018-10-01 06:00:00   83.492347  ... -110.431995\n2018-10-02 06:00:00   68.462972  ... -110.431995\n2018-10-03 06:00:00  100.000000  ... -110.431995\n2018-10-04 06:00:00  100.000000  ... -110.431995\n2018-10-05 06:00:00   98.294458  ... -110.431995\n...                         ...  ...         ...\n2019-09-25 06:00:00   66.181267  ... -110.431995\n2019-09-26 06:00:00   75.046788  ... -110.431995\n2019-09-27 06:00:00   95.402109  ... -110.431995\n2019-09-28 06:00:00  100.000000  ... -110.431995\n2019-09-29 06:00:00  100.000000  ... -110.431995\n\n[364 rows x 4 columns]\n                           vs  ...   longitude\ndate                           ...            \n2018-10-01 06:00:00  4.650450  ... -107.126194\n2018-10-02 06:00:00  7.260361  ... -107.126194\n2018-10-03 06:00:00  5.870270  ... -107.126194\n2018-10-04 06:00:00  6.360360  ... -107.126194\n2018-10-05 06:00:00  3.670270  ... -107.126194\n...                       ...  ...         ...\n2019-09-25 06:00:00  4.460360  ... -107.126194\n2019-09-26 06:00:00  6.560360  ... -107.126194\n2019-09-27 06:00:00  2.170270  ... -107.126194\n2019-09-28 06:00:00  6.870270  ... -107.126194\n2019-09-29 06:00:00  9.330630  ... -107.126194\n\n[364 rows x 4 columns]\n                           vs  ...   longitude\ndate                           ...            \n2018-10-01 06:00:00  3.900000  ... -110.611658\n2018-10-02 06:00:00  5.706361  ... -110.611658\n2018-10-03 06:00:00  6.491113  ... -110.611658\n2018-10-04 06:00:00  5.606361  ... -110.611658\n2018-10-05 06:00:00  4.306361  ... -110.611658\n...                       ...  ...         ...\n2019-09-25 06:00:00  4.836857  ... -110.611658\n2019-09-26 06:00:00  6.427970  ... -110.611658\n2019-09-27 06:00:00  5.536857  ... -110.611658\n2019-09-28 06:00:00  5.285126  ... -110.611658\n2019-09-29 06:00:00  7.045744  ... -110.611658\n\n[364 rows x 4 columns]\n",
  "history_begin_time" : 1677791569051,
  "history_end_time" : 1694185610868,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "ji10sa2lds0",
  "history_input" : "# This script will download modis data for all the testing sites from Google Earth Engine.\n# The start date is the last stop date of the last run.\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\nimport eeauth as e\n\n#exit() # done, uncomment if you want to download new files.\n\ntry:\n    ee.Initialize(e.creds())\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n#start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "",
  "history_begin_time" : 1677787467783,
  "history_end_time" : 1677787470325,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Done"
},{
  "history_id" : "oor34iok53q",
  "history_input" : "# This script will download modis data for all the testing sites from Google Earth Engine.\n# The start date is the last stop date of the last run.\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\nimport eeauth as e\n\n#exit() # done, uncomment if you want to download new files.\n\ntry:\n    ee.Initialize(e.creds())\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n#start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "",
  "history_begin_time" : 1677786008134,
  "history_end_time" : 1677786042634,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "rc4xjtd8rx3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677784204242,
  "history_end_time" : 1677784272021,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "ux3pguwd7f4",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677782901807,
  "history_end_time" : 1677782901807,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "izpvusezu0x",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677781745171,
  "history_end_time" : 1677781745171,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "tome80ea4b1",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677719046582,
  "history_end_time" : 1677719046582,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "iabhd9ct121",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677718179103,
  "history_end_time" : 1677718179103,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "Xr1guY19dU41",
  "history_input" : "# This script will download modis data for all the testing sites from Google Earth Engine.\n# The start date is the last stop date of the last run.\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\n\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n#start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "today date = 2023-03-02\n/home/chetana\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/Xr1guY19dU41/data_gee_modis_real_time.py\", line 6, in <module>\n    from snowcast_utils import *\n  File \"/home/chetana/gw-workspace/Xr1guY19dU41/snowcast_utils.py\", line 81, in <module>\n    findLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n  File \"/home/chetana/gw-workspace/Xr1guY19dU41/snowcast_utils.py\", line 69, in findLastStopDate\n    for filename in os.listdir(target_testing_dir):\nFileNotFoundError: [Errno 2] No such file or directory: '/home/chetana/Documents/GitHub/SnowCast/data/sim_testing/gridmet/'\n",
  "history_begin_time" : 1677717564709,
  "history_end_time" : 1677717568889,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "e32b9vae4zk",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677679556263,
  "history_end_time" : 1677679556263,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "cv40icxyevx",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677679507369,
  "history_end_time" : 1677679549075,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "2bU5b7zKBIYk",
  "history_input" : "# This script will download modis data for all the testing sites from Google Earth Engine.\n# The start date is the last stop date of the last run.\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\n\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n#start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "Running",
  "history_begin_time" : 1677637620397,
  "history_end_time" : null,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Running"
},{
  "history_id" : "m1s31vmqth1",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677636286835,
  "history_end_time" : 1677636286835,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "yflrvpwxkfj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677636150365,
  "history_end_time" : 1677636150365,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "ne3vdddgd51",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677636137225,
  "history_end_time" : 1677636142811,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "8fsqanapnd8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677636063756,
  "history_end_time" : 1677636063756,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "1vm7du08s8l",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677635881823,
  "history_end_time" : 1677635881823,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "ej06haie2gu",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677617762781,
  "history_end_time" : 1677617762781,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "6q5l1h7akq2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677606170880,
  "history_end_time" : 1677606170880,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "iaw0etf2hvv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677606114172,
  "history_end_time" : 1677606114172,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "0k8i536wght",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677582848557,
  "history_end_time" : 1677582848557,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "uoytp1931pn",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677525426198,
  "history_end_time" : 1677525426198,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "bvbspodqbjf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677462325763,
  "history_end_time" : 1694185608913,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "ls8732ah9wv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677462312064,
  "history_end_time" : 1694185608645,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "knhs7wmrego",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677462311413,
  "history_end_time" : 1694185608616,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "bdl3gkqhzdv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677428742728,
  "history_end_time" : 1677428742728,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "ul7fsctss2u",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677428687330,
  "history_end_time" : 1677428687330,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "q3vvjvrk7lq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677426262825,
  "history_end_time" : 1677426262825,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "e41aodxmjlw",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677379889793,
  "history_end_time" : 1705789703786,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "8s4m823cbwc",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677379837790,
  "history_end_time" : 1705789703163,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "caza2nrzmg1",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677352477971,
  "history_end_time" : 1677352477971,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "6rr51q94237",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677352389907,
  "history_end_time" : 1677352389907,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "zvl8p4cs29m",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677352335848,
  "history_end_time" : 1677352335848,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "vkz1lf98m2c",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677344119933,
  "history_end_time" : 1705789707057,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "67rwy4fu34j",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677282602734,
  "history_end_time" : 1677282602734,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "zfzg6ms75x2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677273712223,
  "history_end_time" : 1677273712223,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "jhg7z048igl",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677273698738,
  "history_end_time" : 1677273703950,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "n7253986shb",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677273673905,
  "history_end_time" : 1677273679533,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "azevlof7jr5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677273657789,
  "history_end_time" : 1677273665451,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "gakp23w7970",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677273535995,
  "history_end_time" : 1677273535995,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "hvgzm90kpnw",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677273519099,
  "history_end_time" : 1677273525487,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "2k41eu1p3ve",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677273371294,
  "history_end_time" : 1677273371294,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "6qdg83ok3bi",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677273340430,
  "history_end_time" : 1677273345440,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "g7qe73tb091",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677273323486,
  "history_end_time" : 1677273332231,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "xca3r1jxmnp",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677273146648,
  "history_end_time" : 1677273146648,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "4m9h9tva3sm",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677273100222,
  "history_end_time" : 1677273134488,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "cskkhuc56oo",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677201275599,
  "history_end_time" : 1677201275599,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "3liwrob375u",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677192311045,
  "history_end_time" : 1677192311045,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "mjd3w4fvije",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677192268362,
  "history_end_time" : 1677192268362,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "qqwsz9r0fwe",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677191916718,
  "history_end_time" : 1677191916718,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "bnll0rntc4f",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677184296679,
  "history_end_time" : 1677184296679,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "x5grtmx7dh6",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677184173534,
  "history_end_time" : 1677184173534,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "3qkz3xezm1r",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677113476450,
  "history_end_time" : 1677113476450,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "p0cuaxnmf3v",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677108238599,
  "history_end_time" : 1677108238599,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "n5ebav0vsgr",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677108212500,
  "history_end_time" : 1677108229724,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "hbfo8ayiy79",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677107869797,
  "history_end_time" : 1677107869797,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "j2mglwjykvg",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677107757949,
  "history_end_time" : 1677107757949,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "g2zwgjbaw6b",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677107718294,
  "history_end_time" : 1677107718294,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "780ymlt7vma",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677107637151,
  "history_end_time" : 1677107705674,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "sv1tpb7zmg7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677107604016,
  "history_end_time" : 1677107608762,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "o9yp2jl23mj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677107556515,
  "history_end_time" : 1677107562719,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "5528a3k0fyn",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677107524983,
  "history_end_time" : 1677107538161,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "f6gj9xgmlzj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677107501081,
  "history_end_time" : 1677107501081,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "licseuogyix",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677107474147,
  "history_end_time" : 1677107474147,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "8sptjfib42t",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677106516091,
  "history_end_time" : 1677106516091,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "72wh6h0r75k",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677106477043,
  "history_end_time" : 1677106477043,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "qhod8c08kyc",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677106431034,
  "history_end_time" : 1677106431034,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "6ph0228r39r",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677106134881,
  "history_end_time" : 1677106147558,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "e7hlktwg7ai",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677106010982,
  "history_end_time" : 1677106010982,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "58tggmo1nav",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677030843544,
  "history_end_time" : 1677030843544,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "393h5wj1eoq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677030771139,
  "history_end_time" : 1677030771139,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "g2o2fhs2zkf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677030672634,
  "history_end_time" : 1677030672634,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "8ucly9880s5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677030562908,
  "history_end_time" : 1677030562908,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "y1wxw48epqv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677025528649,
  "history_end_time" : 1677025528649,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "c2d1andufm2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677025467072,
  "history_end_time" : 1705789711435,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "92ivcfgqe9v",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677017826409,
  "history_end_time" : 1677017826409,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "qblij8ly7om",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677017218415,
  "history_end_time" : 1677017218415,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "c9xcdaivyu0",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677016681301,
  "history_end_time" : 1677016681301,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "48mgvmvlnnv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677016142990,
  "history_end_time" : 1677016142990,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "p8m44zzso9s",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677016063952,
  "history_end_time" : 1677016063952,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "blpj2sw5scv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677015787633,
  "history_end_time" : 1677015787633,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "hacztec6scv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677015739936,
  "history_end_time" : 1677015739936,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "cjxeihd1wj7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677014884940,
  "history_end_time" : 1705789712271,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "pqu8h5pafy3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677014795597,
  "history_end_time" : 1705789714744,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "kkfa1n6e4t3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677014228018,
  "history_end_time" : 1705789715527,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "ktn04rc7i6j",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677013908418,
  "history_end_time" : 1705789716205,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "hz1n4ovdr33",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677013833012,
  "history_end_time" : 1677013833012,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "9njk24yyoui",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677011873055,
  "history_end_time" : 1705789717073,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "bj3uu1p606g",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677008198554,
  "history_end_time" : 1677008198554,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "tkl1t8pz2gu",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677008163554,
  "history_end_time" : 1677008163554,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "jqnci2u1ztl",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677001999576,
  "history_end_time" : 1705789717920,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "jqh42iktr8n",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677001732234,
  "history_end_time" : 1677001732234,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "gxgndbpc9y6",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677001593809,
  "history_end_time" : 1677001593809,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ry68hes1lzo",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677000536786,
  "history_end_time" : 1677000536786,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "4zykxjsb6jb",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1676999722103,
  "history_end_time" : 1676999722103,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "yb51al",
  "indicator" : "Skipped"
},{
  "history_id" : "79331xgac70",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1676999599088,
  "history_end_time" : 1676999599088,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "qm20lp7i5z4",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1676862212328,
  "history_end_time" : 1676862212328,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "yttgmin11cl",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1676329536243,
  "history_end_time" : 1676329536243,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "1svvqjrvyrh",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1676329491750,
  "history_end_time" : 1676329491750,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "igom1w0p1rd",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1676063613392,
  "history_end_time" : 1676063613392,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "bk08bzf31au",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1675783782319,
  "history_end_time" : 1675783782319,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "34pr1t7r0ui",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1672014982951,
  "history_end_time" : 1672014982951,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "fmt1bv7qgs0",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1671944382443,
  "history_end_time" : 1671944382443,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "da94ewva8fy",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1670910617249,
  "history_end_time" : 1670910617249,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "9u2mkxm04zy",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1670910501131,
  "history_end_time" : 1670910501131,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "9g5uaobxbbz",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1670910268455,
  "history_end_time" : 1670910268455,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "omdpctk82a1",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1670019638892,
  "history_end_time" : 1670019638892,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "9r7skvvtdrg",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1667484654097,
  "history_end_time" : 1667484654097,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "a13yekcq34h",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1667410736803,
  "history_end_time" : 1667410736803,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "48p436g1da1",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1667410652227,
  "history_end_time" : 1667410704835,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "n5g2wfkkuq7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1667410544328,
  "history_end_time" : 1667410624013,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "4aBDsSE0TqoL",
  "history_input" : "# This script will download modis data for all the testing sites from Google Earth Engine.\n# The start date is the last stop date of the last run.\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\n\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n#start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "Running",
  "history_begin_time" : 1656389236171,
  "history_end_time" : 1671948025549,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "6AVSzu9OzDsI",
  "history_input" : "# This script will download modis data for all the testing sites from Google Earth Engine.\n# The start date is the last stop date of the last run.\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\n\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n#start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "Running",
  "history_begin_time" : 1655935268406,
  "history_end_time" : 1671948028264,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "JbPGNYxhVvHQ",
  "history_input" : "# This script will download modis data for all the testing sites from Google Earth Engine.\n# The start date is the last stop date of the last run.\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\n\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n#start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "",
  "history_begin_time" : 1655934742278,
  "history_end_time" : 1655935261665,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "48SZyaX5cQNg",
  "history_input" : "# This script will download modis data for all the testing sites from Google Earth Engine.\n# The start date is the last stop date of the last run.\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\n\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n#start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "Running",
  "history_begin_time" : 1654522084525,
  "history_end_time" : 1655935258041,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "4hu89jucpvw",
  "history_input" : "# This script will download modis data for all the testing sites from Google Earth Engine.\n# The start date is the last stop date of the last run.\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\n\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n#start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "*** Earth Engine *** FINAL DEADLINE: ee.Authenticate will fail after 2022-06-06. Please upgrade. https://developers.google.com/earth-engine/guides/python_install\n\nprocess hasn't exited",
  "history_begin_time" : 1654519486172,
  "history_end_time" : 1654519781466,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "Wf0saM5ZS6nG",
  "history_input" : "# This script will download modis data for all the testing sites from Google Earth Engine.\n# The start date is the last stop date of the last run.\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\n\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n#start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "Running",
  "history_begin_time" : 1653917360839,
  "history_end_time" : 1654519762033,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "JfzcqYvcVKGC",
  "history_input" : "# This script will download modis data for all the testing sites from Google Earth Engine.\n# The start date is the last stop date of the last run.\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\n\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n#start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "Running",
  "history_begin_time" : 1653400098234,
  "history_end_time" : 1653917482862,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "Vn3Yv2R9uepm",
  "history_input" : "# This script will download modis data for all the testing sites from Google Earth Engine.\n# The start date is the last stop date of the last run.\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\n\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n#start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "Running",
  "history_begin_time" : 1652476764634,
  "history_end_time" : 1653413354516,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "XciSmCWWjo5f",
  "history_input" : "# This script will download modis data for all the testing sites from Google Earth Engine.\n# The start date is the last stop date of the last run.\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\n\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n#start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "Running",
  "history_begin_time" : 1652076427178,
  "history_end_time" : 1653413353831,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "uv3aX0H0CjoO",
  "history_input" : "# This script will download modis data for all the testing sites from Google Earth Engine.\n# The start date is the last stop date of the last run.\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\n\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n#start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "*** Earth Engine *** Authenticate calls from this Earth Engine Python client will fail after 2022-05-09: please upgrade. https://developers.google.com/earth-engine/guides/python_install\ntoday date = 2022-05-09\n/Users/joe\n2022-04-30 06:00:00\n2022-05-01\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/uv3aX0H0CjoO/data_gee_modis_real_time.py\", line 31, in <module>\n    start_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\n  File \"/Users/joe/gw-workspace/uv3aX0H0CjoO/snowcast_utils.py\", line 77, in findLastStopDate\n    date_time_obj = datetime.datetime.strptime(latest_date, '%Y-%m-%d %H:%M:%S')\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/_strptime.py\", line 568, in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/_strptime.py\", line 349, in _strptime\n    raise ValueError(\"time data %r does not match format %r\" %\nValueError: time data '2022-05-01' does not match format '%Y-%m-%d %H:%M:%S'\n",
  "history_begin_time" : 1652076320174,
  "history_end_time" : 1652076337337,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "mGDHHtZ19a0p",
  "history_input" : "# This script will download modis data for all the testing sites from Google Earth Engine.\n# The start date is the last stop date of the last run.\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\n\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n#start_date = \"2022-04-20\"#test_start_date\nstart_date = findLastStopDate(f\"{github_dir}/data/sat_testing/modis\", \"%Y-%m-%d\")\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "Running",
  "history_begin_time" : 1651626352937,
  "history_end_time" : 1651667723669,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "tGT7nSPGJJ2c",
  "history_input" : "\n\n# reminder that if you are installing libraries in a Google Colab instance you will be prompted to restart your kernal\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\n\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\nstart_date = \"2022-04-20\"#test_start_date\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "Running",
  "history_begin_time" : 1651154790938,
  "history_end_time" : 1651626570695,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "Jm2l11nK6gYV",
  "history_input" : "\n\n# reminder that if you are installing libraries in a Google Colab instance you will be prompted to restart your kernal\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\n\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\nstart_date = \"2022-04-18\"#test_start_date\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "Running",
  "history_begin_time" : 1650630236135,
  "history_end_time" : 1650715559506,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "zLu8NWa9HsIU",
  "history_input" : "\n\n# reminder that if you are installing libraries in a Google Colab instance you will be prompted to restart your kernal\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\n\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\nstart_date = \"2022-04-18\"#test_start_date\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "Running",
  "history_begin_time" : 1650627216965,
  "history_end_time" : 1650630233432,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "69XKSiHMilxl",
  "history_input" : "\n\n# reminder that if you are installing libraries in a Google Colab instance you will be prompted to restart your kernal\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\n\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\nstart_date = \"2022-04-08\"#test_start_date\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "*** Earth Engine *** Please upgrade your Earth Engine Python client: authentication is changing! https://developers.google.com/earth-engine/guides/python_install\ntoday date = 2022-04-17\n/Users/joe\nEmpty DataFrame\nColumns: [cell_id, lat, lon]\nIndex: []\nResults will be saved to /Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-08_2022-04-17.csv\nstart to traverse the cells in submission_format_eval.csv..\nTraceback (most recent call last):\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 703, in urlopen\n    httplib_response = self._make_request(\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 449, in _make_request\n    six.raise_from(e, None)\n  File \"<string>\", line 3, in raise_from\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 444, in _make_request\n    httplib_response = conn.getresponse()\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/http/client.py\", line 1371, in getresponse\n    response.begin()\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/http/client.py\", line 319, in begin\n    version, status, reason = self._read_status()\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/http/client.py\", line 280, in _read_status\n    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/socket.py\", line 704, in readinto\n    return self._sock.recv_into(b)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/ssl.py\", line 1241, in recv_into\n    return self.read(nbytes, buffer)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/ssl.py\", line 1099, in read\n    return self._sslobj.read(len, buffer)\nConnectionResetError: [Errno 54] Connection reset by peer\nDuring handling of the above exception, another exception occurred:\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/69XKSiHMilxl/data_gee_modis_real_time.py\", line 64, in <module>\n    df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/ee/computedobject.py\", line 98, in getInfo\n    return data.computeValue(self)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/ee/data.py\", line 738, in computeValue\n    return _execute_cloud_call(\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/ee/data.py\", line 338, in _execute_cloud_call\n    return call.execute(num_retries=num_retries)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/googleapiclient/_helpers.py\", line 134, in positional_wrapper\n    return wrapped(*args, **kwargs)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/googleapiclient/http.py\", line 900, in execute\n    resp, content = _retry_request(\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/googleapiclient/http.py\", line 177, in _retry_request\n    resp, content = http.request(uri, method, *args, **kwargs)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/google_auth_httplib2.py\", line 218, in request\n    response, content = self.http.request(\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/httplib2/__init__.py\", line 1701, in request\n    (response, content) = self._request(\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/httplib2/__init__.py\", line 1421, in _request\n    (response, content) = self._conn_request(conn, request_uri, method, body, headers)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/httplib2shim/__init__.py\", line 154, in _conn_request\n    raise _map_exception(e)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/httplib2shim/__init__.py\", line 140, in _conn_request\n    urllib3_response = self.pool.request(\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/urllib3/request.py\", line 78, in request\n    return self.request_encode_body(\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/urllib3/request.py\", line 170, in request_encode_body\n    return self.urlopen(method, url, **extra_kw)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/urllib3/poolmanager.py\", line 375, in urlopen\n    response = conn.urlopen(method, u.request_uri, **kw)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 785, in urlopen\n    retries = retries.increment(\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/urllib3/util/retry.py\", line 525, in increment\n    raise six.reraise(type(error), error, _stacktrace)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/urllib3/packages/six.py\", line 769, in reraise\n    raise value.with_traceback(tb)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 703, in urlopen\n    httplib_response = self._make_request(\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 449, in _make_request\n    six.raise_from(e, None)\n  File \"<string>\", line 3, in raise_from\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 444, in _make_request\n    httplib_response = conn.getresponse()\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/http/client.py\", line 1371, in getresponse\n    response.begin()\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/http/client.py\", line 319, in begin\n    version, status, reason = self._read_status()\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/http/client.py\", line 280, in _read_status\n    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/socket.py\", line 704, in readinto\n    return self._sock.recv_into(b)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/ssl.py\", line 1241, in recv_into\n    return self.read(nbytes, buffer)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/ssl.py\", line 1099, in read\n    return self._sslobj.read(len, buffer)\nurllib3.exceptions.ProtocolError: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))\nfailed ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))\nTraceback (most recent call last):\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 703, in urlopen\n    httplib_response = self._make_request(\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 449, in _make_request\n    six.raise_from(e, None)\n  File \"<string>\", line 3, in raise_from\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 444, in _make_request\n    httplib_response = conn.getresponse()\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/http/client.py\", line 1371, in getresponse\n    response.begin()\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/http/client.py\", line 319, in begin\n    version, status, reason = self._read_status()\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/http/client.py\", line 280, in _read_status\n    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/socket.py\", line 704, in readinto\n    return self._sock.recv_into(b)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/ssl.py\", line 1241, in recv_into\n    return self.read(nbytes, buffer)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/ssl.py\", line 1099, in read\n    return self._sslobj.read(len, buffer)\nConnectionResetError: [Errno 54] Connection reset by peer\nDuring handling of the above exception, another exception occurred:\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/69XKSiHMilxl/data_gee_modis_real_time.py\", line 64, in <module>\n    df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/ee/computedobject.py\", line 98, in getInfo\n    return data.computeValue(self)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/ee/data.py\", line 738, in computeValue\n    return _execute_cloud_call(\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/ee/data.py\", line 338, in _execute_cloud_call\n    return call.execute(num_retries=num_retries)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/googleapiclient/_helpers.py\", line 134, in positional_wrapper\n    return wrapped(*args, **kwargs)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/googleapiclient/http.py\", line 900, in execute\n    resp, content = _retry_request(\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/googleapiclient/http.py\", line 177, in _retry_request\n    resp, content = http.request(uri, method, *args, **kwargs)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/google_auth_httplib2.py\", line 218, in request\n    response, content = self.http.request(\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/httplib2/__init__.py\", line 1701, in request\n    (response, content) = self._request(\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/httplib2/__init__.py\", line 1421, in _request\n    (response, content) = self._conn_request(conn, request_uri, method, body, headers)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/httplib2shim/__init__.py\", line 154, in _conn_request\n    raise _map_exception(e)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/httplib2shim/__init__.py\", line 140, in _conn_request\n    urllib3_response = self.pool.request(\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/urllib3/request.py\", line 78, in request\n    return self.request_encode_body(\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/urllib3/request.py\", line 170, in request_encode_body\n    return self.urlopen(method, url, **extra_kw)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/urllib3/poolmanager.py\", line 375, in urlopen\n    response = conn.urlopen(method, u.request_uri, **kw)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 785, in urlopen\n    retries = retries.increment(\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/urllib3/util/retry.py\", line 525, in increment\n    raise six.reraise(type(error), error, _stacktrace)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/urllib3/packages/six.py\", line 769, in reraise\n    raise value.with_traceback(tb)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 703, in urlopen\n    httplib_response = self._make_request(\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 449, in _make_request\n    six.raise_from(e, None)\n  File \"<string>\", line 3, in raise_from\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 444, in _make_request\n    httplib_response = conn.getresponse()\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/http/client.py\", line 1371, in getresponse\n    response.begin()\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/http/client.py\", line 319, in begin\n    version, status, reason = self._read_status()\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/http/client.py\", line 280, in _read_status\n    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/socket.py\", line 704, in readinto\n    return self._sock.recv_into(b)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/ssl.py\", line 1241, in recv_into\n    return self.read(nbytes, buffer)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/ssl.py\", line 1099, in read\n    return self._sslobj.read(len, buffer)\nurllib3.exceptions.ProtocolError: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))\nfailed ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))\nTraceback (most recent call last):\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/urllib3/connection.py\", line 174, in _new_conn\n    conn = connection.create_connection(\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/urllib3/util/connection.py\", line 72, in create_connection\n    for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/socket.py\", line 954, in getaddrinfo\n    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\nsocket.gaierror: [Errno 8] nodename nor servname provided, or not known\nDuring handling of the above exception, another exception occurred:\nTraceback (most recent call last):\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/httplib2shim/__init__.py\", line 140, in _conn_request\n    urllib3_response = self.pool.request(\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/urllib3/request.py\", line 78, in request\n    return self.request_encode_body(\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/urllib3/request.py\", line 170, in request_encode_body\n    return self.urlopen(method, url, **extra_kw)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/urllib3/poolmanager.py\", line 375, in urlopen\n    response = conn.urlopen(method, u.request_uri, **kw)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 785, in urlopen\n    retries = retries.increment(\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/urllib3/util/retry.py\", line 525, in increment\n    raise six.reraise(type(error), error, _stacktrace)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/urllib3/packages/six.py\", line 770, in reraise\n    raise value\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 703, in urlopen\n    httplib_response = self._make_request(\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 386, in _make_request\n    self._validate_conn(conn)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 1040, in _validate_conn\n    conn.connect()\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/urllib3/connection.py\", line 358, in connect\n    conn = self._new_conn()\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/urllib3/connection.py\", line 186, in _new_conn\n    raise NewConnectionError(\nurllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPSConnection object at 0x7fc9188ee190>: Failed to establish a new connection: [Errno 8] nodename nor servname provided, or not known\nDuring handling of the above exception, another exception occurred:\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/69XKSiHMilxl/data_gee_modis_real_time.py\", line 64, in <module>\n    df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/ee/computedobject.py\", line 98, in getInfo\n    return data.computeValue(self)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/ee/data.py\", line 738, in computeValue\n    return _execute_cloud_call(\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/ee/data.py\", line 338, in _execute_cloud_call\n    return call.execute(num_retries=num_retries)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/googleapiclient/_helpers.py\", line 134, in positional_wrapper\n    return wrapped(*args, **kwargs)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/googleapiclient/http.py\", line 900, in execute\n    resp, content = _retry_request(\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/googleapiclient/http.py\", line 204, in _retry_request\n    raise exception\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/googleapiclient/http.py\", line 177, in _retry_request\n    resp, content = http.request(uri, method, *args, **kwargs)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/google_auth_httplib2.py\", line 218, in request\n    response, content = self.http.request(\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/httplib2/__init__.py\", line 1701, in request\n    (response, content) = self._request(\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/httplib2/__init__.py\", line 1421, in _request\n    (response, content) = self._conn_request(conn, request_uri, method, body, headers)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/httplib2shim/__init__.py\", line 154, in _conn_request\n    raise _map_exception(e)\nhttplib2.error.ServerNotFoundError: Unable to find hostname.\nfailed Unable to find hostname.\nAll points have been saved to /Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-08_2022-04-17.csv\n",
  "history_begin_time" : 1650237516681,
  "history_end_time" : 1650244632789,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "htiS6xKWuI3H",
  "history_input" : "\n\n# reminder that if you are installing libraries in a Google Colab instance you will be prompted to restart your kernal\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\n\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\nstart_date = test_start_date\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n      pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "Running",
  "history_begin_time" : 1649393983899,
  "history_end_time" : 1649453872414,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "j6CTDng645gf",
  "history_input" : "\n\n# reminder that if you are installing libraries in a Google Colab instance you will be prompted to restart your kernal\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\n\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\nstart_date = test_start_date\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n      print(\"failed\", e)\n  \t  pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "  File \"/Users/joe/gw-workspace/j6CTDng645gf/data_gee_modis_real_time.py\", line 79\n    pass\nTabError: inconsistent use of tabs and spaces in indentation\n",
  "history_begin_time" : 1649392177031,
  "history_end_time" : 1649392177095,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "qbnWckTs6bjX",
  "history_input" : "\n\n# reminder that if you are installing libraries in a Google Colab instance you will be prompted to restart your kernal\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\nimport traceback\n\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\nstart_date = test_start_date\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      print(traceback.format_exc())\n  \t  print(\"failed\", e)\n  \t  pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "  File \"/Users/joe/gw-workspace/qbnWckTs6bjX/data_gee_modis_real_time.py\", line 78\n    print(\"failed\", e)\nTabError: inconsistent use of tabs and spaces in indentation\n",
  "history_begin_time" : 1649392148222,
  "history_end_time" : 1649392148374,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "Pk6Su4jp5E66",
  "history_input" : "\n\n# reminder that if you are installing libraries in a Google Colab instance you will be prompted to restart your kernal\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\n\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\nstart_date = test_start_date\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      \n  \t  print(e)\n  \t  pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "Running",
  "history_begin_time" : 1649259317935,
  "history_end_time" : 1649391637839,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "6btu1TclLG6U",
  "history_input" : "\n\n# reminder that if you are installing libraries in a Google Colab instance you will be prompted to restart your kernal\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\n\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\nstart_date = test_start_date\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      \n  \t  print(e)\n  \t  pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "Running",
  "history_begin_time" : 1649212430897,
  "history_end_time" : 1649259253085,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "s1Nov7PUKxA0",
  "history_input" : "\n\n# reminder that if you are installing libraries in a Google Colab instance you will be prompted to restart your kernal\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\n\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\nstart_date = test_start_date\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      \n  \t  print(e)\n  \t  pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "Running",
  "history_begin_time" : 1648692307348,
  "history_end_time" : 1648692421459,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "tvA7G6qtakXT",
  "history_input" : "\n\n# reminder that if you are installing libraries in a Google Colab instance you will be prompted to restart your kernal\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\n\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\nstart_date = test_start_date\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      \n  \t  print(e)\n  \t  pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "today date = 2022-03-30\n/Users/joe\nResults will be saved to /Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-30.csv\nstart to traverse the cells in submission_format_eval.csv..\n'0001daba-dd41-4787-84ab-f7956f7829a8'\n'0006d245-64c1-475f-a989-85f4787bae6a'\n'000a9004-1462-4b8c-96ee-0601aff0fdf7'\n'00118c37-43a4-4888-a95a-99a85218fda6'\n'0013524a-f2f6-4d5c-a458-9f08a42c1228'\n'0013ea8d-f647-4664-b40f-57bb96f800e5'\n'001476f9-a9d5-4128-8210-e2c4879ce505'\n'002220cf-0b83-4f58-bacb-c4318686194b'\n'00270da4-a790-4b81-a693-e1e8c4f13e6e'\n'002a9f10-203c-4feb-9ea4-19bcbe9a7686'\n'00325ba7-fcbe-4bab-8c4f-f70cfe80ea46'\n'0038be33-f5ba-4274-93b9-c7b6ea003519'\n'003ca3a3-c298-4253-9f1b-7f6a1a097ca6'\n'003d4c74-b631-467c-b1fa-56c4708276bc'\n'00481126-761a-4d70-8775-c449bf498ecd'\n'0049403d-da12-4b13-b02a-0a2dd4e01d6a'\n'004cf556-f3dd-4c4a-9da0-cb2eb848ff0e'\n'004e5e03-f6b6-470b-96e2-911992c8ffb4'\n'00505b61-f978-44ee-92e8-c082c4482ac0'\n'0050f3a5-e24d-45d7-9ce1-f046a54adb96'\n'0051069d-cdc3-467b-9034-31f5e0eeb005'\n'0051c2e3-a110-4460-9296-9d9c9df82473'\n'0057c657-ac2f-4141-881c-3593859ef092'\n'0057dca9-9c70-4708-9697-909e5711a7f0'\n'005b6d88-4f1e-4ebd-8425-25e7236b5838'\n'005f3676-e3dd-416a-af7b-696067815dfa'\n'00651c0c-8687-4431-935b-8f2bfed1f429'\n'00656c12-2000-4cb7-97b0-6d51bafb5db2'\n'0065b17a-f2be-478b-b323-f3bb3bed4341'\n'006eac45-1c31-45fb-99de-30a52623082c'\n'007153b7-e0b9-41dd-a0a8-30901524ad20'\n'0072f5ac-ec83-4183-8757-47a7e26a8d86'\n'00743e1b-a98d-4026-9bdf-50cc52cd168e'\n'0075950a-3452-49a7-a1d7-7fb71b984696'\n'00778d9b-f669-4f39-b4d4-493ab085a536'\n'007ecee3-1492-4cb9-9a53-82d951ea2f01'\n'007edd43-d3d9-4f63-afee-8e5a95903ed6'\n'00802ec7-1ff4-4432-8cad-8a2db176f2bd'\n'00822a9c-dfd5-4ecf-b1fd-a445c450e7e7'\n'008971aa-a279-40eb-998d-a2ca2a26e7a4'\n'008e79fa-7265-404f-ab62-48f59d0e0f4c'\n'00909645-804d-4b63-a66f-283832684bf9'\n'009983f0-6187-4b99-9240-2299566529e2'\n'00a9de30-4258-4863-a7f9-e9788bc29b8f'\n'00ba0112-a5da-4264-9b86-82bf21bba65a'\n'00c20f4b-3dba-47cd-8210-73bfc64a5591'\n'00c6952d-223f-4661-a325-a98912335d81'\n'00cbc9d7-ce7c-46e8-87fd-774fcd1ad03e'\n'00d0afb7-e919-4b16-86d4-4ca059c7af09'\n'00d3626b-3696-49ae-97d2-165f56187953'\n'00db953c-7f4a-4de3-8772-42d7048c1ab6'\n'00df85af-2836-4229-a654-876cf2a1767e'\n'00e18892-bbf4-4dfb-b231-9d76b7299bee'\n'00e1b8d6-84f5-4b79-a5a7-ce7f8fe13773'\n'00e9c22e-949c-43c2-aed2-2e5a27dfc4bb'\n'00ec51da-dae3-4624-960b-e0cc9a911718'\n'00ee875c-37ea-47e9-9736-be92dd7353ca'\n'00f12281-0861-42c1-8053-702c7b6966e1'\n'00f1ff7a-6c24-44ae-9d47-d78533773a93'\n'00f4f052-a244-429e-b091-08f88d1f4d09'\n'00f7e783-ebd4-46d2-8bd1-c4ab87199426'\n'00f9a90c-60a6-4183-814f-e50722fd2c2d'\n'00fde10f-74b9-4eaa-a6e4-7abe055d16c4'\n'00fff8e8-082a-4c71-a29d-ec0db786cd6b'\n'01011989-1913-405b-a52f-80220df7876d'\n'0103912a-8a01-45e9-83ec-146cd09f3164'\n'010f8360-a018-4620-9de2-33a7893129af'\n'0113dc17-2d90-4541-89cd-f209b30405f2'\n'0114836e-3741-4224-abb1-703e87f330a7'\n'01156105-b7fa-44b9-86c9-27909a81d63a'\n'011df06d-650c-40e7-bd56-d2f305c1bff9'\n'011e46e4-00bc-4fb3-be3b-d31e22e880f2'\n'0125850a-5d2f-46d2-9873-0066edcfe334'\n'012ea03b-8472-4adc-abf5-6352a2e9c04d'\n'012fbbca-6dc5-4c37-b266-ac2782ca4975'\n'01337282-fb38-45ea-a4ba-d046fa7f79f3'\n'0136d669-a167-44d6-8c65-dbcbc4f71e5b'\n'0138b557-850c-43a9-a5d6-7c7e96d096e1'\n'0139bb4f-9f2b-420c-b5ea-34db9a5d0d65'\n'0139def7-9348-42b8-8767-0edcb1d81a1e'\n'01486dea-9406-4fb9-a080-2ce6c8889d61'\n'014ce464-ac95-43ad-a614-5f017f8656ed'\n'015e2c22-7766-4d19-bde1-33f6a22824ba'\n'01609391-dfb8-42e7-9806-6b2fb7a23e07'\n'016144d3-14da-4f27-a62a-03f7c2b0a9df'\n'0161a423-ba7f-405d-b129-273fadc00911'\n'01620fe7-3c4a-4b71-b45d-a3805eeaf509'\n'01652e7e-9400-4e7c-84bf-86e67f33246f'\n'016837dd-3b5f-4fed-a555-a05da5efbe1f'\n'016d3736-a9d0-474c-b62a-3e90ec42eefb'\n'016fc79d-5ee9-46b7-a84a-6e869cf4960b'\n'01705743-de45-4cef-893f-3856b5cbb662'\n'0174c824-3ade-474a-ae73-04963649b692'\n'01762b10-7e89-4cf6-a227-143eab3943d8'\n'017a7810-a518-41bd-b012-7464fad522b5'\n'017dca0b-be33-4eba-90de-f0c2fce9f098'\n'0182c197-ee0f-45e8-a001-4d7d7c9795a3'\n'018481a6-b64b-49e5-9824-599dcabf2135'\n'0186f113-1650-4e47-8de0-70cee5863d66'\n'018acc46-9b3a-4f14-b4c0-5929776ace07'\n'018c8a27-2b08-4705-a8aa-b0c13ceb89ad'\n'018d455b-a485-499f-858d-b2f09c0dc75f'\n'018e1f62-069b-48e1-b440-f6eacaa54520'\n'0190e8ab-7af3-4baa-a959-9099350c0ae8'\n'0193ab07-d62b-4660-9f26-5e890dbe7c46'\n'019470f5-b5ac-4f0f-9a88-dc0e2b0af7a3'\n'0194c7f2-1f87-449c-9c77-2f1ce6009e18'\n'0195f974-1f43-41a6-9acc-42896477ab61'\n'01999dd2-f622-4a97-b09b-83f5ed7523da'\n'019d002f-2ba5-47c7-9d1e-0421d065e23f'\n'019d3222-db52-4cd7-bee6-d335eabab91a'\n'01a73b68-64ab-486e-a9a5-a9c9a6f3f6fb'\n'01ad3790-e684-4829-950f-01368856c94e'\n'01b1a490-2442-48ac-ab23-4563464468af'\n'01b35227-af96-4f9b-894b-391bd1ad1e4b'\n'01b7bb5e-0c0f-4263-943c-ff9a249847ee'\n'01b81868-133a-4b56-b386-ec0e4fcc57d0'\n'01bc3228-7fa3-460e-947c-3a365c7d533c'\n'01c10e0e-9255-42a5-a649-9c62f74ecf86'\n'01c8c6e4-9db3-4085-a4f6-f191bb014e70'\n'01c95d67-a86e-4784-8473-45162188f46c'\n'01cf8536-1488-4ee9-82e5-19ac82183b06'\n'01d34fad-ffb3-467b-b159-41c82158f2e2'\n'01d5fddc-8e3b-4482-a515-e69292066dc3'\n'01d60152-b41c-4b57-8ae3-bf7bf6dcfdd8'\n'01d9f4f1-12f2-409b-af76-8cee0ee95701'\n'01db68d7-532e-46c9-94c3-2d4dd4cf4753'\n'01e85eed-aa39-4a61-b720-a59b84991428'\n'01e9eea8-0e61-4aeb-ad57-e89135510ead'\n'01ecb4e4-bce9-4309-ac1f-4787c0be22c7'\n'01f0f6e2-574e-424f-98a1-6b823752932a'\n'01f39cb1-66c7-41c9-96c4-0fa4baa98851'\n'01f53e53-8ffc-4b74-a6d4-808e242b44b7'\n'01faba06-9dba-49f7-92cb-ceaa16bdab2c'\n'01ff2bb4-67b6-43ae-8506-53282bf27a6a'\n'01ffe76a-9d66-4733-b17f-bf922a54fb21'\n'0202aaca-5ec1-4917-a75a-bff3520b72da'\n'02062667-85cc-44c3-a52d-4f884bd1c95c'\n'0209240a-0dba-494d-a0b5-bff00c00d0ef'\n'0219357c-527c-4a54-a00c-9573d9ddaf47'\n'021a84a4-6a5e-40d1-b5d2-ede15ab4d051'\n'021e5ca1-3702-4379-81b0-60ded7294421'\n'021e7a6a-fde4-44cf-bbda-8b096a2970c7'\n'0227083a-cdf0-4dcd-9939-72994feb6be8'\n'022780fb-57e6-4ffe-9212-0c7daeb13bed'\n'022a03f3-2616-4ce3-865b-da113b76d188'\n'022b63c5-5bb9-4fda-8489-9a41470cb07d'\n'022e5945-f13d-4270-b147-a4d33a3d4a5f'\n'02387350-2d78-427f-9f78-b117fde1d9e7'\n'023b2795-12c2-4f1f-bb52-3e3ecd26f1a7'\n'023c3c0e-9709-42bf-a778-12c929f206cc'\n'023e4079-f8e3-4b27-abd2-93047825fd7d'\n'0243f7ae-79d1-42e1-b60c-464d6cbddfb6'\n'0245cef8-4d64-43ab-b37f-42f6c04c9cd0'\n'0246e8d3-9ff4-48d6-bf5d-f602b5d38319'\n'02486797-e82a-4007-ac80-410c03a31c6e'\n'024d24a6-fa03-4953-b50d-b0ef42d222c2'\n'024d4a58-ef11-4f2b-925d-657809d60ff6'\n'02513e74-2209-4083-a8b5-a16e54fea22c'\n'02546ef5-0e70-4c45-9582-8463dafcec86'\n'025533c9-5fdc-4fd0-a6a6-9935ad824c32'\n'0255cea4-8bc0-42fc-a0ce-a102af1eaac3'\n'0263eff8-963d-4586-a3c0-8b316c5d21d9'\n'0266bae9-30f1-43eb-8c9e-25b6d250aa1a'\n'0268c537-5cf9-4c2b-a1fe-ff64944b1796'\n'02690e0c-f79c-4746-82e5-5247c89c1f06'\n'026b1ec0-027a-47a9-b37e-cd982b695240'\n'0274c1a7-8069-41bd-88f8-5e8d9e12be31'\n'0275628e-1bb7-4f54-a1ea-160cb2b38feb'\n'0282bd7b-67be-4661-90ea-99fb7bbd182f'\n'02835e9e-2bf7-400b-9a33-779563f1e930'\n'0285b903-f5be-4a53-842a-c42282701d50'\n'028710fa-9b38-497e-b266-6e33afe367bb'\n'02897a1d-af9b-46e3-aec2-cf8f9ef11c30'\n'0289c86a-1519-47a1-9c7f-ab0c626d8995'\n'0289f22c-aab5-49dd-a8dd-9cfbe9f56d51'\n'028c66e1-5d2b-45fb-93d1-0a44f808de34'\n'02924296-383d-46bc-adc5-6531f741ea7c'\n'029529bb-cea1-43ec-962f-636aa443c403'\n'0295665e-82a7-464a-a496-0124625392d6'\n'029758e7-b211-41c0-841b-bcfbdaa0b29d'\n'029b4083-4edd-4cba-a77c-3a2caa76c1fe'\n'029b869c-e14d-4951-8962-c06e9e60aa89'\n'029e2603-322a-4f62-bc1c-f3da75cd2265'\n'02a453da-76c8-4ba1-91d4-7c56fbf0eb60'\n'02a4c14b-aa90-40d9-8529-a0878b09cc0c'\n'02a4e852-c4d5-482b-a521-51a4424e3f70'\n'02ae9a3b-126c-41ba-a529-d28deb7d3337'\n'02bab660-283a-4a3e-b30b-939bbae5a969'\n'02bc5e0b-b999-4403-8eeb-9e509cd00171'\n'02bc8ca8-4bc5-4bbc-b36f-7d58dc2756f7'\n'02c02657-0bd4-4fa2-b339-020e3412050c'\n'02c2200a-4b11-4970-af37-2e5fa693cd1a'\n'02c5023a-ad16-4cf3-9003-8fd77a84ddb2'\n'02c52c70-df0c-4349-984a-8caca4cd8eb8'\n'02c81990-3038-437a-be9f-bb76d3e7693f'\n'02cae6ee-02f2-44b2-bd64-c7ca51cb7671'\n'02cbb2df-9830-4fe2-b7f5-03ba8a4e34b2'\n'02d04a43-bde7-4952-938b-37a5562d69a4'\n'02d70e51-07db-43c3-88b4-1550cbc7855e'\n'02d9b441-2d47-494b-8870-8d3382c17384'\n'02e45508-e284-4c0d-b3d1-2bc402fff1a7'\n'02ec8bce-7ef9-45bf-b3a9-58f7823f25bb'\n'02ed331c-90ba-49dd-8b51-39a5fe448578'\n'02eeeac2-3708-47ce-b2aa-dd7496bb5152'\n'02f4a445-bcda-46a2-acf9-38312df92450'\n'02f5f302-aa54-4764-a30e-5d7522b469ec'\n'02f681c5-add3-48b6-9a37-0d9c2a6a7f9b'\n'02f7a562-0746-4b4c-8d83-4128c873029c'\n'02fea5e6-5b16-47c2-82ce-94e288ff20e3'\n'0300e6f6-c6f9-4ef7-9d6d-dc7ec5f97e5a'\n'03058382-7125-4e15-b58a-76fb220f158b'\n'03093663-1b50-4087-a861-86cce1fdd9eb'\n'0309ccc0-02a4-4fa9-b7fd-44e13269bc8f'\n'03129265-0e01-4ae3-b482-cf399a0b90f8'\n'03153931-6b5a-4b98-abed-642cb3ba953c'\n'03186c6d-3e58-4538-9b9a-9bd96ee70218'\n'032c487e-9eb7-4f6c-8689-e6dacbc13727'\n'032f5da3-da09-4e3b-8ec0-68bcc4f3f9f6'\n'0332e840-aeda-4ba1-8c6c-165c85c6da7f'\n'033ddd98-b155-4a2b-bfeb-730cdcf07b07'\n'0340b93d-ab1c-44b8-9ccb-8341bbf8022f'\n'03412397-8ac4-4685-974d-3172f16acce9'\n'03461b35-29f1-4978-a1f4-b213ff413fed'\n'0346c906-7f5a-440a-9c13-6d254237335b'\n'034af8da-8c17-4bfb-ac8b-3b2df079639a'\n'03529fdc-ba2e-4f81-9d0c-88808ae0b045'\n'035731c9-39e9-41e7-a239-da7af53e6f94'\n'035c0ae3-5c88-4498-a7fe-d095f7d83de3'\n'035c3ff5-ccde-4434-94f7-9d4b64b19617'\n'035d07a1-97f6-4d29-89f4-2a3951d2084d'\n'0361cd82-9167-4276-b16c-caa5f1e1c249'\n'03665d3b-fbe0-496a-99fc-c8d18b379214'\n'0366ca92-01fc-42e7-b680-03d9d1374491'\n'0366dca6-a897-4742-a479-aec364f9488b'\n'0366e6a7-fefa-4187-a556-cc26609d9c92'\n'03697894-9bd1-46a1-84e7-3da027dd0aff'\n'0369f043-8568-4f29-9800-d9b0f667f33d'\n'036d0a25-ffee-4b07-a57b-96ff8dd23f4d'\n'036d27dd-3835-4e33-9c08-cf52ee82afc3'\n'03776833-19ad-4c2c-8b0b-75bfb49a183f'\n'037c249b-9e28-45f8-9270-05c11f3cf9d9'\n'037e8c82-798e-4785-8c9e-a98a38bd76be'\n'037ef632-0877-49a0-9ee3-0c32878c1f61'\n'038264ee-7ca0-41b4-8f27-55a53896ee87'\n'03855439-0816-4ffc-9100-aa34b74bc43b'\n'0385a03d-03ec-4e51-a05c-ef6636eac88d'\n'03860206-6eb7-4020-beb6-fd9a748de04a'\n'038a7de7-7704-4266-b562-5e6d6928de7d'\n'038b20ff-28c3-4bf3-85c9-beef360f1baa'\n'039284f5-1409-408f-a715-b95cbab4ec49'\n'03994b68-5abb-4f04-bf70-5558125c65e0'\n'039dca15-5d29-4cef-aad4-79d5b2de066a'\n'03a4625b-62c1-49ad-9ae2-a43d6f2332a6'\n'03a89ff8-7f5a-4b04-b143-771deee60255'\n'03abc36e-7824-4b9e-9677-e79d08656817'\n'03b29664-20a4-4f2c-82f6-d47a87506d07'\n'03b4e5f8-e73c-44b3-9a9e-c0492f8dcc0f'\n'03b64207-ca0c-4a82-b5ea-9435bb0d5470'\n'03ba7e12-ff2c-4349-a712-6fd2a0a7794c'\n'03bb5877-25d8-4172-a73c-6dba4dfda91e'\n'03bfd3cb-c0d4-481c-986c-b89ce1656732'\n'03c1f2b5-9ce6-479f-b540-2c7b1c060fd0'\n'03c2ea2c-c749-4f08-8ee0-6dfe1bcddef0'\n'03c3c363-76bd-4d36-9e82-0d9845fda7e2'\n'03cd5120-f976-434e-84c4-526f3d2db076'\n'03d3272d-5dad-49fa-9e21-c4e4366df738'\n'03d82692-a06b-4a1d-b14a-e79498696337'\n'03dac778-3739-42f7-861a-c4f32e054669'\n'03e20c1b-af33-40ed-aa44-6ba7264f412b'\n'03fb442d-ed22-4f6a-9a65-76ffe18380c3'\n'04067fc1-b841-4c5c-b1b3-1fa874867445'\n'04072ca9-0a7a-43a5-a57b-829e3525c001'\n'041541e7-637f-49ee-8210-90e0c85092e7'\n'041b148e-437c-4f1d-8d34-9e58760a4b11'\n'04235ebf-f64c-44cf-b604-1868b798b27c'\n'0426e0b0-389f-421f-a115-90f6eba81276'\n'0434f065-1e73-4df9-862c-1cbba7e37b02'\n'0443995b-f761-4514-a461-350f401715a1'\n'0443d786-9adc-4aa8-bb4d-2ffeb5b4a1d1'\n'0449e3b8-cd03-4535-8e1a-cef000a07270'\n'044ae40a-ebf2-46bc-9b51-66d1454887b8'\n'044b8806-634e-4d8d-a077-107658def160'\n'044f2583-60dc-4d38-94eb-d2c77d52b845'\n'04549cd3-b094-4c3d-af14-310178872bec'\n'045542d2-3492-4270-8392-060a1d4eeae7'\n'045aa3ff-f902-456c-a9f3-1e9b36bbd08c'\n'0461cae8-c4ac-4411-8267-64bd2e23d5dc'\n'046a2746-ef98-4576-9ff2-511a052c1aca'\n'0475b6cf-8ca1-4d8f-8b29-d4d17f4574b7'\n'0475bfa0-36ee-44cc-a2bf-63821bf28552'\n'04768fa3-aa7d-47a0-be14-ba21b8b0c263'\n'048142ef-62f3-425f-b4d7-bf7c61219135'\n'0487436d-1d79-4471-8207-7efce42489c7'\n'048b1d1a-1ecb-4aca-b1ea-0c3cda5dd85c'\n'048e7290-5886-46e0-b276-992e73edeb4e'\n'04910e5c-e613-4843-b19d-6a676e46ea90'\n'04915a27-bedd-4ecb-ad0b-b7a38c90fb0a'\n'04945d00-aa04-4176-b40e-5022a83e1579'\n'049a46cd-15c2-45b8-8f73-25221c9acebe'\n'049cb9be-c25f-4469-8721-982645acb73b'\n'049e7f98-849c-436f-98b6-fb24e2fbc4b5'\n'04a0d453-5988-4d8e-95cf-aa989b228a61'\n'04a20b0c-286d-4cae-98d3-701962f098a2'\n'04a2d21a-c9b0-4c88-bc54-ee9f65b4d1b0'\n'04a5ab2d-5a18-4dfb-a7a6-e605f0c64692'\n'04ac59fc-2d32-461a-9882-7e6616900aea'\n'04ae08e6-0a38-43ae-902a-34acc8b8f98d'\n'04afdc09-9f4f-4401-9351-25f6fce7a1b5'\n'04afec81-b376-44cd-9d4f-70060ab6b2c6'\n'04b0ff01-6cc0-4a4a-865f-e4a672d3d179'\n'04b160db-c1d4-4f5e-806e-82b099a0f649'\n'04b1b98a-d151-41cc-b5f2-0050139d5ae9'\n'04b21d75-e0a7-4089-88c0-7b6b1771d6c3'\n'04b2e81c-a3b6-4a37-84b4-558b2bd13c77'\n'04b95d6b-852d-428b-ac37-c83d0f3399f6'\n'04ba3508-4bb8-4a7f-92a4-4f16743514f5'\n'04bdcfca-66ce-4399-b575-e215b694d3dd'\n'04be7c6e-e796-471e-9f9f-4e9ba69e70e8'\n'04c37019-7660-4501-b031-9c17d7ca2d60'\n'04c57d84-19e5-41ef-9761-539fdf6cf608'\n'04c62e68-a59f-46d5-b3e4-b311f837ed9d'\n'04c779aa-0e3d-4062-a473-7cc1b6cd4459'\n'04c7bb4c-52b3-4338-a413-604ed1047ac4'\n'04ce226b-96ed-4358-9d47-335d143a6e2c'\n'04d3cf6a-6e35-4fc3-8d02-d3b39432ea06'\n'04df4b3d-8841-4e2f-8536-d1d9cefd0572'\n'04df5da5-85ab-47c2-af7e-778f3db07049'\n'04e1cf76-ea0d-49a3-95e5-e52e46135176'\n'04e333b2-9d7f-4898-97de-40ad9b379d64'\n'04ea7ec1-d270-4d01-a8de-6a3b6ddf2892'\n'04ec7abb-03a7-4f7e-acb5-2be559b5e466'\n'04ee8779-7ccd-4bc6-b4e3-38e519e5bb6b'\n'04f277f7-3d65-43ca-b172-e3fd701418cc'\n'04f40c2a-fd9b-46e5-8d7c-57e442234874'\n'04f4634a-3367-4645-b2af-9719b5679f8b'\n'04f54505-160a-48a7-bb7b-4e75650457b7'\n'04fa0c5a-7cc7-45af-882d-0329fe7045e0'\n'04fdface-1e2f-4c31-80e6-1e6483d29b9b'\n'04fe66ee-becf-41b6-9110-3b70f835e06f'\n'050635be-202d-4799-8b11-1fa7a30888a7'\n'050c9aa7-1a3c-4198-bd6e-b71e87f6421b'\n'050f7a2d-5feb-492a-a549-47db328ca3ea'\n'0513d54e-45c5-48fd-9365-ea93037142f2'\n'051b98f9-123f-48fa-977c-22015a3ebbff'\n'052168a0-6ae4-4b8f-847c-358d78c3e891'\n'05232be9-fdb4-4644-8d0b-793d4e4407ae'\n'052350f3-733c-47e3-a0bb-0cf78886eda8'\n'0523645a-ce00-432a-9d6b-777508c83a1a'\n'0528d484-9e37-4140-a43e-894fa1ae987a'\n'052b8ca3-3f5a-4d57-8fe6-ee55275baa48'\n'0532172a-42b6-4bba-9e00-c7647866bc32'\n'053288fc-7634-4b0e-83cb-7d76f072192d'\n'0535ed57-a197-4e69-ae4a-102a6ecfe249'\n'05360efd-326a-4afa-b28a-d5916dbb94a3'\n'053962ee-c1e2-4a4d-b21a-de845553d5ca'\n'053d9118-b5ed-47a3-8319-0f145f244a4c'\n'053e8f71-fdf0-41b1-ae40-15db891a698e'\n'05488e9b-b918-474a-8ff8-47076c95e983'\n'0548df31-6858-4d21-8878-8d5638aa5764'\n'0549628e-54d3-4086-b52a-1df268d87c17'\n'054be902-2bc2-47b6-a641-29fbe99c16a5'\n'054cf666-898f-497c-a561-c6d8f2fddf2c'\n'05563bf5-b7dc-426d-a914-8e6ea0c27899'\n'05575c51-5215-4fc3-b455-9ad4b56d4f86'\n'0557cbba-861c-4f20-931e-2f33e8c2b073'\n'055e5328-187a-498e-8893-00cb04821723'\n'0560ca13-1058-4a8d-8629-2b720250b8ca'\n'05694a09-1972-45b5-8a67-d1541f00f3db'\n'056b3777-54bc-4be1-81e6-ccaead6cf064'\n'056bbed9-0c27-48ad-9072-b532d97322cd'\n'056d591f-d96d-4700-967f-434d0ed4cbac'\n'05726490-fcfe-4bd3-ae8e-6b5dc39e1bfa'\n'05746e8c-0f15-41d2-a4c1-4ddfe851e397'\n'05749ae4-bdea-4cd1-b40f-af7643fcc157'\n'0578020e-9bae-46ff-aaef-f64b9330e801'\n'0578e1ff-45d7-4fe9-a28a-f4b669c123ef'\n'05791146-2450-43bf-9ed7-db6fb507142a'\n'057f433b-a8de-425e-843e-fb6d15276612'\n'057f7dd4-6e33-4f6e-828a-6a3d14abf2cc'\n'058bacc8-5d39-43b8-91d7-c9b8a8bf5d0a'\n'058c942e-6fe4-4e67-a047-3cecf68167f6'\n'0592fdcc-d1b8-404f-9f23-725b50760949'\n'05936245-fb6d-4a1b-864e-e39d1dc557ab'\n'0598145c-77b0-462c-b9c6-7bb3eabf26cf'\n'059cfcba-89cc-4f3a-8665-3831ab242fab'\n'05a38ac7-262d-4136-9f67-7ae62b37334b'\n'05a391c8-b0d1-4a80-af4c-85b1a63785ec'\n'05a68ca6-986e-400b-acf3-ef06f59ab86b'\n'05ab3786-2df1-45eb-981a-a9ad882442c5'\n'05ad05ff-a1f6-40e0-a441-d9a7ed8268ca'\n'05adc967-9d21-4548-83e9-3df4f7d05cfd'\n'05b16864-bfd7-410e-a82f-c726609d0976'\n'05b6e9fd-c047-486d-a063-3df46ee9507b'\n'05c08a4a-e688-4b49-97e7-6194f7e0a68a'\n'05c13909-f845-49bb-860c-b03523352a77'\n'05c40154-5e23-4fb2-b48f-1fe5d393527f'\n'05c4a84b-90e5-4e19-9c62-decf47b839f5'\n'05d3382d-7b0e-4d7c-8bbe-17e0329022d7'\n'05d7ea55-ac46-481e-a28a-f73d008fd061'\n'05e15184-37d6-4889-8254-3b0a3a6bbea6'\n'05e706da-f181-48a6-a802-6b997839a3db'\n'05eb1850-9609-4d00-ad31-603ffad3af79'\n'05ef68b8-d89c-406b-be87-4bbac4242b75'\n'05f06090-2b19-48df-aa89-db729161af09'\n'05f12591-24ea-4a3b-8c0d-584803f61c62'\n'05f24aa0-bedd-4d21-a21c-ec2306d8dbc3'\n'05f52020-6bc7-4128-a9b3-1bc5a0631f49'\n'05f7f64a-1a08-4758-bacb-854e72f798f7'\n'05fcf6ec-bd96-4c5b-99f9-94561933241b'\n'0606d5db-153d-4fc5-bb55-a3fe512fa8d4'\n'0607cd43-6cb9-40e0-bab2-4c5a4bfcd4f9'\n'060b0040-d2dc-49f5-91ae-e24bdd0ef807'\n'060e6959-0f31-4da9-a31a-e09ba3cb8066'\n'060e9025-f833-4b7f-8a66-4b1a7e28d405'\n'0610668b-2864-464c-ab8c-ff40b9fb747c'\n'06121571-8dbd-4fac-a0d6-aa5d3ad12359'\n'0619dde5-26e7-4e0d-838f-91c564614a68'\n'061a84b2-b182-45db-8895-b4990b610849'\n'061b6cef-221c-4265-8963-a1929db71f96'\n'061e727a-4153-4577-b716-6ff5d8ea8d75'\n'061fdf10-ac0b-480e-a694-08c7a80e1c06'\n'0624ef1b-5ebe-47c3-ac83-9fc757f6d5e9'\n'06258474-812f-4912-9fb3-e518f43a5fbb'\n'062844c5-d8c4-49c5-a714-d8ec4b512154'\n'06292529-e9de-4238-87b5-2c65163a7d5b'\n'06294a62-d805-4e35-bb23-d55e3c0ca591'\n'062a4e6e-9073-47d3-8531-c66022f275b2'\n'062eb932-aa92-413f-afff-0c716faf9311'\n'0630090d-453d-4d3b-9c95-0eb05c36cd5d'\n'0631580f-5b43-43f7-9700-7da9309bf620'\n'0637f796-99e3-4f1a-9710-36ef0ce4cb79'\n'063c8f4b-ab52-4a55-b155-1fc02d8da547'\n'06417242-4d8c-407e-a7e4-efb84e5709c4'\n'0647b5c6-7839-425b-96b1-330d6722f043'\n'0647e67f-75b0-48f2-896e-592c2e776818'\n'0649a071-216d-4e32-9746-8c5fb4781611'\n'06531465-cca6-4076-99ee-96bb48b0a577'\n'0656eebb-487a-4ec9-9334-f6e14fa4bc15'\n'0659fd60-d26f-4a69-8ab6-c04b6f03dc35'\n'065babcb-76b1-412d-8e47-b1adcabbdc70'\n'06622f4d-c964-4762-a72d-a773037f0af6'\n'06711527-3e20-4c94-bf71-0ea9b61fad0b'\n'0673b6ef-454f-4b2a-a754-fbb63df39e3c'\n'06783937-fe9c-4a22-97da-3790805f44d0'\n'067bb9b0-0758-4e7d-bde8-78bd17397c31'\n'06856366-6527-4209-935e-0a62ec66609a'\n'068d151f-2874-4fee-8a27-9abfe76aaff7'\n'069519cd-3f7c-4c90-8850-8d35439974b7'\n'0697b5d1-0b52-40b2-bd0d-233b4765fc9b'\n'06a556ab-afde-4404-95a4-cbdb0aceaf14'\n'06a7deb8-7963-4485-b509-dae0ebaaeca6'\n'06b30374-410c-4f4d-8ea2-4fcf9bcf0c56'\n'06b50e90-1529-40ce-9355-d78d05c729c8'\n'06b8ddce-08a4-4e6d-8745-48710adb9de7'\n'06bb5b73-80d7-4a7e-838b-2e27f90dea48'\n'06c1ba39-94b3-4ba1-8d4b-0589580f01cb'\n'06c2922b-0ca6-45ec-b245-fc2337e0f5fe'\n'06c2b4c3-1d30-45a4-bebd-779f2484422c'\n'06c2e43a-3a6b-49b5-868d-da4db1abd78a'\n'06c89620-9510-4b90-b60c-a871b2a80ad0'\n'06cb985f-95e5-4f2e-9fc6-4ad813d68775'\n'06d878e8-a2fa-455a-983d-8bef859838fe'\n'06d893ad-4d5b-43bd-832e-392d886e7a35'\n'06da70a3-4d77-4c62-b0a2-5d5fa11b9233'\n'06db6a18-15e1-474f-b6c8-d2d35d843ae2'\n'06e0e263-8f5c-4a66-8d49-70e62e235c5f'\n'06e3a3f8-77e4-4518-af3b-e9e0083eafc8'\n'06e706ff-e987-45a1-be71-31b45af463b0'\n'06ead6f0-036e-4a03-821c-60a8bc238c5b'\n'06f5be0d-81f6-4c93-9c6d-7a8b627e05b1'\n'06f8336c-37ac-4c3c-b927-a8579c44925c'\n'06fb42b1-60e6-45b3-bdb2-8589390ecb62'\n'0703c155-be7f-46b5-89e8-25d65f8deff8'\n'070428e9-16e6-4692-afc7-389c32f0b436'\n'071391c8-16fc-4a7b-97d5-949d1848d313'\n'0713d324-c3bb-48b7-809c-74dd6ab523f6'\n'07170ea4-3087-430f-ac31-40335767b6a9'\n'071ac298-7ea7-4abd-8b53-d0e2c32cce1a'\n'071dc22a-2346-43af-8ab5-db3a5bb105e0'\n'072003c7-3b01-4b0f-b556-6b763e9e4b19'\n'07226700-537c-430e-adfb-85a9b8dbfb6d'\n'072699ac-c568-411f-a6af-ab964803ab31'\n'0729c938-0b71-46b9-8d8a-2f863516bfe0'\n'072a4849-7825-41fb-855f-61a8e4bab1cb'\n'072e2b2d-04c1-4259-b876-295575726506'\n'072f287c-fa0a-48f6-a9a9-71c5d06dd7df'\n'0735031b-b1cd-40a0-90e4-3a867f4bd9a9'\n'073bc20c-6948-4d07-b53f-734b071e27f8'\n'073f5e65-cc6e-4ee6-aca0-3bb465292275'\n'073f7631-d19b-40ed-8be9-4efdc7aa5adf'\n'073fe400-bdd4-4717-9cb0-9062f7f8c000'\n'0742ebc5-14c9-47c8-9715-0773c3ed5818'\n'074484c3-2fcd-4750-825e-89d388744665'\n'07462578-d456-4906-9560-c88a4cb07b75'\n'0749e15a-30e0-4469-bd4b-67eb1062a572'\n'074de542-e0d6-4f29-a6f2-6ee8ae487c97'\n'07509d76-428e-4dc1-84b2-3299c7bf7540'\n'0757f1e4-fd8e-4de3-8f65-7cb11973b6fe'\n'075da5e8-3295-4ec9-8932-0a4e46b1babf'\n'075f12ed-aef6-4187-80da-7afd47b182d7'\n'076369ea-11b8-468f-ade6-9d57ea3f3bae'\n'0764fb45-5f94-4242-acdb-a66603d583f1'\n'0767045b-dcd5-4bc4-8961-73c8142b9a8d'\n'07691043-4534-4b6d-a0fb-a6fee590f217'\n'076c422f-f9dd-4359-bd45-0efb8212007b'\n'07722c60-7f43-4ac7-a9d8-df09d1dc5c69'\n'07758724-4cb0-4a80-ac0f-982d96f89f3d'\n'077b74fc-2698-4e85-99bb-b10f36ae79b0'\n'077d90f3-090d-4349-83b9-4af91001c57f'\n'078153e9-7f9a-49aa-a3d7-b384700a2d38'\n'0786e0dd-b201-4ad5-840f-122aabe3fe7c'\n'0787d099-8c6f-4be5-b4b0-2062c3134007'\n'078a1635-2a9d-47c0-a5d4-1b902e96c268'\n'078f28fc-e284-4b46-8a4c-5ec6c33bf99e'\n'07933b53-0650-4fa4-8148-24dd17df5519'\n'0793c962-058c-495d-aad1-8be7d8184639'\n'0798f2fe-f83c-40bd-8f6e-86fe7f71a124'\n'07999831-b2c6-4b3a-83e6-4d974a78a8ed'\n'079ac67e-70ab-4b0c-b16f-d5ed823189e8'\n'079c1682-17ee-4335-a456-496a29b698fb'\n'079c19fb-0a16-4b56-997c-ddc359682df1'\n'079c5b54-4b19-4ab2-bbd3-695eb64e4ebf'\n'079f1f78-24a0-4cb4-9061-e9ecf47779e3'\n'07a2154f-bbeb-4ebb-b9cc-965f9308158a'\n'07a5603f-18fd-4ab6-b485-ac9b32df6619'\n'07a8895b-5ff7-4c30-8c9f-8a55e00f5574'\n'07aa8545-fb26-4377-b95b-7680c220790e'\n'07aac397-831e-4f2f-93f6-8db3b7908c05'\n'07aafd03-974e-47fd-ac1f-90750dad086c'\n'07b677c1-f44a-4c20-bcaa-56fd98f1244d'\n'07bbabba-14d5-44d8-b125-fa71579c51ac'\n'07c7c366-cffb-4093-b100-42c18a4d3702'\n'07cdbf98-18f5-4789-a781-2b0cf33f07c4'\n'07cdc659-00c9-406d-83e0-46b452516699'\n'07ce2ac4-de86-4311-bcc3-9051890d17b7'\n'07d783c3-a709-4609-8adc-1c73f4952e97'\n'07e5906c-bd77-4f35-9b84-fba77606ca03'\n'07e6a197-04df-4025-8800-6ec7c27957fb'\n'07e7755f-8b70-4a02-a3ef-8c5566aab322'\n'07ebec08-d2aa-4d3a-961f-f4cd6cdcf807'\n'07fa7b95-9669-46b5-881f-1a93a57903db'\n'08087a07-1e9e-4525-bf28-8bf667734bf6'\n'0809bc30-ed57-4a04-872c-d155a03814b9'\n'08127b3e-597c-4eaf-a3c4-0eb3a068611b'\n'08141bed-28f9-452f-8161-3b5214f2ddda'\n'08145672-da29-441f-844a-dd4a9c6d43ee'\n'0816b6fc-5c35-418e-b4a8-1ba56bc9410c'\n'0819f584-b809-421c-a925-81422b5e9a4d'\n'081a478f-21ef-4561-87f1-4530b0a21c86'\n'08210676-3307-4a37-bf98-4afa28a9e212'\n'082403cb-a0d6-488a-bfaa-d4a4a8687c96'\n'08248582-b69e-4535-8c37-5ae97170dd8a'\n'082584f1-d847-40f9-9074-05926b4a53a9'\n'0828dae4-7d78-47e9-8af6-0fa6a3c854c3'\n'082e3de7-e434-44db-b2d4-05512fb9dec0'\n'082ee61d-8991-4d2e-ba73-9df0297aff89'\n'082f3b2c-c325-4f5a-ae7e-11e45044c8d7'\n'08324262-d435-467f-a07a-e289d48a4468'\n'083b3001-2b7d-42e6-acf7-5183fb1b6f7c'\n'083df5f7-5363-40da-82da-3f5c88b867e4'\n'084056b9-8b02-4cc5-9c7d-d6407b5de6cc'\n'084108ae-f947-45d7-8010-fce9dc20a051'\n'0841fff6-e3c1-4401-a83a-7258bb4911cd'\n'08473df4-b345-409d-90ff-09bb319f9a73'\n'084850af-4730-4001-8a63-4083ee2687b7'\n'084929f7-cb2e-48a2-b664-f95d6553585b'\n'08494e9a-dfb2-4a51-9ed8-caa6c3763241'\n'084e60b2-5a74-49ba-beaf-0cf7bb5b9d07'\n'0856e80a-910b-40cd-b044-1c3eb6fd8bee'\n'087444c6-44c3-42d8-aec9-e0f28d92fb8a'\n'087d8502-ef25-4e91-ad21-14c392ee36b0'\n'087e55f5-c526-4a03-8baf-60400a997012'\n'0880513a-fd6d-4da0-bb30-df7dfeb6aaf2'\n'088aa34a-51c9-4aee-abf8-f52f11dbc1f3'\n'088d2941-d99f-430f-9024-f6dfc63f7024'\n'089383d4-c9ac-45fd-bb48-4b1a78cf5fe0'\n'08938e3d-abe2-41b2-9546-f56a4f0b64f8'\n'08939b58-35b3-4ff1-aa95-0b0efccb6263'\n'0894f954-9a39-452b-8612-80c5b0567b4a'\n'08988ab6-3250-46f5-812c-e6669f35d51f'\n'089a2c59-c054-4a31-a65c-375eabea6f29'\n'089b20a1-42b0-491e-88dc-32777fb65aa6'\n'089bdc1b-06cc-40da-bcbc-b9563eaae8d1'\n'089c615e-1cd7-4ebe-bb6b-46850da920ab'\n'089d27dc-ccd7-472e-a9c5-062c562ea228'\n'089e4b87-ef4b-4513-bf59-e1f4a683cf11'\n'08a279fb-a152-4b21-a4e2-ad8da52604bb'\n'08ab14f8-206f-41ba-9a8f-b92c811e3056'\n'08ac353d-7352-4ec7-9d1f-11e34acc6842'\n'08ac50c1-1c7e-4ebc-b465-bb53f7c83025'\n'08ace000-824f-4db1-a997-171433ef9ad5'\n'08ad5fdb-3a25-4b22-bf3f-1dcb6b75f835'\n'08b0596a-93db-40bc-a6c2-9e7b51b5e527'\n'08b16a7e-3bae-4e98-a901-bc180e0b60c2'\n'08b1c721-34c0-46f8-95b0-ad3c7f883bf1'\n'08bf182f-7d9a-4481-bb9b-1e4a9bb50e6d'\n'08c01515-4ccd-4fcd-af36-9d41fb2379b9'\n'08c0f94e-f0a3-458f-84d1-d840e02b85e8'\n'08c763ad-c866-42f7-931f-51547a983e4c'\n'08c8235d-7721-497c-9a37-f37b0f9be896'\n'08c99bf5-d19f-439f-b2a5-15da9ce9869a'\n'08cb8942-f302-49b7-842f-7ad8b9a90250'\n'08cc2379-8419-473e-99bb-ce0904cfb52c'\n'08cc8725-592e-45be-9e84-6eac7dfa2fbe'\n'08ce26f8-8e0a-4eee-b5f8-8f294cef795a'\n'08d12e8b-797c-484b-9ba8-4ed86c09beaa'\n'08d44c40-6d27-4dc3-9749-c539172bd941'\n'08d4d7db-f6b5-4e60-a480-d0017ecf2593'\n'08d6915b-b7a7-4dd0-bbd6-ed7855f24a52'\n'08e0271f-adbe-4da7-96ec-0256e8e80276'\n'08e24232-8ea1-46a4-8f0d-1ecc2a35c02a'\n'08e9e967-b8cc-488f-b93f-7b6dc245af59'\n'08ea38e3-0a75-401a-9dd1-9277631f54f1'\n'08eacab7-d826-48eb-8f8f-a8c6c12fe536'\n'08eb335b-7337-4b04-b4e1-88022109b574'\n'08f21271-1723-4175-82c0-b7b00f8d085d'\n'08f9adeb-ae0e-4e55-bee1-b2ad4f904406'\n'08fc8ccc-59e8-40ea-81c8-6b55e399d5c9'\n'08fcd0b7-cb9f-45cc-b9a7-2a51dd938622'\n'08fcf88a-3a7f-4e26-9532-6b0a7103d56f'\n'08fd1f60-e3e3-4e3e-be03-b7d9678b9019'\n'09011acc-a2a7-4278-b7b2-fc2cd38a6e78'\n'090184fb-b9a8-4ca4-99a5-fb09e9820d0c'\n'0901adea-1382-4cb3-abb4-e567a8ce4f1f'\n'090395c5-ebbf-45c6-935c-f1de235268c5'\n'09055f88-9de4-4f39-948c-3261f640216c'\n'090ca42c-7fac-4e64-bb68-fc7c6893d51c'\n'09146419-d10b-4554-b16a-86a40cbc9703'\n'09186a82-8079-4844-89fc-a3b66d19e34f'\n'091c3701-c3c2-4e57-93c3-11924b030d83'\n'092402fe-be4b-4f1a-8b8b-6ddd72822b0b'\n'0927d441-7504-4fe1-a99d-7bfc545115d5'\n'092a00fd-2d8d-4ff5-aae9-bddc2962f417'\n'092a9ae7-c487-4d28-ad3b-dde5fed558b5'\n'092bb67d-0800-4bd8-912a-c1f6822a1cdc'\n'092c188a-9f74-4ec7-8e7d-9828748f548f'\n'09305d9d-4c67-42a9-84ab-d92d0acc460c'\n'0932b151-c50c-4d4f-bfa8-a1668858b493'\n'0933290f-fb56-4e36-9384-6669a23fd0e4'\n'0933df91-eb94-4d28-a96a-15627bcc6fca'\n'093b489a-ff9b-4ac4-82d9-194e15b7911e'\n'093dd684-00ac-4795-8ec8-73ad84a46aa5'\n'093ff7c2-7e69-4d0f-9364-711d16ae9968'\n'09403287-5645-4770-9805-7411e23512f0'\n'0942b307-e88e-4ac4-a5cb-f49143a0ffe7'\n'0945c272-5cbf-4cf1-b425-0f990a791d1f'\n'09485ab7-5d8d-4620-b1d1-95b4bc2a7272'\n'094e2741-5b83-4f65-a4c1-bddb9193af47'\n'09519964-8bba-40f9-9607-5d0964c13907'\n'0954b9fa-bbc4-4799-a2c8-8c9b89e17450'\n'095c4d81-e97d-4801-9cfe-02a04e479366'\n'095c7b2a-f9c8-46dc-9566-5e393c5f7381'\n'0960af5e-baa8-4e91-a71b-c7aa6a5b17cf'\n'096441bf-ad39-4d97-a7d0-e114b304a72f'\n'096a9be7-7935-4ee8-b1c6-7ed07a8eabd8'\n'09703185-8e97-4c42-b06f-766a2bc0cac6'\n'0971ec17-f13d-4ff9-832d-cc757912ef05'\n'0976fc6b-bec4-44ec-934b-e8e5176f6b45'\n'097a8c90-3c6c-4403-8404-5c17ed759c1d'\n'097d56f6-1d1a-4b85-b62c-00733f616d44'\n'097fb3ae-6ae9-4cf7-a8f5-dee925e9d241'\n'0983550f-f704-445a-97a3-0782306b8278'\n'09855ad7-42b0-47d0-8faf-28a6871fddfb'\n'09867bd8-938d-48d8-a76b-c3c3158de00c'\n'09930dff-cd04-4b8c-a824-9a3007b02d92'\n'0995cde5-b037-4990-88fc-a9fd7571ac70'\n'09a1665e-c178-4a21-bd17-74894930fa06'\n'09ab4d70-e430-42c7-a7b2-23b231f7ecd5'\n'09abe368-c10f-4728-9908-051a01950307'\n'09ad2e08-b19b-4f89-9263-6616ca4b0f8f'\n'09ad5195-d6a8-4fde-b335-bff329a40bac'\n'09ada9e8-207d-44a6-812d-c4561051c6b3'\n'09b2e777-0c08-416c-96be-fa16da257c3b'\n'09b4c2ea-95da-4eea-bde4-d6d3108d60b6'\n'09b91bab-eece-47fc-b780-88db978b51f3'\n'09ba8a30-0cda-4011-bd13-ba15408fde5e'\n'09bc9ca5-a09a-45e0-82da-b235d4bda556'\n'09bdffc8-87f8-4fc0-8a03-b756f6dee4ed'\n'09be9d4a-85c4-4f1f-b886-c0ca8b9f586f'\n'09beafa0-ba2f-41d1-8b28-149340febcef'\n'09c16013-fd3b-4ffc-aa8a-02a9652fa6fd'\n'09c1e831-4eb1-4c47-ace3-bfaa49b79e6f'\n'09c31481-cf94-4425-a14d-b7d62e6a4fbf'\n'09c80421-94b1-449b-87c0-4945ad3d6949'\n'09c91ccc-9fb8-4c99-a082-8eb57a03c45a'\n'09ca3a44-df5d-4dd7-a166-ce7c208401ea'\n'09d5ce40-915e-45c0-ac16-36ff85d36d66'\n'09d72022-06ff-4240-8098-f37ba89b3886'\n'09d8b7f9-703a-44ad-9526-4e464196151a'\n'09dab5c1-753a-4659-a8fd-0064c26e605e'\n'09dca6c3-9802-46e1-9a85-0ea7c9477724'\n'09dce528-e031-4bdd-87d2-30d2bceb406e'\n'09e62f58-0d1c-40e6-bf1f-1ee4ca776449'\n'09eab4a5-f1d7-40ca-9454-09c52870cfc7'\n'09ec214e-a496-43bc-b04a-6d75f30acb63'\n'09f16588-95e9-4c52-9898-31e41aa2186c'\n'09f6e4cc-ca73-4485-bfff-395c0196bbb4'\n'0a05eb6e-a58c-411b-a61a-a858cb7442a9'\n'0a067213-9188-490f-9c83-f01207d95192'\n'0a072567-e7b8-47ba-bca9-724432135e06'\n'0a08dc99-865b-449b-8ef0-a91d38e13c3e'\n'0a094e90-f55c-4c19-afdd-1cb5b0fc4af6'\n'0a0a4dc6-87be-4ac6-b540-28d76b64cd6f'\n'0a10216c-bd42-43b1-982d-0b33163e7249'\n'0a18246d-5b64-4e0e-9ff7-d98634342a50'\n'0a1856f6-7647-4f1b-bf65-5fe31e2ed204'\n'0a1b1a24-2f4a-4e3f-8359-aadc472e0b46'\n'0a2550e3-e265-4b41-81ab-1865cbbf5785'\n'0a2a5e48-003f-4f22-9429-b5ee939a5018'\n'0a2bb9ac-da2e-4e2e-81d3-4a1cd14f2002'\n'0a32ce55-53a8-4d90-8127-0952abf3149e'\n'0a33f0e6-5172-4907-bca8-cbb36caf8605'\n'0a34ef8d-056e-4270-9c8c-e09ff37a8957'\n'0a36cd8c-2a9c-4323-a98f-c12913e15886'\n'0a3d6e45-0e43-4419-89d3-39eb44e194d4'\n'0a4349f7-6774-43e7-88bc-15699604f9c5'\n'0a4a3b83-0d02-45a4-8285-03662fad1dec'\n'0a4e3e85-b393-4d38-a2da-3c3e34612fab'\n'0a51a141-5489-4631-9cd7-e942b7d0994e'\n'0a5484c8-fa95-4d26-8fa9-1f7783f4cb7f'\n'0a56003f-4918-4997-b049-5d0d8ebfd07d'\n'0a573dc7-b2b5-4bdd-ac1f-22b8827ad338'\n'0a5ab354-424d-4181-be64-31ad4ae57897'\n'0a5d9163-a21b-406f-84e7-5d2e4ecc7752'\n'0a6340fb-c62f-4750-a634-b133f38cd939'\n'0a64800e-fbe2-44f7-87cf-c141ede2433a'\n'0a699920-31bf-4800-9e29-614bb5239349'\n'0a7006c0-b3b2-47e1-830e-7da7f86e5c27'\n'0a746509-b6cc-4d07-a26d-a23183c895e4'\n'0a814153-e468-46ab-827c-d436ec52dc12'\n'0a8da620-73f0-4e7a-ab47-27da867c3116'\n'0a92bf1a-b52d-4fda-a0b9-99cb3eeb6e44'\n'0a93fc48-683b-4173-a57a-b3bc169f1fa1'\n'0a94cd29-78f1-4d5d-88e0-e7cc62b3e3c3'\n'0a973cbc-59e7-4d30-adb7-d20f2bbba6f4'\n'0a980b2b-a214-4b29-87e3-0e710c2d5eda'\n'0a9d50c0-a9b8-4a22-b518-547216fd8f56'\n'0aa5b39b-c79e-4538-adb3-1594e11bc90d'\n'0aa7e0f6-1163-44a4-abe8-db8e4317766a'\n'0aaa98ac-70ec-4323-b718-b78fd64b0af5'\n'0aab26ad-bbc5-4ecd-a155-b81ddc068df2'\n'0aac46d8-09f7-4710-9481-098cfd1abac9'\n'0aac8dd3-6976-405e-aa00-57bd7362ef9c'\n'0ab2da2a-b31a-4b74-bca6-f6de9fb23e8c'\n'0ab804f3-22bd-4246-8b7b-c7a2af143bda'\n'0aba7490-72c1-43ff-b26f-925065d4be26'\n'0abe09c3-a34f-4164-b72f-2be9c390d05d'\n'0ac36691-19eb-4609-9cbf-79ff79626ea9'\n'0ac57d9d-1b4d-4350-a930-c532ff4789e8'\n'0ac8834f-a98c-4f36-ba02-39478bc0e0d9'\n'0acde152-0d59-4e8f-ba31-159259b37454'\n'0ace6fca-46e7-4858-bffc-5c0d0d21a85d'\n'0acedd67-5334-4cf0-9327-fd737c2c55a1'\n'0adbd1c4-dc8d-40fd-bea1-842fba2b8167'\n'0add508b-fd20-4bba-ae04-7354ad59256b'\n'0ae0166e-2951-42c9-bbd6-f4a4b45864d7'\n'0ae2f14f-9559-412b-b6c9-3c43e28b2f48'\n'0aea9bdc-0d69-42cd-afc5-cffb6662e80d'\n'0aeae4c1-337e-4476-9d8c-073955d45887'\n'0af67fd5-8561-4875-8be5-64dfd32cbcef'\n'0afcc042-f120-4d7b-b7a4-5afc4b5970a6'\n'0afebe6b-b16f-4a1b-9e4c-92ac1a9c35e4'\n'0b06ecff-6715-4ade-afe3-9dc5c2d05149'\n'0b095026-e914-43bc-84db-ef96433e3852'\n'0b0dda5d-e350-4e49-8ecc-d5f8d084bcc2'\n'0b164252-e501-4a9e-84ea-30f86fa66eec'\n'0b1ac29c-a06c-4418-98f4-44a5dfced85a'\n'0b1cc888-4f7a-4a9a-9bd6-1403d81d81d4'\n'0b1ce129-e769-4711-a46d-8d3d61556443'\n'0b1fba9e-7ddf-4698-8dbe-914fcd64a12d'\n'0b266e44-cf7e-4a22-b9f4-90df9d29df8d'\n'0b26dc64-00e5-4bd6-89bc-064a4dadaad7'\n'0b26e882-5cc0-43b7-aff2-34bd28efd1a9'\n'0b27fc0b-3846-4b00-99b3-21e433fd4adc'\n'0b2ed16f-d41d-41b4-bf39-2d5cb227e716'\n'0b395470-0ae0-4b68-8c01-e84739d91527'\n'0b3a3cba-2ef6-4523-8839-1614ee01b8f5'\n'0b3b4670-fa97-4294-9f10-d6fcc720e9c2'\n'0b3bc475-7d9f-4b06-9096-25213b3f4313'\n'0b3df019-6452-4544-bc30-c26246bf1166'\n'0b3e3768-32e3-4d14-9bbd-8ad950e09fff'\n'0b3f6112-4d18-4970-b348-dc18af76ecf8'\n'0b3ff718-f3cb-4d84-acc5-07016f1876ea'\n'0b435bb1-2afd-4b40-8c00-40f2bf91c7d0'\n'0b456996-d7d4-4d1f-9071-62a6a1a493fd'\n'0b4b4434-98b8-4b28-8915-0d4b844c38f1'\n'0b4d8edf-a4e4-4593-986a-807a8b87ca81'\n'0b4e84f6-bdc3-4b43-9011-444ee2f30cec'\n'0b5341fe-6f3f-40bc-9f31-bef1f95ebc28'\n'0b5834eb-ab94-4a52-9c75-2ee220043f90'\n'0b5b6ad9-84f3-4eab-a305-6a0230814e2a'\n'0b5c44f4-1556-4228-b248-685062c1f9a0'\n'0b5e4f08-a325-4290-86cc-08c477c22226'\n'0b61a853-905d-4227-8ad4-562c64ebbe80'\n'0b61f9a0-1030-4fe5-aee8-b8f9d2d38c4f'\n'0b636879-562a-464c-8048-65c061077faa'\n'0b6d40ab-d4b6-4698-a377-310f202f4685'\n'0b7ace45-1d8c-48fa-94bc-390c575a0a3b'\n'0b7e4306-bfac-4544-bd53-8b0836d153ed'\n'0b8849e7-2b18-4151-a36f-b792c1b82aff'\n'0b88aead-f338-4079-8173-d76fa5e918df'\n'0b8aad72-3b27-4581-835d-6428196876c4'\n'0b8c7466-bdb8-4919-8a8c-60c0b86ff71c'\n'0b8f6567-2c62-45bb-ac34-02c0df726b27'\n'0b948b2d-e413-4771-98ff-8c3591434a6d'\n'0b9a803b-9c2f-46e1-8a26-def44d2c758e'\n'0bac901f-52ca-4567-ad42-ba62610feca8'\n'0bad2aca-15f3-4cbc-aecb-521a1461f87b'\n'0bb36e89-ae7c-4c44-8f1e-096e1e12b677'\n'0bb6fcca-e208-4125-bbf4-f747c1a12210'\n'0bbae0c8-16ae-4b7a-8ec8-40ae8f0114bf'\n'0bbba4c9-0595-4057-ae6a-f9b17ae5714e'\n'0bbfa881-c7b3-4481-8ea4-a8ee5da4200e'\n'0bc98401-36c9-4368-a4b3-d7041057a62e'\n'0bd7a121-e468-45b8-b73f-743ed2cf083c'\n'0bd7a86b-ea6f-4089-966b-cf0a9116dbb1'\n'0bd7ff80-7284-41e3-a939-d15eab9bf5e0'\n'0bd8fc15-1c36-4944-b2e4-908fc0ced331'\n'0bd950b1-cc77-49a5-b52e-5911cc794553'\n'0bdc01b3-370c-4d72-a2f4-3163e39d46a4'\n'0be43379-b1f5-4877-96e0-53dbcef32bd6'\n'0be585c8-cfce-4e41-aa8a-a848fd4c3dbc'\n'0bed86ad-9ed8-40e4-af84-cf5526a6b552'\n'0bee7446-2a8c-445f-9c6a-c7e960377574'\n'0bf6de37-9871-437f-94c2-20efd8fd390e'\n'0bfa46ef-b0bf-4831-9d1a-e7eacb105701'\n'0bfb33b2-c061-47ba-ab81-c381ce139e92'\n'0bfc308f-3fef-4aa9-b821-932fa1742245'\n'0bfcaf8c-d884-4aa0-92cb-b61b53c46fd7'\n'0c023d20-c0bd-4abd-9321-de2fb81d45ba'\n'0c06d2de-f108-4014-a04e-01e8e3b0adee'\n'0c091211-9a45-4698-9876-109eb4daddbf'\n'0c0a65e9-ca16-43c3-b2db-2881b5915a7d'\n",
  "history_begin_time" : 1648692040248,
  "history_end_time" : 1648692115656,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "A99hx3gXitg5",
  "history_input" : "\n\n# reminder that if you are installing libraries in a Google Colab instance you will be prompted to restart your kernal\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\n\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\nstart_date = test_start_date\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      \n  \t  print(e)\n  \t  pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "Running",
  "history_begin_time" : 1648691224390,
  "history_end_time" : 1648692012232,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "42uz6WOET9JV",
  "history_input" : "\n\n# reminder that if you are installing libraries in a Google Colab instance you will be prompted to restart your kernal\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\n\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\nstart_date = test_start_date\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\nprint(\"start to traverse the cells in submission_format_eval.csv..\")\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      \n  \t  print(e)\n  \t  pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\nprint(f\"All points have been saved to {final_csv_file}\")\n\n\n",
  "history_output" : "Running",
  "history_begin_time" : 1648690802400,
  "history_end_time" : 1648691214952,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "sAUn8jftLsmX",
  "history_input" : "\n\n# reminder that if you are installing libraries in a Google Colab instance you will be prompted to restart your kernal\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\n\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format_eval.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\nstart_date = test_start_date\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      \n  \t  print(e)\n  \t  pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\n\n",
  "history_output" : "Running",
  "history_begin_time" : 1648690390261,
  "history_end_time" : 1648690424771,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "pRRWAAmC8SC5",
  "history_input" : "\n\n# reminder that if you are installing libraries in a Google Colab instance you will be prompted to restart your kernal\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\n\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\nstart_date = test_start_date\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      \n  \t  print(e)\n  \t  pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\n\n",
  "history_output" : "today date = 2022-03-25\n/Users/joe\n",
  "history_begin_time" : 1648187049069,
  "history_end_time" : 1648197231716,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "6TppLdyv4Xmt",
  "history_input" : "\n\n# reminder that if you are installing libraries in a Google Colab instance you will be prompted to restart your kernal\n\nfrom all_dependencies import *\nfrom datetime import date\nfrom snowcast_utils import *\n\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\nstart_date = test_start_date\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nstation_cell_mapper_df = pd.read_csv(station_cell_mapper_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      \n  \t  print(e)\n  \t  pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\n\n",
  "history_output" : "today date = 2022-03-25\n/Users/joe\nResults will be saved to /Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-25.csv\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/6TppLdyv4Xmt/data_gee_modis_real_time.py\", line 41, in <module>\n    station_cell_mapper_df = pd.read_csv(station_cell_mapper_file)\nNameError: name 'station_cell_mapper_file' is not defined\n",
  "history_begin_time" : 1648187030975,
  "history_end_time" : 1648187034080,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "w3sGPGIMCJOn",
  "history_input" : "\n\n# reminder that if you are installing libraries in a Google Colab instance you will be prompted to restart your kernal\n\nfrom all_dependencies import *\nfrom datetime import date\n\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nsubmission_format_file = f\"{github_dir}/data/snowcast_provided/submission_format.csv\"\nsubmission_format_df = pd.read_csv(submission_format_file, header=0, index_col=0)\n\nall_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\nall_cell_coords_df = pd.read_csv(all_cell_coords_file, header=0, index_col=0)\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\nstart_date = test_start_date\nend_date = test_end_date\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n    #print(\"exists exiting..\")\n    #exit()\n    os.remove(final_csv_file)\n\nstation_cell_mapper_df = pd.read_csv(station_cell_mapper_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\n\nfor current_cell_id in submission_format_df.index:\n    \n    try:\n      \n  \t  longitude = all_cell_coords_df['lon'][current_cell_id]\n  \t  latitude = all_cell_coords_df['lat'][current_cell_id]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      \n  \t  print(e)\n  \t  pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\n\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/Users/joe/gw-workspace/w3sGPGIMCJOn/data_gee_modis_real_time.py\", line 29, in <module>\n    start_date = test_start_date\nNameError: name 'test_start_date' is not defined\n",
  "history_begin_time" : 1648187007590,
  "history_end_time" : 1648187010934,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "bQa4z9ez6veN",
  "history_input" : "\n\n# reminder that if you are installing libraries in a Google Colab instance you will be prompted to restart your kernal\n\nfrom all_dependencies import *\nfrom datetime import date\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"d1 =\", d1)\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nstation_cell_mapper_file = f\"{github_dir}/data/ready_for_training/station_cell_mapping.csv\"\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\nstart_date = '2022-01-01'\nend_date = d1\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n     print(\"exists exiting..\")\n     exit()\n\nstation_cell_mapper_df = pd.read_csv(station_cell_mapper_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\n\nfor ind in station_cell_mapper_df.index:\n    \n    try:\n      \n  \t  print(station_cell_mapper_df['station_id'][ind], station_cell_mapper_df['cell_id'][ind])\n  \t  current_cell_id = station_cell_mapper_df['cell_id'][ind]\n  \t  print(\"collecting \", current_cell_id)\n\n  \t  longitude = station_cell_mapper_df['lon'][ind]\n  \t  latitude = station_cell_mapper_df['lat'][ind]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      \n  \t  print(e)\n  \t  pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\n\n",
  "history_output" : "d1 = 2022-03-20\nResults will be saved to /Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-20.csv\nCDEC:ADM 76b55900-eb3d-4d25-a538-f74302ffe72d\ncollecting  76b55900-eb3d-4d25-a538-f74302ffe72d\nCDEC:AGP f191fe19-0e81-4bc9-9980-29738a05a49b\ncollecting  f191fe19-0e81-4bc9-9980-29738a05a49b\nCDEC:ALP f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nCDEC:BCB 0a54de9c-d804-4681-9f7f-9f770a0f6d2e\ncollecting  0a54de9c-d804-4681-9f7f-9f770a0f6d2e\nCDEC:BCH 4f383fb2-6cc7-48a8-9bdb-9c5d150e6eae\ncollecting  4f383fb2-6cc7-48a8-9bdb-9c5d150e6eae\nCDEC:BFL 7cf8af73-1abf-40ad-9788-0d757201eeb0\ncollecting  7cf8af73-1abf-40ad-9788-0d757201eeb0\nCDEC:BGP 30641173-db10-4320-ab1e-c46e765a9011\ncollecting  30641173-db10-4320-ab1e-c46e765a9011\nCDEC:BIM 30ab5128-9a8f-4446-b781-faf8bafb677f\ncollecting  30ab5128-9a8f-4446-b781-faf8bafb677f\nCDEC:BKL df01bf44-46b8-4541-b0a4-ed1fae16ac38\ncollecting  df01bf44-46b8-4541-b0a4-ed1fae16ac38\nCDEC:BLA 6dd37e24-0a9c-4749-8ab6-7e26d42925d6\ncollecting  6dd37e24-0a9c-4749-8ab6-7e26d42925d6\nCDEC:BLC 018cf1a1-f945-4097-9c47-0c4690538bb5\ncollecting  018cf1a1-f945-4097-9c47-0c4690538bb5\nCDEC:BLD 962f6718-ce02-4d13-b28c-e159d1adc2d4\ncollecting  962f6718-ce02-4d13-b28c-e159d1adc2d4\nCDEC:BLK c89dc6ca-6d69-41ce-954d-b51f64aaacb1\ncollecting  c89dc6ca-6d69-41ce-954d-b51f64aaacb1\nCDEC:BLS 4bb8fe22-653c-4611-a3d8-de5b2c62d13d\ncollecting  4bb8fe22-653c-4611-a3d8-de5b2c62d13d\nCDEC:BMW d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nCDEC:BNK 65565709-caca-4ed5-a8b6-2794da371708\ncollecting  65565709-caca-4ed5-a8b6-2794da371708\nCDEC:BSK c89dc6ca-6d69-41ce-954d-b51f64aaacb1\ncollecting  c89dc6ca-6d69-41ce-954d-b51f64aaacb1\nCDEC:CDP 76b55900-eb3d-4d25-a538-f74302ffe72d\ncollecting  76b55900-eb3d-4d25-a538-f74302ffe72d\nCDEC:CHM f11515e9-f2a0-4f8c-9f2d-12b9e2dc8569\ncollecting  f11515e9-f2a0-4f8c-9f2d-12b9e2dc8569\nCDEC:CHP cc66f524-dd2b-4d3f-bf96-4941edca2879\ncollecting  cc66f524-dd2b-4d3f-bf96-4941edca2879\nCDEC:CRL 09288a61-d120-4cee-ac46-5a275a8f005c\ncollecting  09288a61-d120-4cee-ac46-5a275a8f005c\nCDEC:CSL 51ebe834-adf4-474e-871e-28ebca2bd0cc\ncollecting  51ebe834-adf4-474e-871e-28ebca2bd0cc\nCDEC:CSV 4f383fb2-6cc7-48a8-9bdb-9c5d150e6eae\ncollecting  4f383fb2-6cc7-48a8-9bdb-9c5d150e6eae\nCDEC:CWD 4f383fb2-6cc7-48a8-9bdb-9c5d150e6eae\ncollecting  4f383fb2-6cc7-48a8-9bdb-9c5d150e6eae\nCDEC:CWF 76b55900-eb3d-4d25-a538-f74302ffe72d\ncollecting  76b55900-eb3d-4d25-a538-f74302ffe72d\nCDEC:CXS c89dc6ca-6d69-41ce-954d-b51f64aaacb1\ncollecting  c89dc6ca-6d69-41ce-954d-b51f64aaacb1\nCDEC:DAN 70bfdc00-dbd2-4c44-8039-04a547f91f76\ncollecting  70bfdc00-dbd2-4c44-8039-04a547f91f76\nCDEC:DDM 01be2cc7-ef77-4e4d-80ed-c4f8139162c3\ncollecting  01be2cc7-ef77-4e4d-80ed-c4f8139162c3\nCDEC:DPO 9023330c-2766-4585-b6fe-63593c519e03\ncollecting  9023330c-2766-4585-b6fe-63593c519e03\nCDEC:DSS 76b55900-eb3d-4d25-a538-f74302ffe72d\ncollecting  76b55900-eb3d-4d25-a538-f74302ffe72d\nCDEC:EBB 962f6718-ce02-4d13-b28c-e159d1adc2d4\ncollecting  962f6718-ce02-4d13-b28c-e159d1adc2d4\nCDEC:EP5 f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nCDEC:FDC c89dc6ca-6d69-41ce-954d-b51f64aaacb1\ncollecting  c89dc6ca-6d69-41ce-954d-b51f64aaacb1\nCDEC:FLL d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nCDEC:FRN f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nCDEC:FRW ddc760c7-dc6e-4fd4-ac1a-987ba3f79748\ncollecting  ddc760c7-dc6e-4fd4-ac1a-987ba3f79748\nCDEC:GEM 690ae8d4-c0d0-4dad-a7c4-67f3df07cc78\ncollecting  690ae8d4-c0d0-4dad-a7c4-67f3df07cc78\nCDEC:GIN dbf421d4-0295-4a9f-9e20-88ac299360b1\ncollecting  dbf421d4-0295-4a9f-9e20-88ac299360b1\nCDEC:GKS 51ebe834-adf4-474e-871e-28ebca2bd0cc\ncollecting  51ebe834-adf4-474e-871e-28ebca2bd0cc\nCDEC:GNF 5ec8a57d-8d5f-4331-b1fb-9d766f42991a\ncollecting  5ec8a57d-8d5f-4331-b1fb-9d766f42991a\nCDEC:GNL 403090bc-fc9e-44fb-921b-f7eea63e9740\ncollecting  403090bc-fc9e-44fb-921b-f7eea63e9740\nCDEC:GRM 232ef8b4-938f-42d7-a6e4-647d5280edd2\ncollecting  232ef8b4-938f-42d7-a6e4-647d5280edd2\nCDEC:GRV cc8b7ef5-1c86-4bd2-8cb9-969c7df1884e\ncollecting  cc8b7ef5-1c86-4bd2-8cb9-969c7df1884e\nCDEC:GRZ 018cf1a1-f945-4097-9c47-0c4690538bb5\ncollecting  018cf1a1-f945-4097-9c47-0c4690538bb5\nCDEC:HGM d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nCDEC:HIG 65565709-caca-4ed5-a8b6-2794da371708\ncollecting  65565709-caca-4ed5-a8b6-2794da371708\nCDEC:HMB df01bf44-46b8-4541-b0a4-ed1fae16ac38\ncollecting  df01bf44-46b8-4541-b0a4-ed1fae16ac38\nCDEC:HNT 39dd8dce-b4a1-4db5-bc31-fba72181cf5e\ncollecting  39dd8dce-b4a1-4db5-bc31-fba72181cf5e\nCDEC:HOR d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nCDEC:HRK df01bf44-46b8-4541-b0a4-ed1fae16ac38\ncollecting  df01bf44-46b8-4541-b0a4-ed1fae16ac38\nCDEC:HRS 49b01e43-f719-450f-b7c6-556b08e9ef4d\ncollecting  49b01e43-f719-450f-b7c6-556b08e9ef4d\nCDEC:HVN d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nCDEC:HYS 51ebe834-adf4-474e-871e-28ebca2bd0cc\ncollecting  51ebe834-adf4-474e-871e-28ebca2bd0cc\nCDEC:IDC 018cf1a1-f945-4097-9c47-0c4690538bb5\ncollecting  018cf1a1-f945-4097-9c47-0c4690538bb5\nCDEC:IDP 018cf1a1-f945-4097-9c47-0c4690538bb5\ncollecting  018cf1a1-f945-4097-9c47-0c4690538bb5\nCDEC:INN 018cf1a1-f945-4097-9c47-0c4690538bb5\ncollecting  018cf1a1-f945-4097-9c47-0c4690538bb5\nCDEC:KTL 147d5eb4-e574-47e4-994a-8a2908c06050\ncollecting  147d5eb4-e574-47e4-994a-8a2908c06050\nCDEC:LBD 74f8c8bc-2f60-4232-b447-43459d5d22f0\ncollecting  74f8c8bc-2f60-4232-b447-43459d5d22f0\nCDEC:LLP 6dd37e24-0a9c-4749-8ab6-7e26d42925d6\ncollecting  6dd37e24-0a9c-4749-8ab6-7e26d42925d6\nCDEC:LVM 01be2cc7-ef77-4e4d-80ed-c4f8139162c3\ncollecting  01be2cc7-ef77-4e4d-80ed-c4f8139162c3\nCDEC:LVT 01be2cc7-ef77-4e4d-80ed-c4f8139162c3\ncollecting  01be2cc7-ef77-4e4d-80ed-c4f8139162c3\nCDEC:MDW 018cf1a1-f945-4097-9c47-0c4690538bb5\ncollecting  018cf1a1-f945-4097-9c47-0c4690538bb5\nCDEC:MED 00c4db22-a423-41a4-ada6-a8b1b04153a4\ncollecting  00c4db22-a423-41a4-ada6-a8b1b04153a4\nCDEC:MHP ec0952b6-f119-4f40-bf47-343d71245ddc\ncollecting  ec0952b6-f119-4f40-bf47-343d71245ddc\nCDEC:MNT 74f8c8bc-2f60-4232-b447-43459d5d22f0\ncollecting  74f8c8bc-2f60-4232-b447-43459d5d22f0\nCDEC:MRL d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nCDEC:MSK d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nCDEC:MTM b5c7343d-a4a9-4da9-aee3-36539a545af6\ncollecting  b5c7343d-a4a9-4da9-aee3-36539a545af6\nCDEC:PDS 17da8ab4-6dd8-481e-a025-7574765ef9b1\ncollecting  17da8ab4-6dd8-481e-a025-7574765ef9b1\nCDEC:PET 65565709-caca-4ed5-a8b6-2794da371708\ncollecting  65565709-caca-4ed5-a8b6-2794da371708\nCDEC:PSC 4f383fb2-6cc7-48a8-9bdb-9c5d150e6eae\ncollecting  4f383fb2-6cc7-48a8-9bdb-9c5d150e6eae\nCDEC:PSN 74f8c8bc-2f60-4232-b447-43459d5d22f0\ncollecting  74f8c8bc-2f60-4232-b447-43459d5d22f0\nCDEC:QUA d563ff8c-31c3-44a9-8fd3-2f8bc68b21b4\ncollecting  d563ff8c-31c3-44a9-8fd3-2f8bc68b21b4\nCDEC:RBP 51ebe834-adf4-474e-871e-28ebca2bd0cc\ncollecting  51ebe834-adf4-474e-871e-28ebca2bd0cc\nCDEC:RCC 018cf1a1-f945-4097-9c47-0c4690538bb5\ncollecting  018cf1a1-f945-4097-9c47-0c4690538bb5\nCDEC:RCK cbe04952-a2ae-4525-98c5-a644c9a5ddc5\ncollecting  cbe04952-a2ae-4525-98c5-a644c9a5ddc5\nCDEC:RP2 f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nCDEC:RRM 7cf8af73-1abf-40ad-9788-0d757201eeb0\ncollecting  7cf8af73-1abf-40ad-9788-0d757201eeb0\nCDEC:RTL 147d5eb4-e574-47e4-994a-8a2908c06050\ncollecting  147d5eb4-e574-47e4-994a-8a2908c06050\nCDEC:SCN c89dc6ca-6d69-41ce-954d-b51f64aaacb1\ncollecting  c89dc6ca-6d69-41ce-954d-b51f64aaacb1\nCDEC:SCT 7cf8af73-1abf-40ad-9788-0d757201eeb0\ncollecting  7cf8af73-1abf-40ad-9788-0d757201eeb0\nCDEC:SDF 65565709-caca-4ed5-a8b6-2794da371708\ncollecting  65565709-caca-4ed5-a8b6-2794da371708\nCDEC:SDW 74f8c8bc-2f60-4232-b447-43459d5d22f0\ncollecting  74f8c8bc-2f60-4232-b447-43459d5d22f0\nCDEC:SHM 7cf8af73-1abf-40ad-9788-0d757201eeb0\ncollecting  7cf8af73-1abf-40ad-9788-0d757201eeb0\nCDEC:SIL c89dc6ca-6d69-41ce-954d-b51f64aaacb1\ncollecting  c89dc6ca-6d69-41ce-954d-b51f64aaacb1\nCDEC:SLM 962f6718-ce02-4d13-b28c-e159d1adc2d4\ncollecting  962f6718-ce02-4d13-b28c-e159d1adc2d4\nCDEC:SLT 65565709-caca-4ed5-a8b6-2794da371708\ncollecting  65565709-caca-4ed5-a8b6-2794da371708\nCDEC:SPS 01be2cc7-ef77-4e4d-80ed-c4f8139162c3\ncollecting  01be2cc7-ef77-4e4d-80ed-c4f8139162c3\nCDEC:SPT 962f6718-ce02-4d13-b28c-e159d1adc2d4\ncollecting  962f6718-ce02-4d13-b28c-e159d1adc2d4\nCDEC:SQV f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nCDEC:SSM 147d5eb4-e574-47e4-994a-8a2908c06050\ncollecting  147d5eb4-e574-47e4-994a-8a2908c06050\nCDEC:SWM 6e96bf06-cbc5-45b5-a36b-e37864226099\ncollecting  6e96bf06-cbc5-45b5-a36b-e37864226099\nCDEC:TCC f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nCDEC:TK2 f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nCDEC:TMR c7e3f62c-a812-4342-8e4c-3a6a5dd96255\ncollecting  c7e3f62c-a812-4342-8e4c-3a6a5dd96255\nCDEC:TNY a8e91cfa-724a-4114-a9d4-291785ff31f8\ncollecting  a8e91cfa-724a-4114-a9d4-291785ff31f8\nCDEC:TUM 2dde4be2-b6fd-47e8-b53d-88b59d74fde1\ncollecting  2dde4be2-b6fd-47e8-b53d-88b59d74fde1\nCDEC:UBC b2e9cb6b-b45a-4cab-8333-247cb4c0b51b\ncollecting  b2e9cb6b-b45a-4cab-8333-247cb4c0b51b\nCDEC:UTY 46f21569-8ecf-4c46-b65b-d80fa83a20d5\ncollecting  46f21569-8ecf-4c46-b65b-d80fa83a20d5\nCDEC:VLC 643c05b6-03bc-4024-8000-2228f4b5a7ad\ncollecting  643c05b6-03bc-4024-8000-2228f4b5a7ad\nCDEC:VRG fb078c7e-4975-4c7f-8f42-180386ac8c3c\ncollecting  fb078c7e-4975-4c7f-8f42-180386ac8c3c\nCDEC:VVL 51ebe834-adf4-474e-871e-28ebca2bd0cc\ncollecting  51ebe834-adf4-474e-871e-28ebca2bd0cc\nCDEC:WC3 f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nCDEC:WHW dba335b6-9d97-4a89-9ff3-888a8a45575f\ncollecting  dba335b6-9d97-4a89-9ff3-888a8a45575f\nCDEC:WTM 057fb61e-ce45-4423-9ef2-b52d8c1237e9\ncollecting  057fb61e-ce45-4423-9ef2-b52d8c1237e9\nCDEC:WWC 50f7b567-4066-4437-a335-71aff4c94a2c\ncollecting  50f7b567-4066-4437-a335-71aff4c94a2c\nSNOTEL:1000_OR_SNTL 5e252b65-58dd-421f-a0db-3d4669bfb235\ncollecting  5e252b65-58dd-421f-a0db-3d4669bfb235\nSNOTEL:1005_CO_SNTL efada0af-09bf-4013-a1c6-0837f8ff59c5\ncollecting  efada0af-09bf-4013-a1c6-0837f8ff59c5\nSNOTEL:1009_MT_SNTL 517aefce-a617-4251-acb9-c5faf0b7fdf3\ncollecting  517aefce-a617-4251-acb9-c5faf0b7fdf3\nSNOTEL:1010_OR_SNTL 0a0ea690-5b73-4459-91d5-a6948d132a48\ncollecting  0a0ea690-5b73-4459-91d5-a6948d132a48\nSNOTEL:1011_WA_SNTL e6d48180-814d-494b-99cc-0be5cd1a0eaf\ncollecting  e6d48180-814d-494b-99cc-0be5cd1a0eaf\nSNOTEL:1012_WA_SNTL cdfc27f0-b990-45f7-bac6-7c674cd157ac\ncollecting  cdfc27f0-b990-45f7-bac6-7c674cd157ac\nSNOTEL:1013_UT_SNTL 2222b7b3-f48b-4cea-90bf-8e7245d002ea\ncollecting  2222b7b3-f48b-4cea-90bf-8e7245d002ea\nSNOTEL:1014_CO_SNTL cad51334-b3af-4c23-85c3-451c3447560a\ncollecting  cad51334-b3af-4c23-85c3-451c3447560a\nSNOTEL:1015_WY_SNTL 8116acfb-8035-4d34-b9b9-b0af2c5697df\ncollecting  8116acfb-8035-4d34-b9b9-b0af2c5697df\nSNOTEL:1016_ID_SNTL c66f40ed-f72e-4012-991c-1f3726e5c8ad\ncollecting  c66f40ed-f72e-4012-991c-1f3726e5c8ad\nSNOTEL:1017_NM_SNTL 6afdc499-9686-4451-b207-13df777df662\ncollecting  6afdc499-9686-4451-b207-13df777df662\nSNOTEL:1030_CO_SNTL 02cf33c2-c8e2-48b9-bf72-92506e97e251\ncollecting  02cf33c2-c8e2-48b9-bf72-92506e97e251\nSNOTEL:1031_CO_SNTL 8c45801f-6377-42e1-ae0a-9b53593ff843\ncollecting  8c45801f-6377-42e1-ae0a-9b53593ff843\nSNOTEL:1032_CO_SNTL 9f0599d8-81f3-4ab5-b275-48a6ddaaae5b\ncollecting  9f0599d8-81f3-4ab5-b275-48a6ddaaae5b\nSNOTEL:1033_CO_SNTL 86257c69-a8f1-43b1-9e07-73129e2c3fbc\ncollecting  86257c69-a8f1-43b1-9e07-73129e2c3fbc\nSNOTEL:1034_NM_SNTL 43be1328-02b0-4cc1-8e9b-75842908cee3\ncollecting  43be1328-02b0-4cc1-8e9b-75842908cee3\nSNOTEL:1039_UT_SNTL eeb0a123-9482-4946-ab3f-9e63541cb655\ncollecting  eeb0a123-9482-4946-ab3f-9e63541cb655\nSNOTEL:1040_CO_SNTL f62e6b4d-7f9d-4139-bac4-59f084fb09cd\ncollecting  f62e6b4d-7f9d-4139-bac4-59f084fb09cd\nSNOTEL:1043_WA_SNTL c59f438c-f00a-476a-938e-efd828e0d083\ncollecting  c59f438c-f00a-476a-938e-efd828e0d083\nSNOTEL:1044_OR_SNTL 7acd0d51-ff30-42a3-9338-590432bd0e43\ncollecting  7acd0d51-ff30-42a3-9338-590432bd0e43\nSNOTEL:1045_WY_SNTL 3b5bfd37-070c-4ee9-a470-c9338851e270\ncollecting  3b5bfd37-070c-4ee9-a470-c9338851e270\nSNOTEL:1046_WY_SNTL 3b5bfd37-070c-4ee9-a470-c9338851e270\ncollecting  3b5bfd37-070c-4ee9-a470-c9338851e270\nSNOTEL:1048_NM_SNTL 43be1328-02b0-4cc1-8e9b-75842908cee3\ncollecting  43be1328-02b0-4cc1-8e9b-75842908cee3\nSNOTEL:1050_CA_SNTL d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nSNOTEL:1051_CA_SNTL c89dc6ca-6d69-41ce-954d-b51f64aaacb1\ncollecting  c89dc6ca-6d69-41ce-954d-b51f64aaacb1\nSNOTEL:1052_CA_SNTL 74f8c8bc-2f60-4232-b447-43459d5d22f0\ncollecting  74f8c8bc-2f60-4232-b447-43459d5d22f0\nSNOTEL:1053_ID_SNTL 2f5c1968-2c34-4539-a9f4-38298d0de925\ncollecting  2f5c1968-2c34-4539-a9f4-38298d0de925\nSNOTEL:1054_UT_SNTL 10162c55-772d-49d2-8b1b-b1f9c86254b2\ncollecting  10162c55-772d-49d2-8b1b-b1f9c86254b2\nSNOTEL:1058_CO_SNTL c340219b-307b-412b-9368-b50639bd372d\ncollecting  c340219b-307b-412b-9368-b50639bd372d\nSNOTEL:1061_CO_SNTL 02cf33c2-c8e2-48b9-bf72-92506e97e251\ncollecting  02cf33c2-c8e2-48b9-bf72-92506e97e251\nSNOTEL:1065_UT_SNTL 24cd85fa-6aee-4556-bb8a-b6696eb72a19\ncollecting  24cd85fa-6aee-4556-bb8a-b6696eb72a19\nSNOTEL:1066_UT_SNTL 24cd85fa-6aee-4556-bb8a-b6696eb72a19\ncollecting  24cd85fa-6aee-4556-bb8a-b6696eb72a19\nSNOTEL:1067_CA_SNTL c89dc6ca-6d69-41ce-954d-b51f64aaacb1\ncollecting  c89dc6ca-6d69-41ce-954d-b51f64aaacb1\nSNOTEL:1068_WA_SNTL bfda850c-3027-4e91-afcb-cca5e73e4a03\ncollecting  bfda850c-3027-4e91-afcb-cca5e73e4a03\nSNOTEL:1077_OR_SNTL 5e252b65-58dd-421f-a0db-3d4669bfb235\ncollecting  5e252b65-58dd-421f-a0db-3d4669bfb235\nSNOTEL:1079_OR_SNTL f78ea076-10a1-45dc-a848-c08e129c6a28\ncollecting  f78ea076-10a1-45dc-a848-c08e129c6a28\nSNOTEL:1082_WY_SNTL ce76ce00-c8b5-4597-8ca3-1ec9db795b50\ncollecting  ce76ce00-c8b5-4597-8ca3-1ec9db795b50\nSNOTEL:1084_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nSNOTEL:1085_WA_SNTL 9474e816-b673-4e6d-83e0-28c274945bef\ncollecting  9474e816-b673-4e6d-83e0-28c274945bef\nSNOTEL:1098_UT_SNTL 2222b7b3-f48b-4cea-90bf-8e7245d002ea\ncollecting  2222b7b3-f48b-4cea-90bf-8e7245d002ea\nSNOTEL:1099_UT_SNTL ad44deb7-e56d-47bd-8d64-7147493e0aee\ncollecting  ad44deb7-e56d-47bd-8d64-7147493e0aee\nSNOTEL:1100_CO_SNTL b99b0ffd-6fa9-482c-8511-f7b87e705d35\ncollecting  b99b0ffd-6fa9-482c-8511-f7b87e705d35\nSNOTEL:1101_CO_SNTL e833aad1-6da3-4413-b25e-b2ab5b2029c0\ncollecting  e833aad1-6da3-4413-b25e-b2ab5b2029c0\nSNOTEL:1104_WA_SNTL cdfc27f0-b990-45f7-bac6-7c674cd157ac\ncollecting  cdfc27f0-b990-45f7-bac6-7c674cd157ac\nSNOTEL:1105_MT_SNTL f46e7d90-a754-44a8-b262-63f5c401a0ab\ncollecting  f46e7d90-a754-44a8-b262-63f5c401a0ab\nSNOTEL:1107_WA_SNTL 0f46ad2b-4b1f-4232-8e46-be7122d53b86\ncollecting  0f46ad2b-4b1f-4232-8e46-be7122d53b86\nSNOTEL:1109_WA_SNTL cdfc27f0-b990-45f7-bac6-7c674cd157ac\ncollecting  cdfc27f0-b990-45f7-bac6-7c674cd157ac\nSNOTEL:1110_NV_SNTL 8ca1aaab-07de-4532-a99f-4ab8bce2f862\ncollecting  8ca1aaab-07de-4532-a99f-4ab8bce2f862\nSNOTEL:1111_NV_SNTL 8ca1aaab-07de-4532-a99f-4ab8bce2f862\ncollecting  8ca1aaab-07de-4532-a99f-4ab8bce2f862\nSNOTEL:1113_UT_SNTL 2222b7b3-f48b-4cea-90bf-8e7245d002ea\ncollecting  2222b7b3-f48b-4cea-90bf-8e7245d002ea\nSNOTEL:1114_UT_SNTL 2222b7b3-f48b-4cea-90bf-8e7245d002ea\ncollecting  2222b7b3-f48b-4cea-90bf-8e7245d002ea\nSNOTEL:1115_UT_SNTL 2222b7b3-f48b-4cea-90bf-8e7245d002ea\ncollecting  2222b7b3-f48b-4cea-90bf-8e7245d002ea\nSNOTEL:1119_WY_SNTL 8116acfb-8035-4d34-b9b9-b0af2c5697df\ncollecting  8116acfb-8035-4d34-b9b9-b0af2c5697df\nSNOTEL:1120_CO_SNTL f62e6b4d-7f9d-4139-bac4-59f084fb09cd\ncollecting  f62e6b4d-7f9d-4139-bac4-59f084fb09cd\nSNOTEL:1121_AZ_SNTL c0e85162-6ff4-401b-b01e-cc6d7a51eac0\ncollecting  c0e85162-6ff4-401b-b01e-cc6d7a51eac0\nSNOTEL:1122_CO_SNTL e4473542-1804-41c0-82b2-eaddc245845d\ncollecting  e4473542-1804-41c0-82b2-eaddc245845d\nSNOTEL:1123_CO_SNTL e4473542-1804-41c0-82b2-eaddc245845d\ncollecting  e4473542-1804-41c0-82b2-eaddc245845d\nSNOTEL:1124_CO_SNTL aa0d6340-c817-48c9-8727-8d3457606381\ncollecting  aa0d6340-c817-48c9-8727-8d3457606381\nSNOTEL:1127_AZ_SNTL 1135e377-22e6-4290-b4cd-e6739de7fd8a\ncollecting  1135e377-22e6-4290-b4cd-e6739de7fd8a\nSNOTEL:1128_CO_SNTL f25cdbec-2f14-42c5-a6ef-a60f3a90caff\ncollecting  f25cdbec-2f14-42c5-a6ef-a60f3a90caff\nSNOTEL:1129_WA_SNTL 06ec1554-a0ea-41cf-85f8-43f4b48c7599\ncollecting  06ec1554-a0ea-41cf-85f8-43f4b48c7599\nSNOTEL:1131_WY_SNTL 02c3ec4a-8de4-4284-9ec1-5a942d3d098e\ncollecting  02c3ec4a-8de4-4284-9ec1-5a942d3d098e\nSNOTEL:1132_WY_SNTL c5a82752-3e4b-43ec-8011-9111b9bfcb89\ncollecting  c5a82752-3e4b-43ec-8011-9111b9bfcb89\nSNOTEL:1133_WY_SNTL 679fe096-5475-4d4d-b0f8-81e32de889aa\ncollecting  679fe096-5475-4d4d-b0f8-81e32de889aa\nSNOTEL:1134_WY_SNTL 990e5974-9c60-4c9a-ba23-ddce13971178\ncollecting  990e5974-9c60-4c9a-ba23-ddce13971178\nSNOTEL:1135_UT_SNTL 064d7f3e-8bbd-49cd-b360-5c4590a19b9e\ncollecting  064d7f3e-8bbd-49cd-b360-5c4590a19b9e\nSNOTEL:1136_NV_SNTL 875622b7-5253-43d2-8e0f-348767860eb9\ncollecting  875622b7-5253-43d2-8e0f-348767860eb9\nSNOTEL:1138_NM_SNTL eb1d889a-c427-49e1-95a1-fa6577002c9b\ncollecting  eb1d889a-c427-49e1-95a1-fa6577002c9b\nSNOTEL:1139_AZ_SNTL a2588440-600e-41da-b2b9-1f5632ecdef6\ncollecting  a2588440-600e-41da-b2b9-1f5632ecdef6\nSNOTEL:1140_AZ_SNTL 972ab3b1-7445-4f57-a1a1-c3be4c257869\ncollecting  972ab3b1-7445-4f57-a1a1-c3be4c257869\nSNOTEL:1141_CO_SNTL 09f879b9-4378-479e-949b-cdc3bec8f59f\ncollecting  09f879b9-4378-479e-949b-cdc3bec8f59f\nSNOTEL:1143_AZ_SNTL e925f8e6-6eee-4fa7-9034-41eb9917df5e\ncollecting  e925f8e6-6eee-4fa7-9034-41eb9917df5e\nSNOTEL:1144_MT_SNTL d37ccc2e-7127-48ec-9425-2e77681c3635\ncollecting  d37ccc2e-7127-48ec-9425-2e77681c3635\nSNOTEL:1146_UT_SNTL ba4b2f3f-c8e3-4535-9781-426e4f77ba4c\ncollecting  ba4b2f3f-c8e3-4535-9781-426e4f77ba4c\nSNOTEL:1147_NV_SNTL 38793f95-324b-4f01-b1a7-45e1c9353bc1\ncollecting  38793f95-324b-4f01-b1a7-45e1c9353bc1\nSNOTEL:1148_UT_SNTL 55d3e9a6-e153-43c3-a66c-cd60711ff4a9\ncollecting  55d3e9a6-e153-43c3-a66c-cd60711ff4a9\nSNOTEL:1149_UT_SNTL ad44deb7-e56d-47bd-8d64-7147493e0aee\ncollecting  ad44deb7-e56d-47bd-8d64-7147493e0aee\nSNOTEL:1150_NV_SNTL 38793f95-324b-4f01-b1a7-45e1c9353bc1\ncollecting  38793f95-324b-4f01-b1a7-45e1c9353bc1\nSNOTEL:1152_NV_SNTL 38793f95-324b-4f01-b1a7-45e1c9353bc1\ncollecting  38793f95-324b-4f01-b1a7-45e1c9353bc1\nSNOTEL:1154_UT_SNTL 55d3e9a6-e153-43c3-a66c-cd60711ff4a9\ncollecting  55d3e9a6-e153-43c3-a66c-cd60711ff4a9\nSNOTEL:1155_NV_SNTL 38793f95-324b-4f01-b1a7-45e1c9353bc1\ncollecting  38793f95-324b-4f01-b1a7-45e1c9353bc1\nSNOTEL:1156_UT_SNTL 7b636fe2-1760-45c5-afce-505f2e927163\ncollecting  7b636fe2-1760-45c5-afce-505f2e927163\nSNOTEL:1159_WA_SNTL dc31c331-837b-4b59-b184-051321e9489c\ncollecting  dc31c331-837b-4b59-b184-051321e9489c\nSNOTEL:1160_CO_SNTL 12bde9ee-0e0a-49ac-ab19-b410adb61b3c\ncollecting  12bde9ee-0e0a-49ac-ab19-b410adb61b3c\nSNOTEL:1161_CO_SNTL 9f0599d8-81f3-4ab5-b275-48a6ddaaae5b\ncollecting  9f0599d8-81f3-4ab5-b275-48a6ddaaae5b\nSNOTEL:1162_UT_SNTL c0568d62-49c7-4d9f-beba-ac0fb3e064c5\ncollecting  c0568d62-49c7-4d9f-beba-ac0fb3e064c5\nSNOTEL:1166_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nSNOTEL:1167_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nSNOTEL:1168_NM_SNTL e3473791-6153-49bc-a2ed-0b1e3e243942\ncollecting  e3473791-6153-49bc-a2ed-0b1e3e243942\nSNOTEL:1169_NM_SNTL e3473791-6153-49bc-a2ed-0b1e3e243942\ncollecting  e3473791-6153-49bc-a2ed-0b1e3e243942\nSNOTEL:1170_NM_SNTL e3473791-6153-49bc-a2ed-0b1e3e243942\ncollecting  e3473791-6153-49bc-a2ed-0b1e3e243942\nSNOTEL:1171_WA_SNTL 47e625fa-e2df-43ce-84dd-8ac21fdda75a\ncollecting  47e625fa-e2df-43ce-84dd-8ac21fdda75a\nSNOTEL:1172_NM_SNTL 674e34ce-8b77-422b-ab14-c6c3a0183e39\ncollecting  674e34ce-8b77-422b-ab14-c6c3a0183e39\nSNOTEL:1184_UT_SNTL 9813294e-a28e-45c0-976d-a6fa65d87927\ncollecting  9813294e-a28e-45c0-976d-a6fa65d87927\nSNOTEL:1185_CO_SNTL 548ff935-a421-4f4c-8eef-0bb19ed6c5f8\ncollecting  548ff935-a421-4f4c-8eef-0bb19ed6c5f8\nSNOTEL:1186_CO_SNTL cad51334-b3af-4c23-85c3-451c3447560a\ncollecting  cad51334-b3af-4c23-85c3-451c3447560a\nSNOTEL:1187_CO_SNTL f9f7132d-56a2-43e2-baba-312f34dbaeed\ncollecting  f9f7132d-56a2-43e2-baba-312f34dbaeed\nSNOTEL:1192_UT_SNTL a28a3caf-eea2-414f-8003-62ac82daaafa\ncollecting  a28a3caf-eea2-414f-8003-62ac82daaafa\nSNOTEL:1195_NV_SNTL f1f17cee-3fca-44bc-8974-b72d5f995a4a\ncollecting  f1f17cee-3fca-44bc-8974-b72d5f995a4a\nSNOTEL:1196_WY_SNTL 14c19b34-6359-4d3f-865e-0b9852a0e958\ncollecting  14c19b34-6359-4d3f-865e-0b9852a0e958\nSNOTEL:1197_UT_SNTL 55d3e9a6-e153-43c3-a66c-cd60711ff4a9\ncollecting  55d3e9a6-e153-43c3-a66c-cd60711ff4a9\nSNOTEL:1214_UT_SNTL 93b8483d-a510-42ff-865e-33d5a8784dc4\ncollecting  93b8483d-a510-42ff-865e-33d5a8784dc4\nSNOTEL:1215_UT_SNTL 20b97bae-60d6-466d-aca9-334d9b2d63b6\ncollecting  20b97bae-60d6-466d-aca9-334d9b2d63b6\nSNOTEL:1216_UT_SNTL 0a820e12-033b-45d6-9ef9-d70f4c5e5b63\ncollecting  0a820e12-033b-45d6-9ef9-d70f4c5e5b63\nSNOTEL:1222_UT_SNTL ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\ncollecting  ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\nSNOTEL:1223_UT_SNTL cfe58efd-ce2a-495a-90cd-6826f704ebee\ncollecting  cfe58efd-ce2a-495a-90cd-6826f704ebee\nSNOTEL:1224_UT_SNTL 9813294e-a28e-45c0-976d-a6fa65d87927\ncollecting  9813294e-a28e-45c0-976d-a6fa65d87927\nSNOTEL:1225_UT_SNTL 7bc3c413-4709-4ddd-a2ad-99f6cad9436c\ncollecting  7bc3c413-4709-4ddd-a2ad-99f6cad9436c\nSNOTEL:1226_UT_SNTL ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\ncollecting  ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\nSNOTEL:1227_UT_SNTL ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\ncollecting  ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\nSNOTEL:1228_UT_SNTL 9813294e-a28e-45c0-976d-a6fa65d87927\ncollecting  9813294e-a28e-45c0-976d-a6fa65d87927\nSNOTEL:1231_WA_SNTL 06ec1554-a0ea-41cf-85f8-43f4b48c7599\ncollecting  06ec1554-a0ea-41cf-85f8-43f4b48c7599\nSNOTEL:1236_UT_SNTL 19b5e6ce-c1a0-4cce-85f5-248c9f1abb6e\ncollecting  19b5e6ce-c1a0-4cce-85f5-248c9f1abb6e\nSNOTEL:1242_NV_SNTL d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nSNOTEL:1243_NV_SNTL a5080351-033f-4cfa-ad27-019fc84e052c\ncollecting  a5080351-033f-4cfa-ad27-019fc84e052c\nSNOTEL:1244_NV_SNTL 0efc68ba-5786-4c54-8028-e6f92efa6757\ncollecting  0efc68ba-5786-4c54-8028-e6f92efa6757\nSNOTEL:1247_UT_SNTL 93b8483d-a510-42ff-865e-33d5a8784dc4\ncollecting  93b8483d-a510-42ff-865e-33d5a8784dc4\nSNOTEL:1248_UT_SNTL 55d3e9a6-e153-43c3-a66c-cd60711ff4a9\ncollecting  55d3e9a6-e153-43c3-a66c-cd60711ff4a9\nSNOTEL:1249_UT_SNTL ad44deb7-e56d-47bd-8d64-7147493e0aee\ncollecting  ad44deb7-e56d-47bd-8d64-7147493e0aee\nSNOTEL:1251_CO_SNTL f9f7132d-56a2-43e2-baba-312f34dbaeed\ncollecting  f9f7132d-56a2-43e2-baba-312f34dbaeed\nSNOTEL:1252_CO_SNTL 8116acfb-8035-4d34-b9b9-b0af2c5697df\ncollecting  8116acfb-8035-4d34-b9b9-b0af2c5697df\nSNOTEL:1254_NM_SNTL 9c43edf0-541f-4dbb-9fe1-42cc83d453bd\ncollecting  9c43edf0-541f-4dbb-9fe1-42cc83d453bd\nSNOTEL:1256_WA_SNTL c59f438c-f00a-476a-938e-efd828e0d083\ncollecting  c59f438c-f00a-476a-938e-efd828e0d083\nSNOTEL:1257_WA_SNTL 2f266b81-aad3-4c26-ac69-1bd04a208bf7\ncollecting  2f266b81-aad3-4c26-ac69-1bd04a208bf7\nSNOTEL:1258_CA_SNTL 76b55900-eb3d-4d25-a538-f74302ffe72d\ncollecting  76b55900-eb3d-4d25-a538-f74302ffe72d\nSNOTEL:1259_WA_SNTL dc31c331-837b-4b59-b184-051321e9489c\ncollecting  dc31c331-837b-4b59-b184-051321e9489c\nSNOTEL:1261_UT_SNTL ad44deb7-e56d-47bd-8d64-7147493e0aee\ncollecting  ad44deb7-e56d-47bd-8d64-7147493e0aee\nSNOTEL:1262_NV_SNTL 875622b7-5253-43d2-8e0f-348767860eb9\ncollecting  875622b7-5253-43d2-8e0f-348767860eb9\nSNOTEL:1263_WA_SNTL cdfc27f0-b990-45f7-bac6-7c674cd157ac\ncollecting  cdfc27f0-b990-45f7-bac6-7c674cd157ac\nSNOTEL:1269_UT_SNTL ad44deb7-e56d-47bd-8d64-7147493e0aee\ncollecting  ad44deb7-e56d-47bd-8d64-7147493e0aee\nSNOTEL:1271_AZ_SNTL f6a782f0-4b17-4989-815c-2398b77b09dd\ncollecting  f6a782f0-4b17-4989-815c-2398b77b09dd\nSNOTEL:1272_NV_SNTL 5308a803-69e6-43cd-89db-66e93f9f83af\ncollecting  5308a803-69e6-43cd-89db-66e93f9f83af\nSNOTEL:1277_CA_SNTL 147d5eb4-e574-47e4-994a-8a2908c06050\ncollecting  147d5eb4-e574-47e4-994a-8a2908c06050\nSNOTEL:1278_UT_SNTL 7b636fe2-1760-45c5-afce-505f2e927163\ncollecting  7b636fe2-1760-45c5-afce-505f2e927163\nSNOTEL:1280_UT_SNTL ba4b2f3f-c8e3-4535-9781-426e4f77ba4c\ncollecting  ba4b2f3f-c8e3-4535-9781-426e4f77ba4c\nSNOTEL:1286_MT_SNTL cacaa17b-0b1b-4fe2-a4c1-7728e6c154c1\ncollecting  cacaa17b-0b1b-4fe2-a4c1-7728e6c154c1\nSNOTEL:1287_MT_SNTL e9759e79-461c-425e-af17-0a88be1a441f\ncollecting  e9759e79-461c-425e-af17-0a88be1a441f\nSNOTEL:2029_ID_SNTL 0cda0c4a-405b-4e16-8922-964190929d80\ncollecting  0cda0c4a-405b-4e16-8922-964190929d80\nSNOTEL:301_CA_SNTL 76b55900-eb3d-4d25-a538-f74302ffe72d\ncollecting  76b55900-eb3d-4d25-a538-f74302ffe72d\nSNOTEL:302_OR_SNTL c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\ncollecting  c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\nSNOTEL:303_CO_SNTL 2ca6a37f-67f5-4905-864b-ddf98d956ebb\ncollecting  2ca6a37f-67f5-4905-864b-ddf98d956ebb\nSNOTEL:304_OR_SNTL 78ccacb3-4eb9-4d95-b244-f3a709e39fd1\ncollecting  78ccacb3-4eb9-4d95-b244-f3a709e39fd1\nSNOTEL:305_CO_SNTL cad51334-b3af-4c23-85c3-451c3447560a\ncollecting  cad51334-b3af-4c23-85c3-451c3447560a\nSNOTEL:306_ID_SNTL 36b98590-a7e6-4e00-8c7d-f0f3d25bafec\ncollecting  36b98590-a7e6-4e00-8c7d-f0f3d25bafec\nSNOTEL:308_AZ_SNTL 972ab3b1-7445-4f57-a1a1-c3be4c257869\ncollecting  972ab3b1-7445-4f57-a1a1-c3be4c257869\nSNOTEL:311_MT_SNTL 0b9543d3-3cf9-4f28-b8eb-fd22c1956153\ncollecting  0b9543d3-3cf9-4f28-b8eb-fd22c1956153\nSNOTEL:312_ID_SNTL 36b98590-a7e6-4e00-8c7d-f0f3d25bafec\ncollecting  36b98590-a7e6-4e00-8c7d-f0f3d25bafec\nSNOTEL:313_MT_SNTL 4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\ncollecting  4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\nSNOTEL:316_NM_SNTL 674e34ce-8b77-422b-ab14-c6c3a0183e39\ncollecting  674e34ce-8b77-422b-ab14-c6c3a0183e39\nSNOTEL:317_WY_SNTL 8116acfb-8035-4d34-b9b9-b0af2c5697df\ncollecting  8116acfb-8035-4d34-b9b9-b0af2c5697df\nSNOTEL:319_ID_SNTL c66f40ed-f72e-4012-991c-1f3726e5c8ad\ncollecting  c66f40ed-f72e-4012-991c-1f3726e5c8ad\nSNOTEL:320_ID_SNTL af0463d4-f20f-4d13-bd0f-5834e2e8717b\ncollecting  af0463d4-f20f-4d13-bd0f-5834e2e8717b\nSNOTEL:321_NV_SNTL 5308a803-69e6-43cd-89db-66e93f9f83af\ncollecting  5308a803-69e6-43cd-89db-66e93f9f83af\nSNOTEL:322_CO_SNTL f9f7132d-56a2-43e2-baba-312f34dbaeed\ncollecting  f9f7132d-56a2-43e2-baba-312f34dbaeed\nSNOTEL:324_ID_SNTL c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\ncollecting  c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\nSNOTEL:325_WY_SNTL c5a82752-3e4b-43ec-8011-9111b9bfcb89\ncollecting  c5a82752-3e4b-43ec-8011-9111b9bfcb89\nSNOTEL:326_WY_SNTL e776d9b6-2180-4f50-90bf-77f7b920fc3b\ncollecting  e776d9b6-2180-4f50-90bf-77f7b920fc3b\nSNOTEL:327_CO_SNTL 69d48a07-3007-4b3f-bec6-c097509a56d9\ncollecting  69d48a07-3007-4b3f-bec6-c097509a56d9\nSNOTEL:328_MT_SNTL 10a46ea0-13da-4cef-9aa6-ff48aa46881c\ncollecting  10a46ea0-13da-4cef-9aa6-ff48aa46881c\nSNOTEL:329_UT_SNTL 9813294e-a28e-45c0-976d-a6fa65d87927\ncollecting  9813294e-a28e-45c0-976d-a6fa65d87927\nSNOTEL:330_UT_SNTL 7bc3c413-4709-4ddd-a2ad-99f6cad9436c\ncollecting  7bc3c413-4709-4ddd-a2ad-99f6cad9436c\nSNOTEL:331_OR_SNTL 631ed3c9-7863-4e7c-86fa-4bfb043f2851\ncollecting  631ed3c9-7863-4e7c-86fa-4bfb043f2851\nSNOTEL:332_UT_SNTL b59438b9-aadc-4899-9afb-fe71974c5c3a\ncollecting  b59438b9-aadc-4899-9afb-fe71974c5c3a\nSNOTEL:333_UT_SNTL b59438b9-aadc-4899-9afb-fe71974c5c3a\ncollecting  b59438b9-aadc-4899-9afb-fe71974c5c3a\nSNOTEL:334_NV_SNTL 38793f95-324b-4f01-b1a7-45e1c9353bc1\ncollecting  38793f95-324b-4f01-b1a7-45e1c9353bc1\nSNOTEL:335_CO_SNTL cad51334-b3af-4c23-85c3-451c3447560a\ncollecting  cad51334-b3af-4c23-85c3-451c3447560a\nSNOTEL:336_NV_SNTL 03428fd9-01cc-4a57-ab6e-f4e8f265c094\ncollecting  03428fd9-01cc-4a57-ab6e-f4e8f265c094\nSNOTEL:337_NV_SNTL f1f17cee-3fca-44bc-8974-b72d5f995a4a\ncollecting  f1f17cee-3fca-44bc-8974-b72d5f995a4a\nSNOTEL:338_ID_SNTL c66f40ed-f72e-4012-991c-1f3726e5c8ad\ncollecting  c66f40ed-f72e-4012-991c-1f3726e5c8ad\nSNOTEL:339_UT_SNTL 7b636fe2-1760-45c5-afce-505f2e927163\ncollecting  7b636fe2-1760-45c5-afce-505f2e927163\nSNOTEL:340_NV_SNTL d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nSNOTEL:341_OR_SNTL dd7f64aa-3556-409b-bc86-71dc28b6fd45\ncollecting  dd7f64aa-3556-409b-bc86-71dc28b6fd45\nSNOTEL:342_WY_SNTL 990e5974-9c60-4c9a-ba23-ddce13971178\ncollecting  990e5974-9c60-4c9a-ba23-ddce13971178\nSNOTEL:344_OR_SNTL 71f41513-6ac9-4d2e-97eb-6cd3b84f7043\ncollecting  71f41513-6ac9-4d2e-97eb-6cd3b84f7043\nSNOTEL:345_CO_SNTL d64197fc-0723-4c61-9ce8-ff2554e24154\ncollecting  d64197fc-0723-4c61-9ce8-ff2554e24154\nSNOTEL:346_MT_SNTL 89a7b0ef-1ec8-490f-9207-c93aa57a147f\ncollecting  89a7b0ef-1ec8-490f-9207-c93aa57a147f\nSNOTEL:347_MT_SNTL b1936012-0d31-4b92-8d60-c24903b2e569\ncollecting  b1936012-0d31-4b92-8d60-c24903b2e569\nSNOTEL:348_UT_SNTL 9813294e-a28e-45c0-976d-a6fa65d87927\ncollecting  9813294e-a28e-45c0-976d-a6fa65d87927\nSNOTEL:349_MT_SNTL 4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\ncollecting  4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\nSNOTEL:350_WY_SNTL 333458b2-c1a9-47a3-8ae0-92053ad28ae3\ncollecting  333458b2-c1a9-47a3-8ae0-92053ad28ae3\nSNOTEL:354_SD_SNTL ab89875f-3b86-4c6a-8d66-767017570dfc\ncollecting  ab89875f-3b86-4c6a-8d66-767017570dfc\nSNOTEL:355_MT_SNTL 6de38d5b-ccce-4ff2-90ed-1c7035491518\ncollecting  6de38d5b-ccce-4ff2-90ed-1c7035491518\nSNOTEL:356_CA_SNTL c89dc6ca-6d69-41ce-954d-b51f64aaacb1\ncollecting  c89dc6ca-6d69-41ce-954d-b51f64aaacb1\nSNOTEL:358_WY_SNTL 6bc3e088-5139-43f2-9b2a-ade1cedeae47\ncollecting  6bc3e088-5139-43f2-9b2a-ade1cedeae47\nSNOTEL:360_MT_SNTL 517aefce-a617-4251-acb9-c5faf0b7fdf3\ncollecting  517aefce-a617-4251-acb9-c5faf0b7fdf3\nSNOTEL:363_MT_SNTL f46e7d90-a754-44a8-b262-63f5c401a0ab\ncollecting  f46e7d90-a754-44a8-b262-63f5c401a0ab\nSNOTEL:364_UT_SNTL 7b636fe2-1760-45c5-afce-505f2e927163\ncollecting  7b636fe2-1760-45c5-afce-505f2e927163\nSNOTEL:365_MT_SNTL e467a17f-a729-4938-87a1-ac25157eed63\ncollecting  e467a17f-a729-4938-87a1-ac25157eed63\nSNOTEL:366_UT_SNTL eeb0a123-9482-4946-ab3f-9e63541cb655\ncollecting  eeb0a123-9482-4946-ab3f-9e63541cb655\nSNOTEL:368_UT_SNTL a28a3caf-eea2-414f-8003-62ac82daaafa\ncollecting  a28a3caf-eea2-414f-8003-62ac82daaafa\nSNOTEL:370_ID_SNTL c66f40ed-f72e-4012-991c-1f3726e5c8ad\ncollecting  c66f40ed-f72e-4012-991c-1f3726e5c8ad\nSNOTEL:373_NV_SNTL 42a21eb9-10fd-4986-825b-9ea55ce13935\ncollecting  42a21eb9-10fd-4986-825b-9ea55ce13935\nSNOTEL:375_WA_SNTL bb65d7a1-a5d5-4c89-9ef9-f0f1db06cc58\ncollecting  bb65d7a1-a5d5-4c89-9ef9-f0f1db06cc58\nSNOTEL:376_WA_SNTL c59f438c-f00a-476a-938e-efd828e0d083\ncollecting  c59f438c-f00a-476a-938e-efd828e0d083\nSNOTEL:377_WY_SNTL 6bc3e088-5139-43f2-9b2a-ade1cedeae47\ncollecting  6bc3e088-5139-43f2-9b2a-ade1cedeae47\nSNOTEL:379_WY_SNTL 692c41af-2210-4dd6-916d-c99e76807447\ncollecting  692c41af-2210-4dd6-916d-c99e76807447\nSNOTEL:380_CO_SNTL 6662f7d0-4afc-4fed-b930-e0408ee10bc7\ncollecting  6662f7d0-4afc-4fed-b930-e0408ee10bc7\nSNOTEL:381_MT_SNTL 4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\ncollecting  4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\nSNOTEL:385_MT_SNTL b1936012-0d31-4b92-8d60-c24903b2e569\ncollecting  b1936012-0d31-4b92-8d60-c24903b2e569\nSNOTEL:386_CO_SNTL fb32a838-cf3b-47a2-9e22-395a730f4f4f\ncollecting  fb32a838-cf3b-47a2-9e22-395a730f4f4f\nSNOTEL:387_CO_SNTL fb32a838-cf3b-47a2-9e22-395a730f4f4f\ncollecting  fb32a838-cf3b-47a2-9e22-395a730f4f4f\nSNOTEL:388_OR_SNTL ea185683-4427-44c3-84e1-706cf16781ce\ncollecting  ea185683-4427-44c3-84e1-706cf16781ce\nSNOTEL:389_WY_SNTL ab89875f-3b86-4c6a-8d66-767017570dfc\ncollecting  ab89875f-3b86-4c6a-8d66-767017570dfc\nSNOTEL:390_UT_SNTL 55d3e9a6-e153-43c3-a66c-cd60711ff4a9\ncollecting  55d3e9a6-e153-43c3-a66c-cd60711ff4a9\nSNOTEL:392_UT_SNTL 064d7f3e-8bbd-49cd-b360-5c4590a19b9e\ncollecting  064d7f3e-8bbd-49cd-b360-5c4590a19b9e\nSNOTEL:393_UT_SNTL 064d7f3e-8bbd-49cd-b360-5c4590a19b9e\ncollecting  064d7f3e-8bbd-49cd-b360-5c4590a19b9e\nSNOTEL:396_UT_SNTL 50d7ad3f-57f0-45e1-911d-b0efff9deb8f\ncollecting  50d7ad3f-57f0-45e1-911d-b0efff9deb8f\nSNOTEL:398_OR_SNTL 8edd6091-10fa-4617-8dc8-e0ce1d5b84f7\ncollecting  8edd6091-10fa-4617-8dc8-e0ce1d5b84f7\nSNOTEL:399_UT_SNTL 0a820e12-033b-45d6-9ef9-d70f4c5e5b63\ncollecting  0a820e12-033b-45d6-9ef9-d70f4c5e5b63\nSNOTEL:401_OR_SNTL 8edd6091-10fa-4617-8dc8-e0ce1d5b84f7\ncollecting  8edd6091-10fa-4617-8dc8-e0ce1d5b84f7\nSNOTEL:402_WY_SNTL 02c3ec4a-8de4-4284-9ec1-5a942d3d098e\ncollecting  02c3ec4a-8de4-4284-9ec1-5a942d3d098e\nSNOTEL:403_MT_SNTL 05938de0-622b-4e0a-a82b-2a128e5be0b0\ncollecting  05938de0-622b-4e0a-a82b-2a128e5be0b0\nSNOTEL:406_OR_SNTL 71f41513-6ac9-4d2e-97eb-6cd3b84f7043\ncollecting  71f41513-6ac9-4d2e-97eb-6cd3b84f7043\nSNOTEL:407_MT_SNTL e776d9b6-2180-4f50-90bf-77f7b920fc3b\ncollecting  e776d9b6-2180-4f50-90bf-77f7b920fc3b\nSNOTEL:409_CO_SNTL a4339b9a-871e-44c2-9bb4-bcbfe9d590d7\ncollecting  a4339b9a-871e-44c2-9bb4-bcbfe9d590d7\nSNOTEL:410_MT_SNTL 4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\ncollecting  4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\nSNOTEL:411_ID_SNTL 440d7558-67fd-43b4-826b-26d02663f871\ncollecting  440d7558-67fd-43b4-826b-26d02663f871\nSNOTEL:412_CO_SNTL f9f7132d-56a2-43e2-baba-312f34dbaeed\ncollecting  f9f7132d-56a2-43e2-baba-312f34dbaeed\nSNOTEL:413_MT_SNTL 99a2d4a9-63a0-43a7-976d-2a1ed822186d\ncollecting  99a2d4a9-63a0-43a7-976d-2a1ed822186d\nSNOTEL:414_MT_SNTL 99a2d4a9-63a0-43a7-976d-2a1ed822186d\ncollecting  99a2d4a9-63a0-43a7-976d-2a1ed822186d\nSNOTEL:415_CO_SNTL be57eab6-a495-427f-8a36-9d118c03e7d8\ncollecting  be57eab6-a495-427f-8a36-9d118c03e7d8\nSNOTEL:416_AZ_SNTL 1135e377-22e6-4290-b4cd-e6739de7fd8a\ncollecting  1135e377-22e6-4290-b4cd-e6739de7fd8a\nSNOTEL:417_NV_SNTL a5080351-033f-4cfa-ad27-019fc84e052c\ncollecting  a5080351-033f-4cfa-ad27-019fc84e052c\nSNOTEL:418_WA_SNTL 9474e816-b673-4e6d-83e0-28c274945bef\ncollecting  9474e816-b673-4e6d-83e0-28c274945bef\nSNOTEL:419_WY_SNTL df7e906a-07f3-4a46-b9a5-0200427c26f7\ncollecting  df7e906a-07f3-4a46-b9a5-0200427c26f7\nSNOTEL:420_WA_SNTL 360f1bcc-aa60-4052-a18a-b33da5745ff4\ncollecting  360f1bcc-aa60-4052-a18a-b33da5745ff4\nSNOTEL:422_OR_SNTL e27143af-fdc0-4f6f-8a28-f57b78da75dc\ncollecting  e27143af-fdc0-4f6f-8a28-f57b78da75dc\nSNOTEL:423_ID_SNTL 36b98590-a7e6-4e00-8c7d-f0f3d25bafec\ncollecting  36b98590-a7e6-4e00-8c7d-f0f3d25bafec\nSNOTEL:424_ID_SNTL 10a46ea0-13da-4cef-9aa6-ff48aa46881c\ncollecting  10a46ea0-13da-4cef-9aa6-ff48aa46881c\nSNOTEL:426_CO_SNTL 02cf33c2-c8e2-48b9-bf72-92506e97e251\ncollecting  02cf33c2-c8e2-48b9-bf72-92506e97e251\nSNOTEL:428_CA_SNTL 51ebe834-adf4-474e-871e-28ebca2bd0cc\ncollecting  51ebe834-adf4-474e-871e-28ebca2bd0cc\nSNOTEL:430_CO_SNTL 2ca6a37f-67f5-4905-864b-ddf98d956ebb\ncollecting  2ca6a37f-67f5-4905-864b-ddf98d956ebb\nSNOTEL:431_CO_SNTL 0623939d-b33f-41cb-ade2-3c4a776de49a\ncollecting  0623939d-b33f-41cb-ade2-3c4a776de49a\nSNOTEL:432_UT_SNTL cfe58efd-ce2a-495a-90cd-6826f704ebee\ncollecting  cfe58efd-ce2a-495a-90cd-6826f704ebee\nSNOTEL:433_MT_SNTL 4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\ncollecting  4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\nSNOTEL:434_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nSNOTEL:436_MT_SNTL cacaa17b-0b1b-4fe2-a4c1-7728e6c154c1\ncollecting  cacaa17b-0b1b-4fe2-a4c1-7728e6c154c1\nSNOTEL:437_MT_SNTL 517aefce-a617-4251-acb9-c5faf0b7fdf3\ncollecting  517aefce-a617-4251-acb9-c5faf0b7fdf3\nSNOTEL:438_CO_SNTL 9f0599d8-81f3-4ab5-b275-48a6ddaaae5b\ncollecting  9f0599d8-81f3-4ab5-b275-48a6ddaaae5b\nSNOTEL:439_ID_SNTL 36b98590-a7e6-4e00-8c7d-f0f3d25bafec\ncollecting  36b98590-a7e6-4e00-8c7d-f0f3d25bafec\nSNOTEL:444_UT_SNTL 9813294e-a28e-45c0-976d-a6fa65d87927\ncollecting  9813294e-a28e-45c0-976d-a6fa65d87927\nSNOTEL:448_MT_SNTL 05938de0-622b-4e0a-a82b-2a128e5be0b0\ncollecting  05938de0-622b-4e0a-a82b-2a128e5be0b0\nSNOTEL:449_WY_SNTL 8116acfb-8035-4d34-b9b9-b0af2c5697df\ncollecting  8116acfb-8035-4d34-b9b9-b0af2c5697df\nSNOTEL:450_ID_SNTL 695c7749-a3b8-4158-bd14-59d1f2c3e736\ncollecting  695c7749-a3b8-4158-bd14-59d1f2c3e736\nSNOTEL:451_WY_SNTL 02c3ec4a-8de4-4284-9ec1-5a942d3d098e\ncollecting  02c3ec4a-8de4-4284-9ec1-5a942d3d098e\nSNOTEL:452_UT_SNTL ad44deb7-e56d-47bd-8d64-7147493e0aee\ncollecting  ad44deb7-e56d-47bd-8d64-7147493e0aee\nSNOTEL:455_UT_SNTL b59438b9-aadc-4899-9afb-fe71974c5c3a\ncollecting  b59438b9-aadc-4899-9afb-fe71974c5c3a\nSNOTEL:457_CO_SNTL 02cf33c2-c8e2-48b9-bf72-92506e97e251\ncollecting  02cf33c2-c8e2-48b9-bf72-92506e97e251\nSNOTEL:458_MT_SNTL dca30f20-582e-40ef-be6d-aa7858be4baa\ncollecting  dca30f20-582e-40ef-be6d-aa7858be4baa\nSNOTEL:460_WY_SNTL 695bed09-0ad9-406e-b489-69408adeea06\ncollecting  695bed09-0ad9-406e-b489-69408adeea06\nSNOTEL:462_CA_SNTL 962f6718-ce02-4d13-b28c-e159d1adc2d4\ncollecting  962f6718-ce02-4d13-b28c-e159d1adc2d4\nSNOTEL:463_CA_SNTL f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nSNOTEL:464_OR_SNTL 631ed3c9-7863-4e7c-86fa-4bfb043f2851\ncollecting  631ed3c9-7863-4e7c-86fa-4bfb043f2851\nSNOTEL:465_CO_SNTL d10a90c7-3db0-43c6-b04b-fe8b4c3f206e\ncollecting  d10a90c7-3db0-43c6-b04b-fe8b4c3f206e\nSNOTEL:466_ID_SNTL b1077b69-4b02-458e-8a4b-e68695ac534f\ncollecting  b1077b69-4b02-458e-8a4b-e68695ac534f\nSNOTEL:467_CO_SNTL 86257c69-a8f1-43b1-9e07-73129e2c3fbc\ncollecting  86257c69-a8f1-43b1-9e07-73129e2c3fbc\nSNOTEL:470_OR_SNTL e27143af-fdc0-4f6f-8a28-f57b78da75dc\ncollecting  e27143af-fdc0-4f6f-8a28-f57b78da75dc\nSNOTEL:472_WY_SNTL e776d9b6-2180-4f50-90bf-77f7b920fc3b\ncollecting  e776d9b6-2180-4f50-90bf-77f7b920fc3b\nSNOTEL:474_UT_SNTL 10162c55-772d-49d2-8b1b-b1f9c86254b2\ncollecting  10162c55-772d-49d2-8b1b-b1f9c86254b2\nSNOTEL:475_UT_SNTL 9813294e-a28e-45c0-976d-a6fa65d87927\ncollecting  9813294e-a28e-45c0-976d-a6fa65d87927\nSNOTEL:476_NV_SNTL 875622b7-5253-43d2-8e0f-348767860eb9\ncollecting  875622b7-5253-43d2-8e0f-348767860eb9\nSNOTEL:477_OR_SNTL 65894307-d4eb-4b2e-a0fa-bd83a102dc30\ncollecting  65894307-d4eb-4b2e-a0fa-bd83a102dc30\nSNOTEL:478_WA_SNTL bfda850c-3027-4e91-afcb-cca5e73e4a03\ncollecting  bfda850c-3027-4e91-afcb-cca5e73e4a03\nSNOTEL:480_MT_SNTL f46e7d90-a754-44a8-b262-63f5c401a0ab\ncollecting  f46e7d90-a754-44a8-b262-63f5c401a0ab\nSNOTEL:481_UT_SNTL a28a3caf-eea2-414f-8003-62ac82daaafa\ncollecting  a28a3caf-eea2-414f-8003-62ac82daaafa\nSNOTEL:482_MT_SNTL d37ccc2e-7127-48ec-9425-2e77681c3635\ncollecting  d37ccc2e-7127-48ec-9425-2e77681c3635\nSNOTEL:483_OR_SNTL 71f41513-6ac9-4d2e-97eb-6cd3b84f7043\ncollecting  71f41513-6ac9-4d2e-97eb-6cd3b84f7043\nSNOTEL:484_ID_SNTL 6bf06917-011b-4029-8fbe-a8dfea3bc598\ncollecting  6bf06917-011b-4029-8fbe-a8dfea3bc598\nSNOTEL:485_CO_SNTL 75ced1b1-1fc2-42d3-a4f8-44aa1978c8ef\ncollecting  75ced1b1-1fc2-42d3-a4f8-44aa1978c8ef\nSNOTEL:486_NM_SNTL 1135e377-22e6-4290-b4cd-e6739de7fd8a\ncollecting  1135e377-22e6-4290-b4cd-e6739de7fd8a\nSNOTEL:487_MT_SNTL f3e36cea-5eb2-495a-87f4-947395f325b0\ncollecting  f3e36cea-5eb2-495a-87f4-947395f325b0\nSNOTEL:488_AZ_SNTL a2588440-600e-41da-b2b9-1f5632ecdef6\ncollecting  a2588440-600e-41da-b2b9-1f5632ecdef6\nSNOTEL:489_ID_SNTL f3332d55-ecc8-4644-9deb-180e42abb2eb\ncollecting  f3332d55-ecc8-4644-9deb-180e42abb2eb\nSNOTEL:490_ID_SNTL 695c7749-a3b8-4158-bd14-59d1f2c3e736\ncollecting  695c7749-a3b8-4158-bd14-59d1f2c3e736\nSNOTEL:491_NM_SNTL 9c43edf0-541f-4dbb-9fe1-42cc83d453bd\ncollecting  9c43edf0-541f-4dbb-9fe1-42cc83d453bd\nSNOTEL:493_ID_SNTL 6bf06917-011b-4029-8fbe-a8dfea3bc598\ncollecting  6bf06917-011b-4029-8fbe-a8dfea3bc598\nSNOTEL:494_OR_SNTL 631ed3c9-7863-4e7c-86fa-4bfb043f2851\ncollecting  631ed3c9-7863-4e7c-86fa-4bfb043f2851\nSNOTEL:495_UT_SNTL 9813294e-a28e-45c0-976d-a6fa65d87927\ncollecting  9813294e-a28e-45c0-976d-a6fa65d87927\nSNOTEL:497_WY_SNTL 695bed09-0ad9-406e-b489-69408adeea06\ncollecting  695bed09-0ad9-406e-b489-69408adeea06\nSNOTEL:498_NV_SNTL 42a21eb9-10fd-4986-825b-9ea55ce13935\ncollecting  42a21eb9-10fd-4986-825b-9ea55ce13935\nSNOTEL:499_WY_SNTL 491846d3-f81a-4777-b49f-0a0c74168395\ncollecting  491846d3-f81a-4777-b49f-0a0c74168395\nSNOTEL:500_MT_SNTL d37ccc2e-7127-48ec-9425-2e77681c3635\ncollecting  d37ccc2e-7127-48ec-9425-2e77681c3635\nSNOTEL:503_NV_SNTL a5080351-033f-4cfa-ad27-019fc84e052c\ncollecting  a5080351-033f-4cfa-ad27-019fc84e052c\nSNOTEL:505_CO_SNTL 552a5638-8fd2-46de-8569-5f5512102264\ncollecting  552a5638-8fd2-46de-8569-5f5512102264\nSNOTEL:507_WA_SNTL 6d0ff6eb-0411-4863-b4e7-90958db98115\ncollecting  6d0ff6eb-0411-4863-b4e7-90958db98115\nSNOTEL:508_CA_SNTL d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nSNOTEL:509_WY_SNTL df7e906a-07f3-4a46-b9a5-0200427c26f7\ncollecting  df7e906a-07f3-4a46-b9a5-0200427c26f7\nSNOTEL:510_MT_SNTL 0b9543d3-3cf9-4f28-b8eb-fd22c1956153\ncollecting  0b9543d3-3cf9-4f28-b8eb-fd22c1956153\nSNOTEL:512_WY_SNTL c5a82752-3e4b-43ec-8011-9111b9bfcb89\ncollecting  c5a82752-3e4b-43ec-8011-9111b9bfcb89\nSNOTEL:514_UT_SNTL 55d3e9a6-e153-43c3-a66c-cd60711ff4a9\ncollecting  55d3e9a6-e153-43c3-a66c-cd60711ff4a9\nSNOTEL:519_AZ_SNTL 0aeaffd7-9089-49e7-85ad-2314f32cbf7c\ncollecting  0aeaffd7-9089-49e7-85ad-2314f32cbf7c\nSNOTEL:520_ID_SNTL b1077b69-4b02-458e-8a4b-e68695ac534f\ncollecting  b1077b69-4b02-458e-8a4b-e68695ac534f\nSNOTEL:521_UT_SNTL c0568d62-49c7-4d9f-beba-ac0fb3e064c5\ncollecting  c0568d62-49c7-4d9f-beba-ac0fb3e064c5\nSNOTEL:522_UT_SNTL 50d7ad3f-57f0-45e1-911d-b0efff9deb8f\ncollecting  50d7ad3f-57f0-45e1-911d-b0efff9deb8f\nSNOTEL:523_OR_SNTL e27143af-fdc0-4f6f-8a28-f57b78da75dc\ncollecting  e27143af-fdc0-4f6f-8a28-f57b78da75dc\nSNOTEL:524_ID_SNTL 3330a979-98df-4a38-ac3f-0b45374f8e3d\ncollecting  3330a979-98df-4a38-ac3f-0b45374f8e3d\nSNOTEL:525_WY_SNTL 990e5974-9c60-4c9a-ba23-ddce13971178\ncollecting  990e5974-9c60-4c9a-ba23-ddce13971178\nSNOTEL:526_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nSNOTEL:528_UT_SNTL 50d7ad3f-57f0-45e1-911d-b0efff9deb8f\ncollecting  50d7ad3f-57f0-45e1-911d-b0efff9deb8f\nSNOTEL:529_OR_SNTL fe33672e-7ea7-4c5d-8639-96b2cc7edb0c\ncollecting  fe33672e-7ea7-4c5d-8639-96b2cc7edb0c\nSNOTEL:530_MT_SNTL 440d7558-67fd-43b4-826b-26d02663f871\ncollecting  440d7558-67fd-43b4-826b-26d02663f871\nSNOTEL:531_CO_SNTL 59ac7ee6-8fa8-4888-bb77-2be6781dddaf\ncollecting  59ac7ee6-8fa8-4888-bb77-2be6781dddaf\nSNOTEL:532_NM_SNTL 674e34ce-8b77-422b-ab14-c6c3a0183e39\ncollecting  674e34ce-8b77-422b-ab14-c6c3a0183e39\nSNOTEL:533_UT_SNTL dc237027-8dae-4da7-91ec-501701ecd943\ncollecting  dc237027-8dae-4da7-91ec-501701ecd943\nSNOTEL:535_ID_SNTL b5d7b6b8-4e5d-4b5e-8976-c72e99f57769\ncollecting  b5d7b6b8-4e5d-4b5e-8976-c72e99f57769\nSNOTEL:540_CA_SNTL 018cf1a1-f945-4097-9c47-0c4690538bb5\ncollecting  018cf1a1-f945-4097-9c47-0c4690538bb5\nSNOTEL:541_CA_SNTL 018cf1a1-f945-4097-9c47-0c4690538bb5\ncollecting  018cf1a1-f945-4097-9c47-0c4690538bb5\nSNOTEL:542_CO_SNTL a0c947fb-f00e-4331-ad3a-402908e08b57\ncollecting  a0c947fb-f00e-4331-ad3a-402908e08b57\nSNOTEL:543_UT_SNTL 19b5e6ce-c1a0-4cce-85f5-248c9f1abb6e\ncollecting  19b5e6ce-c1a0-4cce-85f5-248c9f1abb6e\nSNOTEL:548_NV_SNTL 875622b7-5253-43d2-8e0f-348767860eb9\ncollecting  875622b7-5253-43d2-8e0f-348767860eb9\nSNOTEL:549_NV_SNTL 875622b7-5253-43d2-8e0f-348767860eb9\ncollecting  875622b7-5253-43d2-8e0f-348767860eb9\nSNOTEL:550_ID_SNTL 36b98590-a7e6-4e00-8c7d-f0f3d25bafec\ncollecting  36b98590-a7e6-4e00-8c7d-f0f3d25bafec\nSNOTEL:552_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nSNOTEL:553_WA_SNTL cdfc27f0-b990-45f7-bac6-7c674cd157ac\ncollecting  cdfc27f0-b990-45f7-bac6-7c674cd157ac\nSNOTEL:554_WY_SNTL df7e906a-07f3-4a46-b9a5-0200427c26f7\ncollecting  df7e906a-07f3-4a46-b9a5-0200427c26f7\nSNOTEL:555_WY_SNTL 695bed09-0ad9-406e-b489-69408adeea06\ncollecting  695bed09-0ad9-406e-b489-69408adeea06\nSNOTEL:556_CO_SNTL e833aad1-6da3-4413-b25e-b2ab5b2029c0\ncollecting  e833aad1-6da3-4413-b25e-b2ab5b2029c0\nSNOTEL:558_OR_SNTL dd7f64aa-3556-409b-bc86-71dc28b6fd45\ncollecting  dd7f64aa-3556-409b-bc86-71dc28b6fd45\nSNOTEL:559_UT_SNTL 50d7ad3f-57f0-45e1-911d-b0efff9deb8f\ncollecting  50d7ad3f-57f0-45e1-911d-b0efff9deb8f\nSNOTEL:560_WY_SNTL 692c41af-2210-4dd6-916d-c99e76807447\ncollecting  692c41af-2210-4dd6-916d-c99e76807447\nSNOTEL:562_MT_SNTL 89a7b0ef-1ec8-490f-9207-c93aa57a147f\ncollecting  89a7b0ef-1ec8-490f-9207-c93aa57a147f\nSNOTEL:563_OR_SNTL 408b4482-ff63-4a1f-9cf9-ca820cd51b39\ncollecting  408b4482-ff63-4a1f-9cf9-ca820cd51b39\nSNOTEL:564_CO_SNTL f9f7132d-56a2-43e2-baba-312f34dbaeed\ncollecting  f9f7132d-56a2-43e2-baba-312f34dbaeed\nSNOTEL:565_CO_SNTL 8c45801f-6377-42e1-ae0a-9b53593ff843\ncollecting  8c45801f-6377-42e1-ae0a-9b53593ff843\nSNOTEL:566_UT_SNTL c7f13d88-b4af-4484-9547-52197f778c08\ncollecting  c7f13d88-b4af-4484-9547-52197f778c08\nSNOTEL:568_MT_SNTL 10a46ea0-13da-4cef-9aa6-ff48aa46881c\ncollecting  10a46ea0-13da-4cef-9aa6-ff48aa46881c\nSNOTEL:569_NV_SNTL 42a21eb9-10fd-4986-825b-9ea55ce13935\ncollecting  42a21eb9-10fd-4986-825b-9ea55ce13935\nSNOTEL:570_NV_SNTL a5080351-033f-4cfa-ad27-019fc84e052c\ncollecting  a5080351-033f-4cfa-ad27-019fc84e052c\nSNOTEL:571_WY_SNTL ab89875f-3b86-4c6a-8d66-767017570dfc\ncollecting  ab89875f-3b86-4c6a-8d66-767017570dfc\nSNOTEL:572_UT_SNTL 20b97bae-60d6-466d-aca9-334d9b2d63b6\ncollecting  20b97bae-60d6-466d-aca9-334d9b2d63b6\nSNOTEL:575_CA_SNTL 01be2cc7-ef77-4e4d-80ed-c4f8139162c3\ncollecting  01be2cc7-ef77-4e4d-80ed-c4f8139162c3\nSNOTEL:576_MT_SNTL 3330a979-98df-4a38-ac3f-0b45374f8e3d\ncollecting  3330a979-98df-4a38-ac3f-0b45374f8e3d\nSNOTEL:577_WY_SNTL 491846d3-f81a-4777-b49f-0a0c74168395\ncollecting  491846d3-f81a-4777-b49f-0a0c74168395\nSNOTEL:579_UT_SNTL 064d7f3e-8bbd-49cd-b360-5c4590a19b9e\ncollecting  064d7f3e-8bbd-49cd-b360-5c4590a19b9e\nSNOTEL:580_CO_SNTL 4ddee9a9-feaf-4daa-9100-0d4188f7b827\ncollecting  4ddee9a9-feaf-4daa-9100-0d4188f7b827\nSNOTEL:582_UT_SNTL b59438b9-aadc-4899-9afb-fe71974c5c3a\ncollecting  b59438b9-aadc-4899-9afb-fe71974c5c3a\nSNOTEL:583_UT_SNTL 24cd85fa-6aee-4556-bb8a-b6696eb72a19\ncollecting  24cd85fa-6aee-4556-bb8a-b6696eb72a19\nSNOTEL:585_WY_SNTL 0adbba56-85f8-49e0-9b11-000622238d91\ncollecting  0adbba56-85f8-49e0-9b11-000622238d91\nSNOTEL:587_CA_SNTL 74f8c8bc-2f60-4232-b447-43459d5d22f0\ncollecting  74f8c8bc-2f60-4232-b447-43459d5d22f0\nSNOTEL:588_ID_SNTL cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\ncollecting  cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\nSNOTEL:589_CO_SNTL 57e18a9f-8327-4d6c-b2b4-c2b337341e86\ncollecting  57e18a9f-8327-4d6c-b2b4-c2b337341e86\nSNOTEL:590_MT_SNTL e467a17f-a729-4938-87a1-ac25157eed63\ncollecting  e467a17f-a729-4938-87a1-ac25157eed63\nSNOTEL:591_WA_SNTL cdfc27f0-b990-45f7-bac6-7c674cd157ac\ncollecting  cdfc27f0-b990-45f7-bac6-7c674cd157ac\nSNOTEL:592_UT_SNTL 24cd85fa-6aee-4556-bb8a-b6696eb72a19\ncollecting  24cd85fa-6aee-4556-bb8a-b6696eb72a19\nSNOTEL:593_UT_SNTL 55d3e9a6-e153-43c3-a66c-cd60711ff4a9\ncollecting  55d3e9a6-e153-43c3-a66c-cd60711ff4a9\nSNOTEL:596_UT_SNTL 10162c55-772d-49d2-8b1b-b1f9c86254b2\ncollecting  10162c55-772d-49d2-8b1b-b1f9c86254b2\nSNOTEL:597_WY_SNTL 695bed09-0ad9-406e-b489-69408adeea06\ncollecting  695bed09-0ad9-406e-b489-69408adeea06\nSNOTEL:600_ID_SNTL b5d7b6b8-4e5d-4b5e-8976-c72e99f57769\ncollecting  b5d7b6b8-4e5d-4b5e-8976-c72e99f57769\nSNOTEL:603_MT_SNTL 678f1920-0bc3-4687-af71-35d61030b1a0\ncollecting  678f1920-0bc3-4687-af71-35d61030b1a0\nSNOTEL:604_MT_SNTL 4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\ncollecting  4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\nSNOTEL:605_OR_SNTL e27143af-fdc0-4f6f-8a28-f57b78da75dc\ncollecting  e27143af-fdc0-4f6f-8a28-f57b78da75dc\nSNOTEL:606_WA_SNTL 47e625fa-e2df-43ce-84dd-8ac21fdda75a\ncollecting  47e625fa-e2df-43ce-84dd-8ac21fdda75a\nSNOTEL:607_CO_SNTL 02cf33c2-c8e2-48b9-bf72-92506e97e251\ncollecting  02cf33c2-c8e2-48b9-bf72-92506e97e251\nSNOTEL:610_ID_SNTL d17b55c5-7848-4b79-a735-983aec995c52\ncollecting  d17b55c5-7848-4b79-a735-983aec995c52\nSNOTEL:612_UT_SNTL 0a820e12-033b-45d6-9ef9-d70f4c5e5b63\ncollecting  0a820e12-033b-45d6-9ef9-d70f4c5e5b63\nSNOTEL:613_MT_SNTL d37ccc2e-7127-48ec-9425-2e77681c3635\ncollecting  d37ccc2e-7127-48ec-9425-2e77681c3635\nSNOTEL:614_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nSNOTEL:615_NV_SNTL d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nSNOTEL:616_WY_SNTL 692c41af-2210-4dd6-916d-c99e76807447\ncollecting  692c41af-2210-4dd6-916d-c99e76807447\nSNOTEL:617_AZ_SNTL f6a782f0-4b17-4989-815c-2398b77b09dd\ncollecting  f6a782f0-4b17-4989-815c-2398b77b09dd\nSNOTEL:619_OR_SNTL fe33672e-7ea7-4c5d-8639-96b2cc7edb0c\ncollecting  fe33672e-7ea7-4c5d-8639-96b2cc7edb0c\nSNOTEL:620_ID_SNTL 3330a979-98df-4a38-ac3f-0b45374f8e3d\ncollecting  3330a979-98df-4a38-ac3f-0b45374f8e3d\nSNOTEL:621_UT_SNTL 7b636fe2-1760-45c5-afce-505f2e927163\ncollecting  7b636fe2-1760-45c5-afce-505f2e927163\nSNOTEL:622_CO_SNTL 87d6c782-c43b-473f-84da-d2a519d8f1fc\ncollecting  87d6c782-c43b-473f-84da-d2a519d8f1fc\nSNOTEL:623_ID_SNTL b5d7b6b8-4e5d-4b5e-8976-c72e99f57769\ncollecting  b5d7b6b8-4e5d-4b5e-8976-c72e99f57769\nSNOTEL:625_WY_SNTL 253c2443-b820-4c13-bf6d-ba7a5426f52d\ncollecting  253c2443-b820-4c13-bf6d-ba7a5426f52d\nSNOTEL:626_UT_SNTL 55d3e9a6-e153-43c3-a66c-cd60711ff4a9\ncollecting  55d3e9a6-e153-43c3-a66c-cd60711ff4a9\nSNOTEL:627_ID_SNTL 830bc2b9-592d-4334-842a-213ba4c0a347\ncollecting  830bc2b9-592d-4334-842a-213ba4c0a347\nSNOTEL:628_UT_SNTL eeb0a123-9482-4946-ab3f-9e63541cb655\ncollecting  eeb0a123-9482-4946-ab3f-9e63541cb655\nSNOTEL:629_CO_SNTL 5c4dff48-4afa-4922-949e-f64db583f392\ncollecting  5c4dff48-4afa-4922-949e-f64db583f392\nSNOTEL:633_CA_SNTL 74f8c8bc-2f60-4232-b447-43459d5d22f0\ncollecting  74f8c8bc-2f60-4232-b447-43459d5d22f0\nSNOTEL:637_ID_SNTL 36b98590-a7e6-4e00-8c7d-f0f3d25bafec\ncollecting  36b98590-a7e6-4e00-8c7d-f0f3d25bafec\nSNOTEL:640_AZ_SNTL c0e85162-6ff4-401b-b01e-cc6d7a51eac0\ncollecting  c0e85162-6ff4-401b-b01e-cc6d7a51eac0\nSNOTEL:642_WA_SNTL 9474e816-b673-4e6d-83e0-28c274945bef\ncollecting  9474e816-b673-4e6d-83e0-28c274945bef\nSNOTEL:643_UT_SNTL 50d7ad3f-57f0-45e1-911d-b0efff9deb8f\ncollecting  50d7ad3f-57f0-45e1-911d-b0efff9deb8f\nSNOTEL:644_WA_SNTL dc31c331-837b-4b59-b184-051321e9489c\ncollecting  dc31c331-837b-4b59-b184-051321e9489c\nSNOTEL:645_ID_SNTL 0d0b742e-c324-4140-8f62-746210d79080\ncollecting  0d0b742e-c324-4140-8f62-746210d79080\nSNOTEL:646_MT_SNTL 89a7b0ef-1ec8-490f-9207-c93aa57a147f\ncollecting  89a7b0ef-1ec8-490f-9207-c93aa57a147f\nSNOTEL:647_OR_SNTL c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\ncollecting  c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\nSNOTEL:648_WA_SNTL 6c94136d-5040-4c09-b1fd-c02dbff210e6\ncollecting  6c94136d-5040-4c09-b1fd-c02dbff210e6\nSNOTEL:649_MT_SNTL dca30f20-582e-40ef-be6d-aa7858be4baa\ncollecting  dca30f20-582e-40ef-be6d-aa7858be4baa\nSNOTEL:650_ID_SNTL cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\ncollecting  cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\nSNOTEL:651_OR_SNTL e13f9c1b-dca0-4c63-a64c-76f6bc725156\ncollecting  e13f9c1b-dca0-4c63-a64c-76f6bc725156\nSNOTEL:652_NV_SNTL d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nSNOTEL:654_ID_SNTL 0cda0c4a-405b-4e16-8922-964190929d80\ncollecting  0cda0c4a-405b-4e16-8922-964190929d80\nSNOTEL:655_OR_SNTL e13f9c1b-dca0-4c63-a64c-76f6bc725156\ncollecting  e13f9c1b-dca0-4c63-a64c-76f6bc725156\nSNOTEL:657_MT_SNTL 99a2d4a9-63a0-43a7-976d-2a1ed822186d\ncollecting  99a2d4a9-63a0-43a7-976d-2a1ed822186d\nSNOTEL:658_CO_SNTL e833aad1-6da3-4413-b25e-b2ab5b2029c0\ncollecting  e833aad1-6da3-4413-b25e-b2ab5b2029c0\nSNOTEL:661_WY_SNTL 679fe096-5475-4d4d-b0f8-81e32de889aa\ncollecting  679fe096-5475-4d4d-b0f8-81e32de889aa\nSNOTEL:662_MT_SNTL cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\ncollecting  cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\nSNOTEL:663_CO_SNTL f9f7132d-56a2-43e2-baba-312f34dbaeed\ncollecting  f9f7132d-56a2-43e2-baba-312f34dbaeed\nSNOTEL:664_MT_SNTL d37ccc2e-7127-48ec-9425-2e77681c3635\ncollecting  d37ccc2e-7127-48ec-9425-2e77681c3635\nSNOTEL:665_NM_SNTL 2ca6a37f-67f5-4905-864b-ddf98d956ebb\ncollecting  2ca6a37f-67f5-4905-864b-ddf98d956ebb\nSNOTEL:666_OR_SNTL e13f9c1b-dca0-4c63-a64c-76f6bc725156\ncollecting  e13f9c1b-dca0-4c63-a64c-76f6bc725156\nSNOTEL:667_MT_SNTL 89a7b0ef-1ec8-490f-9207-c93aa57a147f\ncollecting  89a7b0ef-1ec8-490f-9207-c93aa57a147f\nSNOTEL:669_CO_SNTL 3527e00e-1aee-46ce-ad9d-8122cff4c202\ncollecting  3527e00e-1aee-46ce-ad9d-8122cff4c202\nSNOTEL:670_MT_SNTL f46e7d90-a754-44a8-b262-63f5c401a0ab\ncollecting  f46e7d90-a754-44a8-b262-63f5c401a0ab\nSNOTEL:671_OR_SNTL c64f2bf3-90f0-4a96-b3a8-9f8db46dce92\ncollecting  c64f2bf3-90f0-4a96-b3a8-9f8db46dce92\nSNOTEL:672_WA_SNTL 360f1bcc-aa60-4052-a18a-b33da5745ff4\ncollecting  360f1bcc-aa60-4052-a18a-b33da5745ff4\nSNOTEL:673_WY_SNTL 8116acfb-8035-4d34-b9b9-b0af2c5697df\ncollecting  8116acfb-8035-4d34-b9b9-b0af2c5697df\nSNOTEL:676_WY_SNTL 692c41af-2210-4dd6-916d-c99e76807447\ncollecting  692c41af-2210-4dd6-916d-c99e76807447\nSNOTEL:677_ID_SNTL 6bf06917-011b-4029-8fbe-a8dfea3bc598\ncollecting  6bf06917-011b-4029-8fbe-a8dfea3bc598\nSNOTEL:680_CO_SNTL 94d9d95f-32b2-470d-95f8-dbd843d6def3\ncollecting  94d9d95f-32b2-470d-95f8-dbd843d6def3\nSNOTEL:681_WA_SNTL 47e625fa-e2df-43ce-84dd-8ac21fdda75a\ncollecting  47e625fa-e2df-43ce-84dd-8ac21fdda75a\nSNOTEL:682_CO_SNTL 35aecf7e-5f0b-4533-995c-3cb4165d44b5\ncollecting  35aecf7e-5f0b-4533-995c-3cb4165d44b5\nSNOTEL:683_WY_SNTL e776d9b6-2180-4f50-90bf-77f7b920fc3b\ncollecting  e776d9b6-2180-4f50-90bf-77f7b920fc3b\nSNOTEL:684_UT_SNTL eeb0a123-9482-4946-ab3f-9e63541cb655\ncollecting  eeb0a123-9482-4946-ab3f-9e63541cb655\nSNOTEL:686_UT_SNTL 0a820e12-033b-45d6-9ef9-d70f4c5e5b63\ncollecting  0a820e12-033b-45d6-9ef9-d70f4c5e5b63\nSNOTEL:689_WY_SNTL ce76ce00-c8b5-4597-8ca3-1ec9db795b50\ncollecting  ce76ce00-c8b5-4597-8ca3-1ec9db795b50\nSNOTEL:690_MT_SNTL 517aefce-a617-4251-acb9-c5faf0b7fdf3\ncollecting  517aefce-a617-4251-acb9-c5faf0b7fdf3\nSNOTEL:691_UT_SNTL 9813294e-a28e-45c0-976d-a6fa65d87927\ncollecting  9813294e-a28e-45c0-976d-a6fa65d87927\nSNOTEL:693_MT_SNTL dca30f20-582e-40ef-be6d-aa7858be4baa\ncollecting  dca30f20-582e-40ef-be6d-aa7858be4baa\nSNOTEL:694_UT_SNTL 7b636fe2-1760-45c5-afce-505f2e927163\ncollecting  7b636fe2-1760-45c5-afce-505f2e927163\nSNOTEL:696_MT_SNTL f46e7d90-a754-44a8-b262-63f5c401a0ab\ncollecting  f46e7d90-a754-44a8-b262-63f5c401a0ab\nSNOTEL:698_NV_SNTL 5308a803-69e6-43cd-89db-66e93f9f83af\ncollecting  5308a803-69e6-43cd-89db-66e93f9f83af\nSNOTEL:699_WA_SNTL 47e625fa-e2df-43ce-84dd-8ac21fdda75a\ncollecting  47e625fa-e2df-43ce-84dd-8ac21fdda75a\nSNOTEL:700_MT_SNTL 630bae26-a6cc-4a36-bbe5-40dc15b38dea\ncollecting  630bae26-a6cc-4a36-bbe5-40dc15b38dea\nSNOTEL:702_WA_SNTL bb65d7a1-a5d5-4c89-9ef9-f0f1db06cc58\ncollecting  bb65d7a1-a5d5-4c89-9ef9-f0f1db06cc58\nSNOTEL:704_ID_SNTL 0bd47ec1-0e3c-43bf-a491-534d06beb19f\ncollecting  0bd47ec1-0e3c-43bf-a491-534d06beb19f\nSNOTEL:706_OR_SNTL 0a0ea690-5b73-4459-91d5-a6948d132a48\ncollecting  0a0ea690-5b73-4459-91d5-a6948d132a48\nSNOTEL:708_NM_SNTL 6afdc499-9686-4451-b207-13df777df662\ncollecting  6afdc499-9686-4451-b207-13df777df662\nSNOTEL:709_CO_SNTL 02cf33c2-c8e2-48b9-bf72-92506e97e251\ncollecting  02cf33c2-c8e2-48b9-bf72-92506e97e251\nSNOTEL:710_OR_SNTL ea185683-4427-44c3-84e1-706cf16781ce\ncollecting  ea185683-4427-44c3-84e1-706cf16781ce\nSNOTEL:712_OR_SNTL b98777af-0c7c-44f7-9c03-85d6d412856c\ncollecting  b98777af-0c7c-44f7-9c03-85d6d412856c\nSNOTEL:713_CO_SNTL 7610b45e-5652-4604-ab5b-99344f71616b\ncollecting  7610b45e-5652-4604-ab5b-99344f71616b\nSNOTEL:714_UT_SNTL ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\ncollecting  ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\nSNOTEL:715_NM_SNTL e3473791-6153-49bc-a2ed-0b1e3e243942\ncollecting  e3473791-6153-49bc-a2ed-0b1e3e243942\nSNOTEL:717_CO_SNTL d64197fc-0723-4c61-9ce8-ff2554e24154\ncollecting  d64197fc-0723-4c61-9ce8-ff2554e24154\nSNOTEL:718_CO_SNTL 9f0599d8-81f3-4ab5-b275-48a6ddaaae5b\ncollecting  9f0599d8-81f3-4ab5-b275-48a6ddaaae5b\nSNOTEL:720_UT_SNTL a28a3caf-eea2-414f-8003-62ac82daaafa\ncollecting  a28a3caf-eea2-414f-8003-62ac82daaafa\nSNOTEL:723_UT_SNTL 93b8483d-a510-42ff-865e-33d5a8784dc4\ncollecting  93b8483d-a510-42ff-865e-33d5a8784dc4\nSNOTEL:724_CA_SNTL f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nSNOTEL:726_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nSNOTEL:727_MT_SNTL cacaa17b-0b1b-4fe2-a4c1-7728e6c154c1\ncollecting  cacaa17b-0b1b-4fe2-a4c1-7728e6c154c1\nSNOTEL:728_WA_SNTL dc31c331-837b-4b59-b184-051321e9489c\ncollecting  dc31c331-837b-4b59-b184-051321e9489c\nSNOTEL:729_OR_SNTL ea185683-4427-44c3-84e1-706cf16781ce\ncollecting  ea185683-4427-44c3-84e1-706cf16781ce\nSNOTEL:730_WY_SNTL df7e906a-07f3-4a46-b9a5-0200427c26f7\ncollecting  df7e906a-07f3-4a46-b9a5-0200427c26f7\nSNOTEL:731_WY_SNTL 3b5bfd37-070c-4ee9-a470-c9338851e270\ncollecting  3b5bfd37-070c-4ee9-a470-c9338851e270\nSNOTEL:732_WY_SNTL 8116acfb-8035-4d34-b9b9-b0af2c5697df\ncollecting  8116acfb-8035-4d34-b9b9-b0af2c5697df\nSNOTEL:733_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nSNOTEL:734_WA_SNTL bfda850c-3027-4e91-afcb-cca5e73e4a03\ncollecting  bfda850c-3027-4e91-afcb-cca5e73e4a03\nSNOTEL:735_ID_SNTL cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\ncollecting  cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\nSNOTEL:736_OR_SNTL c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\ncollecting  c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\nSNOTEL:738_ID_SNTL 0d0b742e-c324-4140-8f62-746210d79080\ncollecting  0d0b742e-c324-4140-8f62-746210d79080\nSNOTEL:739_CO_SNTL 35eee1cd-f92a-4ba5-af03-fb5347490f41\ncollecting  35eee1cd-f92a-4ba5-af03-fb5347490f41\nSNOTEL:741_ID_SNTL 6bf06917-011b-4029-8fbe-a8dfea3bc598\ncollecting  6bf06917-011b-4029-8fbe-a8dfea3bc598\nSNOTEL:742_UT_SNTL ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\ncollecting  ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\nSNOTEL:743_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nSNOTEL:744_NM_SNTL 6afdc499-9686-4451-b207-13df777df662\ncollecting  6afdc499-9686-4451-b207-13df777df662\nSNOTEL:745_OR_SNTL 5e252b65-58dd-421f-a0db-3d4669bfb235\ncollecting  5e252b65-58dd-421f-a0db-3d4669bfb235\nSNOTEL:746_NV_SNTL 5308a803-69e6-43cd-89db-66e93f9f83af\ncollecting  5308a803-69e6-43cd-89db-66e93f9f83af\nSNOTEL:747_ID_SNTL b1077b69-4b02-458e-8a4b-e68695ac534f\ncollecting  b1077b69-4b02-458e-8a4b-e68695ac534f\nSNOTEL:748_WA_SNTL cdfc27f0-b990-45f7-bac6-7c674cd157ac\ncollecting  cdfc27f0-b990-45f7-bac6-7c674cd157ac\nSNOTEL:749_ID_SNTL ce76ce00-c8b5-4597-8ca3-1ec9db795b50\ncollecting  ce76ce00-c8b5-4597-8ca3-1ec9db795b50\nSNOTEL:751_WY_SNTL 02c3ec4a-8de4-4284-9ec1-5a942d3d098e\ncollecting  02c3ec4a-8de4-4284-9ec1-5a942d3d098e\nSNOTEL:752_ID_SNTL b1077b69-4b02-458e-8a4b-e68695ac534f\ncollecting  b1077b69-4b02-458e-8a4b-e68695ac534f\nSNOTEL:754_MT_SNTL e467a17f-a729-4938-87a1-ac25157eed63\ncollecting  e467a17f-a729-4938-87a1-ac25157eed63\nSNOTEL:755_NM_SNTL 43be1328-02b0-4cc1-8e9b-75842908cee3\ncollecting  43be1328-02b0-4cc1-8e9b-75842908cee3\nSNOTEL:756_OR_SNTL 0a0ea690-5b73-4459-91d5-a6948d132a48\ncollecting  0a0ea690-5b73-4459-91d5-a6948d132a48\nSNOTEL:757_NM_SNTL 1135e377-22e6-4290-b4cd-e6739de7fd8a\ncollecting  1135e377-22e6-4290-b4cd-e6739de7fd8a\nSNOTEL:761_ID_SNTL 6bf06917-011b-4029-8fbe-a8dfea3bc598\ncollecting  6bf06917-011b-4029-8fbe-a8dfea3bc598\nSNOTEL:762_CO_SNTL 85f0acd8-4008-472d-bf40-e35e0e2934e4\ncollecting  85f0acd8-4008-472d-bf40-e35e0e2934e4\nSNOTEL:763_UT_SNTL 7bc3c413-4709-4ddd-a2ad-99f6cad9436c\ncollecting  7bc3c413-4709-4ddd-a2ad-99f6cad9436c\nSNOTEL:764_WY_SNTL 491846d3-f81a-4777-b49f-0a0c74168395\ncollecting  491846d3-f81a-4777-b49f-0a0c74168395\nSNOTEL:765_WY_SNTL df7e906a-07f3-4a46-b9a5-0200427c26f7\ncollecting  df7e906a-07f3-4a46-b9a5-0200427c26f7\nSNOTEL:767_OR_SNTL a6a9febf-ea16-4223-83d4-8e459e2af85a\ncollecting  a6a9febf-ea16-4223-83d4-8e459e2af85a\nSNOTEL:770_ID_SNTL 6bf06917-011b-4029-8fbe-a8dfea3bc598\ncollecting  6bf06917-011b-4029-8fbe-a8dfea3bc598\nSNOTEL:771_CA_SNTL 01be2cc7-ef77-4e4d-80ed-c4f8139162c3\ncollecting  01be2cc7-ef77-4e4d-80ed-c4f8139162c3\nSNOTEL:773_CO_SNTL efada0af-09bf-4013-a1c6-0837f8ff59c5\ncollecting  efada0af-09bf-4013-a1c6-0837f8ff59c5\nSNOTEL:777_WA_SNTL cdfc27f0-b990-45f7-bac6-7c674cd157ac\ncollecting  cdfc27f0-b990-45f7-bac6-7c674cd157ac\nSNOTEL:778_CA_SNTL 962f6718-ce02-4d13-b28c-e159d1adc2d4\ncollecting  962f6718-ce02-4d13-b28c-e159d1adc2d4\nSNOTEL:779_WY_SNTL df7e906a-07f3-4a46-b9a5-0200427c26f7\ncollecting  df7e906a-07f3-4a46-b9a5-0200427c26f7\nSNOTEL:780_CO_SNTL ce9da6bf-cf6e-4edb-b579-5a0853b2ed17\ncollecting  ce9da6bf-cf6e-4edb-b579-5a0853b2ed17\nSNOTEL:781_MT_SNTL 517aefce-a617-4251-acb9-c5faf0b7fdf3\ncollecting  517aefce-a617-4251-acb9-c5faf0b7fdf3\nSNOTEL:782_ID_SNTL da6ce150-5daf-4a91-9fdd-a85854462b08\ncollecting  da6ce150-5daf-4a91-9fdd-a85854462b08\nSNOTEL:784_CA_SNTL f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nSNOTEL:786_WY_SNTL de9c541b-ce5e-4cc6-9ddd-03f85dc5b3d5\ncollecting  de9c541b-ce5e-4cc6-9ddd-03f85dc5b3d5\nSNOTEL:787_MT_SNTL d37ccc2e-7127-48ec-9425-2e77681c3635\ncollecting  d37ccc2e-7127-48ec-9425-2e77681c3635\nSNOTEL:790_UT_SNTL c0568d62-49c7-4d9f-beba-ac0fb3e064c5\ncollecting  c0568d62-49c7-4d9f-beba-ac0fb3e064c5\nSNOTEL:791_WA_SNTL bfda850c-3027-4e91-afcb-cca5e73e4a03\ncollecting  bfda850c-3027-4e91-afcb-cca5e73e4a03\nSNOTEL:792_ID_SNTL f3332d55-ecc8-4644-9deb-180e42abb2eb\ncollecting  f3332d55-ecc8-4644-9deb-180e42abb2eb\nSNOTEL:793_CO_SNTL 8c45801f-6377-42e1-ae0a-9b53593ff843\ncollecting  8c45801f-6377-42e1-ae0a-9b53593ff843\nSNOTEL:794_OR_SNTL 0a0ea690-5b73-4459-91d5-a6948d132a48\ncollecting  0a0ea690-5b73-4459-91d5-a6948d132a48\nSNOTEL:795_UT_SNTL cfe58efd-ce2a-495a-90cd-6826f704ebee\ncollecting  cfe58efd-ce2a-495a-90cd-6826f704ebee\nSNOTEL:797_CO_SNTL 003fdfbd-c766-4312-b029-bd4cfba6ebef\ncollecting  003fdfbd-c766-4312-b029-bd4cfba6ebef\nSNOTEL:798_WY_SNTL 02c3ec4a-8de4-4284-9ec1-5a942d3d098e\ncollecting  02c3ec4a-8de4-4284-9ec1-5a942d3d098e\nSNOTEL:801_OR_SNTL ea185683-4427-44c3-84e1-706cf16781ce\ncollecting  ea185683-4427-44c3-84e1-706cf16781ce\nSNOTEL:803_ID_SNTL b5d7b6b8-4e5d-4b5e-8976-c72e99f57769\ncollecting  b5d7b6b8-4e5d-4b5e-8976-c72e99f57769\nSNOTEL:804_WA_SNTL cdfc27f0-b990-45f7-bac6-7c674cd157ac\ncollecting  cdfc27f0-b990-45f7-bac6-7c674cd157ac\nSNOTEL:805_ID_SNTL af0463d4-f20f-4d13-bd0f-5834e2e8717b\ncollecting  af0463d4-f20f-4d13-bd0f-5834e2e8717b\nSNOTEL:806_WY_SNTL 333458b2-c1a9-47a3-8ae0-92053ad28ae3\ncollecting  333458b2-c1a9-47a3-8ae0-92053ad28ae3\nSNOTEL:809_CA_SNTL f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nSNOTEL:810_OR_SNTL 5e252b65-58dd-421f-a0db-3d4669bfb235\ncollecting  5e252b65-58dd-421f-a0db-3d4669bfb235\nSNOTEL:811_NV_SNTL 875622b7-5253-43d2-8e0f-348767860eb9\ncollecting  875622b7-5253-43d2-8e0f-348767860eb9\nSNOTEL:812_OR_SNTL c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\ncollecting  c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\nSNOTEL:814_UT_SNTL eeb0a123-9482-4946-ab3f-9e63541cb655\ncollecting  eeb0a123-9482-4946-ab3f-9e63541cb655\nSNOTEL:815_OR_SNTL fe33672e-7ea7-4c5d-8639-96b2cc7edb0c\ncollecting  fe33672e-7ea7-4c5d-8639-96b2cc7edb0c\nSNOTEL:816_WY_SNTL 40c4f8cd-b0ca-4d37-b91e-b69e5dff7f9a\ncollecting  40c4f8cd-b0ca-4d37-b91e-b69e5dff7f9a\nSNOTEL:817_WA_SNTL 47e625fa-e2df-43ce-84dd-8ac21fdda75a\ncollecting  47e625fa-e2df-43ce-84dd-8ac21fdda75a\nSNOTEL:818_WY_SNTL 02c3ec4a-8de4-4284-9ec1-5a942d3d098e\ncollecting  02c3ec4a-8de4-4284-9ec1-5a942d3d098e\nSNOTEL:819_WY_SNTL 692c41af-2210-4dd6-916d-c99e76807447\ncollecting  692c41af-2210-4dd6-916d-c99e76807447\nSNOTEL:820_UT_SNTL eeb0a123-9482-4946-ab3f-9e63541cb655\ncollecting  eeb0a123-9482-4946-ab3f-9e63541cb655\nSNOTEL:822_WY_SNTL 695bed09-0ad9-406e-b489-69408adeea06\ncollecting  695bed09-0ad9-406e-b489-69408adeea06\nSNOTEL:823_UT_SNTL 2222b7b3-f48b-4cea-90bf-8e7245d002ea\ncollecting  2222b7b3-f48b-4cea-90bf-8e7245d002ea\nSNOTEL:824_WA_SNTL f78ea076-10a1-45dc-a848-c08e129c6a28\ncollecting  f78ea076-10a1-45dc-a848-c08e129c6a28\nSNOTEL:825_CO_SNTL 02cf33c2-c8e2-48b9-bf72-92506e97e251\ncollecting  02cf33c2-c8e2-48b9-bf72-92506e97e251\nSNOTEL:826_WY_SNTL 990e5974-9c60-4c9a-ba23-ddce13971178\ncollecting  990e5974-9c60-4c9a-ba23-ddce13971178\nSNOTEL:827_CO_SNTL d64197fc-0723-4c61-9ce8-ff2554e24154\ncollecting  d64197fc-0723-4c61-9ce8-ff2554e24154\nSNOTEL:830_ID_SNTL 36b98590-a7e6-4e00-8c7d-f0f3d25bafec\ncollecting  36b98590-a7e6-4e00-8c7d-f0f3d25bafec\nSNOTEL:831_WY_SNTL 551e2612-8a22-4c44-8290-78dc0e4af85d\ncollecting  551e2612-8a22-4c44-8290-78dc0e4af85d\nSNOTEL:832_WA_SNTL 6d0ff6eb-0411-4863-b4e7-90958db98115\ncollecting  6d0ff6eb-0411-4863-b4e7-90958db98115\nSNOTEL:833_UT_SNTL 50d7ad3f-57f0-45e1-911d-b0efff9deb8f\ncollecting  50d7ad3f-57f0-45e1-911d-b0efff9deb8f\nSNOTEL:834_CA_SNTL f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nSNOTEL:835_MT_SNTL cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\ncollecting  cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\nSNOTEL:837_WY_SNTL 491846d3-f81a-4777-b49f-0a0c74168395\ncollecting  491846d3-f81a-4777-b49f-0a0c74168395\nSNOTEL:838_CO_SNTL f9f7132d-56a2-43e2-baba-312f34dbaeed\ncollecting  f9f7132d-56a2-43e2-baba-312f34dbaeed\nSNOTEL:839_CO_SNTL 0c31f316-6718-4a43-a9f1-ed552e45bd0f\ncollecting  0c31f316-6718-4a43-a9f1-ed552e45bd0f\nSNOTEL:840_CO_SNTL 3789f7a5-5743-4005-844d-602dadb33030\ncollecting  3789f7a5-5743-4005-844d-602dadb33030\nSNOTEL:841_WA_SNTL 6d0ff6eb-0411-4863-b4e7-90958db98115\ncollecting  6d0ff6eb-0411-4863-b4e7-90958db98115\nSNOTEL:842_CO_SNTL f62e6b4d-7f9d-4139-bac4-59f084fb09cd\ncollecting  f62e6b4d-7f9d-4139-bac4-59f084fb09cd\nSNOTEL:844_UT_SNTL 93b8483d-a510-42ff-865e-33d5a8784dc4\ncollecting  93b8483d-a510-42ff-865e-33d5a8784dc4\nSNOTEL:845_ID_SNTL 695c7749-a3b8-4158-bd14-59d1f2c3e736\ncollecting  695c7749-a3b8-4158-bd14-59d1f2c3e736\nSNOTEL:847_MT_SNTL dca30f20-582e-40ef-be6d-aa7858be4baa\ncollecting  dca30f20-582e-40ef-be6d-aa7858be4baa\nSNOTEL:848_CA_SNTL f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nSNOTEL:849_NV_SNTL 38793f95-324b-4f01-b1a7-45e1c9353bc1\ncollecting  38793f95-324b-4f01-b1a7-45e1c9353bc1\nSNOTEL:850_MT_SNTL 4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\ncollecting  4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\nSNOTEL:852_WY_SNTL 8116acfb-8035-4d34-b9b9-b0af2c5697df\ncollecting  8116acfb-8035-4d34-b9b9-b0af2c5697df\nSNOTEL:854_NM_SNTL 9c43edf0-541f-4dbb-9fe1-42cc83d453bd\ncollecting  9c43edf0-541f-4dbb-9fe1-42cc83d453bd\nSNOTEL:855_ID_SNTL c66f40ed-f72e-4012-991c-1f3726e5c8ad\ncollecting  c66f40ed-f72e-4012-991c-1f3726e5c8ad\nSNOTEL:857_CO_SNTL 2ca6a37f-67f5-4905-864b-ddf98d956ebb\ncollecting  2ca6a37f-67f5-4905-864b-ddf98d956ebb\nSNOTEL:858_MT_SNTL b1936012-0d31-4b92-8d60-c24903b2e569\ncollecting  b1936012-0d31-4b92-8d60-c24903b2e569\nSNOTEL:859_WY_SNTL 8116acfb-8035-4d34-b9b9-b0af2c5697df\ncollecting  8116acfb-8035-4d34-b9b9-b0af2c5697df\nSNOTEL:861_AZ_SNTL a2588440-600e-41da-b2b9-1f5632ecdef6\ncollecting  a2588440-600e-41da-b2b9-1f5632ecdef6\nSNOTEL:862_MT_SNTL e776d9b6-2180-4f50-90bf-77f7b920fc3b\ncollecting  e776d9b6-2180-4f50-90bf-77f7b920fc3b\nSNOTEL:863_WA_SNTL bb65d7a1-a5d5-4c89-9ef9-f0f1db06cc58\ncollecting  bb65d7a1-a5d5-4c89-9ef9-f0f1db06cc58\nSNOTEL:864_UT_SNTL 0a820e12-033b-45d6-9ef9-d70f4c5e5b63\ncollecting  0a820e12-033b-45d6-9ef9-d70f4c5e5b63\nSNOTEL:865_UT_SNTL ad44deb7-e56d-47bd-8d64-7147493e0aee\ncollecting  ad44deb7-e56d-47bd-8d64-7147493e0aee\nSNOTEL:868_WY_SNTL 551e2612-8a22-4c44-8290-78dc0e4af85d\ncollecting  551e2612-8a22-4c44-8290-78dc0e4af85d\nSNOTEL:869_CO_SNTL 8c45801f-6377-42e1-ae0a-9b53593ff843\ncollecting  8c45801f-6377-42e1-ae0a-9b53593ff843\nSNOTEL:871_ID_SNTL 5308a803-69e6-43cd-89db-66e93f9f83af\ncollecting  5308a803-69e6-43cd-89db-66e93f9f83af\nSNOTEL:872_WY_SNTL ab89875f-3b86-4c6a-8d66-767017570dfc\ncollecting  ab89875f-3b86-4c6a-8d66-767017570dfc\nSNOTEL:873_OR_SNTL 631ed3c9-7863-4e7c-86fa-4bfb043f2851\ncollecting  631ed3c9-7863-4e7c-86fa-4bfb043f2851\nSNOTEL:874_CO_SNTL 3789f7a5-5743-4005-844d-602dadb33030\ncollecting  3789f7a5-5743-4005-844d-602dadb33030\nSNOTEL:876_MT_SNTL 99a2d4a9-63a0-43a7-976d-2a1ed822186d\ncollecting  99a2d4a9-63a0-43a7-976d-2a1ed822186d\nSNOTEL:877_AZ_SNTL 0aeaffd7-9089-49e7-85ad-2314f32cbf7c\ncollecting  0aeaffd7-9089-49e7-85ad-2314f32cbf7c\nSNOTEL:878_WY_SNTL 692c41af-2210-4dd6-916d-c99e76807447\ncollecting  692c41af-2210-4dd6-916d-c99e76807447\nSNOTEL:895_ID_SNTL f3332d55-ecc8-4644-9deb-180e42abb2eb\ncollecting  f3332d55-ecc8-4644-9deb-180e42abb2eb\nSNOTEL:896_UT_SNTL 10162c55-772d-49d2-8b1b-b1f9c86254b2\ncollecting  10162c55-772d-49d2-8b1b-b1f9c86254b2\nSNOTEL:897_WA_SNTL 360f1bcc-aa60-4052-a18a-b33da5745ff4\ncollecting  360f1bcc-aa60-4052-a18a-b33da5745ff4\nSNOTEL:899_WA_SNTL 360f1bcc-aa60-4052-a18a-b33da5745ff4\ncollecting  360f1bcc-aa60-4052-a18a-b33da5745ff4\nSNOTEL:901_MT_SNTL 89a7b0ef-1ec8-490f-9207-c93aa57a147f\ncollecting  89a7b0ef-1ec8-490f-9207-c93aa57a147f\nSNOTEL:902_AZ_SNTL 1135e377-22e6-4290-b4cd-e6739de7fd8a\ncollecting  1135e377-22e6-4290-b4cd-e6739de7fd8a\nSNOTEL:904_CO_SNTL 0d9f0708-5e8d-4eb8-b946-6441ef955516\ncollecting  0d9f0708-5e8d-4eb8-b946-6441ef955516\nSNOTEL:905_CO_SNTL 9e5bc091-13c7-46ec-8c17-8e315b7e535c\ncollecting  9e5bc091-13c7-46ec-8c17-8e315b7e535c\nSNOTEL:906_UT_SNTL 93b8483d-a510-42ff-865e-33d5a8784dc4\ncollecting  93b8483d-a510-42ff-865e-33d5a8784dc4\nSNOTEL:907_UT_SNTL ad44deb7-e56d-47bd-8d64-7147493e0aee\ncollecting  ad44deb7-e56d-47bd-8d64-7147493e0aee\nSNOTEL:909_WA_SNTL e6d48180-814d-494b-99cc-0be5cd1a0eaf\ncollecting  e6d48180-814d-494b-99cc-0be5cd1a0eaf\nSNOTEL:911_WA_SNTL 360f1bcc-aa60-4052-a18a-b33da5745ff4\ncollecting  360f1bcc-aa60-4052-a18a-b33da5745ff4\nSNOTEL:912_WA_SNTL 8e7f826f-8dc9-490a-9282-98d899a07cc7\ncollecting  8e7f826f-8dc9-490a-9282-98d899a07cc7\nSNOTEL:913_CO_SNTL 02cf33c2-c8e2-48b9-bf72-92506e97e251\ncollecting  02cf33c2-c8e2-48b9-bf72-92506e97e251\nSNOTEL:915_ID_SNTL 830bc2b9-592d-4334-842a-213ba4c0a347\ncollecting  830bc2b9-592d-4334-842a-213ba4c0a347\nSNOTEL:917_MT_SNTL 9ea23099-dd30-4b26-9de7-5d42d5dae87b\ncollecting  9ea23099-dd30-4b26-9de7-5d42d5dae87b\nSNOTEL:918_MT_SNTL 2f5c1968-2c34-4539-a9f4-38298d0de925\ncollecting  2f5c1968-2c34-4539-a9f4-38298d0de925\nSNOTEL:919_MT_SNTL eab40c22-0c15-4291-a6ce-e085a7f0f1e4\ncollecting  eab40c22-0c15-4291-a6ce-e085a7f0f1e4\nSNOTEL:920_SD_SNTL ab89875f-3b86-4c6a-8d66-767017570dfc\ncollecting  ab89875f-3b86-4c6a-8d66-767017570dfc\nSNOTEL:921_NM_SNTL 9c43edf0-541f-4dbb-9fe1-42cc83d453bd\ncollecting  9c43edf0-541f-4dbb-9fe1-42cc83d453bd\nSNOTEL:922_NM_SNTL 9c43edf0-541f-4dbb-9fe1-42cc83d453bd\ncollecting  9c43edf0-541f-4dbb-9fe1-42cc83d453bd\nSNOTEL:923_WY_SNTL 990e5974-9c60-4c9a-ba23-ddce13971178\ncollecting  990e5974-9c60-4c9a-ba23-ddce13971178\nSNOTEL:924_MT_SNTL b1936012-0d31-4b92-8d60-c24903b2e569\ncollecting  b1936012-0d31-4b92-8d60-c24903b2e569\nSNOTEL:925_OR_SNTL e13f9c1b-dca0-4c63-a64c-76f6bc725156\ncollecting  e13f9c1b-dca0-4c63-a64c-76f6bc725156\nSNOTEL:926_ID_SNTL af0463d4-f20f-4d13-bd0f-5834e2e8717b\ncollecting  af0463d4-f20f-4d13-bd0f-5834e2e8717b\nSNOTEL:927_AZ_SNTL c0e85162-6ff4-401b-b01e-cc6d7a51eac0\ncollecting  c0e85162-6ff4-401b-b01e-cc6d7a51eac0\nSNOTEL:929_MT_SNTL e467a17f-a729-4938-87a1-ac25157eed63\ncollecting  e467a17f-a729-4938-87a1-ac25157eed63\nSNOTEL:930_MT_SNTL 4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\ncollecting  4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\nSNOTEL:935_CO_SNTL 7f215a89-2a17-42f0-a2fb-f18fbc888cef\ncollecting  7f215a89-2a17-42f0-a2fb-f18fbc888cef\nSNOTEL:936_CO_SNTL a5366d95-7b9d-4b1b-a16f-99e56fab08f5\ncollecting  a5366d95-7b9d-4b1b-a16f-99e56fab08f5\nSNOTEL:937_CO_SNTL 7a266524-6e76-4d06-963f-6f977e356574\ncollecting  7a266524-6e76-4d06-963f-6f977e356574\nSNOTEL:939_CO_SNTL fde3221a-9ce3-45a9-857f-bd196b07aa05\ncollecting  fde3221a-9ce3-45a9-857f-bd196b07aa05\nSNOTEL:941_WA_SNTL 2f266b81-aad3-4c26-ac69-1bd04a208bf7\ncollecting  2f266b81-aad3-4c26-ac69-1bd04a208bf7\nSNOTEL:942_WA_SNTL cdb446bc-e801-404f-9911-9ba5c687f6af\ncollecting  cdb446bc-e801-404f-9911-9ba5c687f6af\nSNOTEL:945_OR_SNTL 0a0ea690-5b73-4459-91d5-a6948d132a48\ncollecting  0a0ea690-5b73-4459-91d5-a6948d132a48\nSNOTEL:972_UT_SNTL 10162c55-772d-49d2-8b1b-b1f9c86254b2\ncollecting  10162c55-772d-49d2-8b1b-b1f9c86254b2\nSNOTEL:974_WA_SNTL 9448e70e-32ff-4c47-b6e7-ccb1df91743b\ncollecting  9448e70e-32ff-4c47-b6e7-ccb1df91743b\nSNOTEL:975_WA_SNTL 47e625fa-e2df-43ce-84dd-8ac21fdda75a\ncollecting  47e625fa-e2df-43ce-84dd-8ac21fdda75a\nSNOTEL:978_ID_SNTL da6ce150-5daf-4a91-9fdd-a85854462b08\ncollecting  da6ce150-5daf-4a91-9fdd-a85854462b08\nSNOTEL:981_MT_SNTL e776d9b6-2180-4f50-90bf-77f7b920fc3b\ncollecting  e776d9b6-2180-4f50-90bf-77f7b920fc3b\nSNOTEL:982_WY_SNTL ab89875f-3b86-4c6a-8d66-767017570dfc\ncollecting  ab89875f-3b86-4c6a-8d66-767017570dfc\nSNOTEL:984_WA_SNTL f78ea076-10a1-45dc-a848-c08e129c6a28\ncollecting  f78ea076-10a1-45dc-a848-c08e129c6a28\nSNOTEL:988_ID_SNTL 2f5c1968-2c34-4539-a9f4-38298d0de925\ncollecting  2f5c1968-2c34-4539-a9f4-38298d0de925\nSNOTEL:989_ID_SNTL f78ea076-10a1-45dc-a848-c08e129c6a28\ncollecting  f78ea076-10a1-45dc-a848-c08e129c6a28\nSNOTEL:990_WA_SNTL cde149fe-708b-4a35-bea8-959eb9da4e0b\ncollecting  cde149fe-708b-4a35-bea8-959eb9da4e0b\nSNOTEL:992_UT_SNTL 064d7f3e-8bbd-49cd-b360-5c4590a19b9e\ncollecting  064d7f3e-8bbd-49cd-b360-5c4590a19b9e\nSNOTEL:998_WA_SNTL cde149fe-708b-4a35-bea8-959eb9da4e0b\ncollecting  cde149fe-708b-4a35-bea8-959eb9da4e0b\nSNOTEL:999_WA_SNTL e6d48180-814d-494b-99cc-0be5cd1a0eaf\ncollecting  e6d48180-814d-494b-99cc-0be5cd1a0eaf\n",
  "history_begin_time" : 1647830110073,
  "history_end_time" : 1647830658551,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "z5unfx94vck",
  "history_input" : "\n\n# reminder that if you are installing libraries in a Google Colab instance you will be prompted to restart your kernal\n\nfrom all_dependencies import *\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nstation_cell_mapper_file = f\"{github_dir}/data/ready_for_training/station_cell_mapping.csv\"\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\nstart_date = '2022-03-07'\nend_date = '2022-03-13'\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n     print(\"exists exiting..\")\n     exit()\n\nstation_cell_mapper_df = pd.read_csv(station_cell_mapper_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\n\nfor ind in station_cell_mapper_df.index:\n    \n    try:\n      \n  \t  print(station_cell_mapper_df['station_id'][ind], station_cell_mapper_df['cell_id'][ind])\n  \t  current_cell_id = station_cell_mapper_df['cell_id'][ind]\n  \t  print(\"collecting \", current_cell_id)\n\n  \t  longitude = station_cell_mapper_df['lon'][ind]\n  \t  latitude = station_cell_mapper_df['lat'][ind]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      \n  \t  print(e)\n  \t  pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\n\n",
  "history_output" : "Results will be saved to /Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-03-07_2022-03-13.csv\nexists exiting..\n",
  "history_begin_time" : 1647826055731,
  "history_end_time" : 1647826061863,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "py3uwwuzjqm",
  "history_input" : "\n\n# reminder that if you are installing libraries in a Google Colab instance you will be prompted to restart your kernal\n\nfrom all_dependencies import *\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nstation_cell_mapper_file = f\"{github_dir}/data/ready_for_training/station_cell_mapping.csv\"\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\nstart_date = '2022-03-07'\nend_date = '2022-03-13'\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n     print(\"exists exiting..\")\n     exit()\n\nstation_cell_mapper_df = pd.read_csv(station_cell_mapper_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\n\nfor ind in station_cell_mapper_df.index:\n    \n    try:\n      \n  \t  print(station_cell_mapper_df['station_id'][ind], station_cell_mapper_df['cell_id'][ind])\n  \t  current_cell_id = station_cell_mapper_df['cell_id'][ind]\n  \t  print(\"collecting \", current_cell_id)\n\n  \t  longitude = station_cell_mapper_df['lon'][ind]\n  \t  latitude = station_cell_mapper_df['lat'][ind]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      \n  \t  print(e)\n  \t  pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\n\n",
  "history_output" : "Results will be saved to /Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-03-07_2022-03-13.csv\nexists exiting..\n",
  "history_begin_time" : 1647225904301,
  "history_end_time" : 1647225908430,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "QmE2DAgzZDv8",
  "history_input" : "\n\n# reminder that if you are installing libraries in a Google Colab instance you will be prompted to restart your kernal\n\nfrom all_dependencies import *\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nstation_cell_mapper_file = f\"{github_dir}/data/ready_for_training/station_cell_mapping.csv\"\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\nstart_date = '2022-03-07'\nend_date = '2022-03-13'\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n     print(\"exists exiting..\")\n     exit()\n\nstation_cell_mapper_df = pd.read_csv(station_cell_mapper_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\n\nfor ind in station_cell_mapper_df.index:\n    \n    try:\n      \n  \t  print(station_cell_mapper_df['station_id'][ind], station_cell_mapper_df['cell_id'][ind])\n  \t  current_cell_id = station_cell_mapper_df['cell_id'][ind]\n  \t  print(\"collecting \", current_cell_id)\n\n  \t  longitude = station_cell_mapper_df['lon'][ind]\n  \t  latitude = station_cell_mapper_df['lat'][ind]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      \n  \t  print(e)\n  \t  pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\n\n",
  "history_output" : "Results will be saved to /Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-03-07_2022-03-13.csv\nCDEC:ADM 76b55900-eb3d-4d25-a538-f74302ffe72d\ncollecting  76b55900-eb3d-4d25-a538-f74302ffe72d\nCDEC:AGP f191fe19-0e81-4bc9-9980-29738a05a49b\ncollecting  f191fe19-0e81-4bc9-9980-29738a05a49b\nCDEC:ALP f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nCDEC:BCB 0a54de9c-d804-4681-9f7f-9f770a0f6d2e\ncollecting  0a54de9c-d804-4681-9f7f-9f770a0f6d2e\nCDEC:BCH 4f383fb2-6cc7-48a8-9bdb-9c5d150e6eae\ncollecting  4f383fb2-6cc7-48a8-9bdb-9c5d150e6eae\nCDEC:BFL 7cf8af73-1abf-40ad-9788-0d757201eeb0\ncollecting  7cf8af73-1abf-40ad-9788-0d757201eeb0\nCDEC:BGP 30641173-db10-4320-ab1e-c46e765a9011\ncollecting  30641173-db10-4320-ab1e-c46e765a9011\nCDEC:BIM 30ab5128-9a8f-4446-b781-faf8bafb677f\ncollecting  30ab5128-9a8f-4446-b781-faf8bafb677f\nCDEC:BKL df01bf44-46b8-4541-b0a4-ed1fae16ac38\ncollecting  df01bf44-46b8-4541-b0a4-ed1fae16ac38\nCDEC:BLA 6dd37e24-0a9c-4749-8ab6-7e26d42925d6\ncollecting  6dd37e24-0a9c-4749-8ab6-7e26d42925d6\nCDEC:BLC 018cf1a1-f945-4097-9c47-0c4690538bb5\ncollecting  018cf1a1-f945-4097-9c47-0c4690538bb5\nCDEC:BLD 962f6718-ce02-4d13-b28c-e159d1adc2d4\ncollecting  962f6718-ce02-4d13-b28c-e159d1adc2d4\nCDEC:BLK c89dc6ca-6d69-41ce-954d-b51f64aaacb1\ncollecting  c89dc6ca-6d69-41ce-954d-b51f64aaacb1\nCDEC:BLS 4bb8fe22-653c-4611-a3d8-de5b2c62d13d\ncollecting  4bb8fe22-653c-4611-a3d8-de5b2c62d13d\nCDEC:BMW d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nCDEC:BNK 65565709-caca-4ed5-a8b6-2794da371708\ncollecting  65565709-caca-4ed5-a8b6-2794da371708\nCDEC:BSK c89dc6ca-6d69-41ce-954d-b51f64aaacb1\ncollecting  c89dc6ca-6d69-41ce-954d-b51f64aaacb1\nCDEC:CDP 76b55900-eb3d-4d25-a538-f74302ffe72d\ncollecting  76b55900-eb3d-4d25-a538-f74302ffe72d\nCDEC:CHM f11515e9-f2a0-4f8c-9f2d-12b9e2dc8569\ncollecting  f11515e9-f2a0-4f8c-9f2d-12b9e2dc8569\nCDEC:CHP cc66f524-dd2b-4d3f-bf96-4941edca2879\ncollecting  cc66f524-dd2b-4d3f-bf96-4941edca2879\nCDEC:CRL 09288a61-d120-4cee-ac46-5a275a8f005c\ncollecting  09288a61-d120-4cee-ac46-5a275a8f005c\nCDEC:CSL 51ebe834-adf4-474e-871e-28ebca2bd0cc\ncollecting  51ebe834-adf4-474e-871e-28ebca2bd0cc\nCDEC:CSV 4f383fb2-6cc7-48a8-9bdb-9c5d150e6eae\ncollecting  4f383fb2-6cc7-48a8-9bdb-9c5d150e6eae\nCDEC:CWD 4f383fb2-6cc7-48a8-9bdb-9c5d150e6eae\ncollecting  4f383fb2-6cc7-48a8-9bdb-9c5d150e6eae\nCDEC:CWF 76b55900-eb3d-4d25-a538-f74302ffe72d\ncollecting  76b55900-eb3d-4d25-a538-f74302ffe72d\nCDEC:CXS c89dc6ca-6d69-41ce-954d-b51f64aaacb1\ncollecting  c89dc6ca-6d69-41ce-954d-b51f64aaacb1\nCDEC:DAN 70bfdc00-dbd2-4c44-8039-04a547f91f76\ncollecting  70bfdc00-dbd2-4c44-8039-04a547f91f76\nCDEC:DDM 01be2cc7-ef77-4e4d-80ed-c4f8139162c3\ncollecting  01be2cc7-ef77-4e4d-80ed-c4f8139162c3\nCDEC:DPO 9023330c-2766-4585-b6fe-63593c519e03\ncollecting  9023330c-2766-4585-b6fe-63593c519e03\nCDEC:DSS 76b55900-eb3d-4d25-a538-f74302ffe72d\ncollecting  76b55900-eb3d-4d25-a538-f74302ffe72d\nCDEC:EBB 962f6718-ce02-4d13-b28c-e159d1adc2d4\ncollecting  962f6718-ce02-4d13-b28c-e159d1adc2d4\nCDEC:EP5 f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nCDEC:FDC c89dc6ca-6d69-41ce-954d-b51f64aaacb1\ncollecting  c89dc6ca-6d69-41ce-954d-b51f64aaacb1\nCDEC:FLL d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nCDEC:FRN f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nCDEC:FRW ddc760c7-dc6e-4fd4-ac1a-987ba3f79748\ncollecting  ddc760c7-dc6e-4fd4-ac1a-987ba3f79748\nCDEC:GEM 690ae8d4-c0d0-4dad-a7c4-67f3df07cc78\ncollecting  690ae8d4-c0d0-4dad-a7c4-67f3df07cc78\nCDEC:GIN dbf421d4-0295-4a9f-9e20-88ac299360b1\ncollecting  dbf421d4-0295-4a9f-9e20-88ac299360b1\nCDEC:GKS 51ebe834-adf4-474e-871e-28ebca2bd0cc\ncollecting  51ebe834-adf4-474e-871e-28ebca2bd0cc\nCDEC:GNF 5ec8a57d-8d5f-4331-b1fb-9d766f42991a\ncollecting  5ec8a57d-8d5f-4331-b1fb-9d766f42991a\nCDEC:GNL 403090bc-fc9e-44fb-921b-f7eea63e9740\ncollecting  403090bc-fc9e-44fb-921b-f7eea63e9740\nCDEC:GRM 232ef8b4-938f-42d7-a6e4-647d5280edd2\ncollecting  232ef8b4-938f-42d7-a6e4-647d5280edd2\nCDEC:GRV cc8b7ef5-1c86-4bd2-8cb9-969c7df1884e\ncollecting  cc8b7ef5-1c86-4bd2-8cb9-969c7df1884e\nCDEC:GRZ 018cf1a1-f945-4097-9c47-0c4690538bb5\ncollecting  018cf1a1-f945-4097-9c47-0c4690538bb5\nCDEC:HGM d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nCDEC:HIG 65565709-caca-4ed5-a8b6-2794da371708\ncollecting  65565709-caca-4ed5-a8b6-2794da371708\nCDEC:HMB df01bf44-46b8-4541-b0a4-ed1fae16ac38\ncollecting  df01bf44-46b8-4541-b0a4-ed1fae16ac38\nCDEC:HNT 39dd8dce-b4a1-4db5-bc31-fba72181cf5e\ncollecting  39dd8dce-b4a1-4db5-bc31-fba72181cf5e\nCDEC:HOR d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nCDEC:HRK df01bf44-46b8-4541-b0a4-ed1fae16ac38\ncollecting  df01bf44-46b8-4541-b0a4-ed1fae16ac38\nCDEC:HRS 49b01e43-f719-450f-b7c6-556b08e9ef4d\ncollecting  49b01e43-f719-450f-b7c6-556b08e9ef4d\nCDEC:HVN d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nCDEC:HYS 51ebe834-adf4-474e-871e-28ebca2bd0cc\ncollecting  51ebe834-adf4-474e-871e-28ebca2bd0cc\nCDEC:IDC 018cf1a1-f945-4097-9c47-0c4690538bb5\ncollecting  018cf1a1-f945-4097-9c47-0c4690538bb5\nCDEC:IDP 018cf1a1-f945-4097-9c47-0c4690538bb5\ncollecting  018cf1a1-f945-4097-9c47-0c4690538bb5\nCDEC:INN 018cf1a1-f945-4097-9c47-0c4690538bb5\ncollecting  018cf1a1-f945-4097-9c47-0c4690538bb5\nCDEC:KTL 147d5eb4-e574-47e4-994a-8a2908c06050\ncollecting  147d5eb4-e574-47e4-994a-8a2908c06050\nCDEC:LBD 74f8c8bc-2f60-4232-b447-43459d5d22f0\ncollecting  74f8c8bc-2f60-4232-b447-43459d5d22f0\nCDEC:LLP 6dd37e24-0a9c-4749-8ab6-7e26d42925d6\ncollecting  6dd37e24-0a9c-4749-8ab6-7e26d42925d6\nCDEC:LVM 01be2cc7-ef77-4e4d-80ed-c4f8139162c3\ncollecting  01be2cc7-ef77-4e4d-80ed-c4f8139162c3\nCDEC:LVT 01be2cc7-ef77-4e4d-80ed-c4f8139162c3\ncollecting  01be2cc7-ef77-4e4d-80ed-c4f8139162c3\nCDEC:MDW 018cf1a1-f945-4097-9c47-0c4690538bb5\ncollecting  018cf1a1-f945-4097-9c47-0c4690538bb5\nCDEC:MED 00c4db22-a423-41a4-ada6-a8b1b04153a4\ncollecting  00c4db22-a423-41a4-ada6-a8b1b04153a4\nCDEC:MHP ec0952b6-f119-4f40-bf47-343d71245ddc\ncollecting  ec0952b6-f119-4f40-bf47-343d71245ddc\nCDEC:MNT 74f8c8bc-2f60-4232-b447-43459d5d22f0\ncollecting  74f8c8bc-2f60-4232-b447-43459d5d22f0\nCDEC:MRL d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nCDEC:MSK d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nCDEC:MTM b5c7343d-a4a9-4da9-aee3-36539a545af6\ncollecting  b5c7343d-a4a9-4da9-aee3-36539a545af6\nCDEC:PDS 17da8ab4-6dd8-481e-a025-7574765ef9b1\ncollecting  17da8ab4-6dd8-481e-a025-7574765ef9b1\nCDEC:PET 65565709-caca-4ed5-a8b6-2794da371708\ncollecting  65565709-caca-4ed5-a8b6-2794da371708\nCDEC:PSC 4f383fb2-6cc7-48a8-9bdb-9c5d150e6eae\ncollecting  4f383fb2-6cc7-48a8-9bdb-9c5d150e6eae\nCDEC:PSN 74f8c8bc-2f60-4232-b447-43459d5d22f0\ncollecting  74f8c8bc-2f60-4232-b447-43459d5d22f0\nCDEC:QUA d563ff8c-31c3-44a9-8fd3-2f8bc68b21b4\ncollecting  d563ff8c-31c3-44a9-8fd3-2f8bc68b21b4\nCDEC:RBP 51ebe834-adf4-474e-871e-28ebca2bd0cc\ncollecting  51ebe834-adf4-474e-871e-28ebca2bd0cc\nCDEC:RCC 018cf1a1-f945-4097-9c47-0c4690538bb5\ncollecting  018cf1a1-f945-4097-9c47-0c4690538bb5\nCDEC:RCK cbe04952-a2ae-4525-98c5-a644c9a5ddc5\ncollecting  cbe04952-a2ae-4525-98c5-a644c9a5ddc5\nCDEC:RP2 f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nCDEC:RRM 7cf8af73-1abf-40ad-9788-0d757201eeb0\ncollecting  7cf8af73-1abf-40ad-9788-0d757201eeb0\nCDEC:RTL 147d5eb4-e574-47e4-994a-8a2908c06050\ncollecting  147d5eb4-e574-47e4-994a-8a2908c06050\nCDEC:SCN c89dc6ca-6d69-41ce-954d-b51f64aaacb1\ncollecting  c89dc6ca-6d69-41ce-954d-b51f64aaacb1\nCDEC:SCT 7cf8af73-1abf-40ad-9788-0d757201eeb0\ncollecting  7cf8af73-1abf-40ad-9788-0d757201eeb0\nCDEC:SDF 65565709-caca-4ed5-a8b6-2794da371708\ncollecting  65565709-caca-4ed5-a8b6-2794da371708\nCDEC:SDW 74f8c8bc-2f60-4232-b447-43459d5d22f0\ncollecting  74f8c8bc-2f60-4232-b447-43459d5d22f0\nCDEC:SHM 7cf8af73-1abf-40ad-9788-0d757201eeb0\ncollecting  7cf8af73-1abf-40ad-9788-0d757201eeb0\nCDEC:SIL c89dc6ca-6d69-41ce-954d-b51f64aaacb1\ncollecting  c89dc6ca-6d69-41ce-954d-b51f64aaacb1\nCDEC:SLM 962f6718-ce02-4d13-b28c-e159d1adc2d4\ncollecting  962f6718-ce02-4d13-b28c-e159d1adc2d4\nCDEC:SLT 65565709-caca-4ed5-a8b6-2794da371708\ncollecting  65565709-caca-4ed5-a8b6-2794da371708\nCDEC:SPS 01be2cc7-ef77-4e4d-80ed-c4f8139162c3\ncollecting  01be2cc7-ef77-4e4d-80ed-c4f8139162c3\nCDEC:SPT 962f6718-ce02-4d13-b28c-e159d1adc2d4\ncollecting  962f6718-ce02-4d13-b28c-e159d1adc2d4\nCDEC:SQV f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nCDEC:SSM 147d5eb4-e574-47e4-994a-8a2908c06050\ncollecting  147d5eb4-e574-47e4-994a-8a2908c06050\nCDEC:SWM 6e96bf06-cbc5-45b5-a36b-e37864226099\ncollecting  6e96bf06-cbc5-45b5-a36b-e37864226099\nCDEC:TCC f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nCDEC:TK2 f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nCDEC:TMR c7e3f62c-a812-4342-8e4c-3a6a5dd96255\ncollecting  c7e3f62c-a812-4342-8e4c-3a6a5dd96255\nCDEC:TNY a8e91cfa-724a-4114-a9d4-291785ff31f8\ncollecting  a8e91cfa-724a-4114-a9d4-291785ff31f8\nCDEC:TUM 2dde4be2-b6fd-47e8-b53d-88b59d74fde1\ncollecting  2dde4be2-b6fd-47e8-b53d-88b59d74fde1\nCDEC:UBC b2e9cb6b-b45a-4cab-8333-247cb4c0b51b\ncollecting  b2e9cb6b-b45a-4cab-8333-247cb4c0b51b\nCDEC:UTY 46f21569-8ecf-4c46-b65b-d80fa83a20d5\ncollecting  46f21569-8ecf-4c46-b65b-d80fa83a20d5\nCDEC:VLC 643c05b6-03bc-4024-8000-2228f4b5a7ad\ncollecting  643c05b6-03bc-4024-8000-2228f4b5a7ad\nCDEC:VRG fb078c7e-4975-4c7f-8f42-180386ac8c3c\ncollecting  fb078c7e-4975-4c7f-8f42-180386ac8c3c\nCDEC:VVL 51ebe834-adf4-474e-871e-28ebca2bd0cc\ncollecting  51ebe834-adf4-474e-871e-28ebca2bd0cc\nCDEC:WC3 f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nCDEC:WHW dba335b6-9d97-4a89-9ff3-888a8a45575f\ncollecting  dba335b6-9d97-4a89-9ff3-888a8a45575f\nCDEC:WTM 057fb61e-ce45-4423-9ef2-b52d8c1237e9\ncollecting  057fb61e-ce45-4423-9ef2-b52d8c1237e9\nCDEC:WWC 50f7b567-4066-4437-a335-71aff4c94a2c\ncollecting  50f7b567-4066-4437-a335-71aff4c94a2c\nSNOTEL:1000_OR_SNTL 5e252b65-58dd-421f-a0db-3d4669bfb235\ncollecting  5e252b65-58dd-421f-a0db-3d4669bfb235\nSNOTEL:1005_CO_SNTL efada0af-09bf-4013-a1c6-0837f8ff59c5\ncollecting  efada0af-09bf-4013-a1c6-0837f8ff59c5\nSNOTEL:1009_MT_SNTL 517aefce-a617-4251-acb9-c5faf0b7fdf3\ncollecting  517aefce-a617-4251-acb9-c5faf0b7fdf3\nSNOTEL:1010_OR_SNTL 0a0ea690-5b73-4459-91d5-a6948d132a48\ncollecting  0a0ea690-5b73-4459-91d5-a6948d132a48\nSNOTEL:1011_WA_SNTL e6d48180-814d-494b-99cc-0be5cd1a0eaf\ncollecting  e6d48180-814d-494b-99cc-0be5cd1a0eaf\nSNOTEL:1012_WA_SNTL cdfc27f0-b990-45f7-bac6-7c674cd157ac\ncollecting  cdfc27f0-b990-45f7-bac6-7c674cd157ac\nSNOTEL:1013_UT_SNTL 2222b7b3-f48b-4cea-90bf-8e7245d002ea\ncollecting  2222b7b3-f48b-4cea-90bf-8e7245d002ea\nSNOTEL:1014_CO_SNTL cad51334-b3af-4c23-85c3-451c3447560a\ncollecting  cad51334-b3af-4c23-85c3-451c3447560a\nSNOTEL:1015_WY_SNTL 8116acfb-8035-4d34-b9b9-b0af2c5697df\ncollecting  8116acfb-8035-4d34-b9b9-b0af2c5697df\nSNOTEL:1016_ID_SNTL c66f40ed-f72e-4012-991c-1f3726e5c8ad\ncollecting  c66f40ed-f72e-4012-991c-1f3726e5c8ad\nSNOTEL:1017_NM_SNTL 6afdc499-9686-4451-b207-13df777df662\ncollecting  6afdc499-9686-4451-b207-13df777df662\nSNOTEL:1030_CO_SNTL 02cf33c2-c8e2-48b9-bf72-92506e97e251\ncollecting  02cf33c2-c8e2-48b9-bf72-92506e97e251\nSNOTEL:1031_CO_SNTL 8c45801f-6377-42e1-ae0a-9b53593ff843\ncollecting  8c45801f-6377-42e1-ae0a-9b53593ff843\nSNOTEL:1032_CO_SNTL 9f0599d8-81f3-4ab5-b275-48a6ddaaae5b\ncollecting  9f0599d8-81f3-4ab5-b275-48a6ddaaae5b\nSNOTEL:1033_CO_SNTL 86257c69-a8f1-43b1-9e07-73129e2c3fbc\ncollecting  86257c69-a8f1-43b1-9e07-73129e2c3fbc\nSNOTEL:1034_NM_SNTL 43be1328-02b0-4cc1-8e9b-75842908cee3\ncollecting  43be1328-02b0-4cc1-8e9b-75842908cee3\nSNOTEL:1039_UT_SNTL eeb0a123-9482-4946-ab3f-9e63541cb655\ncollecting  eeb0a123-9482-4946-ab3f-9e63541cb655\nSNOTEL:1040_CO_SNTL f62e6b4d-7f9d-4139-bac4-59f084fb09cd\ncollecting  f62e6b4d-7f9d-4139-bac4-59f084fb09cd\nSNOTEL:1043_WA_SNTL c59f438c-f00a-476a-938e-efd828e0d083\ncollecting  c59f438c-f00a-476a-938e-efd828e0d083\nSNOTEL:1044_OR_SNTL 7acd0d51-ff30-42a3-9338-590432bd0e43\ncollecting  7acd0d51-ff30-42a3-9338-590432bd0e43\nSNOTEL:1045_WY_SNTL 3b5bfd37-070c-4ee9-a470-c9338851e270\ncollecting  3b5bfd37-070c-4ee9-a470-c9338851e270\nSNOTEL:1046_WY_SNTL 3b5bfd37-070c-4ee9-a470-c9338851e270\ncollecting  3b5bfd37-070c-4ee9-a470-c9338851e270\nSNOTEL:1048_NM_SNTL 43be1328-02b0-4cc1-8e9b-75842908cee3\ncollecting  43be1328-02b0-4cc1-8e9b-75842908cee3\nSNOTEL:1050_CA_SNTL d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nSNOTEL:1051_CA_SNTL c89dc6ca-6d69-41ce-954d-b51f64aaacb1\ncollecting  c89dc6ca-6d69-41ce-954d-b51f64aaacb1\nSNOTEL:1052_CA_SNTL 74f8c8bc-2f60-4232-b447-43459d5d22f0\ncollecting  74f8c8bc-2f60-4232-b447-43459d5d22f0\nSNOTEL:1053_ID_SNTL 2f5c1968-2c34-4539-a9f4-38298d0de925\ncollecting  2f5c1968-2c34-4539-a9f4-38298d0de925\nSNOTEL:1054_UT_SNTL 10162c55-772d-49d2-8b1b-b1f9c86254b2\ncollecting  10162c55-772d-49d2-8b1b-b1f9c86254b2\nSNOTEL:1058_CO_SNTL c340219b-307b-412b-9368-b50639bd372d\ncollecting  c340219b-307b-412b-9368-b50639bd372d\nSNOTEL:1061_CO_SNTL 02cf33c2-c8e2-48b9-bf72-92506e97e251\ncollecting  02cf33c2-c8e2-48b9-bf72-92506e97e251\nSNOTEL:1065_UT_SNTL 24cd85fa-6aee-4556-bb8a-b6696eb72a19\ncollecting  24cd85fa-6aee-4556-bb8a-b6696eb72a19\nSNOTEL:1066_UT_SNTL 24cd85fa-6aee-4556-bb8a-b6696eb72a19\ncollecting  24cd85fa-6aee-4556-bb8a-b6696eb72a19\nSNOTEL:1067_CA_SNTL c89dc6ca-6d69-41ce-954d-b51f64aaacb1\ncollecting  c89dc6ca-6d69-41ce-954d-b51f64aaacb1\nSNOTEL:1068_WA_SNTL bfda850c-3027-4e91-afcb-cca5e73e4a03\ncollecting  bfda850c-3027-4e91-afcb-cca5e73e4a03\nSNOTEL:1077_OR_SNTL 5e252b65-58dd-421f-a0db-3d4669bfb235\ncollecting  5e252b65-58dd-421f-a0db-3d4669bfb235\nSNOTEL:1079_OR_SNTL f78ea076-10a1-45dc-a848-c08e129c6a28\ncollecting  f78ea076-10a1-45dc-a848-c08e129c6a28\nSNOTEL:1082_WY_SNTL ce76ce00-c8b5-4597-8ca3-1ec9db795b50\ncollecting  ce76ce00-c8b5-4597-8ca3-1ec9db795b50\nSNOTEL:1084_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nSNOTEL:1085_WA_SNTL 9474e816-b673-4e6d-83e0-28c274945bef\ncollecting  9474e816-b673-4e6d-83e0-28c274945bef\nSNOTEL:1098_UT_SNTL 2222b7b3-f48b-4cea-90bf-8e7245d002ea\ncollecting  2222b7b3-f48b-4cea-90bf-8e7245d002ea\nSNOTEL:1099_UT_SNTL ad44deb7-e56d-47bd-8d64-7147493e0aee\ncollecting  ad44deb7-e56d-47bd-8d64-7147493e0aee\nSNOTEL:1100_CO_SNTL b99b0ffd-6fa9-482c-8511-f7b87e705d35\ncollecting  b99b0ffd-6fa9-482c-8511-f7b87e705d35\nSNOTEL:1101_CO_SNTL e833aad1-6da3-4413-b25e-b2ab5b2029c0\ncollecting  e833aad1-6da3-4413-b25e-b2ab5b2029c0\nSNOTEL:1104_WA_SNTL cdfc27f0-b990-45f7-bac6-7c674cd157ac\ncollecting  cdfc27f0-b990-45f7-bac6-7c674cd157ac\nSNOTEL:1105_MT_SNTL f46e7d90-a754-44a8-b262-63f5c401a0ab\ncollecting  f46e7d90-a754-44a8-b262-63f5c401a0ab\nSNOTEL:1107_WA_SNTL 0f46ad2b-4b1f-4232-8e46-be7122d53b86\ncollecting  0f46ad2b-4b1f-4232-8e46-be7122d53b86\nSNOTEL:1109_WA_SNTL cdfc27f0-b990-45f7-bac6-7c674cd157ac\ncollecting  cdfc27f0-b990-45f7-bac6-7c674cd157ac\nSNOTEL:1110_NV_SNTL 8ca1aaab-07de-4532-a99f-4ab8bce2f862\ncollecting  8ca1aaab-07de-4532-a99f-4ab8bce2f862\nSNOTEL:1111_NV_SNTL 8ca1aaab-07de-4532-a99f-4ab8bce2f862\ncollecting  8ca1aaab-07de-4532-a99f-4ab8bce2f862\nSNOTEL:1113_UT_SNTL 2222b7b3-f48b-4cea-90bf-8e7245d002ea\ncollecting  2222b7b3-f48b-4cea-90bf-8e7245d002ea\nSNOTEL:1114_UT_SNTL 2222b7b3-f48b-4cea-90bf-8e7245d002ea\ncollecting  2222b7b3-f48b-4cea-90bf-8e7245d002ea\nSNOTEL:1115_UT_SNTL 2222b7b3-f48b-4cea-90bf-8e7245d002ea\ncollecting  2222b7b3-f48b-4cea-90bf-8e7245d002ea\nSNOTEL:1119_WY_SNTL 8116acfb-8035-4d34-b9b9-b0af2c5697df\ncollecting  8116acfb-8035-4d34-b9b9-b0af2c5697df\nSNOTEL:1120_CO_SNTL f62e6b4d-7f9d-4139-bac4-59f084fb09cd\ncollecting  f62e6b4d-7f9d-4139-bac4-59f084fb09cd\nSNOTEL:1121_AZ_SNTL c0e85162-6ff4-401b-b01e-cc6d7a51eac0\ncollecting  c0e85162-6ff4-401b-b01e-cc6d7a51eac0\nSNOTEL:1122_CO_SNTL e4473542-1804-41c0-82b2-eaddc245845d\ncollecting  e4473542-1804-41c0-82b2-eaddc245845d\nSNOTEL:1123_CO_SNTL e4473542-1804-41c0-82b2-eaddc245845d\ncollecting  e4473542-1804-41c0-82b2-eaddc245845d\nSNOTEL:1124_CO_SNTL aa0d6340-c817-48c9-8727-8d3457606381\ncollecting  aa0d6340-c817-48c9-8727-8d3457606381\nSNOTEL:1127_AZ_SNTL 1135e377-22e6-4290-b4cd-e6739de7fd8a\ncollecting  1135e377-22e6-4290-b4cd-e6739de7fd8a\nSNOTEL:1128_CO_SNTL f25cdbec-2f14-42c5-a6ef-a60f3a90caff\ncollecting  f25cdbec-2f14-42c5-a6ef-a60f3a90caff\nSNOTEL:1129_WA_SNTL 06ec1554-a0ea-41cf-85f8-43f4b48c7599\ncollecting  06ec1554-a0ea-41cf-85f8-43f4b48c7599\nSNOTEL:1131_WY_SNTL 02c3ec4a-8de4-4284-9ec1-5a942d3d098e\ncollecting  02c3ec4a-8de4-4284-9ec1-5a942d3d098e\nSNOTEL:1132_WY_SNTL c5a82752-3e4b-43ec-8011-9111b9bfcb89\ncollecting  c5a82752-3e4b-43ec-8011-9111b9bfcb89\nSNOTEL:1133_WY_SNTL 679fe096-5475-4d4d-b0f8-81e32de889aa\ncollecting  679fe096-5475-4d4d-b0f8-81e32de889aa\nSNOTEL:1134_WY_SNTL 990e5974-9c60-4c9a-ba23-ddce13971178\ncollecting  990e5974-9c60-4c9a-ba23-ddce13971178\nSNOTEL:1135_UT_SNTL 064d7f3e-8bbd-49cd-b360-5c4590a19b9e\ncollecting  064d7f3e-8bbd-49cd-b360-5c4590a19b9e\nSNOTEL:1136_NV_SNTL 875622b7-5253-43d2-8e0f-348767860eb9\ncollecting  875622b7-5253-43d2-8e0f-348767860eb9\nSNOTEL:1138_NM_SNTL eb1d889a-c427-49e1-95a1-fa6577002c9b\ncollecting  eb1d889a-c427-49e1-95a1-fa6577002c9b\nSNOTEL:1139_AZ_SNTL a2588440-600e-41da-b2b9-1f5632ecdef6\ncollecting  a2588440-600e-41da-b2b9-1f5632ecdef6\nSNOTEL:1140_AZ_SNTL 972ab3b1-7445-4f57-a1a1-c3be4c257869\ncollecting  972ab3b1-7445-4f57-a1a1-c3be4c257869\nSNOTEL:1141_CO_SNTL 09f879b9-4378-479e-949b-cdc3bec8f59f\ncollecting  09f879b9-4378-479e-949b-cdc3bec8f59f\nSNOTEL:1143_AZ_SNTL e925f8e6-6eee-4fa7-9034-41eb9917df5e\ncollecting  e925f8e6-6eee-4fa7-9034-41eb9917df5e\nSNOTEL:1144_MT_SNTL d37ccc2e-7127-48ec-9425-2e77681c3635\ncollecting  d37ccc2e-7127-48ec-9425-2e77681c3635\nSNOTEL:1146_UT_SNTL ba4b2f3f-c8e3-4535-9781-426e4f77ba4c\ncollecting  ba4b2f3f-c8e3-4535-9781-426e4f77ba4c\nSNOTEL:1147_NV_SNTL 38793f95-324b-4f01-b1a7-45e1c9353bc1\ncollecting  38793f95-324b-4f01-b1a7-45e1c9353bc1\nSNOTEL:1148_UT_SNTL 55d3e9a6-e153-43c3-a66c-cd60711ff4a9\ncollecting  55d3e9a6-e153-43c3-a66c-cd60711ff4a9\nSNOTEL:1149_UT_SNTL ad44deb7-e56d-47bd-8d64-7147493e0aee\ncollecting  ad44deb7-e56d-47bd-8d64-7147493e0aee\nSNOTEL:1150_NV_SNTL 38793f95-324b-4f01-b1a7-45e1c9353bc1\ncollecting  38793f95-324b-4f01-b1a7-45e1c9353bc1\nSNOTEL:1152_NV_SNTL 38793f95-324b-4f01-b1a7-45e1c9353bc1\ncollecting  38793f95-324b-4f01-b1a7-45e1c9353bc1\nSNOTEL:1154_UT_SNTL 55d3e9a6-e153-43c3-a66c-cd60711ff4a9\ncollecting  55d3e9a6-e153-43c3-a66c-cd60711ff4a9\nSNOTEL:1155_NV_SNTL 38793f95-324b-4f01-b1a7-45e1c9353bc1\ncollecting  38793f95-324b-4f01-b1a7-45e1c9353bc1\nSNOTEL:1156_UT_SNTL 7b636fe2-1760-45c5-afce-505f2e927163\ncollecting  7b636fe2-1760-45c5-afce-505f2e927163\nSNOTEL:1159_WA_SNTL dc31c331-837b-4b59-b184-051321e9489c\ncollecting  dc31c331-837b-4b59-b184-051321e9489c\nSNOTEL:1160_CO_SNTL 12bde9ee-0e0a-49ac-ab19-b410adb61b3c\ncollecting  12bde9ee-0e0a-49ac-ab19-b410adb61b3c\nSNOTEL:1161_CO_SNTL 9f0599d8-81f3-4ab5-b275-48a6ddaaae5b\ncollecting  9f0599d8-81f3-4ab5-b275-48a6ddaaae5b\nSNOTEL:1162_UT_SNTL c0568d62-49c7-4d9f-beba-ac0fb3e064c5\ncollecting  c0568d62-49c7-4d9f-beba-ac0fb3e064c5\nSNOTEL:1166_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nSNOTEL:1167_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nSNOTEL:1168_NM_SNTL e3473791-6153-49bc-a2ed-0b1e3e243942\ncollecting  e3473791-6153-49bc-a2ed-0b1e3e243942\nSNOTEL:1169_NM_SNTL e3473791-6153-49bc-a2ed-0b1e3e243942\ncollecting  e3473791-6153-49bc-a2ed-0b1e3e243942\nSNOTEL:1170_NM_SNTL e3473791-6153-49bc-a2ed-0b1e3e243942\ncollecting  e3473791-6153-49bc-a2ed-0b1e3e243942\nSNOTEL:1171_WA_SNTL 47e625fa-e2df-43ce-84dd-8ac21fdda75a\ncollecting  47e625fa-e2df-43ce-84dd-8ac21fdda75a\nSNOTEL:1172_NM_SNTL 674e34ce-8b77-422b-ab14-c6c3a0183e39\ncollecting  674e34ce-8b77-422b-ab14-c6c3a0183e39\nSNOTEL:1184_UT_SNTL 9813294e-a28e-45c0-976d-a6fa65d87927\ncollecting  9813294e-a28e-45c0-976d-a6fa65d87927\nSNOTEL:1185_CO_SNTL 548ff935-a421-4f4c-8eef-0bb19ed6c5f8\ncollecting  548ff935-a421-4f4c-8eef-0bb19ed6c5f8\nSNOTEL:1186_CO_SNTL cad51334-b3af-4c23-85c3-451c3447560a\ncollecting  cad51334-b3af-4c23-85c3-451c3447560a\nSNOTEL:1187_CO_SNTL f9f7132d-56a2-43e2-baba-312f34dbaeed\ncollecting  f9f7132d-56a2-43e2-baba-312f34dbaeed\nSNOTEL:1192_UT_SNTL a28a3caf-eea2-414f-8003-62ac82daaafa\ncollecting  a28a3caf-eea2-414f-8003-62ac82daaafa\nSNOTEL:1195_NV_SNTL f1f17cee-3fca-44bc-8974-b72d5f995a4a\ncollecting  f1f17cee-3fca-44bc-8974-b72d5f995a4a\nSNOTEL:1196_WY_SNTL 14c19b34-6359-4d3f-865e-0b9852a0e958\ncollecting  14c19b34-6359-4d3f-865e-0b9852a0e958\nSNOTEL:1197_UT_SNTL 55d3e9a6-e153-43c3-a66c-cd60711ff4a9\ncollecting  55d3e9a6-e153-43c3-a66c-cd60711ff4a9\nSNOTEL:1214_UT_SNTL 93b8483d-a510-42ff-865e-33d5a8784dc4\ncollecting  93b8483d-a510-42ff-865e-33d5a8784dc4\nSNOTEL:1215_UT_SNTL 20b97bae-60d6-466d-aca9-334d9b2d63b6\ncollecting  20b97bae-60d6-466d-aca9-334d9b2d63b6\nSNOTEL:1216_UT_SNTL 0a820e12-033b-45d6-9ef9-d70f4c5e5b63\ncollecting  0a820e12-033b-45d6-9ef9-d70f4c5e5b63\nSNOTEL:1222_UT_SNTL ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\ncollecting  ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\nSNOTEL:1223_UT_SNTL cfe58efd-ce2a-495a-90cd-6826f704ebee\ncollecting  cfe58efd-ce2a-495a-90cd-6826f704ebee\nSNOTEL:1224_UT_SNTL 9813294e-a28e-45c0-976d-a6fa65d87927\ncollecting  9813294e-a28e-45c0-976d-a6fa65d87927\nSNOTEL:1225_UT_SNTL 7bc3c413-4709-4ddd-a2ad-99f6cad9436c\ncollecting  7bc3c413-4709-4ddd-a2ad-99f6cad9436c\nSNOTEL:1226_UT_SNTL ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\ncollecting  ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\nSNOTEL:1227_UT_SNTL ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\ncollecting  ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\nSNOTEL:1228_UT_SNTL 9813294e-a28e-45c0-976d-a6fa65d87927\ncollecting  9813294e-a28e-45c0-976d-a6fa65d87927\nSNOTEL:1231_WA_SNTL 06ec1554-a0ea-41cf-85f8-43f4b48c7599\ncollecting  06ec1554-a0ea-41cf-85f8-43f4b48c7599\nSNOTEL:1236_UT_SNTL 19b5e6ce-c1a0-4cce-85f5-248c9f1abb6e\ncollecting  19b5e6ce-c1a0-4cce-85f5-248c9f1abb6e\nSNOTEL:1242_NV_SNTL d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nSNOTEL:1243_NV_SNTL a5080351-033f-4cfa-ad27-019fc84e052c\ncollecting  a5080351-033f-4cfa-ad27-019fc84e052c\nSNOTEL:1244_NV_SNTL 0efc68ba-5786-4c54-8028-e6f92efa6757\ncollecting  0efc68ba-5786-4c54-8028-e6f92efa6757\nSNOTEL:1247_UT_SNTL 93b8483d-a510-42ff-865e-33d5a8784dc4\ncollecting  93b8483d-a510-42ff-865e-33d5a8784dc4\nSNOTEL:1248_UT_SNTL 55d3e9a6-e153-43c3-a66c-cd60711ff4a9\ncollecting  55d3e9a6-e153-43c3-a66c-cd60711ff4a9\nSNOTEL:1249_UT_SNTL ad44deb7-e56d-47bd-8d64-7147493e0aee\ncollecting  ad44deb7-e56d-47bd-8d64-7147493e0aee\nSNOTEL:1251_CO_SNTL f9f7132d-56a2-43e2-baba-312f34dbaeed\ncollecting  f9f7132d-56a2-43e2-baba-312f34dbaeed\nSNOTEL:1252_CO_SNTL 8116acfb-8035-4d34-b9b9-b0af2c5697df\ncollecting  8116acfb-8035-4d34-b9b9-b0af2c5697df\nSNOTEL:1254_NM_SNTL 9c43edf0-541f-4dbb-9fe1-42cc83d453bd\ncollecting  9c43edf0-541f-4dbb-9fe1-42cc83d453bd\nSNOTEL:1256_WA_SNTL c59f438c-f00a-476a-938e-efd828e0d083\ncollecting  c59f438c-f00a-476a-938e-efd828e0d083\nSNOTEL:1257_WA_SNTL 2f266b81-aad3-4c26-ac69-1bd04a208bf7\ncollecting  2f266b81-aad3-4c26-ac69-1bd04a208bf7\nSNOTEL:1258_CA_SNTL 76b55900-eb3d-4d25-a538-f74302ffe72d\ncollecting  76b55900-eb3d-4d25-a538-f74302ffe72d\nSNOTEL:1259_WA_SNTL dc31c331-837b-4b59-b184-051321e9489c\ncollecting  dc31c331-837b-4b59-b184-051321e9489c\nSNOTEL:1261_UT_SNTL ad44deb7-e56d-47bd-8d64-7147493e0aee\ncollecting  ad44deb7-e56d-47bd-8d64-7147493e0aee\nSNOTEL:1262_NV_SNTL 875622b7-5253-43d2-8e0f-348767860eb9\ncollecting  875622b7-5253-43d2-8e0f-348767860eb9\nSNOTEL:1263_WA_SNTL cdfc27f0-b990-45f7-bac6-7c674cd157ac\ncollecting  cdfc27f0-b990-45f7-bac6-7c674cd157ac\nSNOTEL:1269_UT_SNTL ad44deb7-e56d-47bd-8d64-7147493e0aee\ncollecting  ad44deb7-e56d-47bd-8d64-7147493e0aee\nSNOTEL:1271_AZ_SNTL f6a782f0-4b17-4989-815c-2398b77b09dd\ncollecting  f6a782f0-4b17-4989-815c-2398b77b09dd\nSNOTEL:1272_NV_SNTL 5308a803-69e6-43cd-89db-66e93f9f83af\ncollecting  5308a803-69e6-43cd-89db-66e93f9f83af\nSNOTEL:1277_CA_SNTL 147d5eb4-e574-47e4-994a-8a2908c06050\ncollecting  147d5eb4-e574-47e4-994a-8a2908c06050\nSNOTEL:1278_UT_SNTL 7b636fe2-1760-45c5-afce-505f2e927163\ncollecting  7b636fe2-1760-45c5-afce-505f2e927163\nSNOTEL:1280_UT_SNTL ba4b2f3f-c8e3-4535-9781-426e4f77ba4c\ncollecting  ba4b2f3f-c8e3-4535-9781-426e4f77ba4c\nSNOTEL:1286_MT_SNTL cacaa17b-0b1b-4fe2-a4c1-7728e6c154c1\ncollecting  cacaa17b-0b1b-4fe2-a4c1-7728e6c154c1\nSNOTEL:1287_MT_SNTL e9759e79-461c-425e-af17-0a88be1a441f\ncollecting  e9759e79-461c-425e-af17-0a88be1a441f\nSNOTEL:2029_ID_SNTL 0cda0c4a-405b-4e16-8922-964190929d80\ncollecting  0cda0c4a-405b-4e16-8922-964190929d80\nSNOTEL:301_CA_SNTL 76b55900-eb3d-4d25-a538-f74302ffe72d\ncollecting  76b55900-eb3d-4d25-a538-f74302ffe72d\nSNOTEL:302_OR_SNTL c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\ncollecting  c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\nSNOTEL:303_CO_SNTL 2ca6a37f-67f5-4905-864b-ddf98d956ebb\ncollecting  2ca6a37f-67f5-4905-864b-ddf98d956ebb\nSNOTEL:304_OR_SNTL 78ccacb3-4eb9-4d95-b244-f3a709e39fd1\ncollecting  78ccacb3-4eb9-4d95-b244-f3a709e39fd1\nSNOTEL:305_CO_SNTL cad51334-b3af-4c23-85c3-451c3447560a\ncollecting  cad51334-b3af-4c23-85c3-451c3447560a\nSNOTEL:306_ID_SNTL 36b98590-a7e6-4e00-8c7d-f0f3d25bafec\ncollecting  36b98590-a7e6-4e00-8c7d-f0f3d25bafec\nSNOTEL:308_AZ_SNTL 972ab3b1-7445-4f57-a1a1-c3be4c257869\ncollecting  972ab3b1-7445-4f57-a1a1-c3be4c257869\nSNOTEL:311_MT_SNTL 0b9543d3-3cf9-4f28-b8eb-fd22c1956153\ncollecting  0b9543d3-3cf9-4f28-b8eb-fd22c1956153\nSNOTEL:312_ID_SNTL 36b98590-a7e6-4e00-8c7d-f0f3d25bafec\ncollecting  36b98590-a7e6-4e00-8c7d-f0f3d25bafec\nSNOTEL:313_MT_SNTL 4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\ncollecting  4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\nSNOTEL:316_NM_SNTL 674e34ce-8b77-422b-ab14-c6c3a0183e39\ncollecting  674e34ce-8b77-422b-ab14-c6c3a0183e39\nSNOTEL:317_WY_SNTL 8116acfb-8035-4d34-b9b9-b0af2c5697df\ncollecting  8116acfb-8035-4d34-b9b9-b0af2c5697df\nSNOTEL:319_ID_SNTL c66f40ed-f72e-4012-991c-1f3726e5c8ad\ncollecting  c66f40ed-f72e-4012-991c-1f3726e5c8ad\nSNOTEL:320_ID_SNTL af0463d4-f20f-4d13-bd0f-5834e2e8717b\ncollecting  af0463d4-f20f-4d13-bd0f-5834e2e8717b\nSNOTEL:321_NV_SNTL 5308a803-69e6-43cd-89db-66e93f9f83af\ncollecting  5308a803-69e6-43cd-89db-66e93f9f83af\nSNOTEL:322_CO_SNTL f9f7132d-56a2-43e2-baba-312f34dbaeed\ncollecting  f9f7132d-56a2-43e2-baba-312f34dbaeed\nSNOTEL:324_ID_SNTL c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\ncollecting  c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\nSNOTEL:325_WY_SNTL c5a82752-3e4b-43ec-8011-9111b9bfcb89\ncollecting  c5a82752-3e4b-43ec-8011-9111b9bfcb89\nSNOTEL:326_WY_SNTL e776d9b6-2180-4f50-90bf-77f7b920fc3b\ncollecting  e776d9b6-2180-4f50-90bf-77f7b920fc3b\nSNOTEL:327_CO_SNTL 69d48a07-3007-4b3f-bec6-c097509a56d9\ncollecting  69d48a07-3007-4b3f-bec6-c097509a56d9\nSNOTEL:328_MT_SNTL 10a46ea0-13da-4cef-9aa6-ff48aa46881c\ncollecting  10a46ea0-13da-4cef-9aa6-ff48aa46881c\nSNOTEL:329_UT_SNTL 9813294e-a28e-45c0-976d-a6fa65d87927\ncollecting  9813294e-a28e-45c0-976d-a6fa65d87927\nSNOTEL:330_UT_SNTL 7bc3c413-4709-4ddd-a2ad-99f6cad9436c\ncollecting  7bc3c413-4709-4ddd-a2ad-99f6cad9436c\nSNOTEL:331_OR_SNTL 631ed3c9-7863-4e7c-86fa-4bfb043f2851\ncollecting  631ed3c9-7863-4e7c-86fa-4bfb043f2851\nSNOTEL:332_UT_SNTL b59438b9-aadc-4899-9afb-fe71974c5c3a\ncollecting  b59438b9-aadc-4899-9afb-fe71974c5c3a\nSNOTEL:333_UT_SNTL b59438b9-aadc-4899-9afb-fe71974c5c3a\ncollecting  b59438b9-aadc-4899-9afb-fe71974c5c3a\nSNOTEL:334_NV_SNTL 38793f95-324b-4f01-b1a7-45e1c9353bc1\ncollecting  38793f95-324b-4f01-b1a7-45e1c9353bc1\nSNOTEL:335_CO_SNTL cad51334-b3af-4c23-85c3-451c3447560a\ncollecting  cad51334-b3af-4c23-85c3-451c3447560a\nSNOTEL:336_NV_SNTL 03428fd9-01cc-4a57-ab6e-f4e8f265c094\ncollecting  03428fd9-01cc-4a57-ab6e-f4e8f265c094\nSNOTEL:337_NV_SNTL f1f17cee-3fca-44bc-8974-b72d5f995a4a\ncollecting  f1f17cee-3fca-44bc-8974-b72d5f995a4a\nSNOTEL:338_ID_SNTL c66f40ed-f72e-4012-991c-1f3726e5c8ad\ncollecting  c66f40ed-f72e-4012-991c-1f3726e5c8ad\nSNOTEL:339_UT_SNTL 7b636fe2-1760-45c5-afce-505f2e927163\ncollecting  7b636fe2-1760-45c5-afce-505f2e927163\nSNOTEL:340_NV_SNTL d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nSNOTEL:341_OR_SNTL dd7f64aa-3556-409b-bc86-71dc28b6fd45\ncollecting  dd7f64aa-3556-409b-bc86-71dc28b6fd45\nSNOTEL:342_WY_SNTL 990e5974-9c60-4c9a-ba23-ddce13971178\ncollecting  990e5974-9c60-4c9a-ba23-ddce13971178\nSNOTEL:344_OR_SNTL 71f41513-6ac9-4d2e-97eb-6cd3b84f7043\ncollecting  71f41513-6ac9-4d2e-97eb-6cd3b84f7043\nSNOTEL:345_CO_SNTL d64197fc-0723-4c61-9ce8-ff2554e24154\ncollecting  d64197fc-0723-4c61-9ce8-ff2554e24154\nSNOTEL:346_MT_SNTL 89a7b0ef-1ec8-490f-9207-c93aa57a147f\ncollecting  89a7b0ef-1ec8-490f-9207-c93aa57a147f\nSNOTEL:347_MT_SNTL b1936012-0d31-4b92-8d60-c24903b2e569\ncollecting  b1936012-0d31-4b92-8d60-c24903b2e569\nSNOTEL:348_UT_SNTL 9813294e-a28e-45c0-976d-a6fa65d87927\ncollecting  9813294e-a28e-45c0-976d-a6fa65d87927\nSNOTEL:349_MT_SNTL 4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\ncollecting  4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\nSNOTEL:350_WY_SNTL 333458b2-c1a9-47a3-8ae0-92053ad28ae3\ncollecting  333458b2-c1a9-47a3-8ae0-92053ad28ae3\nSNOTEL:354_SD_SNTL ab89875f-3b86-4c6a-8d66-767017570dfc\ncollecting  ab89875f-3b86-4c6a-8d66-767017570dfc\nSNOTEL:355_MT_SNTL 6de38d5b-ccce-4ff2-90ed-1c7035491518\ncollecting  6de38d5b-ccce-4ff2-90ed-1c7035491518\nSNOTEL:356_CA_SNTL c89dc6ca-6d69-41ce-954d-b51f64aaacb1\ncollecting  c89dc6ca-6d69-41ce-954d-b51f64aaacb1\nSNOTEL:358_WY_SNTL 6bc3e088-5139-43f2-9b2a-ade1cedeae47\ncollecting  6bc3e088-5139-43f2-9b2a-ade1cedeae47\nSNOTEL:360_MT_SNTL 517aefce-a617-4251-acb9-c5faf0b7fdf3\ncollecting  517aefce-a617-4251-acb9-c5faf0b7fdf3\nSNOTEL:363_MT_SNTL f46e7d90-a754-44a8-b262-63f5c401a0ab\ncollecting  f46e7d90-a754-44a8-b262-63f5c401a0ab\nSNOTEL:364_UT_SNTL 7b636fe2-1760-45c5-afce-505f2e927163\ncollecting  7b636fe2-1760-45c5-afce-505f2e927163\nSNOTEL:365_MT_SNTL e467a17f-a729-4938-87a1-ac25157eed63\ncollecting  e467a17f-a729-4938-87a1-ac25157eed63\nSNOTEL:366_UT_SNTL eeb0a123-9482-4946-ab3f-9e63541cb655\ncollecting  eeb0a123-9482-4946-ab3f-9e63541cb655\nSNOTEL:368_UT_SNTL a28a3caf-eea2-414f-8003-62ac82daaafa\ncollecting  a28a3caf-eea2-414f-8003-62ac82daaafa\nSNOTEL:370_ID_SNTL c66f40ed-f72e-4012-991c-1f3726e5c8ad\ncollecting  c66f40ed-f72e-4012-991c-1f3726e5c8ad\nSNOTEL:373_NV_SNTL 42a21eb9-10fd-4986-825b-9ea55ce13935\ncollecting  42a21eb9-10fd-4986-825b-9ea55ce13935\nSNOTEL:375_WA_SNTL bb65d7a1-a5d5-4c89-9ef9-f0f1db06cc58\ncollecting  bb65d7a1-a5d5-4c89-9ef9-f0f1db06cc58\nSNOTEL:376_WA_SNTL c59f438c-f00a-476a-938e-efd828e0d083\ncollecting  c59f438c-f00a-476a-938e-efd828e0d083\nSNOTEL:377_WY_SNTL 6bc3e088-5139-43f2-9b2a-ade1cedeae47\ncollecting  6bc3e088-5139-43f2-9b2a-ade1cedeae47\nSNOTEL:379_WY_SNTL 692c41af-2210-4dd6-916d-c99e76807447\ncollecting  692c41af-2210-4dd6-916d-c99e76807447\nSNOTEL:380_CO_SNTL 6662f7d0-4afc-4fed-b930-e0408ee10bc7\ncollecting  6662f7d0-4afc-4fed-b930-e0408ee10bc7\nSNOTEL:381_MT_SNTL 4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\ncollecting  4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\nSNOTEL:385_MT_SNTL b1936012-0d31-4b92-8d60-c24903b2e569\ncollecting  b1936012-0d31-4b92-8d60-c24903b2e569\nSNOTEL:386_CO_SNTL fb32a838-cf3b-47a2-9e22-395a730f4f4f\ncollecting  fb32a838-cf3b-47a2-9e22-395a730f4f4f\nSNOTEL:387_CO_SNTL fb32a838-cf3b-47a2-9e22-395a730f4f4f\ncollecting  fb32a838-cf3b-47a2-9e22-395a730f4f4f\nSNOTEL:388_OR_SNTL ea185683-4427-44c3-84e1-706cf16781ce\ncollecting  ea185683-4427-44c3-84e1-706cf16781ce\nSNOTEL:389_WY_SNTL ab89875f-3b86-4c6a-8d66-767017570dfc\ncollecting  ab89875f-3b86-4c6a-8d66-767017570dfc\nSNOTEL:390_UT_SNTL 55d3e9a6-e153-43c3-a66c-cd60711ff4a9\ncollecting  55d3e9a6-e153-43c3-a66c-cd60711ff4a9\nSNOTEL:392_UT_SNTL 064d7f3e-8bbd-49cd-b360-5c4590a19b9e\ncollecting  064d7f3e-8bbd-49cd-b360-5c4590a19b9e\nSNOTEL:393_UT_SNTL 064d7f3e-8bbd-49cd-b360-5c4590a19b9e\ncollecting  064d7f3e-8bbd-49cd-b360-5c4590a19b9e\nSNOTEL:396_UT_SNTL 50d7ad3f-57f0-45e1-911d-b0efff9deb8f\ncollecting  50d7ad3f-57f0-45e1-911d-b0efff9deb8f\nSNOTEL:398_OR_SNTL 8edd6091-10fa-4617-8dc8-e0ce1d5b84f7\ncollecting  8edd6091-10fa-4617-8dc8-e0ce1d5b84f7\nSNOTEL:399_UT_SNTL 0a820e12-033b-45d6-9ef9-d70f4c5e5b63\ncollecting  0a820e12-033b-45d6-9ef9-d70f4c5e5b63\nSNOTEL:401_OR_SNTL 8edd6091-10fa-4617-8dc8-e0ce1d5b84f7\ncollecting  8edd6091-10fa-4617-8dc8-e0ce1d5b84f7\nSNOTEL:402_WY_SNTL 02c3ec4a-8de4-4284-9ec1-5a942d3d098e\ncollecting  02c3ec4a-8de4-4284-9ec1-5a942d3d098e\nSNOTEL:403_MT_SNTL 05938de0-622b-4e0a-a82b-2a128e5be0b0\ncollecting  05938de0-622b-4e0a-a82b-2a128e5be0b0\nSNOTEL:406_OR_SNTL 71f41513-6ac9-4d2e-97eb-6cd3b84f7043\ncollecting  71f41513-6ac9-4d2e-97eb-6cd3b84f7043\nSNOTEL:407_MT_SNTL e776d9b6-2180-4f50-90bf-77f7b920fc3b\ncollecting  e776d9b6-2180-4f50-90bf-77f7b920fc3b\nSNOTEL:409_CO_SNTL a4339b9a-871e-44c2-9bb4-bcbfe9d590d7\ncollecting  a4339b9a-871e-44c2-9bb4-bcbfe9d590d7\nSNOTEL:410_MT_SNTL 4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\ncollecting  4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\nSNOTEL:411_ID_SNTL 440d7558-67fd-43b4-826b-26d02663f871\ncollecting  440d7558-67fd-43b4-826b-26d02663f871\nSNOTEL:412_CO_SNTL f9f7132d-56a2-43e2-baba-312f34dbaeed\ncollecting  f9f7132d-56a2-43e2-baba-312f34dbaeed\nSNOTEL:413_MT_SNTL 99a2d4a9-63a0-43a7-976d-2a1ed822186d\ncollecting  99a2d4a9-63a0-43a7-976d-2a1ed822186d\nSNOTEL:414_MT_SNTL 99a2d4a9-63a0-43a7-976d-2a1ed822186d\ncollecting  99a2d4a9-63a0-43a7-976d-2a1ed822186d\nSNOTEL:415_CO_SNTL be57eab6-a495-427f-8a36-9d118c03e7d8\ncollecting  be57eab6-a495-427f-8a36-9d118c03e7d8\nSNOTEL:416_AZ_SNTL 1135e377-22e6-4290-b4cd-e6739de7fd8a\ncollecting  1135e377-22e6-4290-b4cd-e6739de7fd8a\nSNOTEL:417_NV_SNTL a5080351-033f-4cfa-ad27-019fc84e052c\ncollecting  a5080351-033f-4cfa-ad27-019fc84e052c\nSNOTEL:418_WA_SNTL 9474e816-b673-4e6d-83e0-28c274945bef\ncollecting  9474e816-b673-4e6d-83e0-28c274945bef\nSNOTEL:419_WY_SNTL df7e906a-07f3-4a46-b9a5-0200427c26f7\ncollecting  df7e906a-07f3-4a46-b9a5-0200427c26f7\nSNOTEL:420_WA_SNTL 360f1bcc-aa60-4052-a18a-b33da5745ff4\ncollecting  360f1bcc-aa60-4052-a18a-b33da5745ff4\nSNOTEL:422_OR_SNTL e27143af-fdc0-4f6f-8a28-f57b78da75dc\ncollecting  e27143af-fdc0-4f6f-8a28-f57b78da75dc\nSNOTEL:423_ID_SNTL 36b98590-a7e6-4e00-8c7d-f0f3d25bafec\ncollecting  36b98590-a7e6-4e00-8c7d-f0f3d25bafec\nSNOTEL:424_ID_SNTL 10a46ea0-13da-4cef-9aa6-ff48aa46881c\ncollecting  10a46ea0-13da-4cef-9aa6-ff48aa46881c\nSNOTEL:426_CO_SNTL 02cf33c2-c8e2-48b9-bf72-92506e97e251\ncollecting  02cf33c2-c8e2-48b9-bf72-92506e97e251\nSNOTEL:428_CA_SNTL 51ebe834-adf4-474e-871e-28ebca2bd0cc\ncollecting  51ebe834-adf4-474e-871e-28ebca2bd0cc\nSNOTEL:430_CO_SNTL 2ca6a37f-67f5-4905-864b-ddf98d956ebb\ncollecting  2ca6a37f-67f5-4905-864b-ddf98d956ebb\nSNOTEL:431_CO_SNTL 0623939d-b33f-41cb-ade2-3c4a776de49a\ncollecting  0623939d-b33f-41cb-ade2-3c4a776de49a\nSNOTEL:432_UT_SNTL cfe58efd-ce2a-495a-90cd-6826f704ebee\ncollecting  cfe58efd-ce2a-495a-90cd-6826f704ebee\nSNOTEL:433_MT_SNTL 4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\ncollecting  4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\nSNOTEL:434_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nSNOTEL:436_MT_SNTL cacaa17b-0b1b-4fe2-a4c1-7728e6c154c1\ncollecting  cacaa17b-0b1b-4fe2-a4c1-7728e6c154c1\nSNOTEL:437_MT_SNTL 517aefce-a617-4251-acb9-c5faf0b7fdf3\ncollecting  517aefce-a617-4251-acb9-c5faf0b7fdf3\nSNOTEL:438_CO_SNTL 9f0599d8-81f3-4ab5-b275-48a6ddaaae5b\ncollecting  9f0599d8-81f3-4ab5-b275-48a6ddaaae5b\nSNOTEL:439_ID_SNTL 36b98590-a7e6-4e00-8c7d-f0f3d25bafec\ncollecting  36b98590-a7e6-4e00-8c7d-f0f3d25bafec\nSNOTEL:444_UT_SNTL 9813294e-a28e-45c0-976d-a6fa65d87927\ncollecting  9813294e-a28e-45c0-976d-a6fa65d87927\nSNOTEL:448_MT_SNTL 05938de0-622b-4e0a-a82b-2a128e5be0b0\ncollecting  05938de0-622b-4e0a-a82b-2a128e5be0b0\nSNOTEL:449_WY_SNTL 8116acfb-8035-4d34-b9b9-b0af2c5697df\ncollecting  8116acfb-8035-4d34-b9b9-b0af2c5697df\nSNOTEL:450_ID_SNTL 695c7749-a3b8-4158-bd14-59d1f2c3e736\ncollecting  695c7749-a3b8-4158-bd14-59d1f2c3e736\nSNOTEL:451_WY_SNTL 02c3ec4a-8de4-4284-9ec1-5a942d3d098e\ncollecting  02c3ec4a-8de4-4284-9ec1-5a942d3d098e\nSNOTEL:452_UT_SNTL ad44deb7-e56d-47bd-8d64-7147493e0aee\ncollecting  ad44deb7-e56d-47bd-8d64-7147493e0aee\nSNOTEL:455_UT_SNTL b59438b9-aadc-4899-9afb-fe71974c5c3a\ncollecting  b59438b9-aadc-4899-9afb-fe71974c5c3a\nSNOTEL:457_CO_SNTL 02cf33c2-c8e2-48b9-bf72-92506e97e251\ncollecting  02cf33c2-c8e2-48b9-bf72-92506e97e251\nSNOTEL:458_MT_SNTL dca30f20-582e-40ef-be6d-aa7858be4baa\ncollecting  dca30f20-582e-40ef-be6d-aa7858be4baa\nSNOTEL:460_WY_SNTL 695bed09-0ad9-406e-b489-69408adeea06\ncollecting  695bed09-0ad9-406e-b489-69408adeea06\nSNOTEL:462_CA_SNTL 962f6718-ce02-4d13-b28c-e159d1adc2d4\ncollecting  962f6718-ce02-4d13-b28c-e159d1adc2d4\nSNOTEL:463_CA_SNTL f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nSNOTEL:464_OR_SNTL 631ed3c9-7863-4e7c-86fa-4bfb043f2851\ncollecting  631ed3c9-7863-4e7c-86fa-4bfb043f2851\nSNOTEL:465_CO_SNTL d10a90c7-3db0-43c6-b04b-fe8b4c3f206e\ncollecting  d10a90c7-3db0-43c6-b04b-fe8b4c3f206e\nSNOTEL:466_ID_SNTL b1077b69-4b02-458e-8a4b-e68695ac534f\ncollecting  b1077b69-4b02-458e-8a4b-e68695ac534f\nSNOTEL:467_CO_SNTL 86257c69-a8f1-43b1-9e07-73129e2c3fbc\ncollecting  86257c69-a8f1-43b1-9e07-73129e2c3fbc\nSNOTEL:470_OR_SNTL e27143af-fdc0-4f6f-8a28-f57b78da75dc\ncollecting  e27143af-fdc0-4f6f-8a28-f57b78da75dc\nSNOTEL:472_WY_SNTL e776d9b6-2180-4f50-90bf-77f7b920fc3b\ncollecting  e776d9b6-2180-4f50-90bf-77f7b920fc3b\nSNOTEL:474_UT_SNTL 10162c55-772d-49d2-8b1b-b1f9c86254b2\ncollecting  10162c55-772d-49d2-8b1b-b1f9c86254b2\nSNOTEL:475_UT_SNTL 9813294e-a28e-45c0-976d-a6fa65d87927\ncollecting  9813294e-a28e-45c0-976d-a6fa65d87927\nSNOTEL:476_NV_SNTL 875622b7-5253-43d2-8e0f-348767860eb9\ncollecting  875622b7-5253-43d2-8e0f-348767860eb9\nSNOTEL:477_OR_SNTL 65894307-d4eb-4b2e-a0fa-bd83a102dc30\ncollecting  65894307-d4eb-4b2e-a0fa-bd83a102dc30\nSNOTEL:478_WA_SNTL bfda850c-3027-4e91-afcb-cca5e73e4a03\ncollecting  bfda850c-3027-4e91-afcb-cca5e73e4a03\nSNOTEL:480_MT_SNTL f46e7d90-a754-44a8-b262-63f5c401a0ab\ncollecting  f46e7d90-a754-44a8-b262-63f5c401a0ab\nSNOTEL:481_UT_SNTL a28a3caf-eea2-414f-8003-62ac82daaafa\ncollecting  a28a3caf-eea2-414f-8003-62ac82daaafa\nSNOTEL:482_MT_SNTL d37ccc2e-7127-48ec-9425-2e77681c3635\ncollecting  d37ccc2e-7127-48ec-9425-2e77681c3635\nSNOTEL:483_OR_SNTL 71f41513-6ac9-4d2e-97eb-6cd3b84f7043\ncollecting  71f41513-6ac9-4d2e-97eb-6cd3b84f7043\nSNOTEL:484_ID_SNTL 6bf06917-011b-4029-8fbe-a8dfea3bc598\ncollecting  6bf06917-011b-4029-8fbe-a8dfea3bc598\nSNOTEL:485_CO_SNTL 75ced1b1-1fc2-42d3-a4f8-44aa1978c8ef\ncollecting  75ced1b1-1fc2-42d3-a4f8-44aa1978c8ef\nSNOTEL:486_NM_SNTL 1135e377-22e6-4290-b4cd-e6739de7fd8a\ncollecting  1135e377-22e6-4290-b4cd-e6739de7fd8a\nSNOTEL:487_MT_SNTL f3e36cea-5eb2-495a-87f4-947395f325b0\ncollecting  f3e36cea-5eb2-495a-87f4-947395f325b0\nSNOTEL:488_AZ_SNTL a2588440-600e-41da-b2b9-1f5632ecdef6\ncollecting  a2588440-600e-41da-b2b9-1f5632ecdef6\nSNOTEL:489_ID_SNTL f3332d55-ecc8-4644-9deb-180e42abb2eb\ncollecting  f3332d55-ecc8-4644-9deb-180e42abb2eb\nSNOTEL:490_ID_SNTL 695c7749-a3b8-4158-bd14-59d1f2c3e736\ncollecting  695c7749-a3b8-4158-bd14-59d1f2c3e736\nSNOTEL:491_NM_SNTL 9c43edf0-541f-4dbb-9fe1-42cc83d453bd\ncollecting  9c43edf0-541f-4dbb-9fe1-42cc83d453bd\nSNOTEL:493_ID_SNTL 6bf06917-011b-4029-8fbe-a8dfea3bc598\ncollecting  6bf06917-011b-4029-8fbe-a8dfea3bc598\nSNOTEL:494_OR_SNTL 631ed3c9-7863-4e7c-86fa-4bfb043f2851\ncollecting  631ed3c9-7863-4e7c-86fa-4bfb043f2851\nSNOTEL:495_UT_SNTL 9813294e-a28e-45c0-976d-a6fa65d87927\ncollecting  9813294e-a28e-45c0-976d-a6fa65d87927\nSNOTEL:497_WY_SNTL 695bed09-0ad9-406e-b489-69408adeea06\ncollecting  695bed09-0ad9-406e-b489-69408adeea06\nSNOTEL:498_NV_SNTL 42a21eb9-10fd-4986-825b-9ea55ce13935\ncollecting  42a21eb9-10fd-4986-825b-9ea55ce13935\nSNOTEL:499_WY_SNTL 491846d3-f81a-4777-b49f-0a0c74168395\ncollecting  491846d3-f81a-4777-b49f-0a0c74168395\nSNOTEL:500_MT_SNTL d37ccc2e-7127-48ec-9425-2e77681c3635\ncollecting  d37ccc2e-7127-48ec-9425-2e77681c3635\nSNOTEL:503_NV_SNTL a5080351-033f-4cfa-ad27-019fc84e052c\ncollecting  a5080351-033f-4cfa-ad27-019fc84e052c\nSNOTEL:505_CO_SNTL 552a5638-8fd2-46de-8569-5f5512102264\ncollecting  552a5638-8fd2-46de-8569-5f5512102264\nSNOTEL:507_WA_SNTL 6d0ff6eb-0411-4863-b4e7-90958db98115\ncollecting  6d0ff6eb-0411-4863-b4e7-90958db98115\nSNOTEL:508_CA_SNTL d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nSNOTEL:509_WY_SNTL df7e906a-07f3-4a46-b9a5-0200427c26f7\ncollecting  df7e906a-07f3-4a46-b9a5-0200427c26f7\nSNOTEL:510_MT_SNTL 0b9543d3-3cf9-4f28-b8eb-fd22c1956153\ncollecting  0b9543d3-3cf9-4f28-b8eb-fd22c1956153\nSNOTEL:512_WY_SNTL c5a82752-3e4b-43ec-8011-9111b9bfcb89\ncollecting  c5a82752-3e4b-43ec-8011-9111b9bfcb89\nSNOTEL:514_UT_SNTL 55d3e9a6-e153-43c3-a66c-cd60711ff4a9\ncollecting  55d3e9a6-e153-43c3-a66c-cd60711ff4a9\nSNOTEL:519_AZ_SNTL 0aeaffd7-9089-49e7-85ad-2314f32cbf7c\ncollecting  0aeaffd7-9089-49e7-85ad-2314f32cbf7c\nSNOTEL:520_ID_SNTL b1077b69-4b02-458e-8a4b-e68695ac534f\ncollecting  b1077b69-4b02-458e-8a4b-e68695ac534f\nSNOTEL:521_UT_SNTL c0568d62-49c7-4d9f-beba-ac0fb3e064c5\ncollecting  c0568d62-49c7-4d9f-beba-ac0fb3e064c5\nSNOTEL:522_UT_SNTL 50d7ad3f-57f0-45e1-911d-b0efff9deb8f\ncollecting  50d7ad3f-57f0-45e1-911d-b0efff9deb8f\nSNOTEL:523_OR_SNTL e27143af-fdc0-4f6f-8a28-f57b78da75dc\ncollecting  e27143af-fdc0-4f6f-8a28-f57b78da75dc\nSNOTEL:524_ID_SNTL 3330a979-98df-4a38-ac3f-0b45374f8e3d\ncollecting  3330a979-98df-4a38-ac3f-0b45374f8e3d\nSNOTEL:525_WY_SNTL 990e5974-9c60-4c9a-ba23-ddce13971178\ncollecting  990e5974-9c60-4c9a-ba23-ddce13971178\nSNOTEL:526_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nSNOTEL:528_UT_SNTL 50d7ad3f-57f0-45e1-911d-b0efff9deb8f\ncollecting  50d7ad3f-57f0-45e1-911d-b0efff9deb8f\nSNOTEL:529_OR_SNTL fe33672e-7ea7-4c5d-8639-96b2cc7edb0c\ncollecting  fe33672e-7ea7-4c5d-8639-96b2cc7edb0c\nSNOTEL:530_MT_SNTL 440d7558-67fd-43b4-826b-26d02663f871\ncollecting  440d7558-67fd-43b4-826b-26d02663f871\nSNOTEL:531_CO_SNTL 59ac7ee6-8fa8-4888-bb77-2be6781dddaf\ncollecting  59ac7ee6-8fa8-4888-bb77-2be6781dddaf\nSNOTEL:532_NM_SNTL 674e34ce-8b77-422b-ab14-c6c3a0183e39\ncollecting  674e34ce-8b77-422b-ab14-c6c3a0183e39\nSNOTEL:533_UT_SNTL dc237027-8dae-4da7-91ec-501701ecd943\ncollecting  dc237027-8dae-4da7-91ec-501701ecd943\nSNOTEL:535_ID_SNTL b5d7b6b8-4e5d-4b5e-8976-c72e99f57769\ncollecting  b5d7b6b8-4e5d-4b5e-8976-c72e99f57769\nSNOTEL:540_CA_SNTL 018cf1a1-f945-4097-9c47-0c4690538bb5\ncollecting  018cf1a1-f945-4097-9c47-0c4690538bb5\nSNOTEL:541_CA_SNTL 018cf1a1-f945-4097-9c47-0c4690538bb5\ncollecting  018cf1a1-f945-4097-9c47-0c4690538bb5\nSNOTEL:542_CO_SNTL a0c947fb-f00e-4331-ad3a-402908e08b57\ncollecting  a0c947fb-f00e-4331-ad3a-402908e08b57\nSNOTEL:543_UT_SNTL 19b5e6ce-c1a0-4cce-85f5-248c9f1abb6e\ncollecting  19b5e6ce-c1a0-4cce-85f5-248c9f1abb6e\nSNOTEL:548_NV_SNTL 875622b7-5253-43d2-8e0f-348767860eb9\ncollecting  875622b7-5253-43d2-8e0f-348767860eb9\nSNOTEL:549_NV_SNTL 875622b7-5253-43d2-8e0f-348767860eb9\ncollecting  875622b7-5253-43d2-8e0f-348767860eb9\nSNOTEL:550_ID_SNTL 36b98590-a7e6-4e00-8c7d-f0f3d25bafec\ncollecting  36b98590-a7e6-4e00-8c7d-f0f3d25bafec\nSNOTEL:552_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nSNOTEL:553_WA_SNTL cdfc27f0-b990-45f7-bac6-7c674cd157ac\ncollecting  cdfc27f0-b990-45f7-bac6-7c674cd157ac\nSNOTEL:554_WY_SNTL df7e906a-07f3-4a46-b9a5-0200427c26f7\ncollecting  df7e906a-07f3-4a46-b9a5-0200427c26f7\nSNOTEL:555_WY_SNTL 695bed09-0ad9-406e-b489-69408adeea06\ncollecting  695bed09-0ad9-406e-b489-69408adeea06\nSNOTEL:556_CO_SNTL e833aad1-6da3-4413-b25e-b2ab5b2029c0\ncollecting  e833aad1-6da3-4413-b25e-b2ab5b2029c0\nSNOTEL:558_OR_SNTL dd7f64aa-3556-409b-bc86-71dc28b6fd45\ncollecting  dd7f64aa-3556-409b-bc86-71dc28b6fd45\nSNOTEL:559_UT_SNTL 50d7ad3f-57f0-45e1-911d-b0efff9deb8f\ncollecting  50d7ad3f-57f0-45e1-911d-b0efff9deb8f\nSNOTEL:560_WY_SNTL 692c41af-2210-4dd6-916d-c99e76807447\ncollecting  692c41af-2210-4dd6-916d-c99e76807447\nSNOTEL:562_MT_SNTL 89a7b0ef-1ec8-490f-9207-c93aa57a147f\ncollecting  89a7b0ef-1ec8-490f-9207-c93aa57a147f\nSNOTEL:563_OR_SNTL 408b4482-ff63-4a1f-9cf9-ca820cd51b39\ncollecting  408b4482-ff63-4a1f-9cf9-ca820cd51b39\nSNOTEL:564_CO_SNTL f9f7132d-56a2-43e2-baba-312f34dbaeed\ncollecting  f9f7132d-56a2-43e2-baba-312f34dbaeed\nSNOTEL:565_CO_SNTL 8c45801f-6377-42e1-ae0a-9b53593ff843\ncollecting  8c45801f-6377-42e1-ae0a-9b53593ff843\nSNOTEL:566_UT_SNTL c7f13d88-b4af-4484-9547-52197f778c08\ncollecting  c7f13d88-b4af-4484-9547-52197f778c08\nSNOTEL:568_MT_SNTL 10a46ea0-13da-4cef-9aa6-ff48aa46881c\ncollecting  10a46ea0-13da-4cef-9aa6-ff48aa46881c\nSNOTEL:569_NV_SNTL 42a21eb9-10fd-4986-825b-9ea55ce13935\ncollecting  42a21eb9-10fd-4986-825b-9ea55ce13935\nSNOTEL:570_NV_SNTL a5080351-033f-4cfa-ad27-019fc84e052c\ncollecting  a5080351-033f-4cfa-ad27-019fc84e052c\nSNOTEL:571_WY_SNTL ab89875f-3b86-4c6a-8d66-767017570dfc\ncollecting  ab89875f-3b86-4c6a-8d66-767017570dfc\nSNOTEL:572_UT_SNTL 20b97bae-60d6-466d-aca9-334d9b2d63b6\ncollecting  20b97bae-60d6-466d-aca9-334d9b2d63b6\nSNOTEL:575_CA_SNTL 01be2cc7-ef77-4e4d-80ed-c4f8139162c3\ncollecting  01be2cc7-ef77-4e4d-80ed-c4f8139162c3\nSNOTEL:576_MT_SNTL 3330a979-98df-4a38-ac3f-0b45374f8e3d\ncollecting  3330a979-98df-4a38-ac3f-0b45374f8e3d\nSNOTEL:577_WY_SNTL 491846d3-f81a-4777-b49f-0a0c74168395\ncollecting  491846d3-f81a-4777-b49f-0a0c74168395\nSNOTEL:579_UT_SNTL 064d7f3e-8bbd-49cd-b360-5c4590a19b9e\ncollecting  064d7f3e-8bbd-49cd-b360-5c4590a19b9e\nSNOTEL:580_CO_SNTL 4ddee9a9-feaf-4daa-9100-0d4188f7b827\ncollecting  4ddee9a9-feaf-4daa-9100-0d4188f7b827\nSNOTEL:582_UT_SNTL b59438b9-aadc-4899-9afb-fe71974c5c3a\ncollecting  b59438b9-aadc-4899-9afb-fe71974c5c3a\nSNOTEL:583_UT_SNTL 24cd85fa-6aee-4556-bb8a-b6696eb72a19\ncollecting  24cd85fa-6aee-4556-bb8a-b6696eb72a19\nSNOTEL:585_WY_SNTL 0adbba56-85f8-49e0-9b11-000622238d91\ncollecting  0adbba56-85f8-49e0-9b11-000622238d91\nSNOTEL:587_CA_SNTL 74f8c8bc-2f60-4232-b447-43459d5d22f0\ncollecting  74f8c8bc-2f60-4232-b447-43459d5d22f0\nSNOTEL:588_ID_SNTL cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\ncollecting  cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\nSNOTEL:589_CO_SNTL 57e18a9f-8327-4d6c-b2b4-c2b337341e86\ncollecting  57e18a9f-8327-4d6c-b2b4-c2b337341e86\nSNOTEL:590_MT_SNTL e467a17f-a729-4938-87a1-ac25157eed63\ncollecting  e467a17f-a729-4938-87a1-ac25157eed63\nSNOTEL:591_WA_SNTL cdfc27f0-b990-45f7-bac6-7c674cd157ac\ncollecting  cdfc27f0-b990-45f7-bac6-7c674cd157ac\nSNOTEL:592_UT_SNTL 24cd85fa-6aee-4556-bb8a-b6696eb72a19\ncollecting  24cd85fa-6aee-4556-bb8a-b6696eb72a19\nSNOTEL:593_UT_SNTL 55d3e9a6-e153-43c3-a66c-cd60711ff4a9\ncollecting  55d3e9a6-e153-43c3-a66c-cd60711ff4a9\nSNOTEL:596_UT_SNTL 10162c55-772d-49d2-8b1b-b1f9c86254b2\ncollecting  10162c55-772d-49d2-8b1b-b1f9c86254b2\nSNOTEL:597_WY_SNTL 695bed09-0ad9-406e-b489-69408adeea06\ncollecting  695bed09-0ad9-406e-b489-69408adeea06\nSNOTEL:600_ID_SNTL b5d7b6b8-4e5d-4b5e-8976-c72e99f57769\ncollecting  b5d7b6b8-4e5d-4b5e-8976-c72e99f57769\nSNOTEL:603_MT_SNTL 678f1920-0bc3-4687-af71-35d61030b1a0\ncollecting  678f1920-0bc3-4687-af71-35d61030b1a0\nSNOTEL:604_MT_SNTL 4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\ncollecting  4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\nSNOTEL:605_OR_SNTL e27143af-fdc0-4f6f-8a28-f57b78da75dc\ncollecting  e27143af-fdc0-4f6f-8a28-f57b78da75dc\nSNOTEL:606_WA_SNTL 47e625fa-e2df-43ce-84dd-8ac21fdda75a\ncollecting  47e625fa-e2df-43ce-84dd-8ac21fdda75a\nSNOTEL:607_CO_SNTL 02cf33c2-c8e2-48b9-bf72-92506e97e251\ncollecting  02cf33c2-c8e2-48b9-bf72-92506e97e251\nSNOTEL:610_ID_SNTL d17b55c5-7848-4b79-a735-983aec995c52\ncollecting  d17b55c5-7848-4b79-a735-983aec995c52\nSNOTEL:612_UT_SNTL 0a820e12-033b-45d6-9ef9-d70f4c5e5b63\ncollecting  0a820e12-033b-45d6-9ef9-d70f4c5e5b63\nSNOTEL:613_MT_SNTL d37ccc2e-7127-48ec-9425-2e77681c3635\ncollecting  d37ccc2e-7127-48ec-9425-2e77681c3635\nSNOTEL:614_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nSNOTEL:615_NV_SNTL d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nSNOTEL:616_WY_SNTL 692c41af-2210-4dd6-916d-c99e76807447\ncollecting  692c41af-2210-4dd6-916d-c99e76807447\nSNOTEL:617_AZ_SNTL f6a782f0-4b17-4989-815c-2398b77b09dd\ncollecting  f6a782f0-4b17-4989-815c-2398b77b09dd\nSNOTEL:619_OR_SNTL fe33672e-7ea7-4c5d-8639-96b2cc7edb0c\ncollecting  fe33672e-7ea7-4c5d-8639-96b2cc7edb0c\nSNOTEL:620_ID_SNTL 3330a979-98df-4a38-ac3f-0b45374f8e3d\ncollecting  3330a979-98df-4a38-ac3f-0b45374f8e3d\nSNOTEL:621_UT_SNTL 7b636fe2-1760-45c5-afce-505f2e927163\ncollecting  7b636fe2-1760-45c5-afce-505f2e927163\nSNOTEL:622_CO_SNTL 87d6c782-c43b-473f-84da-d2a519d8f1fc\ncollecting  87d6c782-c43b-473f-84da-d2a519d8f1fc\nSNOTEL:623_ID_SNTL b5d7b6b8-4e5d-4b5e-8976-c72e99f57769\ncollecting  b5d7b6b8-4e5d-4b5e-8976-c72e99f57769\nSNOTEL:625_WY_SNTL 253c2443-b820-4c13-bf6d-ba7a5426f52d\ncollecting  253c2443-b820-4c13-bf6d-ba7a5426f52d\nSNOTEL:626_UT_SNTL 55d3e9a6-e153-43c3-a66c-cd60711ff4a9\ncollecting  55d3e9a6-e153-43c3-a66c-cd60711ff4a9\nSNOTEL:627_ID_SNTL 830bc2b9-592d-4334-842a-213ba4c0a347\ncollecting  830bc2b9-592d-4334-842a-213ba4c0a347\nSNOTEL:628_UT_SNTL eeb0a123-9482-4946-ab3f-9e63541cb655\ncollecting  eeb0a123-9482-4946-ab3f-9e63541cb655\nSNOTEL:629_CO_SNTL 5c4dff48-4afa-4922-949e-f64db583f392\ncollecting  5c4dff48-4afa-4922-949e-f64db583f392\nSNOTEL:633_CA_SNTL 74f8c8bc-2f60-4232-b447-43459d5d22f0\ncollecting  74f8c8bc-2f60-4232-b447-43459d5d22f0\nSNOTEL:637_ID_SNTL 36b98590-a7e6-4e00-8c7d-f0f3d25bafec\ncollecting  36b98590-a7e6-4e00-8c7d-f0f3d25bafec\nSNOTEL:640_AZ_SNTL c0e85162-6ff4-401b-b01e-cc6d7a51eac0\ncollecting  c0e85162-6ff4-401b-b01e-cc6d7a51eac0\nSNOTEL:642_WA_SNTL 9474e816-b673-4e6d-83e0-28c274945bef\ncollecting  9474e816-b673-4e6d-83e0-28c274945bef\nSNOTEL:643_UT_SNTL 50d7ad3f-57f0-45e1-911d-b0efff9deb8f\ncollecting  50d7ad3f-57f0-45e1-911d-b0efff9deb8f\nSNOTEL:644_WA_SNTL dc31c331-837b-4b59-b184-051321e9489c\ncollecting  dc31c331-837b-4b59-b184-051321e9489c\nSNOTEL:645_ID_SNTL 0d0b742e-c324-4140-8f62-746210d79080\ncollecting  0d0b742e-c324-4140-8f62-746210d79080\nSNOTEL:646_MT_SNTL 89a7b0ef-1ec8-490f-9207-c93aa57a147f\ncollecting  89a7b0ef-1ec8-490f-9207-c93aa57a147f\nSNOTEL:647_OR_SNTL c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\ncollecting  c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\nSNOTEL:648_WA_SNTL 6c94136d-5040-4c09-b1fd-c02dbff210e6\ncollecting  6c94136d-5040-4c09-b1fd-c02dbff210e6\nSNOTEL:649_MT_SNTL dca30f20-582e-40ef-be6d-aa7858be4baa\ncollecting  dca30f20-582e-40ef-be6d-aa7858be4baa\nSNOTEL:650_ID_SNTL cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\ncollecting  cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\nSNOTEL:651_OR_SNTL e13f9c1b-dca0-4c63-a64c-76f6bc725156\ncollecting  e13f9c1b-dca0-4c63-a64c-76f6bc725156\nSNOTEL:652_NV_SNTL d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nSNOTEL:654_ID_SNTL 0cda0c4a-405b-4e16-8922-964190929d80\ncollecting  0cda0c4a-405b-4e16-8922-964190929d80\nSNOTEL:655_OR_SNTL e13f9c1b-dca0-4c63-a64c-76f6bc725156\ncollecting  e13f9c1b-dca0-4c63-a64c-76f6bc725156\nSNOTEL:657_MT_SNTL 99a2d4a9-63a0-43a7-976d-2a1ed822186d\ncollecting  99a2d4a9-63a0-43a7-976d-2a1ed822186d\nSNOTEL:658_CO_SNTL e833aad1-6da3-4413-b25e-b2ab5b2029c0\ncollecting  e833aad1-6da3-4413-b25e-b2ab5b2029c0\nSNOTEL:661_WY_SNTL 679fe096-5475-4d4d-b0f8-81e32de889aa\ncollecting  679fe096-5475-4d4d-b0f8-81e32de889aa\nSNOTEL:662_MT_SNTL cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\ncollecting  cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\nSNOTEL:663_CO_SNTL f9f7132d-56a2-43e2-baba-312f34dbaeed\ncollecting  f9f7132d-56a2-43e2-baba-312f34dbaeed\nSNOTEL:664_MT_SNTL d37ccc2e-7127-48ec-9425-2e77681c3635\ncollecting  d37ccc2e-7127-48ec-9425-2e77681c3635\nSNOTEL:665_NM_SNTL 2ca6a37f-67f5-4905-864b-ddf98d956ebb\ncollecting  2ca6a37f-67f5-4905-864b-ddf98d956ebb\nSNOTEL:666_OR_SNTL e13f9c1b-dca0-4c63-a64c-76f6bc725156\ncollecting  e13f9c1b-dca0-4c63-a64c-76f6bc725156\nSNOTEL:667_MT_SNTL 89a7b0ef-1ec8-490f-9207-c93aa57a147f\ncollecting  89a7b0ef-1ec8-490f-9207-c93aa57a147f\nSNOTEL:669_CO_SNTL 3527e00e-1aee-46ce-ad9d-8122cff4c202\ncollecting  3527e00e-1aee-46ce-ad9d-8122cff4c202\nSNOTEL:670_MT_SNTL f46e7d90-a754-44a8-b262-63f5c401a0ab\ncollecting  f46e7d90-a754-44a8-b262-63f5c401a0ab\nSNOTEL:671_OR_SNTL c64f2bf3-90f0-4a96-b3a8-9f8db46dce92\ncollecting  c64f2bf3-90f0-4a96-b3a8-9f8db46dce92\nSNOTEL:672_WA_SNTL 360f1bcc-aa60-4052-a18a-b33da5745ff4\ncollecting  360f1bcc-aa60-4052-a18a-b33da5745ff4\nSNOTEL:673_WY_SNTL 8116acfb-8035-4d34-b9b9-b0af2c5697df\ncollecting  8116acfb-8035-4d34-b9b9-b0af2c5697df\nSNOTEL:676_WY_SNTL 692c41af-2210-4dd6-916d-c99e76807447\ncollecting  692c41af-2210-4dd6-916d-c99e76807447\nSNOTEL:677_ID_SNTL 6bf06917-011b-4029-8fbe-a8dfea3bc598\ncollecting  6bf06917-011b-4029-8fbe-a8dfea3bc598\nSNOTEL:680_CO_SNTL 94d9d95f-32b2-470d-95f8-dbd843d6def3\ncollecting  94d9d95f-32b2-470d-95f8-dbd843d6def3\nSNOTEL:681_WA_SNTL 47e625fa-e2df-43ce-84dd-8ac21fdda75a\ncollecting  47e625fa-e2df-43ce-84dd-8ac21fdda75a\nSNOTEL:682_CO_SNTL 35aecf7e-5f0b-4533-995c-3cb4165d44b5\ncollecting  35aecf7e-5f0b-4533-995c-3cb4165d44b5\nSNOTEL:683_WY_SNTL e776d9b6-2180-4f50-90bf-77f7b920fc3b\ncollecting  e776d9b6-2180-4f50-90bf-77f7b920fc3b\nSNOTEL:684_UT_SNTL eeb0a123-9482-4946-ab3f-9e63541cb655\ncollecting  eeb0a123-9482-4946-ab3f-9e63541cb655\nSNOTEL:686_UT_SNTL 0a820e12-033b-45d6-9ef9-d70f4c5e5b63\ncollecting  0a820e12-033b-45d6-9ef9-d70f4c5e5b63\nSNOTEL:689_WY_SNTL ce76ce00-c8b5-4597-8ca3-1ec9db795b50\ncollecting  ce76ce00-c8b5-4597-8ca3-1ec9db795b50\nSNOTEL:690_MT_SNTL 517aefce-a617-4251-acb9-c5faf0b7fdf3\ncollecting  517aefce-a617-4251-acb9-c5faf0b7fdf3\nSNOTEL:691_UT_SNTL 9813294e-a28e-45c0-976d-a6fa65d87927\ncollecting  9813294e-a28e-45c0-976d-a6fa65d87927\nSNOTEL:693_MT_SNTL dca30f20-582e-40ef-be6d-aa7858be4baa\ncollecting  dca30f20-582e-40ef-be6d-aa7858be4baa\nSNOTEL:694_UT_SNTL 7b636fe2-1760-45c5-afce-505f2e927163\ncollecting  7b636fe2-1760-45c5-afce-505f2e927163\nSNOTEL:696_MT_SNTL f46e7d90-a754-44a8-b262-63f5c401a0ab\ncollecting  f46e7d90-a754-44a8-b262-63f5c401a0ab\nSNOTEL:698_NV_SNTL 5308a803-69e6-43cd-89db-66e93f9f83af\ncollecting  5308a803-69e6-43cd-89db-66e93f9f83af\nSNOTEL:699_WA_SNTL 47e625fa-e2df-43ce-84dd-8ac21fdda75a\ncollecting  47e625fa-e2df-43ce-84dd-8ac21fdda75a\nSNOTEL:700_MT_SNTL 630bae26-a6cc-4a36-bbe5-40dc15b38dea\ncollecting  630bae26-a6cc-4a36-bbe5-40dc15b38dea\nSNOTEL:702_WA_SNTL bb65d7a1-a5d5-4c89-9ef9-f0f1db06cc58\ncollecting  bb65d7a1-a5d5-4c89-9ef9-f0f1db06cc58\nSNOTEL:704_ID_SNTL 0bd47ec1-0e3c-43bf-a491-534d06beb19f\ncollecting  0bd47ec1-0e3c-43bf-a491-534d06beb19f\nSNOTEL:706_OR_SNTL 0a0ea690-5b73-4459-91d5-a6948d132a48\ncollecting  0a0ea690-5b73-4459-91d5-a6948d132a48\nSNOTEL:708_NM_SNTL 6afdc499-9686-4451-b207-13df777df662\ncollecting  6afdc499-9686-4451-b207-13df777df662\nSNOTEL:709_CO_SNTL 02cf33c2-c8e2-48b9-bf72-92506e97e251\ncollecting  02cf33c2-c8e2-48b9-bf72-92506e97e251\nSNOTEL:710_OR_SNTL ea185683-4427-44c3-84e1-706cf16781ce\ncollecting  ea185683-4427-44c3-84e1-706cf16781ce\nSNOTEL:712_OR_SNTL b98777af-0c7c-44f7-9c03-85d6d412856c\ncollecting  b98777af-0c7c-44f7-9c03-85d6d412856c\nSNOTEL:713_CO_SNTL 7610b45e-5652-4604-ab5b-99344f71616b\ncollecting  7610b45e-5652-4604-ab5b-99344f71616b\nSNOTEL:714_UT_SNTL ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\ncollecting  ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\nSNOTEL:715_NM_SNTL e3473791-6153-49bc-a2ed-0b1e3e243942\ncollecting  e3473791-6153-49bc-a2ed-0b1e3e243942\nSNOTEL:717_CO_SNTL d64197fc-0723-4c61-9ce8-ff2554e24154\ncollecting  d64197fc-0723-4c61-9ce8-ff2554e24154\nSNOTEL:718_CO_SNTL 9f0599d8-81f3-4ab5-b275-48a6ddaaae5b\ncollecting  9f0599d8-81f3-4ab5-b275-48a6ddaaae5b\nSNOTEL:720_UT_SNTL a28a3caf-eea2-414f-8003-62ac82daaafa\ncollecting  a28a3caf-eea2-414f-8003-62ac82daaafa\nSNOTEL:723_UT_SNTL 93b8483d-a510-42ff-865e-33d5a8784dc4\ncollecting  93b8483d-a510-42ff-865e-33d5a8784dc4\nSNOTEL:724_CA_SNTL f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nSNOTEL:726_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nSNOTEL:727_MT_SNTL cacaa17b-0b1b-4fe2-a4c1-7728e6c154c1\ncollecting  cacaa17b-0b1b-4fe2-a4c1-7728e6c154c1\nSNOTEL:728_WA_SNTL dc31c331-837b-4b59-b184-051321e9489c\ncollecting  dc31c331-837b-4b59-b184-051321e9489c\nSNOTEL:729_OR_SNTL ea185683-4427-44c3-84e1-706cf16781ce\ncollecting  ea185683-4427-44c3-84e1-706cf16781ce\nSNOTEL:730_WY_SNTL df7e906a-07f3-4a46-b9a5-0200427c26f7\ncollecting  df7e906a-07f3-4a46-b9a5-0200427c26f7\nSNOTEL:731_WY_SNTL 3b5bfd37-070c-4ee9-a470-c9338851e270\ncollecting  3b5bfd37-070c-4ee9-a470-c9338851e270\nSNOTEL:732_WY_SNTL 8116acfb-8035-4d34-b9b9-b0af2c5697df\ncollecting  8116acfb-8035-4d34-b9b9-b0af2c5697df\nSNOTEL:733_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nSNOTEL:734_WA_SNTL bfda850c-3027-4e91-afcb-cca5e73e4a03\ncollecting  bfda850c-3027-4e91-afcb-cca5e73e4a03\nSNOTEL:735_ID_SNTL cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\ncollecting  cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\nSNOTEL:736_OR_SNTL c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\ncollecting  c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\nSNOTEL:738_ID_SNTL 0d0b742e-c324-4140-8f62-746210d79080\ncollecting  0d0b742e-c324-4140-8f62-746210d79080\nSNOTEL:739_CO_SNTL 35eee1cd-f92a-4ba5-af03-fb5347490f41\ncollecting  35eee1cd-f92a-4ba5-af03-fb5347490f41\nSNOTEL:741_ID_SNTL 6bf06917-011b-4029-8fbe-a8dfea3bc598\ncollecting  6bf06917-011b-4029-8fbe-a8dfea3bc598\nSNOTEL:742_UT_SNTL ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\ncollecting  ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\nSNOTEL:743_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nSNOTEL:744_NM_SNTL 6afdc499-9686-4451-b207-13df777df662\ncollecting  6afdc499-9686-4451-b207-13df777df662\nSNOTEL:745_OR_SNTL 5e252b65-58dd-421f-a0db-3d4669bfb235\ncollecting  5e252b65-58dd-421f-a0db-3d4669bfb235\nSNOTEL:746_NV_SNTL 5308a803-69e6-43cd-89db-66e93f9f83af\ncollecting  5308a803-69e6-43cd-89db-66e93f9f83af\nSNOTEL:747_ID_SNTL b1077b69-4b02-458e-8a4b-e68695ac534f\ncollecting  b1077b69-4b02-458e-8a4b-e68695ac534f\nSNOTEL:748_WA_SNTL cdfc27f0-b990-45f7-bac6-7c674cd157ac\ncollecting  cdfc27f0-b990-45f7-bac6-7c674cd157ac\nSNOTEL:749_ID_SNTL ce76ce00-c8b5-4597-8ca3-1ec9db795b50\ncollecting  ce76ce00-c8b5-4597-8ca3-1ec9db795b50\nSNOTEL:751_WY_SNTL 02c3ec4a-8de4-4284-9ec1-5a942d3d098e\ncollecting  02c3ec4a-8de4-4284-9ec1-5a942d3d098e\nSNOTEL:752_ID_SNTL b1077b69-4b02-458e-8a4b-e68695ac534f\ncollecting  b1077b69-4b02-458e-8a4b-e68695ac534f\nSNOTEL:754_MT_SNTL e467a17f-a729-4938-87a1-ac25157eed63\ncollecting  e467a17f-a729-4938-87a1-ac25157eed63\nSNOTEL:755_NM_SNTL 43be1328-02b0-4cc1-8e9b-75842908cee3\ncollecting  43be1328-02b0-4cc1-8e9b-75842908cee3\nSNOTEL:756_OR_SNTL 0a0ea690-5b73-4459-91d5-a6948d132a48\ncollecting  0a0ea690-5b73-4459-91d5-a6948d132a48\nSNOTEL:757_NM_SNTL 1135e377-22e6-4290-b4cd-e6739de7fd8a\ncollecting  1135e377-22e6-4290-b4cd-e6739de7fd8a\nSNOTEL:761_ID_SNTL 6bf06917-011b-4029-8fbe-a8dfea3bc598\ncollecting  6bf06917-011b-4029-8fbe-a8dfea3bc598\nSNOTEL:762_CO_SNTL 85f0acd8-4008-472d-bf40-e35e0e2934e4\ncollecting  85f0acd8-4008-472d-bf40-e35e0e2934e4\nSNOTEL:763_UT_SNTL 7bc3c413-4709-4ddd-a2ad-99f6cad9436c\ncollecting  7bc3c413-4709-4ddd-a2ad-99f6cad9436c\nSNOTEL:764_WY_SNTL 491846d3-f81a-4777-b49f-0a0c74168395\ncollecting  491846d3-f81a-4777-b49f-0a0c74168395\nSNOTEL:765_WY_SNTL df7e906a-07f3-4a46-b9a5-0200427c26f7\ncollecting  df7e906a-07f3-4a46-b9a5-0200427c26f7\nSNOTEL:767_OR_SNTL a6a9febf-ea16-4223-83d4-8e459e2af85a\ncollecting  a6a9febf-ea16-4223-83d4-8e459e2af85a\nSNOTEL:770_ID_SNTL 6bf06917-011b-4029-8fbe-a8dfea3bc598\ncollecting  6bf06917-011b-4029-8fbe-a8dfea3bc598\nSNOTEL:771_CA_SNTL 01be2cc7-ef77-4e4d-80ed-c4f8139162c3\ncollecting  01be2cc7-ef77-4e4d-80ed-c4f8139162c3\nSNOTEL:773_CO_SNTL efada0af-09bf-4013-a1c6-0837f8ff59c5\ncollecting  efada0af-09bf-4013-a1c6-0837f8ff59c5\nSNOTEL:777_WA_SNTL cdfc27f0-b990-45f7-bac6-7c674cd157ac\ncollecting  cdfc27f0-b990-45f7-bac6-7c674cd157ac\nSNOTEL:778_CA_SNTL 962f6718-ce02-4d13-b28c-e159d1adc2d4\ncollecting  962f6718-ce02-4d13-b28c-e159d1adc2d4\nSNOTEL:779_WY_SNTL df7e906a-07f3-4a46-b9a5-0200427c26f7\ncollecting  df7e906a-07f3-4a46-b9a5-0200427c26f7\nSNOTEL:780_CO_SNTL ce9da6bf-cf6e-4edb-b579-5a0853b2ed17\ncollecting  ce9da6bf-cf6e-4edb-b579-5a0853b2ed17\nSNOTEL:781_MT_SNTL 517aefce-a617-4251-acb9-c5faf0b7fdf3\ncollecting  517aefce-a617-4251-acb9-c5faf0b7fdf3\nSNOTEL:782_ID_SNTL da6ce150-5daf-4a91-9fdd-a85854462b08\ncollecting  da6ce150-5daf-4a91-9fdd-a85854462b08\nSNOTEL:784_CA_SNTL f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nSNOTEL:786_WY_SNTL de9c541b-ce5e-4cc6-9ddd-03f85dc5b3d5\ncollecting  de9c541b-ce5e-4cc6-9ddd-03f85dc5b3d5\nSNOTEL:787_MT_SNTL d37ccc2e-7127-48ec-9425-2e77681c3635\ncollecting  d37ccc2e-7127-48ec-9425-2e77681c3635\nSNOTEL:790_UT_SNTL c0568d62-49c7-4d9f-beba-ac0fb3e064c5\ncollecting  c0568d62-49c7-4d9f-beba-ac0fb3e064c5\nSNOTEL:791_WA_SNTL bfda850c-3027-4e91-afcb-cca5e73e4a03\ncollecting  bfda850c-3027-4e91-afcb-cca5e73e4a03\nSNOTEL:792_ID_SNTL f3332d55-ecc8-4644-9deb-180e42abb2eb\ncollecting  f3332d55-ecc8-4644-9deb-180e42abb2eb\nSNOTEL:793_CO_SNTL 8c45801f-6377-42e1-ae0a-9b53593ff843\ncollecting  8c45801f-6377-42e1-ae0a-9b53593ff843\nSNOTEL:794_OR_SNTL 0a0ea690-5b73-4459-91d5-a6948d132a48\ncollecting  0a0ea690-5b73-4459-91d5-a6948d132a48\nSNOTEL:795_UT_SNTL cfe58efd-ce2a-495a-90cd-6826f704ebee\ncollecting  cfe58efd-ce2a-495a-90cd-6826f704ebee\nSNOTEL:797_CO_SNTL 003fdfbd-c766-4312-b029-bd4cfba6ebef\ncollecting  003fdfbd-c766-4312-b029-bd4cfba6ebef\nSNOTEL:798_WY_SNTL 02c3ec4a-8de4-4284-9ec1-5a942d3d098e\ncollecting  02c3ec4a-8de4-4284-9ec1-5a942d3d098e\nSNOTEL:801_OR_SNTL ea185683-4427-44c3-84e1-706cf16781ce\ncollecting  ea185683-4427-44c3-84e1-706cf16781ce\nSNOTEL:803_ID_SNTL b5d7b6b8-4e5d-4b5e-8976-c72e99f57769\ncollecting  b5d7b6b8-4e5d-4b5e-8976-c72e99f57769\nSNOTEL:804_WA_SNTL cdfc27f0-b990-45f7-bac6-7c674cd157ac\ncollecting  cdfc27f0-b990-45f7-bac6-7c674cd157ac\nSNOTEL:805_ID_SNTL af0463d4-f20f-4d13-bd0f-5834e2e8717b\ncollecting  af0463d4-f20f-4d13-bd0f-5834e2e8717b\nSNOTEL:806_WY_SNTL 333458b2-c1a9-47a3-8ae0-92053ad28ae3\ncollecting  333458b2-c1a9-47a3-8ae0-92053ad28ae3\nSNOTEL:809_CA_SNTL f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nSNOTEL:810_OR_SNTL 5e252b65-58dd-421f-a0db-3d4669bfb235\ncollecting  5e252b65-58dd-421f-a0db-3d4669bfb235\nSNOTEL:811_NV_SNTL 875622b7-5253-43d2-8e0f-348767860eb9\ncollecting  875622b7-5253-43d2-8e0f-348767860eb9\nSNOTEL:812_OR_SNTL c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\ncollecting  c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\nSNOTEL:814_UT_SNTL eeb0a123-9482-4946-ab3f-9e63541cb655\ncollecting  eeb0a123-9482-4946-ab3f-9e63541cb655\nSNOTEL:815_OR_SNTL fe33672e-7ea7-4c5d-8639-96b2cc7edb0c\ncollecting  fe33672e-7ea7-4c5d-8639-96b2cc7edb0c\nSNOTEL:816_WY_SNTL 40c4f8cd-b0ca-4d37-b91e-b69e5dff7f9a\ncollecting  40c4f8cd-b0ca-4d37-b91e-b69e5dff7f9a\nSNOTEL:817_WA_SNTL 47e625fa-e2df-43ce-84dd-8ac21fdda75a\ncollecting  47e625fa-e2df-43ce-84dd-8ac21fdda75a\nSNOTEL:818_WY_SNTL 02c3ec4a-8de4-4284-9ec1-5a942d3d098e\ncollecting  02c3ec4a-8de4-4284-9ec1-5a942d3d098e\nSNOTEL:819_WY_SNTL 692c41af-2210-4dd6-916d-c99e76807447\ncollecting  692c41af-2210-4dd6-916d-c99e76807447\nSNOTEL:820_UT_SNTL eeb0a123-9482-4946-ab3f-9e63541cb655\ncollecting  eeb0a123-9482-4946-ab3f-9e63541cb655\nSNOTEL:822_WY_SNTL 695bed09-0ad9-406e-b489-69408adeea06\ncollecting  695bed09-0ad9-406e-b489-69408adeea06\nSNOTEL:823_UT_SNTL 2222b7b3-f48b-4cea-90bf-8e7245d002ea\ncollecting  2222b7b3-f48b-4cea-90bf-8e7245d002ea\nSNOTEL:824_WA_SNTL f78ea076-10a1-45dc-a848-c08e129c6a28\ncollecting  f78ea076-10a1-45dc-a848-c08e129c6a28\nSNOTEL:825_CO_SNTL 02cf33c2-c8e2-48b9-bf72-92506e97e251\ncollecting  02cf33c2-c8e2-48b9-bf72-92506e97e251\nSNOTEL:826_WY_SNTL 990e5974-9c60-4c9a-ba23-ddce13971178\ncollecting  990e5974-9c60-4c9a-ba23-ddce13971178\nSNOTEL:827_CO_SNTL d64197fc-0723-4c61-9ce8-ff2554e24154\ncollecting  d64197fc-0723-4c61-9ce8-ff2554e24154\nSNOTEL:830_ID_SNTL 36b98590-a7e6-4e00-8c7d-f0f3d25bafec\ncollecting  36b98590-a7e6-4e00-8c7d-f0f3d25bafec\nSNOTEL:831_WY_SNTL 551e2612-8a22-4c44-8290-78dc0e4af85d\ncollecting  551e2612-8a22-4c44-8290-78dc0e4af85d\nSNOTEL:832_WA_SNTL 6d0ff6eb-0411-4863-b4e7-90958db98115\ncollecting  6d0ff6eb-0411-4863-b4e7-90958db98115\nSNOTEL:833_UT_SNTL 50d7ad3f-57f0-45e1-911d-b0efff9deb8f\ncollecting  50d7ad3f-57f0-45e1-911d-b0efff9deb8f\nSNOTEL:834_CA_SNTL f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nSNOTEL:835_MT_SNTL cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\ncollecting  cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\nSNOTEL:837_WY_SNTL 491846d3-f81a-4777-b49f-0a0c74168395\ncollecting  491846d3-f81a-4777-b49f-0a0c74168395\nSNOTEL:838_CO_SNTL f9f7132d-56a2-43e2-baba-312f34dbaeed\ncollecting  f9f7132d-56a2-43e2-baba-312f34dbaeed\nSNOTEL:839_CO_SNTL 0c31f316-6718-4a43-a9f1-ed552e45bd0f\ncollecting  0c31f316-6718-4a43-a9f1-ed552e45bd0f\nSNOTEL:840_CO_SNTL 3789f7a5-5743-4005-844d-602dadb33030\ncollecting  3789f7a5-5743-4005-844d-602dadb33030\nSNOTEL:841_WA_SNTL 6d0ff6eb-0411-4863-b4e7-90958db98115\ncollecting  6d0ff6eb-0411-4863-b4e7-90958db98115\nSNOTEL:842_CO_SNTL f62e6b4d-7f9d-4139-bac4-59f084fb09cd\ncollecting  f62e6b4d-7f9d-4139-bac4-59f084fb09cd\nSNOTEL:844_UT_SNTL 93b8483d-a510-42ff-865e-33d5a8784dc4\ncollecting  93b8483d-a510-42ff-865e-33d5a8784dc4\nSNOTEL:845_ID_SNTL 695c7749-a3b8-4158-bd14-59d1f2c3e736\ncollecting  695c7749-a3b8-4158-bd14-59d1f2c3e736\nSNOTEL:847_MT_SNTL dca30f20-582e-40ef-be6d-aa7858be4baa\ncollecting  dca30f20-582e-40ef-be6d-aa7858be4baa\nSNOTEL:848_CA_SNTL f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nSNOTEL:849_NV_SNTL 38793f95-324b-4f01-b1a7-45e1c9353bc1\ncollecting  38793f95-324b-4f01-b1a7-45e1c9353bc1\nSNOTEL:850_MT_SNTL 4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\ncollecting  4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\nSNOTEL:852_WY_SNTL 8116acfb-8035-4d34-b9b9-b0af2c5697df\ncollecting  8116acfb-8035-4d34-b9b9-b0af2c5697df\nSNOTEL:854_NM_SNTL 9c43edf0-541f-4dbb-9fe1-42cc83d453bd\ncollecting  9c43edf0-541f-4dbb-9fe1-42cc83d453bd\nSNOTEL:855_ID_SNTL c66f40ed-f72e-4012-991c-1f3726e5c8ad\ncollecting  c66f40ed-f72e-4012-991c-1f3726e5c8ad\nSNOTEL:857_CO_SNTL 2ca6a37f-67f5-4905-864b-ddf98d956ebb\ncollecting  2ca6a37f-67f5-4905-864b-ddf98d956ebb\nSNOTEL:858_MT_SNTL b1936012-0d31-4b92-8d60-c24903b2e569\ncollecting  b1936012-0d31-4b92-8d60-c24903b2e569\nSNOTEL:859_WY_SNTL 8116acfb-8035-4d34-b9b9-b0af2c5697df\ncollecting  8116acfb-8035-4d34-b9b9-b0af2c5697df\nSNOTEL:861_AZ_SNTL a2588440-600e-41da-b2b9-1f5632ecdef6\ncollecting  a2588440-600e-41da-b2b9-1f5632ecdef6\nSNOTEL:862_MT_SNTL e776d9b6-2180-4f50-90bf-77f7b920fc3b\ncollecting  e776d9b6-2180-4f50-90bf-77f7b920fc3b\nSNOTEL:863_WA_SNTL bb65d7a1-a5d5-4c89-9ef9-f0f1db06cc58\ncollecting  bb65d7a1-a5d5-4c89-9ef9-f0f1db06cc58\nSNOTEL:864_UT_SNTL 0a820e12-033b-45d6-9ef9-d70f4c5e5b63\ncollecting  0a820e12-033b-45d6-9ef9-d70f4c5e5b63\nSNOTEL:865_UT_SNTL ad44deb7-e56d-47bd-8d64-7147493e0aee\ncollecting  ad44deb7-e56d-47bd-8d64-7147493e0aee\nSNOTEL:868_WY_SNTL 551e2612-8a22-4c44-8290-78dc0e4af85d\ncollecting  551e2612-8a22-4c44-8290-78dc0e4af85d\nSNOTEL:869_CO_SNTL 8c45801f-6377-42e1-ae0a-9b53593ff843\ncollecting  8c45801f-6377-42e1-ae0a-9b53593ff843\nSNOTEL:871_ID_SNTL 5308a803-69e6-43cd-89db-66e93f9f83af\ncollecting  5308a803-69e6-43cd-89db-66e93f9f83af\nSNOTEL:872_WY_SNTL ab89875f-3b86-4c6a-8d66-767017570dfc\ncollecting  ab89875f-3b86-4c6a-8d66-767017570dfc\nSNOTEL:873_OR_SNTL 631ed3c9-7863-4e7c-86fa-4bfb043f2851\ncollecting  631ed3c9-7863-4e7c-86fa-4bfb043f2851\nSNOTEL:874_CO_SNTL 3789f7a5-5743-4005-844d-602dadb33030\ncollecting  3789f7a5-5743-4005-844d-602dadb33030\nSNOTEL:876_MT_SNTL 99a2d4a9-63a0-43a7-976d-2a1ed822186d\ncollecting  99a2d4a9-63a0-43a7-976d-2a1ed822186d\nSNOTEL:877_AZ_SNTL 0aeaffd7-9089-49e7-85ad-2314f32cbf7c\ncollecting  0aeaffd7-9089-49e7-85ad-2314f32cbf7c\nSNOTEL:878_WY_SNTL 692c41af-2210-4dd6-916d-c99e76807447\ncollecting  692c41af-2210-4dd6-916d-c99e76807447\nSNOTEL:895_ID_SNTL f3332d55-ecc8-4644-9deb-180e42abb2eb\ncollecting  f3332d55-ecc8-4644-9deb-180e42abb2eb\nSNOTEL:896_UT_SNTL 10162c55-772d-49d2-8b1b-b1f9c86254b2\ncollecting  10162c55-772d-49d2-8b1b-b1f9c86254b2\nSNOTEL:897_WA_SNTL 360f1bcc-aa60-4052-a18a-b33da5745ff4\ncollecting  360f1bcc-aa60-4052-a18a-b33da5745ff4\nSNOTEL:899_WA_SNTL 360f1bcc-aa60-4052-a18a-b33da5745ff4\ncollecting  360f1bcc-aa60-4052-a18a-b33da5745ff4\nSNOTEL:901_MT_SNTL 89a7b0ef-1ec8-490f-9207-c93aa57a147f\ncollecting  89a7b0ef-1ec8-490f-9207-c93aa57a147f\nSNOTEL:902_AZ_SNTL 1135e377-22e6-4290-b4cd-e6739de7fd8a\ncollecting  1135e377-22e6-4290-b4cd-e6739de7fd8a\nSNOTEL:904_CO_SNTL 0d9f0708-5e8d-4eb8-b946-6441ef955516\ncollecting  0d9f0708-5e8d-4eb8-b946-6441ef955516\nSNOTEL:905_CO_SNTL 9e5bc091-13c7-46ec-8c17-8e315b7e535c\ncollecting  9e5bc091-13c7-46ec-8c17-8e315b7e535c\nSNOTEL:906_UT_SNTL 93b8483d-a510-42ff-865e-33d5a8784dc4\ncollecting  93b8483d-a510-42ff-865e-33d5a8784dc4\nSNOTEL:907_UT_SNTL ad44deb7-e56d-47bd-8d64-7147493e0aee\ncollecting  ad44deb7-e56d-47bd-8d64-7147493e0aee\nSNOTEL:909_WA_SNTL e6d48180-814d-494b-99cc-0be5cd1a0eaf\ncollecting  e6d48180-814d-494b-99cc-0be5cd1a0eaf\nSNOTEL:911_WA_SNTL 360f1bcc-aa60-4052-a18a-b33da5745ff4\ncollecting  360f1bcc-aa60-4052-a18a-b33da5745ff4\nSNOTEL:912_WA_SNTL 8e7f826f-8dc9-490a-9282-98d899a07cc7\ncollecting  8e7f826f-8dc9-490a-9282-98d899a07cc7\nSNOTEL:913_CO_SNTL 02cf33c2-c8e2-48b9-bf72-92506e97e251\ncollecting  02cf33c2-c8e2-48b9-bf72-92506e97e251\nSNOTEL:915_ID_SNTL 830bc2b9-592d-4334-842a-213ba4c0a347\ncollecting  830bc2b9-592d-4334-842a-213ba4c0a347\nSNOTEL:917_MT_SNTL 9ea23099-dd30-4b26-9de7-5d42d5dae87b\ncollecting  9ea23099-dd30-4b26-9de7-5d42d5dae87b\nSNOTEL:918_MT_SNTL 2f5c1968-2c34-4539-a9f4-38298d0de925\ncollecting  2f5c1968-2c34-4539-a9f4-38298d0de925\nSNOTEL:919_MT_SNTL eab40c22-0c15-4291-a6ce-e085a7f0f1e4\ncollecting  eab40c22-0c15-4291-a6ce-e085a7f0f1e4\nSNOTEL:920_SD_SNTL ab89875f-3b86-4c6a-8d66-767017570dfc\ncollecting  ab89875f-3b86-4c6a-8d66-767017570dfc\nSNOTEL:921_NM_SNTL 9c43edf0-541f-4dbb-9fe1-42cc83d453bd\ncollecting  9c43edf0-541f-4dbb-9fe1-42cc83d453bd\nSNOTEL:922_NM_SNTL 9c43edf0-541f-4dbb-9fe1-42cc83d453bd\ncollecting  9c43edf0-541f-4dbb-9fe1-42cc83d453bd\nSNOTEL:923_WY_SNTL 990e5974-9c60-4c9a-ba23-ddce13971178\ncollecting  990e5974-9c60-4c9a-ba23-ddce13971178\nSNOTEL:924_MT_SNTL b1936012-0d31-4b92-8d60-c24903b2e569\ncollecting  b1936012-0d31-4b92-8d60-c24903b2e569\nSNOTEL:925_OR_SNTL e13f9c1b-dca0-4c63-a64c-76f6bc725156\ncollecting  e13f9c1b-dca0-4c63-a64c-76f6bc725156\nSNOTEL:926_ID_SNTL af0463d4-f20f-4d13-bd0f-5834e2e8717b\ncollecting  af0463d4-f20f-4d13-bd0f-5834e2e8717b\nSNOTEL:927_AZ_SNTL c0e85162-6ff4-401b-b01e-cc6d7a51eac0\ncollecting  c0e85162-6ff4-401b-b01e-cc6d7a51eac0\nSNOTEL:929_MT_SNTL e467a17f-a729-4938-87a1-ac25157eed63\ncollecting  e467a17f-a729-4938-87a1-ac25157eed63\nSNOTEL:930_MT_SNTL 4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\ncollecting  4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\nSNOTEL:935_CO_SNTL 7f215a89-2a17-42f0-a2fb-f18fbc888cef\ncollecting  7f215a89-2a17-42f0-a2fb-f18fbc888cef\nSNOTEL:936_CO_SNTL a5366d95-7b9d-4b1b-a16f-99e56fab08f5\ncollecting  a5366d95-7b9d-4b1b-a16f-99e56fab08f5\nSNOTEL:937_CO_SNTL 7a266524-6e76-4d06-963f-6f977e356574\ncollecting  7a266524-6e76-4d06-963f-6f977e356574\nSNOTEL:939_CO_SNTL fde3221a-9ce3-45a9-857f-bd196b07aa05\ncollecting  fde3221a-9ce3-45a9-857f-bd196b07aa05\nSNOTEL:941_WA_SNTL 2f266b81-aad3-4c26-ac69-1bd04a208bf7\ncollecting  2f266b81-aad3-4c26-ac69-1bd04a208bf7\nSNOTEL:942_WA_SNTL cdb446bc-e801-404f-9911-9ba5c687f6af\ncollecting  cdb446bc-e801-404f-9911-9ba5c687f6af\nSNOTEL:945_OR_SNTL 0a0ea690-5b73-4459-91d5-a6948d132a48\ncollecting  0a0ea690-5b73-4459-91d5-a6948d132a48\nSNOTEL:972_UT_SNTL 10162c55-772d-49d2-8b1b-b1f9c86254b2\ncollecting  10162c55-772d-49d2-8b1b-b1f9c86254b2\nSNOTEL:974_WA_SNTL 9448e70e-32ff-4c47-b6e7-ccb1df91743b\ncollecting  9448e70e-32ff-4c47-b6e7-ccb1df91743b\nSNOTEL:975_WA_SNTL 47e625fa-e2df-43ce-84dd-8ac21fdda75a\ncollecting  47e625fa-e2df-43ce-84dd-8ac21fdda75a\nSNOTEL:978_ID_SNTL da6ce150-5daf-4a91-9fdd-a85854462b08\ncollecting  da6ce150-5daf-4a91-9fdd-a85854462b08\nSNOTEL:981_MT_SNTL e776d9b6-2180-4f50-90bf-77f7b920fc3b\ncollecting  e776d9b6-2180-4f50-90bf-77f7b920fc3b\nSNOTEL:982_WY_SNTL ab89875f-3b86-4c6a-8d66-767017570dfc\ncollecting  ab89875f-3b86-4c6a-8d66-767017570dfc\nSNOTEL:984_WA_SNTL f78ea076-10a1-45dc-a848-c08e129c6a28\ncollecting  f78ea076-10a1-45dc-a848-c08e129c6a28\nSNOTEL:988_ID_SNTL 2f5c1968-2c34-4539-a9f4-38298d0de925\ncollecting  2f5c1968-2c34-4539-a9f4-38298d0de925\nSNOTEL:989_ID_SNTL f78ea076-10a1-45dc-a848-c08e129c6a28\ncollecting  f78ea076-10a1-45dc-a848-c08e129c6a28\nSNOTEL:990_WA_SNTL cde149fe-708b-4a35-bea8-959eb9da4e0b\ncollecting  cde149fe-708b-4a35-bea8-959eb9da4e0b\nSNOTEL:992_UT_SNTL 064d7f3e-8bbd-49cd-b360-5c4590a19b9e\ncollecting  064d7f3e-8bbd-49cd-b360-5c4590a19b9e\nSNOTEL:998_WA_SNTL cde149fe-708b-4a35-bea8-959eb9da4e0b\ncollecting  cde149fe-708b-4a35-bea8-959eb9da4e0b\nSNOTEL:999_WA_SNTL e6d48180-814d-494b-99cc-0be5cd1a0eaf\ncollecting  e6d48180-814d-494b-99cc-0be5cd1a0eaf\n",
  "history_begin_time" : 1647036778216,
  "history_end_time" : 1647036939719,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "pQ0MpNrF4pIq",
  "history_input" : "\n\n# reminder that if you are installing libraries in a Google Colab instance you will be prompted to restart your kernal\n\nfrom all_dependencies import *\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nstation_cell_mapper_file = f\"{github_dir}/data/ready_for_training/station_cell_mapping.csv\"\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\nstart_date = '2022-02-28'\nend_date = '2022-03-06'\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n     print(\"exists exiting..\")\n     exit()\n\nstation_cell_mapper_df = pd.read_csv(station_cell_mapper_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\n\nfor ind in station_cell_mapper_df.index:\n    \n    try:\n      \n  \t  print(station_cell_mapper_df['station_id'][ind], station_cell_mapper_df['cell_id'][ind])\n  \t  current_cell_id = station_cell_mapper_df['cell_id'][ind]\n  \t  print(\"collecting \", current_cell_id)\n\n  \t  longitude = station_cell_mapper_df['lon'][ind]\n  \t  latitude = station_cell_mapper_df['lat'][ind]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      \n  \t  print(e)\n  \t  pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\n\n",
  "history_output" : "Results will be saved to /Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-28_2022-03-06.csv\nCDEC:ADM 76b55900-eb3d-4d25-a538-f74302ffe72d\ncollecting  76b55900-eb3d-4d25-a538-f74302ffe72d\nCDEC:AGP f191fe19-0e81-4bc9-9980-29738a05a49b\ncollecting  f191fe19-0e81-4bc9-9980-29738a05a49b\nCDEC:ALP f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nCDEC:BCB 0a54de9c-d804-4681-9f7f-9f770a0f6d2e\ncollecting  0a54de9c-d804-4681-9f7f-9f770a0f6d2e\nCDEC:BCH 4f383fb2-6cc7-48a8-9bdb-9c5d150e6eae\ncollecting  4f383fb2-6cc7-48a8-9bdb-9c5d150e6eae\nCDEC:BFL 7cf8af73-1abf-40ad-9788-0d757201eeb0\ncollecting  7cf8af73-1abf-40ad-9788-0d757201eeb0\nCDEC:BGP 30641173-db10-4320-ab1e-c46e765a9011\ncollecting  30641173-db10-4320-ab1e-c46e765a9011\nCDEC:BIM 30ab5128-9a8f-4446-b781-faf8bafb677f\ncollecting  30ab5128-9a8f-4446-b781-faf8bafb677f\nCDEC:BKL df01bf44-46b8-4541-b0a4-ed1fae16ac38\ncollecting  df01bf44-46b8-4541-b0a4-ed1fae16ac38\nCDEC:BLA 6dd37e24-0a9c-4749-8ab6-7e26d42925d6\ncollecting  6dd37e24-0a9c-4749-8ab6-7e26d42925d6\nCDEC:BLC 018cf1a1-f945-4097-9c47-0c4690538bb5\ncollecting  018cf1a1-f945-4097-9c47-0c4690538bb5\nCDEC:BLD 962f6718-ce02-4d13-b28c-e159d1adc2d4\ncollecting  962f6718-ce02-4d13-b28c-e159d1adc2d4\nCDEC:BLK c89dc6ca-6d69-41ce-954d-b51f64aaacb1\ncollecting  c89dc6ca-6d69-41ce-954d-b51f64aaacb1\nCDEC:BLS 4bb8fe22-653c-4611-a3d8-de5b2c62d13d\ncollecting  4bb8fe22-653c-4611-a3d8-de5b2c62d13d\nCDEC:BMW d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nCDEC:BNK 65565709-caca-4ed5-a8b6-2794da371708\ncollecting  65565709-caca-4ed5-a8b6-2794da371708\nCDEC:BSK c89dc6ca-6d69-41ce-954d-b51f64aaacb1\ncollecting  c89dc6ca-6d69-41ce-954d-b51f64aaacb1\nCDEC:CDP 76b55900-eb3d-4d25-a538-f74302ffe72d\ncollecting  76b55900-eb3d-4d25-a538-f74302ffe72d\nCDEC:CHM f11515e9-f2a0-4f8c-9f2d-12b9e2dc8569\ncollecting  f11515e9-f2a0-4f8c-9f2d-12b9e2dc8569\nCDEC:CHP cc66f524-dd2b-4d3f-bf96-4941edca2879\ncollecting  cc66f524-dd2b-4d3f-bf96-4941edca2879\nCDEC:CRL 09288a61-d120-4cee-ac46-5a275a8f005c\ncollecting  09288a61-d120-4cee-ac46-5a275a8f005c\nCDEC:CSL 51ebe834-adf4-474e-871e-28ebca2bd0cc\ncollecting  51ebe834-adf4-474e-871e-28ebca2bd0cc\nCDEC:CSV 4f383fb2-6cc7-48a8-9bdb-9c5d150e6eae\ncollecting  4f383fb2-6cc7-48a8-9bdb-9c5d150e6eae\nCDEC:CWD 4f383fb2-6cc7-48a8-9bdb-9c5d150e6eae\ncollecting  4f383fb2-6cc7-48a8-9bdb-9c5d150e6eae\nCDEC:CWF 76b55900-eb3d-4d25-a538-f74302ffe72d\ncollecting  76b55900-eb3d-4d25-a538-f74302ffe72d\nCDEC:CXS c89dc6ca-6d69-41ce-954d-b51f64aaacb1\ncollecting  c89dc6ca-6d69-41ce-954d-b51f64aaacb1\nCDEC:DAN 70bfdc00-dbd2-4c44-8039-04a547f91f76\ncollecting  70bfdc00-dbd2-4c44-8039-04a547f91f76\nCDEC:DDM 01be2cc7-ef77-4e4d-80ed-c4f8139162c3\ncollecting  01be2cc7-ef77-4e4d-80ed-c4f8139162c3\nCDEC:DPO 9023330c-2766-4585-b6fe-63593c519e03\ncollecting  9023330c-2766-4585-b6fe-63593c519e03\nCDEC:DSS 76b55900-eb3d-4d25-a538-f74302ffe72d\ncollecting  76b55900-eb3d-4d25-a538-f74302ffe72d\nCDEC:EBB 962f6718-ce02-4d13-b28c-e159d1adc2d4\ncollecting  962f6718-ce02-4d13-b28c-e159d1adc2d4\nCDEC:EP5 f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nCDEC:FDC c89dc6ca-6d69-41ce-954d-b51f64aaacb1\ncollecting  c89dc6ca-6d69-41ce-954d-b51f64aaacb1\nCDEC:FLL d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nCDEC:FRN f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nCDEC:FRW ddc760c7-dc6e-4fd4-ac1a-987ba3f79748\ncollecting  ddc760c7-dc6e-4fd4-ac1a-987ba3f79748\nCDEC:GEM 690ae8d4-c0d0-4dad-a7c4-67f3df07cc78\ncollecting  690ae8d4-c0d0-4dad-a7c4-67f3df07cc78\nCDEC:GIN dbf421d4-0295-4a9f-9e20-88ac299360b1\ncollecting  dbf421d4-0295-4a9f-9e20-88ac299360b1\nCDEC:GKS 51ebe834-adf4-474e-871e-28ebca2bd0cc\ncollecting  51ebe834-adf4-474e-871e-28ebca2bd0cc\nCDEC:GNF 5ec8a57d-8d5f-4331-b1fb-9d766f42991a\ncollecting  5ec8a57d-8d5f-4331-b1fb-9d766f42991a\nCDEC:GNL 403090bc-fc9e-44fb-921b-f7eea63e9740\ncollecting  403090bc-fc9e-44fb-921b-f7eea63e9740\nCDEC:GRM 232ef8b4-938f-42d7-a6e4-647d5280edd2\ncollecting  232ef8b4-938f-42d7-a6e4-647d5280edd2\nCDEC:GRV cc8b7ef5-1c86-4bd2-8cb9-969c7df1884e\ncollecting  cc8b7ef5-1c86-4bd2-8cb9-969c7df1884e\nCDEC:GRZ 018cf1a1-f945-4097-9c47-0c4690538bb5\ncollecting  018cf1a1-f945-4097-9c47-0c4690538bb5\nCDEC:HGM d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nCDEC:HIG 65565709-caca-4ed5-a8b6-2794da371708\ncollecting  65565709-caca-4ed5-a8b6-2794da371708\nCDEC:HMB df01bf44-46b8-4541-b0a4-ed1fae16ac38\ncollecting  df01bf44-46b8-4541-b0a4-ed1fae16ac38\nCDEC:HNT 39dd8dce-b4a1-4db5-bc31-fba72181cf5e\ncollecting  39dd8dce-b4a1-4db5-bc31-fba72181cf5e\nCDEC:HOR d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nCDEC:HRK df01bf44-46b8-4541-b0a4-ed1fae16ac38\ncollecting  df01bf44-46b8-4541-b0a4-ed1fae16ac38\nCDEC:HRS 49b01e43-f719-450f-b7c6-556b08e9ef4d\ncollecting  49b01e43-f719-450f-b7c6-556b08e9ef4d\nCDEC:HVN d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nCDEC:HYS 51ebe834-adf4-474e-871e-28ebca2bd0cc\ncollecting  51ebe834-adf4-474e-871e-28ebca2bd0cc\nCDEC:IDC 018cf1a1-f945-4097-9c47-0c4690538bb5\ncollecting  018cf1a1-f945-4097-9c47-0c4690538bb5\nCDEC:IDP 018cf1a1-f945-4097-9c47-0c4690538bb5\ncollecting  018cf1a1-f945-4097-9c47-0c4690538bb5\nCDEC:INN 018cf1a1-f945-4097-9c47-0c4690538bb5\ncollecting  018cf1a1-f945-4097-9c47-0c4690538bb5\nCDEC:KTL 147d5eb4-e574-47e4-994a-8a2908c06050\ncollecting  147d5eb4-e574-47e4-994a-8a2908c06050\nCDEC:LBD 74f8c8bc-2f60-4232-b447-43459d5d22f0\ncollecting  74f8c8bc-2f60-4232-b447-43459d5d22f0\nCDEC:LLP 6dd37e24-0a9c-4749-8ab6-7e26d42925d6\ncollecting  6dd37e24-0a9c-4749-8ab6-7e26d42925d6\nCDEC:LVM 01be2cc7-ef77-4e4d-80ed-c4f8139162c3\ncollecting  01be2cc7-ef77-4e4d-80ed-c4f8139162c3\nCDEC:LVT 01be2cc7-ef77-4e4d-80ed-c4f8139162c3\ncollecting  01be2cc7-ef77-4e4d-80ed-c4f8139162c3\nCDEC:MDW 018cf1a1-f945-4097-9c47-0c4690538bb5\ncollecting  018cf1a1-f945-4097-9c47-0c4690538bb5\nCDEC:MED 00c4db22-a423-41a4-ada6-a8b1b04153a4\ncollecting  00c4db22-a423-41a4-ada6-a8b1b04153a4\nCDEC:MHP ec0952b6-f119-4f40-bf47-343d71245ddc\ncollecting  ec0952b6-f119-4f40-bf47-343d71245ddc\nCDEC:MNT 74f8c8bc-2f60-4232-b447-43459d5d22f0\ncollecting  74f8c8bc-2f60-4232-b447-43459d5d22f0\nCDEC:MRL d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nCDEC:MSK d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nCDEC:MTM b5c7343d-a4a9-4da9-aee3-36539a545af6\ncollecting  b5c7343d-a4a9-4da9-aee3-36539a545af6\nCDEC:PDS 17da8ab4-6dd8-481e-a025-7574765ef9b1\ncollecting  17da8ab4-6dd8-481e-a025-7574765ef9b1\nCDEC:PET 65565709-caca-4ed5-a8b6-2794da371708\ncollecting  65565709-caca-4ed5-a8b6-2794da371708\nCDEC:PSC 4f383fb2-6cc7-48a8-9bdb-9c5d150e6eae\ncollecting  4f383fb2-6cc7-48a8-9bdb-9c5d150e6eae\nCDEC:PSN 74f8c8bc-2f60-4232-b447-43459d5d22f0\ncollecting  74f8c8bc-2f60-4232-b447-43459d5d22f0\nCDEC:QUA d563ff8c-31c3-44a9-8fd3-2f8bc68b21b4\ncollecting  d563ff8c-31c3-44a9-8fd3-2f8bc68b21b4\nCDEC:RBP 51ebe834-adf4-474e-871e-28ebca2bd0cc\ncollecting  51ebe834-adf4-474e-871e-28ebca2bd0cc\nCDEC:RCC 018cf1a1-f945-4097-9c47-0c4690538bb5\ncollecting  018cf1a1-f945-4097-9c47-0c4690538bb5\nCDEC:RCK cbe04952-a2ae-4525-98c5-a644c9a5ddc5\ncollecting  cbe04952-a2ae-4525-98c5-a644c9a5ddc5\nCDEC:RP2 f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nCDEC:RRM 7cf8af73-1abf-40ad-9788-0d757201eeb0\ncollecting  7cf8af73-1abf-40ad-9788-0d757201eeb0\nCDEC:RTL 147d5eb4-e574-47e4-994a-8a2908c06050\ncollecting  147d5eb4-e574-47e4-994a-8a2908c06050\nCDEC:SCN c89dc6ca-6d69-41ce-954d-b51f64aaacb1\ncollecting  c89dc6ca-6d69-41ce-954d-b51f64aaacb1\nCDEC:SCT 7cf8af73-1abf-40ad-9788-0d757201eeb0\ncollecting  7cf8af73-1abf-40ad-9788-0d757201eeb0\nCDEC:SDF 65565709-caca-4ed5-a8b6-2794da371708\ncollecting  65565709-caca-4ed5-a8b6-2794da371708\nCDEC:SDW 74f8c8bc-2f60-4232-b447-43459d5d22f0\ncollecting  74f8c8bc-2f60-4232-b447-43459d5d22f0\nCDEC:SHM 7cf8af73-1abf-40ad-9788-0d757201eeb0\ncollecting  7cf8af73-1abf-40ad-9788-0d757201eeb0\nCDEC:SIL c89dc6ca-6d69-41ce-954d-b51f64aaacb1\ncollecting  c89dc6ca-6d69-41ce-954d-b51f64aaacb1\nCDEC:SLM 962f6718-ce02-4d13-b28c-e159d1adc2d4\ncollecting  962f6718-ce02-4d13-b28c-e159d1adc2d4\nCDEC:SLT 65565709-caca-4ed5-a8b6-2794da371708\ncollecting  65565709-caca-4ed5-a8b6-2794da371708\nCDEC:SPS 01be2cc7-ef77-4e4d-80ed-c4f8139162c3\ncollecting  01be2cc7-ef77-4e4d-80ed-c4f8139162c3\nCDEC:SPT 962f6718-ce02-4d13-b28c-e159d1adc2d4\ncollecting  962f6718-ce02-4d13-b28c-e159d1adc2d4\nCDEC:SQV f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nCDEC:SSM 147d5eb4-e574-47e4-994a-8a2908c06050\ncollecting  147d5eb4-e574-47e4-994a-8a2908c06050\nCDEC:SWM 6e96bf06-cbc5-45b5-a36b-e37864226099\ncollecting  6e96bf06-cbc5-45b5-a36b-e37864226099\nCDEC:TCC f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nCDEC:TK2 f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nCDEC:TMR c7e3f62c-a812-4342-8e4c-3a6a5dd96255\ncollecting  c7e3f62c-a812-4342-8e4c-3a6a5dd96255\nCDEC:TNY a8e91cfa-724a-4114-a9d4-291785ff31f8\ncollecting  a8e91cfa-724a-4114-a9d4-291785ff31f8\nCDEC:TUM 2dde4be2-b6fd-47e8-b53d-88b59d74fde1\ncollecting  2dde4be2-b6fd-47e8-b53d-88b59d74fde1\nCDEC:UBC b2e9cb6b-b45a-4cab-8333-247cb4c0b51b\ncollecting  b2e9cb6b-b45a-4cab-8333-247cb4c0b51b\nCDEC:UTY 46f21569-8ecf-4c46-b65b-d80fa83a20d5\ncollecting  46f21569-8ecf-4c46-b65b-d80fa83a20d5\nCDEC:VLC 643c05b6-03bc-4024-8000-2228f4b5a7ad\ncollecting  643c05b6-03bc-4024-8000-2228f4b5a7ad\nCDEC:VRG fb078c7e-4975-4c7f-8f42-180386ac8c3c\ncollecting  fb078c7e-4975-4c7f-8f42-180386ac8c3c\nCDEC:VVL 51ebe834-adf4-474e-871e-28ebca2bd0cc\ncollecting  51ebe834-adf4-474e-871e-28ebca2bd0cc\nCDEC:WC3 f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nCDEC:WHW dba335b6-9d97-4a89-9ff3-888a8a45575f\ncollecting  dba335b6-9d97-4a89-9ff3-888a8a45575f\nCDEC:WTM 057fb61e-ce45-4423-9ef2-b52d8c1237e9\ncollecting  057fb61e-ce45-4423-9ef2-b52d8c1237e9\nCDEC:WWC 50f7b567-4066-4437-a335-71aff4c94a2c\ncollecting  50f7b567-4066-4437-a335-71aff4c94a2c\nSNOTEL:1000_OR_SNTL 5e252b65-58dd-421f-a0db-3d4669bfb235\ncollecting  5e252b65-58dd-421f-a0db-3d4669bfb235\nSNOTEL:1005_CO_SNTL efada0af-09bf-4013-a1c6-0837f8ff59c5\ncollecting  efada0af-09bf-4013-a1c6-0837f8ff59c5\nSNOTEL:1009_MT_SNTL 517aefce-a617-4251-acb9-c5faf0b7fdf3\ncollecting  517aefce-a617-4251-acb9-c5faf0b7fdf3\nSNOTEL:1010_OR_SNTL 0a0ea690-5b73-4459-91d5-a6948d132a48\ncollecting  0a0ea690-5b73-4459-91d5-a6948d132a48\nSNOTEL:1011_WA_SNTL e6d48180-814d-494b-99cc-0be5cd1a0eaf\ncollecting  e6d48180-814d-494b-99cc-0be5cd1a0eaf\nSNOTEL:1012_WA_SNTL cdfc27f0-b990-45f7-bac6-7c674cd157ac\ncollecting  cdfc27f0-b990-45f7-bac6-7c674cd157ac\nSNOTEL:1013_UT_SNTL 2222b7b3-f48b-4cea-90bf-8e7245d002ea\ncollecting  2222b7b3-f48b-4cea-90bf-8e7245d002ea\nSNOTEL:1014_CO_SNTL cad51334-b3af-4c23-85c3-451c3447560a\ncollecting  cad51334-b3af-4c23-85c3-451c3447560a\nSNOTEL:1015_WY_SNTL 8116acfb-8035-4d34-b9b9-b0af2c5697df\ncollecting  8116acfb-8035-4d34-b9b9-b0af2c5697df\nSNOTEL:1016_ID_SNTL c66f40ed-f72e-4012-991c-1f3726e5c8ad\ncollecting  c66f40ed-f72e-4012-991c-1f3726e5c8ad\nSNOTEL:1017_NM_SNTL 6afdc499-9686-4451-b207-13df777df662\ncollecting  6afdc499-9686-4451-b207-13df777df662\nSNOTEL:1030_CO_SNTL 02cf33c2-c8e2-48b9-bf72-92506e97e251\ncollecting  02cf33c2-c8e2-48b9-bf72-92506e97e251\nSNOTEL:1031_CO_SNTL 8c45801f-6377-42e1-ae0a-9b53593ff843\ncollecting  8c45801f-6377-42e1-ae0a-9b53593ff843\nSNOTEL:1032_CO_SNTL 9f0599d8-81f3-4ab5-b275-48a6ddaaae5b\ncollecting  9f0599d8-81f3-4ab5-b275-48a6ddaaae5b\nSNOTEL:1033_CO_SNTL 86257c69-a8f1-43b1-9e07-73129e2c3fbc\ncollecting  86257c69-a8f1-43b1-9e07-73129e2c3fbc\nSNOTEL:1034_NM_SNTL 43be1328-02b0-4cc1-8e9b-75842908cee3\ncollecting  43be1328-02b0-4cc1-8e9b-75842908cee3\nSNOTEL:1039_UT_SNTL eeb0a123-9482-4946-ab3f-9e63541cb655\ncollecting  eeb0a123-9482-4946-ab3f-9e63541cb655\nSNOTEL:1040_CO_SNTL f62e6b4d-7f9d-4139-bac4-59f084fb09cd\ncollecting  f62e6b4d-7f9d-4139-bac4-59f084fb09cd\nSNOTEL:1043_WA_SNTL c59f438c-f00a-476a-938e-efd828e0d083\ncollecting  c59f438c-f00a-476a-938e-efd828e0d083\nSNOTEL:1044_OR_SNTL 7acd0d51-ff30-42a3-9338-590432bd0e43\ncollecting  7acd0d51-ff30-42a3-9338-590432bd0e43\nSNOTEL:1045_WY_SNTL 3b5bfd37-070c-4ee9-a470-c9338851e270\ncollecting  3b5bfd37-070c-4ee9-a470-c9338851e270\nSNOTEL:1046_WY_SNTL 3b5bfd37-070c-4ee9-a470-c9338851e270\ncollecting  3b5bfd37-070c-4ee9-a470-c9338851e270\nSNOTEL:1048_NM_SNTL 43be1328-02b0-4cc1-8e9b-75842908cee3\ncollecting  43be1328-02b0-4cc1-8e9b-75842908cee3\nSNOTEL:1050_CA_SNTL d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nSNOTEL:1051_CA_SNTL c89dc6ca-6d69-41ce-954d-b51f64aaacb1\ncollecting  c89dc6ca-6d69-41ce-954d-b51f64aaacb1\nSNOTEL:1052_CA_SNTL 74f8c8bc-2f60-4232-b447-43459d5d22f0\ncollecting  74f8c8bc-2f60-4232-b447-43459d5d22f0\nSNOTEL:1053_ID_SNTL 2f5c1968-2c34-4539-a9f4-38298d0de925\ncollecting  2f5c1968-2c34-4539-a9f4-38298d0de925\nSNOTEL:1054_UT_SNTL 10162c55-772d-49d2-8b1b-b1f9c86254b2\ncollecting  10162c55-772d-49d2-8b1b-b1f9c86254b2\nSNOTEL:1058_CO_SNTL c340219b-307b-412b-9368-b50639bd372d\ncollecting  c340219b-307b-412b-9368-b50639bd372d\nSNOTEL:1061_CO_SNTL 02cf33c2-c8e2-48b9-bf72-92506e97e251\ncollecting  02cf33c2-c8e2-48b9-bf72-92506e97e251\nSNOTEL:1065_UT_SNTL 24cd85fa-6aee-4556-bb8a-b6696eb72a19\ncollecting  24cd85fa-6aee-4556-bb8a-b6696eb72a19\nSNOTEL:1066_UT_SNTL 24cd85fa-6aee-4556-bb8a-b6696eb72a19\ncollecting  24cd85fa-6aee-4556-bb8a-b6696eb72a19\nSNOTEL:1067_CA_SNTL c89dc6ca-6d69-41ce-954d-b51f64aaacb1\ncollecting  c89dc6ca-6d69-41ce-954d-b51f64aaacb1\nSNOTEL:1068_WA_SNTL bfda850c-3027-4e91-afcb-cca5e73e4a03\ncollecting  bfda850c-3027-4e91-afcb-cca5e73e4a03\nSNOTEL:1077_OR_SNTL 5e252b65-58dd-421f-a0db-3d4669bfb235\ncollecting  5e252b65-58dd-421f-a0db-3d4669bfb235\nSNOTEL:1079_OR_SNTL f78ea076-10a1-45dc-a848-c08e129c6a28\ncollecting  f78ea076-10a1-45dc-a848-c08e129c6a28\nSNOTEL:1082_WY_SNTL ce76ce00-c8b5-4597-8ca3-1ec9db795b50\ncollecting  ce76ce00-c8b5-4597-8ca3-1ec9db795b50\nSNOTEL:1084_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nSNOTEL:1085_WA_SNTL 9474e816-b673-4e6d-83e0-28c274945bef\ncollecting  9474e816-b673-4e6d-83e0-28c274945bef\nSNOTEL:1098_UT_SNTL 2222b7b3-f48b-4cea-90bf-8e7245d002ea\ncollecting  2222b7b3-f48b-4cea-90bf-8e7245d002ea\nSNOTEL:1099_UT_SNTL ad44deb7-e56d-47bd-8d64-7147493e0aee\ncollecting  ad44deb7-e56d-47bd-8d64-7147493e0aee\nSNOTEL:1100_CO_SNTL b99b0ffd-6fa9-482c-8511-f7b87e705d35\ncollecting  b99b0ffd-6fa9-482c-8511-f7b87e705d35\nSNOTEL:1101_CO_SNTL e833aad1-6da3-4413-b25e-b2ab5b2029c0\ncollecting  e833aad1-6da3-4413-b25e-b2ab5b2029c0\nSNOTEL:1104_WA_SNTL cdfc27f0-b990-45f7-bac6-7c674cd157ac\ncollecting  cdfc27f0-b990-45f7-bac6-7c674cd157ac\nSNOTEL:1105_MT_SNTL f46e7d90-a754-44a8-b262-63f5c401a0ab\ncollecting  f46e7d90-a754-44a8-b262-63f5c401a0ab\nSNOTEL:1107_WA_SNTL 0f46ad2b-4b1f-4232-8e46-be7122d53b86\ncollecting  0f46ad2b-4b1f-4232-8e46-be7122d53b86\nSNOTEL:1109_WA_SNTL cdfc27f0-b990-45f7-bac6-7c674cd157ac\ncollecting  cdfc27f0-b990-45f7-bac6-7c674cd157ac\nSNOTEL:1110_NV_SNTL 8ca1aaab-07de-4532-a99f-4ab8bce2f862\ncollecting  8ca1aaab-07de-4532-a99f-4ab8bce2f862\nSNOTEL:1111_NV_SNTL 8ca1aaab-07de-4532-a99f-4ab8bce2f862\ncollecting  8ca1aaab-07de-4532-a99f-4ab8bce2f862\nSNOTEL:1113_UT_SNTL 2222b7b3-f48b-4cea-90bf-8e7245d002ea\ncollecting  2222b7b3-f48b-4cea-90bf-8e7245d002ea\nSNOTEL:1114_UT_SNTL 2222b7b3-f48b-4cea-90bf-8e7245d002ea\ncollecting  2222b7b3-f48b-4cea-90bf-8e7245d002ea\nSNOTEL:1115_UT_SNTL 2222b7b3-f48b-4cea-90bf-8e7245d002ea\ncollecting  2222b7b3-f48b-4cea-90bf-8e7245d002ea\nSNOTEL:1119_WY_SNTL 8116acfb-8035-4d34-b9b9-b0af2c5697df\ncollecting  8116acfb-8035-4d34-b9b9-b0af2c5697df\nSNOTEL:1120_CO_SNTL f62e6b4d-7f9d-4139-bac4-59f084fb09cd\ncollecting  f62e6b4d-7f9d-4139-bac4-59f084fb09cd\nSNOTEL:1121_AZ_SNTL c0e85162-6ff4-401b-b01e-cc6d7a51eac0\ncollecting  c0e85162-6ff4-401b-b01e-cc6d7a51eac0\nSNOTEL:1122_CO_SNTL e4473542-1804-41c0-82b2-eaddc245845d\ncollecting  e4473542-1804-41c0-82b2-eaddc245845d\nSNOTEL:1123_CO_SNTL e4473542-1804-41c0-82b2-eaddc245845d\ncollecting  e4473542-1804-41c0-82b2-eaddc245845d\nSNOTEL:1124_CO_SNTL aa0d6340-c817-48c9-8727-8d3457606381\ncollecting  aa0d6340-c817-48c9-8727-8d3457606381\nSNOTEL:1127_AZ_SNTL 1135e377-22e6-4290-b4cd-e6739de7fd8a\ncollecting  1135e377-22e6-4290-b4cd-e6739de7fd8a\nSNOTEL:1128_CO_SNTL f25cdbec-2f14-42c5-a6ef-a60f3a90caff\ncollecting  f25cdbec-2f14-42c5-a6ef-a60f3a90caff\nSNOTEL:1129_WA_SNTL 06ec1554-a0ea-41cf-85f8-43f4b48c7599\ncollecting  06ec1554-a0ea-41cf-85f8-43f4b48c7599\nSNOTEL:1131_WY_SNTL 02c3ec4a-8de4-4284-9ec1-5a942d3d098e\ncollecting  02c3ec4a-8de4-4284-9ec1-5a942d3d098e\nSNOTEL:1132_WY_SNTL c5a82752-3e4b-43ec-8011-9111b9bfcb89\ncollecting  c5a82752-3e4b-43ec-8011-9111b9bfcb89\nSNOTEL:1133_WY_SNTL 679fe096-5475-4d4d-b0f8-81e32de889aa\ncollecting  679fe096-5475-4d4d-b0f8-81e32de889aa\nSNOTEL:1134_WY_SNTL 990e5974-9c60-4c9a-ba23-ddce13971178\ncollecting  990e5974-9c60-4c9a-ba23-ddce13971178\nSNOTEL:1135_UT_SNTL 064d7f3e-8bbd-49cd-b360-5c4590a19b9e\ncollecting  064d7f3e-8bbd-49cd-b360-5c4590a19b9e\nSNOTEL:1136_NV_SNTL 875622b7-5253-43d2-8e0f-348767860eb9\ncollecting  875622b7-5253-43d2-8e0f-348767860eb9\nSNOTEL:1138_NM_SNTL eb1d889a-c427-49e1-95a1-fa6577002c9b\ncollecting  eb1d889a-c427-49e1-95a1-fa6577002c9b\nSNOTEL:1139_AZ_SNTL a2588440-600e-41da-b2b9-1f5632ecdef6\ncollecting  a2588440-600e-41da-b2b9-1f5632ecdef6\nSNOTEL:1140_AZ_SNTL 972ab3b1-7445-4f57-a1a1-c3be4c257869\ncollecting  972ab3b1-7445-4f57-a1a1-c3be4c257869\nSNOTEL:1141_CO_SNTL 09f879b9-4378-479e-949b-cdc3bec8f59f\ncollecting  09f879b9-4378-479e-949b-cdc3bec8f59f\nSNOTEL:1143_AZ_SNTL e925f8e6-6eee-4fa7-9034-41eb9917df5e\ncollecting  e925f8e6-6eee-4fa7-9034-41eb9917df5e\nSNOTEL:1144_MT_SNTL d37ccc2e-7127-48ec-9425-2e77681c3635\ncollecting  d37ccc2e-7127-48ec-9425-2e77681c3635\nSNOTEL:1146_UT_SNTL ba4b2f3f-c8e3-4535-9781-426e4f77ba4c\ncollecting  ba4b2f3f-c8e3-4535-9781-426e4f77ba4c\nSNOTEL:1147_NV_SNTL 38793f95-324b-4f01-b1a7-45e1c9353bc1\ncollecting  38793f95-324b-4f01-b1a7-45e1c9353bc1\nSNOTEL:1148_UT_SNTL 55d3e9a6-e153-43c3-a66c-cd60711ff4a9\ncollecting  55d3e9a6-e153-43c3-a66c-cd60711ff4a9\nSNOTEL:1149_UT_SNTL ad44deb7-e56d-47bd-8d64-7147493e0aee\ncollecting  ad44deb7-e56d-47bd-8d64-7147493e0aee\nSNOTEL:1150_NV_SNTL 38793f95-324b-4f01-b1a7-45e1c9353bc1\ncollecting  38793f95-324b-4f01-b1a7-45e1c9353bc1\nSNOTEL:1152_NV_SNTL 38793f95-324b-4f01-b1a7-45e1c9353bc1\ncollecting  38793f95-324b-4f01-b1a7-45e1c9353bc1\nSNOTEL:1154_UT_SNTL 55d3e9a6-e153-43c3-a66c-cd60711ff4a9\ncollecting  55d3e9a6-e153-43c3-a66c-cd60711ff4a9\nSNOTEL:1155_NV_SNTL 38793f95-324b-4f01-b1a7-45e1c9353bc1\ncollecting  38793f95-324b-4f01-b1a7-45e1c9353bc1\nSNOTEL:1156_UT_SNTL 7b636fe2-1760-45c5-afce-505f2e927163\ncollecting  7b636fe2-1760-45c5-afce-505f2e927163\nSNOTEL:1159_WA_SNTL dc31c331-837b-4b59-b184-051321e9489c\ncollecting  dc31c331-837b-4b59-b184-051321e9489c\nSNOTEL:1160_CO_SNTL 12bde9ee-0e0a-49ac-ab19-b410adb61b3c\ncollecting  12bde9ee-0e0a-49ac-ab19-b410adb61b3c\nSNOTEL:1161_CO_SNTL 9f0599d8-81f3-4ab5-b275-48a6ddaaae5b\ncollecting  9f0599d8-81f3-4ab5-b275-48a6ddaaae5b\nSNOTEL:1162_UT_SNTL c0568d62-49c7-4d9f-beba-ac0fb3e064c5\ncollecting  c0568d62-49c7-4d9f-beba-ac0fb3e064c5\nSNOTEL:1166_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nSNOTEL:1167_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nSNOTEL:1168_NM_SNTL e3473791-6153-49bc-a2ed-0b1e3e243942\ncollecting  e3473791-6153-49bc-a2ed-0b1e3e243942\nSNOTEL:1169_NM_SNTL e3473791-6153-49bc-a2ed-0b1e3e243942\ncollecting  e3473791-6153-49bc-a2ed-0b1e3e243942\nSNOTEL:1170_NM_SNTL e3473791-6153-49bc-a2ed-0b1e3e243942\ncollecting  e3473791-6153-49bc-a2ed-0b1e3e243942\nSNOTEL:1171_WA_SNTL 47e625fa-e2df-43ce-84dd-8ac21fdda75a\ncollecting  47e625fa-e2df-43ce-84dd-8ac21fdda75a\nSNOTEL:1172_NM_SNTL 674e34ce-8b77-422b-ab14-c6c3a0183e39\ncollecting  674e34ce-8b77-422b-ab14-c6c3a0183e39\nSNOTEL:1184_UT_SNTL 9813294e-a28e-45c0-976d-a6fa65d87927\ncollecting  9813294e-a28e-45c0-976d-a6fa65d87927\nSNOTEL:1185_CO_SNTL 548ff935-a421-4f4c-8eef-0bb19ed6c5f8\ncollecting  548ff935-a421-4f4c-8eef-0bb19ed6c5f8\nSNOTEL:1186_CO_SNTL cad51334-b3af-4c23-85c3-451c3447560a\ncollecting  cad51334-b3af-4c23-85c3-451c3447560a\nSNOTEL:1187_CO_SNTL f9f7132d-56a2-43e2-baba-312f34dbaeed\ncollecting  f9f7132d-56a2-43e2-baba-312f34dbaeed\nSNOTEL:1192_UT_SNTL a28a3caf-eea2-414f-8003-62ac82daaafa\ncollecting  a28a3caf-eea2-414f-8003-62ac82daaafa\nSNOTEL:1195_NV_SNTL f1f17cee-3fca-44bc-8974-b72d5f995a4a\ncollecting  f1f17cee-3fca-44bc-8974-b72d5f995a4a\nSNOTEL:1196_WY_SNTL 14c19b34-6359-4d3f-865e-0b9852a0e958\ncollecting  14c19b34-6359-4d3f-865e-0b9852a0e958\nSNOTEL:1197_UT_SNTL 55d3e9a6-e153-43c3-a66c-cd60711ff4a9\ncollecting  55d3e9a6-e153-43c3-a66c-cd60711ff4a9\nSNOTEL:1214_UT_SNTL 93b8483d-a510-42ff-865e-33d5a8784dc4\ncollecting  93b8483d-a510-42ff-865e-33d5a8784dc4\nSNOTEL:1215_UT_SNTL 20b97bae-60d6-466d-aca9-334d9b2d63b6\ncollecting  20b97bae-60d6-466d-aca9-334d9b2d63b6\nSNOTEL:1216_UT_SNTL 0a820e12-033b-45d6-9ef9-d70f4c5e5b63\ncollecting  0a820e12-033b-45d6-9ef9-d70f4c5e5b63\nSNOTEL:1222_UT_SNTL ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\ncollecting  ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\nSNOTEL:1223_UT_SNTL cfe58efd-ce2a-495a-90cd-6826f704ebee\ncollecting  cfe58efd-ce2a-495a-90cd-6826f704ebee\nSNOTEL:1224_UT_SNTL 9813294e-a28e-45c0-976d-a6fa65d87927\ncollecting  9813294e-a28e-45c0-976d-a6fa65d87927\nSNOTEL:1225_UT_SNTL 7bc3c413-4709-4ddd-a2ad-99f6cad9436c\ncollecting  7bc3c413-4709-4ddd-a2ad-99f6cad9436c\nSNOTEL:1226_UT_SNTL ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\ncollecting  ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\nSNOTEL:1227_UT_SNTL ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\ncollecting  ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\nSNOTEL:1228_UT_SNTL 9813294e-a28e-45c0-976d-a6fa65d87927\ncollecting  9813294e-a28e-45c0-976d-a6fa65d87927\nSNOTEL:1231_WA_SNTL 06ec1554-a0ea-41cf-85f8-43f4b48c7599\ncollecting  06ec1554-a0ea-41cf-85f8-43f4b48c7599\nSNOTEL:1236_UT_SNTL 19b5e6ce-c1a0-4cce-85f5-248c9f1abb6e\ncollecting  19b5e6ce-c1a0-4cce-85f5-248c9f1abb6e\nSNOTEL:1242_NV_SNTL d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nSNOTEL:1243_NV_SNTL a5080351-033f-4cfa-ad27-019fc84e052c\ncollecting  a5080351-033f-4cfa-ad27-019fc84e052c\nSNOTEL:1244_NV_SNTL 0efc68ba-5786-4c54-8028-e6f92efa6757\ncollecting  0efc68ba-5786-4c54-8028-e6f92efa6757\nSNOTEL:1247_UT_SNTL 93b8483d-a510-42ff-865e-33d5a8784dc4\ncollecting  93b8483d-a510-42ff-865e-33d5a8784dc4\nSNOTEL:1248_UT_SNTL 55d3e9a6-e153-43c3-a66c-cd60711ff4a9\ncollecting  55d3e9a6-e153-43c3-a66c-cd60711ff4a9\nSNOTEL:1249_UT_SNTL ad44deb7-e56d-47bd-8d64-7147493e0aee\ncollecting  ad44deb7-e56d-47bd-8d64-7147493e0aee\nSNOTEL:1251_CO_SNTL f9f7132d-56a2-43e2-baba-312f34dbaeed\ncollecting  f9f7132d-56a2-43e2-baba-312f34dbaeed\nSNOTEL:1252_CO_SNTL 8116acfb-8035-4d34-b9b9-b0af2c5697df\ncollecting  8116acfb-8035-4d34-b9b9-b0af2c5697df\nSNOTEL:1254_NM_SNTL 9c43edf0-541f-4dbb-9fe1-42cc83d453bd\ncollecting  9c43edf0-541f-4dbb-9fe1-42cc83d453bd\nSNOTEL:1256_WA_SNTL c59f438c-f00a-476a-938e-efd828e0d083\ncollecting  c59f438c-f00a-476a-938e-efd828e0d083\nSNOTEL:1257_WA_SNTL 2f266b81-aad3-4c26-ac69-1bd04a208bf7\ncollecting  2f266b81-aad3-4c26-ac69-1bd04a208bf7\nSNOTEL:1258_CA_SNTL 76b55900-eb3d-4d25-a538-f74302ffe72d\ncollecting  76b55900-eb3d-4d25-a538-f74302ffe72d\nSNOTEL:1259_WA_SNTL dc31c331-837b-4b59-b184-051321e9489c\ncollecting  dc31c331-837b-4b59-b184-051321e9489c\nSNOTEL:1261_UT_SNTL ad44deb7-e56d-47bd-8d64-7147493e0aee\ncollecting  ad44deb7-e56d-47bd-8d64-7147493e0aee\nSNOTEL:1262_NV_SNTL 875622b7-5253-43d2-8e0f-348767860eb9\ncollecting  875622b7-5253-43d2-8e0f-348767860eb9\nSNOTEL:1263_WA_SNTL cdfc27f0-b990-45f7-bac6-7c674cd157ac\ncollecting  cdfc27f0-b990-45f7-bac6-7c674cd157ac\nSNOTEL:1269_UT_SNTL ad44deb7-e56d-47bd-8d64-7147493e0aee\ncollecting  ad44deb7-e56d-47bd-8d64-7147493e0aee\nSNOTEL:1271_AZ_SNTL f6a782f0-4b17-4989-815c-2398b77b09dd\ncollecting  f6a782f0-4b17-4989-815c-2398b77b09dd\nSNOTEL:1272_NV_SNTL 5308a803-69e6-43cd-89db-66e93f9f83af\ncollecting  5308a803-69e6-43cd-89db-66e93f9f83af\nSNOTEL:1277_CA_SNTL 147d5eb4-e574-47e4-994a-8a2908c06050\ncollecting  147d5eb4-e574-47e4-994a-8a2908c06050\nSNOTEL:1278_UT_SNTL 7b636fe2-1760-45c5-afce-505f2e927163\ncollecting  7b636fe2-1760-45c5-afce-505f2e927163\nSNOTEL:1280_UT_SNTL ba4b2f3f-c8e3-4535-9781-426e4f77ba4c\ncollecting  ba4b2f3f-c8e3-4535-9781-426e4f77ba4c\nSNOTEL:1286_MT_SNTL cacaa17b-0b1b-4fe2-a4c1-7728e6c154c1\ncollecting  cacaa17b-0b1b-4fe2-a4c1-7728e6c154c1\nSNOTEL:1287_MT_SNTL e9759e79-461c-425e-af17-0a88be1a441f\ncollecting  e9759e79-461c-425e-af17-0a88be1a441f\nSNOTEL:2029_ID_SNTL 0cda0c4a-405b-4e16-8922-964190929d80\ncollecting  0cda0c4a-405b-4e16-8922-964190929d80\nSNOTEL:301_CA_SNTL 76b55900-eb3d-4d25-a538-f74302ffe72d\ncollecting  76b55900-eb3d-4d25-a538-f74302ffe72d\nSNOTEL:302_OR_SNTL c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\ncollecting  c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\nSNOTEL:303_CO_SNTL 2ca6a37f-67f5-4905-864b-ddf98d956ebb\ncollecting  2ca6a37f-67f5-4905-864b-ddf98d956ebb\nSNOTEL:304_OR_SNTL 78ccacb3-4eb9-4d95-b244-f3a709e39fd1\ncollecting  78ccacb3-4eb9-4d95-b244-f3a709e39fd1\nSNOTEL:305_CO_SNTL cad51334-b3af-4c23-85c3-451c3447560a\ncollecting  cad51334-b3af-4c23-85c3-451c3447560a\nSNOTEL:306_ID_SNTL 36b98590-a7e6-4e00-8c7d-f0f3d25bafec\ncollecting  36b98590-a7e6-4e00-8c7d-f0f3d25bafec\nSNOTEL:308_AZ_SNTL 972ab3b1-7445-4f57-a1a1-c3be4c257869\ncollecting  972ab3b1-7445-4f57-a1a1-c3be4c257869\nSNOTEL:311_MT_SNTL 0b9543d3-3cf9-4f28-b8eb-fd22c1956153\ncollecting  0b9543d3-3cf9-4f28-b8eb-fd22c1956153\nSNOTEL:312_ID_SNTL 36b98590-a7e6-4e00-8c7d-f0f3d25bafec\ncollecting  36b98590-a7e6-4e00-8c7d-f0f3d25bafec\nSNOTEL:313_MT_SNTL 4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\ncollecting  4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\nSNOTEL:316_NM_SNTL 674e34ce-8b77-422b-ab14-c6c3a0183e39\ncollecting  674e34ce-8b77-422b-ab14-c6c3a0183e39\nSNOTEL:317_WY_SNTL 8116acfb-8035-4d34-b9b9-b0af2c5697df\ncollecting  8116acfb-8035-4d34-b9b9-b0af2c5697df\nSNOTEL:319_ID_SNTL c66f40ed-f72e-4012-991c-1f3726e5c8ad\ncollecting  c66f40ed-f72e-4012-991c-1f3726e5c8ad\nSNOTEL:320_ID_SNTL af0463d4-f20f-4d13-bd0f-5834e2e8717b\ncollecting  af0463d4-f20f-4d13-bd0f-5834e2e8717b\nSNOTEL:321_NV_SNTL 5308a803-69e6-43cd-89db-66e93f9f83af\ncollecting  5308a803-69e6-43cd-89db-66e93f9f83af\nSNOTEL:322_CO_SNTL f9f7132d-56a2-43e2-baba-312f34dbaeed\ncollecting  f9f7132d-56a2-43e2-baba-312f34dbaeed\nSNOTEL:324_ID_SNTL c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\ncollecting  c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\nSNOTEL:325_WY_SNTL c5a82752-3e4b-43ec-8011-9111b9bfcb89\ncollecting  c5a82752-3e4b-43ec-8011-9111b9bfcb89\nSNOTEL:326_WY_SNTL e776d9b6-2180-4f50-90bf-77f7b920fc3b\ncollecting  e776d9b6-2180-4f50-90bf-77f7b920fc3b\nSNOTEL:327_CO_SNTL 69d48a07-3007-4b3f-bec6-c097509a56d9\ncollecting  69d48a07-3007-4b3f-bec6-c097509a56d9\nSNOTEL:328_MT_SNTL 10a46ea0-13da-4cef-9aa6-ff48aa46881c\ncollecting  10a46ea0-13da-4cef-9aa6-ff48aa46881c\nSNOTEL:329_UT_SNTL 9813294e-a28e-45c0-976d-a6fa65d87927\ncollecting  9813294e-a28e-45c0-976d-a6fa65d87927\nSNOTEL:330_UT_SNTL 7bc3c413-4709-4ddd-a2ad-99f6cad9436c\ncollecting  7bc3c413-4709-4ddd-a2ad-99f6cad9436c\nSNOTEL:331_OR_SNTL 631ed3c9-7863-4e7c-86fa-4bfb043f2851\ncollecting  631ed3c9-7863-4e7c-86fa-4bfb043f2851\nSNOTEL:332_UT_SNTL b59438b9-aadc-4899-9afb-fe71974c5c3a\ncollecting  b59438b9-aadc-4899-9afb-fe71974c5c3a\nSNOTEL:333_UT_SNTL b59438b9-aadc-4899-9afb-fe71974c5c3a\ncollecting  b59438b9-aadc-4899-9afb-fe71974c5c3a\nSNOTEL:334_NV_SNTL 38793f95-324b-4f01-b1a7-45e1c9353bc1\ncollecting  38793f95-324b-4f01-b1a7-45e1c9353bc1\nSNOTEL:335_CO_SNTL cad51334-b3af-4c23-85c3-451c3447560a\ncollecting  cad51334-b3af-4c23-85c3-451c3447560a\nSNOTEL:336_NV_SNTL 03428fd9-01cc-4a57-ab6e-f4e8f265c094\ncollecting  03428fd9-01cc-4a57-ab6e-f4e8f265c094\nSNOTEL:337_NV_SNTL f1f17cee-3fca-44bc-8974-b72d5f995a4a\ncollecting  f1f17cee-3fca-44bc-8974-b72d5f995a4a\nSNOTEL:338_ID_SNTL c66f40ed-f72e-4012-991c-1f3726e5c8ad\ncollecting  c66f40ed-f72e-4012-991c-1f3726e5c8ad\nSNOTEL:339_UT_SNTL 7b636fe2-1760-45c5-afce-505f2e927163\ncollecting  7b636fe2-1760-45c5-afce-505f2e927163\nSNOTEL:340_NV_SNTL d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nSNOTEL:341_OR_SNTL dd7f64aa-3556-409b-bc86-71dc28b6fd45\ncollecting  dd7f64aa-3556-409b-bc86-71dc28b6fd45\nSNOTEL:342_WY_SNTL 990e5974-9c60-4c9a-ba23-ddce13971178\ncollecting  990e5974-9c60-4c9a-ba23-ddce13971178\nSNOTEL:344_OR_SNTL 71f41513-6ac9-4d2e-97eb-6cd3b84f7043\ncollecting  71f41513-6ac9-4d2e-97eb-6cd3b84f7043\nSNOTEL:345_CO_SNTL d64197fc-0723-4c61-9ce8-ff2554e24154\ncollecting  d64197fc-0723-4c61-9ce8-ff2554e24154\nSNOTEL:346_MT_SNTL 89a7b0ef-1ec8-490f-9207-c93aa57a147f\ncollecting  89a7b0ef-1ec8-490f-9207-c93aa57a147f\nSNOTEL:347_MT_SNTL b1936012-0d31-4b92-8d60-c24903b2e569\ncollecting  b1936012-0d31-4b92-8d60-c24903b2e569\nSNOTEL:348_UT_SNTL 9813294e-a28e-45c0-976d-a6fa65d87927\ncollecting  9813294e-a28e-45c0-976d-a6fa65d87927\nSNOTEL:349_MT_SNTL 4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\ncollecting  4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\nSNOTEL:350_WY_SNTL 333458b2-c1a9-47a3-8ae0-92053ad28ae3\ncollecting  333458b2-c1a9-47a3-8ae0-92053ad28ae3\nSNOTEL:354_SD_SNTL ab89875f-3b86-4c6a-8d66-767017570dfc\ncollecting  ab89875f-3b86-4c6a-8d66-767017570dfc\nSNOTEL:355_MT_SNTL 6de38d5b-ccce-4ff2-90ed-1c7035491518\ncollecting  6de38d5b-ccce-4ff2-90ed-1c7035491518\nSNOTEL:356_CA_SNTL c89dc6ca-6d69-41ce-954d-b51f64aaacb1\ncollecting  c89dc6ca-6d69-41ce-954d-b51f64aaacb1\nSNOTEL:358_WY_SNTL 6bc3e088-5139-43f2-9b2a-ade1cedeae47\ncollecting  6bc3e088-5139-43f2-9b2a-ade1cedeae47\nSNOTEL:360_MT_SNTL 517aefce-a617-4251-acb9-c5faf0b7fdf3\ncollecting  517aefce-a617-4251-acb9-c5faf0b7fdf3\nSNOTEL:363_MT_SNTL f46e7d90-a754-44a8-b262-63f5c401a0ab\ncollecting  f46e7d90-a754-44a8-b262-63f5c401a0ab\nSNOTEL:364_UT_SNTL 7b636fe2-1760-45c5-afce-505f2e927163\ncollecting  7b636fe2-1760-45c5-afce-505f2e927163\nSNOTEL:365_MT_SNTL e467a17f-a729-4938-87a1-ac25157eed63\ncollecting  e467a17f-a729-4938-87a1-ac25157eed63\nSNOTEL:366_UT_SNTL eeb0a123-9482-4946-ab3f-9e63541cb655\ncollecting  eeb0a123-9482-4946-ab3f-9e63541cb655\nSNOTEL:368_UT_SNTL a28a3caf-eea2-414f-8003-62ac82daaafa\ncollecting  a28a3caf-eea2-414f-8003-62ac82daaafa\nSNOTEL:370_ID_SNTL c66f40ed-f72e-4012-991c-1f3726e5c8ad\ncollecting  c66f40ed-f72e-4012-991c-1f3726e5c8ad\nSNOTEL:373_NV_SNTL 42a21eb9-10fd-4986-825b-9ea55ce13935\ncollecting  42a21eb9-10fd-4986-825b-9ea55ce13935\nSNOTEL:375_WA_SNTL bb65d7a1-a5d5-4c89-9ef9-f0f1db06cc58\ncollecting  bb65d7a1-a5d5-4c89-9ef9-f0f1db06cc58\nSNOTEL:376_WA_SNTL c59f438c-f00a-476a-938e-efd828e0d083\ncollecting  c59f438c-f00a-476a-938e-efd828e0d083\nSNOTEL:377_WY_SNTL 6bc3e088-5139-43f2-9b2a-ade1cedeae47\ncollecting  6bc3e088-5139-43f2-9b2a-ade1cedeae47\nSNOTEL:379_WY_SNTL 692c41af-2210-4dd6-916d-c99e76807447\ncollecting  692c41af-2210-4dd6-916d-c99e76807447\nSNOTEL:380_CO_SNTL 6662f7d0-4afc-4fed-b930-e0408ee10bc7\ncollecting  6662f7d0-4afc-4fed-b930-e0408ee10bc7\nSNOTEL:381_MT_SNTL 4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\ncollecting  4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\nSNOTEL:385_MT_SNTL b1936012-0d31-4b92-8d60-c24903b2e569\ncollecting  b1936012-0d31-4b92-8d60-c24903b2e569\nSNOTEL:386_CO_SNTL fb32a838-cf3b-47a2-9e22-395a730f4f4f\ncollecting  fb32a838-cf3b-47a2-9e22-395a730f4f4f\nSNOTEL:387_CO_SNTL fb32a838-cf3b-47a2-9e22-395a730f4f4f\ncollecting  fb32a838-cf3b-47a2-9e22-395a730f4f4f\nSNOTEL:388_OR_SNTL ea185683-4427-44c3-84e1-706cf16781ce\ncollecting  ea185683-4427-44c3-84e1-706cf16781ce\nSNOTEL:389_WY_SNTL ab89875f-3b86-4c6a-8d66-767017570dfc\ncollecting  ab89875f-3b86-4c6a-8d66-767017570dfc\nSNOTEL:390_UT_SNTL 55d3e9a6-e153-43c3-a66c-cd60711ff4a9\ncollecting  55d3e9a6-e153-43c3-a66c-cd60711ff4a9\nSNOTEL:392_UT_SNTL 064d7f3e-8bbd-49cd-b360-5c4590a19b9e\ncollecting  064d7f3e-8bbd-49cd-b360-5c4590a19b9e\nSNOTEL:393_UT_SNTL 064d7f3e-8bbd-49cd-b360-5c4590a19b9e\ncollecting  064d7f3e-8bbd-49cd-b360-5c4590a19b9e\nSNOTEL:396_UT_SNTL 50d7ad3f-57f0-45e1-911d-b0efff9deb8f\ncollecting  50d7ad3f-57f0-45e1-911d-b0efff9deb8f\nSNOTEL:398_OR_SNTL 8edd6091-10fa-4617-8dc8-e0ce1d5b84f7\ncollecting  8edd6091-10fa-4617-8dc8-e0ce1d5b84f7\nSNOTEL:399_UT_SNTL 0a820e12-033b-45d6-9ef9-d70f4c5e5b63\ncollecting  0a820e12-033b-45d6-9ef9-d70f4c5e5b63\nSNOTEL:401_OR_SNTL 8edd6091-10fa-4617-8dc8-e0ce1d5b84f7\ncollecting  8edd6091-10fa-4617-8dc8-e0ce1d5b84f7\nSNOTEL:402_WY_SNTL 02c3ec4a-8de4-4284-9ec1-5a942d3d098e\ncollecting  02c3ec4a-8de4-4284-9ec1-5a942d3d098e\nSNOTEL:403_MT_SNTL 05938de0-622b-4e0a-a82b-2a128e5be0b0\ncollecting  05938de0-622b-4e0a-a82b-2a128e5be0b0\nSNOTEL:406_OR_SNTL 71f41513-6ac9-4d2e-97eb-6cd3b84f7043\ncollecting  71f41513-6ac9-4d2e-97eb-6cd3b84f7043\nSNOTEL:407_MT_SNTL e776d9b6-2180-4f50-90bf-77f7b920fc3b\ncollecting  e776d9b6-2180-4f50-90bf-77f7b920fc3b\nSNOTEL:409_CO_SNTL a4339b9a-871e-44c2-9bb4-bcbfe9d590d7\ncollecting  a4339b9a-871e-44c2-9bb4-bcbfe9d590d7\nSNOTEL:410_MT_SNTL 4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\ncollecting  4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\nSNOTEL:411_ID_SNTL 440d7558-67fd-43b4-826b-26d02663f871\ncollecting  440d7558-67fd-43b4-826b-26d02663f871\nSNOTEL:412_CO_SNTL f9f7132d-56a2-43e2-baba-312f34dbaeed\ncollecting  f9f7132d-56a2-43e2-baba-312f34dbaeed\nSNOTEL:413_MT_SNTL 99a2d4a9-63a0-43a7-976d-2a1ed822186d\ncollecting  99a2d4a9-63a0-43a7-976d-2a1ed822186d\nSNOTEL:414_MT_SNTL 99a2d4a9-63a0-43a7-976d-2a1ed822186d\ncollecting  99a2d4a9-63a0-43a7-976d-2a1ed822186d\nSNOTEL:415_CO_SNTL be57eab6-a495-427f-8a36-9d118c03e7d8\ncollecting  be57eab6-a495-427f-8a36-9d118c03e7d8\nSNOTEL:416_AZ_SNTL 1135e377-22e6-4290-b4cd-e6739de7fd8a\ncollecting  1135e377-22e6-4290-b4cd-e6739de7fd8a\nSNOTEL:417_NV_SNTL a5080351-033f-4cfa-ad27-019fc84e052c\ncollecting  a5080351-033f-4cfa-ad27-019fc84e052c\nSNOTEL:418_WA_SNTL 9474e816-b673-4e6d-83e0-28c274945bef\ncollecting  9474e816-b673-4e6d-83e0-28c274945bef\nSNOTEL:419_WY_SNTL df7e906a-07f3-4a46-b9a5-0200427c26f7\ncollecting  df7e906a-07f3-4a46-b9a5-0200427c26f7\nSNOTEL:420_WA_SNTL 360f1bcc-aa60-4052-a18a-b33da5745ff4\ncollecting  360f1bcc-aa60-4052-a18a-b33da5745ff4\nSNOTEL:422_OR_SNTL e27143af-fdc0-4f6f-8a28-f57b78da75dc\ncollecting  e27143af-fdc0-4f6f-8a28-f57b78da75dc\nSNOTEL:423_ID_SNTL 36b98590-a7e6-4e00-8c7d-f0f3d25bafec\ncollecting  36b98590-a7e6-4e00-8c7d-f0f3d25bafec\nSNOTEL:424_ID_SNTL 10a46ea0-13da-4cef-9aa6-ff48aa46881c\ncollecting  10a46ea0-13da-4cef-9aa6-ff48aa46881c\nSNOTEL:426_CO_SNTL 02cf33c2-c8e2-48b9-bf72-92506e97e251\ncollecting  02cf33c2-c8e2-48b9-bf72-92506e97e251\nSNOTEL:428_CA_SNTL 51ebe834-adf4-474e-871e-28ebca2bd0cc\ncollecting  51ebe834-adf4-474e-871e-28ebca2bd0cc\nSNOTEL:430_CO_SNTL 2ca6a37f-67f5-4905-864b-ddf98d956ebb\ncollecting  2ca6a37f-67f5-4905-864b-ddf98d956ebb\nSNOTEL:431_CO_SNTL 0623939d-b33f-41cb-ade2-3c4a776de49a\ncollecting  0623939d-b33f-41cb-ade2-3c4a776de49a\nSNOTEL:432_UT_SNTL cfe58efd-ce2a-495a-90cd-6826f704ebee\ncollecting  cfe58efd-ce2a-495a-90cd-6826f704ebee\nSNOTEL:433_MT_SNTL 4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\ncollecting  4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\nSNOTEL:434_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nSNOTEL:436_MT_SNTL cacaa17b-0b1b-4fe2-a4c1-7728e6c154c1\ncollecting  cacaa17b-0b1b-4fe2-a4c1-7728e6c154c1\nSNOTEL:437_MT_SNTL 517aefce-a617-4251-acb9-c5faf0b7fdf3\ncollecting  517aefce-a617-4251-acb9-c5faf0b7fdf3\nSNOTEL:438_CO_SNTL 9f0599d8-81f3-4ab5-b275-48a6ddaaae5b\ncollecting  9f0599d8-81f3-4ab5-b275-48a6ddaaae5b\nSNOTEL:439_ID_SNTL 36b98590-a7e6-4e00-8c7d-f0f3d25bafec\ncollecting  36b98590-a7e6-4e00-8c7d-f0f3d25bafec\nSNOTEL:444_UT_SNTL 9813294e-a28e-45c0-976d-a6fa65d87927\ncollecting  9813294e-a28e-45c0-976d-a6fa65d87927\nSNOTEL:448_MT_SNTL 05938de0-622b-4e0a-a82b-2a128e5be0b0\ncollecting  05938de0-622b-4e0a-a82b-2a128e5be0b0\nSNOTEL:449_WY_SNTL 8116acfb-8035-4d34-b9b9-b0af2c5697df\ncollecting  8116acfb-8035-4d34-b9b9-b0af2c5697df\nSNOTEL:450_ID_SNTL 695c7749-a3b8-4158-bd14-59d1f2c3e736\ncollecting  695c7749-a3b8-4158-bd14-59d1f2c3e736\nSNOTEL:451_WY_SNTL 02c3ec4a-8de4-4284-9ec1-5a942d3d098e\ncollecting  02c3ec4a-8de4-4284-9ec1-5a942d3d098e\nSNOTEL:452_UT_SNTL ad44deb7-e56d-47bd-8d64-7147493e0aee\ncollecting  ad44deb7-e56d-47bd-8d64-7147493e0aee\nSNOTEL:455_UT_SNTL b59438b9-aadc-4899-9afb-fe71974c5c3a\ncollecting  b59438b9-aadc-4899-9afb-fe71974c5c3a\nSNOTEL:457_CO_SNTL 02cf33c2-c8e2-48b9-bf72-92506e97e251\ncollecting  02cf33c2-c8e2-48b9-bf72-92506e97e251\nSNOTEL:458_MT_SNTL dca30f20-582e-40ef-be6d-aa7858be4baa\ncollecting  dca30f20-582e-40ef-be6d-aa7858be4baa\nSNOTEL:460_WY_SNTL 695bed09-0ad9-406e-b489-69408adeea06\ncollecting  695bed09-0ad9-406e-b489-69408adeea06\nSNOTEL:462_CA_SNTL 962f6718-ce02-4d13-b28c-e159d1adc2d4\ncollecting  962f6718-ce02-4d13-b28c-e159d1adc2d4\nSNOTEL:463_CA_SNTL f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nSNOTEL:464_OR_SNTL 631ed3c9-7863-4e7c-86fa-4bfb043f2851\ncollecting  631ed3c9-7863-4e7c-86fa-4bfb043f2851\nSNOTEL:465_CO_SNTL d10a90c7-3db0-43c6-b04b-fe8b4c3f206e\ncollecting  d10a90c7-3db0-43c6-b04b-fe8b4c3f206e\nSNOTEL:466_ID_SNTL b1077b69-4b02-458e-8a4b-e68695ac534f\ncollecting  b1077b69-4b02-458e-8a4b-e68695ac534f\nSNOTEL:467_CO_SNTL 86257c69-a8f1-43b1-9e07-73129e2c3fbc\ncollecting  86257c69-a8f1-43b1-9e07-73129e2c3fbc\nSNOTEL:470_OR_SNTL e27143af-fdc0-4f6f-8a28-f57b78da75dc\ncollecting  e27143af-fdc0-4f6f-8a28-f57b78da75dc\nSNOTEL:472_WY_SNTL e776d9b6-2180-4f50-90bf-77f7b920fc3b\ncollecting  e776d9b6-2180-4f50-90bf-77f7b920fc3b\nSNOTEL:474_UT_SNTL 10162c55-772d-49d2-8b1b-b1f9c86254b2\ncollecting  10162c55-772d-49d2-8b1b-b1f9c86254b2\nSNOTEL:475_UT_SNTL 9813294e-a28e-45c0-976d-a6fa65d87927\ncollecting  9813294e-a28e-45c0-976d-a6fa65d87927\nSNOTEL:476_NV_SNTL 875622b7-5253-43d2-8e0f-348767860eb9\ncollecting  875622b7-5253-43d2-8e0f-348767860eb9\nSNOTEL:477_OR_SNTL 65894307-d4eb-4b2e-a0fa-bd83a102dc30\ncollecting  65894307-d4eb-4b2e-a0fa-bd83a102dc30\nSNOTEL:478_WA_SNTL bfda850c-3027-4e91-afcb-cca5e73e4a03\ncollecting  bfda850c-3027-4e91-afcb-cca5e73e4a03\nSNOTEL:480_MT_SNTL f46e7d90-a754-44a8-b262-63f5c401a0ab\ncollecting  f46e7d90-a754-44a8-b262-63f5c401a0ab\nSNOTEL:481_UT_SNTL a28a3caf-eea2-414f-8003-62ac82daaafa\ncollecting  a28a3caf-eea2-414f-8003-62ac82daaafa\nSNOTEL:482_MT_SNTL d37ccc2e-7127-48ec-9425-2e77681c3635\ncollecting  d37ccc2e-7127-48ec-9425-2e77681c3635\nSNOTEL:483_OR_SNTL 71f41513-6ac9-4d2e-97eb-6cd3b84f7043\ncollecting  71f41513-6ac9-4d2e-97eb-6cd3b84f7043\nSNOTEL:484_ID_SNTL 6bf06917-011b-4029-8fbe-a8dfea3bc598\ncollecting  6bf06917-011b-4029-8fbe-a8dfea3bc598\nSNOTEL:485_CO_SNTL 75ced1b1-1fc2-42d3-a4f8-44aa1978c8ef\ncollecting  75ced1b1-1fc2-42d3-a4f8-44aa1978c8ef\nSNOTEL:486_NM_SNTL 1135e377-22e6-4290-b4cd-e6739de7fd8a\ncollecting  1135e377-22e6-4290-b4cd-e6739de7fd8a\nSNOTEL:487_MT_SNTL f3e36cea-5eb2-495a-87f4-947395f325b0\ncollecting  f3e36cea-5eb2-495a-87f4-947395f325b0\nSNOTEL:488_AZ_SNTL a2588440-600e-41da-b2b9-1f5632ecdef6\ncollecting  a2588440-600e-41da-b2b9-1f5632ecdef6\nSNOTEL:489_ID_SNTL f3332d55-ecc8-4644-9deb-180e42abb2eb\ncollecting  f3332d55-ecc8-4644-9deb-180e42abb2eb\nSNOTEL:490_ID_SNTL 695c7749-a3b8-4158-bd14-59d1f2c3e736\ncollecting  695c7749-a3b8-4158-bd14-59d1f2c3e736\nSNOTEL:491_NM_SNTL 9c43edf0-541f-4dbb-9fe1-42cc83d453bd\ncollecting  9c43edf0-541f-4dbb-9fe1-42cc83d453bd\nSNOTEL:493_ID_SNTL 6bf06917-011b-4029-8fbe-a8dfea3bc598\ncollecting  6bf06917-011b-4029-8fbe-a8dfea3bc598\nSNOTEL:494_OR_SNTL 631ed3c9-7863-4e7c-86fa-4bfb043f2851\ncollecting  631ed3c9-7863-4e7c-86fa-4bfb043f2851\nSNOTEL:495_UT_SNTL 9813294e-a28e-45c0-976d-a6fa65d87927\ncollecting  9813294e-a28e-45c0-976d-a6fa65d87927\nSNOTEL:497_WY_SNTL 695bed09-0ad9-406e-b489-69408adeea06\ncollecting  695bed09-0ad9-406e-b489-69408adeea06\nSNOTEL:498_NV_SNTL 42a21eb9-10fd-4986-825b-9ea55ce13935\ncollecting  42a21eb9-10fd-4986-825b-9ea55ce13935\nSNOTEL:499_WY_SNTL 491846d3-f81a-4777-b49f-0a0c74168395\ncollecting  491846d3-f81a-4777-b49f-0a0c74168395\nSNOTEL:500_MT_SNTL d37ccc2e-7127-48ec-9425-2e77681c3635\ncollecting  d37ccc2e-7127-48ec-9425-2e77681c3635\nSNOTEL:503_NV_SNTL a5080351-033f-4cfa-ad27-019fc84e052c\ncollecting  a5080351-033f-4cfa-ad27-019fc84e052c\nSNOTEL:505_CO_SNTL 552a5638-8fd2-46de-8569-5f5512102264\ncollecting  552a5638-8fd2-46de-8569-5f5512102264\nSNOTEL:507_WA_SNTL 6d0ff6eb-0411-4863-b4e7-90958db98115\ncollecting  6d0ff6eb-0411-4863-b4e7-90958db98115\nSNOTEL:508_CA_SNTL d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nSNOTEL:509_WY_SNTL df7e906a-07f3-4a46-b9a5-0200427c26f7\ncollecting  df7e906a-07f3-4a46-b9a5-0200427c26f7\nSNOTEL:510_MT_SNTL 0b9543d3-3cf9-4f28-b8eb-fd22c1956153\ncollecting  0b9543d3-3cf9-4f28-b8eb-fd22c1956153\nSNOTEL:512_WY_SNTL c5a82752-3e4b-43ec-8011-9111b9bfcb89\ncollecting  c5a82752-3e4b-43ec-8011-9111b9bfcb89\nSNOTEL:514_UT_SNTL 55d3e9a6-e153-43c3-a66c-cd60711ff4a9\ncollecting  55d3e9a6-e153-43c3-a66c-cd60711ff4a9\nSNOTEL:519_AZ_SNTL 0aeaffd7-9089-49e7-85ad-2314f32cbf7c\ncollecting  0aeaffd7-9089-49e7-85ad-2314f32cbf7c\nSNOTEL:520_ID_SNTL b1077b69-4b02-458e-8a4b-e68695ac534f\ncollecting  b1077b69-4b02-458e-8a4b-e68695ac534f\nSNOTEL:521_UT_SNTL c0568d62-49c7-4d9f-beba-ac0fb3e064c5\ncollecting  c0568d62-49c7-4d9f-beba-ac0fb3e064c5\nSNOTEL:522_UT_SNTL 50d7ad3f-57f0-45e1-911d-b0efff9deb8f\ncollecting  50d7ad3f-57f0-45e1-911d-b0efff9deb8f\nSNOTEL:523_OR_SNTL e27143af-fdc0-4f6f-8a28-f57b78da75dc\ncollecting  e27143af-fdc0-4f6f-8a28-f57b78da75dc\nSNOTEL:524_ID_SNTL 3330a979-98df-4a38-ac3f-0b45374f8e3d\ncollecting  3330a979-98df-4a38-ac3f-0b45374f8e3d\nSNOTEL:525_WY_SNTL 990e5974-9c60-4c9a-ba23-ddce13971178\ncollecting  990e5974-9c60-4c9a-ba23-ddce13971178\nSNOTEL:526_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nSNOTEL:528_UT_SNTL 50d7ad3f-57f0-45e1-911d-b0efff9deb8f\ncollecting  50d7ad3f-57f0-45e1-911d-b0efff9deb8f\nSNOTEL:529_OR_SNTL fe33672e-7ea7-4c5d-8639-96b2cc7edb0c\ncollecting  fe33672e-7ea7-4c5d-8639-96b2cc7edb0c\nSNOTEL:530_MT_SNTL 440d7558-67fd-43b4-826b-26d02663f871\ncollecting  440d7558-67fd-43b4-826b-26d02663f871\nSNOTEL:531_CO_SNTL 59ac7ee6-8fa8-4888-bb77-2be6781dddaf\ncollecting  59ac7ee6-8fa8-4888-bb77-2be6781dddaf\nSNOTEL:532_NM_SNTL 674e34ce-8b77-422b-ab14-c6c3a0183e39\ncollecting  674e34ce-8b77-422b-ab14-c6c3a0183e39\nSNOTEL:533_UT_SNTL dc237027-8dae-4da7-91ec-501701ecd943\ncollecting  dc237027-8dae-4da7-91ec-501701ecd943\nSNOTEL:535_ID_SNTL b5d7b6b8-4e5d-4b5e-8976-c72e99f57769\ncollecting  b5d7b6b8-4e5d-4b5e-8976-c72e99f57769\nSNOTEL:540_CA_SNTL 018cf1a1-f945-4097-9c47-0c4690538bb5\ncollecting  018cf1a1-f945-4097-9c47-0c4690538bb5\nSNOTEL:541_CA_SNTL 018cf1a1-f945-4097-9c47-0c4690538bb5\ncollecting  018cf1a1-f945-4097-9c47-0c4690538bb5\nSNOTEL:542_CO_SNTL a0c947fb-f00e-4331-ad3a-402908e08b57\ncollecting  a0c947fb-f00e-4331-ad3a-402908e08b57\nSNOTEL:543_UT_SNTL 19b5e6ce-c1a0-4cce-85f5-248c9f1abb6e\ncollecting  19b5e6ce-c1a0-4cce-85f5-248c9f1abb6e\nSNOTEL:548_NV_SNTL 875622b7-5253-43d2-8e0f-348767860eb9\ncollecting  875622b7-5253-43d2-8e0f-348767860eb9\nSNOTEL:549_NV_SNTL 875622b7-5253-43d2-8e0f-348767860eb9\ncollecting  875622b7-5253-43d2-8e0f-348767860eb9\nSNOTEL:550_ID_SNTL 36b98590-a7e6-4e00-8c7d-f0f3d25bafec\ncollecting  36b98590-a7e6-4e00-8c7d-f0f3d25bafec\nSNOTEL:552_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nSNOTEL:553_WA_SNTL cdfc27f0-b990-45f7-bac6-7c674cd157ac\ncollecting  cdfc27f0-b990-45f7-bac6-7c674cd157ac\nSNOTEL:554_WY_SNTL df7e906a-07f3-4a46-b9a5-0200427c26f7\ncollecting  df7e906a-07f3-4a46-b9a5-0200427c26f7\nSNOTEL:555_WY_SNTL 695bed09-0ad9-406e-b489-69408adeea06\ncollecting  695bed09-0ad9-406e-b489-69408adeea06\nSNOTEL:556_CO_SNTL e833aad1-6da3-4413-b25e-b2ab5b2029c0\ncollecting  e833aad1-6da3-4413-b25e-b2ab5b2029c0\nSNOTEL:558_OR_SNTL dd7f64aa-3556-409b-bc86-71dc28b6fd45\ncollecting  dd7f64aa-3556-409b-bc86-71dc28b6fd45\nSNOTEL:559_UT_SNTL 50d7ad3f-57f0-45e1-911d-b0efff9deb8f\ncollecting  50d7ad3f-57f0-45e1-911d-b0efff9deb8f\nSNOTEL:560_WY_SNTL 692c41af-2210-4dd6-916d-c99e76807447\ncollecting  692c41af-2210-4dd6-916d-c99e76807447\nSNOTEL:562_MT_SNTL 89a7b0ef-1ec8-490f-9207-c93aa57a147f\ncollecting  89a7b0ef-1ec8-490f-9207-c93aa57a147f\nSNOTEL:563_OR_SNTL 408b4482-ff63-4a1f-9cf9-ca820cd51b39\ncollecting  408b4482-ff63-4a1f-9cf9-ca820cd51b39\nSNOTEL:564_CO_SNTL f9f7132d-56a2-43e2-baba-312f34dbaeed\ncollecting  f9f7132d-56a2-43e2-baba-312f34dbaeed\nSNOTEL:565_CO_SNTL 8c45801f-6377-42e1-ae0a-9b53593ff843\ncollecting  8c45801f-6377-42e1-ae0a-9b53593ff843\nSNOTEL:566_UT_SNTL c7f13d88-b4af-4484-9547-52197f778c08\ncollecting  c7f13d88-b4af-4484-9547-52197f778c08\nSNOTEL:568_MT_SNTL 10a46ea0-13da-4cef-9aa6-ff48aa46881c\ncollecting  10a46ea0-13da-4cef-9aa6-ff48aa46881c\nSNOTEL:569_NV_SNTL 42a21eb9-10fd-4986-825b-9ea55ce13935\ncollecting  42a21eb9-10fd-4986-825b-9ea55ce13935\nSNOTEL:570_NV_SNTL a5080351-033f-4cfa-ad27-019fc84e052c\ncollecting  a5080351-033f-4cfa-ad27-019fc84e052c\nSNOTEL:571_WY_SNTL ab89875f-3b86-4c6a-8d66-767017570dfc\ncollecting  ab89875f-3b86-4c6a-8d66-767017570dfc\nSNOTEL:572_UT_SNTL 20b97bae-60d6-466d-aca9-334d9b2d63b6\ncollecting  20b97bae-60d6-466d-aca9-334d9b2d63b6\nSNOTEL:575_CA_SNTL 01be2cc7-ef77-4e4d-80ed-c4f8139162c3\ncollecting  01be2cc7-ef77-4e4d-80ed-c4f8139162c3\nSNOTEL:576_MT_SNTL 3330a979-98df-4a38-ac3f-0b45374f8e3d\ncollecting  3330a979-98df-4a38-ac3f-0b45374f8e3d\nSNOTEL:577_WY_SNTL 491846d3-f81a-4777-b49f-0a0c74168395\ncollecting  491846d3-f81a-4777-b49f-0a0c74168395\nSNOTEL:579_UT_SNTL 064d7f3e-8bbd-49cd-b360-5c4590a19b9e\ncollecting  064d7f3e-8bbd-49cd-b360-5c4590a19b9e\nSNOTEL:580_CO_SNTL 4ddee9a9-feaf-4daa-9100-0d4188f7b827\ncollecting  4ddee9a9-feaf-4daa-9100-0d4188f7b827\nSNOTEL:582_UT_SNTL b59438b9-aadc-4899-9afb-fe71974c5c3a\ncollecting  b59438b9-aadc-4899-9afb-fe71974c5c3a\nSNOTEL:583_UT_SNTL 24cd85fa-6aee-4556-bb8a-b6696eb72a19\ncollecting  24cd85fa-6aee-4556-bb8a-b6696eb72a19\nSNOTEL:585_WY_SNTL 0adbba56-85f8-49e0-9b11-000622238d91\ncollecting  0adbba56-85f8-49e0-9b11-000622238d91\nSNOTEL:587_CA_SNTL 74f8c8bc-2f60-4232-b447-43459d5d22f0\ncollecting  74f8c8bc-2f60-4232-b447-43459d5d22f0\nSNOTEL:588_ID_SNTL cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\ncollecting  cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\nSNOTEL:589_CO_SNTL 57e18a9f-8327-4d6c-b2b4-c2b337341e86\ncollecting  57e18a9f-8327-4d6c-b2b4-c2b337341e86\nSNOTEL:590_MT_SNTL e467a17f-a729-4938-87a1-ac25157eed63\ncollecting  e467a17f-a729-4938-87a1-ac25157eed63\nSNOTEL:591_WA_SNTL cdfc27f0-b990-45f7-bac6-7c674cd157ac\ncollecting  cdfc27f0-b990-45f7-bac6-7c674cd157ac\nSNOTEL:592_UT_SNTL 24cd85fa-6aee-4556-bb8a-b6696eb72a19\ncollecting  24cd85fa-6aee-4556-bb8a-b6696eb72a19\nSNOTEL:593_UT_SNTL 55d3e9a6-e153-43c3-a66c-cd60711ff4a9\ncollecting  55d3e9a6-e153-43c3-a66c-cd60711ff4a9\nSNOTEL:596_UT_SNTL 10162c55-772d-49d2-8b1b-b1f9c86254b2\ncollecting  10162c55-772d-49d2-8b1b-b1f9c86254b2\nSNOTEL:597_WY_SNTL 695bed09-0ad9-406e-b489-69408adeea06\ncollecting  695bed09-0ad9-406e-b489-69408adeea06\nSNOTEL:600_ID_SNTL b5d7b6b8-4e5d-4b5e-8976-c72e99f57769\ncollecting  b5d7b6b8-4e5d-4b5e-8976-c72e99f57769\nSNOTEL:603_MT_SNTL 678f1920-0bc3-4687-af71-35d61030b1a0\ncollecting  678f1920-0bc3-4687-af71-35d61030b1a0\nSNOTEL:604_MT_SNTL 4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\ncollecting  4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\nSNOTEL:605_OR_SNTL e27143af-fdc0-4f6f-8a28-f57b78da75dc\ncollecting  e27143af-fdc0-4f6f-8a28-f57b78da75dc\nSNOTEL:606_WA_SNTL 47e625fa-e2df-43ce-84dd-8ac21fdda75a\ncollecting  47e625fa-e2df-43ce-84dd-8ac21fdda75a\nSNOTEL:607_CO_SNTL 02cf33c2-c8e2-48b9-bf72-92506e97e251\ncollecting  02cf33c2-c8e2-48b9-bf72-92506e97e251\nSNOTEL:610_ID_SNTL d17b55c5-7848-4b79-a735-983aec995c52\ncollecting  d17b55c5-7848-4b79-a735-983aec995c52\nSNOTEL:612_UT_SNTL 0a820e12-033b-45d6-9ef9-d70f4c5e5b63\ncollecting  0a820e12-033b-45d6-9ef9-d70f4c5e5b63\nSNOTEL:613_MT_SNTL d37ccc2e-7127-48ec-9425-2e77681c3635\ncollecting  d37ccc2e-7127-48ec-9425-2e77681c3635\nSNOTEL:614_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nSNOTEL:615_NV_SNTL d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nSNOTEL:616_WY_SNTL 692c41af-2210-4dd6-916d-c99e76807447\ncollecting  692c41af-2210-4dd6-916d-c99e76807447\nSNOTEL:617_AZ_SNTL f6a782f0-4b17-4989-815c-2398b77b09dd\ncollecting  f6a782f0-4b17-4989-815c-2398b77b09dd\nSNOTEL:619_OR_SNTL fe33672e-7ea7-4c5d-8639-96b2cc7edb0c\ncollecting  fe33672e-7ea7-4c5d-8639-96b2cc7edb0c\nSNOTEL:620_ID_SNTL 3330a979-98df-4a38-ac3f-0b45374f8e3d\ncollecting  3330a979-98df-4a38-ac3f-0b45374f8e3d\nSNOTEL:621_UT_SNTL 7b636fe2-1760-45c5-afce-505f2e927163\ncollecting  7b636fe2-1760-45c5-afce-505f2e927163\nSNOTEL:622_CO_SNTL 87d6c782-c43b-473f-84da-d2a519d8f1fc\ncollecting  87d6c782-c43b-473f-84da-d2a519d8f1fc\nSNOTEL:623_ID_SNTL b5d7b6b8-4e5d-4b5e-8976-c72e99f57769\ncollecting  b5d7b6b8-4e5d-4b5e-8976-c72e99f57769\nSNOTEL:625_WY_SNTL 253c2443-b820-4c13-bf6d-ba7a5426f52d\ncollecting  253c2443-b820-4c13-bf6d-ba7a5426f52d\nSNOTEL:626_UT_SNTL 55d3e9a6-e153-43c3-a66c-cd60711ff4a9\ncollecting  55d3e9a6-e153-43c3-a66c-cd60711ff4a9\nSNOTEL:627_ID_SNTL 830bc2b9-592d-4334-842a-213ba4c0a347\ncollecting  830bc2b9-592d-4334-842a-213ba4c0a347\nSNOTEL:628_UT_SNTL eeb0a123-9482-4946-ab3f-9e63541cb655\ncollecting  eeb0a123-9482-4946-ab3f-9e63541cb655\nSNOTEL:629_CO_SNTL 5c4dff48-4afa-4922-949e-f64db583f392\ncollecting  5c4dff48-4afa-4922-949e-f64db583f392\nSNOTEL:633_CA_SNTL 74f8c8bc-2f60-4232-b447-43459d5d22f0\ncollecting  74f8c8bc-2f60-4232-b447-43459d5d22f0\nSNOTEL:637_ID_SNTL 36b98590-a7e6-4e00-8c7d-f0f3d25bafec\ncollecting  36b98590-a7e6-4e00-8c7d-f0f3d25bafec\nSNOTEL:640_AZ_SNTL c0e85162-6ff4-401b-b01e-cc6d7a51eac0\ncollecting  c0e85162-6ff4-401b-b01e-cc6d7a51eac0\nSNOTEL:642_WA_SNTL 9474e816-b673-4e6d-83e0-28c274945bef\ncollecting  9474e816-b673-4e6d-83e0-28c274945bef\nSNOTEL:643_UT_SNTL 50d7ad3f-57f0-45e1-911d-b0efff9deb8f\ncollecting  50d7ad3f-57f0-45e1-911d-b0efff9deb8f\nSNOTEL:644_WA_SNTL dc31c331-837b-4b59-b184-051321e9489c\ncollecting  dc31c331-837b-4b59-b184-051321e9489c\nSNOTEL:645_ID_SNTL 0d0b742e-c324-4140-8f62-746210d79080\ncollecting  0d0b742e-c324-4140-8f62-746210d79080\nSNOTEL:646_MT_SNTL 89a7b0ef-1ec8-490f-9207-c93aa57a147f\ncollecting  89a7b0ef-1ec8-490f-9207-c93aa57a147f\nSNOTEL:647_OR_SNTL c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\ncollecting  c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\nSNOTEL:648_WA_SNTL 6c94136d-5040-4c09-b1fd-c02dbff210e6\ncollecting  6c94136d-5040-4c09-b1fd-c02dbff210e6\nSNOTEL:649_MT_SNTL dca30f20-582e-40ef-be6d-aa7858be4baa\ncollecting  dca30f20-582e-40ef-be6d-aa7858be4baa\nSNOTEL:650_ID_SNTL cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\ncollecting  cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\nSNOTEL:651_OR_SNTL e13f9c1b-dca0-4c63-a64c-76f6bc725156\ncollecting  e13f9c1b-dca0-4c63-a64c-76f6bc725156\nSNOTEL:652_NV_SNTL d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nSNOTEL:654_ID_SNTL 0cda0c4a-405b-4e16-8922-964190929d80\ncollecting  0cda0c4a-405b-4e16-8922-964190929d80\nSNOTEL:655_OR_SNTL e13f9c1b-dca0-4c63-a64c-76f6bc725156\ncollecting  e13f9c1b-dca0-4c63-a64c-76f6bc725156\nSNOTEL:657_MT_SNTL 99a2d4a9-63a0-43a7-976d-2a1ed822186d\ncollecting  99a2d4a9-63a0-43a7-976d-2a1ed822186d\nSNOTEL:658_CO_SNTL e833aad1-6da3-4413-b25e-b2ab5b2029c0\ncollecting  e833aad1-6da3-4413-b25e-b2ab5b2029c0\nSNOTEL:661_WY_SNTL 679fe096-5475-4d4d-b0f8-81e32de889aa\ncollecting  679fe096-5475-4d4d-b0f8-81e32de889aa\nSNOTEL:662_MT_SNTL cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\ncollecting  cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\nSNOTEL:663_CO_SNTL f9f7132d-56a2-43e2-baba-312f34dbaeed\ncollecting  f9f7132d-56a2-43e2-baba-312f34dbaeed\nSNOTEL:664_MT_SNTL d37ccc2e-7127-48ec-9425-2e77681c3635\ncollecting  d37ccc2e-7127-48ec-9425-2e77681c3635\nSNOTEL:665_NM_SNTL 2ca6a37f-67f5-4905-864b-ddf98d956ebb\ncollecting  2ca6a37f-67f5-4905-864b-ddf98d956ebb\nSNOTEL:666_OR_SNTL e13f9c1b-dca0-4c63-a64c-76f6bc725156\ncollecting  e13f9c1b-dca0-4c63-a64c-76f6bc725156\nSNOTEL:667_MT_SNTL 89a7b0ef-1ec8-490f-9207-c93aa57a147f\ncollecting  89a7b0ef-1ec8-490f-9207-c93aa57a147f\nSNOTEL:669_CO_SNTL 3527e00e-1aee-46ce-ad9d-8122cff4c202\ncollecting  3527e00e-1aee-46ce-ad9d-8122cff4c202\nSNOTEL:670_MT_SNTL f46e7d90-a754-44a8-b262-63f5c401a0ab\ncollecting  f46e7d90-a754-44a8-b262-63f5c401a0ab\nSNOTEL:671_OR_SNTL c64f2bf3-90f0-4a96-b3a8-9f8db46dce92\ncollecting  c64f2bf3-90f0-4a96-b3a8-9f8db46dce92\nSNOTEL:672_WA_SNTL 360f1bcc-aa60-4052-a18a-b33da5745ff4\ncollecting  360f1bcc-aa60-4052-a18a-b33da5745ff4\nSNOTEL:673_WY_SNTL 8116acfb-8035-4d34-b9b9-b0af2c5697df\ncollecting  8116acfb-8035-4d34-b9b9-b0af2c5697df\nSNOTEL:676_WY_SNTL 692c41af-2210-4dd6-916d-c99e76807447\ncollecting  692c41af-2210-4dd6-916d-c99e76807447\nSNOTEL:677_ID_SNTL 6bf06917-011b-4029-8fbe-a8dfea3bc598\ncollecting  6bf06917-011b-4029-8fbe-a8dfea3bc598\nSNOTEL:680_CO_SNTL 94d9d95f-32b2-470d-95f8-dbd843d6def3\ncollecting  94d9d95f-32b2-470d-95f8-dbd843d6def3\nSNOTEL:681_WA_SNTL 47e625fa-e2df-43ce-84dd-8ac21fdda75a\ncollecting  47e625fa-e2df-43ce-84dd-8ac21fdda75a\nSNOTEL:682_CO_SNTL 35aecf7e-5f0b-4533-995c-3cb4165d44b5\ncollecting  35aecf7e-5f0b-4533-995c-3cb4165d44b5\nSNOTEL:683_WY_SNTL e776d9b6-2180-4f50-90bf-77f7b920fc3b\ncollecting  e776d9b6-2180-4f50-90bf-77f7b920fc3b\nSNOTEL:684_UT_SNTL eeb0a123-9482-4946-ab3f-9e63541cb655\ncollecting  eeb0a123-9482-4946-ab3f-9e63541cb655\nSNOTEL:686_UT_SNTL 0a820e12-033b-45d6-9ef9-d70f4c5e5b63\ncollecting  0a820e12-033b-45d6-9ef9-d70f4c5e5b63\nSNOTEL:689_WY_SNTL ce76ce00-c8b5-4597-8ca3-1ec9db795b50\ncollecting  ce76ce00-c8b5-4597-8ca3-1ec9db795b50\nSNOTEL:690_MT_SNTL 517aefce-a617-4251-acb9-c5faf0b7fdf3\ncollecting  517aefce-a617-4251-acb9-c5faf0b7fdf3\nSNOTEL:691_UT_SNTL 9813294e-a28e-45c0-976d-a6fa65d87927\ncollecting  9813294e-a28e-45c0-976d-a6fa65d87927\nSNOTEL:693_MT_SNTL dca30f20-582e-40ef-be6d-aa7858be4baa\ncollecting  dca30f20-582e-40ef-be6d-aa7858be4baa\nSNOTEL:694_UT_SNTL 7b636fe2-1760-45c5-afce-505f2e927163\ncollecting  7b636fe2-1760-45c5-afce-505f2e927163\nSNOTEL:696_MT_SNTL f46e7d90-a754-44a8-b262-63f5c401a0ab\ncollecting  f46e7d90-a754-44a8-b262-63f5c401a0ab\nSNOTEL:698_NV_SNTL 5308a803-69e6-43cd-89db-66e93f9f83af\ncollecting  5308a803-69e6-43cd-89db-66e93f9f83af\nSNOTEL:699_WA_SNTL 47e625fa-e2df-43ce-84dd-8ac21fdda75a\ncollecting  47e625fa-e2df-43ce-84dd-8ac21fdda75a\nSNOTEL:700_MT_SNTL 630bae26-a6cc-4a36-bbe5-40dc15b38dea\ncollecting  630bae26-a6cc-4a36-bbe5-40dc15b38dea\nSNOTEL:702_WA_SNTL bb65d7a1-a5d5-4c89-9ef9-f0f1db06cc58\ncollecting  bb65d7a1-a5d5-4c89-9ef9-f0f1db06cc58\nSNOTEL:704_ID_SNTL 0bd47ec1-0e3c-43bf-a491-534d06beb19f\ncollecting  0bd47ec1-0e3c-43bf-a491-534d06beb19f\nSNOTEL:706_OR_SNTL 0a0ea690-5b73-4459-91d5-a6948d132a48\ncollecting  0a0ea690-5b73-4459-91d5-a6948d132a48\nSNOTEL:708_NM_SNTL 6afdc499-9686-4451-b207-13df777df662\ncollecting  6afdc499-9686-4451-b207-13df777df662\nSNOTEL:709_CO_SNTL 02cf33c2-c8e2-48b9-bf72-92506e97e251\ncollecting  02cf33c2-c8e2-48b9-bf72-92506e97e251\nSNOTEL:710_OR_SNTL ea185683-4427-44c3-84e1-706cf16781ce\ncollecting  ea185683-4427-44c3-84e1-706cf16781ce\nSNOTEL:712_OR_SNTL b98777af-0c7c-44f7-9c03-85d6d412856c\ncollecting  b98777af-0c7c-44f7-9c03-85d6d412856c\nSNOTEL:713_CO_SNTL 7610b45e-5652-4604-ab5b-99344f71616b\ncollecting  7610b45e-5652-4604-ab5b-99344f71616b\nSNOTEL:714_UT_SNTL ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\ncollecting  ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\nSNOTEL:715_NM_SNTL e3473791-6153-49bc-a2ed-0b1e3e243942\ncollecting  e3473791-6153-49bc-a2ed-0b1e3e243942\nSNOTEL:717_CO_SNTL d64197fc-0723-4c61-9ce8-ff2554e24154\ncollecting  d64197fc-0723-4c61-9ce8-ff2554e24154\nSNOTEL:718_CO_SNTL 9f0599d8-81f3-4ab5-b275-48a6ddaaae5b\ncollecting  9f0599d8-81f3-4ab5-b275-48a6ddaaae5b\nSNOTEL:720_UT_SNTL a28a3caf-eea2-414f-8003-62ac82daaafa\ncollecting  a28a3caf-eea2-414f-8003-62ac82daaafa\nSNOTEL:723_UT_SNTL 93b8483d-a510-42ff-865e-33d5a8784dc4\ncollecting  93b8483d-a510-42ff-865e-33d5a8784dc4\nSNOTEL:724_CA_SNTL f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nSNOTEL:726_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nSNOTEL:727_MT_SNTL cacaa17b-0b1b-4fe2-a4c1-7728e6c154c1\ncollecting  cacaa17b-0b1b-4fe2-a4c1-7728e6c154c1\nSNOTEL:728_WA_SNTL dc31c331-837b-4b59-b184-051321e9489c\ncollecting  dc31c331-837b-4b59-b184-051321e9489c\nSNOTEL:729_OR_SNTL ea185683-4427-44c3-84e1-706cf16781ce\ncollecting  ea185683-4427-44c3-84e1-706cf16781ce\nSNOTEL:730_WY_SNTL df7e906a-07f3-4a46-b9a5-0200427c26f7\ncollecting  df7e906a-07f3-4a46-b9a5-0200427c26f7\nSNOTEL:731_WY_SNTL 3b5bfd37-070c-4ee9-a470-c9338851e270\ncollecting  3b5bfd37-070c-4ee9-a470-c9338851e270\nSNOTEL:732_WY_SNTL 8116acfb-8035-4d34-b9b9-b0af2c5697df\ncollecting  8116acfb-8035-4d34-b9b9-b0af2c5697df\nSNOTEL:733_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nSNOTEL:734_WA_SNTL bfda850c-3027-4e91-afcb-cca5e73e4a03\ncollecting  bfda850c-3027-4e91-afcb-cca5e73e4a03\nSNOTEL:735_ID_SNTL cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\ncollecting  cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\nSNOTEL:736_OR_SNTL c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\ncollecting  c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\nSNOTEL:738_ID_SNTL 0d0b742e-c324-4140-8f62-746210d79080\ncollecting  0d0b742e-c324-4140-8f62-746210d79080\nSNOTEL:739_CO_SNTL 35eee1cd-f92a-4ba5-af03-fb5347490f41\ncollecting  35eee1cd-f92a-4ba5-af03-fb5347490f41\nSNOTEL:741_ID_SNTL 6bf06917-011b-4029-8fbe-a8dfea3bc598\ncollecting  6bf06917-011b-4029-8fbe-a8dfea3bc598\nSNOTEL:742_UT_SNTL ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\ncollecting  ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\nSNOTEL:743_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nSNOTEL:744_NM_SNTL 6afdc499-9686-4451-b207-13df777df662\ncollecting  6afdc499-9686-4451-b207-13df777df662\nSNOTEL:745_OR_SNTL 5e252b65-58dd-421f-a0db-3d4669bfb235\ncollecting  5e252b65-58dd-421f-a0db-3d4669bfb235\nSNOTEL:746_NV_SNTL 5308a803-69e6-43cd-89db-66e93f9f83af\ncollecting  5308a803-69e6-43cd-89db-66e93f9f83af\nSNOTEL:747_ID_SNTL b1077b69-4b02-458e-8a4b-e68695ac534f\ncollecting  b1077b69-4b02-458e-8a4b-e68695ac534f\nSNOTEL:748_WA_SNTL cdfc27f0-b990-45f7-bac6-7c674cd157ac\ncollecting  cdfc27f0-b990-45f7-bac6-7c674cd157ac\nSNOTEL:749_ID_SNTL ce76ce00-c8b5-4597-8ca3-1ec9db795b50\ncollecting  ce76ce00-c8b5-4597-8ca3-1ec9db795b50\nSNOTEL:751_WY_SNTL 02c3ec4a-8de4-4284-9ec1-5a942d3d098e\ncollecting  02c3ec4a-8de4-4284-9ec1-5a942d3d098e\nSNOTEL:752_ID_SNTL b1077b69-4b02-458e-8a4b-e68695ac534f\ncollecting  b1077b69-4b02-458e-8a4b-e68695ac534f\nSNOTEL:754_MT_SNTL e467a17f-a729-4938-87a1-ac25157eed63\ncollecting  e467a17f-a729-4938-87a1-ac25157eed63\nSNOTEL:755_NM_SNTL 43be1328-02b0-4cc1-8e9b-75842908cee3\ncollecting  43be1328-02b0-4cc1-8e9b-75842908cee3\nSNOTEL:756_OR_SNTL 0a0ea690-5b73-4459-91d5-a6948d132a48\ncollecting  0a0ea690-5b73-4459-91d5-a6948d132a48\nSNOTEL:757_NM_SNTL 1135e377-22e6-4290-b4cd-e6739de7fd8a\ncollecting  1135e377-22e6-4290-b4cd-e6739de7fd8a\nSNOTEL:761_ID_SNTL 6bf06917-011b-4029-8fbe-a8dfea3bc598\ncollecting  6bf06917-011b-4029-8fbe-a8dfea3bc598\nSNOTEL:762_CO_SNTL 85f0acd8-4008-472d-bf40-e35e0e2934e4\ncollecting  85f0acd8-4008-472d-bf40-e35e0e2934e4\nSNOTEL:763_UT_SNTL 7bc3c413-4709-4ddd-a2ad-99f6cad9436c\ncollecting  7bc3c413-4709-4ddd-a2ad-99f6cad9436c\nSNOTEL:764_WY_SNTL 491846d3-f81a-4777-b49f-0a0c74168395\ncollecting  491846d3-f81a-4777-b49f-0a0c74168395\nSNOTEL:765_WY_SNTL df7e906a-07f3-4a46-b9a5-0200427c26f7\ncollecting  df7e906a-07f3-4a46-b9a5-0200427c26f7\nSNOTEL:767_OR_SNTL a6a9febf-ea16-4223-83d4-8e459e2af85a\ncollecting  a6a9febf-ea16-4223-83d4-8e459e2af85a\nSNOTEL:770_ID_SNTL 6bf06917-011b-4029-8fbe-a8dfea3bc598\ncollecting  6bf06917-011b-4029-8fbe-a8dfea3bc598\nSNOTEL:771_CA_SNTL 01be2cc7-ef77-4e4d-80ed-c4f8139162c3\ncollecting  01be2cc7-ef77-4e4d-80ed-c4f8139162c3\nSNOTEL:773_CO_SNTL efada0af-09bf-4013-a1c6-0837f8ff59c5\ncollecting  efada0af-09bf-4013-a1c6-0837f8ff59c5\nSNOTEL:777_WA_SNTL cdfc27f0-b990-45f7-bac6-7c674cd157ac\ncollecting  cdfc27f0-b990-45f7-bac6-7c674cd157ac\nSNOTEL:778_CA_SNTL 962f6718-ce02-4d13-b28c-e159d1adc2d4\ncollecting  962f6718-ce02-4d13-b28c-e159d1adc2d4\nSNOTEL:779_WY_SNTL df7e906a-07f3-4a46-b9a5-0200427c26f7\ncollecting  df7e906a-07f3-4a46-b9a5-0200427c26f7\nSNOTEL:780_CO_SNTL ce9da6bf-cf6e-4edb-b579-5a0853b2ed17\ncollecting  ce9da6bf-cf6e-4edb-b579-5a0853b2ed17\nSNOTEL:781_MT_SNTL 517aefce-a617-4251-acb9-c5faf0b7fdf3\ncollecting  517aefce-a617-4251-acb9-c5faf0b7fdf3\nSNOTEL:782_ID_SNTL da6ce150-5daf-4a91-9fdd-a85854462b08\ncollecting  da6ce150-5daf-4a91-9fdd-a85854462b08\nSNOTEL:784_CA_SNTL f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nSNOTEL:786_WY_SNTL de9c541b-ce5e-4cc6-9ddd-03f85dc5b3d5\ncollecting  de9c541b-ce5e-4cc6-9ddd-03f85dc5b3d5\nSNOTEL:787_MT_SNTL d37ccc2e-7127-48ec-9425-2e77681c3635\ncollecting  d37ccc2e-7127-48ec-9425-2e77681c3635\nSNOTEL:790_UT_SNTL c0568d62-49c7-4d9f-beba-ac0fb3e064c5\ncollecting  c0568d62-49c7-4d9f-beba-ac0fb3e064c5\nSNOTEL:791_WA_SNTL bfda850c-3027-4e91-afcb-cca5e73e4a03\ncollecting  bfda850c-3027-4e91-afcb-cca5e73e4a03\nSNOTEL:792_ID_SNTL f3332d55-ecc8-4644-9deb-180e42abb2eb\ncollecting  f3332d55-ecc8-4644-9deb-180e42abb2eb\nSNOTEL:793_CO_SNTL 8c45801f-6377-42e1-ae0a-9b53593ff843\ncollecting  8c45801f-6377-42e1-ae0a-9b53593ff843\nSNOTEL:794_OR_SNTL 0a0ea690-5b73-4459-91d5-a6948d132a48\ncollecting  0a0ea690-5b73-4459-91d5-a6948d132a48\nSNOTEL:795_UT_SNTL cfe58efd-ce2a-495a-90cd-6826f704ebee\ncollecting  cfe58efd-ce2a-495a-90cd-6826f704ebee\nSNOTEL:797_CO_SNTL 003fdfbd-c766-4312-b029-bd4cfba6ebef\ncollecting  003fdfbd-c766-4312-b029-bd4cfba6ebef\nSNOTEL:798_WY_SNTL 02c3ec4a-8de4-4284-9ec1-5a942d3d098e\ncollecting  02c3ec4a-8de4-4284-9ec1-5a942d3d098e\nSNOTEL:801_OR_SNTL ea185683-4427-44c3-84e1-706cf16781ce\ncollecting  ea185683-4427-44c3-84e1-706cf16781ce\nSNOTEL:803_ID_SNTL b5d7b6b8-4e5d-4b5e-8976-c72e99f57769\ncollecting  b5d7b6b8-4e5d-4b5e-8976-c72e99f57769\nSNOTEL:804_WA_SNTL cdfc27f0-b990-45f7-bac6-7c674cd157ac\ncollecting  cdfc27f0-b990-45f7-bac6-7c674cd157ac\nSNOTEL:805_ID_SNTL af0463d4-f20f-4d13-bd0f-5834e2e8717b\ncollecting  af0463d4-f20f-4d13-bd0f-5834e2e8717b\nSNOTEL:806_WY_SNTL 333458b2-c1a9-47a3-8ae0-92053ad28ae3\ncollecting  333458b2-c1a9-47a3-8ae0-92053ad28ae3\nSNOTEL:809_CA_SNTL f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nSNOTEL:810_OR_SNTL 5e252b65-58dd-421f-a0db-3d4669bfb235\ncollecting  5e252b65-58dd-421f-a0db-3d4669bfb235\nSNOTEL:811_NV_SNTL 875622b7-5253-43d2-8e0f-348767860eb9\ncollecting  875622b7-5253-43d2-8e0f-348767860eb9\nSNOTEL:812_OR_SNTL c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\ncollecting  c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\nSNOTEL:814_UT_SNTL eeb0a123-9482-4946-ab3f-9e63541cb655\ncollecting  eeb0a123-9482-4946-ab3f-9e63541cb655\nSNOTEL:815_OR_SNTL fe33672e-7ea7-4c5d-8639-96b2cc7edb0c\ncollecting  fe33672e-7ea7-4c5d-8639-96b2cc7edb0c\nSNOTEL:816_WY_SNTL 40c4f8cd-b0ca-4d37-b91e-b69e5dff7f9a\ncollecting  40c4f8cd-b0ca-4d37-b91e-b69e5dff7f9a\nSNOTEL:817_WA_SNTL 47e625fa-e2df-43ce-84dd-8ac21fdda75a\ncollecting  47e625fa-e2df-43ce-84dd-8ac21fdda75a\nSNOTEL:818_WY_SNTL 02c3ec4a-8de4-4284-9ec1-5a942d3d098e\ncollecting  02c3ec4a-8de4-4284-9ec1-5a942d3d098e\nSNOTEL:819_WY_SNTL 692c41af-2210-4dd6-916d-c99e76807447\ncollecting  692c41af-2210-4dd6-916d-c99e76807447\nSNOTEL:820_UT_SNTL eeb0a123-9482-4946-ab3f-9e63541cb655\ncollecting  eeb0a123-9482-4946-ab3f-9e63541cb655\nSNOTEL:822_WY_SNTL 695bed09-0ad9-406e-b489-69408adeea06\ncollecting  695bed09-0ad9-406e-b489-69408adeea06\nSNOTEL:823_UT_SNTL 2222b7b3-f48b-4cea-90bf-8e7245d002ea\ncollecting  2222b7b3-f48b-4cea-90bf-8e7245d002ea\nSNOTEL:824_WA_SNTL f78ea076-10a1-45dc-a848-c08e129c6a28\ncollecting  f78ea076-10a1-45dc-a848-c08e129c6a28\nSNOTEL:825_CO_SNTL 02cf33c2-c8e2-48b9-bf72-92506e97e251\ncollecting  02cf33c2-c8e2-48b9-bf72-92506e97e251\nSNOTEL:826_WY_SNTL 990e5974-9c60-4c9a-ba23-ddce13971178\ncollecting  990e5974-9c60-4c9a-ba23-ddce13971178\nSNOTEL:827_CO_SNTL d64197fc-0723-4c61-9ce8-ff2554e24154\ncollecting  d64197fc-0723-4c61-9ce8-ff2554e24154\nSNOTEL:830_ID_SNTL 36b98590-a7e6-4e00-8c7d-f0f3d25bafec\ncollecting  36b98590-a7e6-4e00-8c7d-f0f3d25bafec\nSNOTEL:831_WY_SNTL 551e2612-8a22-4c44-8290-78dc0e4af85d\ncollecting  551e2612-8a22-4c44-8290-78dc0e4af85d\nSNOTEL:832_WA_SNTL 6d0ff6eb-0411-4863-b4e7-90958db98115\ncollecting  6d0ff6eb-0411-4863-b4e7-90958db98115\nSNOTEL:833_UT_SNTL 50d7ad3f-57f0-45e1-911d-b0efff9deb8f\ncollecting  50d7ad3f-57f0-45e1-911d-b0efff9deb8f\nSNOTEL:834_CA_SNTL f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nSNOTEL:835_MT_SNTL cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\ncollecting  cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\nSNOTEL:837_WY_SNTL 491846d3-f81a-4777-b49f-0a0c74168395\ncollecting  491846d3-f81a-4777-b49f-0a0c74168395\nSNOTEL:838_CO_SNTL f9f7132d-56a2-43e2-baba-312f34dbaeed\ncollecting  f9f7132d-56a2-43e2-baba-312f34dbaeed\nSNOTEL:839_CO_SNTL 0c31f316-6718-4a43-a9f1-ed552e45bd0f\ncollecting  0c31f316-6718-4a43-a9f1-ed552e45bd0f\nSNOTEL:840_CO_SNTL 3789f7a5-5743-4005-844d-602dadb33030\ncollecting  3789f7a5-5743-4005-844d-602dadb33030\nSNOTEL:841_WA_SNTL 6d0ff6eb-0411-4863-b4e7-90958db98115\ncollecting  6d0ff6eb-0411-4863-b4e7-90958db98115\nSNOTEL:842_CO_SNTL f62e6b4d-7f9d-4139-bac4-59f084fb09cd\ncollecting  f62e6b4d-7f9d-4139-bac4-59f084fb09cd\nSNOTEL:844_UT_SNTL 93b8483d-a510-42ff-865e-33d5a8784dc4\ncollecting  93b8483d-a510-42ff-865e-33d5a8784dc4\nSNOTEL:845_ID_SNTL 695c7749-a3b8-4158-bd14-59d1f2c3e736\ncollecting  695c7749-a3b8-4158-bd14-59d1f2c3e736\nSNOTEL:847_MT_SNTL dca30f20-582e-40ef-be6d-aa7858be4baa\ncollecting  dca30f20-582e-40ef-be6d-aa7858be4baa\nSNOTEL:848_CA_SNTL f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nSNOTEL:849_NV_SNTL 38793f95-324b-4f01-b1a7-45e1c9353bc1\ncollecting  38793f95-324b-4f01-b1a7-45e1c9353bc1\nSNOTEL:850_MT_SNTL 4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\ncollecting  4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\nSNOTEL:852_WY_SNTL 8116acfb-8035-4d34-b9b9-b0af2c5697df\ncollecting  8116acfb-8035-4d34-b9b9-b0af2c5697df\nSNOTEL:854_NM_SNTL 9c43edf0-541f-4dbb-9fe1-42cc83d453bd\ncollecting  9c43edf0-541f-4dbb-9fe1-42cc83d453bd\nSNOTEL:855_ID_SNTL c66f40ed-f72e-4012-991c-1f3726e5c8ad\ncollecting  c66f40ed-f72e-4012-991c-1f3726e5c8ad\nSNOTEL:857_CO_SNTL 2ca6a37f-67f5-4905-864b-ddf98d956ebb\ncollecting  2ca6a37f-67f5-4905-864b-ddf98d956ebb\nSNOTEL:858_MT_SNTL b1936012-0d31-4b92-8d60-c24903b2e569\ncollecting  b1936012-0d31-4b92-8d60-c24903b2e569\nSNOTEL:859_WY_SNTL 8116acfb-8035-4d34-b9b9-b0af2c5697df\ncollecting  8116acfb-8035-4d34-b9b9-b0af2c5697df\nSNOTEL:861_AZ_SNTL a2588440-600e-41da-b2b9-1f5632ecdef6\ncollecting  a2588440-600e-41da-b2b9-1f5632ecdef6\nSNOTEL:862_MT_SNTL e776d9b6-2180-4f50-90bf-77f7b920fc3b\ncollecting  e776d9b6-2180-4f50-90bf-77f7b920fc3b\nSNOTEL:863_WA_SNTL bb65d7a1-a5d5-4c89-9ef9-f0f1db06cc58\ncollecting  bb65d7a1-a5d5-4c89-9ef9-f0f1db06cc58\nSNOTEL:864_UT_SNTL 0a820e12-033b-45d6-9ef9-d70f4c5e5b63\ncollecting  0a820e12-033b-45d6-9ef9-d70f4c5e5b63\nSNOTEL:865_UT_SNTL ad44deb7-e56d-47bd-8d64-7147493e0aee\ncollecting  ad44deb7-e56d-47bd-8d64-7147493e0aee\nSNOTEL:868_WY_SNTL 551e2612-8a22-4c44-8290-78dc0e4af85d\ncollecting  551e2612-8a22-4c44-8290-78dc0e4af85d\nSNOTEL:869_CO_SNTL 8c45801f-6377-42e1-ae0a-9b53593ff843\ncollecting  8c45801f-6377-42e1-ae0a-9b53593ff843\nSNOTEL:871_ID_SNTL 5308a803-69e6-43cd-89db-66e93f9f83af\ncollecting  5308a803-69e6-43cd-89db-66e93f9f83af\nSNOTEL:872_WY_SNTL ab89875f-3b86-4c6a-8d66-767017570dfc\ncollecting  ab89875f-3b86-4c6a-8d66-767017570dfc\nSNOTEL:873_OR_SNTL 631ed3c9-7863-4e7c-86fa-4bfb043f2851\ncollecting  631ed3c9-7863-4e7c-86fa-4bfb043f2851\nSNOTEL:874_CO_SNTL 3789f7a5-5743-4005-844d-602dadb33030\ncollecting  3789f7a5-5743-4005-844d-602dadb33030\nSNOTEL:876_MT_SNTL 99a2d4a9-63a0-43a7-976d-2a1ed822186d\ncollecting  99a2d4a9-63a0-43a7-976d-2a1ed822186d\nSNOTEL:877_AZ_SNTL 0aeaffd7-9089-49e7-85ad-2314f32cbf7c\ncollecting  0aeaffd7-9089-49e7-85ad-2314f32cbf7c\nSNOTEL:878_WY_SNTL 692c41af-2210-4dd6-916d-c99e76807447\ncollecting  692c41af-2210-4dd6-916d-c99e76807447\nSNOTEL:895_ID_SNTL f3332d55-ecc8-4644-9deb-180e42abb2eb\ncollecting  f3332d55-ecc8-4644-9deb-180e42abb2eb\nSNOTEL:896_UT_SNTL 10162c55-772d-49d2-8b1b-b1f9c86254b2\ncollecting  10162c55-772d-49d2-8b1b-b1f9c86254b2\nSNOTEL:897_WA_SNTL 360f1bcc-aa60-4052-a18a-b33da5745ff4\ncollecting  360f1bcc-aa60-4052-a18a-b33da5745ff4\nSNOTEL:899_WA_SNTL 360f1bcc-aa60-4052-a18a-b33da5745ff4\ncollecting  360f1bcc-aa60-4052-a18a-b33da5745ff4\nSNOTEL:901_MT_SNTL 89a7b0ef-1ec8-490f-9207-c93aa57a147f\ncollecting  89a7b0ef-1ec8-490f-9207-c93aa57a147f\nSNOTEL:902_AZ_SNTL 1135e377-22e6-4290-b4cd-e6739de7fd8a\ncollecting  1135e377-22e6-4290-b4cd-e6739de7fd8a\nSNOTEL:904_CO_SNTL 0d9f0708-5e8d-4eb8-b946-6441ef955516\ncollecting  0d9f0708-5e8d-4eb8-b946-6441ef955516\nSNOTEL:905_CO_SNTL 9e5bc091-13c7-46ec-8c17-8e315b7e535c\ncollecting  9e5bc091-13c7-46ec-8c17-8e315b7e535c\nSNOTEL:906_UT_SNTL 93b8483d-a510-42ff-865e-33d5a8784dc4\ncollecting  93b8483d-a510-42ff-865e-33d5a8784dc4\nSNOTEL:907_UT_SNTL ad44deb7-e56d-47bd-8d64-7147493e0aee\ncollecting  ad44deb7-e56d-47bd-8d64-7147493e0aee\nSNOTEL:909_WA_SNTL e6d48180-814d-494b-99cc-0be5cd1a0eaf\ncollecting  e6d48180-814d-494b-99cc-0be5cd1a0eaf\nSNOTEL:911_WA_SNTL 360f1bcc-aa60-4052-a18a-b33da5745ff4\ncollecting  360f1bcc-aa60-4052-a18a-b33da5745ff4\nSNOTEL:912_WA_SNTL 8e7f826f-8dc9-490a-9282-98d899a07cc7\ncollecting  8e7f826f-8dc9-490a-9282-98d899a07cc7\nSNOTEL:913_CO_SNTL 02cf33c2-c8e2-48b9-bf72-92506e97e251\ncollecting  02cf33c2-c8e2-48b9-bf72-92506e97e251\nSNOTEL:915_ID_SNTL 830bc2b9-592d-4334-842a-213ba4c0a347\ncollecting  830bc2b9-592d-4334-842a-213ba4c0a347\nSNOTEL:917_MT_SNTL 9ea23099-dd30-4b26-9de7-5d42d5dae87b\ncollecting  9ea23099-dd30-4b26-9de7-5d42d5dae87b\nSNOTEL:918_MT_SNTL 2f5c1968-2c34-4539-a9f4-38298d0de925\ncollecting  2f5c1968-2c34-4539-a9f4-38298d0de925\nSNOTEL:919_MT_SNTL eab40c22-0c15-4291-a6ce-e085a7f0f1e4\ncollecting  eab40c22-0c15-4291-a6ce-e085a7f0f1e4\nSNOTEL:920_SD_SNTL ab89875f-3b86-4c6a-8d66-767017570dfc\ncollecting  ab89875f-3b86-4c6a-8d66-767017570dfc\nSNOTEL:921_NM_SNTL 9c43edf0-541f-4dbb-9fe1-42cc83d453bd\ncollecting  9c43edf0-541f-4dbb-9fe1-42cc83d453bd\nSNOTEL:922_NM_SNTL 9c43edf0-541f-4dbb-9fe1-42cc83d453bd\ncollecting  9c43edf0-541f-4dbb-9fe1-42cc83d453bd\nSNOTEL:923_WY_SNTL 990e5974-9c60-4c9a-ba23-ddce13971178\ncollecting  990e5974-9c60-4c9a-ba23-ddce13971178\nSNOTEL:924_MT_SNTL b1936012-0d31-4b92-8d60-c24903b2e569\ncollecting  b1936012-0d31-4b92-8d60-c24903b2e569\nSNOTEL:925_OR_SNTL e13f9c1b-dca0-4c63-a64c-76f6bc725156\ncollecting  e13f9c1b-dca0-4c63-a64c-76f6bc725156\nSNOTEL:926_ID_SNTL af0463d4-f20f-4d13-bd0f-5834e2e8717b\ncollecting  af0463d4-f20f-4d13-bd0f-5834e2e8717b\nSNOTEL:927_AZ_SNTL c0e85162-6ff4-401b-b01e-cc6d7a51eac0\ncollecting  c0e85162-6ff4-401b-b01e-cc6d7a51eac0\nSNOTEL:929_MT_SNTL e467a17f-a729-4938-87a1-ac25157eed63\ncollecting  e467a17f-a729-4938-87a1-ac25157eed63\nSNOTEL:930_MT_SNTL 4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\ncollecting  4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\nSNOTEL:935_CO_SNTL 7f215a89-2a17-42f0-a2fb-f18fbc888cef\ncollecting  7f215a89-2a17-42f0-a2fb-f18fbc888cef\nSNOTEL:936_CO_SNTL a5366d95-7b9d-4b1b-a16f-99e56fab08f5\ncollecting  a5366d95-7b9d-4b1b-a16f-99e56fab08f5\nSNOTEL:937_CO_SNTL 7a266524-6e76-4d06-963f-6f977e356574\ncollecting  7a266524-6e76-4d06-963f-6f977e356574\nSNOTEL:939_CO_SNTL fde3221a-9ce3-45a9-857f-bd196b07aa05\ncollecting  fde3221a-9ce3-45a9-857f-bd196b07aa05\nSNOTEL:941_WA_SNTL 2f266b81-aad3-4c26-ac69-1bd04a208bf7\ncollecting  2f266b81-aad3-4c26-ac69-1bd04a208bf7\nSNOTEL:942_WA_SNTL cdb446bc-e801-404f-9911-9ba5c687f6af\ncollecting  cdb446bc-e801-404f-9911-9ba5c687f6af\nSNOTEL:945_OR_SNTL 0a0ea690-5b73-4459-91d5-a6948d132a48\ncollecting  0a0ea690-5b73-4459-91d5-a6948d132a48\nSNOTEL:972_UT_SNTL 10162c55-772d-49d2-8b1b-b1f9c86254b2\ncollecting  10162c55-772d-49d2-8b1b-b1f9c86254b2\nSNOTEL:974_WA_SNTL 9448e70e-32ff-4c47-b6e7-ccb1df91743b\ncollecting  9448e70e-32ff-4c47-b6e7-ccb1df91743b\nSNOTEL:975_WA_SNTL 47e625fa-e2df-43ce-84dd-8ac21fdda75a\ncollecting  47e625fa-e2df-43ce-84dd-8ac21fdda75a\nSNOTEL:978_ID_SNTL da6ce150-5daf-4a91-9fdd-a85854462b08\ncollecting  da6ce150-5daf-4a91-9fdd-a85854462b08\nSNOTEL:981_MT_SNTL e776d9b6-2180-4f50-90bf-77f7b920fc3b\ncollecting  e776d9b6-2180-4f50-90bf-77f7b920fc3b\nSNOTEL:982_WY_SNTL ab89875f-3b86-4c6a-8d66-767017570dfc\ncollecting  ab89875f-3b86-4c6a-8d66-767017570dfc\nSNOTEL:984_WA_SNTL f78ea076-10a1-45dc-a848-c08e129c6a28\ncollecting  f78ea076-10a1-45dc-a848-c08e129c6a28\nSNOTEL:988_ID_SNTL 2f5c1968-2c34-4539-a9f4-38298d0de925\ncollecting  2f5c1968-2c34-4539-a9f4-38298d0de925\nSNOTEL:989_ID_SNTL f78ea076-10a1-45dc-a848-c08e129c6a28\ncollecting  f78ea076-10a1-45dc-a848-c08e129c6a28\nSNOTEL:990_WA_SNTL cde149fe-708b-4a35-bea8-959eb9da4e0b\ncollecting  cde149fe-708b-4a35-bea8-959eb9da4e0b\nSNOTEL:992_UT_SNTL 064d7f3e-8bbd-49cd-b360-5c4590a19b9e\ncollecting  064d7f3e-8bbd-49cd-b360-5c4590a19b9e\nSNOTEL:998_WA_SNTL cde149fe-708b-4a35-bea8-959eb9da4e0b\ncollecting  cde149fe-708b-4a35-bea8-959eb9da4e0b\nSNOTEL:999_WA_SNTL e6d48180-814d-494b-99cc-0be5cd1a0eaf\ncollecting  e6d48180-814d-494b-99cc-0be5cd1a0eaf\n",
  "history_begin_time" : 1647002354440,
  "history_end_time" : 1647002591544,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "eve1bmthiso",
  "history_input" : "\n\n# reminder that if you are installing libraries in a Google Colab instance you will be prompted to restart your kernal\n\nfrom all_dependencies import *\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nstation_cell_mapper_file = f\"{github_dir}/data/ready_for_training/station_cell_mapping.csv\"\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\nstart_date = '2022-02-20'\nend_date = '2022-02-27'\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n     print(\"exists exiting..\")\n     exit()\n\nstation_cell_mapper_df = pd.read_csv(station_cell_mapper_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\n\nfor ind in station_cell_mapper_df.index:\n    \n    try:\n      \n  \t  print(station_cell_mapper_df['station_id'][ind], station_cell_mapper_df['cell_id'][ind])\n  \t  current_cell_id = station_cell_mapper_df['cell_id'][ind]\n  \t  print(\"collecting \", current_cell_id)\n\n  \t  longitude = station_cell_mapper_df['lon'][ind]\n  \t  latitude = station_cell_mapper_df['lat'][ind]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      \n  \t  print(e)\n  \t  pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\n\n",
  "history_output" : "To authorize access needed by Earth Engine, open the following URL in a web browser and follow the instructions. If the web browser does not start automatically, please manually browse the URL below.\n    https://accounts.google.com/o/oauth2/auth?client_id=517222506229-vsmmajv00ul0bs7p89v5m89qs8eb9359.apps.googleusercontent.com&scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fearthengine+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdevstorage.full_control&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&response_type=code&code_challenge=s3COxhRsrdpPbGMlbc6Cbe8BIAU071K61cBax46V8ZY&code_challenge_method=S256\nThe authorization workflow will generate a code, which you should paste in the box below. \nEnter verification code: \n",
  "history_begin_time" : 1646692933389,
  "history_end_time" : 1646693006936,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "xskryb7jtjp",
  "history_input" : "\n\n# reminder that if you are installing libraries in a Google Colab instance you will be prompted to restart your kernal\n\nfrom all_dependencies import *\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nstation_cell_mapper_file = f\"{github_dir}/data/ready_for_training/station_cell_mapping.csv\"\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\nstart_date = '2022-02-20'\nend_date = '2022-02-27'\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n     print(\"exists exiting..\")\n     exit()\n\nstation_cell_mapper_df = pd.read_csv(station_cell_mapper_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\n\nfor ind in station_cell_mapper_df.index:\n    \n    try:\n      \n  \t  print(station_cell_mapper_df['station_id'][ind], station_cell_mapper_df['cell_id'][ind])\n  \t  current_cell_id = station_cell_mapper_df['cell_id'][ind]\n  \t  print(\"collecting \", current_cell_id)\n\n  \t  longitude = station_cell_mapper_df['lon'][ind]\n  \t  latitude = station_cell_mapper_df['lat'][ind]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      \n  \t  print(e)\n  \t  pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\n\n",
  "history_output" : "",
  "history_begin_time" : 1646604591677,
  "history_end_time" : 1646604591858,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "ppKDm5amXA6j",
  "history_input" : "\n\n# reminder that if you are installing libraries in a Google Colab instance you will be prompted to restart your kernal\n\nfrom all_dependencies import *\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nstation_cell_mapper_file = f\"{github_dir}/data/ready_for_training/station_cell_mapping.csv\"\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\nstart_date = '2022-02-20'\nend_date = '2022-02-27'\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n     print(\"exists exiting..\")\n     exit()\n\nstation_cell_mapper_df = pd.read_csv(station_cell_mapper_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\n\nfor ind in station_cell_mapper_df.index:\n    \n    try:\n      \n  \t  print(station_cell_mapper_df['station_id'][ind], station_cell_mapper_df['cell_id'][ind])\n  \t  current_cell_id = station_cell_mapper_df['cell_id'][ind]\n  \t  print(\"collecting \", current_cell_id)\n\n  \t  longitude = station_cell_mapper_df['lon'][ind]\n  \t  latitude = station_cell_mapper_df['lat'][ind]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      \n  \t  print(e)\n  \t  pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\n\n",
  "history_output" : "Results will be saved to /Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-20_2022-02-27.csv\nexists exiting..\n",
  "history_begin_time" : 1646346432552,
  "history_end_time" : 1646346435086,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "0yxiuq9jMwva",
  "history_input" : "\n\n# reminder that if you are installing libraries in a Google Colab instance you will be prompted to restart your kernal\n\nimport all_dependencies\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nstation_cell_mapper_file = f\"{github_dir}/data/ready_for_training/station_cell_mapping.csv\"\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\nstart_date = '2022-02-20'\nend_date = '2022-02-27'\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n     print(\"exists exiting..\")\n     exit()\n\nstation_cell_mapper_df = pd.read_csv(station_cell_mapper_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\n\nfor ind in station_cell_mapper_df.index:\n    \n    try:\n      \n  \t  print(station_cell_mapper_df['station_id'][ind], station_cell_mapper_df['cell_id'][ind])\n  \t  current_cell_id = station_cell_mapper_df['cell_id'][ind]\n  \t  print(\"collecting \", current_cell_id)\n\n  \t  longitude = station_cell_mapper_df['lon'][ind]\n  \t  latitude = station_cell_mapper_df['lat'][ind]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      \n  \t  print(e)\n  \t  pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\n\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/Users/joe/gw-workspace/jGZOFc3qzjSLjjsG4vMPN2JtkP/data_gee_modis_real_time.py\", line 8, in <module>\n    ee.Initialize()\nNameError: name 'ee' is not defined\nDuring handling of the above exception, another exception occurred:\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/jGZOFc3qzjSLjjsG4vMPN2JtkP/data_gee_modis_real_time.py\", line 10, in <module>\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\nNameError: name 'ee' is not defined\n",
  "history_begin_time" : 1646346413352,
  "history_end_time" : 1646346415110,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "vxswzb54bl4",
  "history_input" : "\n\n# reminder that if you are installing libraries in a Google Colab instance you will be prompted to restart your kernal\n\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nstation_cell_mapper_file = f\"{github_dir}/data/ready_for_training/station_cell_mapping.csv\"\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\nstart_date = '2022-02-20'\nend_date = '2022-02-27'\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n     print(\"exists exiting..\")\n     exit()\n\nstation_cell_mapper_df = pd.read_csv(station_cell_mapper_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\n\nfor ind in station_cell_mapper_df.index:\n    \n    try:\n      \n  \t  print(station_cell_mapper_df['station_id'][ind], station_cell_mapper_df['cell_id'][ind])\n  \t  current_cell_id = station_cell_mapper_df['cell_id'][ind]\n  \t  print(\"collecting \", current_cell_id)\n\n  \t  longitude = station_cell_mapper_df['lon'][ind]\n  \t  latitude = station_cell_mapper_df['lat'][ind]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      \n  \t  print(e)\n  \t  pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\n\n",
  "history_output" : "Results will be saved to /Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-20_2022-02-27.csv\nexists exiting..\n",
  "history_begin_time" : 1646269656985,
  "history_end_time" : 1646269660809,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "Ri08LKkr4QgW",
  "history_input" : "\n\n# reminder that if you are installing libraries in a Google Colab instance you will be prompted to restart your kernal\n\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nstation_cell_mapper_file = f\"{github_dir}/data/ready_for_training/station_cell_mapping.csv\"\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\nstart_date = '2022-02-20'\nend_date = '2022-02-27'\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\nprint(f\"Results will be saved to {final_csv_file}\")\n\nif os.path.exists(final_csv_file):\n     print(\"exists exiting..\")\n     exit()\n\nstation_cell_mapper_df = pd.read_csv(station_cell_mapper_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\n\nfor ind in station_cell_mapper_df.index:\n    \n    try:\n      \n  \t  print(station_cell_mapper_df['station_id'][ind], station_cell_mapper_df['cell_id'][ind])\n  \t  current_cell_id = station_cell_mapper_df['cell_id'][ind]\n  \t  print(\"collecting \", current_cell_id)\n\n  \t  longitude = station_cell_mapper_df['lon'][ind]\n  \t  latitude = station_cell_mapper_df['lat'][ind]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      \n  \t  print(e)\n  \t  pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\n\n",
  "history_output" : "Results will be saved to /Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-20_2022-02-27.csv\nexists exiting..\n",
  "history_begin_time" : 1646011310818,
  "history_end_time" : 1646011313910,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "s6r0Q2tot1WB",
  "history_input" : "\n\n# reminder that if you are installing libraries in a Google Colab instance you will be prompted to restart your kernal\n\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nstation_cell_mapper_file = f\"{github_dir}/data/ready_for_training/station_cell_mapping.csv\"\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\nstart_date = '2022-02-20'\nend_date = '2022-02-27'\n\nfinal_csv_file = f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}_{start_date}_{end_date}.csv\"\n\nif os.path.exists(final_csv_file):\n     print(\"exists exiting..\")\n     exit()\n\nstation_cell_mapper_df = pd.read_csv(station_cell_mapper_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\n\nfor ind in station_cell_mapper_df.index:\n    \n    try:\n      \n  \t  print(station_cell_mapper_df['station_id'][ind], station_cell_mapper_df['cell_id'][ind])\n  \t  current_cell_id = station_cell_mapper_df['cell_id'][ind]\n  \t  print(\"collecting \", current_cell_id)\n\n  \t  longitude = station_cell_mapper_df['lon'][ind]\n  \t  latitude = station_cell_mapper_df['lat'][ind]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate(start_date, end_date)\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      \n  \t  print(e)\n  \t  pass\n    \n    \nall_cell_df.to_csv(final_csv_file)  \n\n\n",
  "history_output" : "/Users/joe\nexists exiting..\n",
  "history_begin_time" : 1646011281458,
  "history_end_time" : 1646011285082,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "sM2LnwEN2p8c",
  "history_input" : "\n\n# reminder that if you are installing libraries in a Google Colab instance you will be prompted to restart your kernal\n\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nstation_cell_mapper_file = f\"{github_dir}/data/ready_for_training/station_cell_mapping.csv\"\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n\n#org_name = 'sentinel1'\n#product_name = 'COPERNICUS/S1_GRD'\n#var_name = 'VV'\n#column_name = 's1_grd_vv'\n\nstation_cell_mapper_df = pd.read_csv(station_cell_mapper_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\n\nfor ind in station_cell_mapper_df.index:\n    \n    try:\n      \n  \t  print(station_cell_mapper_df['station_id'][ind], station_cell_mapper_df['cell_id'][ind])\n  \t  current_cell_id = station_cell_mapper_df['cell_id'][ind]\n  \t  print(\"collecting \", current_cell_id)\n\n  \t  longitude = station_cell_mapper_df['lon'][ind]\n  \t  latitude = station_cell_mapper_df['lat'][ind]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate('2022-02-20','2022-02-27')\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      \n  \t  print(e)\n  \t  pass\n    \n    \nall_cell_df.to_csv(f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}.csv\")  \n\n\n",
  "history_output" : "/Users/joe\nCDEC:ADM 76b55900-eb3d-4d25-a538-f74302ffe72d\ncollecting  76b55900-eb3d-4d25-a538-f74302ffe72d\nCDEC:AGP f191fe19-0e81-4bc9-9980-29738a05a49b\ncollecting  f191fe19-0e81-4bc9-9980-29738a05a49b\nCDEC:ALP f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nCDEC:BCB 0a54de9c-d804-4681-9f7f-9f770a0f6d2e\ncollecting  0a54de9c-d804-4681-9f7f-9f770a0f6d2e\nCDEC:BCH 4f383fb2-6cc7-48a8-9bdb-9c5d150e6eae\ncollecting  4f383fb2-6cc7-48a8-9bdb-9c5d150e6eae\nCDEC:BFL 7cf8af73-1abf-40ad-9788-0d757201eeb0\ncollecting  7cf8af73-1abf-40ad-9788-0d757201eeb0\nCDEC:BGP 30641173-db10-4320-ab1e-c46e765a9011\ncollecting  30641173-db10-4320-ab1e-c46e765a9011\nCDEC:BIM 30ab5128-9a8f-4446-b781-faf8bafb677f\ncollecting  30ab5128-9a8f-4446-b781-faf8bafb677f\nCDEC:BKL df01bf44-46b8-4541-b0a4-ed1fae16ac38\ncollecting  df01bf44-46b8-4541-b0a4-ed1fae16ac38\nCDEC:BLA 6dd37e24-0a9c-4749-8ab6-7e26d42925d6\ncollecting  6dd37e24-0a9c-4749-8ab6-7e26d42925d6\nCDEC:BLC 018cf1a1-f945-4097-9c47-0c4690538bb5\ncollecting  018cf1a1-f945-4097-9c47-0c4690538bb5\nCDEC:BLD 962f6718-ce02-4d13-b28c-e159d1adc2d4\ncollecting  962f6718-ce02-4d13-b28c-e159d1adc2d4\nCDEC:BLK c89dc6ca-6d69-41ce-954d-b51f64aaacb1\ncollecting  c89dc6ca-6d69-41ce-954d-b51f64aaacb1\nCDEC:BLS 4bb8fe22-653c-4611-a3d8-de5b2c62d13d\ncollecting  4bb8fe22-653c-4611-a3d8-de5b2c62d13d\nCDEC:BMW d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nCDEC:BNK 65565709-caca-4ed5-a8b6-2794da371708\ncollecting  65565709-caca-4ed5-a8b6-2794da371708\nCDEC:BSK c89dc6ca-6d69-41ce-954d-b51f64aaacb1\ncollecting  c89dc6ca-6d69-41ce-954d-b51f64aaacb1\nCDEC:CDP 76b55900-eb3d-4d25-a538-f74302ffe72d\ncollecting  76b55900-eb3d-4d25-a538-f74302ffe72d\nCDEC:CHM f11515e9-f2a0-4f8c-9f2d-12b9e2dc8569\ncollecting  f11515e9-f2a0-4f8c-9f2d-12b9e2dc8569\nCDEC:CHP cc66f524-dd2b-4d3f-bf96-4941edca2879\ncollecting  cc66f524-dd2b-4d3f-bf96-4941edca2879\nCDEC:CRL 09288a61-d120-4cee-ac46-5a275a8f005c\ncollecting  09288a61-d120-4cee-ac46-5a275a8f005c\nCDEC:CSL 51ebe834-adf4-474e-871e-28ebca2bd0cc\ncollecting  51ebe834-adf4-474e-871e-28ebca2bd0cc\nCDEC:CSV 4f383fb2-6cc7-48a8-9bdb-9c5d150e6eae\ncollecting  4f383fb2-6cc7-48a8-9bdb-9c5d150e6eae\nCDEC:CWD 4f383fb2-6cc7-48a8-9bdb-9c5d150e6eae\ncollecting  4f383fb2-6cc7-48a8-9bdb-9c5d150e6eae\nCDEC:CWF 76b55900-eb3d-4d25-a538-f74302ffe72d\ncollecting  76b55900-eb3d-4d25-a538-f74302ffe72d\nCDEC:CXS c89dc6ca-6d69-41ce-954d-b51f64aaacb1\ncollecting  c89dc6ca-6d69-41ce-954d-b51f64aaacb1\nCDEC:DAN 70bfdc00-dbd2-4c44-8039-04a547f91f76\ncollecting  70bfdc00-dbd2-4c44-8039-04a547f91f76\nCDEC:DDM 01be2cc7-ef77-4e4d-80ed-c4f8139162c3\ncollecting  01be2cc7-ef77-4e4d-80ed-c4f8139162c3\nCDEC:DPO 9023330c-2766-4585-b6fe-63593c519e03\ncollecting  9023330c-2766-4585-b6fe-63593c519e03\nCDEC:DSS 76b55900-eb3d-4d25-a538-f74302ffe72d\ncollecting  76b55900-eb3d-4d25-a538-f74302ffe72d\nCDEC:EBB 962f6718-ce02-4d13-b28c-e159d1adc2d4\ncollecting  962f6718-ce02-4d13-b28c-e159d1adc2d4\nCDEC:EP5 f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nCDEC:FDC c89dc6ca-6d69-41ce-954d-b51f64aaacb1\ncollecting  c89dc6ca-6d69-41ce-954d-b51f64aaacb1\nCDEC:FLL d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nCDEC:FRN f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nCDEC:FRW ddc760c7-dc6e-4fd4-ac1a-987ba3f79748\ncollecting  ddc760c7-dc6e-4fd4-ac1a-987ba3f79748\nCDEC:GEM 690ae8d4-c0d0-4dad-a7c4-67f3df07cc78\ncollecting  690ae8d4-c0d0-4dad-a7c4-67f3df07cc78\nCDEC:GIN dbf421d4-0295-4a9f-9e20-88ac299360b1\ncollecting  dbf421d4-0295-4a9f-9e20-88ac299360b1\nCDEC:GKS 51ebe834-adf4-474e-871e-28ebca2bd0cc\ncollecting  51ebe834-adf4-474e-871e-28ebca2bd0cc\nCDEC:GNF 5ec8a57d-8d5f-4331-b1fb-9d766f42991a\ncollecting  5ec8a57d-8d5f-4331-b1fb-9d766f42991a\nCDEC:GNL 403090bc-fc9e-44fb-921b-f7eea63e9740\ncollecting  403090bc-fc9e-44fb-921b-f7eea63e9740\nCDEC:GRM 232ef8b4-938f-42d7-a6e4-647d5280edd2\ncollecting  232ef8b4-938f-42d7-a6e4-647d5280edd2\nCDEC:GRV cc8b7ef5-1c86-4bd2-8cb9-969c7df1884e\ncollecting  cc8b7ef5-1c86-4bd2-8cb9-969c7df1884e\nCDEC:GRZ 018cf1a1-f945-4097-9c47-0c4690538bb5\ncollecting  018cf1a1-f945-4097-9c47-0c4690538bb5\nCDEC:HGM d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nCDEC:HIG 65565709-caca-4ed5-a8b6-2794da371708\ncollecting  65565709-caca-4ed5-a8b6-2794da371708\nCDEC:HMB df01bf44-46b8-4541-b0a4-ed1fae16ac38\ncollecting  df01bf44-46b8-4541-b0a4-ed1fae16ac38\nCDEC:HNT 39dd8dce-b4a1-4db5-bc31-fba72181cf5e\ncollecting  39dd8dce-b4a1-4db5-bc31-fba72181cf5e\nCDEC:HOR d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nCDEC:HRK df01bf44-46b8-4541-b0a4-ed1fae16ac38\ncollecting  df01bf44-46b8-4541-b0a4-ed1fae16ac38\nCDEC:HRS 49b01e43-f719-450f-b7c6-556b08e9ef4d\ncollecting  49b01e43-f719-450f-b7c6-556b08e9ef4d\nCDEC:HVN d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nCDEC:HYS 51ebe834-adf4-474e-871e-28ebca2bd0cc\ncollecting  51ebe834-adf4-474e-871e-28ebca2bd0cc\nCDEC:IDC 018cf1a1-f945-4097-9c47-0c4690538bb5\ncollecting  018cf1a1-f945-4097-9c47-0c4690538bb5\nCDEC:IDP 018cf1a1-f945-4097-9c47-0c4690538bb5\ncollecting  018cf1a1-f945-4097-9c47-0c4690538bb5\nCDEC:INN 018cf1a1-f945-4097-9c47-0c4690538bb5\ncollecting  018cf1a1-f945-4097-9c47-0c4690538bb5\nCDEC:KTL 147d5eb4-e574-47e4-994a-8a2908c06050\ncollecting  147d5eb4-e574-47e4-994a-8a2908c06050\nCDEC:LBD 74f8c8bc-2f60-4232-b447-43459d5d22f0\ncollecting  74f8c8bc-2f60-4232-b447-43459d5d22f0\nCDEC:LLP 6dd37e24-0a9c-4749-8ab6-7e26d42925d6\ncollecting  6dd37e24-0a9c-4749-8ab6-7e26d42925d6\nCDEC:LVM 01be2cc7-ef77-4e4d-80ed-c4f8139162c3\ncollecting  01be2cc7-ef77-4e4d-80ed-c4f8139162c3\nCDEC:LVT 01be2cc7-ef77-4e4d-80ed-c4f8139162c3\ncollecting  01be2cc7-ef77-4e4d-80ed-c4f8139162c3\nCDEC:MDW 018cf1a1-f945-4097-9c47-0c4690538bb5\ncollecting  018cf1a1-f945-4097-9c47-0c4690538bb5\nCDEC:MED 00c4db22-a423-41a4-ada6-a8b1b04153a4\ncollecting  00c4db22-a423-41a4-ada6-a8b1b04153a4\nCDEC:MHP ec0952b6-f119-4f40-bf47-343d71245ddc\ncollecting  ec0952b6-f119-4f40-bf47-343d71245ddc\nCDEC:MNT 74f8c8bc-2f60-4232-b447-43459d5d22f0\ncollecting  74f8c8bc-2f60-4232-b447-43459d5d22f0\nCDEC:MRL d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nCDEC:MSK d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nCDEC:MTM b5c7343d-a4a9-4da9-aee3-36539a545af6\ncollecting  b5c7343d-a4a9-4da9-aee3-36539a545af6\nCDEC:PDS 17da8ab4-6dd8-481e-a025-7574765ef9b1\ncollecting  17da8ab4-6dd8-481e-a025-7574765ef9b1\nCDEC:PET 65565709-caca-4ed5-a8b6-2794da371708\ncollecting  65565709-caca-4ed5-a8b6-2794da371708\nCDEC:PSC 4f383fb2-6cc7-48a8-9bdb-9c5d150e6eae\ncollecting  4f383fb2-6cc7-48a8-9bdb-9c5d150e6eae\nCDEC:PSN 74f8c8bc-2f60-4232-b447-43459d5d22f0\ncollecting  74f8c8bc-2f60-4232-b447-43459d5d22f0\nCDEC:QUA d563ff8c-31c3-44a9-8fd3-2f8bc68b21b4\ncollecting  d563ff8c-31c3-44a9-8fd3-2f8bc68b21b4\nCDEC:RBP 51ebe834-adf4-474e-871e-28ebca2bd0cc\ncollecting  51ebe834-adf4-474e-871e-28ebca2bd0cc\nCDEC:RCC 018cf1a1-f945-4097-9c47-0c4690538bb5\ncollecting  018cf1a1-f945-4097-9c47-0c4690538bb5\nCDEC:RCK cbe04952-a2ae-4525-98c5-a644c9a5ddc5\ncollecting  cbe04952-a2ae-4525-98c5-a644c9a5ddc5\nCDEC:RP2 f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nCDEC:RRM 7cf8af73-1abf-40ad-9788-0d757201eeb0\ncollecting  7cf8af73-1abf-40ad-9788-0d757201eeb0\nCDEC:RTL 147d5eb4-e574-47e4-994a-8a2908c06050\ncollecting  147d5eb4-e574-47e4-994a-8a2908c06050\nCDEC:SCN c89dc6ca-6d69-41ce-954d-b51f64aaacb1\ncollecting  c89dc6ca-6d69-41ce-954d-b51f64aaacb1\nCDEC:SCT 7cf8af73-1abf-40ad-9788-0d757201eeb0\ncollecting  7cf8af73-1abf-40ad-9788-0d757201eeb0\nCDEC:SDF 65565709-caca-4ed5-a8b6-2794da371708\ncollecting  65565709-caca-4ed5-a8b6-2794da371708\nCDEC:SDW 74f8c8bc-2f60-4232-b447-43459d5d22f0\ncollecting  74f8c8bc-2f60-4232-b447-43459d5d22f0\nCDEC:SHM 7cf8af73-1abf-40ad-9788-0d757201eeb0\ncollecting  7cf8af73-1abf-40ad-9788-0d757201eeb0\nCDEC:SIL c89dc6ca-6d69-41ce-954d-b51f64aaacb1\ncollecting  c89dc6ca-6d69-41ce-954d-b51f64aaacb1\nCDEC:SLM 962f6718-ce02-4d13-b28c-e159d1adc2d4\ncollecting  962f6718-ce02-4d13-b28c-e159d1adc2d4\nCDEC:SLT 65565709-caca-4ed5-a8b6-2794da371708\ncollecting  65565709-caca-4ed5-a8b6-2794da371708\nCDEC:SPS 01be2cc7-ef77-4e4d-80ed-c4f8139162c3\ncollecting  01be2cc7-ef77-4e4d-80ed-c4f8139162c3\nCDEC:SPT 962f6718-ce02-4d13-b28c-e159d1adc2d4\ncollecting  962f6718-ce02-4d13-b28c-e159d1adc2d4\nCDEC:SQV f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nCDEC:SSM 147d5eb4-e574-47e4-994a-8a2908c06050\ncollecting  147d5eb4-e574-47e4-994a-8a2908c06050\nCDEC:SWM 6e96bf06-cbc5-45b5-a36b-e37864226099\ncollecting  6e96bf06-cbc5-45b5-a36b-e37864226099\nCDEC:TCC f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nCDEC:TK2 f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nCDEC:TMR c7e3f62c-a812-4342-8e4c-3a6a5dd96255\ncollecting  c7e3f62c-a812-4342-8e4c-3a6a5dd96255\nCDEC:TNY a8e91cfa-724a-4114-a9d4-291785ff31f8\ncollecting  a8e91cfa-724a-4114-a9d4-291785ff31f8\nCDEC:TUM 2dde4be2-b6fd-47e8-b53d-88b59d74fde1\ncollecting  2dde4be2-b6fd-47e8-b53d-88b59d74fde1\nCDEC:UBC b2e9cb6b-b45a-4cab-8333-247cb4c0b51b\ncollecting  b2e9cb6b-b45a-4cab-8333-247cb4c0b51b\nCDEC:UTY 46f21569-8ecf-4c46-b65b-d80fa83a20d5\ncollecting  46f21569-8ecf-4c46-b65b-d80fa83a20d5\nCDEC:VLC 643c05b6-03bc-4024-8000-2228f4b5a7ad\ncollecting  643c05b6-03bc-4024-8000-2228f4b5a7ad\nCDEC:VRG fb078c7e-4975-4c7f-8f42-180386ac8c3c\ncollecting  fb078c7e-4975-4c7f-8f42-180386ac8c3c\nCDEC:VVL 51ebe834-adf4-474e-871e-28ebca2bd0cc\ncollecting  51ebe834-adf4-474e-871e-28ebca2bd0cc\nCDEC:WC3 f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nCDEC:WHW dba335b6-9d97-4a89-9ff3-888a8a45575f\ncollecting  dba335b6-9d97-4a89-9ff3-888a8a45575f\nCDEC:WTM 057fb61e-ce45-4423-9ef2-b52d8c1237e9\ncollecting  057fb61e-ce45-4423-9ef2-b52d8c1237e9\nCDEC:WWC 50f7b567-4066-4437-a335-71aff4c94a2c\ncollecting  50f7b567-4066-4437-a335-71aff4c94a2c\nSNOTEL:1000_OR_SNTL 5e252b65-58dd-421f-a0db-3d4669bfb235\ncollecting  5e252b65-58dd-421f-a0db-3d4669bfb235\nSNOTEL:1005_CO_SNTL efada0af-09bf-4013-a1c6-0837f8ff59c5\ncollecting  efada0af-09bf-4013-a1c6-0837f8ff59c5\nSNOTEL:1009_MT_SNTL 517aefce-a617-4251-acb9-c5faf0b7fdf3\ncollecting  517aefce-a617-4251-acb9-c5faf0b7fdf3\nSNOTEL:1010_OR_SNTL 0a0ea690-5b73-4459-91d5-a6948d132a48\ncollecting  0a0ea690-5b73-4459-91d5-a6948d132a48\nSNOTEL:1011_WA_SNTL e6d48180-814d-494b-99cc-0be5cd1a0eaf\ncollecting  e6d48180-814d-494b-99cc-0be5cd1a0eaf\nSNOTEL:1012_WA_SNTL cdfc27f0-b990-45f7-bac6-7c674cd157ac\ncollecting  cdfc27f0-b990-45f7-bac6-7c674cd157ac\nSNOTEL:1013_UT_SNTL 2222b7b3-f48b-4cea-90bf-8e7245d002ea\ncollecting  2222b7b3-f48b-4cea-90bf-8e7245d002ea\nSNOTEL:1014_CO_SNTL cad51334-b3af-4c23-85c3-451c3447560a\ncollecting  cad51334-b3af-4c23-85c3-451c3447560a\nSNOTEL:1015_WY_SNTL 8116acfb-8035-4d34-b9b9-b0af2c5697df\ncollecting  8116acfb-8035-4d34-b9b9-b0af2c5697df\nSNOTEL:1016_ID_SNTL c66f40ed-f72e-4012-991c-1f3726e5c8ad\ncollecting  c66f40ed-f72e-4012-991c-1f3726e5c8ad\nSNOTEL:1017_NM_SNTL 6afdc499-9686-4451-b207-13df777df662\ncollecting  6afdc499-9686-4451-b207-13df777df662\nSNOTEL:1030_CO_SNTL 02cf33c2-c8e2-48b9-bf72-92506e97e251\ncollecting  02cf33c2-c8e2-48b9-bf72-92506e97e251\nSNOTEL:1031_CO_SNTL 8c45801f-6377-42e1-ae0a-9b53593ff843\ncollecting  8c45801f-6377-42e1-ae0a-9b53593ff843\nSNOTEL:1032_CO_SNTL 9f0599d8-81f3-4ab5-b275-48a6ddaaae5b\ncollecting  9f0599d8-81f3-4ab5-b275-48a6ddaaae5b\nSNOTEL:1033_CO_SNTL 86257c69-a8f1-43b1-9e07-73129e2c3fbc\ncollecting  86257c69-a8f1-43b1-9e07-73129e2c3fbc\nSNOTEL:1034_NM_SNTL 43be1328-02b0-4cc1-8e9b-75842908cee3\ncollecting  43be1328-02b0-4cc1-8e9b-75842908cee3\nSNOTEL:1039_UT_SNTL eeb0a123-9482-4946-ab3f-9e63541cb655\ncollecting  eeb0a123-9482-4946-ab3f-9e63541cb655\nSNOTEL:1040_CO_SNTL f62e6b4d-7f9d-4139-bac4-59f084fb09cd\ncollecting  f62e6b4d-7f9d-4139-bac4-59f084fb09cd\nSNOTEL:1043_WA_SNTL c59f438c-f00a-476a-938e-efd828e0d083\ncollecting  c59f438c-f00a-476a-938e-efd828e0d083\nSNOTEL:1044_OR_SNTL 7acd0d51-ff30-42a3-9338-590432bd0e43\ncollecting  7acd0d51-ff30-42a3-9338-590432bd0e43\nSNOTEL:1045_WY_SNTL 3b5bfd37-070c-4ee9-a470-c9338851e270\ncollecting  3b5bfd37-070c-4ee9-a470-c9338851e270\nSNOTEL:1046_WY_SNTL 3b5bfd37-070c-4ee9-a470-c9338851e270\ncollecting  3b5bfd37-070c-4ee9-a470-c9338851e270\nSNOTEL:1048_NM_SNTL 43be1328-02b0-4cc1-8e9b-75842908cee3\ncollecting  43be1328-02b0-4cc1-8e9b-75842908cee3\nSNOTEL:1050_CA_SNTL d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nSNOTEL:1051_CA_SNTL c89dc6ca-6d69-41ce-954d-b51f64aaacb1\ncollecting  c89dc6ca-6d69-41ce-954d-b51f64aaacb1\nSNOTEL:1052_CA_SNTL 74f8c8bc-2f60-4232-b447-43459d5d22f0\ncollecting  74f8c8bc-2f60-4232-b447-43459d5d22f0\nSNOTEL:1053_ID_SNTL 2f5c1968-2c34-4539-a9f4-38298d0de925\ncollecting  2f5c1968-2c34-4539-a9f4-38298d0de925\nSNOTEL:1054_UT_SNTL 10162c55-772d-49d2-8b1b-b1f9c86254b2\ncollecting  10162c55-772d-49d2-8b1b-b1f9c86254b2\nSNOTEL:1058_CO_SNTL c340219b-307b-412b-9368-b50639bd372d\ncollecting  c340219b-307b-412b-9368-b50639bd372d\nSNOTEL:1061_CO_SNTL 02cf33c2-c8e2-48b9-bf72-92506e97e251\ncollecting  02cf33c2-c8e2-48b9-bf72-92506e97e251\nSNOTEL:1065_UT_SNTL 24cd85fa-6aee-4556-bb8a-b6696eb72a19\ncollecting  24cd85fa-6aee-4556-bb8a-b6696eb72a19\nSNOTEL:1066_UT_SNTL 24cd85fa-6aee-4556-bb8a-b6696eb72a19\ncollecting  24cd85fa-6aee-4556-bb8a-b6696eb72a19\nSNOTEL:1067_CA_SNTL c89dc6ca-6d69-41ce-954d-b51f64aaacb1\ncollecting  c89dc6ca-6d69-41ce-954d-b51f64aaacb1\nSNOTEL:1068_WA_SNTL bfda850c-3027-4e91-afcb-cca5e73e4a03\ncollecting  bfda850c-3027-4e91-afcb-cca5e73e4a03\nSNOTEL:1077_OR_SNTL 5e252b65-58dd-421f-a0db-3d4669bfb235\ncollecting  5e252b65-58dd-421f-a0db-3d4669bfb235\nSNOTEL:1079_OR_SNTL f78ea076-10a1-45dc-a848-c08e129c6a28\ncollecting  f78ea076-10a1-45dc-a848-c08e129c6a28\nSNOTEL:1082_WY_SNTL ce76ce00-c8b5-4597-8ca3-1ec9db795b50\ncollecting  ce76ce00-c8b5-4597-8ca3-1ec9db795b50\nSNOTEL:1084_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nSNOTEL:1085_WA_SNTL 9474e816-b673-4e6d-83e0-28c274945bef\ncollecting  9474e816-b673-4e6d-83e0-28c274945bef\nSNOTEL:1098_UT_SNTL 2222b7b3-f48b-4cea-90bf-8e7245d002ea\ncollecting  2222b7b3-f48b-4cea-90bf-8e7245d002ea\nSNOTEL:1099_UT_SNTL ad44deb7-e56d-47bd-8d64-7147493e0aee\ncollecting  ad44deb7-e56d-47bd-8d64-7147493e0aee\nSNOTEL:1100_CO_SNTL b99b0ffd-6fa9-482c-8511-f7b87e705d35\ncollecting  b99b0ffd-6fa9-482c-8511-f7b87e705d35\nSNOTEL:1101_CO_SNTL e833aad1-6da3-4413-b25e-b2ab5b2029c0\ncollecting  e833aad1-6da3-4413-b25e-b2ab5b2029c0\nSNOTEL:1104_WA_SNTL cdfc27f0-b990-45f7-bac6-7c674cd157ac\ncollecting  cdfc27f0-b990-45f7-bac6-7c674cd157ac\nSNOTEL:1105_MT_SNTL f46e7d90-a754-44a8-b262-63f5c401a0ab\ncollecting  f46e7d90-a754-44a8-b262-63f5c401a0ab\nSNOTEL:1107_WA_SNTL 0f46ad2b-4b1f-4232-8e46-be7122d53b86\ncollecting  0f46ad2b-4b1f-4232-8e46-be7122d53b86\nSNOTEL:1109_WA_SNTL cdfc27f0-b990-45f7-bac6-7c674cd157ac\ncollecting  cdfc27f0-b990-45f7-bac6-7c674cd157ac\nSNOTEL:1110_NV_SNTL 8ca1aaab-07de-4532-a99f-4ab8bce2f862\ncollecting  8ca1aaab-07de-4532-a99f-4ab8bce2f862\nSNOTEL:1111_NV_SNTL 8ca1aaab-07de-4532-a99f-4ab8bce2f862\ncollecting  8ca1aaab-07de-4532-a99f-4ab8bce2f862\nSNOTEL:1113_UT_SNTL 2222b7b3-f48b-4cea-90bf-8e7245d002ea\ncollecting  2222b7b3-f48b-4cea-90bf-8e7245d002ea\nSNOTEL:1114_UT_SNTL 2222b7b3-f48b-4cea-90bf-8e7245d002ea\ncollecting  2222b7b3-f48b-4cea-90bf-8e7245d002ea\nSNOTEL:1115_UT_SNTL 2222b7b3-f48b-4cea-90bf-8e7245d002ea\ncollecting  2222b7b3-f48b-4cea-90bf-8e7245d002ea\nSNOTEL:1119_WY_SNTL 8116acfb-8035-4d34-b9b9-b0af2c5697df\ncollecting  8116acfb-8035-4d34-b9b9-b0af2c5697df\nSNOTEL:1120_CO_SNTL f62e6b4d-7f9d-4139-bac4-59f084fb09cd\ncollecting  f62e6b4d-7f9d-4139-bac4-59f084fb09cd\nSNOTEL:1121_AZ_SNTL c0e85162-6ff4-401b-b01e-cc6d7a51eac0\ncollecting  c0e85162-6ff4-401b-b01e-cc6d7a51eac0\nSNOTEL:1122_CO_SNTL e4473542-1804-41c0-82b2-eaddc245845d\ncollecting  e4473542-1804-41c0-82b2-eaddc245845d\nSNOTEL:1123_CO_SNTL e4473542-1804-41c0-82b2-eaddc245845d\ncollecting  e4473542-1804-41c0-82b2-eaddc245845d\nSNOTEL:1124_CO_SNTL aa0d6340-c817-48c9-8727-8d3457606381\ncollecting  aa0d6340-c817-48c9-8727-8d3457606381\nSNOTEL:1127_AZ_SNTL 1135e377-22e6-4290-b4cd-e6739de7fd8a\ncollecting  1135e377-22e6-4290-b4cd-e6739de7fd8a\nSNOTEL:1128_CO_SNTL f25cdbec-2f14-42c5-a6ef-a60f3a90caff\ncollecting  f25cdbec-2f14-42c5-a6ef-a60f3a90caff\nSNOTEL:1129_WA_SNTL 06ec1554-a0ea-41cf-85f8-43f4b48c7599\ncollecting  06ec1554-a0ea-41cf-85f8-43f4b48c7599\nSNOTEL:1131_WY_SNTL 02c3ec4a-8de4-4284-9ec1-5a942d3d098e\ncollecting  02c3ec4a-8de4-4284-9ec1-5a942d3d098e\nSNOTEL:1132_WY_SNTL c5a82752-3e4b-43ec-8011-9111b9bfcb89\ncollecting  c5a82752-3e4b-43ec-8011-9111b9bfcb89\nSNOTEL:1133_WY_SNTL 679fe096-5475-4d4d-b0f8-81e32de889aa\ncollecting  679fe096-5475-4d4d-b0f8-81e32de889aa\nSNOTEL:1134_WY_SNTL 990e5974-9c60-4c9a-ba23-ddce13971178\ncollecting  990e5974-9c60-4c9a-ba23-ddce13971178\nSNOTEL:1135_UT_SNTL 064d7f3e-8bbd-49cd-b360-5c4590a19b9e\ncollecting  064d7f3e-8bbd-49cd-b360-5c4590a19b9e\nSNOTEL:1136_NV_SNTL 875622b7-5253-43d2-8e0f-348767860eb9\ncollecting  875622b7-5253-43d2-8e0f-348767860eb9\nSNOTEL:1138_NM_SNTL eb1d889a-c427-49e1-95a1-fa6577002c9b\ncollecting  eb1d889a-c427-49e1-95a1-fa6577002c9b\nSNOTEL:1139_AZ_SNTL a2588440-600e-41da-b2b9-1f5632ecdef6\ncollecting  a2588440-600e-41da-b2b9-1f5632ecdef6\nSNOTEL:1140_AZ_SNTL 972ab3b1-7445-4f57-a1a1-c3be4c257869\ncollecting  972ab3b1-7445-4f57-a1a1-c3be4c257869\nSNOTEL:1141_CO_SNTL 09f879b9-4378-479e-949b-cdc3bec8f59f\ncollecting  09f879b9-4378-479e-949b-cdc3bec8f59f\nSNOTEL:1143_AZ_SNTL e925f8e6-6eee-4fa7-9034-41eb9917df5e\ncollecting  e925f8e6-6eee-4fa7-9034-41eb9917df5e\nSNOTEL:1144_MT_SNTL d37ccc2e-7127-48ec-9425-2e77681c3635\ncollecting  d37ccc2e-7127-48ec-9425-2e77681c3635\nSNOTEL:1146_UT_SNTL ba4b2f3f-c8e3-4535-9781-426e4f77ba4c\ncollecting  ba4b2f3f-c8e3-4535-9781-426e4f77ba4c\nSNOTEL:1147_NV_SNTL 38793f95-324b-4f01-b1a7-45e1c9353bc1\ncollecting  38793f95-324b-4f01-b1a7-45e1c9353bc1\nSNOTEL:1148_UT_SNTL 55d3e9a6-e153-43c3-a66c-cd60711ff4a9\ncollecting  55d3e9a6-e153-43c3-a66c-cd60711ff4a9\nSNOTEL:1149_UT_SNTL ad44deb7-e56d-47bd-8d64-7147493e0aee\ncollecting  ad44deb7-e56d-47bd-8d64-7147493e0aee\nSNOTEL:1150_NV_SNTL 38793f95-324b-4f01-b1a7-45e1c9353bc1\ncollecting  38793f95-324b-4f01-b1a7-45e1c9353bc1\nSNOTEL:1152_NV_SNTL 38793f95-324b-4f01-b1a7-45e1c9353bc1\ncollecting  38793f95-324b-4f01-b1a7-45e1c9353bc1\nSNOTEL:1154_UT_SNTL 55d3e9a6-e153-43c3-a66c-cd60711ff4a9\ncollecting  55d3e9a6-e153-43c3-a66c-cd60711ff4a9\nSNOTEL:1155_NV_SNTL 38793f95-324b-4f01-b1a7-45e1c9353bc1\ncollecting  38793f95-324b-4f01-b1a7-45e1c9353bc1\nSNOTEL:1156_UT_SNTL 7b636fe2-1760-45c5-afce-505f2e927163\ncollecting  7b636fe2-1760-45c5-afce-505f2e927163\nSNOTEL:1159_WA_SNTL dc31c331-837b-4b59-b184-051321e9489c\ncollecting  dc31c331-837b-4b59-b184-051321e9489c\nSNOTEL:1160_CO_SNTL 12bde9ee-0e0a-49ac-ab19-b410adb61b3c\ncollecting  12bde9ee-0e0a-49ac-ab19-b410adb61b3c\nSNOTEL:1161_CO_SNTL 9f0599d8-81f3-4ab5-b275-48a6ddaaae5b\ncollecting  9f0599d8-81f3-4ab5-b275-48a6ddaaae5b\nSNOTEL:1162_UT_SNTL c0568d62-49c7-4d9f-beba-ac0fb3e064c5\ncollecting  c0568d62-49c7-4d9f-beba-ac0fb3e064c5\nSNOTEL:1166_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nSNOTEL:1167_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nSNOTEL:1168_NM_SNTL e3473791-6153-49bc-a2ed-0b1e3e243942\ncollecting  e3473791-6153-49bc-a2ed-0b1e3e243942\nSNOTEL:1169_NM_SNTL e3473791-6153-49bc-a2ed-0b1e3e243942\ncollecting  e3473791-6153-49bc-a2ed-0b1e3e243942\nSNOTEL:1170_NM_SNTL e3473791-6153-49bc-a2ed-0b1e3e243942\ncollecting  e3473791-6153-49bc-a2ed-0b1e3e243942\nSNOTEL:1171_WA_SNTL 47e625fa-e2df-43ce-84dd-8ac21fdda75a\ncollecting  47e625fa-e2df-43ce-84dd-8ac21fdda75a\nSNOTEL:1172_NM_SNTL 674e34ce-8b77-422b-ab14-c6c3a0183e39\ncollecting  674e34ce-8b77-422b-ab14-c6c3a0183e39\nSNOTEL:1184_UT_SNTL 9813294e-a28e-45c0-976d-a6fa65d87927\ncollecting  9813294e-a28e-45c0-976d-a6fa65d87927\nSNOTEL:1185_CO_SNTL 548ff935-a421-4f4c-8eef-0bb19ed6c5f8\ncollecting  548ff935-a421-4f4c-8eef-0bb19ed6c5f8\nSNOTEL:1186_CO_SNTL cad51334-b3af-4c23-85c3-451c3447560a\ncollecting  cad51334-b3af-4c23-85c3-451c3447560a\nSNOTEL:1187_CO_SNTL f9f7132d-56a2-43e2-baba-312f34dbaeed\ncollecting  f9f7132d-56a2-43e2-baba-312f34dbaeed\nSNOTEL:1192_UT_SNTL a28a3caf-eea2-414f-8003-62ac82daaafa\ncollecting  a28a3caf-eea2-414f-8003-62ac82daaafa\nSNOTEL:1195_NV_SNTL f1f17cee-3fca-44bc-8974-b72d5f995a4a\ncollecting  f1f17cee-3fca-44bc-8974-b72d5f995a4a\nSNOTEL:1196_WY_SNTL 14c19b34-6359-4d3f-865e-0b9852a0e958\ncollecting  14c19b34-6359-4d3f-865e-0b9852a0e958\nSNOTEL:1197_UT_SNTL 55d3e9a6-e153-43c3-a66c-cd60711ff4a9\ncollecting  55d3e9a6-e153-43c3-a66c-cd60711ff4a9\nSNOTEL:1214_UT_SNTL 93b8483d-a510-42ff-865e-33d5a8784dc4\ncollecting  93b8483d-a510-42ff-865e-33d5a8784dc4\nSNOTEL:1215_UT_SNTL 20b97bae-60d6-466d-aca9-334d9b2d63b6\ncollecting  20b97bae-60d6-466d-aca9-334d9b2d63b6\nSNOTEL:1216_UT_SNTL 0a820e12-033b-45d6-9ef9-d70f4c5e5b63\ncollecting  0a820e12-033b-45d6-9ef9-d70f4c5e5b63\nSNOTEL:1222_UT_SNTL ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\ncollecting  ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\nSNOTEL:1223_UT_SNTL cfe58efd-ce2a-495a-90cd-6826f704ebee\ncollecting  cfe58efd-ce2a-495a-90cd-6826f704ebee\nSNOTEL:1224_UT_SNTL 9813294e-a28e-45c0-976d-a6fa65d87927\ncollecting  9813294e-a28e-45c0-976d-a6fa65d87927\nSNOTEL:1225_UT_SNTL 7bc3c413-4709-4ddd-a2ad-99f6cad9436c\ncollecting  7bc3c413-4709-4ddd-a2ad-99f6cad9436c\nSNOTEL:1226_UT_SNTL ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\ncollecting  ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\nSNOTEL:1227_UT_SNTL ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\ncollecting  ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\nSNOTEL:1228_UT_SNTL 9813294e-a28e-45c0-976d-a6fa65d87927\ncollecting  9813294e-a28e-45c0-976d-a6fa65d87927\nSNOTEL:1231_WA_SNTL 06ec1554-a0ea-41cf-85f8-43f4b48c7599\ncollecting  06ec1554-a0ea-41cf-85f8-43f4b48c7599\nSNOTEL:1236_UT_SNTL 19b5e6ce-c1a0-4cce-85f5-248c9f1abb6e\ncollecting  19b5e6ce-c1a0-4cce-85f5-248c9f1abb6e\nSNOTEL:1242_NV_SNTL d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nSNOTEL:1243_NV_SNTL a5080351-033f-4cfa-ad27-019fc84e052c\ncollecting  a5080351-033f-4cfa-ad27-019fc84e052c\nSNOTEL:1244_NV_SNTL 0efc68ba-5786-4c54-8028-e6f92efa6757\ncollecting  0efc68ba-5786-4c54-8028-e6f92efa6757\nSNOTEL:1247_UT_SNTL 93b8483d-a510-42ff-865e-33d5a8784dc4\ncollecting  93b8483d-a510-42ff-865e-33d5a8784dc4\nSNOTEL:1248_UT_SNTL 55d3e9a6-e153-43c3-a66c-cd60711ff4a9\ncollecting  55d3e9a6-e153-43c3-a66c-cd60711ff4a9\nSNOTEL:1249_UT_SNTL ad44deb7-e56d-47bd-8d64-7147493e0aee\ncollecting  ad44deb7-e56d-47bd-8d64-7147493e0aee\nSNOTEL:1251_CO_SNTL f9f7132d-56a2-43e2-baba-312f34dbaeed\ncollecting  f9f7132d-56a2-43e2-baba-312f34dbaeed\nSNOTEL:1252_CO_SNTL 8116acfb-8035-4d34-b9b9-b0af2c5697df\ncollecting  8116acfb-8035-4d34-b9b9-b0af2c5697df\nSNOTEL:1254_NM_SNTL 9c43edf0-541f-4dbb-9fe1-42cc83d453bd\ncollecting  9c43edf0-541f-4dbb-9fe1-42cc83d453bd\nSNOTEL:1256_WA_SNTL c59f438c-f00a-476a-938e-efd828e0d083\ncollecting  c59f438c-f00a-476a-938e-efd828e0d083\nSNOTEL:1257_WA_SNTL 2f266b81-aad3-4c26-ac69-1bd04a208bf7\ncollecting  2f266b81-aad3-4c26-ac69-1bd04a208bf7\nSNOTEL:1258_CA_SNTL 76b55900-eb3d-4d25-a538-f74302ffe72d\ncollecting  76b55900-eb3d-4d25-a538-f74302ffe72d\nSNOTEL:1259_WA_SNTL dc31c331-837b-4b59-b184-051321e9489c\ncollecting  dc31c331-837b-4b59-b184-051321e9489c\nSNOTEL:1261_UT_SNTL ad44deb7-e56d-47bd-8d64-7147493e0aee\ncollecting  ad44deb7-e56d-47bd-8d64-7147493e0aee\nSNOTEL:1262_NV_SNTL 875622b7-5253-43d2-8e0f-348767860eb9\ncollecting  875622b7-5253-43d2-8e0f-348767860eb9\nSNOTEL:1263_WA_SNTL cdfc27f0-b990-45f7-bac6-7c674cd157ac\ncollecting  cdfc27f0-b990-45f7-bac6-7c674cd157ac\nSNOTEL:1269_UT_SNTL ad44deb7-e56d-47bd-8d64-7147493e0aee\ncollecting  ad44deb7-e56d-47bd-8d64-7147493e0aee\nSNOTEL:1271_AZ_SNTL f6a782f0-4b17-4989-815c-2398b77b09dd\ncollecting  f6a782f0-4b17-4989-815c-2398b77b09dd\nSNOTEL:1272_NV_SNTL 5308a803-69e6-43cd-89db-66e93f9f83af\ncollecting  5308a803-69e6-43cd-89db-66e93f9f83af\nSNOTEL:1277_CA_SNTL 147d5eb4-e574-47e4-994a-8a2908c06050\ncollecting  147d5eb4-e574-47e4-994a-8a2908c06050\nSNOTEL:1278_UT_SNTL 7b636fe2-1760-45c5-afce-505f2e927163\ncollecting  7b636fe2-1760-45c5-afce-505f2e927163\nSNOTEL:1280_UT_SNTL ba4b2f3f-c8e3-4535-9781-426e4f77ba4c\ncollecting  ba4b2f3f-c8e3-4535-9781-426e4f77ba4c\nSNOTEL:1286_MT_SNTL cacaa17b-0b1b-4fe2-a4c1-7728e6c154c1\ncollecting  cacaa17b-0b1b-4fe2-a4c1-7728e6c154c1\nSNOTEL:1287_MT_SNTL e9759e79-461c-425e-af17-0a88be1a441f\ncollecting  e9759e79-461c-425e-af17-0a88be1a441f\nSNOTEL:2029_ID_SNTL 0cda0c4a-405b-4e16-8922-964190929d80\ncollecting  0cda0c4a-405b-4e16-8922-964190929d80\nSNOTEL:301_CA_SNTL 76b55900-eb3d-4d25-a538-f74302ffe72d\ncollecting  76b55900-eb3d-4d25-a538-f74302ffe72d\nSNOTEL:302_OR_SNTL c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\ncollecting  c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\nSNOTEL:303_CO_SNTL 2ca6a37f-67f5-4905-864b-ddf98d956ebb\ncollecting  2ca6a37f-67f5-4905-864b-ddf98d956ebb\nSNOTEL:304_OR_SNTL 78ccacb3-4eb9-4d95-b244-f3a709e39fd1\ncollecting  78ccacb3-4eb9-4d95-b244-f3a709e39fd1\nSNOTEL:305_CO_SNTL cad51334-b3af-4c23-85c3-451c3447560a\ncollecting  cad51334-b3af-4c23-85c3-451c3447560a\nSNOTEL:306_ID_SNTL 36b98590-a7e6-4e00-8c7d-f0f3d25bafec\ncollecting  36b98590-a7e6-4e00-8c7d-f0f3d25bafec\nSNOTEL:308_AZ_SNTL 972ab3b1-7445-4f57-a1a1-c3be4c257869\ncollecting  972ab3b1-7445-4f57-a1a1-c3be4c257869\nSNOTEL:311_MT_SNTL 0b9543d3-3cf9-4f28-b8eb-fd22c1956153\ncollecting  0b9543d3-3cf9-4f28-b8eb-fd22c1956153\nSNOTEL:312_ID_SNTL 36b98590-a7e6-4e00-8c7d-f0f3d25bafec\ncollecting  36b98590-a7e6-4e00-8c7d-f0f3d25bafec\nSNOTEL:313_MT_SNTL 4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\ncollecting  4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\nSNOTEL:316_NM_SNTL 674e34ce-8b77-422b-ab14-c6c3a0183e39\ncollecting  674e34ce-8b77-422b-ab14-c6c3a0183e39\nSNOTEL:317_WY_SNTL 8116acfb-8035-4d34-b9b9-b0af2c5697df\ncollecting  8116acfb-8035-4d34-b9b9-b0af2c5697df\nSNOTEL:319_ID_SNTL c66f40ed-f72e-4012-991c-1f3726e5c8ad\ncollecting  c66f40ed-f72e-4012-991c-1f3726e5c8ad\nSNOTEL:320_ID_SNTL af0463d4-f20f-4d13-bd0f-5834e2e8717b\ncollecting  af0463d4-f20f-4d13-bd0f-5834e2e8717b\nSNOTEL:321_NV_SNTL 5308a803-69e6-43cd-89db-66e93f9f83af\ncollecting  5308a803-69e6-43cd-89db-66e93f9f83af\nSNOTEL:322_CO_SNTL f9f7132d-56a2-43e2-baba-312f34dbaeed\ncollecting  f9f7132d-56a2-43e2-baba-312f34dbaeed\nSNOTEL:324_ID_SNTL c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\ncollecting  c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\nSNOTEL:325_WY_SNTL c5a82752-3e4b-43ec-8011-9111b9bfcb89\ncollecting  c5a82752-3e4b-43ec-8011-9111b9bfcb89\nSNOTEL:326_WY_SNTL e776d9b6-2180-4f50-90bf-77f7b920fc3b\ncollecting  e776d9b6-2180-4f50-90bf-77f7b920fc3b\nSNOTEL:327_CO_SNTL 69d48a07-3007-4b3f-bec6-c097509a56d9\ncollecting  69d48a07-3007-4b3f-bec6-c097509a56d9\nSNOTEL:328_MT_SNTL 10a46ea0-13da-4cef-9aa6-ff48aa46881c\ncollecting  10a46ea0-13da-4cef-9aa6-ff48aa46881c\nSNOTEL:329_UT_SNTL 9813294e-a28e-45c0-976d-a6fa65d87927\ncollecting  9813294e-a28e-45c0-976d-a6fa65d87927\nSNOTEL:330_UT_SNTL 7bc3c413-4709-4ddd-a2ad-99f6cad9436c\ncollecting  7bc3c413-4709-4ddd-a2ad-99f6cad9436c\nSNOTEL:331_OR_SNTL 631ed3c9-7863-4e7c-86fa-4bfb043f2851\ncollecting  631ed3c9-7863-4e7c-86fa-4bfb043f2851\nSNOTEL:332_UT_SNTL b59438b9-aadc-4899-9afb-fe71974c5c3a\ncollecting  b59438b9-aadc-4899-9afb-fe71974c5c3a\nSNOTEL:333_UT_SNTL b59438b9-aadc-4899-9afb-fe71974c5c3a\ncollecting  b59438b9-aadc-4899-9afb-fe71974c5c3a\nSNOTEL:334_NV_SNTL 38793f95-324b-4f01-b1a7-45e1c9353bc1\ncollecting  38793f95-324b-4f01-b1a7-45e1c9353bc1\nSNOTEL:335_CO_SNTL cad51334-b3af-4c23-85c3-451c3447560a\ncollecting  cad51334-b3af-4c23-85c3-451c3447560a\nSNOTEL:336_NV_SNTL 03428fd9-01cc-4a57-ab6e-f4e8f265c094\ncollecting  03428fd9-01cc-4a57-ab6e-f4e8f265c094\nSNOTEL:337_NV_SNTL f1f17cee-3fca-44bc-8974-b72d5f995a4a\ncollecting  f1f17cee-3fca-44bc-8974-b72d5f995a4a\nSNOTEL:338_ID_SNTL c66f40ed-f72e-4012-991c-1f3726e5c8ad\ncollecting  c66f40ed-f72e-4012-991c-1f3726e5c8ad\nSNOTEL:339_UT_SNTL 7b636fe2-1760-45c5-afce-505f2e927163\ncollecting  7b636fe2-1760-45c5-afce-505f2e927163\nSNOTEL:340_NV_SNTL d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nSNOTEL:341_OR_SNTL dd7f64aa-3556-409b-bc86-71dc28b6fd45\ncollecting  dd7f64aa-3556-409b-bc86-71dc28b6fd45\nSNOTEL:342_WY_SNTL 990e5974-9c60-4c9a-ba23-ddce13971178\ncollecting  990e5974-9c60-4c9a-ba23-ddce13971178\nSNOTEL:344_OR_SNTL 71f41513-6ac9-4d2e-97eb-6cd3b84f7043\ncollecting  71f41513-6ac9-4d2e-97eb-6cd3b84f7043\nSNOTEL:345_CO_SNTL d64197fc-0723-4c61-9ce8-ff2554e24154\ncollecting  d64197fc-0723-4c61-9ce8-ff2554e24154\nSNOTEL:346_MT_SNTL 89a7b0ef-1ec8-490f-9207-c93aa57a147f\ncollecting  89a7b0ef-1ec8-490f-9207-c93aa57a147f\nSNOTEL:347_MT_SNTL b1936012-0d31-4b92-8d60-c24903b2e569\ncollecting  b1936012-0d31-4b92-8d60-c24903b2e569\nSNOTEL:348_UT_SNTL 9813294e-a28e-45c0-976d-a6fa65d87927\ncollecting  9813294e-a28e-45c0-976d-a6fa65d87927\nSNOTEL:349_MT_SNTL 4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\ncollecting  4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\nSNOTEL:350_WY_SNTL 333458b2-c1a9-47a3-8ae0-92053ad28ae3\ncollecting  333458b2-c1a9-47a3-8ae0-92053ad28ae3\nSNOTEL:354_SD_SNTL ab89875f-3b86-4c6a-8d66-767017570dfc\ncollecting  ab89875f-3b86-4c6a-8d66-767017570dfc\nSNOTEL:355_MT_SNTL 6de38d5b-ccce-4ff2-90ed-1c7035491518\ncollecting  6de38d5b-ccce-4ff2-90ed-1c7035491518\nSNOTEL:356_CA_SNTL c89dc6ca-6d69-41ce-954d-b51f64aaacb1\ncollecting  c89dc6ca-6d69-41ce-954d-b51f64aaacb1\nSNOTEL:358_WY_SNTL 6bc3e088-5139-43f2-9b2a-ade1cedeae47\ncollecting  6bc3e088-5139-43f2-9b2a-ade1cedeae47\nSNOTEL:360_MT_SNTL 517aefce-a617-4251-acb9-c5faf0b7fdf3\ncollecting  517aefce-a617-4251-acb9-c5faf0b7fdf3\nSNOTEL:363_MT_SNTL f46e7d90-a754-44a8-b262-63f5c401a0ab\ncollecting  f46e7d90-a754-44a8-b262-63f5c401a0ab\nSNOTEL:364_UT_SNTL 7b636fe2-1760-45c5-afce-505f2e927163\ncollecting  7b636fe2-1760-45c5-afce-505f2e927163\nSNOTEL:365_MT_SNTL e467a17f-a729-4938-87a1-ac25157eed63\ncollecting  e467a17f-a729-4938-87a1-ac25157eed63\nSNOTEL:366_UT_SNTL eeb0a123-9482-4946-ab3f-9e63541cb655\ncollecting  eeb0a123-9482-4946-ab3f-9e63541cb655\nSNOTEL:368_UT_SNTL a28a3caf-eea2-414f-8003-62ac82daaafa\ncollecting  a28a3caf-eea2-414f-8003-62ac82daaafa\nSNOTEL:370_ID_SNTL c66f40ed-f72e-4012-991c-1f3726e5c8ad\ncollecting  c66f40ed-f72e-4012-991c-1f3726e5c8ad\nSNOTEL:373_NV_SNTL 42a21eb9-10fd-4986-825b-9ea55ce13935\ncollecting  42a21eb9-10fd-4986-825b-9ea55ce13935\nSNOTEL:375_WA_SNTL bb65d7a1-a5d5-4c89-9ef9-f0f1db06cc58\ncollecting  bb65d7a1-a5d5-4c89-9ef9-f0f1db06cc58\nSNOTEL:376_WA_SNTL c59f438c-f00a-476a-938e-efd828e0d083\ncollecting  c59f438c-f00a-476a-938e-efd828e0d083\nSNOTEL:377_WY_SNTL 6bc3e088-5139-43f2-9b2a-ade1cedeae47\ncollecting  6bc3e088-5139-43f2-9b2a-ade1cedeae47\nSNOTEL:379_WY_SNTL 692c41af-2210-4dd6-916d-c99e76807447\ncollecting  692c41af-2210-4dd6-916d-c99e76807447\nSNOTEL:380_CO_SNTL 6662f7d0-4afc-4fed-b930-e0408ee10bc7\ncollecting  6662f7d0-4afc-4fed-b930-e0408ee10bc7\nSNOTEL:381_MT_SNTL 4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\ncollecting  4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\nSNOTEL:385_MT_SNTL b1936012-0d31-4b92-8d60-c24903b2e569\ncollecting  b1936012-0d31-4b92-8d60-c24903b2e569\nSNOTEL:386_CO_SNTL fb32a838-cf3b-47a2-9e22-395a730f4f4f\ncollecting  fb32a838-cf3b-47a2-9e22-395a730f4f4f\nSNOTEL:387_CO_SNTL fb32a838-cf3b-47a2-9e22-395a730f4f4f\ncollecting  fb32a838-cf3b-47a2-9e22-395a730f4f4f\nSNOTEL:388_OR_SNTL ea185683-4427-44c3-84e1-706cf16781ce\ncollecting  ea185683-4427-44c3-84e1-706cf16781ce\nSNOTEL:389_WY_SNTL ab89875f-3b86-4c6a-8d66-767017570dfc\ncollecting  ab89875f-3b86-4c6a-8d66-767017570dfc\nSNOTEL:390_UT_SNTL 55d3e9a6-e153-43c3-a66c-cd60711ff4a9\ncollecting  55d3e9a6-e153-43c3-a66c-cd60711ff4a9\nSNOTEL:392_UT_SNTL 064d7f3e-8bbd-49cd-b360-5c4590a19b9e\ncollecting  064d7f3e-8bbd-49cd-b360-5c4590a19b9e\nSNOTEL:393_UT_SNTL 064d7f3e-8bbd-49cd-b360-5c4590a19b9e\ncollecting  064d7f3e-8bbd-49cd-b360-5c4590a19b9e\nSNOTEL:396_UT_SNTL 50d7ad3f-57f0-45e1-911d-b0efff9deb8f\ncollecting  50d7ad3f-57f0-45e1-911d-b0efff9deb8f\nSNOTEL:398_OR_SNTL 8edd6091-10fa-4617-8dc8-e0ce1d5b84f7\ncollecting  8edd6091-10fa-4617-8dc8-e0ce1d5b84f7\nSNOTEL:399_UT_SNTL 0a820e12-033b-45d6-9ef9-d70f4c5e5b63\ncollecting  0a820e12-033b-45d6-9ef9-d70f4c5e5b63\nSNOTEL:401_OR_SNTL 8edd6091-10fa-4617-8dc8-e0ce1d5b84f7\ncollecting  8edd6091-10fa-4617-8dc8-e0ce1d5b84f7\nSNOTEL:402_WY_SNTL 02c3ec4a-8de4-4284-9ec1-5a942d3d098e\ncollecting  02c3ec4a-8de4-4284-9ec1-5a942d3d098e\nSNOTEL:403_MT_SNTL 05938de0-622b-4e0a-a82b-2a128e5be0b0\ncollecting  05938de0-622b-4e0a-a82b-2a128e5be0b0\nSNOTEL:406_OR_SNTL 71f41513-6ac9-4d2e-97eb-6cd3b84f7043\ncollecting  71f41513-6ac9-4d2e-97eb-6cd3b84f7043\nSNOTEL:407_MT_SNTL e776d9b6-2180-4f50-90bf-77f7b920fc3b\ncollecting  e776d9b6-2180-4f50-90bf-77f7b920fc3b\nSNOTEL:409_CO_SNTL a4339b9a-871e-44c2-9bb4-bcbfe9d590d7\ncollecting  a4339b9a-871e-44c2-9bb4-bcbfe9d590d7\nSNOTEL:410_MT_SNTL 4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\ncollecting  4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\nSNOTEL:411_ID_SNTL 440d7558-67fd-43b4-826b-26d02663f871\ncollecting  440d7558-67fd-43b4-826b-26d02663f871\nSNOTEL:412_CO_SNTL f9f7132d-56a2-43e2-baba-312f34dbaeed\ncollecting  f9f7132d-56a2-43e2-baba-312f34dbaeed\nSNOTEL:413_MT_SNTL 99a2d4a9-63a0-43a7-976d-2a1ed822186d\ncollecting  99a2d4a9-63a0-43a7-976d-2a1ed822186d\nSNOTEL:414_MT_SNTL 99a2d4a9-63a0-43a7-976d-2a1ed822186d\ncollecting  99a2d4a9-63a0-43a7-976d-2a1ed822186d\nSNOTEL:415_CO_SNTL be57eab6-a495-427f-8a36-9d118c03e7d8\ncollecting  be57eab6-a495-427f-8a36-9d118c03e7d8\nSNOTEL:416_AZ_SNTL 1135e377-22e6-4290-b4cd-e6739de7fd8a\ncollecting  1135e377-22e6-4290-b4cd-e6739de7fd8a\nSNOTEL:417_NV_SNTL a5080351-033f-4cfa-ad27-019fc84e052c\ncollecting  a5080351-033f-4cfa-ad27-019fc84e052c\nSNOTEL:418_WA_SNTL 9474e816-b673-4e6d-83e0-28c274945bef\ncollecting  9474e816-b673-4e6d-83e0-28c274945bef\nSNOTEL:419_WY_SNTL df7e906a-07f3-4a46-b9a5-0200427c26f7\ncollecting  df7e906a-07f3-4a46-b9a5-0200427c26f7\nSNOTEL:420_WA_SNTL 360f1bcc-aa60-4052-a18a-b33da5745ff4\ncollecting  360f1bcc-aa60-4052-a18a-b33da5745ff4\nSNOTEL:422_OR_SNTL e27143af-fdc0-4f6f-8a28-f57b78da75dc\ncollecting  e27143af-fdc0-4f6f-8a28-f57b78da75dc\nSNOTEL:423_ID_SNTL 36b98590-a7e6-4e00-8c7d-f0f3d25bafec\ncollecting  36b98590-a7e6-4e00-8c7d-f0f3d25bafec\nSNOTEL:424_ID_SNTL 10a46ea0-13da-4cef-9aa6-ff48aa46881c\ncollecting  10a46ea0-13da-4cef-9aa6-ff48aa46881c\nSNOTEL:426_CO_SNTL 02cf33c2-c8e2-48b9-bf72-92506e97e251\ncollecting  02cf33c2-c8e2-48b9-bf72-92506e97e251\nSNOTEL:428_CA_SNTL 51ebe834-adf4-474e-871e-28ebca2bd0cc\ncollecting  51ebe834-adf4-474e-871e-28ebca2bd0cc\nSNOTEL:430_CO_SNTL 2ca6a37f-67f5-4905-864b-ddf98d956ebb\ncollecting  2ca6a37f-67f5-4905-864b-ddf98d956ebb\nSNOTEL:431_CO_SNTL 0623939d-b33f-41cb-ade2-3c4a776de49a\ncollecting  0623939d-b33f-41cb-ade2-3c4a776de49a\nSNOTEL:432_UT_SNTL cfe58efd-ce2a-495a-90cd-6826f704ebee\ncollecting  cfe58efd-ce2a-495a-90cd-6826f704ebee\nSNOTEL:433_MT_SNTL 4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\ncollecting  4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\nSNOTEL:434_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nSNOTEL:436_MT_SNTL cacaa17b-0b1b-4fe2-a4c1-7728e6c154c1\ncollecting  cacaa17b-0b1b-4fe2-a4c1-7728e6c154c1\nSNOTEL:437_MT_SNTL 517aefce-a617-4251-acb9-c5faf0b7fdf3\ncollecting  517aefce-a617-4251-acb9-c5faf0b7fdf3\nSNOTEL:438_CO_SNTL 9f0599d8-81f3-4ab5-b275-48a6ddaaae5b\ncollecting  9f0599d8-81f3-4ab5-b275-48a6ddaaae5b\nSNOTEL:439_ID_SNTL 36b98590-a7e6-4e00-8c7d-f0f3d25bafec\ncollecting  36b98590-a7e6-4e00-8c7d-f0f3d25bafec\nSNOTEL:444_UT_SNTL 9813294e-a28e-45c0-976d-a6fa65d87927\ncollecting  9813294e-a28e-45c0-976d-a6fa65d87927\nSNOTEL:448_MT_SNTL 05938de0-622b-4e0a-a82b-2a128e5be0b0\ncollecting  05938de0-622b-4e0a-a82b-2a128e5be0b0\nSNOTEL:449_WY_SNTL 8116acfb-8035-4d34-b9b9-b0af2c5697df\ncollecting  8116acfb-8035-4d34-b9b9-b0af2c5697df\nSNOTEL:450_ID_SNTL 695c7749-a3b8-4158-bd14-59d1f2c3e736\ncollecting  695c7749-a3b8-4158-bd14-59d1f2c3e736\nSNOTEL:451_WY_SNTL 02c3ec4a-8de4-4284-9ec1-5a942d3d098e\ncollecting  02c3ec4a-8de4-4284-9ec1-5a942d3d098e\nSNOTEL:452_UT_SNTL ad44deb7-e56d-47bd-8d64-7147493e0aee\ncollecting  ad44deb7-e56d-47bd-8d64-7147493e0aee\nSNOTEL:455_UT_SNTL b59438b9-aadc-4899-9afb-fe71974c5c3a\ncollecting  b59438b9-aadc-4899-9afb-fe71974c5c3a\nSNOTEL:457_CO_SNTL 02cf33c2-c8e2-48b9-bf72-92506e97e251\ncollecting  02cf33c2-c8e2-48b9-bf72-92506e97e251\nSNOTEL:458_MT_SNTL dca30f20-582e-40ef-be6d-aa7858be4baa\ncollecting  dca30f20-582e-40ef-be6d-aa7858be4baa\nSNOTEL:460_WY_SNTL 695bed09-0ad9-406e-b489-69408adeea06\ncollecting  695bed09-0ad9-406e-b489-69408adeea06\nSNOTEL:462_CA_SNTL 962f6718-ce02-4d13-b28c-e159d1adc2d4\ncollecting  962f6718-ce02-4d13-b28c-e159d1adc2d4\nSNOTEL:463_CA_SNTL f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nSNOTEL:464_OR_SNTL 631ed3c9-7863-4e7c-86fa-4bfb043f2851\ncollecting  631ed3c9-7863-4e7c-86fa-4bfb043f2851\nSNOTEL:465_CO_SNTL d10a90c7-3db0-43c6-b04b-fe8b4c3f206e\ncollecting  d10a90c7-3db0-43c6-b04b-fe8b4c3f206e\nSNOTEL:466_ID_SNTL b1077b69-4b02-458e-8a4b-e68695ac534f\ncollecting  b1077b69-4b02-458e-8a4b-e68695ac534f\nSNOTEL:467_CO_SNTL 86257c69-a8f1-43b1-9e07-73129e2c3fbc\ncollecting  86257c69-a8f1-43b1-9e07-73129e2c3fbc\nSNOTEL:470_OR_SNTL e27143af-fdc0-4f6f-8a28-f57b78da75dc\ncollecting  e27143af-fdc0-4f6f-8a28-f57b78da75dc\nSNOTEL:472_WY_SNTL e776d9b6-2180-4f50-90bf-77f7b920fc3b\ncollecting  e776d9b6-2180-4f50-90bf-77f7b920fc3b\nSNOTEL:474_UT_SNTL 10162c55-772d-49d2-8b1b-b1f9c86254b2\ncollecting  10162c55-772d-49d2-8b1b-b1f9c86254b2\nSNOTEL:475_UT_SNTL 9813294e-a28e-45c0-976d-a6fa65d87927\ncollecting  9813294e-a28e-45c0-976d-a6fa65d87927\nSNOTEL:476_NV_SNTL 875622b7-5253-43d2-8e0f-348767860eb9\ncollecting  875622b7-5253-43d2-8e0f-348767860eb9\nSNOTEL:477_OR_SNTL 65894307-d4eb-4b2e-a0fa-bd83a102dc30\ncollecting  65894307-d4eb-4b2e-a0fa-bd83a102dc30\nSNOTEL:478_WA_SNTL bfda850c-3027-4e91-afcb-cca5e73e4a03\ncollecting  bfda850c-3027-4e91-afcb-cca5e73e4a03\nSNOTEL:480_MT_SNTL f46e7d90-a754-44a8-b262-63f5c401a0ab\ncollecting  f46e7d90-a754-44a8-b262-63f5c401a0ab\nSNOTEL:481_UT_SNTL a28a3caf-eea2-414f-8003-62ac82daaafa\ncollecting  a28a3caf-eea2-414f-8003-62ac82daaafa\nSNOTEL:482_MT_SNTL d37ccc2e-7127-48ec-9425-2e77681c3635\ncollecting  d37ccc2e-7127-48ec-9425-2e77681c3635\nSNOTEL:483_OR_SNTL 71f41513-6ac9-4d2e-97eb-6cd3b84f7043\ncollecting  71f41513-6ac9-4d2e-97eb-6cd3b84f7043\nSNOTEL:484_ID_SNTL 6bf06917-011b-4029-8fbe-a8dfea3bc598\ncollecting  6bf06917-011b-4029-8fbe-a8dfea3bc598\nSNOTEL:485_CO_SNTL 75ced1b1-1fc2-42d3-a4f8-44aa1978c8ef\ncollecting  75ced1b1-1fc2-42d3-a4f8-44aa1978c8ef\nSNOTEL:486_NM_SNTL 1135e377-22e6-4290-b4cd-e6739de7fd8a\ncollecting  1135e377-22e6-4290-b4cd-e6739de7fd8a\nSNOTEL:487_MT_SNTL f3e36cea-5eb2-495a-87f4-947395f325b0\ncollecting  f3e36cea-5eb2-495a-87f4-947395f325b0\nSNOTEL:488_AZ_SNTL a2588440-600e-41da-b2b9-1f5632ecdef6\ncollecting  a2588440-600e-41da-b2b9-1f5632ecdef6\nSNOTEL:489_ID_SNTL f3332d55-ecc8-4644-9deb-180e42abb2eb\ncollecting  f3332d55-ecc8-4644-9deb-180e42abb2eb\nSNOTEL:490_ID_SNTL 695c7749-a3b8-4158-bd14-59d1f2c3e736\ncollecting  695c7749-a3b8-4158-bd14-59d1f2c3e736\nSNOTEL:491_NM_SNTL 9c43edf0-541f-4dbb-9fe1-42cc83d453bd\ncollecting  9c43edf0-541f-4dbb-9fe1-42cc83d453bd\nSNOTEL:493_ID_SNTL 6bf06917-011b-4029-8fbe-a8dfea3bc598\ncollecting  6bf06917-011b-4029-8fbe-a8dfea3bc598\nSNOTEL:494_OR_SNTL 631ed3c9-7863-4e7c-86fa-4bfb043f2851\ncollecting  631ed3c9-7863-4e7c-86fa-4bfb043f2851\nSNOTEL:495_UT_SNTL 9813294e-a28e-45c0-976d-a6fa65d87927\ncollecting  9813294e-a28e-45c0-976d-a6fa65d87927\nSNOTEL:497_WY_SNTL 695bed09-0ad9-406e-b489-69408adeea06\ncollecting  695bed09-0ad9-406e-b489-69408adeea06\nSNOTEL:498_NV_SNTL 42a21eb9-10fd-4986-825b-9ea55ce13935\ncollecting  42a21eb9-10fd-4986-825b-9ea55ce13935\nSNOTEL:499_WY_SNTL 491846d3-f81a-4777-b49f-0a0c74168395\ncollecting  491846d3-f81a-4777-b49f-0a0c74168395\nSNOTEL:500_MT_SNTL d37ccc2e-7127-48ec-9425-2e77681c3635\ncollecting  d37ccc2e-7127-48ec-9425-2e77681c3635\nSNOTEL:503_NV_SNTL a5080351-033f-4cfa-ad27-019fc84e052c\ncollecting  a5080351-033f-4cfa-ad27-019fc84e052c\nSNOTEL:505_CO_SNTL 552a5638-8fd2-46de-8569-5f5512102264\ncollecting  552a5638-8fd2-46de-8569-5f5512102264\nSNOTEL:507_WA_SNTL 6d0ff6eb-0411-4863-b4e7-90958db98115\ncollecting  6d0ff6eb-0411-4863-b4e7-90958db98115\nSNOTEL:508_CA_SNTL d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nSNOTEL:509_WY_SNTL df7e906a-07f3-4a46-b9a5-0200427c26f7\ncollecting  df7e906a-07f3-4a46-b9a5-0200427c26f7\nSNOTEL:510_MT_SNTL 0b9543d3-3cf9-4f28-b8eb-fd22c1956153\ncollecting  0b9543d3-3cf9-4f28-b8eb-fd22c1956153\nSNOTEL:512_WY_SNTL c5a82752-3e4b-43ec-8011-9111b9bfcb89\ncollecting  c5a82752-3e4b-43ec-8011-9111b9bfcb89\nSNOTEL:514_UT_SNTL 55d3e9a6-e153-43c3-a66c-cd60711ff4a9\ncollecting  55d3e9a6-e153-43c3-a66c-cd60711ff4a9\nSNOTEL:519_AZ_SNTL 0aeaffd7-9089-49e7-85ad-2314f32cbf7c\ncollecting  0aeaffd7-9089-49e7-85ad-2314f32cbf7c\nSNOTEL:520_ID_SNTL b1077b69-4b02-458e-8a4b-e68695ac534f\ncollecting  b1077b69-4b02-458e-8a4b-e68695ac534f\nSNOTEL:521_UT_SNTL c0568d62-49c7-4d9f-beba-ac0fb3e064c5\ncollecting  c0568d62-49c7-4d9f-beba-ac0fb3e064c5\nSNOTEL:522_UT_SNTL 50d7ad3f-57f0-45e1-911d-b0efff9deb8f\ncollecting  50d7ad3f-57f0-45e1-911d-b0efff9deb8f\nSNOTEL:523_OR_SNTL e27143af-fdc0-4f6f-8a28-f57b78da75dc\ncollecting  e27143af-fdc0-4f6f-8a28-f57b78da75dc\nSNOTEL:524_ID_SNTL 3330a979-98df-4a38-ac3f-0b45374f8e3d\ncollecting  3330a979-98df-4a38-ac3f-0b45374f8e3d\nSNOTEL:525_WY_SNTL 990e5974-9c60-4c9a-ba23-ddce13971178\ncollecting  990e5974-9c60-4c9a-ba23-ddce13971178\nSNOTEL:526_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nSNOTEL:528_UT_SNTL 50d7ad3f-57f0-45e1-911d-b0efff9deb8f\ncollecting  50d7ad3f-57f0-45e1-911d-b0efff9deb8f\nSNOTEL:529_OR_SNTL fe33672e-7ea7-4c5d-8639-96b2cc7edb0c\ncollecting  fe33672e-7ea7-4c5d-8639-96b2cc7edb0c\nSNOTEL:530_MT_SNTL 440d7558-67fd-43b4-826b-26d02663f871\ncollecting  440d7558-67fd-43b4-826b-26d02663f871\nSNOTEL:531_CO_SNTL 59ac7ee6-8fa8-4888-bb77-2be6781dddaf\ncollecting  59ac7ee6-8fa8-4888-bb77-2be6781dddaf\nSNOTEL:532_NM_SNTL 674e34ce-8b77-422b-ab14-c6c3a0183e39\ncollecting  674e34ce-8b77-422b-ab14-c6c3a0183e39\nSNOTEL:533_UT_SNTL dc237027-8dae-4da7-91ec-501701ecd943\ncollecting  dc237027-8dae-4da7-91ec-501701ecd943\nSNOTEL:535_ID_SNTL b5d7b6b8-4e5d-4b5e-8976-c72e99f57769\ncollecting  b5d7b6b8-4e5d-4b5e-8976-c72e99f57769\nSNOTEL:540_CA_SNTL 018cf1a1-f945-4097-9c47-0c4690538bb5\ncollecting  018cf1a1-f945-4097-9c47-0c4690538bb5\nSNOTEL:541_CA_SNTL 018cf1a1-f945-4097-9c47-0c4690538bb5\ncollecting  018cf1a1-f945-4097-9c47-0c4690538bb5\nSNOTEL:542_CO_SNTL a0c947fb-f00e-4331-ad3a-402908e08b57\ncollecting  a0c947fb-f00e-4331-ad3a-402908e08b57\nSNOTEL:543_UT_SNTL 19b5e6ce-c1a0-4cce-85f5-248c9f1abb6e\ncollecting  19b5e6ce-c1a0-4cce-85f5-248c9f1abb6e\nSNOTEL:548_NV_SNTL 875622b7-5253-43d2-8e0f-348767860eb9\ncollecting  875622b7-5253-43d2-8e0f-348767860eb9\nSNOTEL:549_NV_SNTL 875622b7-5253-43d2-8e0f-348767860eb9\ncollecting  875622b7-5253-43d2-8e0f-348767860eb9\nSNOTEL:550_ID_SNTL 36b98590-a7e6-4e00-8c7d-f0f3d25bafec\ncollecting  36b98590-a7e6-4e00-8c7d-f0f3d25bafec\nSNOTEL:552_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nSNOTEL:553_WA_SNTL cdfc27f0-b990-45f7-bac6-7c674cd157ac\ncollecting  cdfc27f0-b990-45f7-bac6-7c674cd157ac\nSNOTEL:554_WY_SNTL df7e906a-07f3-4a46-b9a5-0200427c26f7\ncollecting  df7e906a-07f3-4a46-b9a5-0200427c26f7\nSNOTEL:555_WY_SNTL 695bed09-0ad9-406e-b489-69408adeea06\ncollecting  695bed09-0ad9-406e-b489-69408adeea06\nSNOTEL:556_CO_SNTL e833aad1-6da3-4413-b25e-b2ab5b2029c0\ncollecting  e833aad1-6da3-4413-b25e-b2ab5b2029c0\nSNOTEL:558_OR_SNTL dd7f64aa-3556-409b-bc86-71dc28b6fd45\ncollecting  dd7f64aa-3556-409b-bc86-71dc28b6fd45\nSNOTEL:559_UT_SNTL 50d7ad3f-57f0-45e1-911d-b0efff9deb8f\ncollecting  50d7ad3f-57f0-45e1-911d-b0efff9deb8f\nSNOTEL:560_WY_SNTL 692c41af-2210-4dd6-916d-c99e76807447\ncollecting  692c41af-2210-4dd6-916d-c99e76807447\nSNOTEL:562_MT_SNTL 89a7b0ef-1ec8-490f-9207-c93aa57a147f\ncollecting  89a7b0ef-1ec8-490f-9207-c93aa57a147f\nSNOTEL:563_OR_SNTL 408b4482-ff63-4a1f-9cf9-ca820cd51b39\ncollecting  408b4482-ff63-4a1f-9cf9-ca820cd51b39\nSNOTEL:564_CO_SNTL f9f7132d-56a2-43e2-baba-312f34dbaeed\ncollecting  f9f7132d-56a2-43e2-baba-312f34dbaeed\nSNOTEL:565_CO_SNTL 8c45801f-6377-42e1-ae0a-9b53593ff843\ncollecting  8c45801f-6377-42e1-ae0a-9b53593ff843\nSNOTEL:566_UT_SNTL c7f13d88-b4af-4484-9547-52197f778c08\ncollecting  c7f13d88-b4af-4484-9547-52197f778c08\nSNOTEL:568_MT_SNTL 10a46ea0-13da-4cef-9aa6-ff48aa46881c\ncollecting  10a46ea0-13da-4cef-9aa6-ff48aa46881c\nSNOTEL:569_NV_SNTL 42a21eb9-10fd-4986-825b-9ea55ce13935\ncollecting  42a21eb9-10fd-4986-825b-9ea55ce13935\nSNOTEL:570_NV_SNTL a5080351-033f-4cfa-ad27-019fc84e052c\ncollecting  a5080351-033f-4cfa-ad27-019fc84e052c\nSNOTEL:571_WY_SNTL ab89875f-3b86-4c6a-8d66-767017570dfc\ncollecting  ab89875f-3b86-4c6a-8d66-767017570dfc\nSNOTEL:572_UT_SNTL 20b97bae-60d6-466d-aca9-334d9b2d63b6\ncollecting  20b97bae-60d6-466d-aca9-334d9b2d63b6\nSNOTEL:575_CA_SNTL 01be2cc7-ef77-4e4d-80ed-c4f8139162c3\ncollecting  01be2cc7-ef77-4e4d-80ed-c4f8139162c3\nSNOTEL:576_MT_SNTL 3330a979-98df-4a38-ac3f-0b45374f8e3d\ncollecting  3330a979-98df-4a38-ac3f-0b45374f8e3d\nSNOTEL:577_WY_SNTL 491846d3-f81a-4777-b49f-0a0c74168395\ncollecting  491846d3-f81a-4777-b49f-0a0c74168395\nSNOTEL:579_UT_SNTL 064d7f3e-8bbd-49cd-b360-5c4590a19b9e\ncollecting  064d7f3e-8bbd-49cd-b360-5c4590a19b9e\nSNOTEL:580_CO_SNTL 4ddee9a9-feaf-4daa-9100-0d4188f7b827\ncollecting  4ddee9a9-feaf-4daa-9100-0d4188f7b827\nSNOTEL:582_UT_SNTL b59438b9-aadc-4899-9afb-fe71974c5c3a\ncollecting  b59438b9-aadc-4899-9afb-fe71974c5c3a\nSNOTEL:583_UT_SNTL 24cd85fa-6aee-4556-bb8a-b6696eb72a19\ncollecting  24cd85fa-6aee-4556-bb8a-b6696eb72a19\nSNOTEL:585_WY_SNTL 0adbba56-85f8-49e0-9b11-000622238d91\ncollecting  0adbba56-85f8-49e0-9b11-000622238d91\nSNOTEL:587_CA_SNTL 74f8c8bc-2f60-4232-b447-43459d5d22f0\ncollecting  74f8c8bc-2f60-4232-b447-43459d5d22f0\nSNOTEL:588_ID_SNTL cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\ncollecting  cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\nSNOTEL:589_CO_SNTL 57e18a9f-8327-4d6c-b2b4-c2b337341e86\ncollecting  57e18a9f-8327-4d6c-b2b4-c2b337341e86\nSNOTEL:590_MT_SNTL e467a17f-a729-4938-87a1-ac25157eed63\ncollecting  e467a17f-a729-4938-87a1-ac25157eed63\nSNOTEL:591_WA_SNTL cdfc27f0-b990-45f7-bac6-7c674cd157ac\ncollecting  cdfc27f0-b990-45f7-bac6-7c674cd157ac\nSNOTEL:592_UT_SNTL 24cd85fa-6aee-4556-bb8a-b6696eb72a19\ncollecting  24cd85fa-6aee-4556-bb8a-b6696eb72a19\nSNOTEL:593_UT_SNTL 55d3e9a6-e153-43c3-a66c-cd60711ff4a9\ncollecting  55d3e9a6-e153-43c3-a66c-cd60711ff4a9\nSNOTEL:596_UT_SNTL 10162c55-772d-49d2-8b1b-b1f9c86254b2\ncollecting  10162c55-772d-49d2-8b1b-b1f9c86254b2\nSNOTEL:597_WY_SNTL 695bed09-0ad9-406e-b489-69408adeea06\ncollecting  695bed09-0ad9-406e-b489-69408adeea06\nSNOTEL:600_ID_SNTL b5d7b6b8-4e5d-4b5e-8976-c72e99f57769\ncollecting  b5d7b6b8-4e5d-4b5e-8976-c72e99f57769\nSNOTEL:603_MT_SNTL 678f1920-0bc3-4687-af71-35d61030b1a0\ncollecting  678f1920-0bc3-4687-af71-35d61030b1a0\nSNOTEL:604_MT_SNTL 4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\ncollecting  4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\nSNOTEL:605_OR_SNTL e27143af-fdc0-4f6f-8a28-f57b78da75dc\ncollecting  e27143af-fdc0-4f6f-8a28-f57b78da75dc\nSNOTEL:606_WA_SNTL 47e625fa-e2df-43ce-84dd-8ac21fdda75a\ncollecting  47e625fa-e2df-43ce-84dd-8ac21fdda75a\nSNOTEL:607_CO_SNTL 02cf33c2-c8e2-48b9-bf72-92506e97e251\ncollecting  02cf33c2-c8e2-48b9-bf72-92506e97e251\nSNOTEL:610_ID_SNTL d17b55c5-7848-4b79-a735-983aec995c52\ncollecting  d17b55c5-7848-4b79-a735-983aec995c52\nSNOTEL:612_UT_SNTL 0a820e12-033b-45d6-9ef9-d70f4c5e5b63\ncollecting  0a820e12-033b-45d6-9ef9-d70f4c5e5b63\nSNOTEL:613_MT_SNTL d37ccc2e-7127-48ec-9425-2e77681c3635\ncollecting  d37ccc2e-7127-48ec-9425-2e77681c3635\nSNOTEL:614_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nSNOTEL:615_NV_SNTL d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nSNOTEL:616_WY_SNTL 692c41af-2210-4dd6-916d-c99e76807447\ncollecting  692c41af-2210-4dd6-916d-c99e76807447\nSNOTEL:617_AZ_SNTL f6a782f0-4b17-4989-815c-2398b77b09dd\ncollecting  f6a782f0-4b17-4989-815c-2398b77b09dd\nSNOTEL:619_OR_SNTL fe33672e-7ea7-4c5d-8639-96b2cc7edb0c\ncollecting  fe33672e-7ea7-4c5d-8639-96b2cc7edb0c\nSNOTEL:620_ID_SNTL 3330a979-98df-4a38-ac3f-0b45374f8e3d\ncollecting  3330a979-98df-4a38-ac3f-0b45374f8e3d\nSNOTEL:621_UT_SNTL 7b636fe2-1760-45c5-afce-505f2e927163\ncollecting  7b636fe2-1760-45c5-afce-505f2e927163\nSNOTEL:622_CO_SNTL 87d6c782-c43b-473f-84da-d2a519d8f1fc\ncollecting  87d6c782-c43b-473f-84da-d2a519d8f1fc\nSNOTEL:623_ID_SNTL b5d7b6b8-4e5d-4b5e-8976-c72e99f57769\ncollecting  b5d7b6b8-4e5d-4b5e-8976-c72e99f57769\nSNOTEL:625_WY_SNTL 253c2443-b820-4c13-bf6d-ba7a5426f52d\ncollecting  253c2443-b820-4c13-bf6d-ba7a5426f52d\nSNOTEL:626_UT_SNTL 55d3e9a6-e153-43c3-a66c-cd60711ff4a9\ncollecting  55d3e9a6-e153-43c3-a66c-cd60711ff4a9\nSNOTEL:627_ID_SNTL 830bc2b9-592d-4334-842a-213ba4c0a347\ncollecting  830bc2b9-592d-4334-842a-213ba4c0a347\nSNOTEL:628_UT_SNTL eeb0a123-9482-4946-ab3f-9e63541cb655\ncollecting  eeb0a123-9482-4946-ab3f-9e63541cb655\nSNOTEL:629_CO_SNTL 5c4dff48-4afa-4922-949e-f64db583f392\ncollecting  5c4dff48-4afa-4922-949e-f64db583f392\nSNOTEL:633_CA_SNTL 74f8c8bc-2f60-4232-b447-43459d5d22f0\ncollecting  74f8c8bc-2f60-4232-b447-43459d5d22f0\nSNOTEL:637_ID_SNTL 36b98590-a7e6-4e00-8c7d-f0f3d25bafec\ncollecting  36b98590-a7e6-4e00-8c7d-f0f3d25bafec\nSNOTEL:640_AZ_SNTL c0e85162-6ff4-401b-b01e-cc6d7a51eac0\ncollecting  c0e85162-6ff4-401b-b01e-cc6d7a51eac0\nSNOTEL:642_WA_SNTL 9474e816-b673-4e6d-83e0-28c274945bef\ncollecting  9474e816-b673-4e6d-83e0-28c274945bef\nSNOTEL:643_UT_SNTL 50d7ad3f-57f0-45e1-911d-b0efff9deb8f\ncollecting  50d7ad3f-57f0-45e1-911d-b0efff9deb8f\nSNOTEL:644_WA_SNTL dc31c331-837b-4b59-b184-051321e9489c\ncollecting  dc31c331-837b-4b59-b184-051321e9489c\nSNOTEL:645_ID_SNTL 0d0b742e-c324-4140-8f62-746210d79080\ncollecting  0d0b742e-c324-4140-8f62-746210d79080\nSNOTEL:646_MT_SNTL 89a7b0ef-1ec8-490f-9207-c93aa57a147f\ncollecting  89a7b0ef-1ec8-490f-9207-c93aa57a147f\nSNOTEL:647_OR_SNTL c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\ncollecting  c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\nSNOTEL:648_WA_SNTL 6c94136d-5040-4c09-b1fd-c02dbff210e6\ncollecting  6c94136d-5040-4c09-b1fd-c02dbff210e6\nSNOTEL:649_MT_SNTL dca30f20-582e-40ef-be6d-aa7858be4baa\ncollecting  dca30f20-582e-40ef-be6d-aa7858be4baa\nSNOTEL:650_ID_SNTL cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\ncollecting  cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\nSNOTEL:651_OR_SNTL e13f9c1b-dca0-4c63-a64c-76f6bc725156\ncollecting  e13f9c1b-dca0-4c63-a64c-76f6bc725156\nSNOTEL:652_NV_SNTL d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nSNOTEL:654_ID_SNTL 0cda0c4a-405b-4e16-8922-964190929d80\ncollecting  0cda0c4a-405b-4e16-8922-964190929d80\nSNOTEL:655_OR_SNTL e13f9c1b-dca0-4c63-a64c-76f6bc725156\ncollecting  e13f9c1b-dca0-4c63-a64c-76f6bc725156\nSNOTEL:657_MT_SNTL 99a2d4a9-63a0-43a7-976d-2a1ed822186d\ncollecting  99a2d4a9-63a0-43a7-976d-2a1ed822186d\nSNOTEL:658_CO_SNTL e833aad1-6da3-4413-b25e-b2ab5b2029c0\ncollecting  e833aad1-6da3-4413-b25e-b2ab5b2029c0\nSNOTEL:661_WY_SNTL 679fe096-5475-4d4d-b0f8-81e32de889aa\ncollecting  679fe096-5475-4d4d-b0f8-81e32de889aa\nSNOTEL:662_MT_SNTL cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\ncollecting  cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\nSNOTEL:663_CO_SNTL f9f7132d-56a2-43e2-baba-312f34dbaeed\ncollecting  f9f7132d-56a2-43e2-baba-312f34dbaeed\nSNOTEL:664_MT_SNTL d37ccc2e-7127-48ec-9425-2e77681c3635\ncollecting  d37ccc2e-7127-48ec-9425-2e77681c3635\nSNOTEL:665_NM_SNTL 2ca6a37f-67f5-4905-864b-ddf98d956ebb\ncollecting  2ca6a37f-67f5-4905-864b-ddf98d956ebb\nSNOTEL:666_OR_SNTL e13f9c1b-dca0-4c63-a64c-76f6bc725156\ncollecting  e13f9c1b-dca0-4c63-a64c-76f6bc725156\nSNOTEL:667_MT_SNTL 89a7b0ef-1ec8-490f-9207-c93aa57a147f\ncollecting  89a7b0ef-1ec8-490f-9207-c93aa57a147f\nSNOTEL:669_CO_SNTL 3527e00e-1aee-46ce-ad9d-8122cff4c202\ncollecting  3527e00e-1aee-46ce-ad9d-8122cff4c202\nSNOTEL:670_MT_SNTL f46e7d90-a754-44a8-b262-63f5c401a0ab\ncollecting  f46e7d90-a754-44a8-b262-63f5c401a0ab\nSNOTEL:671_OR_SNTL c64f2bf3-90f0-4a96-b3a8-9f8db46dce92\ncollecting  c64f2bf3-90f0-4a96-b3a8-9f8db46dce92\nSNOTEL:672_WA_SNTL 360f1bcc-aa60-4052-a18a-b33da5745ff4\ncollecting  360f1bcc-aa60-4052-a18a-b33da5745ff4\nSNOTEL:673_WY_SNTL 8116acfb-8035-4d34-b9b9-b0af2c5697df\ncollecting  8116acfb-8035-4d34-b9b9-b0af2c5697df\nSNOTEL:676_WY_SNTL 692c41af-2210-4dd6-916d-c99e76807447\ncollecting  692c41af-2210-4dd6-916d-c99e76807447\nSNOTEL:677_ID_SNTL 6bf06917-011b-4029-8fbe-a8dfea3bc598\ncollecting  6bf06917-011b-4029-8fbe-a8dfea3bc598\nSNOTEL:680_CO_SNTL 94d9d95f-32b2-470d-95f8-dbd843d6def3\ncollecting  94d9d95f-32b2-470d-95f8-dbd843d6def3\nSNOTEL:681_WA_SNTL 47e625fa-e2df-43ce-84dd-8ac21fdda75a\ncollecting  47e625fa-e2df-43ce-84dd-8ac21fdda75a\nSNOTEL:682_CO_SNTL 35aecf7e-5f0b-4533-995c-3cb4165d44b5\ncollecting  35aecf7e-5f0b-4533-995c-3cb4165d44b5\nSNOTEL:683_WY_SNTL e776d9b6-2180-4f50-90bf-77f7b920fc3b\ncollecting  e776d9b6-2180-4f50-90bf-77f7b920fc3b\nSNOTEL:684_UT_SNTL eeb0a123-9482-4946-ab3f-9e63541cb655\ncollecting  eeb0a123-9482-4946-ab3f-9e63541cb655\nSNOTEL:686_UT_SNTL 0a820e12-033b-45d6-9ef9-d70f4c5e5b63\ncollecting  0a820e12-033b-45d6-9ef9-d70f4c5e5b63\nSNOTEL:689_WY_SNTL ce76ce00-c8b5-4597-8ca3-1ec9db795b50\ncollecting  ce76ce00-c8b5-4597-8ca3-1ec9db795b50\nSNOTEL:690_MT_SNTL 517aefce-a617-4251-acb9-c5faf0b7fdf3\ncollecting  517aefce-a617-4251-acb9-c5faf0b7fdf3\nSNOTEL:691_UT_SNTL 9813294e-a28e-45c0-976d-a6fa65d87927\ncollecting  9813294e-a28e-45c0-976d-a6fa65d87927\nSNOTEL:693_MT_SNTL dca30f20-582e-40ef-be6d-aa7858be4baa\ncollecting  dca30f20-582e-40ef-be6d-aa7858be4baa\nSNOTEL:694_UT_SNTL 7b636fe2-1760-45c5-afce-505f2e927163\ncollecting  7b636fe2-1760-45c5-afce-505f2e927163\nSNOTEL:696_MT_SNTL f46e7d90-a754-44a8-b262-63f5c401a0ab\ncollecting  f46e7d90-a754-44a8-b262-63f5c401a0ab\nSNOTEL:698_NV_SNTL 5308a803-69e6-43cd-89db-66e93f9f83af\ncollecting  5308a803-69e6-43cd-89db-66e93f9f83af\nSNOTEL:699_WA_SNTL 47e625fa-e2df-43ce-84dd-8ac21fdda75a\ncollecting  47e625fa-e2df-43ce-84dd-8ac21fdda75a\nSNOTEL:700_MT_SNTL 630bae26-a6cc-4a36-bbe5-40dc15b38dea\ncollecting  630bae26-a6cc-4a36-bbe5-40dc15b38dea\nSNOTEL:702_WA_SNTL bb65d7a1-a5d5-4c89-9ef9-f0f1db06cc58\ncollecting  bb65d7a1-a5d5-4c89-9ef9-f0f1db06cc58\nSNOTEL:704_ID_SNTL 0bd47ec1-0e3c-43bf-a491-534d06beb19f\ncollecting  0bd47ec1-0e3c-43bf-a491-534d06beb19f\nSNOTEL:706_OR_SNTL 0a0ea690-5b73-4459-91d5-a6948d132a48\ncollecting  0a0ea690-5b73-4459-91d5-a6948d132a48\nSNOTEL:708_NM_SNTL 6afdc499-9686-4451-b207-13df777df662\ncollecting  6afdc499-9686-4451-b207-13df777df662\nSNOTEL:709_CO_SNTL 02cf33c2-c8e2-48b9-bf72-92506e97e251\ncollecting  02cf33c2-c8e2-48b9-bf72-92506e97e251\nSNOTEL:710_OR_SNTL ea185683-4427-44c3-84e1-706cf16781ce\ncollecting  ea185683-4427-44c3-84e1-706cf16781ce\nSNOTEL:712_OR_SNTL b98777af-0c7c-44f7-9c03-85d6d412856c\ncollecting  b98777af-0c7c-44f7-9c03-85d6d412856c\nSNOTEL:713_CO_SNTL 7610b45e-5652-4604-ab5b-99344f71616b\ncollecting  7610b45e-5652-4604-ab5b-99344f71616b\nSNOTEL:714_UT_SNTL ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\ncollecting  ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\nSNOTEL:715_NM_SNTL e3473791-6153-49bc-a2ed-0b1e3e243942\ncollecting  e3473791-6153-49bc-a2ed-0b1e3e243942\nSNOTEL:717_CO_SNTL d64197fc-0723-4c61-9ce8-ff2554e24154\ncollecting  d64197fc-0723-4c61-9ce8-ff2554e24154\nSNOTEL:718_CO_SNTL 9f0599d8-81f3-4ab5-b275-48a6ddaaae5b\ncollecting  9f0599d8-81f3-4ab5-b275-48a6ddaaae5b\nSNOTEL:720_UT_SNTL a28a3caf-eea2-414f-8003-62ac82daaafa\ncollecting  a28a3caf-eea2-414f-8003-62ac82daaafa\nSNOTEL:723_UT_SNTL 93b8483d-a510-42ff-865e-33d5a8784dc4\ncollecting  93b8483d-a510-42ff-865e-33d5a8784dc4\nSNOTEL:724_CA_SNTL f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nSNOTEL:726_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nSNOTEL:727_MT_SNTL cacaa17b-0b1b-4fe2-a4c1-7728e6c154c1\ncollecting  cacaa17b-0b1b-4fe2-a4c1-7728e6c154c1\nSNOTEL:728_WA_SNTL dc31c331-837b-4b59-b184-051321e9489c\ncollecting  dc31c331-837b-4b59-b184-051321e9489c\nSNOTEL:729_OR_SNTL ea185683-4427-44c3-84e1-706cf16781ce\ncollecting  ea185683-4427-44c3-84e1-706cf16781ce\nSNOTEL:730_WY_SNTL df7e906a-07f3-4a46-b9a5-0200427c26f7\ncollecting  df7e906a-07f3-4a46-b9a5-0200427c26f7\nSNOTEL:731_WY_SNTL 3b5bfd37-070c-4ee9-a470-c9338851e270\ncollecting  3b5bfd37-070c-4ee9-a470-c9338851e270\nSNOTEL:732_WY_SNTL 8116acfb-8035-4d34-b9b9-b0af2c5697df\ncollecting  8116acfb-8035-4d34-b9b9-b0af2c5697df\nSNOTEL:733_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nSNOTEL:734_WA_SNTL bfda850c-3027-4e91-afcb-cca5e73e4a03\ncollecting  bfda850c-3027-4e91-afcb-cca5e73e4a03\nSNOTEL:735_ID_SNTL cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\ncollecting  cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\nSNOTEL:736_OR_SNTL c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\ncollecting  c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\nSNOTEL:738_ID_SNTL 0d0b742e-c324-4140-8f62-746210d79080\ncollecting  0d0b742e-c324-4140-8f62-746210d79080\nSNOTEL:739_CO_SNTL 35eee1cd-f92a-4ba5-af03-fb5347490f41\ncollecting  35eee1cd-f92a-4ba5-af03-fb5347490f41\nSNOTEL:741_ID_SNTL 6bf06917-011b-4029-8fbe-a8dfea3bc598\ncollecting  6bf06917-011b-4029-8fbe-a8dfea3bc598\nSNOTEL:742_UT_SNTL ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\ncollecting  ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\nSNOTEL:743_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nSNOTEL:744_NM_SNTL 6afdc499-9686-4451-b207-13df777df662\ncollecting  6afdc499-9686-4451-b207-13df777df662\nSNOTEL:745_OR_SNTL 5e252b65-58dd-421f-a0db-3d4669bfb235\ncollecting  5e252b65-58dd-421f-a0db-3d4669bfb235\nSNOTEL:746_NV_SNTL 5308a803-69e6-43cd-89db-66e93f9f83af\ncollecting  5308a803-69e6-43cd-89db-66e93f9f83af\nSNOTEL:747_ID_SNTL b1077b69-4b02-458e-8a4b-e68695ac534f\ncollecting  b1077b69-4b02-458e-8a4b-e68695ac534f\nSNOTEL:748_WA_SNTL cdfc27f0-b990-45f7-bac6-7c674cd157ac\ncollecting  cdfc27f0-b990-45f7-bac6-7c674cd157ac\nSNOTEL:749_ID_SNTL ce76ce00-c8b5-4597-8ca3-1ec9db795b50\ncollecting  ce76ce00-c8b5-4597-8ca3-1ec9db795b50\nSNOTEL:751_WY_SNTL 02c3ec4a-8de4-4284-9ec1-5a942d3d098e\ncollecting  02c3ec4a-8de4-4284-9ec1-5a942d3d098e\nSNOTEL:752_ID_SNTL b1077b69-4b02-458e-8a4b-e68695ac534f\ncollecting  b1077b69-4b02-458e-8a4b-e68695ac534f\nSNOTEL:754_MT_SNTL e467a17f-a729-4938-87a1-ac25157eed63\ncollecting  e467a17f-a729-4938-87a1-ac25157eed63\nSNOTEL:755_NM_SNTL 43be1328-02b0-4cc1-8e9b-75842908cee3\ncollecting  43be1328-02b0-4cc1-8e9b-75842908cee3\nSNOTEL:756_OR_SNTL 0a0ea690-5b73-4459-91d5-a6948d132a48\ncollecting  0a0ea690-5b73-4459-91d5-a6948d132a48\nSNOTEL:757_NM_SNTL 1135e377-22e6-4290-b4cd-e6739de7fd8a\ncollecting  1135e377-22e6-4290-b4cd-e6739de7fd8a\nSNOTEL:761_ID_SNTL 6bf06917-011b-4029-8fbe-a8dfea3bc598\ncollecting  6bf06917-011b-4029-8fbe-a8dfea3bc598\nSNOTEL:762_CO_SNTL 85f0acd8-4008-472d-bf40-e35e0e2934e4\ncollecting  85f0acd8-4008-472d-bf40-e35e0e2934e4\nSNOTEL:763_UT_SNTL 7bc3c413-4709-4ddd-a2ad-99f6cad9436c\ncollecting  7bc3c413-4709-4ddd-a2ad-99f6cad9436c\nSNOTEL:764_WY_SNTL 491846d3-f81a-4777-b49f-0a0c74168395\ncollecting  491846d3-f81a-4777-b49f-0a0c74168395\nSNOTEL:765_WY_SNTL df7e906a-07f3-4a46-b9a5-0200427c26f7\ncollecting  df7e906a-07f3-4a46-b9a5-0200427c26f7\nSNOTEL:767_OR_SNTL a6a9febf-ea16-4223-83d4-8e459e2af85a\ncollecting  a6a9febf-ea16-4223-83d4-8e459e2af85a\nSNOTEL:770_ID_SNTL 6bf06917-011b-4029-8fbe-a8dfea3bc598\ncollecting  6bf06917-011b-4029-8fbe-a8dfea3bc598\nSNOTEL:771_CA_SNTL 01be2cc7-ef77-4e4d-80ed-c4f8139162c3\ncollecting  01be2cc7-ef77-4e4d-80ed-c4f8139162c3\nSNOTEL:773_CO_SNTL efada0af-09bf-4013-a1c6-0837f8ff59c5\ncollecting  efada0af-09bf-4013-a1c6-0837f8ff59c5\nSNOTEL:777_WA_SNTL cdfc27f0-b990-45f7-bac6-7c674cd157ac\ncollecting  cdfc27f0-b990-45f7-bac6-7c674cd157ac\nSNOTEL:778_CA_SNTL 962f6718-ce02-4d13-b28c-e159d1adc2d4\ncollecting  962f6718-ce02-4d13-b28c-e159d1adc2d4\nSNOTEL:779_WY_SNTL df7e906a-07f3-4a46-b9a5-0200427c26f7\ncollecting  df7e906a-07f3-4a46-b9a5-0200427c26f7\nSNOTEL:780_CO_SNTL ce9da6bf-cf6e-4edb-b579-5a0853b2ed17\ncollecting  ce9da6bf-cf6e-4edb-b579-5a0853b2ed17\nSNOTEL:781_MT_SNTL 517aefce-a617-4251-acb9-c5faf0b7fdf3\ncollecting  517aefce-a617-4251-acb9-c5faf0b7fdf3\nSNOTEL:782_ID_SNTL da6ce150-5daf-4a91-9fdd-a85854462b08\ncollecting  da6ce150-5daf-4a91-9fdd-a85854462b08\nSNOTEL:784_CA_SNTL f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nSNOTEL:786_WY_SNTL de9c541b-ce5e-4cc6-9ddd-03f85dc5b3d5\ncollecting  de9c541b-ce5e-4cc6-9ddd-03f85dc5b3d5\nSNOTEL:787_MT_SNTL d37ccc2e-7127-48ec-9425-2e77681c3635\ncollecting  d37ccc2e-7127-48ec-9425-2e77681c3635\nSNOTEL:790_UT_SNTL c0568d62-49c7-4d9f-beba-ac0fb3e064c5\ncollecting  c0568d62-49c7-4d9f-beba-ac0fb3e064c5\nSNOTEL:791_WA_SNTL bfda850c-3027-4e91-afcb-cca5e73e4a03\ncollecting  bfda850c-3027-4e91-afcb-cca5e73e4a03\nSNOTEL:792_ID_SNTL f3332d55-ecc8-4644-9deb-180e42abb2eb\ncollecting  f3332d55-ecc8-4644-9deb-180e42abb2eb\nSNOTEL:793_CO_SNTL 8c45801f-6377-42e1-ae0a-9b53593ff843\ncollecting  8c45801f-6377-42e1-ae0a-9b53593ff843\nSNOTEL:794_OR_SNTL 0a0ea690-5b73-4459-91d5-a6948d132a48\ncollecting  0a0ea690-5b73-4459-91d5-a6948d132a48\nSNOTEL:795_UT_SNTL cfe58efd-ce2a-495a-90cd-6826f704ebee\ncollecting  cfe58efd-ce2a-495a-90cd-6826f704ebee\nSNOTEL:797_CO_SNTL 003fdfbd-c766-4312-b029-bd4cfba6ebef\ncollecting  003fdfbd-c766-4312-b029-bd4cfba6ebef\nSNOTEL:798_WY_SNTL 02c3ec4a-8de4-4284-9ec1-5a942d3d098e\ncollecting  02c3ec4a-8de4-4284-9ec1-5a942d3d098e\nSNOTEL:801_OR_SNTL ea185683-4427-44c3-84e1-706cf16781ce\ncollecting  ea185683-4427-44c3-84e1-706cf16781ce\nSNOTEL:803_ID_SNTL b5d7b6b8-4e5d-4b5e-8976-c72e99f57769\ncollecting  b5d7b6b8-4e5d-4b5e-8976-c72e99f57769\nSNOTEL:804_WA_SNTL cdfc27f0-b990-45f7-bac6-7c674cd157ac\ncollecting  cdfc27f0-b990-45f7-bac6-7c674cd157ac\nSNOTEL:805_ID_SNTL af0463d4-f20f-4d13-bd0f-5834e2e8717b\ncollecting  af0463d4-f20f-4d13-bd0f-5834e2e8717b\nSNOTEL:806_WY_SNTL 333458b2-c1a9-47a3-8ae0-92053ad28ae3\ncollecting  333458b2-c1a9-47a3-8ae0-92053ad28ae3\nSNOTEL:809_CA_SNTL f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nSNOTEL:810_OR_SNTL 5e252b65-58dd-421f-a0db-3d4669bfb235\ncollecting  5e252b65-58dd-421f-a0db-3d4669bfb235\nSNOTEL:811_NV_SNTL 875622b7-5253-43d2-8e0f-348767860eb9\ncollecting  875622b7-5253-43d2-8e0f-348767860eb9\nSNOTEL:812_OR_SNTL c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\ncollecting  c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\nSNOTEL:814_UT_SNTL eeb0a123-9482-4946-ab3f-9e63541cb655\ncollecting  eeb0a123-9482-4946-ab3f-9e63541cb655\nSNOTEL:815_OR_SNTL fe33672e-7ea7-4c5d-8639-96b2cc7edb0c\ncollecting  fe33672e-7ea7-4c5d-8639-96b2cc7edb0c\nSNOTEL:816_WY_SNTL 40c4f8cd-b0ca-4d37-b91e-b69e5dff7f9a\ncollecting  40c4f8cd-b0ca-4d37-b91e-b69e5dff7f9a\nSNOTEL:817_WA_SNTL 47e625fa-e2df-43ce-84dd-8ac21fdda75a\ncollecting  47e625fa-e2df-43ce-84dd-8ac21fdda75a\nSNOTEL:818_WY_SNTL 02c3ec4a-8de4-4284-9ec1-5a942d3d098e\ncollecting  02c3ec4a-8de4-4284-9ec1-5a942d3d098e\nSNOTEL:819_WY_SNTL 692c41af-2210-4dd6-916d-c99e76807447\ncollecting  692c41af-2210-4dd6-916d-c99e76807447\nSNOTEL:820_UT_SNTL eeb0a123-9482-4946-ab3f-9e63541cb655\ncollecting  eeb0a123-9482-4946-ab3f-9e63541cb655\nSNOTEL:822_WY_SNTL 695bed09-0ad9-406e-b489-69408adeea06\ncollecting  695bed09-0ad9-406e-b489-69408adeea06\nSNOTEL:823_UT_SNTL 2222b7b3-f48b-4cea-90bf-8e7245d002ea\ncollecting  2222b7b3-f48b-4cea-90bf-8e7245d002ea\nSNOTEL:824_WA_SNTL f78ea076-10a1-45dc-a848-c08e129c6a28\ncollecting  f78ea076-10a1-45dc-a848-c08e129c6a28\nSNOTEL:825_CO_SNTL 02cf33c2-c8e2-48b9-bf72-92506e97e251\ncollecting  02cf33c2-c8e2-48b9-bf72-92506e97e251\nSNOTEL:826_WY_SNTL 990e5974-9c60-4c9a-ba23-ddce13971178\ncollecting  990e5974-9c60-4c9a-ba23-ddce13971178\nSNOTEL:827_CO_SNTL d64197fc-0723-4c61-9ce8-ff2554e24154\ncollecting  d64197fc-0723-4c61-9ce8-ff2554e24154\nSNOTEL:830_ID_SNTL 36b98590-a7e6-4e00-8c7d-f0f3d25bafec\ncollecting  36b98590-a7e6-4e00-8c7d-f0f3d25bafec\nSNOTEL:831_WY_SNTL 551e2612-8a22-4c44-8290-78dc0e4af85d\ncollecting  551e2612-8a22-4c44-8290-78dc0e4af85d\nSNOTEL:832_WA_SNTL 6d0ff6eb-0411-4863-b4e7-90958db98115\ncollecting  6d0ff6eb-0411-4863-b4e7-90958db98115\nSNOTEL:833_UT_SNTL 50d7ad3f-57f0-45e1-911d-b0efff9deb8f\ncollecting  50d7ad3f-57f0-45e1-911d-b0efff9deb8f\nSNOTEL:834_CA_SNTL f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nSNOTEL:835_MT_SNTL cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\ncollecting  cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\nSNOTEL:837_WY_SNTL 491846d3-f81a-4777-b49f-0a0c74168395\ncollecting  491846d3-f81a-4777-b49f-0a0c74168395\nSNOTEL:838_CO_SNTL f9f7132d-56a2-43e2-baba-312f34dbaeed\ncollecting  f9f7132d-56a2-43e2-baba-312f34dbaeed\nSNOTEL:839_CO_SNTL 0c31f316-6718-4a43-a9f1-ed552e45bd0f\ncollecting  0c31f316-6718-4a43-a9f1-ed552e45bd0f\nSNOTEL:840_CO_SNTL 3789f7a5-5743-4005-844d-602dadb33030\ncollecting  3789f7a5-5743-4005-844d-602dadb33030\nSNOTEL:841_WA_SNTL 6d0ff6eb-0411-4863-b4e7-90958db98115\ncollecting  6d0ff6eb-0411-4863-b4e7-90958db98115\nSNOTEL:842_CO_SNTL f62e6b4d-7f9d-4139-bac4-59f084fb09cd\ncollecting  f62e6b4d-7f9d-4139-bac4-59f084fb09cd\nSNOTEL:844_UT_SNTL 93b8483d-a510-42ff-865e-33d5a8784dc4\ncollecting  93b8483d-a510-42ff-865e-33d5a8784dc4\nSNOTEL:845_ID_SNTL 695c7749-a3b8-4158-bd14-59d1f2c3e736\ncollecting  695c7749-a3b8-4158-bd14-59d1f2c3e736\nSNOTEL:847_MT_SNTL dca30f20-582e-40ef-be6d-aa7858be4baa\ncollecting  dca30f20-582e-40ef-be6d-aa7858be4baa\nSNOTEL:848_CA_SNTL f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nSNOTEL:849_NV_SNTL 38793f95-324b-4f01-b1a7-45e1c9353bc1\ncollecting  38793f95-324b-4f01-b1a7-45e1c9353bc1\nSNOTEL:850_MT_SNTL 4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\ncollecting  4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\nSNOTEL:852_WY_SNTL 8116acfb-8035-4d34-b9b9-b0af2c5697df\ncollecting  8116acfb-8035-4d34-b9b9-b0af2c5697df\nSNOTEL:854_NM_SNTL 9c43edf0-541f-4dbb-9fe1-42cc83d453bd\ncollecting  9c43edf0-541f-4dbb-9fe1-42cc83d453bd\nSNOTEL:855_ID_SNTL c66f40ed-f72e-4012-991c-1f3726e5c8ad\ncollecting  c66f40ed-f72e-4012-991c-1f3726e5c8ad\nSNOTEL:857_CO_SNTL 2ca6a37f-67f5-4905-864b-ddf98d956ebb\ncollecting  2ca6a37f-67f5-4905-864b-ddf98d956ebb\nSNOTEL:858_MT_SNTL b1936012-0d31-4b92-8d60-c24903b2e569\ncollecting  b1936012-0d31-4b92-8d60-c24903b2e569\nSNOTEL:859_WY_SNTL 8116acfb-8035-4d34-b9b9-b0af2c5697df\ncollecting  8116acfb-8035-4d34-b9b9-b0af2c5697df\nSNOTEL:861_AZ_SNTL a2588440-600e-41da-b2b9-1f5632ecdef6\ncollecting  a2588440-600e-41da-b2b9-1f5632ecdef6\nSNOTEL:862_MT_SNTL e776d9b6-2180-4f50-90bf-77f7b920fc3b\ncollecting  e776d9b6-2180-4f50-90bf-77f7b920fc3b\nSNOTEL:863_WA_SNTL bb65d7a1-a5d5-4c89-9ef9-f0f1db06cc58\ncollecting  bb65d7a1-a5d5-4c89-9ef9-f0f1db06cc58\nSNOTEL:864_UT_SNTL 0a820e12-033b-45d6-9ef9-d70f4c5e5b63\ncollecting  0a820e12-033b-45d6-9ef9-d70f4c5e5b63\nSNOTEL:865_UT_SNTL ad44deb7-e56d-47bd-8d64-7147493e0aee\ncollecting  ad44deb7-e56d-47bd-8d64-7147493e0aee\nSNOTEL:868_WY_SNTL 551e2612-8a22-4c44-8290-78dc0e4af85d\ncollecting  551e2612-8a22-4c44-8290-78dc0e4af85d\nSNOTEL:869_CO_SNTL 8c45801f-6377-42e1-ae0a-9b53593ff843\ncollecting  8c45801f-6377-42e1-ae0a-9b53593ff843\nSNOTEL:871_ID_SNTL 5308a803-69e6-43cd-89db-66e93f9f83af\ncollecting  5308a803-69e6-43cd-89db-66e93f9f83af\nSNOTEL:872_WY_SNTL ab89875f-3b86-4c6a-8d66-767017570dfc\ncollecting  ab89875f-3b86-4c6a-8d66-767017570dfc\nSNOTEL:873_OR_SNTL 631ed3c9-7863-4e7c-86fa-4bfb043f2851\ncollecting  631ed3c9-7863-4e7c-86fa-4bfb043f2851\nSNOTEL:874_CO_SNTL 3789f7a5-5743-4005-844d-602dadb33030\ncollecting  3789f7a5-5743-4005-844d-602dadb33030\nSNOTEL:876_MT_SNTL 99a2d4a9-63a0-43a7-976d-2a1ed822186d\ncollecting  99a2d4a9-63a0-43a7-976d-2a1ed822186d\nSNOTEL:877_AZ_SNTL 0aeaffd7-9089-49e7-85ad-2314f32cbf7c\ncollecting  0aeaffd7-9089-49e7-85ad-2314f32cbf7c\nSNOTEL:878_WY_SNTL 692c41af-2210-4dd6-916d-c99e76807447\ncollecting  692c41af-2210-4dd6-916d-c99e76807447\nSNOTEL:895_ID_SNTL f3332d55-ecc8-4644-9deb-180e42abb2eb\ncollecting  f3332d55-ecc8-4644-9deb-180e42abb2eb\nSNOTEL:896_UT_SNTL 10162c55-772d-49d2-8b1b-b1f9c86254b2\ncollecting  10162c55-772d-49d2-8b1b-b1f9c86254b2\nSNOTEL:897_WA_SNTL 360f1bcc-aa60-4052-a18a-b33da5745ff4\ncollecting  360f1bcc-aa60-4052-a18a-b33da5745ff4\nSNOTEL:899_WA_SNTL 360f1bcc-aa60-4052-a18a-b33da5745ff4\ncollecting  360f1bcc-aa60-4052-a18a-b33da5745ff4\nSNOTEL:901_MT_SNTL 89a7b0ef-1ec8-490f-9207-c93aa57a147f\ncollecting  89a7b0ef-1ec8-490f-9207-c93aa57a147f\nSNOTEL:902_AZ_SNTL 1135e377-22e6-4290-b4cd-e6739de7fd8a\ncollecting  1135e377-22e6-4290-b4cd-e6739de7fd8a\nSNOTEL:904_CO_SNTL 0d9f0708-5e8d-4eb8-b946-6441ef955516\ncollecting  0d9f0708-5e8d-4eb8-b946-6441ef955516\nSNOTEL:905_CO_SNTL 9e5bc091-13c7-46ec-8c17-8e315b7e535c\ncollecting  9e5bc091-13c7-46ec-8c17-8e315b7e535c\nSNOTEL:906_UT_SNTL 93b8483d-a510-42ff-865e-33d5a8784dc4\ncollecting  93b8483d-a510-42ff-865e-33d5a8784dc4\nSNOTEL:907_UT_SNTL ad44deb7-e56d-47bd-8d64-7147493e0aee\ncollecting  ad44deb7-e56d-47bd-8d64-7147493e0aee\nSNOTEL:909_WA_SNTL e6d48180-814d-494b-99cc-0be5cd1a0eaf\ncollecting  e6d48180-814d-494b-99cc-0be5cd1a0eaf\nSNOTEL:911_WA_SNTL 360f1bcc-aa60-4052-a18a-b33da5745ff4\ncollecting  360f1bcc-aa60-4052-a18a-b33da5745ff4\nSNOTEL:912_WA_SNTL 8e7f826f-8dc9-490a-9282-98d899a07cc7\ncollecting  8e7f826f-8dc9-490a-9282-98d899a07cc7\nSNOTEL:913_CO_SNTL 02cf33c2-c8e2-48b9-bf72-92506e97e251\ncollecting  02cf33c2-c8e2-48b9-bf72-92506e97e251\nSNOTEL:915_ID_SNTL 830bc2b9-592d-4334-842a-213ba4c0a347\ncollecting  830bc2b9-592d-4334-842a-213ba4c0a347\nSNOTEL:917_MT_SNTL 9ea23099-dd30-4b26-9de7-5d42d5dae87b\ncollecting  9ea23099-dd30-4b26-9de7-5d42d5dae87b\nSNOTEL:918_MT_SNTL 2f5c1968-2c34-4539-a9f4-38298d0de925\ncollecting  2f5c1968-2c34-4539-a9f4-38298d0de925\nSNOTEL:919_MT_SNTL eab40c22-0c15-4291-a6ce-e085a7f0f1e4\ncollecting  eab40c22-0c15-4291-a6ce-e085a7f0f1e4\nSNOTEL:920_SD_SNTL ab89875f-3b86-4c6a-8d66-767017570dfc\ncollecting  ab89875f-3b86-4c6a-8d66-767017570dfc\nSNOTEL:921_NM_SNTL 9c43edf0-541f-4dbb-9fe1-42cc83d453bd\ncollecting  9c43edf0-541f-4dbb-9fe1-42cc83d453bd\nSNOTEL:922_NM_SNTL 9c43edf0-541f-4dbb-9fe1-42cc83d453bd\ncollecting  9c43edf0-541f-4dbb-9fe1-42cc83d453bd\nSNOTEL:923_WY_SNTL 990e5974-9c60-4c9a-ba23-ddce13971178\ncollecting  990e5974-9c60-4c9a-ba23-ddce13971178\nSNOTEL:924_MT_SNTL b1936012-0d31-4b92-8d60-c24903b2e569\ncollecting  b1936012-0d31-4b92-8d60-c24903b2e569\nSNOTEL:925_OR_SNTL e13f9c1b-dca0-4c63-a64c-76f6bc725156\ncollecting  e13f9c1b-dca0-4c63-a64c-76f6bc725156\nSNOTEL:926_ID_SNTL af0463d4-f20f-4d13-bd0f-5834e2e8717b\ncollecting  af0463d4-f20f-4d13-bd0f-5834e2e8717b\nSNOTEL:927_AZ_SNTL c0e85162-6ff4-401b-b01e-cc6d7a51eac0\ncollecting  c0e85162-6ff4-401b-b01e-cc6d7a51eac0\nSNOTEL:929_MT_SNTL e467a17f-a729-4938-87a1-ac25157eed63\ncollecting  e467a17f-a729-4938-87a1-ac25157eed63\nSNOTEL:930_MT_SNTL 4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\ncollecting  4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\nSNOTEL:935_CO_SNTL 7f215a89-2a17-42f0-a2fb-f18fbc888cef\ncollecting  7f215a89-2a17-42f0-a2fb-f18fbc888cef\nSNOTEL:936_CO_SNTL a5366d95-7b9d-4b1b-a16f-99e56fab08f5\ncollecting  a5366d95-7b9d-4b1b-a16f-99e56fab08f5\nSNOTEL:937_CO_SNTL 7a266524-6e76-4d06-963f-6f977e356574\ncollecting  7a266524-6e76-4d06-963f-6f977e356574\nSNOTEL:939_CO_SNTL fde3221a-9ce3-45a9-857f-bd196b07aa05\ncollecting  fde3221a-9ce3-45a9-857f-bd196b07aa05\nSNOTEL:941_WA_SNTL 2f266b81-aad3-4c26-ac69-1bd04a208bf7\ncollecting  2f266b81-aad3-4c26-ac69-1bd04a208bf7\nSNOTEL:942_WA_SNTL cdb446bc-e801-404f-9911-9ba5c687f6af\ncollecting  cdb446bc-e801-404f-9911-9ba5c687f6af\nSNOTEL:945_OR_SNTL 0a0ea690-5b73-4459-91d5-a6948d132a48\ncollecting  0a0ea690-5b73-4459-91d5-a6948d132a48\nSNOTEL:972_UT_SNTL 10162c55-772d-49d2-8b1b-b1f9c86254b2\ncollecting  10162c55-772d-49d2-8b1b-b1f9c86254b2\nSNOTEL:974_WA_SNTL 9448e70e-32ff-4c47-b6e7-ccb1df91743b\ncollecting  9448e70e-32ff-4c47-b6e7-ccb1df91743b\nSNOTEL:975_WA_SNTL 47e625fa-e2df-43ce-84dd-8ac21fdda75a\ncollecting  47e625fa-e2df-43ce-84dd-8ac21fdda75a\nSNOTEL:978_ID_SNTL da6ce150-5daf-4a91-9fdd-a85854462b08\ncollecting  da6ce150-5daf-4a91-9fdd-a85854462b08\nSNOTEL:981_MT_SNTL e776d9b6-2180-4f50-90bf-77f7b920fc3b\ncollecting  e776d9b6-2180-4f50-90bf-77f7b920fc3b\nSNOTEL:982_WY_SNTL ab89875f-3b86-4c6a-8d66-767017570dfc\ncollecting  ab89875f-3b86-4c6a-8d66-767017570dfc\nSNOTEL:984_WA_SNTL f78ea076-10a1-45dc-a848-c08e129c6a28\ncollecting  f78ea076-10a1-45dc-a848-c08e129c6a28\nSNOTEL:988_ID_SNTL 2f5c1968-2c34-4539-a9f4-38298d0de925\ncollecting  2f5c1968-2c34-4539-a9f4-38298d0de925\nSNOTEL:989_ID_SNTL f78ea076-10a1-45dc-a848-c08e129c6a28\ncollecting  f78ea076-10a1-45dc-a848-c08e129c6a28\nSNOTEL:990_WA_SNTL cde149fe-708b-4a35-bea8-959eb9da4e0b\ncollecting  cde149fe-708b-4a35-bea8-959eb9da4e0b\nSNOTEL:992_UT_SNTL 064d7f3e-8bbd-49cd-b360-5c4590a19b9e\ncollecting  064d7f3e-8bbd-49cd-b360-5c4590a19b9e\nSNOTEL:998_WA_SNTL cde149fe-708b-4a35-bea8-959eb9da4e0b\ncollecting  cde149fe-708b-4a35-bea8-959eb9da4e0b\nSNOTEL:999_WA_SNTL e6d48180-814d-494b-99cc-0be5cd1a0eaf\ncollecting  e6d48180-814d-494b-99cc-0be5cd1a0eaf\n",
  "history_begin_time" : 1646010843193,
  "history_end_time" : 1646011035427,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "CWhWb0F0OGqE",
  "history_input" : "\n\n# reminder that if you are installing libraries in a Google Colab instance you will be prompted to restart your kernal\n\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\n\ntry:\n    ee.Initialize()\nexcept Exception as e:\n    ee.Authenticate() # this must be run in terminal instead of Geoweaver. Geoweaver doesn't support prompt.\n    ee.Initialize()\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n# read grid cell\nstation_cell_mapper_file = f\"{github_dir}/data/ready_for_training/station_cell_mapping.csv\"\n\norg_name = 'modis'\nproduct_name = f'MODIS/006/MOD10A1'\nvar_name = 'NDSI'\ncolumn_name = 'mod10a1_ndsi'\n\n#org_name = 'sentinel1'\n#product_name = 'COPERNICUS/S1_GRD'\n#var_name = 'VV'\n#column_name = 's1_grd_vv'\n\nstation_cell_mapper_df = pd.read_csv(station_cell_mapper_file)\n\nall_cell_df = pd.DataFrame(columns = ['date', column_name, 'cell_id', 'latitude', 'longitude'])\n\nfor ind in station_cell_mapper_df.index:\n    \n    try:\n      \n  \t  print(station_cell_mapper_df['station_id'][ind], station_cell_mapper_df['cell_id'][ind])\n  \t  current_cell_id = station_cell_mapper_df['cell_id'][ind]\n  \t  print(\"collecting \", current_cell_id)\n\n  \t  if os.path.exists(single_csv_file):\n  \t    print(\"exists skipping..\")\n  \t    continue\n\n  \t  longitude = station_cell_mapper_df['lon'][ind]\n  \t  latitude = station_cell_mapper_df['lat'][ind]\n\n  \t  # identify a 500 meter buffer around our Point Of Interest (POI)\n  \t  poi = ee.Geometry.Point(longitude, latitude).buffer(30)\n\n  \t  def poi_mean(img):\n  \t      reducer = img.reduceRegion(reducer=ee.Reducer.mean(), geometry=poi, scale=30)\n  \t      mean = reducer.get(var_name)\n  \t      return img.set('date', img.date().format()).set(column_name,mean)\n        \n  \t  viirs1 = ee.ImageCollection(product_name).filterDate('2022-02-20','2022-02-27')\n  \t  poi_reduced_imgs1 = viirs1.map(poi_mean)\n  \t  nested_list1 = poi_reduced_imgs1.reduceColumns(ee.Reducer.toList(2), ['date',column_name]).values().get(0)\n  \t  # dont forget we need to call the callback method \"getInfo\" to retrieve the data\n  \t  df = pd.DataFrame(nested_list1.getInfo(), columns=['date',column_name])\n      \n  \t  df['date'] = pd.to_datetime(df['date'])\n  \t  df = df.set_index('date')\n  \t  df['cell_id'] = current_cell_id\n  \t  df['latitude'] = latitude\n  \t  df['longitude'] = longitude\n  \t  #df.to_csv(single_csv_file)\n\n  \t  df_list = [all_cell_df, df]\n  \t  all_cell_df = pd.concat(df_list) # merge into big dataframe\n      \n    except Exception as e:\n      \n  \t  print(e)\n  \t  pass\n    \n    \nall_cell_df.to_csv(f\"{homedir}/Documents/GitHub/SnowCast/data/sat_testing/{org_name}/{column_name}.csv\")  \n\n\n",
  "history_output" : "/Users/joe\nCDEC:ADM 76b55900-eb3d-4d25-a538-f74302ffe72d\ncollecting  76b55900-eb3d-4d25-a538-f74302ffe72d\nname 'single_csv_file' is not defined\nCDEC:AGP f191fe19-0e81-4bc9-9980-29738a05a49b\ncollecting  f191fe19-0e81-4bc9-9980-29738a05a49b\nname 'single_csv_file' is not defined\nCDEC:ALP f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nname 'single_csv_file' is not defined\nCDEC:BCB 0a54de9c-d804-4681-9f7f-9f770a0f6d2e\ncollecting  0a54de9c-d804-4681-9f7f-9f770a0f6d2e\nname 'single_csv_file' is not defined\nCDEC:BCH 4f383fb2-6cc7-48a8-9bdb-9c5d150e6eae\ncollecting  4f383fb2-6cc7-48a8-9bdb-9c5d150e6eae\nname 'single_csv_file' is not defined\nCDEC:BFL 7cf8af73-1abf-40ad-9788-0d757201eeb0\ncollecting  7cf8af73-1abf-40ad-9788-0d757201eeb0\nname 'single_csv_file' is not defined\nCDEC:BGP 30641173-db10-4320-ab1e-c46e765a9011\ncollecting  30641173-db10-4320-ab1e-c46e765a9011\nname 'single_csv_file' is not defined\nCDEC:BIM 30ab5128-9a8f-4446-b781-faf8bafb677f\ncollecting  30ab5128-9a8f-4446-b781-faf8bafb677f\nname 'single_csv_file' is not defined\nCDEC:BKL df01bf44-46b8-4541-b0a4-ed1fae16ac38\ncollecting  df01bf44-46b8-4541-b0a4-ed1fae16ac38\nname 'single_csv_file' is not defined\nCDEC:BLA 6dd37e24-0a9c-4749-8ab6-7e26d42925d6\ncollecting  6dd37e24-0a9c-4749-8ab6-7e26d42925d6\nname 'single_csv_file' is not defined\nCDEC:BLC 018cf1a1-f945-4097-9c47-0c4690538bb5\ncollecting  018cf1a1-f945-4097-9c47-0c4690538bb5\nname 'single_csv_file' is not defined\nCDEC:BLD 962f6718-ce02-4d13-b28c-e159d1adc2d4\ncollecting  962f6718-ce02-4d13-b28c-e159d1adc2d4\nname 'single_csv_file' is not defined\nCDEC:BLK c89dc6ca-6d69-41ce-954d-b51f64aaacb1\ncollecting  c89dc6ca-6d69-41ce-954d-b51f64aaacb1\nname 'single_csv_file' is not defined\nCDEC:BLS 4bb8fe22-653c-4611-a3d8-de5b2c62d13d\ncollecting  4bb8fe22-653c-4611-a3d8-de5b2c62d13d\nname 'single_csv_file' is not defined\nCDEC:BMW d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nname 'single_csv_file' is not defined\nCDEC:BNK 65565709-caca-4ed5-a8b6-2794da371708\ncollecting  65565709-caca-4ed5-a8b6-2794da371708\nname 'single_csv_file' is not defined\nCDEC:BSK c89dc6ca-6d69-41ce-954d-b51f64aaacb1\ncollecting  c89dc6ca-6d69-41ce-954d-b51f64aaacb1\nname 'single_csv_file' is not defined\nCDEC:CDP 76b55900-eb3d-4d25-a538-f74302ffe72d\ncollecting  76b55900-eb3d-4d25-a538-f74302ffe72d\nname 'single_csv_file' is not defined\nCDEC:CHM f11515e9-f2a0-4f8c-9f2d-12b9e2dc8569\ncollecting  f11515e9-f2a0-4f8c-9f2d-12b9e2dc8569\nname 'single_csv_file' is not defined\nCDEC:CHP cc66f524-dd2b-4d3f-bf96-4941edca2879\ncollecting  cc66f524-dd2b-4d3f-bf96-4941edca2879\nname 'single_csv_file' is not defined\nCDEC:CRL 09288a61-d120-4cee-ac46-5a275a8f005c\ncollecting  09288a61-d120-4cee-ac46-5a275a8f005c\nname 'single_csv_file' is not defined\nCDEC:CSL 51ebe834-adf4-474e-871e-28ebca2bd0cc\ncollecting  51ebe834-adf4-474e-871e-28ebca2bd0cc\nname 'single_csv_file' is not defined\nCDEC:CSV 4f383fb2-6cc7-48a8-9bdb-9c5d150e6eae\ncollecting  4f383fb2-6cc7-48a8-9bdb-9c5d150e6eae\nname 'single_csv_file' is not defined\nCDEC:CWD 4f383fb2-6cc7-48a8-9bdb-9c5d150e6eae\ncollecting  4f383fb2-6cc7-48a8-9bdb-9c5d150e6eae\nname 'single_csv_file' is not defined\nCDEC:CWF 76b55900-eb3d-4d25-a538-f74302ffe72d\ncollecting  76b55900-eb3d-4d25-a538-f74302ffe72d\nname 'single_csv_file' is not defined\nCDEC:CXS c89dc6ca-6d69-41ce-954d-b51f64aaacb1\ncollecting  c89dc6ca-6d69-41ce-954d-b51f64aaacb1\nname 'single_csv_file' is not defined\nCDEC:DAN 70bfdc00-dbd2-4c44-8039-04a547f91f76\ncollecting  70bfdc00-dbd2-4c44-8039-04a547f91f76\nname 'single_csv_file' is not defined\nCDEC:DDM 01be2cc7-ef77-4e4d-80ed-c4f8139162c3\ncollecting  01be2cc7-ef77-4e4d-80ed-c4f8139162c3\nname 'single_csv_file' is not defined\nCDEC:DPO 9023330c-2766-4585-b6fe-63593c519e03\ncollecting  9023330c-2766-4585-b6fe-63593c519e03\nname 'single_csv_file' is not defined\nCDEC:DSS 76b55900-eb3d-4d25-a538-f74302ffe72d\ncollecting  76b55900-eb3d-4d25-a538-f74302ffe72d\nname 'single_csv_file' is not defined\nCDEC:EBB 962f6718-ce02-4d13-b28c-e159d1adc2d4\ncollecting  962f6718-ce02-4d13-b28c-e159d1adc2d4\nname 'single_csv_file' is not defined\nCDEC:EP5 f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nname 'single_csv_file' is not defined\nCDEC:FDC c89dc6ca-6d69-41ce-954d-b51f64aaacb1\ncollecting  c89dc6ca-6d69-41ce-954d-b51f64aaacb1\nname 'single_csv_file' is not defined\nCDEC:FLL d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nname 'single_csv_file' is not defined\nCDEC:FRN f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nname 'single_csv_file' is not defined\nCDEC:FRW ddc760c7-dc6e-4fd4-ac1a-987ba3f79748\ncollecting  ddc760c7-dc6e-4fd4-ac1a-987ba3f79748\nname 'single_csv_file' is not defined\nCDEC:GEM 690ae8d4-c0d0-4dad-a7c4-67f3df07cc78\ncollecting  690ae8d4-c0d0-4dad-a7c4-67f3df07cc78\nname 'single_csv_file' is not defined\nCDEC:GIN dbf421d4-0295-4a9f-9e20-88ac299360b1\ncollecting  dbf421d4-0295-4a9f-9e20-88ac299360b1\nname 'single_csv_file' is not defined\nCDEC:GKS 51ebe834-adf4-474e-871e-28ebca2bd0cc\ncollecting  51ebe834-adf4-474e-871e-28ebca2bd0cc\nname 'single_csv_file' is not defined\nCDEC:GNF 5ec8a57d-8d5f-4331-b1fb-9d766f42991a\ncollecting  5ec8a57d-8d5f-4331-b1fb-9d766f42991a\nname 'single_csv_file' is not defined\nCDEC:GNL 403090bc-fc9e-44fb-921b-f7eea63e9740\ncollecting  403090bc-fc9e-44fb-921b-f7eea63e9740\nname 'single_csv_file' is not defined\nCDEC:GRM 232ef8b4-938f-42d7-a6e4-647d5280edd2\ncollecting  232ef8b4-938f-42d7-a6e4-647d5280edd2\nname 'single_csv_file' is not defined\nCDEC:GRV cc8b7ef5-1c86-4bd2-8cb9-969c7df1884e\ncollecting  cc8b7ef5-1c86-4bd2-8cb9-969c7df1884e\nname 'single_csv_file' is not defined\nCDEC:GRZ 018cf1a1-f945-4097-9c47-0c4690538bb5\ncollecting  018cf1a1-f945-4097-9c47-0c4690538bb5\nname 'single_csv_file' is not defined\nCDEC:HGM d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nname 'single_csv_file' is not defined\nCDEC:HIG 65565709-caca-4ed5-a8b6-2794da371708\ncollecting  65565709-caca-4ed5-a8b6-2794da371708\nname 'single_csv_file' is not defined\nCDEC:HMB df01bf44-46b8-4541-b0a4-ed1fae16ac38\ncollecting  df01bf44-46b8-4541-b0a4-ed1fae16ac38\nname 'single_csv_file' is not defined\nCDEC:HNT 39dd8dce-b4a1-4db5-bc31-fba72181cf5e\ncollecting  39dd8dce-b4a1-4db5-bc31-fba72181cf5e\nname 'single_csv_file' is not defined\nCDEC:HOR d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nname 'single_csv_file' is not defined\nCDEC:HRK df01bf44-46b8-4541-b0a4-ed1fae16ac38\ncollecting  df01bf44-46b8-4541-b0a4-ed1fae16ac38\nname 'single_csv_file' is not defined\nCDEC:HRS 49b01e43-f719-450f-b7c6-556b08e9ef4d\ncollecting  49b01e43-f719-450f-b7c6-556b08e9ef4d\nname 'single_csv_file' is not defined\nCDEC:HVN d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nname 'single_csv_file' is not defined\nCDEC:HYS 51ebe834-adf4-474e-871e-28ebca2bd0cc\ncollecting  51ebe834-adf4-474e-871e-28ebca2bd0cc\nname 'single_csv_file' is not defined\nCDEC:IDC 018cf1a1-f945-4097-9c47-0c4690538bb5\ncollecting  018cf1a1-f945-4097-9c47-0c4690538bb5\nname 'single_csv_file' is not defined\nCDEC:IDP 018cf1a1-f945-4097-9c47-0c4690538bb5\ncollecting  018cf1a1-f945-4097-9c47-0c4690538bb5\nname 'single_csv_file' is not defined\nCDEC:INN 018cf1a1-f945-4097-9c47-0c4690538bb5\ncollecting  018cf1a1-f945-4097-9c47-0c4690538bb5\nname 'single_csv_file' is not defined\nCDEC:KTL 147d5eb4-e574-47e4-994a-8a2908c06050\ncollecting  147d5eb4-e574-47e4-994a-8a2908c06050\nname 'single_csv_file' is not defined\nCDEC:LBD 74f8c8bc-2f60-4232-b447-43459d5d22f0\ncollecting  74f8c8bc-2f60-4232-b447-43459d5d22f0\nname 'single_csv_file' is not defined\nCDEC:LLP 6dd37e24-0a9c-4749-8ab6-7e26d42925d6\ncollecting  6dd37e24-0a9c-4749-8ab6-7e26d42925d6\nname 'single_csv_file' is not defined\nCDEC:LVM 01be2cc7-ef77-4e4d-80ed-c4f8139162c3\ncollecting  01be2cc7-ef77-4e4d-80ed-c4f8139162c3\nname 'single_csv_file' is not defined\nCDEC:LVT 01be2cc7-ef77-4e4d-80ed-c4f8139162c3\ncollecting  01be2cc7-ef77-4e4d-80ed-c4f8139162c3\nname 'single_csv_file' is not defined\nCDEC:MDW 018cf1a1-f945-4097-9c47-0c4690538bb5\ncollecting  018cf1a1-f945-4097-9c47-0c4690538bb5\nname 'single_csv_file' is not defined\nCDEC:MED 00c4db22-a423-41a4-ada6-a8b1b04153a4\ncollecting  00c4db22-a423-41a4-ada6-a8b1b04153a4\nname 'single_csv_file' is not defined\nCDEC:MHP ec0952b6-f119-4f40-bf47-343d71245ddc\ncollecting  ec0952b6-f119-4f40-bf47-343d71245ddc\nname 'single_csv_file' is not defined\nCDEC:MNT 74f8c8bc-2f60-4232-b447-43459d5d22f0\ncollecting  74f8c8bc-2f60-4232-b447-43459d5d22f0\nname 'single_csv_file' is not defined\nCDEC:MRL d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nname 'single_csv_file' is not defined\nCDEC:MSK d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nname 'single_csv_file' is not defined\nCDEC:MTM b5c7343d-a4a9-4da9-aee3-36539a545af6\ncollecting  b5c7343d-a4a9-4da9-aee3-36539a545af6\nname 'single_csv_file' is not defined\nCDEC:PDS 17da8ab4-6dd8-481e-a025-7574765ef9b1\ncollecting  17da8ab4-6dd8-481e-a025-7574765ef9b1\nname 'single_csv_file' is not defined\nCDEC:PET 65565709-caca-4ed5-a8b6-2794da371708\ncollecting  65565709-caca-4ed5-a8b6-2794da371708\nname 'single_csv_file' is not defined\nCDEC:PSC 4f383fb2-6cc7-48a8-9bdb-9c5d150e6eae\ncollecting  4f383fb2-6cc7-48a8-9bdb-9c5d150e6eae\nname 'single_csv_file' is not defined\nCDEC:PSN 74f8c8bc-2f60-4232-b447-43459d5d22f0\ncollecting  74f8c8bc-2f60-4232-b447-43459d5d22f0\nname 'single_csv_file' is not defined\nCDEC:QUA d563ff8c-31c3-44a9-8fd3-2f8bc68b21b4\ncollecting  d563ff8c-31c3-44a9-8fd3-2f8bc68b21b4\nname 'single_csv_file' is not defined\nCDEC:RBP 51ebe834-adf4-474e-871e-28ebca2bd0cc\ncollecting  51ebe834-adf4-474e-871e-28ebca2bd0cc\nname 'single_csv_file' is not defined\nCDEC:RCC 018cf1a1-f945-4097-9c47-0c4690538bb5\ncollecting  018cf1a1-f945-4097-9c47-0c4690538bb5\nname 'single_csv_file' is not defined\nCDEC:RCK cbe04952-a2ae-4525-98c5-a644c9a5ddc5\ncollecting  cbe04952-a2ae-4525-98c5-a644c9a5ddc5\nname 'single_csv_file' is not defined\nCDEC:RP2 f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nname 'single_csv_file' is not defined\nCDEC:RRM 7cf8af73-1abf-40ad-9788-0d757201eeb0\ncollecting  7cf8af73-1abf-40ad-9788-0d757201eeb0\nname 'single_csv_file' is not defined\nCDEC:RTL 147d5eb4-e574-47e4-994a-8a2908c06050\ncollecting  147d5eb4-e574-47e4-994a-8a2908c06050\nname 'single_csv_file' is not defined\nCDEC:SCN c89dc6ca-6d69-41ce-954d-b51f64aaacb1\ncollecting  c89dc6ca-6d69-41ce-954d-b51f64aaacb1\nname 'single_csv_file' is not defined\nCDEC:SCT 7cf8af73-1abf-40ad-9788-0d757201eeb0\ncollecting  7cf8af73-1abf-40ad-9788-0d757201eeb0\nname 'single_csv_file' is not defined\nCDEC:SDF 65565709-caca-4ed5-a8b6-2794da371708\ncollecting  65565709-caca-4ed5-a8b6-2794da371708\nname 'single_csv_file' is not defined\nCDEC:SDW 74f8c8bc-2f60-4232-b447-43459d5d22f0\ncollecting  74f8c8bc-2f60-4232-b447-43459d5d22f0\nname 'single_csv_file' is not defined\nCDEC:SHM 7cf8af73-1abf-40ad-9788-0d757201eeb0\ncollecting  7cf8af73-1abf-40ad-9788-0d757201eeb0\nname 'single_csv_file' is not defined\nCDEC:SIL c89dc6ca-6d69-41ce-954d-b51f64aaacb1\ncollecting  c89dc6ca-6d69-41ce-954d-b51f64aaacb1\nname 'single_csv_file' is not defined\nCDEC:SLM 962f6718-ce02-4d13-b28c-e159d1adc2d4\ncollecting  962f6718-ce02-4d13-b28c-e159d1adc2d4\nname 'single_csv_file' is not defined\nCDEC:SLT 65565709-caca-4ed5-a8b6-2794da371708\ncollecting  65565709-caca-4ed5-a8b6-2794da371708\nname 'single_csv_file' is not defined\nCDEC:SPS 01be2cc7-ef77-4e4d-80ed-c4f8139162c3\ncollecting  01be2cc7-ef77-4e4d-80ed-c4f8139162c3\nname 'single_csv_file' is not defined\nCDEC:SPT 962f6718-ce02-4d13-b28c-e159d1adc2d4\ncollecting  962f6718-ce02-4d13-b28c-e159d1adc2d4\nname 'single_csv_file' is not defined\nCDEC:SQV f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nname 'single_csv_file' is not defined\nCDEC:SSM 147d5eb4-e574-47e4-994a-8a2908c06050\ncollecting  147d5eb4-e574-47e4-994a-8a2908c06050\nname 'single_csv_file' is not defined\nCDEC:SWM 6e96bf06-cbc5-45b5-a36b-e37864226099\ncollecting  6e96bf06-cbc5-45b5-a36b-e37864226099\nname 'single_csv_file' is not defined\nCDEC:TCC f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nname 'single_csv_file' is not defined\nCDEC:TK2 f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nname 'single_csv_file' is not defined\nCDEC:TMR c7e3f62c-a812-4342-8e4c-3a6a5dd96255\ncollecting  c7e3f62c-a812-4342-8e4c-3a6a5dd96255\nname 'single_csv_file' is not defined\nCDEC:TNY a8e91cfa-724a-4114-a9d4-291785ff31f8\ncollecting  a8e91cfa-724a-4114-a9d4-291785ff31f8\nname 'single_csv_file' is not defined\nCDEC:TUM 2dde4be2-b6fd-47e8-b53d-88b59d74fde1\ncollecting  2dde4be2-b6fd-47e8-b53d-88b59d74fde1\nname 'single_csv_file' is not defined\nCDEC:UBC b2e9cb6b-b45a-4cab-8333-247cb4c0b51b\ncollecting  b2e9cb6b-b45a-4cab-8333-247cb4c0b51b\nname 'single_csv_file' is not defined\nCDEC:UTY 46f21569-8ecf-4c46-b65b-d80fa83a20d5\ncollecting  46f21569-8ecf-4c46-b65b-d80fa83a20d5\nname 'single_csv_file' is not defined\nCDEC:VLC 643c05b6-03bc-4024-8000-2228f4b5a7ad\ncollecting  643c05b6-03bc-4024-8000-2228f4b5a7ad\nname 'single_csv_file' is not defined\nCDEC:VRG fb078c7e-4975-4c7f-8f42-180386ac8c3c\ncollecting  fb078c7e-4975-4c7f-8f42-180386ac8c3c\nname 'single_csv_file' is not defined\nCDEC:VVL 51ebe834-adf4-474e-871e-28ebca2bd0cc\ncollecting  51ebe834-adf4-474e-871e-28ebca2bd0cc\nname 'single_csv_file' is not defined\nCDEC:WC3 f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nname 'single_csv_file' is not defined\nCDEC:WHW dba335b6-9d97-4a89-9ff3-888a8a45575f\ncollecting  dba335b6-9d97-4a89-9ff3-888a8a45575f\nname 'single_csv_file' is not defined\nCDEC:WTM 057fb61e-ce45-4423-9ef2-b52d8c1237e9\ncollecting  057fb61e-ce45-4423-9ef2-b52d8c1237e9\nname 'single_csv_file' is not defined\nCDEC:WWC 50f7b567-4066-4437-a335-71aff4c94a2c\ncollecting  50f7b567-4066-4437-a335-71aff4c94a2c\nname 'single_csv_file' is not defined\nSNOTEL:1000_OR_SNTL 5e252b65-58dd-421f-a0db-3d4669bfb235\ncollecting  5e252b65-58dd-421f-a0db-3d4669bfb235\nname 'single_csv_file' is not defined\nSNOTEL:1005_CO_SNTL efada0af-09bf-4013-a1c6-0837f8ff59c5\ncollecting  efada0af-09bf-4013-a1c6-0837f8ff59c5\nname 'single_csv_file' is not defined\nSNOTEL:1009_MT_SNTL 517aefce-a617-4251-acb9-c5faf0b7fdf3\ncollecting  517aefce-a617-4251-acb9-c5faf0b7fdf3\nname 'single_csv_file' is not defined\nSNOTEL:1010_OR_SNTL 0a0ea690-5b73-4459-91d5-a6948d132a48\ncollecting  0a0ea690-5b73-4459-91d5-a6948d132a48\nname 'single_csv_file' is not defined\nSNOTEL:1011_WA_SNTL e6d48180-814d-494b-99cc-0be5cd1a0eaf\ncollecting  e6d48180-814d-494b-99cc-0be5cd1a0eaf\nname 'single_csv_file' is not defined\nSNOTEL:1012_WA_SNTL cdfc27f0-b990-45f7-bac6-7c674cd157ac\ncollecting  cdfc27f0-b990-45f7-bac6-7c674cd157ac\nname 'single_csv_file' is not defined\nSNOTEL:1013_UT_SNTL 2222b7b3-f48b-4cea-90bf-8e7245d002ea\ncollecting  2222b7b3-f48b-4cea-90bf-8e7245d002ea\nname 'single_csv_file' is not defined\nSNOTEL:1014_CO_SNTL cad51334-b3af-4c23-85c3-451c3447560a\ncollecting  cad51334-b3af-4c23-85c3-451c3447560a\nname 'single_csv_file' is not defined\nSNOTEL:1015_WY_SNTL 8116acfb-8035-4d34-b9b9-b0af2c5697df\ncollecting  8116acfb-8035-4d34-b9b9-b0af2c5697df\nname 'single_csv_file' is not defined\nSNOTEL:1016_ID_SNTL c66f40ed-f72e-4012-991c-1f3726e5c8ad\ncollecting  c66f40ed-f72e-4012-991c-1f3726e5c8ad\nname 'single_csv_file' is not defined\nSNOTEL:1017_NM_SNTL 6afdc499-9686-4451-b207-13df777df662\ncollecting  6afdc499-9686-4451-b207-13df777df662\nname 'single_csv_file' is not defined\nSNOTEL:1030_CO_SNTL 02cf33c2-c8e2-48b9-bf72-92506e97e251\ncollecting  02cf33c2-c8e2-48b9-bf72-92506e97e251\nname 'single_csv_file' is not defined\nSNOTEL:1031_CO_SNTL 8c45801f-6377-42e1-ae0a-9b53593ff843\ncollecting  8c45801f-6377-42e1-ae0a-9b53593ff843\nname 'single_csv_file' is not defined\nSNOTEL:1032_CO_SNTL 9f0599d8-81f3-4ab5-b275-48a6ddaaae5b\ncollecting  9f0599d8-81f3-4ab5-b275-48a6ddaaae5b\nname 'single_csv_file' is not defined\nSNOTEL:1033_CO_SNTL 86257c69-a8f1-43b1-9e07-73129e2c3fbc\ncollecting  86257c69-a8f1-43b1-9e07-73129e2c3fbc\nname 'single_csv_file' is not defined\nSNOTEL:1034_NM_SNTL 43be1328-02b0-4cc1-8e9b-75842908cee3\ncollecting  43be1328-02b0-4cc1-8e9b-75842908cee3\nname 'single_csv_file' is not defined\nSNOTEL:1039_UT_SNTL eeb0a123-9482-4946-ab3f-9e63541cb655\ncollecting  eeb0a123-9482-4946-ab3f-9e63541cb655\nname 'single_csv_file' is not defined\nSNOTEL:1040_CO_SNTL f62e6b4d-7f9d-4139-bac4-59f084fb09cd\ncollecting  f62e6b4d-7f9d-4139-bac4-59f084fb09cd\nname 'single_csv_file' is not defined\nSNOTEL:1043_WA_SNTL c59f438c-f00a-476a-938e-efd828e0d083\ncollecting  c59f438c-f00a-476a-938e-efd828e0d083\nname 'single_csv_file' is not defined\nSNOTEL:1044_OR_SNTL 7acd0d51-ff30-42a3-9338-590432bd0e43\ncollecting  7acd0d51-ff30-42a3-9338-590432bd0e43\nname 'single_csv_file' is not defined\nSNOTEL:1045_WY_SNTL 3b5bfd37-070c-4ee9-a470-c9338851e270\ncollecting  3b5bfd37-070c-4ee9-a470-c9338851e270\nname 'single_csv_file' is not defined\nSNOTEL:1046_WY_SNTL 3b5bfd37-070c-4ee9-a470-c9338851e270\ncollecting  3b5bfd37-070c-4ee9-a470-c9338851e270\nname 'single_csv_file' is not defined\nSNOTEL:1048_NM_SNTL 43be1328-02b0-4cc1-8e9b-75842908cee3\ncollecting  43be1328-02b0-4cc1-8e9b-75842908cee3\nname 'single_csv_file' is not defined\nSNOTEL:1050_CA_SNTL d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nname 'single_csv_file' is not defined\nSNOTEL:1051_CA_SNTL c89dc6ca-6d69-41ce-954d-b51f64aaacb1\ncollecting  c89dc6ca-6d69-41ce-954d-b51f64aaacb1\nname 'single_csv_file' is not defined\nSNOTEL:1052_CA_SNTL 74f8c8bc-2f60-4232-b447-43459d5d22f0\ncollecting  74f8c8bc-2f60-4232-b447-43459d5d22f0\nname 'single_csv_file' is not defined\nSNOTEL:1053_ID_SNTL 2f5c1968-2c34-4539-a9f4-38298d0de925\ncollecting  2f5c1968-2c34-4539-a9f4-38298d0de925\nname 'single_csv_file' is not defined\nSNOTEL:1054_UT_SNTL 10162c55-772d-49d2-8b1b-b1f9c86254b2\ncollecting  10162c55-772d-49d2-8b1b-b1f9c86254b2\nname 'single_csv_file' is not defined\nSNOTEL:1058_CO_SNTL c340219b-307b-412b-9368-b50639bd372d\ncollecting  c340219b-307b-412b-9368-b50639bd372d\nname 'single_csv_file' is not defined\nSNOTEL:1061_CO_SNTL 02cf33c2-c8e2-48b9-bf72-92506e97e251\ncollecting  02cf33c2-c8e2-48b9-bf72-92506e97e251\nname 'single_csv_file' is not defined\nSNOTEL:1065_UT_SNTL 24cd85fa-6aee-4556-bb8a-b6696eb72a19\ncollecting  24cd85fa-6aee-4556-bb8a-b6696eb72a19\nname 'single_csv_file' is not defined\nSNOTEL:1066_UT_SNTL 24cd85fa-6aee-4556-bb8a-b6696eb72a19\ncollecting  24cd85fa-6aee-4556-bb8a-b6696eb72a19\nname 'single_csv_file' is not defined\nSNOTEL:1067_CA_SNTL c89dc6ca-6d69-41ce-954d-b51f64aaacb1\ncollecting  c89dc6ca-6d69-41ce-954d-b51f64aaacb1\nname 'single_csv_file' is not defined\nSNOTEL:1068_WA_SNTL bfda850c-3027-4e91-afcb-cca5e73e4a03\ncollecting  bfda850c-3027-4e91-afcb-cca5e73e4a03\nname 'single_csv_file' is not defined\nSNOTEL:1077_OR_SNTL 5e252b65-58dd-421f-a0db-3d4669bfb235\ncollecting  5e252b65-58dd-421f-a0db-3d4669bfb235\nname 'single_csv_file' is not defined\nSNOTEL:1079_OR_SNTL f78ea076-10a1-45dc-a848-c08e129c6a28\ncollecting  f78ea076-10a1-45dc-a848-c08e129c6a28\nname 'single_csv_file' is not defined\nSNOTEL:1082_WY_SNTL ce76ce00-c8b5-4597-8ca3-1ec9db795b50\ncollecting  ce76ce00-c8b5-4597-8ca3-1ec9db795b50\nname 'single_csv_file' is not defined\nSNOTEL:1084_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nname 'single_csv_file' is not defined\nSNOTEL:1085_WA_SNTL 9474e816-b673-4e6d-83e0-28c274945bef\ncollecting  9474e816-b673-4e6d-83e0-28c274945bef\nname 'single_csv_file' is not defined\nSNOTEL:1098_UT_SNTL 2222b7b3-f48b-4cea-90bf-8e7245d002ea\ncollecting  2222b7b3-f48b-4cea-90bf-8e7245d002ea\nname 'single_csv_file' is not defined\nSNOTEL:1099_UT_SNTL ad44deb7-e56d-47bd-8d64-7147493e0aee\ncollecting  ad44deb7-e56d-47bd-8d64-7147493e0aee\nname 'single_csv_file' is not defined\nSNOTEL:1100_CO_SNTL b99b0ffd-6fa9-482c-8511-f7b87e705d35\ncollecting  b99b0ffd-6fa9-482c-8511-f7b87e705d35\nname 'single_csv_file' is not defined\nSNOTEL:1101_CO_SNTL e833aad1-6da3-4413-b25e-b2ab5b2029c0\ncollecting  e833aad1-6da3-4413-b25e-b2ab5b2029c0\nname 'single_csv_file' is not defined\nSNOTEL:1104_WA_SNTL cdfc27f0-b990-45f7-bac6-7c674cd157ac\ncollecting  cdfc27f0-b990-45f7-bac6-7c674cd157ac\nname 'single_csv_file' is not defined\nSNOTEL:1105_MT_SNTL f46e7d90-a754-44a8-b262-63f5c401a0ab\ncollecting  f46e7d90-a754-44a8-b262-63f5c401a0ab\nname 'single_csv_file' is not defined\nSNOTEL:1107_WA_SNTL 0f46ad2b-4b1f-4232-8e46-be7122d53b86\ncollecting  0f46ad2b-4b1f-4232-8e46-be7122d53b86\nname 'single_csv_file' is not defined\nSNOTEL:1109_WA_SNTL cdfc27f0-b990-45f7-bac6-7c674cd157ac\ncollecting  cdfc27f0-b990-45f7-bac6-7c674cd157ac\nname 'single_csv_file' is not defined\nSNOTEL:1110_NV_SNTL 8ca1aaab-07de-4532-a99f-4ab8bce2f862\ncollecting  8ca1aaab-07de-4532-a99f-4ab8bce2f862\nname 'single_csv_file' is not defined\nSNOTEL:1111_NV_SNTL 8ca1aaab-07de-4532-a99f-4ab8bce2f862\ncollecting  8ca1aaab-07de-4532-a99f-4ab8bce2f862\nname 'single_csv_file' is not defined\nSNOTEL:1113_UT_SNTL 2222b7b3-f48b-4cea-90bf-8e7245d002ea\ncollecting  2222b7b3-f48b-4cea-90bf-8e7245d002ea\nname 'single_csv_file' is not defined\nSNOTEL:1114_UT_SNTL 2222b7b3-f48b-4cea-90bf-8e7245d002ea\ncollecting  2222b7b3-f48b-4cea-90bf-8e7245d002ea\nname 'single_csv_file' is not defined\nSNOTEL:1115_UT_SNTL 2222b7b3-f48b-4cea-90bf-8e7245d002ea\ncollecting  2222b7b3-f48b-4cea-90bf-8e7245d002ea\nname 'single_csv_file' is not defined\nSNOTEL:1119_WY_SNTL 8116acfb-8035-4d34-b9b9-b0af2c5697df\ncollecting  8116acfb-8035-4d34-b9b9-b0af2c5697df\nname 'single_csv_file' is not defined\nSNOTEL:1120_CO_SNTL f62e6b4d-7f9d-4139-bac4-59f084fb09cd\ncollecting  f62e6b4d-7f9d-4139-bac4-59f084fb09cd\nname 'single_csv_file' is not defined\nSNOTEL:1121_AZ_SNTL c0e85162-6ff4-401b-b01e-cc6d7a51eac0\ncollecting  c0e85162-6ff4-401b-b01e-cc6d7a51eac0\nname 'single_csv_file' is not defined\nSNOTEL:1122_CO_SNTL e4473542-1804-41c0-82b2-eaddc245845d\ncollecting  e4473542-1804-41c0-82b2-eaddc245845d\nname 'single_csv_file' is not defined\nSNOTEL:1123_CO_SNTL e4473542-1804-41c0-82b2-eaddc245845d\ncollecting  e4473542-1804-41c0-82b2-eaddc245845d\nname 'single_csv_file' is not defined\nSNOTEL:1124_CO_SNTL aa0d6340-c817-48c9-8727-8d3457606381\ncollecting  aa0d6340-c817-48c9-8727-8d3457606381\nname 'single_csv_file' is not defined\nSNOTEL:1127_AZ_SNTL 1135e377-22e6-4290-b4cd-e6739de7fd8a\ncollecting  1135e377-22e6-4290-b4cd-e6739de7fd8a\nname 'single_csv_file' is not defined\nSNOTEL:1128_CO_SNTL f25cdbec-2f14-42c5-a6ef-a60f3a90caff\ncollecting  f25cdbec-2f14-42c5-a6ef-a60f3a90caff\nname 'single_csv_file' is not defined\nSNOTEL:1129_WA_SNTL 06ec1554-a0ea-41cf-85f8-43f4b48c7599\ncollecting  06ec1554-a0ea-41cf-85f8-43f4b48c7599\nname 'single_csv_file' is not defined\nSNOTEL:1131_WY_SNTL 02c3ec4a-8de4-4284-9ec1-5a942d3d098e\ncollecting  02c3ec4a-8de4-4284-9ec1-5a942d3d098e\nname 'single_csv_file' is not defined\nSNOTEL:1132_WY_SNTL c5a82752-3e4b-43ec-8011-9111b9bfcb89\ncollecting  c5a82752-3e4b-43ec-8011-9111b9bfcb89\nname 'single_csv_file' is not defined\nSNOTEL:1133_WY_SNTL 679fe096-5475-4d4d-b0f8-81e32de889aa\ncollecting  679fe096-5475-4d4d-b0f8-81e32de889aa\nname 'single_csv_file' is not defined\nSNOTEL:1134_WY_SNTL 990e5974-9c60-4c9a-ba23-ddce13971178\ncollecting  990e5974-9c60-4c9a-ba23-ddce13971178\nname 'single_csv_file' is not defined\nSNOTEL:1135_UT_SNTL 064d7f3e-8bbd-49cd-b360-5c4590a19b9e\ncollecting  064d7f3e-8bbd-49cd-b360-5c4590a19b9e\nname 'single_csv_file' is not defined\nSNOTEL:1136_NV_SNTL 875622b7-5253-43d2-8e0f-348767860eb9\ncollecting  875622b7-5253-43d2-8e0f-348767860eb9\nname 'single_csv_file' is not defined\nSNOTEL:1138_NM_SNTL eb1d889a-c427-49e1-95a1-fa6577002c9b\ncollecting  eb1d889a-c427-49e1-95a1-fa6577002c9b\nname 'single_csv_file' is not defined\nSNOTEL:1139_AZ_SNTL a2588440-600e-41da-b2b9-1f5632ecdef6\ncollecting  a2588440-600e-41da-b2b9-1f5632ecdef6\nname 'single_csv_file' is not defined\nSNOTEL:1140_AZ_SNTL 972ab3b1-7445-4f57-a1a1-c3be4c257869\ncollecting  972ab3b1-7445-4f57-a1a1-c3be4c257869\nname 'single_csv_file' is not defined\nSNOTEL:1141_CO_SNTL 09f879b9-4378-479e-949b-cdc3bec8f59f\ncollecting  09f879b9-4378-479e-949b-cdc3bec8f59f\nname 'single_csv_file' is not defined\nSNOTEL:1143_AZ_SNTL e925f8e6-6eee-4fa7-9034-41eb9917df5e\ncollecting  e925f8e6-6eee-4fa7-9034-41eb9917df5e\nname 'single_csv_file' is not defined\nSNOTEL:1144_MT_SNTL d37ccc2e-7127-48ec-9425-2e77681c3635\ncollecting  d37ccc2e-7127-48ec-9425-2e77681c3635\nname 'single_csv_file' is not defined\nSNOTEL:1146_UT_SNTL ba4b2f3f-c8e3-4535-9781-426e4f77ba4c\ncollecting  ba4b2f3f-c8e3-4535-9781-426e4f77ba4c\nname 'single_csv_file' is not defined\nSNOTEL:1147_NV_SNTL 38793f95-324b-4f01-b1a7-45e1c9353bc1\ncollecting  38793f95-324b-4f01-b1a7-45e1c9353bc1\nname 'single_csv_file' is not defined\nSNOTEL:1148_UT_SNTL 55d3e9a6-e153-43c3-a66c-cd60711ff4a9\ncollecting  55d3e9a6-e153-43c3-a66c-cd60711ff4a9\nname 'single_csv_file' is not defined\nSNOTEL:1149_UT_SNTL ad44deb7-e56d-47bd-8d64-7147493e0aee\ncollecting  ad44deb7-e56d-47bd-8d64-7147493e0aee\nname 'single_csv_file' is not defined\nSNOTEL:1150_NV_SNTL 38793f95-324b-4f01-b1a7-45e1c9353bc1\ncollecting  38793f95-324b-4f01-b1a7-45e1c9353bc1\nname 'single_csv_file' is not defined\nSNOTEL:1152_NV_SNTL 38793f95-324b-4f01-b1a7-45e1c9353bc1\ncollecting  38793f95-324b-4f01-b1a7-45e1c9353bc1\nname 'single_csv_file' is not defined\nSNOTEL:1154_UT_SNTL 55d3e9a6-e153-43c3-a66c-cd60711ff4a9\ncollecting  55d3e9a6-e153-43c3-a66c-cd60711ff4a9\nname 'single_csv_file' is not defined\nSNOTEL:1155_NV_SNTL 38793f95-324b-4f01-b1a7-45e1c9353bc1\ncollecting  38793f95-324b-4f01-b1a7-45e1c9353bc1\nname 'single_csv_file' is not defined\nSNOTEL:1156_UT_SNTL 7b636fe2-1760-45c5-afce-505f2e927163\ncollecting  7b636fe2-1760-45c5-afce-505f2e927163\nname 'single_csv_file' is not defined\nSNOTEL:1159_WA_SNTL dc31c331-837b-4b59-b184-051321e9489c\ncollecting  dc31c331-837b-4b59-b184-051321e9489c\nname 'single_csv_file' is not defined\nSNOTEL:1160_CO_SNTL 12bde9ee-0e0a-49ac-ab19-b410adb61b3c\ncollecting  12bde9ee-0e0a-49ac-ab19-b410adb61b3c\nname 'single_csv_file' is not defined\nSNOTEL:1161_CO_SNTL 9f0599d8-81f3-4ab5-b275-48a6ddaaae5b\ncollecting  9f0599d8-81f3-4ab5-b275-48a6ddaaae5b\nname 'single_csv_file' is not defined\nSNOTEL:1162_UT_SNTL c0568d62-49c7-4d9f-beba-ac0fb3e064c5\ncollecting  c0568d62-49c7-4d9f-beba-ac0fb3e064c5\nname 'single_csv_file' is not defined\nSNOTEL:1166_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nname 'single_csv_file' is not defined\nSNOTEL:1167_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nname 'single_csv_file' is not defined\nSNOTEL:1168_NM_SNTL e3473791-6153-49bc-a2ed-0b1e3e243942\ncollecting  e3473791-6153-49bc-a2ed-0b1e3e243942\nname 'single_csv_file' is not defined\nSNOTEL:1169_NM_SNTL e3473791-6153-49bc-a2ed-0b1e3e243942\ncollecting  e3473791-6153-49bc-a2ed-0b1e3e243942\nname 'single_csv_file' is not defined\nSNOTEL:1170_NM_SNTL e3473791-6153-49bc-a2ed-0b1e3e243942\ncollecting  e3473791-6153-49bc-a2ed-0b1e3e243942\nname 'single_csv_file' is not defined\nSNOTEL:1171_WA_SNTL 47e625fa-e2df-43ce-84dd-8ac21fdda75a\ncollecting  47e625fa-e2df-43ce-84dd-8ac21fdda75a\nname 'single_csv_file' is not defined\nSNOTEL:1172_NM_SNTL 674e34ce-8b77-422b-ab14-c6c3a0183e39\ncollecting  674e34ce-8b77-422b-ab14-c6c3a0183e39\nname 'single_csv_file' is not defined\nSNOTEL:1184_UT_SNTL 9813294e-a28e-45c0-976d-a6fa65d87927\ncollecting  9813294e-a28e-45c0-976d-a6fa65d87927\nname 'single_csv_file' is not defined\nSNOTEL:1185_CO_SNTL 548ff935-a421-4f4c-8eef-0bb19ed6c5f8\ncollecting  548ff935-a421-4f4c-8eef-0bb19ed6c5f8\nname 'single_csv_file' is not defined\nSNOTEL:1186_CO_SNTL cad51334-b3af-4c23-85c3-451c3447560a\ncollecting  cad51334-b3af-4c23-85c3-451c3447560a\nname 'single_csv_file' is not defined\nSNOTEL:1187_CO_SNTL f9f7132d-56a2-43e2-baba-312f34dbaeed\ncollecting  f9f7132d-56a2-43e2-baba-312f34dbaeed\nname 'single_csv_file' is not defined\nSNOTEL:1192_UT_SNTL a28a3caf-eea2-414f-8003-62ac82daaafa\ncollecting  a28a3caf-eea2-414f-8003-62ac82daaafa\nname 'single_csv_file' is not defined\nSNOTEL:1195_NV_SNTL f1f17cee-3fca-44bc-8974-b72d5f995a4a\ncollecting  f1f17cee-3fca-44bc-8974-b72d5f995a4a\nname 'single_csv_file' is not defined\nSNOTEL:1196_WY_SNTL 14c19b34-6359-4d3f-865e-0b9852a0e958\ncollecting  14c19b34-6359-4d3f-865e-0b9852a0e958\nname 'single_csv_file' is not defined\nSNOTEL:1197_UT_SNTL 55d3e9a6-e153-43c3-a66c-cd60711ff4a9\ncollecting  55d3e9a6-e153-43c3-a66c-cd60711ff4a9\nname 'single_csv_file' is not defined\nSNOTEL:1214_UT_SNTL 93b8483d-a510-42ff-865e-33d5a8784dc4\ncollecting  93b8483d-a510-42ff-865e-33d5a8784dc4\nname 'single_csv_file' is not defined\nSNOTEL:1215_UT_SNTL 20b97bae-60d6-466d-aca9-334d9b2d63b6\ncollecting  20b97bae-60d6-466d-aca9-334d9b2d63b6\nname 'single_csv_file' is not defined\nSNOTEL:1216_UT_SNTL 0a820e12-033b-45d6-9ef9-d70f4c5e5b63\ncollecting  0a820e12-033b-45d6-9ef9-d70f4c5e5b63\nname 'single_csv_file' is not defined\nSNOTEL:1222_UT_SNTL ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\ncollecting  ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\nname 'single_csv_file' is not defined\nSNOTEL:1223_UT_SNTL cfe58efd-ce2a-495a-90cd-6826f704ebee\ncollecting  cfe58efd-ce2a-495a-90cd-6826f704ebee\nname 'single_csv_file' is not defined\nSNOTEL:1224_UT_SNTL 9813294e-a28e-45c0-976d-a6fa65d87927\ncollecting  9813294e-a28e-45c0-976d-a6fa65d87927\nname 'single_csv_file' is not defined\nSNOTEL:1225_UT_SNTL 7bc3c413-4709-4ddd-a2ad-99f6cad9436c\ncollecting  7bc3c413-4709-4ddd-a2ad-99f6cad9436c\nname 'single_csv_file' is not defined\nSNOTEL:1226_UT_SNTL ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\ncollecting  ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\nname 'single_csv_file' is not defined\nSNOTEL:1227_UT_SNTL ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\ncollecting  ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\nname 'single_csv_file' is not defined\nSNOTEL:1228_UT_SNTL 9813294e-a28e-45c0-976d-a6fa65d87927\ncollecting  9813294e-a28e-45c0-976d-a6fa65d87927\nname 'single_csv_file' is not defined\nSNOTEL:1231_WA_SNTL 06ec1554-a0ea-41cf-85f8-43f4b48c7599\ncollecting  06ec1554-a0ea-41cf-85f8-43f4b48c7599\nname 'single_csv_file' is not defined\nSNOTEL:1236_UT_SNTL 19b5e6ce-c1a0-4cce-85f5-248c9f1abb6e\ncollecting  19b5e6ce-c1a0-4cce-85f5-248c9f1abb6e\nname 'single_csv_file' is not defined\nSNOTEL:1242_NV_SNTL d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nname 'single_csv_file' is not defined\nSNOTEL:1243_NV_SNTL a5080351-033f-4cfa-ad27-019fc84e052c\ncollecting  a5080351-033f-4cfa-ad27-019fc84e052c\nname 'single_csv_file' is not defined\nSNOTEL:1244_NV_SNTL 0efc68ba-5786-4c54-8028-e6f92efa6757\ncollecting  0efc68ba-5786-4c54-8028-e6f92efa6757\nname 'single_csv_file' is not defined\nSNOTEL:1247_UT_SNTL 93b8483d-a510-42ff-865e-33d5a8784dc4\ncollecting  93b8483d-a510-42ff-865e-33d5a8784dc4\nname 'single_csv_file' is not defined\nSNOTEL:1248_UT_SNTL 55d3e9a6-e153-43c3-a66c-cd60711ff4a9\ncollecting  55d3e9a6-e153-43c3-a66c-cd60711ff4a9\nname 'single_csv_file' is not defined\nSNOTEL:1249_UT_SNTL ad44deb7-e56d-47bd-8d64-7147493e0aee\ncollecting  ad44deb7-e56d-47bd-8d64-7147493e0aee\nname 'single_csv_file' is not defined\nSNOTEL:1251_CO_SNTL f9f7132d-56a2-43e2-baba-312f34dbaeed\ncollecting  f9f7132d-56a2-43e2-baba-312f34dbaeed\nname 'single_csv_file' is not defined\nSNOTEL:1252_CO_SNTL 8116acfb-8035-4d34-b9b9-b0af2c5697df\ncollecting  8116acfb-8035-4d34-b9b9-b0af2c5697df\nname 'single_csv_file' is not defined\nSNOTEL:1254_NM_SNTL 9c43edf0-541f-4dbb-9fe1-42cc83d453bd\ncollecting  9c43edf0-541f-4dbb-9fe1-42cc83d453bd\nname 'single_csv_file' is not defined\nSNOTEL:1256_WA_SNTL c59f438c-f00a-476a-938e-efd828e0d083\ncollecting  c59f438c-f00a-476a-938e-efd828e0d083\nname 'single_csv_file' is not defined\nSNOTEL:1257_WA_SNTL 2f266b81-aad3-4c26-ac69-1bd04a208bf7\ncollecting  2f266b81-aad3-4c26-ac69-1bd04a208bf7\nname 'single_csv_file' is not defined\nSNOTEL:1258_CA_SNTL 76b55900-eb3d-4d25-a538-f74302ffe72d\ncollecting  76b55900-eb3d-4d25-a538-f74302ffe72d\nname 'single_csv_file' is not defined\nSNOTEL:1259_WA_SNTL dc31c331-837b-4b59-b184-051321e9489c\ncollecting  dc31c331-837b-4b59-b184-051321e9489c\nname 'single_csv_file' is not defined\nSNOTEL:1261_UT_SNTL ad44deb7-e56d-47bd-8d64-7147493e0aee\ncollecting  ad44deb7-e56d-47bd-8d64-7147493e0aee\nname 'single_csv_file' is not defined\nSNOTEL:1262_NV_SNTL 875622b7-5253-43d2-8e0f-348767860eb9\ncollecting  875622b7-5253-43d2-8e0f-348767860eb9\nname 'single_csv_file' is not defined\nSNOTEL:1263_WA_SNTL cdfc27f0-b990-45f7-bac6-7c674cd157ac\ncollecting  cdfc27f0-b990-45f7-bac6-7c674cd157ac\nname 'single_csv_file' is not defined\nSNOTEL:1269_UT_SNTL ad44deb7-e56d-47bd-8d64-7147493e0aee\ncollecting  ad44deb7-e56d-47bd-8d64-7147493e0aee\nname 'single_csv_file' is not defined\nSNOTEL:1271_AZ_SNTL f6a782f0-4b17-4989-815c-2398b77b09dd\ncollecting  f6a782f0-4b17-4989-815c-2398b77b09dd\nname 'single_csv_file' is not defined\nSNOTEL:1272_NV_SNTL 5308a803-69e6-43cd-89db-66e93f9f83af\ncollecting  5308a803-69e6-43cd-89db-66e93f9f83af\nname 'single_csv_file' is not defined\nSNOTEL:1277_CA_SNTL 147d5eb4-e574-47e4-994a-8a2908c06050\ncollecting  147d5eb4-e574-47e4-994a-8a2908c06050\nname 'single_csv_file' is not defined\nSNOTEL:1278_UT_SNTL 7b636fe2-1760-45c5-afce-505f2e927163\ncollecting  7b636fe2-1760-45c5-afce-505f2e927163\nname 'single_csv_file' is not defined\nSNOTEL:1280_UT_SNTL ba4b2f3f-c8e3-4535-9781-426e4f77ba4c\ncollecting  ba4b2f3f-c8e3-4535-9781-426e4f77ba4c\nname 'single_csv_file' is not defined\nSNOTEL:1286_MT_SNTL cacaa17b-0b1b-4fe2-a4c1-7728e6c154c1\ncollecting  cacaa17b-0b1b-4fe2-a4c1-7728e6c154c1\nname 'single_csv_file' is not defined\nSNOTEL:1287_MT_SNTL e9759e79-461c-425e-af17-0a88be1a441f\ncollecting  e9759e79-461c-425e-af17-0a88be1a441f\nname 'single_csv_file' is not defined\nSNOTEL:2029_ID_SNTL 0cda0c4a-405b-4e16-8922-964190929d80\ncollecting  0cda0c4a-405b-4e16-8922-964190929d80\nname 'single_csv_file' is not defined\nSNOTEL:301_CA_SNTL 76b55900-eb3d-4d25-a538-f74302ffe72d\ncollecting  76b55900-eb3d-4d25-a538-f74302ffe72d\nname 'single_csv_file' is not defined\nSNOTEL:302_OR_SNTL c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\ncollecting  c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\nname 'single_csv_file' is not defined\nSNOTEL:303_CO_SNTL 2ca6a37f-67f5-4905-864b-ddf98d956ebb\ncollecting  2ca6a37f-67f5-4905-864b-ddf98d956ebb\nname 'single_csv_file' is not defined\nSNOTEL:304_OR_SNTL 78ccacb3-4eb9-4d95-b244-f3a709e39fd1\ncollecting  78ccacb3-4eb9-4d95-b244-f3a709e39fd1\nname 'single_csv_file' is not defined\nSNOTEL:305_CO_SNTL cad51334-b3af-4c23-85c3-451c3447560a\ncollecting  cad51334-b3af-4c23-85c3-451c3447560a\nname 'single_csv_file' is not defined\nSNOTEL:306_ID_SNTL 36b98590-a7e6-4e00-8c7d-f0f3d25bafec\ncollecting  36b98590-a7e6-4e00-8c7d-f0f3d25bafec\nname 'single_csv_file' is not defined\nSNOTEL:308_AZ_SNTL 972ab3b1-7445-4f57-a1a1-c3be4c257869\ncollecting  972ab3b1-7445-4f57-a1a1-c3be4c257869\nname 'single_csv_file' is not defined\nSNOTEL:311_MT_SNTL 0b9543d3-3cf9-4f28-b8eb-fd22c1956153\ncollecting  0b9543d3-3cf9-4f28-b8eb-fd22c1956153\nname 'single_csv_file' is not defined\nSNOTEL:312_ID_SNTL 36b98590-a7e6-4e00-8c7d-f0f3d25bafec\ncollecting  36b98590-a7e6-4e00-8c7d-f0f3d25bafec\nname 'single_csv_file' is not defined\nSNOTEL:313_MT_SNTL 4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\ncollecting  4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\nname 'single_csv_file' is not defined\nSNOTEL:316_NM_SNTL 674e34ce-8b77-422b-ab14-c6c3a0183e39\ncollecting  674e34ce-8b77-422b-ab14-c6c3a0183e39\nname 'single_csv_file' is not defined\nSNOTEL:317_WY_SNTL 8116acfb-8035-4d34-b9b9-b0af2c5697df\ncollecting  8116acfb-8035-4d34-b9b9-b0af2c5697df\nname 'single_csv_file' is not defined\nSNOTEL:319_ID_SNTL c66f40ed-f72e-4012-991c-1f3726e5c8ad\ncollecting  c66f40ed-f72e-4012-991c-1f3726e5c8ad\nname 'single_csv_file' is not defined\nSNOTEL:320_ID_SNTL af0463d4-f20f-4d13-bd0f-5834e2e8717b\ncollecting  af0463d4-f20f-4d13-bd0f-5834e2e8717b\nname 'single_csv_file' is not defined\nSNOTEL:321_NV_SNTL 5308a803-69e6-43cd-89db-66e93f9f83af\ncollecting  5308a803-69e6-43cd-89db-66e93f9f83af\nname 'single_csv_file' is not defined\nSNOTEL:322_CO_SNTL f9f7132d-56a2-43e2-baba-312f34dbaeed\ncollecting  f9f7132d-56a2-43e2-baba-312f34dbaeed\nname 'single_csv_file' is not defined\nSNOTEL:324_ID_SNTL c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\ncollecting  c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\nname 'single_csv_file' is not defined\nSNOTEL:325_WY_SNTL c5a82752-3e4b-43ec-8011-9111b9bfcb89\ncollecting  c5a82752-3e4b-43ec-8011-9111b9bfcb89\nname 'single_csv_file' is not defined\nSNOTEL:326_WY_SNTL e776d9b6-2180-4f50-90bf-77f7b920fc3b\ncollecting  e776d9b6-2180-4f50-90bf-77f7b920fc3b\nname 'single_csv_file' is not defined\nSNOTEL:327_CO_SNTL 69d48a07-3007-4b3f-bec6-c097509a56d9\ncollecting  69d48a07-3007-4b3f-bec6-c097509a56d9\nname 'single_csv_file' is not defined\nSNOTEL:328_MT_SNTL 10a46ea0-13da-4cef-9aa6-ff48aa46881c\ncollecting  10a46ea0-13da-4cef-9aa6-ff48aa46881c\nname 'single_csv_file' is not defined\nSNOTEL:329_UT_SNTL 9813294e-a28e-45c0-976d-a6fa65d87927\ncollecting  9813294e-a28e-45c0-976d-a6fa65d87927\nname 'single_csv_file' is not defined\nSNOTEL:330_UT_SNTL 7bc3c413-4709-4ddd-a2ad-99f6cad9436c\ncollecting  7bc3c413-4709-4ddd-a2ad-99f6cad9436c\nname 'single_csv_file' is not defined\nSNOTEL:331_OR_SNTL 631ed3c9-7863-4e7c-86fa-4bfb043f2851\ncollecting  631ed3c9-7863-4e7c-86fa-4bfb043f2851\nname 'single_csv_file' is not defined\nSNOTEL:332_UT_SNTL b59438b9-aadc-4899-9afb-fe71974c5c3a\ncollecting  b59438b9-aadc-4899-9afb-fe71974c5c3a\nname 'single_csv_file' is not defined\nSNOTEL:333_UT_SNTL b59438b9-aadc-4899-9afb-fe71974c5c3a\ncollecting  b59438b9-aadc-4899-9afb-fe71974c5c3a\nname 'single_csv_file' is not defined\nSNOTEL:334_NV_SNTL 38793f95-324b-4f01-b1a7-45e1c9353bc1\ncollecting  38793f95-324b-4f01-b1a7-45e1c9353bc1\nname 'single_csv_file' is not defined\nSNOTEL:335_CO_SNTL cad51334-b3af-4c23-85c3-451c3447560a\ncollecting  cad51334-b3af-4c23-85c3-451c3447560a\nname 'single_csv_file' is not defined\nSNOTEL:336_NV_SNTL 03428fd9-01cc-4a57-ab6e-f4e8f265c094\ncollecting  03428fd9-01cc-4a57-ab6e-f4e8f265c094\nname 'single_csv_file' is not defined\nSNOTEL:337_NV_SNTL f1f17cee-3fca-44bc-8974-b72d5f995a4a\ncollecting  f1f17cee-3fca-44bc-8974-b72d5f995a4a\nname 'single_csv_file' is not defined\nSNOTEL:338_ID_SNTL c66f40ed-f72e-4012-991c-1f3726e5c8ad\ncollecting  c66f40ed-f72e-4012-991c-1f3726e5c8ad\nname 'single_csv_file' is not defined\nSNOTEL:339_UT_SNTL 7b636fe2-1760-45c5-afce-505f2e927163\ncollecting  7b636fe2-1760-45c5-afce-505f2e927163\nname 'single_csv_file' is not defined\nSNOTEL:340_NV_SNTL d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nname 'single_csv_file' is not defined\nSNOTEL:341_OR_SNTL dd7f64aa-3556-409b-bc86-71dc28b6fd45\ncollecting  dd7f64aa-3556-409b-bc86-71dc28b6fd45\nname 'single_csv_file' is not defined\nSNOTEL:342_WY_SNTL 990e5974-9c60-4c9a-ba23-ddce13971178\ncollecting  990e5974-9c60-4c9a-ba23-ddce13971178\nname 'single_csv_file' is not defined\nSNOTEL:344_OR_SNTL 71f41513-6ac9-4d2e-97eb-6cd3b84f7043\ncollecting  71f41513-6ac9-4d2e-97eb-6cd3b84f7043\nname 'single_csv_file' is not defined\nSNOTEL:345_CO_SNTL d64197fc-0723-4c61-9ce8-ff2554e24154\ncollecting  d64197fc-0723-4c61-9ce8-ff2554e24154\nname 'single_csv_file' is not defined\nSNOTEL:346_MT_SNTL 89a7b0ef-1ec8-490f-9207-c93aa57a147f\ncollecting  89a7b0ef-1ec8-490f-9207-c93aa57a147f\nname 'single_csv_file' is not defined\nSNOTEL:347_MT_SNTL b1936012-0d31-4b92-8d60-c24903b2e569\ncollecting  b1936012-0d31-4b92-8d60-c24903b2e569\nname 'single_csv_file' is not defined\nSNOTEL:348_UT_SNTL 9813294e-a28e-45c0-976d-a6fa65d87927\ncollecting  9813294e-a28e-45c0-976d-a6fa65d87927\nname 'single_csv_file' is not defined\nSNOTEL:349_MT_SNTL 4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\ncollecting  4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\nname 'single_csv_file' is not defined\nSNOTEL:350_WY_SNTL 333458b2-c1a9-47a3-8ae0-92053ad28ae3\ncollecting  333458b2-c1a9-47a3-8ae0-92053ad28ae3\nname 'single_csv_file' is not defined\nSNOTEL:354_SD_SNTL ab89875f-3b86-4c6a-8d66-767017570dfc\ncollecting  ab89875f-3b86-4c6a-8d66-767017570dfc\nname 'single_csv_file' is not defined\nSNOTEL:355_MT_SNTL 6de38d5b-ccce-4ff2-90ed-1c7035491518\ncollecting  6de38d5b-ccce-4ff2-90ed-1c7035491518\nname 'single_csv_file' is not defined\nSNOTEL:356_CA_SNTL c89dc6ca-6d69-41ce-954d-b51f64aaacb1\ncollecting  c89dc6ca-6d69-41ce-954d-b51f64aaacb1\nname 'single_csv_file' is not defined\nSNOTEL:358_WY_SNTL 6bc3e088-5139-43f2-9b2a-ade1cedeae47\ncollecting  6bc3e088-5139-43f2-9b2a-ade1cedeae47\nname 'single_csv_file' is not defined\nSNOTEL:360_MT_SNTL 517aefce-a617-4251-acb9-c5faf0b7fdf3\ncollecting  517aefce-a617-4251-acb9-c5faf0b7fdf3\nname 'single_csv_file' is not defined\nSNOTEL:363_MT_SNTL f46e7d90-a754-44a8-b262-63f5c401a0ab\ncollecting  f46e7d90-a754-44a8-b262-63f5c401a0ab\nname 'single_csv_file' is not defined\nSNOTEL:364_UT_SNTL 7b636fe2-1760-45c5-afce-505f2e927163\ncollecting  7b636fe2-1760-45c5-afce-505f2e927163\nname 'single_csv_file' is not defined\nSNOTEL:365_MT_SNTL e467a17f-a729-4938-87a1-ac25157eed63\ncollecting  e467a17f-a729-4938-87a1-ac25157eed63\nname 'single_csv_file' is not defined\nSNOTEL:366_UT_SNTL eeb0a123-9482-4946-ab3f-9e63541cb655\ncollecting  eeb0a123-9482-4946-ab3f-9e63541cb655\nname 'single_csv_file' is not defined\nSNOTEL:368_UT_SNTL a28a3caf-eea2-414f-8003-62ac82daaafa\ncollecting  a28a3caf-eea2-414f-8003-62ac82daaafa\nname 'single_csv_file' is not defined\nSNOTEL:370_ID_SNTL c66f40ed-f72e-4012-991c-1f3726e5c8ad\ncollecting  c66f40ed-f72e-4012-991c-1f3726e5c8ad\nname 'single_csv_file' is not defined\nSNOTEL:373_NV_SNTL 42a21eb9-10fd-4986-825b-9ea55ce13935\ncollecting  42a21eb9-10fd-4986-825b-9ea55ce13935\nname 'single_csv_file' is not defined\nSNOTEL:375_WA_SNTL bb65d7a1-a5d5-4c89-9ef9-f0f1db06cc58\ncollecting  bb65d7a1-a5d5-4c89-9ef9-f0f1db06cc58\nname 'single_csv_file' is not defined\nSNOTEL:376_WA_SNTL c59f438c-f00a-476a-938e-efd828e0d083\ncollecting  c59f438c-f00a-476a-938e-efd828e0d083\nname 'single_csv_file' is not defined\nSNOTEL:377_WY_SNTL 6bc3e088-5139-43f2-9b2a-ade1cedeae47\ncollecting  6bc3e088-5139-43f2-9b2a-ade1cedeae47\nname 'single_csv_file' is not defined\nSNOTEL:379_WY_SNTL 692c41af-2210-4dd6-916d-c99e76807447\ncollecting  692c41af-2210-4dd6-916d-c99e76807447\nname 'single_csv_file' is not defined\nSNOTEL:380_CO_SNTL 6662f7d0-4afc-4fed-b930-e0408ee10bc7\ncollecting  6662f7d0-4afc-4fed-b930-e0408ee10bc7\nname 'single_csv_file' is not defined\nSNOTEL:381_MT_SNTL 4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\ncollecting  4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\nname 'single_csv_file' is not defined\nSNOTEL:385_MT_SNTL b1936012-0d31-4b92-8d60-c24903b2e569\ncollecting  b1936012-0d31-4b92-8d60-c24903b2e569\nname 'single_csv_file' is not defined\nSNOTEL:386_CO_SNTL fb32a838-cf3b-47a2-9e22-395a730f4f4f\ncollecting  fb32a838-cf3b-47a2-9e22-395a730f4f4f\nname 'single_csv_file' is not defined\nSNOTEL:387_CO_SNTL fb32a838-cf3b-47a2-9e22-395a730f4f4f\ncollecting  fb32a838-cf3b-47a2-9e22-395a730f4f4f\nname 'single_csv_file' is not defined\nSNOTEL:388_OR_SNTL ea185683-4427-44c3-84e1-706cf16781ce\ncollecting  ea185683-4427-44c3-84e1-706cf16781ce\nname 'single_csv_file' is not defined\nSNOTEL:389_WY_SNTL ab89875f-3b86-4c6a-8d66-767017570dfc\ncollecting  ab89875f-3b86-4c6a-8d66-767017570dfc\nname 'single_csv_file' is not defined\nSNOTEL:390_UT_SNTL 55d3e9a6-e153-43c3-a66c-cd60711ff4a9\ncollecting  55d3e9a6-e153-43c3-a66c-cd60711ff4a9\nname 'single_csv_file' is not defined\nSNOTEL:392_UT_SNTL 064d7f3e-8bbd-49cd-b360-5c4590a19b9e\ncollecting  064d7f3e-8bbd-49cd-b360-5c4590a19b9e\nname 'single_csv_file' is not defined\nSNOTEL:393_UT_SNTL 064d7f3e-8bbd-49cd-b360-5c4590a19b9e\ncollecting  064d7f3e-8bbd-49cd-b360-5c4590a19b9e\nname 'single_csv_file' is not defined\nSNOTEL:396_UT_SNTL 50d7ad3f-57f0-45e1-911d-b0efff9deb8f\ncollecting  50d7ad3f-57f0-45e1-911d-b0efff9deb8f\nname 'single_csv_file' is not defined\nSNOTEL:398_OR_SNTL 8edd6091-10fa-4617-8dc8-e0ce1d5b84f7\ncollecting  8edd6091-10fa-4617-8dc8-e0ce1d5b84f7\nname 'single_csv_file' is not defined\nSNOTEL:399_UT_SNTL 0a820e12-033b-45d6-9ef9-d70f4c5e5b63\ncollecting  0a820e12-033b-45d6-9ef9-d70f4c5e5b63\nname 'single_csv_file' is not defined\nSNOTEL:401_OR_SNTL 8edd6091-10fa-4617-8dc8-e0ce1d5b84f7\ncollecting  8edd6091-10fa-4617-8dc8-e0ce1d5b84f7\nname 'single_csv_file' is not defined\nSNOTEL:402_WY_SNTL 02c3ec4a-8de4-4284-9ec1-5a942d3d098e\ncollecting  02c3ec4a-8de4-4284-9ec1-5a942d3d098e\nname 'single_csv_file' is not defined\nSNOTEL:403_MT_SNTL 05938de0-622b-4e0a-a82b-2a128e5be0b0\ncollecting  05938de0-622b-4e0a-a82b-2a128e5be0b0\nname 'single_csv_file' is not defined\nSNOTEL:406_OR_SNTL 71f41513-6ac9-4d2e-97eb-6cd3b84f7043\ncollecting  71f41513-6ac9-4d2e-97eb-6cd3b84f7043\nname 'single_csv_file' is not defined\nSNOTEL:407_MT_SNTL e776d9b6-2180-4f50-90bf-77f7b920fc3b\ncollecting  e776d9b6-2180-4f50-90bf-77f7b920fc3b\nname 'single_csv_file' is not defined\nSNOTEL:409_CO_SNTL a4339b9a-871e-44c2-9bb4-bcbfe9d590d7\ncollecting  a4339b9a-871e-44c2-9bb4-bcbfe9d590d7\nname 'single_csv_file' is not defined\nSNOTEL:410_MT_SNTL 4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\ncollecting  4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\nname 'single_csv_file' is not defined\nSNOTEL:411_ID_SNTL 440d7558-67fd-43b4-826b-26d02663f871\ncollecting  440d7558-67fd-43b4-826b-26d02663f871\nname 'single_csv_file' is not defined\nSNOTEL:412_CO_SNTL f9f7132d-56a2-43e2-baba-312f34dbaeed\ncollecting  f9f7132d-56a2-43e2-baba-312f34dbaeed\nname 'single_csv_file' is not defined\nSNOTEL:413_MT_SNTL 99a2d4a9-63a0-43a7-976d-2a1ed822186d\ncollecting  99a2d4a9-63a0-43a7-976d-2a1ed822186d\nname 'single_csv_file' is not defined\nSNOTEL:414_MT_SNTL 99a2d4a9-63a0-43a7-976d-2a1ed822186d\ncollecting  99a2d4a9-63a0-43a7-976d-2a1ed822186d\nname 'single_csv_file' is not defined\nSNOTEL:415_CO_SNTL be57eab6-a495-427f-8a36-9d118c03e7d8\ncollecting  be57eab6-a495-427f-8a36-9d118c03e7d8\nname 'single_csv_file' is not defined\nSNOTEL:416_AZ_SNTL 1135e377-22e6-4290-b4cd-e6739de7fd8a\ncollecting  1135e377-22e6-4290-b4cd-e6739de7fd8a\nname 'single_csv_file' is not defined\nSNOTEL:417_NV_SNTL a5080351-033f-4cfa-ad27-019fc84e052c\ncollecting  a5080351-033f-4cfa-ad27-019fc84e052c\nname 'single_csv_file' is not defined\nSNOTEL:418_WA_SNTL 9474e816-b673-4e6d-83e0-28c274945bef\ncollecting  9474e816-b673-4e6d-83e0-28c274945bef\nname 'single_csv_file' is not defined\nSNOTEL:419_WY_SNTL df7e906a-07f3-4a46-b9a5-0200427c26f7\ncollecting  df7e906a-07f3-4a46-b9a5-0200427c26f7\nname 'single_csv_file' is not defined\nSNOTEL:420_WA_SNTL 360f1bcc-aa60-4052-a18a-b33da5745ff4\ncollecting  360f1bcc-aa60-4052-a18a-b33da5745ff4\nname 'single_csv_file' is not defined\nSNOTEL:422_OR_SNTL e27143af-fdc0-4f6f-8a28-f57b78da75dc\ncollecting  e27143af-fdc0-4f6f-8a28-f57b78da75dc\nname 'single_csv_file' is not defined\nSNOTEL:423_ID_SNTL 36b98590-a7e6-4e00-8c7d-f0f3d25bafec\ncollecting  36b98590-a7e6-4e00-8c7d-f0f3d25bafec\nname 'single_csv_file' is not defined\nSNOTEL:424_ID_SNTL 10a46ea0-13da-4cef-9aa6-ff48aa46881c\ncollecting  10a46ea0-13da-4cef-9aa6-ff48aa46881c\nname 'single_csv_file' is not defined\nSNOTEL:426_CO_SNTL 02cf33c2-c8e2-48b9-bf72-92506e97e251\ncollecting  02cf33c2-c8e2-48b9-bf72-92506e97e251\nname 'single_csv_file' is not defined\nSNOTEL:428_CA_SNTL 51ebe834-adf4-474e-871e-28ebca2bd0cc\ncollecting  51ebe834-adf4-474e-871e-28ebca2bd0cc\nname 'single_csv_file' is not defined\nSNOTEL:430_CO_SNTL 2ca6a37f-67f5-4905-864b-ddf98d956ebb\ncollecting  2ca6a37f-67f5-4905-864b-ddf98d956ebb\nname 'single_csv_file' is not defined\nSNOTEL:431_CO_SNTL 0623939d-b33f-41cb-ade2-3c4a776de49a\ncollecting  0623939d-b33f-41cb-ade2-3c4a776de49a\nname 'single_csv_file' is not defined\nSNOTEL:432_UT_SNTL cfe58efd-ce2a-495a-90cd-6826f704ebee\ncollecting  cfe58efd-ce2a-495a-90cd-6826f704ebee\nname 'single_csv_file' is not defined\nSNOTEL:433_MT_SNTL 4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\ncollecting  4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\nname 'single_csv_file' is not defined\nSNOTEL:434_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nname 'single_csv_file' is not defined\nSNOTEL:436_MT_SNTL cacaa17b-0b1b-4fe2-a4c1-7728e6c154c1\ncollecting  cacaa17b-0b1b-4fe2-a4c1-7728e6c154c1\nname 'single_csv_file' is not defined\nSNOTEL:437_MT_SNTL 517aefce-a617-4251-acb9-c5faf0b7fdf3\ncollecting  517aefce-a617-4251-acb9-c5faf0b7fdf3\nname 'single_csv_file' is not defined\nSNOTEL:438_CO_SNTL 9f0599d8-81f3-4ab5-b275-48a6ddaaae5b\ncollecting  9f0599d8-81f3-4ab5-b275-48a6ddaaae5b\nname 'single_csv_file' is not defined\nSNOTEL:439_ID_SNTL 36b98590-a7e6-4e00-8c7d-f0f3d25bafec\ncollecting  36b98590-a7e6-4e00-8c7d-f0f3d25bafec\nname 'single_csv_file' is not defined\nSNOTEL:444_UT_SNTL 9813294e-a28e-45c0-976d-a6fa65d87927\ncollecting  9813294e-a28e-45c0-976d-a6fa65d87927\nname 'single_csv_file' is not defined\nSNOTEL:448_MT_SNTL 05938de0-622b-4e0a-a82b-2a128e5be0b0\ncollecting  05938de0-622b-4e0a-a82b-2a128e5be0b0\nname 'single_csv_file' is not defined\nSNOTEL:449_WY_SNTL 8116acfb-8035-4d34-b9b9-b0af2c5697df\ncollecting  8116acfb-8035-4d34-b9b9-b0af2c5697df\nname 'single_csv_file' is not defined\nSNOTEL:450_ID_SNTL 695c7749-a3b8-4158-bd14-59d1f2c3e736\ncollecting  695c7749-a3b8-4158-bd14-59d1f2c3e736\nname 'single_csv_file' is not defined\nSNOTEL:451_WY_SNTL 02c3ec4a-8de4-4284-9ec1-5a942d3d098e\ncollecting  02c3ec4a-8de4-4284-9ec1-5a942d3d098e\nname 'single_csv_file' is not defined\nSNOTEL:452_UT_SNTL ad44deb7-e56d-47bd-8d64-7147493e0aee\ncollecting  ad44deb7-e56d-47bd-8d64-7147493e0aee\nname 'single_csv_file' is not defined\nSNOTEL:455_UT_SNTL b59438b9-aadc-4899-9afb-fe71974c5c3a\ncollecting  b59438b9-aadc-4899-9afb-fe71974c5c3a\nname 'single_csv_file' is not defined\nSNOTEL:457_CO_SNTL 02cf33c2-c8e2-48b9-bf72-92506e97e251\ncollecting  02cf33c2-c8e2-48b9-bf72-92506e97e251\nname 'single_csv_file' is not defined\nSNOTEL:458_MT_SNTL dca30f20-582e-40ef-be6d-aa7858be4baa\ncollecting  dca30f20-582e-40ef-be6d-aa7858be4baa\nname 'single_csv_file' is not defined\nSNOTEL:460_WY_SNTL 695bed09-0ad9-406e-b489-69408adeea06\ncollecting  695bed09-0ad9-406e-b489-69408adeea06\nname 'single_csv_file' is not defined\nSNOTEL:462_CA_SNTL 962f6718-ce02-4d13-b28c-e159d1adc2d4\ncollecting  962f6718-ce02-4d13-b28c-e159d1adc2d4\nname 'single_csv_file' is not defined\nSNOTEL:463_CA_SNTL f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nname 'single_csv_file' is not defined\nSNOTEL:464_OR_SNTL 631ed3c9-7863-4e7c-86fa-4bfb043f2851\ncollecting  631ed3c9-7863-4e7c-86fa-4bfb043f2851\nname 'single_csv_file' is not defined\nSNOTEL:465_CO_SNTL d10a90c7-3db0-43c6-b04b-fe8b4c3f206e\ncollecting  d10a90c7-3db0-43c6-b04b-fe8b4c3f206e\nname 'single_csv_file' is not defined\nSNOTEL:466_ID_SNTL b1077b69-4b02-458e-8a4b-e68695ac534f\ncollecting  b1077b69-4b02-458e-8a4b-e68695ac534f\nname 'single_csv_file' is not defined\nSNOTEL:467_CO_SNTL 86257c69-a8f1-43b1-9e07-73129e2c3fbc\ncollecting  86257c69-a8f1-43b1-9e07-73129e2c3fbc\nname 'single_csv_file' is not defined\nSNOTEL:470_OR_SNTL e27143af-fdc0-4f6f-8a28-f57b78da75dc\ncollecting  e27143af-fdc0-4f6f-8a28-f57b78da75dc\nname 'single_csv_file' is not defined\nSNOTEL:472_WY_SNTL e776d9b6-2180-4f50-90bf-77f7b920fc3b\ncollecting  e776d9b6-2180-4f50-90bf-77f7b920fc3b\nname 'single_csv_file' is not defined\nSNOTEL:474_UT_SNTL 10162c55-772d-49d2-8b1b-b1f9c86254b2\ncollecting  10162c55-772d-49d2-8b1b-b1f9c86254b2\nname 'single_csv_file' is not defined\nSNOTEL:475_UT_SNTL 9813294e-a28e-45c0-976d-a6fa65d87927\ncollecting  9813294e-a28e-45c0-976d-a6fa65d87927\nname 'single_csv_file' is not defined\nSNOTEL:476_NV_SNTL 875622b7-5253-43d2-8e0f-348767860eb9\ncollecting  875622b7-5253-43d2-8e0f-348767860eb9\nname 'single_csv_file' is not defined\nSNOTEL:477_OR_SNTL 65894307-d4eb-4b2e-a0fa-bd83a102dc30\ncollecting  65894307-d4eb-4b2e-a0fa-bd83a102dc30\nname 'single_csv_file' is not defined\nSNOTEL:478_WA_SNTL bfda850c-3027-4e91-afcb-cca5e73e4a03\ncollecting  bfda850c-3027-4e91-afcb-cca5e73e4a03\nname 'single_csv_file' is not defined\nSNOTEL:480_MT_SNTL f46e7d90-a754-44a8-b262-63f5c401a0ab\ncollecting  f46e7d90-a754-44a8-b262-63f5c401a0ab\nname 'single_csv_file' is not defined\nSNOTEL:481_UT_SNTL a28a3caf-eea2-414f-8003-62ac82daaafa\ncollecting  a28a3caf-eea2-414f-8003-62ac82daaafa\nname 'single_csv_file' is not defined\nSNOTEL:482_MT_SNTL d37ccc2e-7127-48ec-9425-2e77681c3635\ncollecting  d37ccc2e-7127-48ec-9425-2e77681c3635\nname 'single_csv_file' is not defined\nSNOTEL:483_OR_SNTL 71f41513-6ac9-4d2e-97eb-6cd3b84f7043\ncollecting  71f41513-6ac9-4d2e-97eb-6cd3b84f7043\nname 'single_csv_file' is not defined\nSNOTEL:484_ID_SNTL 6bf06917-011b-4029-8fbe-a8dfea3bc598\ncollecting  6bf06917-011b-4029-8fbe-a8dfea3bc598\nname 'single_csv_file' is not defined\nSNOTEL:485_CO_SNTL 75ced1b1-1fc2-42d3-a4f8-44aa1978c8ef\ncollecting  75ced1b1-1fc2-42d3-a4f8-44aa1978c8ef\nname 'single_csv_file' is not defined\nSNOTEL:486_NM_SNTL 1135e377-22e6-4290-b4cd-e6739de7fd8a\ncollecting  1135e377-22e6-4290-b4cd-e6739de7fd8a\nname 'single_csv_file' is not defined\nSNOTEL:487_MT_SNTL f3e36cea-5eb2-495a-87f4-947395f325b0\ncollecting  f3e36cea-5eb2-495a-87f4-947395f325b0\nname 'single_csv_file' is not defined\nSNOTEL:488_AZ_SNTL a2588440-600e-41da-b2b9-1f5632ecdef6\ncollecting  a2588440-600e-41da-b2b9-1f5632ecdef6\nname 'single_csv_file' is not defined\nSNOTEL:489_ID_SNTL f3332d55-ecc8-4644-9deb-180e42abb2eb\ncollecting  f3332d55-ecc8-4644-9deb-180e42abb2eb\nname 'single_csv_file' is not defined\nSNOTEL:490_ID_SNTL 695c7749-a3b8-4158-bd14-59d1f2c3e736\ncollecting  695c7749-a3b8-4158-bd14-59d1f2c3e736\nname 'single_csv_file' is not defined\nSNOTEL:491_NM_SNTL 9c43edf0-541f-4dbb-9fe1-42cc83d453bd\ncollecting  9c43edf0-541f-4dbb-9fe1-42cc83d453bd\nname 'single_csv_file' is not defined\nSNOTEL:493_ID_SNTL 6bf06917-011b-4029-8fbe-a8dfea3bc598\ncollecting  6bf06917-011b-4029-8fbe-a8dfea3bc598\nname 'single_csv_file' is not defined\nSNOTEL:494_OR_SNTL 631ed3c9-7863-4e7c-86fa-4bfb043f2851\ncollecting  631ed3c9-7863-4e7c-86fa-4bfb043f2851\nname 'single_csv_file' is not defined\nSNOTEL:495_UT_SNTL 9813294e-a28e-45c0-976d-a6fa65d87927\ncollecting  9813294e-a28e-45c0-976d-a6fa65d87927\nname 'single_csv_file' is not defined\nSNOTEL:497_WY_SNTL 695bed09-0ad9-406e-b489-69408adeea06\ncollecting  695bed09-0ad9-406e-b489-69408adeea06\nname 'single_csv_file' is not defined\nSNOTEL:498_NV_SNTL 42a21eb9-10fd-4986-825b-9ea55ce13935\ncollecting  42a21eb9-10fd-4986-825b-9ea55ce13935\nname 'single_csv_file' is not defined\nSNOTEL:499_WY_SNTL 491846d3-f81a-4777-b49f-0a0c74168395\ncollecting  491846d3-f81a-4777-b49f-0a0c74168395\nname 'single_csv_file' is not defined\nSNOTEL:500_MT_SNTL d37ccc2e-7127-48ec-9425-2e77681c3635\ncollecting  d37ccc2e-7127-48ec-9425-2e77681c3635\nname 'single_csv_file' is not defined\nSNOTEL:503_NV_SNTL a5080351-033f-4cfa-ad27-019fc84e052c\ncollecting  a5080351-033f-4cfa-ad27-019fc84e052c\nname 'single_csv_file' is not defined\nSNOTEL:505_CO_SNTL 552a5638-8fd2-46de-8569-5f5512102264\ncollecting  552a5638-8fd2-46de-8569-5f5512102264\nname 'single_csv_file' is not defined\nSNOTEL:507_WA_SNTL 6d0ff6eb-0411-4863-b4e7-90958db98115\ncollecting  6d0ff6eb-0411-4863-b4e7-90958db98115\nname 'single_csv_file' is not defined\nSNOTEL:508_CA_SNTL d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nname 'single_csv_file' is not defined\nSNOTEL:509_WY_SNTL df7e906a-07f3-4a46-b9a5-0200427c26f7\ncollecting  df7e906a-07f3-4a46-b9a5-0200427c26f7\nname 'single_csv_file' is not defined\nSNOTEL:510_MT_SNTL 0b9543d3-3cf9-4f28-b8eb-fd22c1956153\ncollecting  0b9543d3-3cf9-4f28-b8eb-fd22c1956153\nname 'single_csv_file' is not defined\nSNOTEL:512_WY_SNTL c5a82752-3e4b-43ec-8011-9111b9bfcb89\ncollecting  c5a82752-3e4b-43ec-8011-9111b9bfcb89\nname 'single_csv_file' is not defined\nSNOTEL:514_UT_SNTL 55d3e9a6-e153-43c3-a66c-cd60711ff4a9\ncollecting  55d3e9a6-e153-43c3-a66c-cd60711ff4a9\nname 'single_csv_file' is not defined\nSNOTEL:519_AZ_SNTL 0aeaffd7-9089-49e7-85ad-2314f32cbf7c\ncollecting  0aeaffd7-9089-49e7-85ad-2314f32cbf7c\nname 'single_csv_file' is not defined\nSNOTEL:520_ID_SNTL b1077b69-4b02-458e-8a4b-e68695ac534f\ncollecting  b1077b69-4b02-458e-8a4b-e68695ac534f\nname 'single_csv_file' is not defined\nSNOTEL:521_UT_SNTL c0568d62-49c7-4d9f-beba-ac0fb3e064c5\ncollecting  c0568d62-49c7-4d9f-beba-ac0fb3e064c5\nname 'single_csv_file' is not defined\nSNOTEL:522_UT_SNTL 50d7ad3f-57f0-45e1-911d-b0efff9deb8f\ncollecting  50d7ad3f-57f0-45e1-911d-b0efff9deb8f\nname 'single_csv_file' is not defined\nSNOTEL:523_OR_SNTL e27143af-fdc0-4f6f-8a28-f57b78da75dc\ncollecting  e27143af-fdc0-4f6f-8a28-f57b78da75dc\nname 'single_csv_file' is not defined\nSNOTEL:524_ID_SNTL 3330a979-98df-4a38-ac3f-0b45374f8e3d\ncollecting  3330a979-98df-4a38-ac3f-0b45374f8e3d\nname 'single_csv_file' is not defined\nSNOTEL:525_WY_SNTL 990e5974-9c60-4c9a-ba23-ddce13971178\ncollecting  990e5974-9c60-4c9a-ba23-ddce13971178\nname 'single_csv_file' is not defined\nSNOTEL:526_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nname 'single_csv_file' is not defined\nSNOTEL:528_UT_SNTL 50d7ad3f-57f0-45e1-911d-b0efff9deb8f\ncollecting  50d7ad3f-57f0-45e1-911d-b0efff9deb8f\nname 'single_csv_file' is not defined\nSNOTEL:529_OR_SNTL fe33672e-7ea7-4c5d-8639-96b2cc7edb0c\ncollecting  fe33672e-7ea7-4c5d-8639-96b2cc7edb0c\nname 'single_csv_file' is not defined\nSNOTEL:530_MT_SNTL 440d7558-67fd-43b4-826b-26d02663f871\ncollecting  440d7558-67fd-43b4-826b-26d02663f871\nname 'single_csv_file' is not defined\nSNOTEL:531_CO_SNTL 59ac7ee6-8fa8-4888-bb77-2be6781dddaf\ncollecting  59ac7ee6-8fa8-4888-bb77-2be6781dddaf\nname 'single_csv_file' is not defined\nSNOTEL:532_NM_SNTL 674e34ce-8b77-422b-ab14-c6c3a0183e39\ncollecting  674e34ce-8b77-422b-ab14-c6c3a0183e39\nname 'single_csv_file' is not defined\nSNOTEL:533_UT_SNTL dc237027-8dae-4da7-91ec-501701ecd943\ncollecting  dc237027-8dae-4da7-91ec-501701ecd943\nname 'single_csv_file' is not defined\nSNOTEL:535_ID_SNTL b5d7b6b8-4e5d-4b5e-8976-c72e99f57769\ncollecting  b5d7b6b8-4e5d-4b5e-8976-c72e99f57769\nname 'single_csv_file' is not defined\nSNOTEL:540_CA_SNTL 018cf1a1-f945-4097-9c47-0c4690538bb5\ncollecting  018cf1a1-f945-4097-9c47-0c4690538bb5\nname 'single_csv_file' is not defined\nSNOTEL:541_CA_SNTL 018cf1a1-f945-4097-9c47-0c4690538bb5\ncollecting  018cf1a1-f945-4097-9c47-0c4690538bb5\nname 'single_csv_file' is not defined\nSNOTEL:542_CO_SNTL a0c947fb-f00e-4331-ad3a-402908e08b57\ncollecting  a0c947fb-f00e-4331-ad3a-402908e08b57\nname 'single_csv_file' is not defined\nSNOTEL:543_UT_SNTL 19b5e6ce-c1a0-4cce-85f5-248c9f1abb6e\ncollecting  19b5e6ce-c1a0-4cce-85f5-248c9f1abb6e\nname 'single_csv_file' is not defined\nSNOTEL:548_NV_SNTL 875622b7-5253-43d2-8e0f-348767860eb9\ncollecting  875622b7-5253-43d2-8e0f-348767860eb9\nname 'single_csv_file' is not defined\nSNOTEL:549_NV_SNTL 875622b7-5253-43d2-8e0f-348767860eb9\ncollecting  875622b7-5253-43d2-8e0f-348767860eb9\nname 'single_csv_file' is not defined\nSNOTEL:550_ID_SNTL 36b98590-a7e6-4e00-8c7d-f0f3d25bafec\ncollecting  36b98590-a7e6-4e00-8c7d-f0f3d25bafec\nname 'single_csv_file' is not defined\nSNOTEL:552_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nname 'single_csv_file' is not defined\nSNOTEL:553_WA_SNTL cdfc27f0-b990-45f7-bac6-7c674cd157ac\ncollecting  cdfc27f0-b990-45f7-bac6-7c674cd157ac\nname 'single_csv_file' is not defined\nSNOTEL:554_WY_SNTL df7e906a-07f3-4a46-b9a5-0200427c26f7\ncollecting  df7e906a-07f3-4a46-b9a5-0200427c26f7\nname 'single_csv_file' is not defined\nSNOTEL:555_WY_SNTL 695bed09-0ad9-406e-b489-69408adeea06\ncollecting  695bed09-0ad9-406e-b489-69408adeea06\nname 'single_csv_file' is not defined\nSNOTEL:556_CO_SNTL e833aad1-6da3-4413-b25e-b2ab5b2029c0\ncollecting  e833aad1-6da3-4413-b25e-b2ab5b2029c0\nname 'single_csv_file' is not defined\nSNOTEL:558_OR_SNTL dd7f64aa-3556-409b-bc86-71dc28b6fd45\ncollecting  dd7f64aa-3556-409b-bc86-71dc28b6fd45\nname 'single_csv_file' is not defined\nSNOTEL:559_UT_SNTL 50d7ad3f-57f0-45e1-911d-b0efff9deb8f\ncollecting  50d7ad3f-57f0-45e1-911d-b0efff9deb8f\nname 'single_csv_file' is not defined\nSNOTEL:560_WY_SNTL 692c41af-2210-4dd6-916d-c99e76807447\ncollecting  692c41af-2210-4dd6-916d-c99e76807447\nname 'single_csv_file' is not defined\nSNOTEL:562_MT_SNTL 89a7b0ef-1ec8-490f-9207-c93aa57a147f\ncollecting  89a7b0ef-1ec8-490f-9207-c93aa57a147f\nname 'single_csv_file' is not defined\nSNOTEL:563_OR_SNTL 408b4482-ff63-4a1f-9cf9-ca820cd51b39\ncollecting  408b4482-ff63-4a1f-9cf9-ca820cd51b39\nname 'single_csv_file' is not defined\nSNOTEL:564_CO_SNTL f9f7132d-56a2-43e2-baba-312f34dbaeed\ncollecting  f9f7132d-56a2-43e2-baba-312f34dbaeed\nname 'single_csv_file' is not defined\nSNOTEL:565_CO_SNTL 8c45801f-6377-42e1-ae0a-9b53593ff843\ncollecting  8c45801f-6377-42e1-ae0a-9b53593ff843\nname 'single_csv_file' is not defined\nSNOTEL:566_UT_SNTL c7f13d88-b4af-4484-9547-52197f778c08\ncollecting  c7f13d88-b4af-4484-9547-52197f778c08\nname 'single_csv_file' is not defined\nSNOTEL:568_MT_SNTL 10a46ea0-13da-4cef-9aa6-ff48aa46881c\ncollecting  10a46ea0-13da-4cef-9aa6-ff48aa46881c\nname 'single_csv_file' is not defined\nSNOTEL:569_NV_SNTL 42a21eb9-10fd-4986-825b-9ea55ce13935\ncollecting  42a21eb9-10fd-4986-825b-9ea55ce13935\nname 'single_csv_file' is not defined\nSNOTEL:570_NV_SNTL a5080351-033f-4cfa-ad27-019fc84e052c\ncollecting  a5080351-033f-4cfa-ad27-019fc84e052c\nname 'single_csv_file' is not defined\nSNOTEL:571_WY_SNTL ab89875f-3b86-4c6a-8d66-767017570dfc\ncollecting  ab89875f-3b86-4c6a-8d66-767017570dfc\nname 'single_csv_file' is not defined\nSNOTEL:572_UT_SNTL 20b97bae-60d6-466d-aca9-334d9b2d63b6\ncollecting  20b97bae-60d6-466d-aca9-334d9b2d63b6\nname 'single_csv_file' is not defined\nSNOTEL:575_CA_SNTL 01be2cc7-ef77-4e4d-80ed-c4f8139162c3\ncollecting  01be2cc7-ef77-4e4d-80ed-c4f8139162c3\nname 'single_csv_file' is not defined\nSNOTEL:576_MT_SNTL 3330a979-98df-4a38-ac3f-0b45374f8e3d\ncollecting  3330a979-98df-4a38-ac3f-0b45374f8e3d\nname 'single_csv_file' is not defined\nSNOTEL:577_WY_SNTL 491846d3-f81a-4777-b49f-0a0c74168395\ncollecting  491846d3-f81a-4777-b49f-0a0c74168395\nname 'single_csv_file' is not defined\nSNOTEL:579_UT_SNTL 064d7f3e-8bbd-49cd-b360-5c4590a19b9e\ncollecting  064d7f3e-8bbd-49cd-b360-5c4590a19b9e\nname 'single_csv_file' is not defined\nSNOTEL:580_CO_SNTL 4ddee9a9-feaf-4daa-9100-0d4188f7b827\ncollecting  4ddee9a9-feaf-4daa-9100-0d4188f7b827\nname 'single_csv_file' is not defined\nSNOTEL:582_UT_SNTL b59438b9-aadc-4899-9afb-fe71974c5c3a\ncollecting  b59438b9-aadc-4899-9afb-fe71974c5c3a\nname 'single_csv_file' is not defined\nSNOTEL:583_UT_SNTL 24cd85fa-6aee-4556-bb8a-b6696eb72a19\ncollecting  24cd85fa-6aee-4556-bb8a-b6696eb72a19\nname 'single_csv_file' is not defined\nSNOTEL:585_WY_SNTL 0adbba56-85f8-49e0-9b11-000622238d91\ncollecting  0adbba56-85f8-49e0-9b11-000622238d91\nname 'single_csv_file' is not defined\nSNOTEL:587_CA_SNTL 74f8c8bc-2f60-4232-b447-43459d5d22f0\ncollecting  74f8c8bc-2f60-4232-b447-43459d5d22f0\nname 'single_csv_file' is not defined\nSNOTEL:588_ID_SNTL cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\ncollecting  cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\nname 'single_csv_file' is not defined\nSNOTEL:589_CO_SNTL 57e18a9f-8327-4d6c-b2b4-c2b337341e86\ncollecting  57e18a9f-8327-4d6c-b2b4-c2b337341e86\nname 'single_csv_file' is not defined\nSNOTEL:590_MT_SNTL e467a17f-a729-4938-87a1-ac25157eed63\ncollecting  e467a17f-a729-4938-87a1-ac25157eed63\nname 'single_csv_file' is not defined\nSNOTEL:591_WA_SNTL cdfc27f0-b990-45f7-bac6-7c674cd157ac\ncollecting  cdfc27f0-b990-45f7-bac6-7c674cd157ac\nname 'single_csv_file' is not defined\nSNOTEL:592_UT_SNTL 24cd85fa-6aee-4556-bb8a-b6696eb72a19\ncollecting  24cd85fa-6aee-4556-bb8a-b6696eb72a19\nname 'single_csv_file' is not defined\nSNOTEL:593_UT_SNTL 55d3e9a6-e153-43c3-a66c-cd60711ff4a9\ncollecting  55d3e9a6-e153-43c3-a66c-cd60711ff4a9\nname 'single_csv_file' is not defined\nSNOTEL:596_UT_SNTL 10162c55-772d-49d2-8b1b-b1f9c86254b2\ncollecting  10162c55-772d-49d2-8b1b-b1f9c86254b2\nname 'single_csv_file' is not defined\nSNOTEL:597_WY_SNTL 695bed09-0ad9-406e-b489-69408adeea06\ncollecting  695bed09-0ad9-406e-b489-69408adeea06\nname 'single_csv_file' is not defined\nSNOTEL:600_ID_SNTL b5d7b6b8-4e5d-4b5e-8976-c72e99f57769\ncollecting  b5d7b6b8-4e5d-4b5e-8976-c72e99f57769\nname 'single_csv_file' is not defined\nSNOTEL:603_MT_SNTL 678f1920-0bc3-4687-af71-35d61030b1a0\ncollecting  678f1920-0bc3-4687-af71-35d61030b1a0\nname 'single_csv_file' is not defined\nSNOTEL:604_MT_SNTL 4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\ncollecting  4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\nname 'single_csv_file' is not defined\nSNOTEL:605_OR_SNTL e27143af-fdc0-4f6f-8a28-f57b78da75dc\ncollecting  e27143af-fdc0-4f6f-8a28-f57b78da75dc\nname 'single_csv_file' is not defined\nSNOTEL:606_WA_SNTL 47e625fa-e2df-43ce-84dd-8ac21fdda75a\ncollecting  47e625fa-e2df-43ce-84dd-8ac21fdda75a\nname 'single_csv_file' is not defined\nSNOTEL:607_CO_SNTL 02cf33c2-c8e2-48b9-bf72-92506e97e251\ncollecting  02cf33c2-c8e2-48b9-bf72-92506e97e251\nname 'single_csv_file' is not defined\nSNOTEL:610_ID_SNTL d17b55c5-7848-4b79-a735-983aec995c52\ncollecting  d17b55c5-7848-4b79-a735-983aec995c52\nname 'single_csv_file' is not defined\nSNOTEL:612_UT_SNTL 0a820e12-033b-45d6-9ef9-d70f4c5e5b63\ncollecting  0a820e12-033b-45d6-9ef9-d70f4c5e5b63\nname 'single_csv_file' is not defined\nSNOTEL:613_MT_SNTL d37ccc2e-7127-48ec-9425-2e77681c3635\ncollecting  d37ccc2e-7127-48ec-9425-2e77681c3635\nname 'single_csv_file' is not defined\nSNOTEL:614_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nname 'single_csv_file' is not defined\nSNOTEL:615_NV_SNTL d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nname 'single_csv_file' is not defined\nSNOTEL:616_WY_SNTL 692c41af-2210-4dd6-916d-c99e76807447\ncollecting  692c41af-2210-4dd6-916d-c99e76807447\nname 'single_csv_file' is not defined\nSNOTEL:617_AZ_SNTL f6a782f0-4b17-4989-815c-2398b77b09dd\ncollecting  f6a782f0-4b17-4989-815c-2398b77b09dd\nname 'single_csv_file' is not defined\nSNOTEL:619_OR_SNTL fe33672e-7ea7-4c5d-8639-96b2cc7edb0c\ncollecting  fe33672e-7ea7-4c5d-8639-96b2cc7edb0c\nname 'single_csv_file' is not defined\nSNOTEL:620_ID_SNTL 3330a979-98df-4a38-ac3f-0b45374f8e3d\ncollecting  3330a979-98df-4a38-ac3f-0b45374f8e3d\nname 'single_csv_file' is not defined\nSNOTEL:621_UT_SNTL 7b636fe2-1760-45c5-afce-505f2e927163\ncollecting  7b636fe2-1760-45c5-afce-505f2e927163\nname 'single_csv_file' is not defined\nSNOTEL:622_CO_SNTL 87d6c782-c43b-473f-84da-d2a519d8f1fc\ncollecting  87d6c782-c43b-473f-84da-d2a519d8f1fc\nname 'single_csv_file' is not defined\nSNOTEL:623_ID_SNTL b5d7b6b8-4e5d-4b5e-8976-c72e99f57769\ncollecting  b5d7b6b8-4e5d-4b5e-8976-c72e99f57769\nname 'single_csv_file' is not defined\nSNOTEL:625_WY_SNTL 253c2443-b820-4c13-bf6d-ba7a5426f52d\ncollecting  253c2443-b820-4c13-bf6d-ba7a5426f52d\nname 'single_csv_file' is not defined\nSNOTEL:626_UT_SNTL 55d3e9a6-e153-43c3-a66c-cd60711ff4a9\ncollecting  55d3e9a6-e153-43c3-a66c-cd60711ff4a9\nname 'single_csv_file' is not defined\nSNOTEL:627_ID_SNTL 830bc2b9-592d-4334-842a-213ba4c0a347\ncollecting  830bc2b9-592d-4334-842a-213ba4c0a347\nname 'single_csv_file' is not defined\nSNOTEL:628_UT_SNTL eeb0a123-9482-4946-ab3f-9e63541cb655\ncollecting  eeb0a123-9482-4946-ab3f-9e63541cb655\nname 'single_csv_file' is not defined\nSNOTEL:629_CO_SNTL 5c4dff48-4afa-4922-949e-f64db583f392\ncollecting  5c4dff48-4afa-4922-949e-f64db583f392\nname 'single_csv_file' is not defined\nSNOTEL:633_CA_SNTL 74f8c8bc-2f60-4232-b447-43459d5d22f0\ncollecting  74f8c8bc-2f60-4232-b447-43459d5d22f0\nname 'single_csv_file' is not defined\nSNOTEL:637_ID_SNTL 36b98590-a7e6-4e00-8c7d-f0f3d25bafec\ncollecting  36b98590-a7e6-4e00-8c7d-f0f3d25bafec\nname 'single_csv_file' is not defined\nSNOTEL:640_AZ_SNTL c0e85162-6ff4-401b-b01e-cc6d7a51eac0\ncollecting  c0e85162-6ff4-401b-b01e-cc6d7a51eac0\nname 'single_csv_file' is not defined\nSNOTEL:642_WA_SNTL 9474e816-b673-4e6d-83e0-28c274945bef\ncollecting  9474e816-b673-4e6d-83e0-28c274945bef\nname 'single_csv_file' is not defined\nSNOTEL:643_UT_SNTL 50d7ad3f-57f0-45e1-911d-b0efff9deb8f\ncollecting  50d7ad3f-57f0-45e1-911d-b0efff9deb8f\nname 'single_csv_file' is not defined\nSNOTEL:644_WA_SNTL dc31c331-837b-4b59-b184-051321e9489c\ncollecting  dc31c331-837b-4b59-b184-051321e9489c\nname 'single_csv_file' is not defined\nSNOTEL:645_ID_SNTL 0d0b742e-c324-4140-8f62-746210d79080\ncollecting  0d0b742e-c324-4140-8f62-746210d79080\nname 'single_csv_file' is not defined\nSNOTEL:646_MT_SNTL 89a7b0ef-1ec8-490f-9207-c93aa57a147f\ncollecting  89a7b0ef-1ec8-490f-9207-c93aa57a147f\nname 'single_csv_file' is not defined\nSNOTEL:647_OR_SNTL c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\ncollecting  c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\nname 'single_csv_file' is not defined\nSNOTEL:648_WA_SNTL 6c94136d-5040-4c09-b1fd-c02dbff210e6\ncollecting  6c94136d-5040-4c09-b1fd-c02dbff210e6\nname 'single_csv_file' is not defined\nSNOTEL:649_MT_SNTL dca30f20-582e-40ef-be6d-aa7858be4baa\ncollecting  dca30f20-582e-40ef-be6d-aa7858be4baa\nname 'single_csv_file' is not defined\nSNOTEL:650_ID_SNTL cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\ncollecting  cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\nname 'single_csv_file' is not defined\nSNOTEL:651_OR_SNTL e13f9c1b-dca0-4c63-a64c-76f6bc725156\ncollecting  e13f9c1b-dca0-4c63-a64c-76f6bc725156\nname 'single_csv_file' is not defined\nSNOTEL:652_NV_SNTL d674ee8e-49f1-44c9-890d-4e04997522a1\ncollecting  d674ee8e-49f1-44c9-890d-4e04997522a1\nname 'single_csv_file' is not defined\nSNOTEL:654_ID_SNTL 0cda0c4a-405b-4e16-8922-964190929d80\ncollecting  0cda0c4a-405b-4e16-8922-964190929d80\nname 'single_csv_file' is not defined\nSNOTEL:655_OR_SNTL e13f9c1b-dca0-4c63-a64c-76f6bc725156\ncollecting  e13f9c1b-dca0-4c63-a64c-76f6bc725156\nname 'single_csv_file' is not defined\nSNOTEL:657_MT_SNTL 99a2d4a9-63a0-43a7-976d-2a1ed822186d\ncollecting  99a2d4a9-63a0-43a7-976d-2a1ed822186d\nname 'single_csv_file' is not defined\nSNOTEL:658_CO_SNTL e833aad1-6da3-4413-b25e-b2ab5b2029c0\ncollecting  e833aad1-6da3-4413-b25e-b2ab5b2029c0\nname 'single_csv_file' is not defined\nSNOTEL:661_WY_SNTL 679fe096-5475-4d4d-b0f8-81e32de889aa\ncollecting  679fe096-5475-4d4d-b0f8-81e32de889aa\nname 'single_csv_file' is not defined\nSNOTEL:662_MT_SNTL cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\ncollecting  cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\nname 'single_csv_file' is not defined\nSNOTEL:663_CO_SNTL f9f7132d-56a2-43e2-baba-312f34dbaeed\ncollecting  f9f7132d-56a2-43e2-baba-312f34dbaeed\nname 'single_csv_file' is not defined\nSNOTEL:664_MT_SNTL d37ccc2e-7127-48ec-9425-2e77681c3635\ncollecting  d37ccc2e-7127-48ec-9425-2e77681c3635\nname 'single_csv_file' is not defined\nSNOTEL:665_NM_SNTL 2ca6a37f-67f5-4905-864b-ddf98d956ebb\ncollecting  2ca6a37f-67f5-4905-864b-ddf98d956ebb\nname 'single_csv_file' is not defined\nSNOTEL:666_OR_SNTL e13f9c1b-dca0-4c63-a64c-76f6bc725156\ncollecting  e13f9c1b-dca0-4c63-a64c-76f6bc725156\nname 'single_csv_file' is not defined\nSNOTEL:667_MT_SNTL 89a7b0ef-1ec8-490f-9207-c93aa57a147f\ncollecting  89a7b0ef-1ec8-490f-9207-c93aa57a147f\nname 'single_csv_file' is not defined\nSNOTEL:669_CO_SNTL 3527e00e-1aee-46ce-ad9d-8122cff4c202\ncollecting  3527e00e-1aee-46ce-ad9d-8122cff4c202\nname 'single_csv_file' is not defined\nSNOTEL:670_MT_SNTL f46e7d90-a754-44a8-b262-63f5c401a0ab\ncollecting  f46e7d90-a754-44a8-b262-63f5c401a0ab\nname 'single_csv_file' is not defined\nSNOTEL:671_OR_SNTL c64f2bf3-90f0-4a96-b3a8-9f8db46dce92\ncollecting  c64f2bf3-90f0-4a96-b3a8-9f8db46dce92\nname 'single_csv_file' is not defined\nSNOTEL:672_WA_SNTL 360f1bcc-aa60-4052-a18a-b33da5745ff4\ncollecting  360f1bcc-aa60-4052-a18a-b33da5745ff4\nname 'single_csv_file' is not defined\nSNOTEL:673_WY_SNTL 8116acfb-8035-4d34-b9b9-b0af2c5697df\ncollecting  8116acfb-8035-4d34-b9b9-b0af2c5697df\nname 'single_csv_file' is not defined\nSNOTEL:676_WY_SNTL 692c41af-2210-4dd6-916d-c99e76807447\ncollecting  692c41af-2210-4dd6-916d-c99e76807447\nname 'single_csv_file' is not defined\nSNOTEL:677_ID_SNTL 6bf06917-011b-4029-8fbe-a8dfea3bc598\ncollecting  6bf06917-011b-4029-8fbe-a8dfea3bc598\nname 'single_csv_file' is not defined\nSNOTEL:680_CO_SNTL 94d9d95f-32b2-470d-95f8-dbd843d6def3\ncollecting  94d9d95f-32b2-470d-95f8-dbd843d6def3\nname 'single_csv_file' is not defined\nSNOTEL:681_WA_SNTL 47e625fa-e2df-43ce-84dd-8ac21fdda75a\ncollecting  47e625fa-e2df-43ce-84dd-8ac21fdda75a\nname 'single_csv_file' is not defined\nSNOTEL:682_CO_SNTL 35aecf7e-5f0b-4533-995c-3cb4165d44b5\ncollecting  35aecf7e-5f0b-4533-995c-3cb4165d44b5\nname 'single_csv_file' is not defined\nSNOTEL:683_WY_SNTL e776d9b6-2180-4f50-90bf-77f7b920fc3b\ncollecting  e776d9b6-2180-4f50-90bf-77f7b920fc3b\nname 'single_csv_file' is not defined\nSNOTEL:684_UT_SNTL eeb0a123-9482-4946-ab3f-9e63541cb655\ncollecting  eeb0a123-9482-4946-ab3f-9e63541cb655\nname 'single_csv_file' is not defined\nSNOTEL:686_UT_SNTL 0a820e12-033b-45d6-9ef9-d70f4c5e5b63\ncollecting  0a820e12-033b-45d6-9ef9-d70f4c5e5b63\nname 'single_csv_file' is not defined\nSNOTEL:689_WY_SNTL ce76ce00-c8b5-4597-8ca3-1ec9db795b50\ncollecting  ce76ce00-c8b5-4597-8ca3-1ec9db795b50\nname 'single_csv_file' is not defined\nSNOTEL:690_MT_SNTL 517aefce-a617-4251-acb9-c5faf0b7fdf3\ncollecting  517aefce-a617-4251-acb9-c5faf0b7fdf3\nname 'single_csv_file' is not defined\nSNOTEL:691_UT_SNTL 9813294e-a28e-45c0-976d-a6fa65d87927\ncollecting  9813294e-a28e-45c0-976d-a6fa65d87927\nname 'single_csv_file' is not defined\nSNOTEL:693_MT_SNTL dca30f20-582e-40ef-be6d-aa7858be4baa\ncollecting  dca30f20-582e-40ef-be6d-aa7858be4baa\nname 'single_csv_file' is not defined\nSNOTEL:694_UT_SNTL 7b636fe2-1760-45c5-afce-505f2e927163\ncollecting  7b636fe2-1760-45c5-afce-505f2e927163\nname 'single_csv_file' is not defined\nSNOTEL:696_MT_SNTL f46e7d90-a754-44a8-b262-63f5c401a0ab\ncollecting  f46e7d90-a754-44a8-b262-63f5c401a0ab\nname 'single_csv_file' is not defined\nSNOTEL:698_NV_SNTL 5308a803-69e6-43cd-89db-66e93f9f83af\ncollecting  5308a803-69e6-43cd-89db-66e93f9f83af\nname 'single_csv_file' is not defined\nSNOTEL:699_WA_SNTL 47e625fa-e2df-43ce-84dd-8ac21fdda75a\ncollecting  47e625fa-e2df-43ce-84dd-8ac21fdda75a\nname 'single_csv_file' is not defined\nSNOTEL:700_MT_SNTL 630bae26-a6cc-4a36-bbe5-40dc15b38dea\ncollecting  630bae26-a6cc-4a36-bbe5-40dc15b38dea\nname 'single_csv_file' is not defined\nSNOTEL:702_WA_SNTL bb65d7a1-a5d5-4c89-9ef9-f0f1db06cc58\ncollecting  bb65d7a1-a5d5-4c89-9ef9-f0f1db06cc58\nname 'single_csv_file' is not defined\nSNOTEL:704_ID_SNTL 0bd47ec1-0e3c-43bf-a491-534d06beb19f\ncollecting  0bd47ec1-0e3c-43bf-a491-534d06beb19f\nname 'single_csv_file' is not defined\nSNOTEL:706_OR_SNTL 0a0ea690-5b73-4459-91d5-a6948d132a48\ncollecting  0a0ea690-5b73-4459-91d5-a6948d132a48\nname 'single_csv_file' is not defined\nSNOTEL:708_NM_SNTL 6afdc499-9686-4451-b207-13df777df662\ncollecting  6afdc499-9686-4451-b207-13df777df662\nname 'single_csv_file' is not defined\nSNOTEL:709_CO_SNTL 02cf33c2-c8e2-48b9-bf72-92506e97e251\ncollecting  02cf33c2-c8e2-48b9-bf72-92506e97e251\nname 'single_csv_file' is not defined\nSNOTEL:710_OR_SNTL ea185683-4427-44c3-84e1-706cf16781ce\ncollecting  ea185683-4427-44c3-84e1-706cf16781ce\nname 'single_csv_file' is not defined\nSNOTEL:712_OR_SNTL b98777af-0c7c-44f7-9c03-85d6d412856c\ncollecting  b98777af-0c7c-44f7-9c03-85d6d412856c\nname 'single_csv_file' is not defined\nSNOTEL:713_CO_SNTL 7610b45e-5652-4604-ab5b-99344f71616b\ncollecting  7610b45e-5652-4604-ab5b-99344f71616b\nname 'single_csv_file' is not defined\nSNOTEL:714_UT_SNTL ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\ncollecting  ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\nname 'single_csv_file' is not defined\nSNOTEL:715_NM_SNTL e3473791-6153-49bc-a2ed-0b1e3e243942\ncollecting  e3473791-6153-49bc-a2ed-0b1e3e243942\nname 'single_csv_file' is not defined\nSNOTEL:717_CO_SNTL d64197fc-0723-4c61-9ce8-ff2554e24154\ncollecting  d64197fc-0723-4c61-9ce8-ff2554e24154\nname 'single_csv_file' is not defined\nSNOTEL:718_CO_SNTL 9f0599d8-81f3-4ab5-b275-48a6ddaaae5b\ncollecting  9f0599d8-81f3-4ab5-b275-48a6ddaaae5b\nname 'single_csv_file' is not defined\nSNOTEL:720_UT_SNTL a28a3caf-eea2-414f-8003-62ac82daaafa\ncollecting  a28a3caf-eea2-414f-8003-62ac82daaafa\nname 'single_csv_file' is not defined\nSNOTEL:723_UT_SNTL 93b8483d-a510-42ff-865e-33d5a8784dc4\ncollecting  93b8483d-a510-42ff-865e-33d5a8784dc4\nname 'single_csv_file' is not defined\nSNOTEL:724_CA_SNTL f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nname 'single_csv_file' is not defined\nSNOTEL:726_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nname 'single_csv_file' is not defined\nSNOTEL:727_MT_SNTL cacaa17b-0b1b-4fe2-a4c1-7728e6c154c1\ncollecting  cacaa17b-0b1b-4fe2-a4c1-7728e6c154c1\nname 'single_csv_file' is not defined\nSNOTEL:728_WA_SNTL dc31c331-837b-4b59-b184-051321e9489c\ncollecting  dc31c331-837b-4b59-b184-051321e9489c\nname 'single_csv_file' is not defined\nSNOTEL:729_OR_SNTL ea185683-4427-44c3-84e1-706cf16781ce\ncollecting  ea185683-4427-44c3-84e1-706cf16781ce\nname 'single_csv_file' is not defined\nSNOTEL:730_WY_SNTL df7e906a-07f3-4a46-b9a5-0200427c26f7\ncollecting  df7e906a-07f3-4a46-b9a5-0200427c26f7\nname 'single_csv_file' is not defined\nSNOTEL:731_WY_SNTL 3b5bfd37-070c-4ee9-a470-c9338851e270\ncollecting  3b5bfd37-070c-4ee9-a470-c9338851e270\nname 'single_csv_file' is not defined\nSNOTEL:732_WY_SNTL 8116acfb-8035-4d34-b9b9-b0af2c5697df\ncollecting  8116acfb-8035-4d34-b9b9-b0af2c5697df\nname 'single_csv_file' is not defined\nSNOTEL:733_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nname 'single_csv_file' is not defined\nSNOTEL:734_WA_SNTL bfda850c-3027-4e91-afcb-cca5e73e4a03\ncollecting  bfda850c-3027-4e91-afcb-cca5e73e4a03\nname 'single_csv_file' is not defined\nSNOTEL:735_ID_SNTL cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\ncollecting  cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\nname 'single_csv_file' is not defined\nSNOTEL:736_OR_SNTL c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\ncollecting  c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\nname 'single_csv_file' is not defined\nSNOTEL:738_ID_SNTL 0d0b742e-c324-4140-8f62-746210d79080\ncollecting  0d0b742e-c324-4140-8f62-746210d79080\nname 'single_csv_file' is not defined\nSNOTEL:739_CO_SNTL 35eee1cd-f92a-4ba5-af03-fb5347490f41\ncollecting  35eee1cd-f92a-4ba5-af03-fb5347490f41\nname 'single_csv_file' is not defined\nSNOTEL:741_ID_SNTL 6bf06917-011b-4029-8fbe-a8dfea3bc598\ncollecting  6bf06917-011b-4029-8fbe-a8dfea3bc598\nname 'single_csv_file' is not defined\nSNOTEL:742_UT_SNTL ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\ncollecting  ad9f3d28-ef5a-4851-a5e4-5e2f7b63d17b\nname 'single_csv_file' is not defined\nSNOTEL:743_OR_SNTL a6861fc3-2315-451b-9b95-c06d1ea96b4b\ncollecting  a6861fc3-2315-451b-9b95-c06d1ea96b4b\nname 'single_csv_file' is not defined\nSNOTEL:744_NM_SNTL 6afdc499-9686-4451-b207-13df777df662\ncollecting  6afdc499-9686-4451-b207-13df777df662\nname 'single_csv_file' is not defined\nSNOTEL:745_OR_SNTL 5e252b65-58dd-421f-a0db-3d4669bfb235\ncollecting  5e252b65-58dd-421f-a0db-3d4669bfb235\nname 'single_csv_file' is not defined\nSNOTEL:746_NV_SNTL 5308a803-69e6-43cd-89db-66e93f9f83af\ncollecting  5308a803-69e6-43cd-89db-66e93f9f83af\nname 'single_csv_file' is not defined\nSNOTEL:747_ID_SNTL b1077b69-4b02-458e-8a4b-e68695ac534f\ncollecting  b1077b69-4b02-458e-8a4b-e68695ac534f\nname 'single_csv_file' is not defined\nSNOTEL:748_WA_SNTL cdfc27f0-b990-45f7-bac6-7c674cd157ac\ncollecting  cdfc27f0-b990-45f7-bac6-7c674cd157ac\nname 'single_csv_file' is not defined\nSNOTEL:749_ID_SNTL ce76ce00-c8b5-4597-8ca3-1ec9db795b50\ncollecting  ce76ce00-c8b5-4597-8ca3-1ec9db795b50\nname 'single_csv_file' is not defined\nSNOTEL:751_WY_SNTL 02c3ec4a-8de4-4284-9ec1-5a942d3d098e\ncollecting  02c3ec4a-8de4-4284-9ec1-5a942d3d098e\nname 'single_csv_file' is not defined\nSNOTEL:752_ID_SNTL b1077b69-4b02-458e-8a4b-e68695ac534f\ncollecting  b1077b69-4b02-458e-8a4b-e68695ac534f\nname 'single_csv_file' is not defined\nSNOTEL:754_MT_SNTL e467a17f-a729-4938-87a1-ac25157eed63\ncollecting  e467a17f-a729-4938-87a1-ac25157eed63\nname 'single_csv_file' is not defined\nSNOTEL:755_NM_SNTL 43be1328-02b0-4cc1-8e9b-75842908cee3\ncollecting  43be1328-02b0-4cc1-8e9b-75842908cee3\nname 'single_csv_file' is not defined\nSNOTEL:756_OR_SNTL 0a0ea690-5b73-4459-91d5-a6948d132a48\ncollecting  0a0ea690-5b73-4459-91d5-a6948d132a48\nname 'single_csv_file' is not defined\nSNOTEL:757_NM_SNTL 1135e377-22e6-4290-b4cd-e6739de7fd8a\ncollecting  1135e377-22e6-4290-b4cd-e6739de7fd8a\nname 'single_csv_file' is not defined\nSNOTEL:761_ID_SNTL 6bf06917-011b-4029-8fbe-a8dfea3bc598\ncollecting  6bf06917-011b-4029-8fbe-a8dfea3bc598\nname 'single_csv_file' is not defined\nSNOTEL:762_CO_SNTL 85f0acd8-4008-472d-bf40-e35e0e2934e4\ncollecting  85f0acd8-4008-472d-bf40-e35e0e2934e4\nname 'single_csv_file' is not defined\nSNOTEL:763_UT_SNTL 7bc3c413-4709-4ddd-a2ad-99f6cad9436c\ncollecting  7bc3c413-4709-4ddd-a2ad-99f6cad9436c\nname 'single_csv_file' is not defined\nSNOTEL:764_WY_SNTL 491846d3-f81a-4777-b49f-0a0c74168395\ncollecting  491846d3-f81a-4777-b49f-0a0c74168395\nname 'single_csv_file' is not defined\nSNOTEL:765_WY_SNTL df7e906a-07f3-4a46-b9a5-0200427c26f7\ncollecting  df7e906a-07f3-4a46-b9a5-0200427c26f7\nname 'single_csv_file' is not defined\nSNOTEL:767_OR_SNTL a6a9febf-ea16-4223-83d4-8e459e2af85a\ncollecting  a6a9febf-ea16-4223-83d4-8e459e2af85a\nname 'single_csv_file' is not defined\nSNOTEL:770_ID_SNTL 6bf06917-011b-4029-8fbe-a8dfea3bc598\ncollecting  6bf06917-011b-4029-8fbe-a8dfea3bc598\nname 'single_csv_file' is not defined\nSNOTEL:771_CA_SNTL 01be2cc7-ef77-4e4d-80ed-c4f8139162c3\ncollecting  01be2cc7-ef77-4e4d-80ed-c4f8139162c3\nname 'single_csv_file' is not defined\nSNOTEL:773_CO_SNTL efada0af-09bf-4013-a1c6-0837f8ff59c5\ncollecting  efada0af-09bf-4013-a1c6-0837f8ff59c5\nname 'single_csv_file' is not defined\nSNOTEL:777_WA_SNTL cdfc27f0-b990-45f7-bac6-7c674cd157ac\ncollecting  cdfc27f0-b990-45f7-bac6-7c674cd157ac\nname 'single_csv_file' is not defined\nSNOTEL:778_CA_SNTL 962f6718-ce02-4d13-b28c-e159d1adc2d4\ncollecting  962f6718-ce02-4d13-b28c-e159d1adc2d4\nname 'single_csv_file' is not defined\nSNOTEL:779_WY_SNTL df7e906a-07f3-4a46-b9a5-0200427c26f7\ncollecting  df7e906a-07f3-4a46-b9a5-0200427c26f7\nname 'single_csv_file' is not defined\nSNOTEL:780_CO_SNTL ce9da6bf-cf6e-4edb-b579-5a0853b2ed17\ncollecting  ce9da6bf-cf6e-4edb-b579-5a0853b2ed17\nname 'single_csv_file' is not defined\nSNOTEL:781_MT_SNTL 517aefce-a617-4251-acb9-c5faf0b7fdf3\ncollecting  517aefce-a617-4251-acb9-c5faf0b7fdf3\nname 'single_csv_file' is not defined\nSNOTEL:782_ID_SNTL da6ce150-5daf-4a91-9fdd-a85854462b08\ncollecting  da6ce150-5daf-4a91-9fdd-a85854462b08\nname 'single_csv_file' is not defined\nSNOTEL:784_CA_SNTL f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nname 'single_csv_file' is not defined\nSNOTEL:786_WY_SNTL de9c541b-ce5e-4cc6-9ddd-03f85dc5b3d5\ncollecting  de9c541b-ce5e-4cc6-9ddd-03f85dc5b3d5\nname 'single_csv_file' is not defined\nSNOTEL:787_MT_SNTL d37ccc2e-7127-48ec-9425-2e77681c3635\ncollecting  d37ccc2e-7127-48ec-9425-2e77681c3635\nname 'single_csv_file' is not defined\nSNOTEL:790_UT_SNTL c0568d62-49c7-4d9f-beba-ac0fb3e064c5\ncollecting  c0568d62-49c7-4d9f-beba-ac0fb3e064c5\nname 'single_csv_file' is not defined\nSNOTEL:791_WA_SNTL bfda850c-3027-4e91-afcb-cca5e73e4a03\ncollecting  bfda850c-3027-4e91-afcb-cca5e73e4a03\nname 'single_csv_file' is not defined\nSNOTEL:792_ID_SNTL f3332d55-ecc8-4644-9deb-180e42abb2eb\ncollecting  f3332d55-ecc8-4644-9deb-180e42abb2eb\nname 'single_csv_file' is not defined\nSNOTEL:793_CO_SNTL 8c45801f-6377-42e1-ae0a-9b53593ff843\ncollecting  8c45801f-6377-42e1-ae0a-9b53593ff843\nname 'single_csv_file' is not defined\nSNOTEL:794_OR_SNTL 0a0ea690-5b73-4459-91d5-a6948d132a48\ncollecting  0a0ea690-5b73-4459-91d5-a6948d132a48\nname 'single_csv_file' is not defined\nSNOTEL:795_UT_SNTL cfe58efd-ce2a-495a-90cd-6826f704ebee\ncollecting  cfe58efd-ce2a-495a-90cd-6826f704ebee\nname 'single_csv_file' is not defined\nSNOTEL:797_CO_SNTL 003fdfbd-c766-4312-b029-bd4cfba6ebef\ncollecting  003fdfbd-c766-4312-b029-bd4cfba6ebef\nname 'single_csv_file' is not defined\nSNOTEL:798_WY_SNTL 02c3ec4a-8de4-4284-9ec1-5a942d3d098e\ncollecting  02c3ec4a-8de4-4284-9ec1-5a942d3d098e\nname 'single_csv_file' is not defined\nSNOTEL:801_OR_SNTL ea185683-4427-44c3-84e1-706cf16781ce\ncollecting  ea185683-4427-44c3-84e1-706cf16781ce\nname 'single_csv_file' is not defined\nSNOTEL:803_ID_SNTL b5d7b6b8-4e5d-4b5e-8976-c72e99f57769\ncollecting  b5d7b6b8-4e5d-4b5e-8976-c72e99f57769\nname 'single_csv_file' is not defined\nSNOTEL:804_WA_SNTL cdfc27f0-b990-45f7-bac6-7c674cd157ac\ncollecting  cdfc27f0-b990-45f7-bac6-7c674cd157ac\nname 'single_csv_file' is not defined\nSNOTEL:805_ID_SNTL af0463d4-f20f-4d13-bd0f-5834e2e8717b\ncollecting  af0463d4-f20f-4d13-bd0f-5834e2e8717b\nname 'single_csv_file' is not defined\nSNOTEL:806_WY_SNTL 333458b2-c1a9-47a3-8ae0-92053ad28ae3\ncollecting  333458b2-c1a9-47a3-8ae0-92053ad28ae3\nname 'single_csv_file' is not defined\nSNOTEL:809_CA_SNTL f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nname 'single_csv_file' is not defined\nSNOTEL:810_OR_SNTL 5e252b65-58dd-421f-a0db-3d4669bfb235\ncollecting  5e252b65-58dd-421f-a0db-3d4669bfb235\nname 'single_csv_file' is not defined\nSNOTEL:811_NV_SNTL 875622b7-5253-43d2-8e0f-348767860eb9\ncollecting  875622b7-5253-43d2-8e0f-348767860eb9\nname 'single_csv_file' is not defined\nSNOTEL:812_OR_SNTL c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\ncollecting  c07ab5f6-14a9-4b0b-a9af-9f7db6e8c220\nname 'single_csv_file' is not defined\nSNOTEL:814_UT_SNTL eeb0a123-9482-4946-ab3f-9e63541cb655\ncollecting  eeb0a123-9482-4946-ab3f-9e63541cb655\nname 'single_csv_file' is not defined\nSNOTEL:815_OR_SNTL fe33672e-7ea7-4c5d-8639-96b2cc7edb0c\ncollecting  fe33672e-7ea7-4c5d-8639-96b2cc7edb0c\nname 'single_csv_file' is not defined\nSNOTEL:816_WY_SNTL 40c4f8cd-b0ca-4d37-b91e-b69e5dff7f9a\ncollecting  40c4f8cd-b0ca-4d37-b91e-b69e5dff7f9a\nname 'single_csv_file' is not defined\nSNOTEL:817_WA_SNTL 47e625fa-e2df-43ce-84dd-8ac21fdda75a\ncollecting  47e625fa-e2df-43ce-84dd-8ac21fdda75a\nname 'single_csv_file' is not defined\nSNOTEL:818_WY_SNTL 02c3ec4a-8de4-4284-9ec1-5a942d3d098e\ncollecting  02c3ec4a-8de4-4284-9ec1-5a942d3d098e\nname 'single_csv_file' is not defined\nSNOTEL:819_WY_SNTL 692c41af-2210-4dd6-916d-c99e76807447\ncollecting  692c41af-2210-4dd6-916d-c99e76807447\nname 'single_csv_file' is not defined\nSNOTEL:820_UT_SNTL eeb0a123-9482-4946-ab3f-9e63541cb655\ncollecting  eeb0a123-9482-4946-ab3f-9e63541cb655\nname 'single_csv_file' is not defined\nSNOTEL:822_WY_SNTL 695bed09-0ad9-406e-b489-69408adeea06\ncollecting  695bed09-0ad9-406e-b489-69408adeea06\nname 'single_csv_file' is not defined\nSNOTEL:823_UT_SNTL 2222b7b3-f48b-4cea-90bf-8e7245d002ea\ncollecting  2222b7b3-f48b-4cea-90bf-8e7245d002ea\nname 'single_csv_file' is not defined\nSNOTEL:824_WA_SNTL f78ea076-10a1-45dc-a848-c08e129c6a28\ncollecting  f78ea076-10a1-45dc-a848-c08e129c6a28\nname 'single_csv_file' is not defined\nSNOTEL:825_CO_SNTL 02cf33c2-c8e2-48b9-bf72-92506e97e251\ncollecting  02cf33c2-c8e2-48b9-bf72-92506e97e251\nname 'single_csv_file' is not defined\nSNOTEL:826_WY_SNTL 990e5974-9c60-4c9a-ba23-ddce13971178\ncollecting  990e5974-9c60-4c9a-ba23-ddce13971178\nname 'single_csv_file' is not defined\nSNOTEL:827_CO_SNTL d64197fc-0723-4c61-9ce8-ff2554e24154\ncollecting  d64197fc-0723-4c61-9ce8-ff2554e24154\nname 'single_csv_file' is not defined\nSNOTEL:830_ID_SNTL 36b98590-a7e6-4e00-8c7d-f0f3d25bafec\ncollecting  36b98590-a7e6-4e00-8c7d-f0f3d25bafec\nname 'single_csv_file' is not defined\nSNOTEL:831_WY_SNTL 551e2612-8a22-4c44-8290-78dc0e4af85d\ncollecting  551e2612-8a22-4c44-8290-78dc0e4af85d\nname 'single_csv_file' is not defined\nSNOTEL:832_WA_SNTL 6d0ff6eb-0411-4863-b4e7-90958db98115\ncollecting  6d0ff6eb-0411-4863-b4e7-90958db98115\nname 'single_csv_file' is not defined\nSNOTEL:833_UT_SNTL 50d7ad3f-57f0-45e1-911d-b0efff9deb8f\ncollecting  50d7ad3f-57f0-45e1-911d-b0efff9deb8f\nname 'single_csv_file' is not defined\nSNOTEL:834_CA_SNTL f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nname 'single_csv_file' is not defined\nSNOTEL:835_MT_SNTL cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\ncollecting  cfd2c7fc-c29a-4a32-a11d-d04fa2dd660d\nname 'single_csv_file' is not defined\nSNOTEL:837_WY_SNTL 491846d3-f81a-4777-b49f-0a0c74168395\ncollecting  491846d3-f81a-4777-b49f-0a0c74168395\nname 'single_csv_file' is not defined\nSNOTEL:838_CO_SNTL f9f7132d-56a2-43e2-baba-312f34dbaeed\ncollecting  f9f7132d-56a2-43e2-baba-312f34dbaeed\nname 'single_csv_file' is not defined\nSNOTEL:839_CO_SNTL 0c31f316-6718-4a43-a9f1-ed552e45bd0f\ncollecting  0c31f316-6718-4a43-a9f1-ed552e45bd0f\nname 'single_csv_file' is not defined\nSNOTEL:840_CO_SNTL 3789f7a5-5743-4005-844d-602dadb33030\ncollecting  3789f7a5-5743-4005-844d-602dadb33030\nname 'single_csv_file' is not defined\nSNOTEL:841_WA_SNTL 6d0ff6eb-0411-4863-b4e7-90958db98115\ncollecting  6d0ff6eb-0411-4863-b4e7-90958db98115\nname 'single_csv_file' is not defined\nSNOTEL:842_CO_SNTL f62e6b4d-7f9d-4139-bac4-59f084fb09cd\ncollecting  f62e6b4d-7f9d-4139-bac4-59f084fb09cd\nname 'single_csv_file' is not defined\nSNOTEL:844_UT_SNTL 93b8483d-a510-42ff-865e-33d5a8784dc4\ncollecting  93b8483d-a510-42ff-865e-33d5a8784dc4\nname 'single_csv_file' is not defined\nSNOTEL:845_ID_SNTL 695c7749-a3b8-4158-bd14-59d1f2c3e736\ncollecting  695c7749-a3b8-4158-bd14-59d1f2c3e736\nname 'single_csv_file' is not defined\nSNOTEL:847_MT_SNTL dca30f20-582e-40ef-be6d-aa7858be4baa\ncollecting  dca30f20-582e-40ef-be6d-aa7858be4baa\nname 'single_csv_file' is not defined\nSNOTEL:848_CA_SNTL f6106ef5-e6fd-423b-9034-59bce18319da\ncollecting  f6106ef5-e6fd-423b-9034-59bce18319da\nname 'single_csv_file' is not defined\nSNOTEL:849_NV_SNTL 38793f95-324b-4f01-b1a7-45e1c9353bc1\ncollecting  38793f95-324b-4f01-b1a7-45e1c9353bc1\nname 'single_csv_file' is not defined\nSNOTEL:850_MT_SNTL 4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\ncollecting  4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\nname 'single_csv_file' is not defined\nSNOTEL:852_WY_SNTL 8116acfb-8035-4d34-b9b9-b0af2c5697df\ncollecting  8116acfb-8035-4d34-b9b9-b0af2c5697df\nname 'single_csv_file' is not defined\nSNOTEL:854_NM_SNTL 9c43edf0-541f-4dbb-9fe1-42cc83d453bd\ncollecting  9c43edf0-541f-4dbb-9fe1-42cc83d453bd\nname 'single_csv_file' is not defined\nSNOTEL:855_ID_SNTL c66f40ed-f72e-4012-991c-1f3726e5c8ad\ncollecting  c66f40ed-f72e-4012-991c-1f3726e5c8ad\nname 'single_csv_file' is not defined\nSNOTEL:857_CO_SNTL 2ca6a37f-67f5-4905-864b-ddf98d956ebb\ncollecting  2ca6a37f-67f5-4905-864b-ddf98d956ebb\nname 'single_csv_file' is not defined\nSNOTEL:858_MT_SNTL b1936012-0d31-4b92-8d60-c24903b2e569\ncollecting  b1936012-0d31-4b92-8d60-c24903b2e569\nname 'single_csv_file' is not defined\nSNOTEL:859_WY_SNTL 8116acfb-8035-4d34-b9b9-b0af2c5697df\ncollecting  8116acfb-8035-4d34-b9b9-b0af2c5697df\nname 'single_csv_file' is not defined\nSNOTEL:861_AZ_SNTL a2588440-600e-41da-b2b9-1f5632ecdef6\ncollecting  a2588440-600e-41da-b2b9-1f5632ecdef6\nname 'single_csv_file' is not defined\nSNOTEL:862_MT_SNTL e776d9b6-2180-4f50-90bf-77f7b920fc3b\ncollecting  e776d9b6-2180-4f50-90bf-77f7b920fc3b\nname 'single_csv_file' is not defined\nSNOTEL:863_WA_SNTL bb65d7a1-a5d5-4c89-9ef9-f0f1db06cc58\ncollecting  bb65d7a1-a5d5-4c89-9ef9-f0f1db06cc58\nname 'single_csv_file' is not defined\nSNOTEL:864_UT_SNTL 0a820e12-033b-45d6-9ef9-d70f4c5e5b63\ncollecting  0a820e12-033b-45d6-9ef9-d70f4c5e5b63\nname 'single_csv_file' is not defined\nSNOTEL:865_UT_SNTL ad44deb7-e56d-47bd-8d64-7147493e0aee\ncollecting  ad44deb7-e56d-47bd-8d64-7147493e0aee\nname 'single_csv_file' is not defined\nSNOTEL:868_WY_SNTL 551e2612-8a22-4c44-8290-78dc0e4af85d\ncollecting  551e2612-8a22-4c44-8290-78dc0e4af85d\nname 'single_csv_file' is not defined\nSNOTEL:869_CO_SNTL 8c45801f-6377-42e1-ae0a-9b53593ff843\ncollecting  8c45801f-6377-42e1-ae0a-9b53593ff843\nname 'single_csv_file' is not defined\nSNOTEL:871_ID_SNTL 5308a803-69e6-43cd-89db-66e93f9f83af\ncollecting  5308a803-69e6-43cd-89db-66e93f9f83af\nname 'single_csv_file' is not defined\nSNOTEL:872_WY_SNTL ab89875f-3b86-4c6a-8d66-767017570dfc\ncollecting  ab89875f-3b86-4c6a-8d66-767017570dfc\nname 'single_csv_file' is not defined\nSNOTEL:873_OR_SNTL 631ed3c9-7863-4e7c-86fa-4bfb043f2851\ncollecting  631ed3c9-7863-4e7c-86fa-4bfb043f2851\nname 'single_csv_file' is not defined\nSNOTEL:874_CO_SNTL 3789f7a5-5743-4005-844d-602dadb33030\ncollecting  3789f7a5-5743-4005-844d-602dadb33030\nname 'single_csv_file' is not defined\nSNOTEL:876_MT_SNTL 99a2d4a9-63a0-43a7-976d-2a1ed822186d\ncollecting  99a2d4a9-63a0-43a7-976d-2a1ed822186d\nname 'single_csv_file' is not defined\nSNOTEL:877_AZ_SNTL 0aeaffd7-9089-49e7-85ad-2314f32cbf7c\ncollecting  0aeaffd7-9089-49e7-85ad-2314f32cbf7c\nname 'single_csv_file' is not defined\nSNOTEL:878_WY_SNTL 692c41af-2210-4dd6-916d-c99e76807447\ncollecting  692c41af-2210-4dd6-916d-c99e76807447\nname 'single_csv_file' is not defined\nSNOTEL:895_ID_SNTL f3332d55-ecc8-4644-9deb-180e42abb2eb\ncollecting  f3332d55-ecc8-4644-9deb-180e42abb2eb\nname 'single_csv_file' is not defined\nSNOTEL:896_UT_SNTL 10162c55-772d-49d2-8b1b-b1f9c86254b2\ncollecting  10162c55-772d-49d2-8b1b-b1f9c86254b2\nname 'single_csv_file' is not defined\nSNOTEL:897_WA_SNTL 360f1bcc-aa60-4052-a18a-b33da5745ff4\ncollecting  360f1bcc-aa60-4052-a18a-b33da5745ff4\nname 'single_csv_file' is not defined\nSNOTEL:899_WA_SNTL 360f1bcc-aa60-4052-a18a-b33da5745ff4\ncollecting  360f1bcc-aa60-4052-a18a-b33da5745ff4\nname 'single_csv_file' is not defined\nSNOTEL:901_MT_SNTL 89a7b0ef-1ec8-490f-9207-c93aa57a147f\ncollecting  89a7b0ef-1ec8-490f-9207-c93aa57a147f\nname 'single_csv_file' is not defined\nSNOTEL:902_AZ_SNTL 1135e377-22e6-4290-b4cd-e6739de7fd8a\ncollecting  1135e377-22e6-4290-b4cd-e6739de7fd8a\nname 'single_csv_file' is not defined\nSNOTEL:904_CO_SNTL 0d9f0708-5e8d-4eb8-b946-6441ef955516\ncollecting  0d9f0708-5e8d-4eb8-b946-6441ef955516\nname 'single_csv_file' is not defined\nSNOTEL:905_CO_SNTL 9e5bc091-13c7-46ec-8c17-8e315b7e535c\ncollecting  9e5bc091-13c7-46ec-8c17-8e315b7e535c\nname 'single_csv_file' is not defined\nSNOTEL:906_UT_SNTL 93b8483d-a510-42ff-865e-33d5a8784dc4\ncollecting  93b8483d-a510-42ff-865e-33d5a8784dc4\nname 'single_csv_file' is not defined\nSNOTEL:907_UT_SNTL ad44deb7-e56d-47bd-8d64-7147493e0aee\ncollecting  ad44deb7-e56d-47bd-8d64-7147493e0aee\nname 'single_csv_file' is not defined\nSNOTEL:909_WA_SNTL e6d48180-814d-494b-99cc-0be5cd1a0eaf\ncollecting  e6d48180-814d-494b-99cc-0be5cd1a0eaf\nname 'single_csv_file' is not defined\nSNOTEL:911_WA_SNTL 360f1bcc-aa60-4052-a18a-b33da5745ff4\ncollecting  360f1bcc-aa60-4052-a18a-b33da5745ff4\nname 'single_csv_file' is not defined\nSNOTEL:912_WA_SNTL 8e7f826f-8dc9-490a-9282-98d899a07cc7\ncollecting  8e7f826f-8dc9-490a-9282-98d899a07cc7\nname 'single_csv_file' is not defined\nSNOTEL:913_CO_SNTL 02cf33c2-c8e2-48b9-bf72-92506e97e251\ncollecting  02cf33c2-c8e2-48b9-bf72-92506e97e251\nname 'single_csv_file' is not defined\nSNOTEL:915_ID_SNTL 830bc2b9-592d-4334-842a-213ba4c0a347\ncollecting  830bc2b9-592d-4334-842a-213ba4c0a347\nname 'single_csv_file' is not defined\nSNOTEL:917_MT_SNTL 9ea23099-dd30-4b26-9de7-5d42d5dae87b\ncollecting  9ea23099-dd30-4b26-9de7-5d42d5dae87b\nname 'single_csv_file' is not defined\nSNOTEL:918_MT_SNTL 2f5c1968-2c34-4539-a9f4-38298d0de925\ncollecting  2f5c1968-2c34-4539-a9f4-38298d0de925\nname 'single_csv_file' is not defined\nSNOTEL:919_MT_SNTL eab40c22-0c15-4291-a6ce-e085a7f0f1e4\ncollecting  eab40c22-0c15-4291-a6ce-e085a7f0f1e4\nname 'single_csv_file' is not defined\nSNOTEL:920_SD_SNTL ab89875f-3b86-4c6a-8d66-767017570dfc\ncollecting  ab89875f-3b86-4c6a-8d66-767017570dfc\nname 'single_csv_file' is not defined\nSNOTEL:921_NM_SNTL 9c43edf0-541f-4dbb-9fe1-42cc83d453bd\ncollecting  9c43edf0-541f-4dbb-9fe1-42cc83d453bd\nname 'single_csv_file' is not defined\nSNOTEL:922_NM_SNTL 9c43edf0-541f-4dbb-9fe1-42cc83d453bd\ncollecting  9c43edf0-541f-4dbb-9fe1-42cc83d453bd\nname 'single_csv_file' is not defined\nSNOTEL:923_WY_SNTL 990e5974-9c60-4c9a-ba23-ddce13971178\ncollecting  990e5974-9c60-4c9a-ba23-ddce13971178\nname 'single_csv_file' is not defined\nSNOTEL:924_MT_SNTL b1936012-0d31-4b92-8d60-c24903b2e569\ncollecting  b1936012-0d31-4b92-8d60-c24903b2e569\nname 'single_csv_file' is not defined\nSNOTEL:925_OR_SNTL e13f9c1b-dca0-4c63-a64c-76f6bc725156\ncollecting  e13f9c1b-dca0-4c63-a64c-76f6bc725156\nname 'single_csv_file' is not defined\nSNOTEL:926_ID_SNTL af0463d4-f20f-4d13-bd0f-5834e2e8717b\ncollecting  af0463d4-f20f-4d13-bd0f-5834e2e8717b\nname 'single_csv_file' is not defined\nSNOTEL:927_AZ_SNTL c0e85162-6ff4-401b-b01e-cc6d7a51eac0\ncollecting  c0e85162-6ff4-401b-b01e-cc6d7a51eac0\nname 'single_csv_file' is not defined\nSNOTEL:929_MT_SNTL e467a17f-a729-4938-87a1-ac25157eed63\ncollecting  e467a17f-a729-4938-87a1-ac25157eed63\nname 'single_csv_file' is not defined\nSNOTEL:930_MT_SNTL 4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\ncollecting  4f13c5e6-14c0-44cf-a2b0-4ef9bb3704fd\nname 'single_csv_file' is not defined\nSNOTEL:935_CO_SNTL 7f215a89-2a17-42f0-a2fb-f18fbc888cef\ncollecting  7f215a89-2a17-42f0-a2fb-f18fbc888cef\nname 'single_csv_file' is not defined\nSNOTEL:936_CO_SNTL a5366d95-7b9d-4b1b-a16f-99e56fab08f5\ncollecting  a5366d95-7b9d-4b1b-a16f-99e56fab08f5\nname 'single_csv_file' is not defined\nSNOTEL:937_CO_SNTL 7a266524-6e76-4d06-963f-6f977e356574\ncollecting  7a266524-6e76-4d06-963f-6f977e356574\nname 'single_csv_file' is not defined\nSNOTEL:939_CO_SNTL fde3221a-9ce3-45a9-857f-bd196b07aa05\ncollecting  fde3221a-9ce3-45a9-857f-bd196b07aa05\nname 'single_csv_file' is not defined\nSNOTEL:941_WA_SNTL 2f266b81-aad3-4c26-ac69-1bd04a208bf7\ncollecting  2f266b81-aad3-4c26-ac69-1bd04a208bf7\nname 'single_csv_file' is not defined\nSNOTEL:942_WA_SNTL cdb446bc-e801-404f-9911-9ba5c687f6af\ncollecting  cdb446bc-e801-404f-9911-9ba5c687f6af\nname 'single_csv_file' is not defined\nSNOTEL:945_OR_SNTL 0a0ea690-5b73-4459-91d5-a6948d132a48\ncollecting  0a0ea690-5b73-4459-91d5-a6948d132a48\nname 'single_csv_file' is not defined\nSNOTEL:972_UT_SNTL 10162c55-772d-49d2-8b1b-b1f9c86254b2\ncollecting  10162c55-772d-49d2-8b1b-b1f9c86254b2\nname 'single_csv_file' is not defined\nSNOTEL:974_WA_SNTL 9448e70e-32ff-4c47-b6e7-ccb1df91743b\ncollecting  9448e70e-32ff-4c47-b6e7-ccb1df91743b\nname 'single_csv_file' is not defined\nSNOTEL:975_WA_SNTL 47e625fa-e2df-43ce-84dd-8ac21fdda75a\ncollecting  47e625fa-e2df-43ce-84dd-8ac21fdda75a\nname 'single_csv_file' is not defined\nSNOTEL:978_ID_SNTL da6ce150-5daf-4a91-9fdd-a85854462b08\ncollecting  da6ce150-5daf-4a91-9fdd-a85854462b08\nname 'single_csv_file' is not defined\nSNOTEL:981_MT_SNTL e776d9b6-2180-4f50-90bf-77f7b920fc3b\ncollecting  e776d9b6-2180-4f50-90bf-77f7b920fc3b\nname 'single_csv_file' is not defined\nSNOTEL:982_WY_SNTL ab89875f-3b86-4c6a-8d66-767017570dfc\ncollecting  ab89875f-3b86-4c6a-8d66-767017570dfc\nname 'single_csv_file' is not defined\nSNOTEL:984_WA_SNTL f78ea076-10a1-45dc-a848-c08e129c6a28\ncollecting  f78ea076-10a1-45dc-a848-c08e129c6a28\nname 'single_csv_file' is not defined\nSNOTEL:988_ID_SNTL 2f5c1968-2c34-4539-a9f4-38298d0de925\ncollecting  2f5c1968-2c34-4539-a9f4-38298d0de925\nname 'single_csv_file' is not defined\nSNOTEL:989_ID_SNTL f78ea076-10a1-45dc-a848-c08e129c6a28\ncollecting  f78ea076-10a1-45dc-a848-c08e129c6a28\nname 'single_csv_file' is not defined\nSNOTEL:990_WA_SNTL cde149fe-708b-4a35-bea8-959eb9da4e0b\ncollecting  cde149fe-708b-4a35-bea8-959eb9da4e0b\nname 'single_csv_file' is not defined\nSNOTEL:992_UT_SNTL 064d7f3e-8bbd-49cd-b360-5c4590a19b9e\ncollecting  064d7f3e-8bbd-49cd-b360-5c4590a19b9e\nname 'single_csv_file' is not defined\nSNOTEL:998_WA_SNTL cde149fe-708b-4a35-bea8-959eb9da4e0b\ncollecting  cde149fe-708b-4a35-bea8-959eb9da4e0b\nname 'single_csv_file' is not defined\nSNOTEL:999_WA_SNTL e6d48180-814d-494b-99cc-0be5cd1a0eaf\ncollecting  e6d48180-814d-494b-99cc-0be5cd1a0eaf\nname 'single_csv_file' is not defined\n",
  "history_begin_time" : 1646010805692,
  "history_end_time" : 1646010810527,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "hhiqn1t8ouv",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677809171453,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "7s711nb2gqv",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1678201703965,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "no45eawu0ck",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1694185611215,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "l775568w6ie",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677785529426,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "lx6ct9vmktw",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677797113219,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "vteswkp1r51",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677809840733,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "6sc6ufb7qo9",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677959722621,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "3oz6anv1f77",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677959583130,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "r2t02cmze1j",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1678206143077,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "l9564k8vbio",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1678201687049,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "wh2zxbpv3oq",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677958849879,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "nzemlvw886s",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677809573422,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "i4nddu8tjoz",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677809306578,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "g3m21tyfgaw",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677958952857,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "id5yhu8oiic",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677958291194,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "603ex3s8jdq",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677785383326,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "x9di21wv9vn",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677784516778,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "l6jxe4ynigf",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677796528249,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "8k4uae0dff5",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677809554677,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "jcs51lnd5i2",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677958754111,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "goa6b5eis51",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1678201516411,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "39zrq7wcqqo",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1678884535336,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "lrdndug3zdl",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1678884140252,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "ykbwig0f78b",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1678884042268,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},]
