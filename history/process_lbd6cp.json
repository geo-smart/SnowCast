[{
  "history_id" : "0GPTEq69olB5",
  "history_input" : "import dask.dataframe as dd\nfrom dask_ml.model_selection import train_test_split\nfrom sklearn.ensemble import ExtraTreesRegressor\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\nimport joblib\n\n# Load your dataset into a Dask DataFrame (Assuming the target variable is named 'target')\ndata = dd.read_csv('/home/chetana/gridmet_test_run/model_training_cleaned.csv')\ndata['date'] = dd.to_datetime(data['date'])\n\ndata['date'] = dd.to_datetime(data['date'])\n\ndata['year'] = data['date'].dt.year\ndata['month'] = data['date'].dt.month\ndata['day'] = data['date'].dt.day\ndata['day_of_week'] = data['date'].dt.dayofweek\ndata = data.drop('date', axis=1)\ndata = data.dropna(subset=['swe_value'])\ncolumn_means = data.mean()\ndata = data.fillna(column_means)\n\nX = data.drop('swe_value', axis=1)\ny = data['swe_value']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\nmodel = ExtraTreesRegressor(n_estimators=100, random_state=42, n_jobs=-1)\nmodel.fit(X_train, y_train)\njoblib.dump(model, '/home/chetana/gridmet_test_run/model_creation_et.pkl')\n\n# Make predictions on the test set\ny_pred = model.predict(X_test)\n\n# Evaluate the model\nmse = mean_squared_error(y_test, y_pred)\nrmse = np.sqrt(mse)\nmae = mean_absolute_error(y_test, y_pred)\nr2 = r2_score(y_test, y_pred)\n\nprint(\"Mean Squared Error (MSE):\", mse)\nprint(\"Root Mean Squared Error (RMSE):\", rmse)\nprint(\"Mean Absolute Error (MAE):\", mae)\nprint(\"R-squared (R2):\", r2)\n",
  "history_output" : "/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/dask_ml/model_selection/_split.py:462: FutureWarning: The default value for 'shuffle' must be specified when splitting DataFrames. In the future DataFrames will automatically be shuffled within blocks prior to splitting. Specify 'shuffle=True' to adopt the future behavior now, or 'shuffle=False' to retain the previous behavior.\n  warnings.warn(\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/0GPTEq69olB5/model_creation_et.py\", line 27, in <module>\n    model.fit(X_train, y_train)\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/sklearn/ensemble/_forest.py\", line 345, in fit\n    X, y = self._validate_data(\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/sklearn/base.py\", line 584, in _validate_data\n    X, y = check_X_y(X, y, **check_params)\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1106, in check_X_y\n    X = check_array(\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/dask/dataframe/core.py\", line 599, in __array__\n    x = np.array(self._computed)\nnumpy.core._exceptions._ArrayMemoryError: Unable to allocate 17.8 GiB for an array with shape (125800448, 19) and data type float64\n",
  "history_begin_time" : 1690608867593,
  "history_end_time" : 1690609370894,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "2oxKExkdXgAE",
  "history_input" : "import dask.dataframe as dd\nfrom dask_ml.model_selection import train_test_split\nfrom sklearn.ensemble import ExtraTreesRegressor\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\nimport joblib\n\n# Load your dataset into a Dask DataFrame (Assuming the target variable is named 'target')\ndata = dd.read_csv('/home/chetana/gridmet_test_run/model_training_cleaned.csv')\ndata['date'] = dd.to_datetime(data['date'])\n\ndata['year'] = data['date'].dt.year\ndata['month'] = data['date'].dt.month\ndata['day'] = data['date'].dt.day\ndata['day_of_week'] = data['date'].dt.dayofweek\ndata = data.drop('date', axis=1)\n\n# Split the data into features (X) and target variable (y)\nX = data.drop('swe_value', axis=1)\ny = data['swe_value']\n\n# Split the data into small chunks (adjust chunk_size based on available memory)\nchunk_size = 100000  # You may need to adjust this value based on your system's memory capacity\nX_chunks = [X.compute().iloc[i:i + chunk_size] for i in range(0, len(X), chunk_size)]\ny_chunks = [y.compute().iloc[i:i + chunk_size] for i in range(0, len(y), chunk_size)]\n\n# Create an instance of the ExtraTreesRegressor\nmodel = ExtraTreesRegressor(n_estimators=100, random_state=42, n_jobs=-1)\n\n# Train the model with the initial chunk\nmodel.fit(X_chunks[0], y_chunks[0])\n\n# Save the trained model after initial training\njoblib.dump(model, '/home/chetana/gridmet_test_run/model_creation_et.pkl')\n\n# Perform incremental learning on the remaining chunks\nfor i in range(1, len(X_chunks)):\n    model.n_estimators += 10  # Increment n_estimators for each chunk\n    model.fit(X_chunks[i], y_chunks[i])\n\n# Save the trained model after incremental learning\njoblib.dump(model, '/home/chetana/gridmet_test_run/model_creation_et.pkl')\n\n# Split the data into a separate test set\nX_test, y_test = train_test_split(X_chunks[-1], y_chunks[-1], test_size=0.2, random_state=42)\n\n# Make predictions on the test set\ny_pred = model.predict(X_test)\n\n# Evaluate the model\nmse = mean_squared_error(y_test, y_pred)\nrmse = np.sqrt(mse)\nmae = mean_absolute_error(y_test, y_pred)\nr2 = r2_score(y_test, y_pred)\n\nprint(\"Mean Squared Error (MSE):\", mse)\nprint(\"Root Mean Squared Error (RMSE):\", rmse)\nprint(\"Mean Absolute Error (MAE):\", mae)\nprint(\"R-squared (R2):\", r2)\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/2oxKExkdXgAE/model_creation_et.py\", line 23, in <module>\n    X_chunks = [X.compute().iloc[i:i + chunk_size] for i in range(0, len(X), chunk_size)]\n  File \"/home/chetana/gw-workspace/2oxKExkdXgAE/model_creation_et.py\", line 23, in <listcomp>\n    X_chunks = [X.compute().iloc[i:i + chunk_size] for i in range(0, len(X), chunk_size)]\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/dask/dataframe/dispatch.py\", line 68, in concat\n    return func(\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/dask/dataframe/backends.py\", line 667, in concat_pandas\n    out = pd.concat(dfs3, join=join, sort=False)\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/pandas/util/_decorators.py\", line 331, in wrapper\n    return func(*args, **kwargs)\n  File \"<__array_function__ internals>\", line 180, in concatenate\nnumpy.core._exceptions._ArrayMemoryError: Unable to allocate 17.6 GiB for an array with shape (15, 157282561) and data type float64\n",
  "history_begin_time" : 1690602019835,
  "history_end_time" : 1690602894751,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "eF7GGgv9wMf3",
  "history_input" : "import dask.dataframe as dd\nfrom dask_ml.model_selection import train_test_split\nfrom sklearn.ensemble import ExtraTreesRegressor\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\nimport joblib\n\n# Load your dataset into a Dask DataFrame (Assuming the target variable is named 'target')\ndata = dd.read_csv('/home/chetana/gridmet_test_run/model_training_cleaned.csv')\ndata['date'] = dd.to_datetime(data['date'])\n\ndata['year'] = data['date'].dt.year\ndata['month'] = data['date'].dt.month\ndata['day'] = data['date'].dt.day\ndata['day_of_week'] = data['date'].dt.dayofweek\ndata = data.drop('date', axis=1)\n\n# Split the data into features (X) and target variable (y)\nX = data.drop('swe_value', axis=1)\ny = data['swe_value']\n\n# Split the data into training and test sets using Dask\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Create an instance of the ExtraTreesRegressor\nmodel = ExtraTreesRegressor(n_estimators=100, random_state=42, n_jobs=-1)\n\n# Train the model with the initial training set\nmodel.fit(X_train, y_train)\n\n# Save the trained model after initial training\njoblib.dump(model, '/home/chetana/gridmet_test_run/model_creation_et.pkl')\n\n# Load the model to perform incremental learning in batches\nmodel = joblib.load('/home/chetana/gridmet_test_run/model_creation_et.pkl')\n\n# Perform incremental learning on the remaining data\nbatch_size = 1000\nfor i in range(0, len(X_train), batch_size):\n    X_batch = X_train.iloc[i:i+batch_size]\n    y_batch = y_train.iloc[i:i+batch_size]\n    model.fit(X_batch, y_batch)\n\n# Save the trained model after incremental learning\njoblib.dump(model, '/home/chetana/gridmet_test_run/model_creation_et.pkl')\n\n# Make predictions on the test set\ny_pred = model.predict(X_test)\n\n# Evaluate the model\nmse = mean_squared_error(y_test, y_pred)\nrmse = np.sqrt(mse)\nmae = mean_absolute_error(y_test, y_pred)\nr2 = r2_score(y_test, y_pred)\n\nprint(\"Mean Squared Error (MSE):\", mse)\nprint(\"Root Mean Squared Error (RMSE):\", rmse)\nprint(\"Mean Absolute Error (MAE):\", mae)\nprint(\"R-squared (R2):\", r2)\n",
  "history_output" : "/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/dask_ml/model_selection/_split.py:462: FutureWarning: The default value for 'shuffle' must be specified when splitting DataFrames. In the future DataFrames will automatically be shuffled within blocks prior to splitting. Specify 'shuffle=True' to adopt the future behavior now, or 'shuffle=False' to retain the previous behavior.\n  warnings.warn(\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/eF7GGgv9wMf3/model_creation_et.py\", line 28, in <module>\n    model.fit(X_train, y_train)\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/sklearn/ensemble/_forest.py\", line 345, in fit\n    X, y = self._validate_data(\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/sklearn/base.py\", line 584, in _validate_data\n    X, y = check_X_y(X, y, **check_params)\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1106, in check_X_y\n    X = check_array(\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 879, in check_array\n    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/sklearn/utils/_array_api.py\", line 185, in _asarray_with_order\n    array = numpy.asarray(array, order=order, dtype=dtype)\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/dask/dataframe/core.py\", line 599, in __array__\n    x = np.array(self._computed)\nnumpy.core._exceptions._ArrayMemoryError: Unable to allocate 17.8 GiB for an array with shape (125834411, 19) and data type float64\n",
  "history_begin_time" : 1690601270988,
  "history_end_time" : 1690601582198,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "fVChoQSreHyt",
  "history_input" : "import dask.dataframe as dd\nfrom dask_ml.model_selection import train_test_split\nfrom dask_ml.wrappers import Incremental\nimport joblib\nfrom sklearn.ensemble import ExtraTreesRegressor\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n\n# Load your dataset into a Dask DataFrame (Assuming the target variable is named 'target')\ndata = dd.read_csv('/home/chetana/gridmet_test_run/model_training_cleaned.csv')\ndata['date'] = dd.to_datetime(data['date'])\n\ndata['year'] = data['date'].dt.year\ndata['month'] = data['date'].dt.month\ndata['day'] = data['date'].dt.day\ndata['day_of_week'] = data['date'].dt.dayofweek\ndata = data.drop('date', axis=1)\n\n# Split the data into features (X) and target variable (y)\nX = data.drop('swe_value', axis=1)\ny = data['swe_value']\n\n# Split the data into a small initial training set and a larger pool\nX_train_init, X_pool, y_train_init, y_pool = train_test_split(X, y, test_size=0.9, random_state=42)\n\n# Create an instance of the ExtraTreesRegressor wrapped in Incremental\nmodel = Incremental(ExtraTreesRegressor(n_estimators=100, random_state=42))\n\n# Train the model with the initial training set\nmodel.fit(X_train_init, y_train_init)\n\n# The remaining data (X_pool, y_pool) can be used for incremental learning\n# For example, you can loop over the remaining data in smaller batches and update the model\nbatch_size = 1000\nfor i in range(0, len(X_pool), batch_size):\n    X_batch = X_pool.iloc[i:i+batch_size]\n    y_batch = y_pool.iloc[i:i+batch_size]\n    # Perform incremental learning\n    model.partial_fit(X_batch, y_batch)\n\n# Save the trained model after incremental learning\nmodel.steps[-1][1].n_jobs = 1  # Ensure n_jobs = 1 to avoid potential issues with joblib.dump\njoblib.dump(model, '/home/chetana/gridmet_test_run/model_creation_et.pkl')\n\n# Split the data into a separate test set\nX_test, y_test = train_test_split(X_pool, y_pool, test_size=0.2, random_state=42)\n\n# Make predictions on the test set\ny_pred = model.predict(X_test)\n\n# Evaluate the model\nmse = mean_squared_error(y_test, y_pred)\nrmse = np.sqrt(mse)\nmae = mean_absolute_error(y_test, y_pred)\nr2 = r2_score(y_test, y_pred)\n\nprint(\"Mean Squared Error (MSE):\", mse)\nprint(\"Root Mean Squared Error (RMSE):\", rmse)\nprint(\"Mean Absolute Error (MAE):\", mae)\nprint(\"R-squared (R2):\", r2)\n",
  "history_output" : "/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/dask_ml/model_selection/_split.py:462: FutureWarning: The default value for 'shuffle' must be specified when splitting DataFrames. In the future DataFrames will automatically be shuffled within blocks prior to splitting. Specify 'shuffle=True' to adopt the future behavior now, or 'shuffle=False' to retain the previous behavior.\n  warnings.warn(\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/fVChoQSreHyt/model_creation_et.py\", line 29, in <module>\n    model.fit(X_train_init, y_train_init)\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/dask_ml/wrappers.py\", line 579, in fit\n    self._fit_for_estimator(estimator, X, y, **fit_kwargs)\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/dask_ml/wrappers.py\", line 563, in _fit_for_estimator\n    result = fit(\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/dask_ml/_partial.py\", line 98, in fit\n    raise ValueError(msg.format(type(model)))\nValueError: The class '<class 'sklearn.ensemble._forest.ExtraTreesRegressor'>' does not implement 'partial_fit'.\n",
  "history_begin_time" : 1690601225728,
  "history_end_time" : 1690601233258,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "ixqC9z45MoTa",
  "history_input" : "import dask.dataframe as dd\nfrom dask_ml.model_selection import train_test_split\nfrom dask_ml.wrappers import Incremental\nimport joblib\nfrom sklearn.ensemble import ExtraTreesRegressor\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n\n# Load your dataset into a Dask DataFrame (Assuming the target variable is named 'target')\ndata = dd.read_csv('/home/chetana/gridmet_test_run/model_training_cleaned.csv')\ndata['date'] = dd.to_datetime(data['date'])\n\ndata['year'] = data['date'].dt.year\ndata['month'] = data['date'].dt.month\ndata['day'] = data['date'].dt.day\ndata['day_of_week'] = data['date'].dt.dayofweek\ndata = data.drop('date', axis=1)\n\n# Split the data into features (X) and target variable (y)\nX = data.drop('swe_value', axis=1)\ny = data['swe_value']\n\n# Split the data into a small initial training set and a larger pool\nX_train_init, X_pool, y_train_init, y_pool = train_test_split(X, y, test_size=0.9, random_state=42)\n\n# Create an instance of the ExtraTreesRegressor wrapped in Incremental\nmodel = Incremental(ExtraTreesRegressor(n_estimators=100, random_state=42))\n\n# Train the model with the initial training set\nmodel.fit(X_train_init, y_train_init)\n\n# The remaining data (X_pool, y_pool) can be used for incremental learning\n# For example, you can loop over the remaining data in smaller batches and update the model\nbatch_size = 1000\nfor i in range(0, len(X_pool), batch_size):\n    X_batch = X_pool.iloc[i:i+batch_size]\n    y_batch = y_pool.iloc[i:i+batch_size]\n    # Perform incremental learning\n    model.partial_fit(X_batch, y_batch)\n\n# Save the trained model after incremental learning\nmodel.steps[-1][1].n_jobs = 1  # Ensure n_jobs = 1 to avoid potential issues with joblib.dump\njoblib.dump(model, '/home/chetana/gridmet_test_run/model_creation_et.pkl')\n\n# Split the data into a separate test set\nX_test, y_test = train_test_split(X_pool, y_pool, test_size=0.2, random_state=42)\n\n# Make predictions on the test set\ny_pred = model.predict(X_test)\n\n# Evaluate the model\nmse = mean_squared_error(y_test, y_pred)\nrmse = np.sqrt(mse)\nmae = mean_absolute_error(y_test, y_pred)\nr2 = r2_score(y_test, y_pred)\n\nprint(\"Mean Squared Error (MSE):\", mse)\nprint(\"Root Mean Squared Error (RMSE):\", rmse)\nprint(\"Mean Absolute Error (MAE):\", mae)\nprint(\"R-squared (R2):\", r2)\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/ixqC9z45MoTa/model_creation_et.py\", line 2, in <module>\n    from dask_ml.model_selection import train_test_split\nModuleNotFoundError: No module named 'dask_ml'\n",
  "history_begin_time" : 1690601139207,
  "history_end_time" : 1690601153621,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "jjIg5Pl53i1w",
  "history_input" : "import numpy as np\nimport pandas as pd\nimport dask.dataframe as dd\nfrom sklearn.ensemble import ExtraTreesRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\nimport joblib\nfrom scipy import sparse\n\n# Load your dataset into a Dask DataFrame (Assuming the target variable is named 'target')\ndata = dd.read_csv('/home/chetana/gridmet_test_run/model_training_cleaned.csv')\ndata['date'] = dd.to_datetime(data['date'])\n\ndata['year'] = data['date'].dt.year\ndata['month'] = data['date'].dt.month\ndata['day'] = data['date'].dt.day\ndata['day_of_week'] = data['date'].dt.dayofweek\ndata = data.drop('date', axis=1)\n\n# Convert the Dask DataFrame to a Pandas DataFrame\ndata = data.compute()\n\nprint('feature order:', list(data.keys()))\n\n# Split the data into features (X) and target variable (y)\nX = data.drop('swe_value', axis=1)\ny = data['swe_value']\n\n# Convert X to a sparse matrix if it contains many zero values\nX_sparse = sparse.csr_matrix(X)  # Use sparse.csr_matrix for compressed sparse row format\n\n# Split the data into a small initial training set and a larger pool\nX_train_init, X_pool, y_train_init, y_pool = train_test_split(X_sparse, y, test_size=0.9, random_state=42)\n\n# Create an instance of the ExtraTreesRegressor\nmodel = ExtraTreesRegressor(n_estimators=100, random_state=42, n_jobs=-1)\n\n# Train the model with the initial training set\nmodel.fit(X_train_init, y_train_init)\n\n# The remaining data (X_pool, y_pool) can be used for incremental learning\n# For example, you can loop over the remaining data in smaller batches and update the model\nbatch_size = 1000\nfor i in range(0, len(X_pool), batch_size):\n    X_batch = X_pool[i:i+batch_size]\n    y_batch = y_pool.iloc[i:i+batch_size]\n    # Perform incremental learning with numpy instead of model.partial_fit\n    model.n_estimators += 10  # Increment n_estimators for each batch\n    model.fit(X_batch, y_batch)\n\n# Save the trained model after incremental learning\njoblib.dump(model, '/home/chetana/gridmet_test_run/model_creation_et.pkl')\n\n# Split the data into a separate test set\nX_test, y_test = train_test_split(X_pool, y_pool, test_size=0.2, random_state=42)\n\n# Make predictions on the test set\ny_pred = model.predict(X_test)\n\n# Evaluate the model\nmse = mean_squared_error(y_test, y_pred)\nrmse = np.sqrt(mse)\nmae = mean_absolute_error(y_test, y_pred)\nr2 = r2_score(y_test, y_pred)\n\nprint(\"Mean Squared Error (MSE):\", mse)\nprint(\"Root Mean Squared Error (RMSE):\", rmse)\nprint(\"Mean Absolute Error (MAE):\", mae)\nprint(\"R-squared (R2):\", r2)\n",
  "history_output" : "feature order: ['lat', 'lon', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs', 'swe_value', 'slope', 'curvature', 'aspect', 'eastness', 'northness', 'year', 'month', 'day', 'day_of_week']\nTraceback (most recent call last):\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/scipy/sparse/_compressed.py\", line 79, in __init__\n    arg1 = np.asarray(arg1)\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/pandas/core/generic.py\", line 2070, in __array__\n    return np.asarray(self._values, dtype=dtype)\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/pandas/core/frame.py\", line 958, in _values\n    self._consolidate_inplace()\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/pandas/core/generic.py\", line 5980, in _consolidate_inplace\n    self._protect_consolidate(f)\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/pandas/core/generic.py\", line 5968, in _protect_consolidate\n    result = f()\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/pandas/core/generic.py\", line 5978, in f\n    self._mgr = self._mgr.consolidate()\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/pandas/core/internals/managers.py\", line 686, in consolidate\n    bm._consolidate_inplace()\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/pandas/core/internals/managers.py\", line 1873, in _consolidate_inplace\n    self.blocks, self.refs = _consolidate_with_refs(self.blocks, self.refs)\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/pandas/core/internals/managers.py\", line 2350, in _consolidate_with_refs\n    merged_blocks, consolidated = _merge_blocks(\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/pandas/core/internals/managers.py\", line 2388, in _merge_blocks\n    new_values = new_values[argsort]\nnumpy.core._exceptions._ArrayMemoryError: Unable to allocate 4.69 GiB for an array with shape (4, 157282561) and data type int64\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/jjIg5Pl53i1w/model_creation_et.py\", line 30, in <module>\n    X_sparse = sparse.csr_matrix(X)  # Use sparse.csr_matrix for compressed sparse row format\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/scipy/sparse/_compressed.py\", line 81, in __init__\n    raise ValueError(\"unrecognized {}_matrix constructor usage\"\nValueError: unrecognized csr_matrix constructor usage\n",
  "history_begin_time" : 1690600623346,
  "history_end_time" : 1690601093473,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "bUprvU4W0AnJ",
  "history_input" : "import numpy as np\nimport pandas as pd\nimport dask.dataframe as dd\nfrom sklearn.ensemble import ExtraTreesRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\nimport joblib\nfrom scipy import sparse\n\n# Load your dataset into a Dask DataFrame (Assuming the target variable is named 'target')\ndata = dd.read_csv('/home/chetana/gridmet_test_run/model_training_cleaned.csv')\ndata['date'] = dd.to_datetime(data['date'])\n\ndata['year'] = data['date'].dt.year\ndata['month'] = data['date'].dt.month\ndata['day'] = data['date'].dt.day\ndata['day_of_week'] = data['date'].dt.dayofweek\ndata = data.drop('date', axis=1)\n\n# Convert the Dask DataFrame to a Pandas DataFrame\ndata = data.compute()\n\nprint('feature order:', list(data.keys()))\n\n# Split the data into features (X) and target variable (y)\nX = data.drop('swe_value', axis=1)\ny = data['swe_value']\n\n# Split the data into a small initial training set and a larger pool\nX_train_init, X_pool, y_train_init, y_pool = train_test_split(X, y, test_size=0.9, random_state=42)\n\n# Create an instance of the ExtraTreesRegressor\nmodel = ExtraTreesRegressor(n_estimators=100, random_state=42, n_jobs=-1)\n\n# Train the model with the initial training set\nmodel.fit(X_train_init, y_train_init)\n\n# The remaining data (X_pool, y_pool) can be used for incremental learning\n# For example, you can loop over the remaining data in smaller batches and update the model\nbatch_size = 1000\nfor i in range(0, len(X_pool), batch_size):\n    X_batch = X_pool.iloc[i:i+batch_size]\n    y_batch = y_pool.iloc[i:i+batch_size]\n    model.partial_fit(X_batch, y_batch)\n\n# Save the trained model after incremental learning\njoblib.dump(model, '/home/chetana/gridmet_test_run/model_creation_et.pkl')\n\n# Split the data into a separate test set\nX_test, y_test = train_test_split(X_pool, y_pool, test_size=0.2, random_state=42)\n\n# Make predictions on the test set\ny_pred = model.predict(X_test)\n\n# Evaluate the model\nmse = mean_squared_error(y_test, y_pred)\nrmse = np.sqrt(mse)\nmae = mean_absolute_error(y_test, y_pred)\nr2 = r2_score(y_test, y_pred)\n\nprint(\"Mean Squared Error (MSE):\", mse)\nprint(\"Root Mean Squared Error (RMSE):\", rmse)\nprint(\"Mean Absolute Error (MAE):\", mae)\nprint(\"R-squared (R2):\", r2)\n",
  "history_output" : "feature order: ['lat', 'lon', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs', 'swe_value', 'slope', 'curvature', 'aspect', 'eastness', 'northness', 'year', 'month', 'day', 'day_of_week']\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/bUprvU4W0AnJ/model_creation_et.py\", line 30, in <module>\n    X_train_init, X_pool, y_train_init, y_pool = train_test_split(X, y, test_size=0.9, random_state=42)\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/sklearn/model_selection/_split.py\", line 2585, in train_test_split\n    return list(\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/sklearn/model_selection/_split.py\", line 2587, in <genexpr>\n    (_safe_indexing(a, train), _safe_indexing(a, test)) for a in arrays\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/sklearn/utils/__init__.py\", line 354, in _safe_indexing\n    return _pandas_indexing(X, indices, indices_dtype, axis=axis)\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/sklearn/utils/__init__.py\", line 196, in _pandas_indexing\n    return X.take(key, axis=axis)\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/pandas/core/generic.py\", line 3871, in take\n    return self._take(indices, axis)\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/pandas/core/generic.py\", line 3884, in _take\n    self._consolidate_inplace()\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/pandas/core/generic.py\", line 5980, in _consolidate_inplace\n    self._protect_consolidate(f)\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/pandas/core/generic.py\", line 5968, in _protect_consolidate\n    result = f()\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/pandas/core/generic.py\", line 5978, in f\n    self._mgr = self._mgr.consolidate()\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/pandas/core/internals/managers.py\", line 686, in consolidate\n    bm._consolidate_inplace()\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/pandas/core/internals/managers.py\", line 1873, in _consolidate_inplace\n    self.blocks, self.refs = _consolidate_with_refs(self.blocks, self.refs)\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/pandas/core/internals/managers.py\", line 2350, in _consolidate_with_refs\n    merged_blocks, consolidated = _merge_blocks(\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/pandas/core/internals/managers.py\", line 2388, in _merge_blocks\n    new_values = new_values[argsort]\nnumpy.core._exceptions._ArrayMemoryError: Unable to allocate 4.69 GiB for an array with shape (4, 157282561) and data type int64\n",
  "history_begin_time" : 1690599663437,
  "history_end_time" : 1690600090410,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "xeDnisnyxmwF",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom sklearn.ensemble import ExtraTreesRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\nimport joblib\n\n# Load your dataset into a pandas DataFrame (Assuming the target variable is named 'target')\ndata = pd.read_csv('/home/chetana/gridmet_test_run/model_training_cleaned.csv')\ndata['date'] = pd.to_datetime(data['date'])\n\ndata['year'] = data['date'].dt.year\ndata['month'] = data['date'].dt.month\ndata['day'] = data['date'].dt.day\ndata['day_of_week'] = data['date'].dt.dayofweek\ndata.drop('date', axis=1, inplace=True)\n\nprint('feature order:', list(data.keys()))\n\n# Split the data into features (X) and target variable (y)\nX = data.drop('swe_value', axis=1)\ny = data['swe_value']\n\n# Split the data into a small initial training set and a larger pool\nX_train_init, X_pool, y_train_init, y_pool = train_test_split(X, y, test_size=0.9, random_state=42)\n\n# Create an instance of the ExtraTreesRegressor\nmodel = ExtraTreesRegressor(n_estimators=100, random_state=42, n_jobs=-1)\n\n# Train the model with the initial training set\nmodel.fit(X_train_init, y_train_init)\n\n# The remaining data (X_pool, y_pool) can be used for incremental learning\n# For example, you can loop over the remaining data in smaller batches and update the model\nbatch_size = 10000\nfor i in range(0, len(X_pool), batch_size):\n    X_batch = X_pool[i:i+batch_size]\n    y_batch = y_pool[i:i+batch_size]\n    model.partial_fit(X_batch, y_batch)\n\n# Save the trained model after incremental learning\njoblib.dump(model, '/home/chetana/gridmet_test_run/model_creation_et.pkl')\n\n# Split the data into a separate test set\nX_test, y_test = train_test_split(X_pool, y_pool, test_size=0.2, random_state=42)\n\n# Make predictions on the test set\ny_pred = model.predict(X_test)\n\n# Evaluate the model\nmse = mean_squared_error(y_test, y_pred)\nrmse = np.sqrt(mse)\nmae = mean_absolute_error(y_test, y_pred)\nr2 = r2_score(y_test, y_pred)\n\nprint(\"Mean Squared Error (MSE):\", mse)\nprint(\"Root Mean Squared Error (RMSE):\", rmse)\nprint(\"Mean Absolute Error (MAE):\", mae)\nprint(\"R-squared (R2):\", r2)\n",
  "history_output" : "sh: line 1:  4596 Killed                  /home/chetana/gridmet_test_run/pycrate/bin/python model_creation_et.py\n",
  "history_begin_time" : 1690598943604,
  "history_end_time" : 1690599490481,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "T4yTfk1DDCOL",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom sklearn.ensemble import ExtraTreesRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\nimport joblib\n\n# Load your dataset into a pandas DataFrame (Assuming the target variable is named 'target')\ndata = pd.read_csv('/home/chetana/gridmet_test_run/model_training_cleaned.csv')\ndata['date'] = pd.to_datetime(data['date'])\n\ndata['year'] = data['date'].dt.year\ndata['month'] = data['date'].dt.month\ndata['day'] = data['date'].dt.day\ndata['day_of_week'] = data['date'].dt.dayofweek\ndata.drop('date', axis=1, inplace=True)\n\nprint('feature order:', list(data.keys()))\n\n# Split the data into features (X) and target variable (y)\nX = data.drop('swe_value', axis=1)\ny = data['swe_value']\n\n# Split the data into a small initial training set and a larger pool\nX_train_init, X_pool, y_train_init, y_pool = train_test_split(X, y, test_size=0.9, random_state=42)\n\n# Create an instance of the ExtraTreesRegressor\nmodel = ExtraTreesRegressor(n_estimators=100, random_state=42, n_jobs=-1)\n\n# Train the model with the initial training set\nmodel.fit(X_train_init, y_train_init)\n\n# The remaining data (X_pool, y_pool) can be used for incremental learning\n# For example, you can loop over the remaining data in smaller batches and update the model\nbatch_size = 1000\nfor i in range(0, len(X_pool), batch_size):\n    X_batch = X_pool[i:i+batch_size]\n    y_batch = y_pool[i:i+batch_size]\n    model.partial_fit(X_batch, y_batch)\n\n# Save the trained model after incremental learning\njoblib.dump(model, '/home/chetana/gridmet_test_run/model_creation_et.pkl')\n\n# Split the data into a separate test set\nX_test, y_test = train_test_split(X_pool, y_pool, test_size=0.2, random_state=42)\n\n# Make predictions on the test set\ny_pred = model.predict(X_test)\n\n# Evaluate the model\nmse = mean_squared_error(y_test, y_pred)\nrmse = np.sqrt(mse)\nmae = mean_absolute_error(y_test, y_pred)\nr2 = r2_score(y_test, y_pred)\n\nprint(\"Mean Squared Error (MSE):\", mse)\nprint(\"Root Mean Squared Error (RMSE):\", rmse)\nprint(\"Mean Absolute Error (MAE):\", mae)\nprint(\"R-squared (R2):\", r2)\n",
  "history_output" : "",
  "history_begin_time" : 1690598882203,
  "history_end_time" : 1690598943609,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "aJb4B7Ivh3tl",
  "history_input" : "from sklearn.model_selection import train_test_split\n\n# Split the data into a small initial training set and a larger pool\nX_train_init, X_pool, y_train_init, y_pool = train_test_split(X, y, test_size=0.9, random_state=42)\n\n# Create an instance of the ExtraTreesRegressor\nmodel = ExtraTreesRegressor(n_estimators=100, random_state=42, n_jobs=-1)\n\n# Train the model with the initial training set\nmodel.fit(X_train_init, y_train_init)\n\n# The remaining data (X_pool, y_pool) can be used for incremental learning\n# For example, you can loop over the remaining data in smaller batches and update the model\nbatch_size = 100000\nfor i in range(0, len(X_pool), batch_size):\n    X_batch = X_pool[i:i+batch_size]\n    y_batch = y_pool[i:i+batch_size]\n    model.partial_fit(X_batch, y_batch)\n\n# Save the trained model after incremental learning\njoblib.dump(model, '/home/chetana/gridmet_test_run/model_creation_et.pkl')\n\n# Make predictions on the test set\ny_pred = model.predict(X_test)\n\n# Evaluate the model\nmse = mean_squared_error(y_test, y_pred)\nrmse = np.sqrt(mse)\nmae = mean_absolute_error(y_test, y_pred)\nr2 = r2_score(y_test, y_pred)\n\nprint(\"Mean Squared Error (MSE):\", mse)\nprint(\"Root Mean Squared Error (RMSE):\", rmse)\nprint(\"Mean Absolute Error (MAE):\", mae)\nprint(\"R-squared (R2):\", r2)\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/aJb4B7Ivh3tl/model_creation_et.py\", line 4, in <module>\n    X_train_init, X_pool, y_train_init, y_pool = train_test_split(X, y, test_size=0.9, random_state=42)\nNameError: name 'X' is not defined\n",
  "history_begin_time" : 1690598724999,
  "history_end_time" : 1690598731191,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "exFtmqlKnhGn",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom sklearn.ensemble import ExtraTreesRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\nimport joblib\n\n# Load your dataset into a pandas DataFrame (Assuming the target variable is named 'target')\ndata = pd.read_csv('/home/chetana/gridmet_test_run/model_training_cleaned.csv')\ndata['date'] = pd.to_datetime(data['date'])\n\ndata['year'] = data['date'].dt.year\ndata['month'] = data['date'].dt.month\ndata['day'] = data['date'].dt.day\ndata['day_of_week'] = data['date'].dt.dayofweek\ndata.drop('date', axis=1, inplace=True)\n# data.drop('station_elevation', inplace=True, errors='ignore')\n\nprint('feature order:', list(data.keys()))\n\n# Split the data into features (X) and target variable (y)\nX = data.drop('swe_value', axis=1)\ny = data['swe_value']\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Create an instance of the ExtraTreesRegressor\nmodel = ExtraTreesRegressor(n_estimators=100, random_state=42, n_jobs=-1)\n\n# Train the model\nmodel.fit(X_train, y_train)\n\n# Save the trained model\njoblib.dump(model, '/home/chetana/gridmet_test_run/model_creation_et.pkl')\n\n# Make predictions on the test set\ny_pred = model.predict(X_test)\n\n# Evaluate the model\n# Evaluate the model\nmse = mean_squared_error(y_test, y_pred)\nrmse = np.sqrt(mse)\nmae = mean_absolute_error(y_test, y_pred)\nr2 = r2_score(y_test, y_pred)\n\nprint(\"Mean Squared Error (MSE):\", mse)\nprint(\"Root Mean Squared Error (RMSE):\", rmse)\nprint(\"Mean Absolute Error (MAE):\", mae)\nprint(\"R-squared (R2):\", r2)",
  "history_output" : "feature order: ['lat', 'lon', 'etr', 'pr', 'rmax', 'rmin', 'tmmn', 'tmmx', 'vpd', 'vs', 'swe_value', 'slope', 'curvature', 'aspect', 'eastness', 'northness', 'year', 'month', 'day', 'day_of_week']\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/exFtmqlKnhGn/model_creation_et.py\", line 26, in <module>\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/sklearn/model_selection/_split.py\", line 2585, in train_test_split\n    return list(\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/sklearn/model_selection/_split.py\", line 2587, in <genexpr>\n    (_safe_indexing(a, train), _safe_indexing(a, test)) for a in arrays\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/sklearn/utils/__init__.py\", line 354, in _safe_indexing\n    return _pandas_indexing(X, indices, indices_dtype, axis=axis)\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/sklearn/utils/__init__.py\", line 196, in _pandas_indexing\n    return X.take(key, axis=axis)\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/pandas/core/generic.py\", line 3871, in take\n    return self._take(indices, axis)\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/pandas/core/generic.py\", line 3884, in _take\n    self._consolidate_inplace()\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/pandas/core/generic.py\", line 5980, in _consolidate_inplace\n    self._protect_consolidate(f)\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/pandas/core/generic.py\", line 5968, in _protect_consolidate\n    result = f()\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/pandas/core/generic.py\", line 5978, in f\n    self._mgr = self._mgr.consolidate()\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/pandas/core/internals/managers.py\", line 686, in consolidate\n    bm._consolidate_inplace()\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/pandas/core/internals/managers.py\", line 1873, in _consolidate_inplace\n    self.blocks, self.refs = _consolidate_with_refs(self.blocks, self.refs)\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/pandas/core/internals/managers.py\", line 2350, in _consolidate_with_refs\n    merged_blocks, consolidated = _merge_blocks(\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/pandas/core/internals/managers.py\", line 2381, in _merge_blocks\n    new_values = np.vstack([b.values for b in blocks])  # type: ignore[misc]\n  File \"<__array_function__ internals>\", line 180, in vstack\n  File \"/home/chetana/gridmet_test_run/pycrate/lib/python3.9/site-packages/numpy/core/shape_base.py\", line 282, in vstack\n    return _nx.concatenate(arrs, 0)\n  File \"<__array_function__ internals>\", line 180, in concatenate\nnumpy.core._exceptions._ArrayMemoryError: Unable to allocate 4.69 GiB for an array with shape (4, 157282561) and data type int64\n",
  "history_begin_time" : 1690597078460,
  "history_end_time" : 1690597751471,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "4qHeW6At3bIM",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom sklearn.ensemble import ExtraTreesRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\nimport joblib\n\n# Load your dataset into a pandas DataFrame (Assuming the target variable is named 'target')\ndata = pd.read_csv('/home/chetana/gridmet_test_run/final_training_data.csv')\ndata['date'] = pd.to_datetime(data['date'])\n\ndata['year'] = data['date'].dt.year\ndata['month'] = data['date'].dt.month\ndata['day'] = data['date'].dt.day\ndata['day_of_week'] = data['date'].dt.dayofweek\ndata.drop('date', axis=1, inplace=True)\ndata.drop('station_elevation', inplace=True, errors='ignore')\n\n# Split the data into features (X) and target variable (y)\nX = data.drop('swe_value', axis=1)\ny = data['swe_value']\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Create an instance of the ExtraTreesRegressor\nmodel = ExtraTreesRegressor(n_estimators=100, random_state=42, n_jobs=-1)\n\n# Train the model\nmodel.fit(X_train, y_train)\n\n# Save the trained model\njoblib.dump(model, '/home/chetana/gridmet_test_run/model_creation_et.pkl')\n\n# Make predictions on the test set\ny_pred = model.predict(X_test)\n\n# Evaluate the model\n# Evaluate the model\nmse = mean_squared_error(y_test, y_pred)\nrmse = np.sqrt(mse)\nmae = mean_absolute_error(y_test, y_pred)\nr2 = r2_score(y_test, y_pred)\n\nprint(\"Mean Squared Error (MSE):\", mse)\nprint(\"Root Mean Squared Error (RMSE):\", rmse)\nprint(\"Mean Absolute Error (MAE):\", mae)\nprint(\"R-squared (R2):\", r2)",
  "history_output" : "Mean Squared Error (MSE): 0.273139660484067\nRoot Mean Squared Error (RMSE): 0.522627649942162\nMean Absolute Error (MAE): 0.01861515633681594\nR-squared (R2): 0.9996713036422928\n",
  "history_begin_time" : 1690183598760,
  "history_end_time" : 1690188035224,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "6xjxMElJsQcT",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom sklearn.ensemble import ExtraTreesRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\nimport joblib\n\n# Load your dataset into a pandas DataFrame (Assuming the target variable is named 'target')\ndata = pd.read_csv('/home/chetana/gridmet_test_run/final_training_data.csv')\ndata['date'] = pd.to_datetime(data['date'])\n\ndata['year'] = data['date'].dt.year\ndata['month'] = data['date'].dt.month\ndata['day'] = data['date'].dt.day\ndata['day_of_week'] = data['date'].dt.dayofweek\ndata.drop('date', axis=1, inplace=True)\ndata.drop('station_elevation', inplace=True, errors='ignore')\n\n# Split the data into features (X) and target variable (y)\nX = data.drop('swe_value', axis=1)\ny = data['swe_value']\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Create an instance of the ExtraTreesRegressor\nmodel = ExtraTreesRegressor(n_estimators=100, random_state=42, n_jobs=-1)\n\n# Train the model\nmodel.fit(X_train, y_train)\n\n# Save the trained model\njoblib.dump(model, '/home/chetana/gridmet_test_run/model_creation_et.pkl')\n\n# Make predictions on the test set\ny_pred = model.predict(X_test)\n\n# Evaluate the model\n# Evaluate the model\nmse = mean_squared_error(y_test, y_pred)\nrmse = np.sqrt(mse)\nmae = mean_absolute_error(y_test, y_pred)\nr2 = r2_score(y_test, y_pred)\n\nprint(\"Mean Squared Error (MSE):\", mse)\nprint(\"Root Mean Squared Error (RMSE):\", rmse)\nprint(\"Mean Absolute Error (MAE):\", mae)\nprint(\"R-squared (R2):\", r2)",
  "history_output" : "sh: line 1:  3498 Killed                  /home/chetana/gridmet_test_run/pycrate/bin/python model_creation_et.py\n",
  "history_begin_time" : 1690181880290,
  "history_end_time" : 1690182769094,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "CmqLU87uaBqg",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom sklearn.ensemble import ExtraTreesRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\nimport joblib\n\n# Load your dataset into a pandas DataFrame (Assuming the target variable is named 'target')\ndata = pd.read_csv('/home/chetana/gridmet_test_run/final_training_data.csv')\ndata['date'] = pd.to_datetime(data['date'])\n\ndata['year'] = data['date'].dt.year\ndata['month'] = data['date'].dt.month\ndata['day'] = data['date'].dt.day\ndata['day_of_week'] = data['date'].dt.dayofweek\ndata.drop('date', axis=1, inplace=True)\ndata.drop('station_elevation', inplace=True, errors='ignore')\n\n# Split the data into features (X) and target variable (y)\nX = data.drop('swe_value', axis=1)\ny = data['swe_value']\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Create an instance of the ExtraTreesRegressor\nmodel = ExtraTreesRegressor(n_estimators=100, random_state=42, n_jobs=-1)\n\n# Train the model\nmodel.fit(X_train, y_train)\n\n# Save the trained model\njoblib.dump(model, '/home/chetana/gridmet_test_run/extra_trees_model_new_cleaned.pkl')\n\n# Make predictions on the test set\ny_pred = model.predict(X_test)\n\n# Evaluate the model\n# Evaluate the model\nmse = mean_squared_error(y_test, y_pred)\nrmse = np.sqrt(mse)\nmae = mean_absolute_error(y_test, y_pred)\nr2 = r2_score(y_test, y_pred)\n\nprint(\"Mean Squared Error (MSE):\", mse)\nprint(\"Root Mean Squared Error (RMSE):\", rmse)\nprint(\"Mean Absolute Error (MAE):\", mae)\nprint(\"R-squared (R2):\", r2)",
  "history_output" : "",
  "history_begin_time" : 1690181828675,
  "history_end_time" : 1690181880397,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "9q73kepee06",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1689632033812,
  "history_end_time" : 1689632033812,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "qwbpszj1zsd",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1689631636466,
  "history_end_time" : 1689631636466,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "tq3z35",
  "indicator" : "Skipped"
},{
  "history_id" : "eysx0rzout5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1689135058049,
  "history_end_time" : 1689135058049,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "98ix1ruct8b",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1688416860238,
  "history_end_time" : 1688416907376,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "jf7wuu",
  "indicator" : "Stopped"
},{
  "history_id" : "l3kafxzcge2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1688416833718,
  "history_end_time" : 1688416848468,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "jf7wuu",
  "indicator" : "Stopped"
},{
  "history_id" : "7yjxs28gi5x",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1688416668379,
  "history_end_time" : 1688416822957,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "jf7wuu",
  "indicator" : "Stopped"
},{
  "history_id" : "t5rl94var9p",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1688416628777,
  "history_end_time" : 1688416660675,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "jf7wuu",
  "indicator" : "Stopped"
},{
  "history_id" : "cngsteuadza",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1688416567324,
  "history_end_time" : 1688416575019,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "jf7wuu",
  "indicator" : "Stopped"
},{
  "history_id" : "aujzoisawvb",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1687546866701,
  "history_end_time" : 1687546866701,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "5s07joi429b",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1687546866700,
  "history_end_time" : 1687546866700,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "8b93o7ohce1",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1687463685023,
  "history_end_time" : 1687463685023,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "xofb5qnwgdu",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1687463635418,
  "history_end_time" : 1687463635418,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "lfzvnwggrq7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1686236147017,
  "history_end_time" : 1686237909495,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "jf7wuu",
  "indicator" : "Stopped"
},{
  "history_id" : "tird6r03tln",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1686235960974,
  "history_end_time" : 1686235985414,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "jf7wuu",
  "indicator" : "Stopped"
},{
  "history_id" : "z81kun8snlx",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1686235529630,
  "history_end_time" : 1686235529630,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "jf7wuu",
  "indicator" : "Skipped"
},{
  "history_id" : "fhts1fcqjkp",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1686235448229,
  "history_end_time" : 1686235482630,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "jf7wuu",
  "indicator" : "Stopped"
},{
  "history_id" : "qls83mskdpg",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1686235402214,
  "history_end_time" : 1686235424784,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "jf7wuu",
  "indicator" : "Stopped"
},{
  "history_id" : "gfajsrwlo41",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1686153654214,
  "history_end_time" : 1686153654214,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "jf7wuu",
  "indicator" : "Skipped"
},{
  "history_id" : "5maeasyhj6k",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682984798068,
  "history_end_time" : 1682984800295,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "jf7wuu",
  "indicator" : "Stopped"
},{
  "history_id" : "8yiga4qnyu6",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1681516927642,
  "history_end_time" : 1681516927642,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "7uzioe97mtj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1681039707714,
  "history_end_time" : 1681039707714,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "67e50unk58m",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1681039689408,
  "history_end_time" : 1681039697767,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "x6z5e26f3ce",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1681007820130,
  "history_end_time" : 1681007820130,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "w3i8n0so6ut",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1679442743789,
  "history_end_time" : 1679442743789,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "jf7wuu",
  "indicator" : "Skipped"
},{
  "history_id" : "x27pic4nwpm",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1679442743786,
  "history_end_time" : 1679442743786,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "jf7wuu",
  "indicator" : "Skipped"
},{
  "history_id" : "bvs8uz5xbbf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1679332584794,
  "history_end_time" : 1679332584794,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "jf7wuu",
  "indicator" : "Skipped"
},{
  "history_id" : "59y1s4pkvrd",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1679332584792,
  "history_end_time" : 1679332584792,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "jf7wuu",
  "indicator" : "Skipped"
},{
  "history_id" : "xirsz1q5mkk",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1679191258499,
  "history_end_time" : 1679191258499,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "2jifky",
  "indicator" : "Skipped"
},{
  "history_id" : "n8l0wozhwym",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1679191258498,
  "history_end_time" : 1679191258498,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "2jifky",
  "indicator" : "Skipped"
},{
  "history_id" : "0dlh0b65ied",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1679091534992,
  "history_end_time" : 1679091744970,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "m7frw6mvc7l",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1679091534989,
  "history_end_time" : 1679091744970,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "momkreu5mym",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1679091527588,
  "history_end_time" : 1679091533673,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "t5b2qr1jxcc",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1679091527474,
  "history_end_time" : 1679091533670,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "vom43i7j3hr",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678887964100,
  "history_end_time" : 1678888215698,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "m4d3q8trcw4",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678887964099,
  "history_end_time" : 1678888215698,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "3n2jdto12sr",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678887944952,
  "history_end_time" : 1678887946446,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "ahtayuj3p23",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678887944952,
  "history_end_time" : 1678887946446,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "lrico30fenj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678887287259,
  "history_end_time" : 1678887836233,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "4w39lx6pztw",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678887287256,
  "history_end_time" : 1678887836233,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "by8meu20u7q",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678886689975,
  "history_end_time" : 1678887010629,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "ez93uyks65b",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678886689971,
  "history_end_time" : 1678887010629,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "jobhqqmxooe",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678884557547,
  "history_end_time" : 1678884986358,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "p6pikyg4kzo",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678884557544,
  "history_end_time" : 1678884986358,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "lc7dh0bk1nt",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678884501901,
  "history_end_time" : 1678884535354,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "iwksrzooy8u",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678884501896,
  "history_end_time" : 1678884535354,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "do4voej56i9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678884207346,
  "history_end_time" : 1678884438334,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "hr93w8dmntp",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678884207344,
  "history_end_time" : 1678884438334,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "9xd2br1kj51",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678884125223,
  "history_end_time" : 1678884140269,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "1p8qdrfmnci",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678884125219,
  "history_end_time" : 1678884140269,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "rj8jtb3f9ju",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678884039393,
  "history_end_time" : 1678884042290,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "bqusxuoq0ap",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678884039391,
  "history_end_time" : 1678884042290,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "jodwh5h8gbl",
  "history_input" : "from sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error as mse\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom base_hole import BaseHole\nfrom sklearn.model_selection import train_test_split\nfrom datetime import datetime\nfrom model_creation_rf import RandomForestHole\nfrom sklearn.ensemble import ExtraTreesRegressor\n\nclass ExtraTreeHole(RandomForestHole):\n\n  def get_model(self):\n    \"\"\"\n    rfc_pipeline = Pipeline(steps = [\n      ('data_scaling', StandardScaler()),\n      ('model', RandomForestRegressor(max_depth = 15,\n                                       min_samples_leaf = 0.004,\n                                       min_samples_split = 0.008,\n                                       n_estimators = 25))])\n    #return rfc_pipeline\n  \t\"\"\"\n    etmodel = ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse', max_depth=None, '''max_features='auto',''' max_leaf_nodes=None, max_samples=None, min_impurity_decrease=0.0,\n                    #min_impurity_split=None, \n                    min_samples_leaf=1,\n                    min_samples_split=2, min_weight_fraction_leaf=0.0,\n                    n_estimators=100, n_jobs=-1, oob_score=False,\n                    random_state=123, verbose=0, warm_start=False)\n    return etmodel\n\n\n",
  "history_output" : "  File \"/home/chetana/gw-workspace/jodwh5h8gbl/model_creation_et.py\", line 41\n    etmodel = ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse', max_depth=None, '''max_features='auto',''' max_leaf_nodes=None, max_samples=None, min_impurity_decrease=0.0,\n                                                                                                                              ^\nSyntaxError: positional argument follows keyword argument\n",
  "history_begin_time" : 1678883327449,
  "history_end_time" : 1678883775458,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "cwuekjmdf02",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678883288648,
  "history_end_time" : 1678883775458,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "cpr2c0kwo6r",
  "history_input" : "from sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error as mse\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom base_hole import BaseHole\nfrom sklearn.model_selection import train_test_split\nfrom datetime import datetime\nfrom model_creation_rf import RandomForestHole\nfrom sklearn.ensemble import ExtraTreesRegressor\n\nclass ExtraTreeHole(RandomForestHole):\n\n  def get_model(self):\n    \"\"\"\n    rfc_pipeline = Pipeline(steps = [\n      ('data_scaling', StandardScaler()),\n      ('model', RandomForestRegressor(max_depth = 15,\n                                       min_samples_leaf = 0.004,\n                                       min_samples_split = 0.008,\n                                       n_estimators = 25))])\n    #return rfc_pipeline\n  \t\"\"\"\n    etmodel = ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse', max_depth=None, '''max_features='auto',''' max_leaf_nodes=None, max_samples=None, min_impurity_decrease=0.0,\n                    #min_impurity_split=None, \n                    min_samples_leaf=1,\n                    min_samples_split=2, min_weight_fraction_leaf=0.0,\n                    n_estimators=100, n_jobs=-1, oob_score=False,\n                    random_state=123, verbose=0, warm_start=False)\n    return etmodel\n\n\n",
  "history_output" : "  File \"/home/chetana/gw-workspace/cpr2c0kwo6r/model_creation_et.py\", line 41\n    etmodel = ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse', max_depth=None, '''max_features='auto',''' max_leaf_nodes=None, max_samples=None, min_impurity_decrease=0.0,\n                                                                                                                              ^\nSyntaxError: positional argument follows keyword argument\n",
  "history_begin_time" : 1678756761625,
  "history_end_time" : 1678756762958,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Done"
},{
  "history_id" : "jsw29vfpu7a",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678756752348,
  "history_end_time" : 1678756752348,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "vjsry0r527p",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678756683316,
  "history_end_time" : 1678756684837,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "sg16yn842et",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678749631735,
  "history_end_time" : 1678749936029,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "8lin9pzz4mo",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678749631729,
  "history_end_time" : 1678749936028,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "i3zmoilod8t",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678748546946,
  "history_end_time" : 1678748546946,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "7kpcfb9mu2i",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678747245317,
  "history_end_time" : 1678747245317,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "ht7h5ztk5n5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678747245311,
  "history_end_time" : 1678747245311,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "tjra16hmblf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678746481227,
  "history_end_time" : 1678746793060,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "igrpr0damup",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678746481216,
  "history_end_time" : 1678746793059,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "1hxpubqx1o2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678743868500,
  "history_end_time" : 1678744167107,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "40i1rmriogy",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678743868499,
  "history_end_time" : 1678744167106,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "ftbuf61nd2c",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678743629021,
  "history_end_time" : 1678743629021,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "r01ls4uw6ln",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678743629019,
  "history_end_time" : 1678743629019,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "3nfv5zqd4yk",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678743144823,
  "history_end_time" : 1678743615535,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "x1vt5lc2e3d",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678743144822,
  "history_end_time" : 1678743615535,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "qujqvj5dm0z",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678742583290,
  "history_end_time" : 1678742583290,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "5q2qgz4w80d",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678742583289,
  "history_end_time" : 1678742583289,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "nbe1lshvwta",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678742209486,
  "history_end_time" : 1678742571511,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "bbzgz2dpidl",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678742209483,
  "history_end_time" : 1678742571511,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "27f0v0pud9x",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678738707276,
  "history_end_time" : 1678738707276,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "19er2t3yx1g",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678738707274,
  "history_end_time" : 1678738707274,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "jigh9nl4t7u",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678725425014,
  "history_end_time" : 1678725425014,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "u40lgnasntg",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678725424892,
  "history_end_time" : 1678725424892,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "f4e1hlra6gf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678723111834,
  "history_end_time" : 1678725408358,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "53h8avrpx9p",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678723111823,
  "history_end_time" : 1678725408356,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "198bqxz7f5j",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678649002073,
  "history_end_time" : 1678649002073,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "l9vzd1m2hgn",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678649002070,
  "history_end_time" : 1678649002070,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "fdyq176fimx",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678648366923,
  "history_end_time" : 1678648366923,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "h2eqa3wch4x",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678648366920,
  "history_end_time" : 1678648366920,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "ab1s92l6dds",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678648337357,
  "history_end_time" : 1678648341661,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "k66k748cjga",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678648337344,
  "history_end_time" : 1678648341660,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "ptufi5ed55k",
  "history_input" : "from sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error as mse\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom base_hole import BaseHole\nfrom sklearn.model_selection import train_test_split\nfrom datetime import datetime\nfrom model_creation_rf import RandomForestHole\nfrom sklearn.ensemble import ExtraTreesRegressor\n\nclass ExtraTreeHole(RandomForestHole):\n\n  def get_model(self):\n    \"\"\"\n    rfc_pipeline = Pipeline(steps = [\n      ('data_scaling', StandardScaler()),\n      ('model', RandomForestRegressor(max_depth = 15,\n                                       min_samples_leaf = 0.004,\n                                       min_samples_split = 0.008,\n                                       n_estimators = 25))])\n    #return rfc_pipeline\n  \t\"\"\"\n    etmodel = ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse', max_depth=None, '''max_features='auto',''' max_leaf_nodes=None, max_samples=None, min_impurity_decrease=0.0,\n                    #min_impurity_split=None, \n                    min_samples_leaf=1,\n                    min_samples_split=2, min_weight_fraction_leaf=0.0,\n                    n_estimators=100, n_jobs=-1, oob_score=False,\n                    random_state=123, verbose=0, warm_start=False)\n    return etmodel\n\n\n",
  "history_output" : "  File \"/home/chetana/gw-workspace/ptufi5ed55k/model_creation_et.py\", line 41\n    etmodel = ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse', max_depth=None, '''max_features='auto',''' max_leaf_nodes=None, max_samples=None, min_impurity_decrease=0.0,\n                                                                                                                              ^\nSyntaxError: positional argument follows keyword argument\n",
  "history_begin_time" : 1678564607188,
  "history_end_time" : 1678564608540,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Done"
},{
  "history_id" : "ztn0nuiyjls",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678564567758,
  "history_end_time" : 1678564567758,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "gver70bqw8e",
  "history_input" : "from sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error as mse\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom base_hole import BaseHole\nfrom sklearn.model_selection import train_test_split\nfrom datetime import datetime\nfrom model_creation_rf import RandomForestHole\nfrom sklearn.ensemble import ExtraTreesRegressor\n\nclass ExtraTreeHole(RandomForestHole):\n\n  def get_model(self):\n    \"\"\"\n    rfc_pipeline = Pipeline(steps = [\n      ('data_scaling', StandardScaler()),\n      ('model', RandomForestRegressor(max_depth = 15,\n                                       min_samples_leaf = 0.004,\n                                       min_samples_split = 0.008,\n                                       n_estimators = 25))])\n    #return rfc_pipeline\n  \t\"\"\"\n    etmodel = ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse', max_depth=None, '''max_features='auto',''' max_leaf_nodes=None, max_samples=None, min_impurity_decrease=0.0,\n                    #min_impurity_split=None, \n                    min_samples_leaf=1,\n                    min_samples_split=2, min_weight_fraction_leaf=0.0,\n                    n_estimators=100, n_jobs=-1, oob_score=False,\n                    random_state=123, verbose=0, warm_start=False)\n    return etmodel\n\n\n",
  "history_output" : "  File \"/home/chetana/gw-workspace/gver70bqw8e/model_creation_et.py\", line 41\n    etmodel = ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse', max_depth=None, '''max_features='auto',''' max_leaf_nodes=None, max_samples=None, min_impurity_decrease=0.0,\n                                                                                                                              ^\n",
  "history_begin_time" : 1678564554066,
  "history_end_time" : 1678564556718,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Failed"
},{
  "history_id" : "ulcflprd983",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678564538715,
  "history_end_time" : 1678564538715,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "nrebx1i5ifc",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678557921962,
  "history_end_time" : 1678557923651,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "682ra80i8pr",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678557921959,
  "history_end_time" : 1678557923651,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "lrrc1qqwq5i",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678557705831,
  "history_end_time" : 1678557898800,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "80zg2e6vaos",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678557705828,
  "history_end_time" : 1678557898797,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "jl5u26463i2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678497028189,
  "history_end_time" : 1678497028189,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "sca2o5ok8gi",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678497028182,
  "history_end_time" : 1678497028182,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "xqituu4q5i6",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678330214225,
  "history_end_time" : 1678330214225,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "spbodsukvkp",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678330214214,
  "history_end_time" : 1678330214214,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "obudlra6og6",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678326965120,
  "history_end_time" : 1678326965120,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "a3x0h3mbkuu",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678326965116,
  "history_end_time" : 1678326965116,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "kap4u053z7c",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678312067635,
  "history_end_time" : 1678312067635,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "jn8bqywrdja",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678312067634,
  "history_end_time" : 1678312067634,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "e3z2qgnjafo",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678312030785,
  "history_end_time" : 1678312065074,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "cvwairb0jum",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678312030783,
  "history_end_time" : 1678312065074,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "x02amd37k5c",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678312001517,
  "history_end_time" : 1678312026555,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "yqabpj4jltq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678312001514,
  "history_end_time" : 1678312026554,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "qhylqo10hfp",
  "history_input" : "from sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error as mse\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom base_hole import BaseHole\nfrom sklearn.model_selection import train_test_split\nfrom datetime import datetime\nfrom model_creation_rf import RandomForestHole\nfrom sklearn.ensemble import ExtraTreesRegressor\n\nclass ExtraTreeHole(RandomForestHole):\n\n  def get_model(self):\n    \"\"\"\n    rfc_pipeline = Pipeline(steps = [\n      ('data_scaling', StandardScaler()),\n      ('model', RandomForestRegressor(max_depth = 15,\n                                       min_samples_leaf = 0.004,\n                                       min_samples_split = 0.008,\n                                       n_estimators = 25))])\n    #return rfc_pipeline\n  \t\"\"\"\n    etmodel = ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse', max_depth=None, max_features='auto', max_leaf_nodes=None, max_samples=None, min_impurity_decrease=0.0,\n                    #min_impurity_split=None, \n                    min_samples_leaf=1,\n                    min_samples_split=2, min_weight_fraction_leaf=0.0,\n                    n_estimators=100, n_jobs=-1, oob_score=False,\n                    random_state=123, verbose=0, warm_start=False)\n    return etmodel\n\n\n",
  "history_output" : "Running",
  "history_begin_time" : 1678283527468,
  "history_end_time" : 1678283530931,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Done"
},{
  "history_id" : "hl54nd58w0q",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678283483050,
  "history_end_time" : 1678283483050,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "fvn9t5s5si4",
  "history_input" : "from sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error as mse\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom base_hole import BaseHole\nfrom sklearn.model_selection import train_test_split\nfrom datetime import datetime\nfrom model_creation_rf import RandomForestHole\nfrom sklearn.ensemble import ExtraTreesRegressor\n\nclass ExtraTreeHole(RandomForestHole):\n\n  def get_model(self):\n    \"\"\"\n    rfc_pipeline = Pipeline(steps = [\n      ('data_scaling', StandardScaler()),\n      ('model', RandomForestRegressor(max_depth = 15,\n                                       min_samples_leaf = 0.004,\n                                       min_samples_split = 0.008,\n                                       n_estimators = 25))])\n    #return rfc_pipeline\n  \t\"\"\"\n    etmodel = ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse', max_depth=None, max_features='auto', max_leaf_nodes=None, max_samples=None, min_impurity_decrease=0.0,\n                    #min_impurity_split=None, \n                    min_samples_leaf=1,\n                    min_samples_split=2, min_weight_fraction_leaf=0.0,\n                    n_estimators=100, n_jobs=-1, oob_score=False,\n                    random_state=123, verbose=0, warm_start=False)\n    return etmodel\n\n\n",
  "history_output" : "",
  "history_begin_time" : 1678242441647,
  "history_end_time" : 1678242446331,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Done"
},{
  "history_id" : "o54278n0yq2",
  "history_input" : "from sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error as mse\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom base_hole import BaseHole\nfrom sklearn.model_selection import train_test_split\nfrom datetime import datetime\nfrom model_creation_rf import RandomForestHole\nfrom sklearn.ensemble import ExtraTreesRegressor\n\nclass ExtraTreeHole(RandomForestHole):\n\n  def get_model(self):\n    \"\"\"\n    rfc_pipeline = Pipeline(steps = [\n      ('data_scaling', StandardScaler()),\n      ('model', RandomForestRegressor(max_depth = 15,\n                                       min_samples_leaf = 0.004,\n                                       min_samples_split = 0.008,\n                                       n_estimators = 25))])\n    #return rfc_pipeline\n  \t\"\"\"\n    etmodel = ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse', max_depth=None, max_features='auto', max_leaf_nodes=None, max_samples=None, min_impurity_decrease=0.0,\n                    #min_impurity_split=None, \n                    min_samples_leaf=1,\n                    min_samples_split=2, min_weight_fraction_leaf=0.0,\n                    n_estimators=100, n_jobs=-1, oob_score=False,\n                    random_state=123, verbose=0, warm_start=False)\n    return etmodel\n\n\n",
  "history_output" : "",
  "history_begin_time" : 1678241840649,
  "history_end_time" : 1678241845696,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Done"
},{
  "history_id" : "jvrh1qrc4ke",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678241816411,
  "history_end_time" : 1678241816411,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "zoii7a8c6id",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678241789982,
  "history_end_time" : 1678241789982,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "q17o676sm48",
  "history_input" : "from sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error as mse\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom base_hole import BaseHole\nfrom sklearn.model_selection import train_test_split\nfrom datetime import datetime\nfrom model_creation_rf import RandomForestHole\nfrom sklearn.ensemble import ExtraTreesRegressor\n\nclass ExtraTreeHole(RandomForestHole):\n\n  def get_model(self):\n    \"\"\"\n    rfc_pipeline = Pipeline(steps = [\n      ('data_scaling', StandardScaler()),\n      ('model', RandomForestRegressor(max_depth = 15,\n                                       min_samples_leaf = 0.004,\n                                       min_samples_split = 0.008,\n                                       n_estimators = 25))])\n    #return rfc_pipeline\n  \t\"\"\"\n    etmodel = ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse', max_depth=None, max_features='auto', max_leaf_nodes=None, max_samples=None, min_impurity_decrease=0.0,\n                    #min_impurity_split=None, \n                    min_samples_leaf=1,\n                    min_samples_split=2, min_weight_fraction_leaf=0.0,\n                    n_estimators=100, n_jobs=-1, oob_score=False,\n                    random_state=123, verbose=0, warm_start=False)\n    return etmodel\n\n\n",
  "history_output" : "Running",
  "history_begin_time" : 1678206373516,
  "history_end_time" : 1678206379284,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "hzwl6x6ou71",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678206364593,
  "history_end_time" : 1678206379284,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "v7srx06hl8p",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678206134299,
  "history_end_time" : 1678206143169,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "kyxwzdjfljs",
  "history_input" : "from sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error as mse\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom base_hole import BaseHole\nfrom sklearn.model_selection import train_test_split\nfrom datetime import datetime\nfrom model_creation_rf import RandomForestHole\nfrom sklearn.ensemble import ExtraTreesRegressor\n\nclass ExtraTreeHole(RandomForestHole):\n\n  def get_model(self):\n    \"\"\"\n    rfc_pipeline = Pipeline(steps = [\n      ('data_scaling', StandardScaler()),\n      ('model', RandomForestRegressor(max_depth = 15,\n                                       min_samples_leaf = 0.004,\n                                       min_samples_split = 0.008,\n                                       n_estimators = 25))])\n    #return rfc_pipeline\n  \t\"\"\"\n    etmodel = ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse', max_depth=None, max_features='auto', max_leaf_nodes=None, max_samples=None, min_impurity_decrease=0.0,\n                    #min_impurity_split=None, \n                    min_samples_leaf=1,\n                    min_samples_split=2, min_weight_fraction_leaf=0.0,\n                    n_estimators=100, n_jobs=-1, oob_score=False,\n                    random_state=123, verbose=0, warm_start=False)\n    return etmodel\n\n\n",
  "history_output" : "",
  "history_begin_time" : 1678201922865,
  "history_end_time" : 1678201928753,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Done"
},{
  "history_id" : "qqfniw5afu5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678201909683,
  "history_end_time" : 1678201909683,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "uts8tc46swe",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678201729145,
  "history_end_time" : 1678201729145,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "51qdf4vba94",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678201707338,
  "history_end_time" : 1678201707338,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "xgbvb3ptufa",
  "history_input" : "from sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error as mse\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom base_hole import BaseHole\nfrom sklearn.model_selection import train_test_split\nfrom datetime import datetime\nfrom model_creation_rf import RandomForestHole\nfrom sklearn.ensemble import ExtraTreesRegressor\n\nclass ExtraTreeHole(RandomForestHole):\n\n  def get_model(self):\n    \"\"\"\n    rfc_pipeline = Pipeline(steps = [\n      ('data_scaling', StandardScaler()),\n      ('model', RandomForestRegressor(max_depth = 15,\n                                       min_samples_leaf = 0.004,\n                                       min_samples_split = 0.008,\n                                       n_estimators = 25))])\n    #return rfc_pipeline\n  \t\"\"\"\n    etmodel = ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse', max_depth=None, max_features='auto', max_leaf_nodes=None, max_samples=None, min_impurity_decrease=0.0,\n                    #min_impurity_split=None, \n                    min_samples_leaf=1,\n                    min_samples_split=2, min_weight_fraction_leaf=0.0,\n                    n_estimators=100, n_jobs=-1, oob_score=False,\n                    random_state=123, verbose=0, warm_start=False)\n    return etmodel\n\n\n",
  "history_output" : "Running",
  "history_begin_time" : 1678201689552,
  "history_end_time" : 1678201693207,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Done"
},{
  "history_id" : "f5cphfuvuza",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678201688178,
  "history_end_time" : 1678201703983,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "h0ax84nv5ps",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678201677299,
  "history_end_time" : 1678201687067,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "8m640b1gnyh",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678201567679,
  "history_end_time" : 1678201567679,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "ujh45u33r3a",
  "history_input" : "from sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error as mse\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom base_hole import BaseHole\nfrom sklearn.model_selection import train_test_split\nfrom datetime import datetime\nfrom model_creation_rf import RandomForestHole\nfrom sklearn.ensemble import ExtraTreesRegressor\n\nclass ExtraTreeHole(RandomForestHole):\n\n  def get_model(self):\n    \"\"\"\n    rfc_pipeline = Pipeline(steps = [\n      ('data_scaling', StandardScaler()),\n      ('model', RandomForestRegressor(max_depth = 15,\n                                       min_samples_leaf = 0.004,\n                                       min_samples_split = 0.008,\n                                       n_estimators = 25))])\n    #return rfc_pipeline\n  \t\"\"\"\n    etmodel = ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse', max_depth=None, max_features='auto', max_leaf_nodes=None, max_samples=None, min_impurity_decrease=0.0,\n                    #min_impurity_split=None, \n                    min_samples_leaf=1,\n                    min_samples_split=2, min_weight_fraction_leaf=0.0,\n                    n_estimators=100, n_jobs=-1, oob_score=False,\n                    random_state=123, verbose=0, warm_start=False)\n    return etmodel\n\n\n",
  "history_output" : "Running",
  "history_begin_time" : 1678201349654,
  "history_end_time" : 1678201516420,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "qn7lt6lo79u",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678201335975,
  "history_end_time" : 1678201516420,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "nlee6yb3cjv",
  "history_input" : "from sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error as mse\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom base_hole import BaseHole\nfrom sklearn.model_selection import train_test_split\nfrom datetime import datetime\nfrom model_creation_rf import RandomForestHole\nfrom sklearn.ensemble import ExtraTreesRegressor\n\nclass ExtraTreeHole(RandomForestHole):\n\n  def get_model(self):\n    \"\"\"\n    rfc_pipeline = Pipeline(steps = [\n      ('data_scaling', StandardScaler()),\n      ('model', RandomForestRegressor(max_depth = 15,\n                                       min_samples_leaf = 0.004,\n                                       min_samples_split = 0.008,\n                                       n_estimators = 25))])\n    #return rfc_pipeline\n  \t\"\"\"\n    etmodel = ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse', max_depth=None, max_features='auto', max_leaf_nodes=None, max_samples=None, min_impurity_decrease=0.0,\n                    #min_impurity_split=None, \n                    min_samples_leaf=1,\n                    min_samples_split=2, min_weight_fraction_leaf=0.0,\n                    n_estimators=100, n_jobs=-1, oob_score=False,\n                    random_state=123, verbose=0, warm_start=False)\n    return etmodel\n\n\n",
  "history_output" : "Running",
  "history_begin_time" : 1678155242795,
  "history_end_time" : 1678155246205,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Done"
},{
  "history_id" : "thqn4wuiunq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678155182777,
  "history_end_time" : 1678155182777,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "12iqou6zysl",
  "history_input" : "from sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error as mse\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom base_hole import BaseHole\nfrom sklearn.model_selection import train_test_split\nfrom datetime import datetime\nfrom model_creation_rf import RandomForestHole\nfrom sklearn.ensemble import ExtraTreesRegressor\n\nclass ExtraTreeHole(RandomForestHole):\n\n  def get_model(self):\n    \"\"\"\n    rfc_pipeline = Pipeline(steps = [\n      ('data_scaling', StandardScaler()),\n      ('model', RandomForestRegressor(max_depth = 15,\n                                       min_samples_leaf = 0.004,\n                                       min_samples_split = 0.008,\n                                       n_estimators = 25))])\n    #return rfc_pipeline\n  \t\"\"\"\n    etmodel = ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse', max_depth=None, max_features='auto', max_leaf_nodes=None, max_samples=None, min_impurity_decrease=0.0,\n                    #min_impurity_split=None, \n                    min_samples_leaf=1,\n                    min_samples_split=2, min_weight_fraction_leaf=0.0,\n                    n_estimators=100, n_jobs=-1, oob_score=False,\n                    random_state=123, verbose=0, warm_start=False)\n    return etmodel\n\n\n",
  "history_output" : "Running",
  "history_begin_time" : 1678144764677,
  "history_end_time" : 1678154846288,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "nzpbe86zcn9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678144724394,
  "history_end_time" : 1678154846289,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "ys75jo865i9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677959621661,
  "history_end_time" : 1677959722653,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "l7a23a0tsyu",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677959587591,
  "history_end_time" : 1677959587591,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "p2ank3i8ner",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677959568303,
  "history_end_time" : 1677959583158,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "tblt9j1d4yz",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677958880515,
  "history_end_time" : 1677958952870,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "pxxhxai3lli",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677958856300,
  "history_end_time" : 1677958856300,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "78ovvdm45oc",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677958842103,
  "history_end_time" : 1677958849893,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "j54wcvp6q0h",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677958735471,
  "history_end_time" : 1677958754132,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "5qpliw6brrq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677958274938,
  "history_end_time" : 1677958291220,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "kelo9bm9vdq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677867848039,
  "history_end_time" : 1677867848039,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "7cbcru82qll",
  "history_input" : "from sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error as mse\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom base_hole import BaseHole\nfrom sklearn.model_selection import train_test_split\nfrom datetime import datetime\nfrom model_creation_rf import RandomForestHole\nfrom sklearn.ensemble import ExtraTreesRegressor\n\nclass ExtraTreeHole(RandomForestHole):\n\n  def get_model(self):\n    \"\"\"\n    rfc_pipeline = Pipeline(steps = [\n      ('data_scaling', StandardScaler()),\n      ('model', RandomForestRegressor(max_depth = 15,\n                                       min_samples_leaf = 0.004,\n                                       min_samples_split = 0.008,\n                                       n_estimators = 25))])\n    #return rfc_pipeline\n  \t\"\"\"\n    etmodel = ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse', max_depth=None, max_features='auto', max_leaf_nodes=None, max_samples=None, min_impurity_decrease=0.0,\n                    #min_impurity_split=None, \n                    min_samples_leaf=1,\n                    min_samples_split=2, min_weight_fraction_leaf=0.0,\n                    n_estimators=100, n_jobs=-1, oob_score=False,\n                    random_state=123, verbose=0, warm_start=False)\n    return etmodel\n\n\n",
  "history_output" : "",
  "history_begin_time" : 1677858942787,
  "history_end_time" : 1677867648730,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "i173z3i008b",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677858933368,
  "history_end_time" : 1677867648731,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "3565kdel9w6",
  "history_input" : "from sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error as mse\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom base_hole import BaseHole\nfrom sklearn.model_selection import train_test_split\nfrom datetime import datetime\nfrom model_creation_rf import RandomForestHole\nfrom sklearn.ensemble import ExtraTreesRegressor\n\nclass ExtraTreeHole(RandomForestHole):\n\n  def get_model(self):\n    \"\"\"\n    rfc_pipeline = Pipeline(steps = [\n      ('data_scaling', StandardScaler()),\n      ('model', RandomForestRegressor(max_depth = 15,\n                                       min_samples_leaf = 0.004,\n                                       min_samples_split = 0.008,\n                                       n_estimators = 25))])\n    #return rfc_pipeline\n  \t\"\"\"\n    etmodel = ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse', max_depth=None, max_features='auto', max_leaf_nodes=None, max_samples=None, min_impurity_decrease=0.0,\n                    #min_impurity_split=None, \n                    min_samples_leaf=1,\n                    min_samples_split=2, min_weight_fraction_leaf=0.0,\n                    n_estimators=100, n_jobs=-1, oob_score=False,\n                    random_state=123, verbose=0, warm_start=False)\n    return etmodel\n\n\n",
  "history_output" : "Running",
  "history_begin_time" : 1677858785007,
  "history_end_time" : 1677858788489,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Done"
},{
  "history_id" : "pltvqv6m0tc",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677858755854,
  "history_end_time" : 1677858755854,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "wljc2q02aq3",
  "history_input" : "from sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error as mse\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom base_hole import BaseHole\nfrom sklearn.model_selection import train_test_split\nfrom datetime import datetime\nfrom model_creation_rf import RandomForestHole\nfrom sklearn.ensemble import ExtraTreesRegressor\n\nclass ExtraTreeHole(RandomForestHole):\n\n  def get_model(self):\n    \"\"\"\n    rfc_pipeline = Pipeline(steps = [\n      ('data_scaling', StandardScaler()),\n      ('model', RandomForestRegressor(max_depth = 15,\n                                       min_samples_leaf = 0.004,\n                                       min_samples_split = 0.008,\n                                       n_estimators = 25))])\n    #return rfc_pipeline\n  \t\"\"\"\n    etmodel = ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse', max_depth=None, max_features='auto', max_leaf_nodes=None, max_samples=None, min_impurity_decrease=0.0,\n                    #min_impurity_split=None, \n                    min_samples_leaf=1,\n                    min_samples_split=2, min_weight_fraction_leaf=0.0,\n                    n_estimators=100, n_jobs=-1, oob_score=False,\n                    random_state=123, verbose=0, warm_start=False)\n    return etmodel\n\n\n",
  "history_output" : "Running",
  "history_begin_time" : 1677809798041,
  "history_end_time" : 1677809801716,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Done"
},{
  "history_id" : "oxnl06gn0y3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677809796048,
  "history_end_time" : 1677809840777,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "al3i0kx4hrs",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677809675931,
  "history_end_time" : 1677809675931,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "90cytqomkyx",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677809602159,
  "history_end_time" : 1677809602159,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "fxth98ciqa5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677809590504,
  "history_end_time" : 1677809590504,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "wek1291c7hm",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677809556021,
  "history_end_time" : 1677809573439,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "wbhwq52ke16",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677809539135,
  "history_end_time" : 1677809554697,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "x2b5zquvuqe",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677809468337,
  "history_end_time" : 1677809468337,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "lc0x0t7umv4",
  "history_input" : "from sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error as mse\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom base_hole import BaseHole\nfrom sklearn.model_selection import train_test_split\nfrom datetime import datetime\nfrom model_creation_rf import RandomForestHole\nfrom sklearn.ensemble import ExtraTreesRegressor\n\nclass ExtraTreeHole(RandomForestHole):\n\n  def get_model(self):\n    \"\"\"\n    rfc_pipeline = Pipeline(steps = [\n      ('data_scaling', StandardScaler()),\n      ('model', RandomForestRegressor(max_depth = 15,\n                                       min_samples_leaf = 0.004,\n                                       min_samples_split = 0.008,\n                                       n_estimators = 25))])\n    #return rfc_pipeline\n  \t\"\"\"\n    etmodel = ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse', max_depth=None, max_features='auto', max_leaf_nodes=None, max_samples=None, min_impurity_decrease=0.0,\n                    #min_impurity_split=None, \n                    min_samples_leaf=1,\n                    min_samples_split=2, min_weight_fraction_leaf=0.0,\n                    n_estimators=100, n_jobs=-1, oob_score=False,\n                    random_state=123, verbose=0, warm_start=False)\n    return etmodel\n\n\n",
  "history_output" : "Running",
  "history_begin_time" : 1677809443300,
  "history_end_time" : 1677809447923,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Done"
},{
  "history_id" : "dcai1drgazp",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677809401972,
  "history_end_time" : 1677809401972,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "nyp0xgtsk31",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677809343299,
  "history_end_time" : 1677809343299,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "pnse9odtzx6",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677809175089,
  "history_end_time" : 1677809306589,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "4303b7if6sj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677809134775,
  "history_end_time" : 1677809171462,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "8igf2uwvyiq",
  "history_input" : "from sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error as mse\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom base_hole import BaseHole\nfrom sklearn.model_selection import train_test_split\nfrom datetime import datetime\nfrom model_creation_rf import RandomForestHole\nfrom sklearn.ensemble import ExtraTreesRegressor\n\nclass ExtraTreeHole(RandomForestHole):\n\n  def get_model(self):\n    \"\"\"\n    rfc_pipeline = Pipeline(steps = [\n      ('data_scaling', StandardScaler()),\n      ('model', RandomForestRegressor(max_depth = 15,\n                                       min_samples_leaf = 0.004,\n                                       min_samples_split = 0.008,\n                                       n_estimators = 25))])\n    #return rfc_pipeline\n  \t\"\"\"\n    etmodel = ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse', max_depth=None, max_features='auto', max_leaf_nodes=None, max_samples=None, min_impurity_decrease=0.0,\n                    #min_impurity_split=None, \n                    min_samples_leaf=1,\n                    min_samples_split=2, min_weight_fraction_leaf=0.0,\n                    n_estimators=100, n_jobs=-1, oob_score=False,\n                    random_state=123, verbose=0, warm_start=False)\n    return etmodel\n\n\n",
  "history_output" : "Running",
  "history_begin_time" : 1677808129491,
  "history_end_time" : 1677808132973,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Done"
},{
  "history_id" : "m2xwctn2jot",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677808073975,
  "history_end_time" : 1677808073975,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "7bobc7qn3hs",
  "history_input" : "from sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error as mse\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom base_hole import BaseHole\nfrom sklearn.model_selection import train_test_split\nfrom datetime import datetime\nfrom model_creation_rf import RandomForestHole\nfrom sklearn.ensemble import ExtraTreesRegressor\n\nclass ExtraTreeHole(RandomForestHole):\n\n  def get_model(self):\n    \"\"\"\n    rfc_pipeline = Pipeline(steps = [\n      ('data_scaling', StandardScaler()),\n      ('model', RandomForestRegressor(max_depth = 15,\n                                       min_samples_leaf = 0.004,\n                                       min_samples_split = 0.008,\n                                       n_estimators = 25))])\n    #return rfc_pipeline\n  \t\"\"\"\n    etmodel = ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse', max_depth=None, max_features='auto', max_leaf_nodes=None, max_samples=None, min_impurity_decrease=0.0,\n                    #min_impurity_split=None, \n                    min_samples_leaf=1,\n                    min_samples_split=2, min_weight_fraction_leaf=0.0,\n                    n_estimators=100, n_jobs=-1, oob_score=False,\n                    random_state=123, verbose=0, warm_start=False)\n    return etmodel\n\n\n",
  "history_output" : "Running",
  "history_begin_time" : 1677797442565,
  "history_end_time" : 1677797446326,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Done"
},{
  "history_id" : "ujn46b5m4w3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677797429029,
  "history_end_time" : 1677797429029,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "g1j21xr0oiz",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677797242671,
  "history_end_time" : 1677797242671,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "1lftp48gag8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677797147691,
  "history_end_time" : 1677797147691,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "us2hdq1usiv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677796558982,
  "history_end_time" : 1677797113233,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "ai4zvwtziuw",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677796509193,
  "history_end_time" : 1677796509193,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "hqtlnijwnr3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677796344437,
  "history_end_time" : 1677796528249,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "kogqt0qg0n9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677796268588,
  "history_end_time" : 1677796268588,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "0ihd6l4byta",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677795409798,
  "history_end_time" : 1677795409798,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "SgXJuQWz8nZ6",
  "history_input" : "from sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error as mse\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom base_hole import BaseHole\nfrom sklearn.model_selection import train_test_split\nfrom datetime import datetime\nfrom model_creation_rf import RandomForestHole\nfrom sklearn.ensemble import ExtraTreesRegressor\n\nclass ExtraTreeHole(RandomForestHole):\n\n  def get_model(self):\n    \"\"\"\n    rfc_pipeline = Pipeline(steps = [\n      ('data_scaling', StandardScaler()),\n      ('model', RandomForestRegressor(max_depth = 15,\n                                       min_samples_leaf = 0.004,\n                                       min_samples_split = 0.008,\n                                       n_estimators = 25))])\n    #return rfc_pipeline\n  \t\"\"\"\n    etmodel = ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='mse', max_depth=None, max_features='auto', max_leaf_nodes=None, max_samples=None, min_impurity_decrease=0.0,\n                    #min_impurity_split=None, \n                    min_samples_leaf=1,\n                    min_samples_split=2, min_weight_fraction_leaf=0.0,\n                    n_estimators=100, n_jobs=-1, oob_score=False,\n                    random_state=123, verbose=0, warm_start=False)\n    return etmodel\n\n\n",
  "history_output" : "",
  "history_begin_time" : 1677795380459,
  "history_end_time" : 1677795384024,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "cwXuiqmY986e",
  "history_input" : "from sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error as mse\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom base_hole import BaseHole\nfrom sklearn.model_selection import train_test_split\nfrom datetime import datetime\nfrom model_creation_rf import RandomForestHole\nfrom sklearn.ensemble import ExtraTreesRegressor\n\nclass ExtraTreeHole(RandomForestHole):\n\n  def get_model(self):\n    \"\"\"\n    rfc_pipeline = Pipeline(steps = [\n      ('data_scaling', StandardScaler()),\n      ('model', RandomForestRegressor(max_depth = 15,\n                                       min_samples_leaf = 0.004,\n                                       min_samples_split = 0.008,\n                                       n_estimators = 25))])\n    #return rfc_pipeline\n  \t\"\"\"\n    etmodel = ExtraTreesRegressor(bootstrap=False, '''ccp_alpha=0.0, '''criterion='mse',\n                    max_depth=None, max_features='auto', max_leaf_nodes=None,\n                    max_samples=None, min_impurity_decrease=0.0,\n                    #min_impurity_split=None, \n                    min_samples_leaf=1,\n                    min_samples_split=2, min_weight_fraction_leaf=0.0,\n                    n_estimators=100, n_jobs=-1, oob_score=False,\n                    random_state=123, verbose=0, warm_start=False)\n    return etmodel\n\n\n",
  "history_output" : "  File \"/home/chetana/gw-workspace/cwXuiqmY986e/model_creation_et.py\", line 41\n    etmodel = ExtraTreesRegressor(bootstrap=False, '''ccp_alpha=0.0, '''criterion='mse',\n                                                                        ^\nSyntaxError: positional argument follows keyword argument\n",
  "history_begin_time" : 1677795302230,
  "history_end_time" : 1677795303603,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "XvyLQqdVavqM",
  "history_input" : "from sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error as mse\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom base_hole import BaseHole\nfrom sklearn.model_selection import train_test_split\nfrom datetime import datetime\nfrom model_creation_rf import RandomForestHole\nfrom sklearn.ensemble import ExtraTreesRegressor\n\nclass ExtraTreeHole(RandomForestHole):\n\n  def get_model(self):\n    \"\"\"\n    rfc_pipeline = Pipeline(steps = [\n      ('data_scaling', StandardScaler()),\n      ('model', RandomForestRegressor(max_depth = 15,\n                                       min_samples_leaf = 0.004,\n                                       min_samples_split = 0.008,\n                                       n_estimators = 25))])\n    #return rfc_pipeline\n  \t\"\"\"\n    etmodel = ExtraTreesRegressor(bootstrap=False, '''ccp_alpha=0.0, '''criterion='mse',\n                    max_depth=None, max_features='auto', max_leaf_nodes=None,\n                    max_samples=None, min_impurity_decrease=0.0,\n                    #min_impurity_split=None, \n                    min_samples_leaf=1,\n                    min_samples_split=2, min_weight_fraction_leaf=0.0,\n                    n_estimators=100, n_jobs=-1, oob_score=False,\n                    random_state=123, verbose=0, warm_start=False)\n    return etmodel\n\n\n",
  "history_output" : "  File \"/home/chetana/gw-workspace/XvyLQqdVavqM/model_creation_et.py\", line 41\n    etmodel = ExtraTreesRegressor(bootstrap=False, '''ccp_alpha=0.0, '''criterion='mse',\n                                                                        ^\nSyntaxError: positional argument follows keyword argument\n",
  "history_begin_time" : 1677793964308,
  "history_end_time" : 1677793965998,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "vimr1lwsdjs",
  "history_input" : "from sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error as mse\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom base_hole import BaseHole\nfrom sklearn.model_selection import train_test_split\nfrom datetime import datetime\nfrom model_creation_rf import RandomForestHole\nfrom sklearn.ensemble import ExtraTreesRegressor\n\nclass ExtraTreeHole(RandomForestHole):\n\n  def get_model(self):\n    \"\"\"\n    rfc_pipeline = Pipeline(steps = [\n      ('data_scaling', StandardScaler()),\n      ('model', RandomForestRegressor(max_depth = 15,\n                                       min_samples_leaf = 0.004,\n                                       min_samples_split = 0.008,\n                                       n_estimators = 25))])\n    #return rfc_pipeline\n  \t\"\"\"\n    etmodel = ExtraTreesRegressor(bootstrap=False, '''ccp_alpha=0.0, '''criterion='mse',\n                    max_depth=None, max_features='auto', max_leaf_nodes=None,\n                    max_samples=None, min_impurity_decrease=0.0,\n                    #min_impurity_split=None, \n                    min_samples_leaf=1,\n                    min_samples_split=2, min_weight_fraction_leaf=0.0,\n                    n_estimators=100, n_jobs=-1, oob_score=False,\n                    random_state=123, verbose=0, warm_start=False)\n    return etmodel\n\n\n",
  "history_output" : "  File \"/home/chetana/gw-workspace/vimr1lwsdjs/model_creation_et.py\", line 41\n    etmodel = ExtraTreesRegressor(bootstrap=False, '''ccp_alpha=0.0, '''criterion='mse',\n                                                                        ^\nSyntaxError: positional argument follows keyword argument\n",
  "history_begin_time" : 1677793001269,
  "history_end_time" : 1677793004126,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Failed"
},{
  "history_id" : "2ntz59ki52j",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677792975432,
  "history_end_time" : 1677792975432,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "r89ppgysk1n",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677792528369,
  "history_end_time" : 1677792528369,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "zdz52q2yyqg",
  "history_input" : "from sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom base_hole import BaseHole\nfrom sklearn.model_selection import train_test_split\nfrom datetime import datetime\nfrom model_creation_rf import RandomForestHole\nfrom sklearn.ensemble import ExtraTreesRegressor\n\nclass ExtraTreeHole(RandomForestHole):\n\n  def get_model(self):\n    \"\"\"\n    rfc_pipeline = Pipeline(steps = [\n      ('data_scaling', StandardScaler()),\n      ('model', RandomForestRegressor(max_depth = 15,\n                                       min_samples_leaf = 0.004,\n                                       min_samples_split = 0.008,\n                                       n_estimators = 25))])\n    #return rfc_pipeline\n  \t\"\"\"\n    etmodel = ExtraTreesRegressor(bootstrap=False, '''ccp_alpha=0.0, '''criterion='Squared_error',\n                    max_depth=None, max_features='auto', max_leaf_nodes=None,\n                    max_samples=None, min_impurity_decrease=0.0,\n                    #min_impurity_split=None, \n                    min_samples_leaf=1,\n                    min_samples_split=2, min_weight_fraction_leaf=0.0,\n                    n_estimators=100, n_jobs=-1, oob_score=False,\n                    random_state=123, verbose=0, warm_start=False)\n    return etmodel\n\n\n",
  "history_output" : "  File \"/home/chetana/gw-workspace/zdz52q2yyqg/model_creation_et.py\", line 41\n    etmodel = ExtraTreesRegressor(bootstrap=False, '''ccp_alpha=0.0, '''criterion='Squared_error',\n                                                                        ^\nSyntaxError: positional argument follows keyword argument\n",
  "history_begin_time" : 1677788298641,
  "history_end_time" : 1677788300031,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Done"
},{
  "history_id" : "mv9fbtply9r",
  "history_input" : "from sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom base_hole import BaseHole\nfrom sklearn.model_selection import train_test_split\nfrom datetime import datetime\nfrom model_creation_rf import RandomForestHole\nfrom sklearn.ensemble import ExtraTreesRegressor\n\nclass ExtraTreeHole(RandomForestHole):\n\n  def get_model(self):\n    \"\"\"\n    rfc_pipeline = Pipeline(steps = [\n      ('data_scaling', StandardScaler()),\n      ('model', RandomForestRegressor(max_depth = 15,\n                                       min_samples_leaf = 0.004,\n                                       min_samples_split = 0.008,\n                                       n_estimators = 25))])\n    #return rfc_pipeline\n  \t\"\"\"\n    etmodel = ExtraTreesRegressor(bootstrap=False, '''ccp_alpha=0.0, '''criterion='Squared_error',\n                    max_depth=None, max_features='auto', max_leaf_nodes=None,\n                    max_samples=None, min_impurity_decrease=0.0,\n                    #min_impurity_split=None, \n                    min_samples_leaf=1,\n                    min_samples_split=2, min_weight_fraction_leaf=0.0,\n                    n_estimators=100, n_jobs=-1, oob_score=False,\n                    random_state=123, verbose=0, warm_start=False)\n    return etmodel\n\n\n",
  "history_output" : "  File \"/home/chetana/gw-workspace/mv9fbtply9r/model_creation_et.py\", line 41\n    etmodel = ExtraTreesRegressor(bootstrap=False, '''ccp_alpha=0.0, '''criterion='Squared_error',\n                                                                        ^\nSyntaxError: positional argument follows keyword argument\n",
  "history_begin_time" : 1677787299491,
  "history_end_time" : 1677787302314,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Failed"
},{
  "history_id" : "p0jrc0bawq2",
  "history_input" : "from sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom base_hole import BaseHole\nfrom sklearn.model_selection import train_test_split\nfrom datetime import datetime\nfrom model_creation_rf import RandomForestHole\nfrom sklearn.ensemble import ExtraTreesRegressor\n\nclass ExtraTreeHole(RandomForestHole):\n\n  def get_model(self):\n    \"\"\"\n    rfc_pipeline = Pipeline(steps = [\n      ('data_scaling', StandardScaler()),\n      ('model', RandomForestRegressor(max_depth = 15,\n                                       min_samples_leaf = 0.004,\n                                       min_samples_split = 0.008,\n                                       n_estimators = 25))])\n    #return rfc_pipeline\n  \t\"\"\"\n    etmodel = ExtraTreesRegressor(bootstrap=False, '''ccp_alpha=0.0, '''criterion='Squared_error',\n                    max_depth=None, max_features='auto', max_leaf_nodes=None,\n                    max_samples=None, min_impurity_decrease=0.0,\n                    #min_impurity_split=None, \n                    min_samples_leaf=1,\n                    min_samples_split=2, min_weight_fraction_leaf=0.0,\n                    n_estimators=100, n_jobs=-1, oob_score=False,\n                    random_state=123, verbose=0, warm_start=False)\n    return etmodel\n\n\n",
  "history_output" : "  File \"/home/chetana/gw-workspace/p0jrc0bawq2/model_creation_et.py\", line 41\n    etmodel = ExtraTreesRegressor(bootstrap=False, '''ccp_alpha=0.0, '''criterion='Squared_error',\n                                                                        ^\nSyntaxError: positional argument follows keyword argument\n",
  "history_begin_time" : 1677786007165,
  "history_end_time" : 1677786042656,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "44osepq95md",
  "history_input" : "from sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom base_hole import BaseHole\nfrom sklearn.model_selection import train_test_split\nfrom datetime import datetime\nfrom model_creation_rf import RandomForestHole\nfrom sklearn.ensemble import ExtraTreesRegressor\n\nclass ExtraTreeHole(RandomForestHole):\n\n  def get_model(self):\n    \"\"\"\n    rfc_pipeline = Pipeline(steps = [\n      ('data_scaling', StandardScaler()),\n      ('model', RandomForestRegressor(max_depth = 15,\n                                       min_samples_leaf = 0.004,\n                                       min_samples_split = 0.008,\n                                       n_estimators = 25))])\n    #return rfc_pipeline\n  \t\"\"\"\n    etmodel = ExtraTreesRegressor(bootstrap=False, '''ccp_alpha=0.0, '''criterion='mse',\n                    max_depth=None, max_features='auto', max_leaf_nodes=None,\n                    max_samples=None, min_impurity_decrease=0.0,\n                    #min_impurity_split=None, \n                    min_samples_leaf=1,\n                    min_samples_split=2, min_weight_fraction_leaf=0.0,\n                    n_estimators=100, n_jobs=-1, oob_score=False,\n                    random_state=123, verbose=0, warm_start=False)\n    return etmodel\n\n\n",
  "history_output" : "  File \"/home/chetana/gw-workspace/44osepq95md/model_creation_et.py\", line 41\n    etmodel = ExtraTreesRegressor(bootstrap=False, '''ccp_alpha=0.0, '''criterion='mse',\n                                                                        ^\nSyntaxError: positional argument follows keyword argument\n",
  "history_begin_time" : 1677784297826,
  "history_end_time" : 1677784516789,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "fqdvnc3ye4k",
  "history_input" : "from sklearn.ensemble import RandomForestRegressor\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics \nfrom sklearn import tree\nimport joblib\nimport os\nfrom pathlib import Path\nimport json\nimport geopandas as gpd\nimport geojson\nimport os.path\nimport math\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom base_hole import BaseHole\nfrom sklearn.model_selection import train_test_split\nfrom datetime import datetime\nfrom model_creation_rf import RandomForestHole\nfrom sklearn.ensemble import ExtraTreesRegressor\n\nclass ExtraTreeHole(RandomForestHole):\n\n  def get_model(self):\n    \"\"\"\n    rfc_pipeline = Pipeline(steps = [\n      ('data_scaling', StandardScaler()),\n      ('model', RandomForestRegressor(max_depth = 15,\n                                       min_samples_leaf = 0.004,\n                                       min_samples_split = 0.008,\n                                       n_estimators = 25))])\n    #return rfc_pipeline\n  \t\"\"\"\n    etmodel = ExtraTreesRegressor(bootstrap=False, '''ccp_alpha=0.0, '''criterion='mse',\n                    max_depth=None, max_features='auto', max_leaf_nodes=None,\n                    max_samples=None, min_impurity_decrease=0.0,\n                    #min_impurity_split=None, \n                    min_samples_leaf=1,\n                    min_samples_split=2, min_weight_fraction_leaf=0.0,\n                    n_estimators=100, n_jobs=-1, oob_score=False,\n                    random_state=123, verbose=0, warm_start=False)\n    return etmodel\n\n\n",
  "history_output" : "  File \"/home/chetana/gw-workspace/fqdvnc3ye4k/model_creation_et.py\", line 41\n    etmodel = ExtraTreesRegressor(bootstrap=False, '''ccp_alpha=0.0, '''criterion='mse',\n                                                                        ^\nSyntaxError: positional argument follows keyword argument\n",
  "history_begin_time" : 1677784217490,
  "history_end_time" : 1677784272026,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "r1vrkdjzteo",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677782901843,
  "history_end_time" : 1677782901843,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "qpd2obfw4gw",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677781745188,
  "history_end_time" : 1677781745188,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "gkqk23tbnot",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677719046617,
  "history_end_time" : 1677719046617,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "larrhbov708",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677718179135,
  "history_end_time" : 1677718179135,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "30btjnidi77",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677679556280,
  "history_end_time" : 1677679556280,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "azor3e1w5e8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677679507392,
  "history_end_time" : 1677679549087,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "3oupjwx05cr",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677636286907,
  "history_end_time" : 1677636286907,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "z91ec2c4nw3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677636150406,
  "history_end_time" : 1677636150406,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "3t3qp8wo53r",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677636137259,
  "history_end_time" : 1677636142814,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "ytvx91dzhed",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677636063809,
  "history_end_time" : 1677636063809,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "khe8kun5odk",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677635881870,
  "history_end_time" : 1677635881870,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "69lrf1ok03p",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677617762838,
  "history_end_time" : 1677617762838,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "grzfbkbq2kx",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677606170929,
  "history_end_time" : 1677606170929,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "y7ji3ht3gil",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677606114276,
  "history_end_time" : 1677606114276,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "m9lcvcuo3c6",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677582848599,
  "history_end_time" : 1677582848599,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "nv1t10fecju",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677525426794,
  "history_end_time" : 1677525426794,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "x52mvh1badz",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677462325798,
  "history_end_time" : 1677462325798,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "3ovzc0prpk6",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677462312533,
  "history_end_time" : 1677462312533,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "6m42zlfsw02",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677462312139,
  "history_end_time" : 1677462312139,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "4vbwbnhus5l",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677428742782,
  "history_end_time" : 1677428742782,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "phao2vccjib",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677428687392,
  "history_end_time" : 1677428687392,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "2swgbu68bjy",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677426263067,
  "history_end_time" : 1677426263067,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "1jt9eyy62lk",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677379889852,
  "history_end_time" : 1677379889852,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "w9hjq62ze1m",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677379837843,
  "history_end_time" : 1677379837843,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "j3953xnzxq9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677352478071,
  "history_end_time" : 1677352478071,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "66ng73o3gvf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677352389952,
  "history_end_time" : 1677352389952,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "wquyqn9rv4b",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677352335906,
  "history_end_time" : 1677352335906,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "otzk0605ter",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677344120032,
  "history_end_time" : 1677344120032,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "0ygsa2ws0vx",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677282603056,
  "history_end_time" : 1677282603056,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "uizqfnkv0wv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677273712247,
  "history_end_time" : 1677273712247,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "d6xu5pbrytp",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677273698763,
  "history_end_time" : 1677273703950,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "1845po94k4z",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677273673930,
  "history_end_time" : 1677273679536,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "u61o9hml2hk",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677273657819,
  "history_end_time" : 1677273665454,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "j6zdipsj8je",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677273536028,
  "history_end_time" : 1677273536028,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "rb7iamod6ew",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677273519125,
  "history_end_time" : 1677273525488,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "gjmgr9hr3yf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677273371313,
  "history_end_time" : 1677273371313,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "o1pd2uoc6q4",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677273340455,
  "history_end_time" : 1677273345444,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "of20so3kxku",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677273323509,
  "history_end_time" : 1677273332235,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "f7xar6rs2u3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677273146676,
  "history_end_time" : 1677273146676,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "j83ij1ykj68",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677273100255,
  "history_end_time" : 1677273134494,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "skry6ozkbot",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677201275944,
  "history_end_time" : 1677201275944,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "o681jwo8pg0",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677192311086,
  "history_end_time" : 1677192311086,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "5bqw99zh8zu",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677192268383,
  "history_end_time" : 1677192268383,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "8ky10a6tm4u",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677191916754,
  "history_end_time" : 1677191916754,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "zasor8tpcmc",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677184296714,
  "history_end_time" : 1677184296714,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "6pa1byly1qq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677184173571,
  "history_end_time" : 1677184173571,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "yoortox4njv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677113476484,
  "history_end_time" : 1677113476484,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "cyicrcuhhjf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677108238657,
  "history_end_time" : 1677108238657,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "a1h6nbp65ru",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677108212593,
  "history_end_time" : 1677108229742,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "jbmaaqkc9e0",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677107869818,
  "history_end_time" : 1677107869818,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "4v6e2ibngqs",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677107757971,
  "history_end_time" : 1677107757971,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "s94tfipll1r",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677107718312,
  "history_end_time" : 1677107718312,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "m2l3iismjzj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677107637174,
  "history_end_time" : 1677107705677,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "mmhh9pfpvlg",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677107604043,
  "history_end_time" : 1677107608764,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "pquz6rrbmgl",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677107556540,
  "history_end_time" : 1677107562722,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "3htm8c52oe9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677107525024,
  "history_end_time" : 1677107538165,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "1f7ux1xp2mi",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677107501109,
  "history_end_time" : 1677107501109,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "pxucsq8r4am",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677107474177,
  "history_end_time" : 1677107474177,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "f2dkrk2pmu1",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677106516128,
  "history_end_time" : 1677106516128,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "bx7trqxgrro",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677106477079,
  "history_end_time" : 1677106477079,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "wi6e1e44p19",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677106431070,
  "history_end_time" : 1677106431070,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "u2icr9zvao8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677106134930,
  "history_end_time" : 1677106147568,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "wzff5s8zv76",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677106011081,
  "history_end_time" : 1677106011081,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "8olpnegried",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677030843747,
  "history_end_time" : 1677030843747,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "3o445va6bqq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677030771175,
  "history_end_time" : 1677030771175,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "swdqdiafcqk",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677030672669,
  "history_end_time" : 1677030672669,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "306kn13sjle",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677030563929,
  "history_end_time" : 1677030563929,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "ne1j9r3nm0w",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677025528693,
  "history_end_time" : 1677025528693,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "m00zyr7sljq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677025468127,
  "history_end_time" : 1677025468127,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "drg1qh658bg",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677017826432,
  "history_end_time" : 1677017826432,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "310nga444u7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677017218442,
  "history_end_time" : 1677017218442,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "zjyheh6u5mt",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677016681334,
  "history_end_time" : 1677016681334,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "13gbz0wcb5i",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677016143020,
  "history_end_time" : 1677016143020,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "xkm8bd3wag0",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677016063973,
  "history_end_time" : 1677016063973,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "0073hv1382a",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677015787660,
  "history_end_time" : 1677015787660,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "i77b5df6xrc",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677015739971,
  "history_end_time" : 1677015739971,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "ctfu2dm9o17",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677014885004,
  "history_end_time" : 1677014885004,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "uhk2mkj5ju8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677014795678,
  "history_end_time" : 1677014795678,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "h8pgmg9hvho",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677014228165,
  "history_end_time" : 1677014228165,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "gq4qu6p72lj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677013908469,
  "history_end_time" : 1677013908469,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "5gljdptb46g",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677013833089,
  "history_end_time" : 1677013833089,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "qivi4tky3kb",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677011873127,
  "history_end_time" : 1677011873127,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "9zhd7q5q5vb",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677008198619,
  "history_end_time" : 1677008198619,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "kbbakevo9gs",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677008164614,
  "history_end_time" : 1677008164614,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "do4c9tqwtud",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677001999618,
  "history_end_time" : 1677001999618,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "buyji6soaq9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677001732278,
  "history_end_time" : 1677001732278,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "8k8g83zu09v",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677001593936,
  "history_end_time" : 1677001593936,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "fd1arrmx9vp",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677000536834,
  "history_end_time" : 1677000536834,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "qfz8j1sw1c3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1676999722181,
  "history_end_time" : 1676999722181,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "yb51al",
  "indicator" : "Skipped"
},{
  "history_id" : "bes3kx1wi4p",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1676999599222,
  "history_end_time" : 1676999599222,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "j17rfdoh01c",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1676862212462,
  "history_end_time" : 1676862212462,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "nwng5zrdym8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1676329536290,
  "history_end_time" : 1676329536290,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "52fnz9ltr21",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1676329491819,
  "history_end_time" : 1676329491819,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "0osyvj4ndiq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1676063613437,
  "history_end_time" : 1676063613437,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "gwe3690is8p",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1675783782336,
  "history_end_time" : 1675783782336,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "04zyiua3ijy",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1672014982968,
  "history_end_time" : 1672014982968,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "a4s9ojdwemc",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1671944382481,
  "history_end_time" : 1671944382481,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "j2ah2w2eqk3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1670910617306,
  "history_end_time" : 1670910617306,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "le8g78ua173",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1670910501221,
  "history_end_time" : 1670910501221,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "reku5fe9dlo",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1670910268486,
  "history_end_time" : 1670910268486,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "o55rlxsn2vs",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677809171461,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "dk6xytv1cdt",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1678201703981,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "tdt9pbwnsgl",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677791865872,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "9rsjvvfcyut",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677785529433,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "bj5tl30ajfh",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677797113232,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "nxovax1j4w5",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677809840774,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "ouj55ecjegv",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677959722651,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "sz3cnzsa0ua",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677959583156,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "xzezv4jhhkx",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1678206143157,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "d9dmvrxiemj",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1678201687065,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "j0jk3ys184q",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677958849892,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "jj4dj5wmx7m",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677809573438,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "fvwci1tohs2",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677785383334,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "gg4dzw0n47p",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677796528249,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "s3cz1e64o6y",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677809306588,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "x24xk449thi",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677809554695,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "s0xi6r85xh4",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677958291218,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "sn34u2x6zi2",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677958754131,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "lxkdko99o9n",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677958952869,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "ilag9pn5tin",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1678756684831,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},]
