[{
  "history_id" : "p27hd56zfj8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1696863953273,
  "history_end_time" : 1696863953273,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "0dw7ov4zyww",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1696862402949,
  "history_end_time" : 1696862402949,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "fdjhrjcb75k",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1696832263668,
  "history_end_time" : 1696832263668,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "u6q2uonm2nx",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1696831867372,
  "history_end_time" : 1696831867372,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ql3up9h98tf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1696830174366,
  "history_end_time" : 1696830174366,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "lkgt2e4cff8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1696787541910,
  "history_end_time" : 1696787541910,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "0w7lw4lbl6w",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1696786838193,
  "history_end_time" : 1696786838193,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "7f3cjaex5mi",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1696771780903,
  "history_end_time" : 1696771780903,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "hpadiajx429",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1696602943941,
  "history_end_time" : 1696602943941,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "s0mkun67bcn",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1696432484318,
  "history_end_time" : 1696432484318,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "xmjneng49m5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1696432299759,
  "history_end_time" : 1696432482234,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "dhcotamin2v",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695827991090,
  "history_end_time" : 1695827991090,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "3fxsbvguisd",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695827889174,
  "history_end_time" : 1695827964215,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "6ftkrokysl2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695827855642,
  "history_end_time" : 1695827867008,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "pzu795ct0rt",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695696616114,
  "history_end_time" : 1695696616114,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "t9gkh7yam2n",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695694257325,
  "history_end_time" : 1695694257325,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "5u6l2i46scy",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695693585744,
  "history_end_time" : 1695693585744,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "f3n08jxjal5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695693149368,
  "history_end_time" : 1695693149368,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "5404cafv5bk",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695580915844,
  "history_end_time" : 1695580915844,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ymm77100vcj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695576291654,
  "history_end_time" : 1695576291654,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "aq2al6wd71f",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695575931016,
  "history_end_time" : 1695575931016,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "0uult9qlbco",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695535769211,
  "history_end_time" : 1695535769211,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "enpif6ik7mx",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695535478699,
  "history_end_time" : 1695535478699,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "usrah3pmfn8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695535214021,
  "history_end_time" : 1695535214021,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "viv5mnvmowi",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695534943585,
  "history_end_time" : 1695534943585,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "8re3qr8rqte",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695534671825,
  "history_end_time" : 1695534671825,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "izdvzolvkjq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695533024127,
  "history_end_time" : 1695533024127,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "djxoSgs5JGwT",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\nimport rasterio\nimport csv\nfrom rasterio.transform import Affine\nfrom scipy.ndimage import sobel, gaussian_filter\n\nmile_to_meters = 1609.34\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect_for_single(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef save_as_geotiff(data, output_file, src_file):\n    with rasterio.open(src_file) as src_dataset:\n        profile = src_dataset.profile\n        transform = src_dataset.transform\n\n        # Update the data type, count, and set the transform for the new dataset\n        profile.update(dtype=rasterio.float32, count=1, transform=transform)\n\n        # Create the new GeoTIFF file\n        with rasterio.open(output_file, 'w', **profile) as dst_dataset:\n            # Write the data to the new GeoTIFF\n            dst_dataset.write(data, 1)\n  \ndef print_statistics(data):\n    # Calculate multiple statistics in one line\n    # clean data n/a\n    data = data[~np.isnan(data)]\n    print(data.shape)\n    mean, median, min_val, max_val, sum_val, std_dev, variance = [np.mean(data), np.median(data), np.min(data), np.max(data), np.sum(data), np.std(data), np.var(data)]\n\n    # Print the calculated statistics\n    print(\"Mean:\", mean)\n    print(\"Median:\", median)\n    print(\"Minimum:\", min_val)\n    print(\"Maximum:\", max_val)\n    print(\"Sum:\", sum_val)\n    print(\"Standard Deviation:\", std_dev)\n    print(\"Variance:\", variance)\n\ndef calculate_slope_aspect(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n        \n        # convert miles to meters\n        #dem_data = dem_data * mile_to_meters\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Calculate the slope and aspect using numpy\n        dx, dy = np.gradient(dem_data, transform[0], transform[4])\n        #slope = np.arctan(np.sqrt(dx ** 2 + dy ** 2)) * (180.0 / np.pi)\n        # Convert the slope to degrees\n        slope = np.degrees(np.arctan(np.sqrt(dx**2 + dy**2)))\n        #print_statistics(slope.ravel())\n        aspect = np.degrees(np.arctan2(-dy, dx))\n        #print_statistics(aspect.ravel())\n\n        # Adjust aspect values to range from 0 to 360 degrees\n        aspect[aspect < 0] += 360\n        print(f\"slope shape: {slope.shape}\")\n        print(f\"aspect shape: {aspect.shape}\")\n        \n        \n    return slope, aspect\n  \ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n  \ndef calculate_curvature(dem_file, sigma=1):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n        \n        # convert miles to meters\n        dem_data = dem_data*mile_to_meters\n\n        # Calculate the gradient using the Sobel filter\n        dx = sobel(dem_data, axis=1, mode='constant')\n        dy = sobel(dem_data, axis=0, mode='constant')\n\n        # Calculate the second derivatives using the Sobel filter\n        dxx = sobel(dx, axis=1, mode='constant')\n        dyy = sobel(dy, axis=0, mode='constant')\n\n        # Calculate the curvature using the second derivatives\n        curvature = dxx + dyy\n\n        # Smooth the curvature using Gaussian filtering (optional)\n        curvature = gaussian_filter(curvature, sigma)\n\n    return curvature\n  \ndef calculate_gradients(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradients along the North and East directions\n        dy, dx = np.gradient(dem_data, dataset.res[0], dataset.res[1])\n\n        # Calculate the Northness and Eastness\n        northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n        eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\n\n    return northness, eastness\n  \n  \ndef geotiff_to_csv(geotiff_file, csv_file, column_name):\n    # Open the GeoTIFF file\n    with rasterio.open(geotiff_file) as dataset:\n        # Get the pixel values as a 2D array\n        data = dataset.read(1)\n        \n        if column_name == \"Elevation\":\n          # convert miles to meters\n          data = data*mile_to_meters\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Get the width and height of the GeoTIFF\n        height, width = data.shape\n\n        # Open the CSV file for writing\n        with open(csv_file, 'w', newline='') as csvfile:\n            csvwriter = csv.writer(csvfile)\n\n            # Write the CSV header\n            csvwriter.writerow(['Latitude', 'Longitude', 'x', 'y', column_name])\n\n            # Loop through each pixel and extract latitude, longitude, and image value\n            for y in range(height):\n                for x in range(width):\n                    # Get the pixel value\n                    image_value = data[y, x]\n\n                    # Convert pixel coordinates to geographic coordinates\n                    lon, lat = transform * (x, y)\n\n                    # Write the data to the CSV file\n                    csvwriter.writerow([lat, lon, x, y, image_value])\n\n  \ndef read_elevation_data(file_path, result_dem_csv_path, result_dem_feature_csv_path):\n    neighborhood_size=4\n    df = pd.read_csv(file_path)\n    \n    dataset = rasterio.open(geotiff_file)\n    data = dataset.read(1)\n\n    # Get the width and height of the GeoTIFF\n    height, width = data.shape\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n  \n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n\n\ndem_file = \"/home/chetana/gridmet_test_run/dem_file.tif\"\nslope_file = '/home/chetana/gridmet_test_run/slope_file.tif'\naspect_file = '/home/chetana/gridmet_test_run/aspect_file.tif'\ncurvature_file = '/home/chetana/gridmet_test_run/curvature_file.tif'\nnorthness_file = '/home/chetana/gridmet_test_run/northness_file.tif'\neastness_file = '/home/chetana/gridmet_test_run/eastness_file.tif'\n\n\nslope, aspect = calculate_slope_aspect(dem_file)\ncurvature = calculate_curvature(dem_file)\nnorthness, eastness = calculate_gradients(dem_file)\n\n# Save the slope and aspect as new GeoTIFF files\nsave_as_geotiff(slope, slope_file, dem_file)\nsave_as_geotiff(aspect, aspect_file, dem_file)\nsave_as_geotiff(curvature, curvature_file, dem_file)\nsave_as_geotiff(northness, northness_file, dem_file)\nsave_as_geotiff(eastness, eastness_file, dem_file)\n\ngeotiff_to_csv(dem_file, dem_file+\".csv\", \"Elevation\")\ngeotiff_to_csv(slope_file, slope_file+\".csv\", \"Slope\")\ngeotiff_to_csv(aspect_file, aspect_file+\".csv\", \"Aspect\")\ngeotiff_to_csv(curvature_file, curvature_file+\".csv\", \"Curvature\")\ngeotiff_to_csv(northness_file, northness_file+\".csv\", \"Northness\")\ngeotiff_to_csv(eastness_file, eastness_file+\".csv\", \"Eastness\")\n\n# List of file paths for the CSV files\ncsv_files = [dem_file+\".csv\", slope_file+\".csv\", aspect_file+\".csv\", \n             curvature_file+\".csv\", northness_file+\".csv\", eastness_file+\".csv\"]\n\n# Initialize an empty list to store all dataframes\ndfs = []\n\n# Read each CSV file into separate dataframes\nfor file in csv_files:\n    df = pd.read_csv(file, encoding='utf-8')\n    dfs.append(df)\n\n# Merge the dataframes based on the latitude and longitude columns\nmerged_df = dfs[0]  # Start with the first dataframe\nfor i in range(1, len(dfs)):\n    merged_df = pd.merge(merged_df, dfs[i], on=['Latitude', 'Longitude', 'x', 'y'])\n\n# check the statistics of the columns\nfor column in merged_df.columns:\n    merged_df[column] = pd.to_numeric(merged_df[column], errors='coerce')\n    print(merged_df[column].describe())\n    \n# Save the merged dataframe to a new CSV file\nmerged_df.to_csv(result_dem_feature_csv_path, index=False)\nprint(f\"New dem features are updated in {result_dem_feature_csv_path}\")\n\n",
  "history_output" : "/home/chetana/gw-workspace/djxoSgs5JGwT/western_us_dem.py:134: RuntimeWarning: invalid value encountered in divide\n  northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n/home/chetana/gw-workspace/djxoSgs5JGwT/western_us_dem.py:135: RuntimeWarning: invalid value encountered in divide\n  eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\nslope shape: (666, 694)\naspect shape: (666, 694)\ncount    462204.000000\nmean         37.030000\nstd           6.921275\nmin          25.060000\n25%          31.036000\n50%          37.030000\n75%          43.024000\nmax          49.000000\nName: Latitude, dtype: float64\ncount    462204.00000\nmean       -112.52600\nstd           7.21226\nmin        -125.00000\n25%        -118.77200\n50%        -112.52600\n75%        -106.28000\nmax        -100.05200\nName: Longitude, dtype: float64\ncount    462204.000000\nmean        346.500000\nstd         200.340552\nmin           0.000000\n25%         173.000000\n50%         346.500000\n75%         520.000000\nmax         693.000000\nName: x, dtype: float64\ncount    462204.000000\nmean        332.500000\nstd         192.257631\nmin           0.000000\n25%         166.000000\n50%         332.500000\n75%         499.000000\nmax         665.000000\nName: y, dtype: float64\ncount    309830.000000\nmean       2561.017903\nstd         376.542591\nmin        1691.416300\n25%        2286.872000\n50%        2471.946300\n75%        2776.111600\nmax        4115.082000\nName: Elevation, dtype: float64\ncount    308251.000000\nmean         54.006650\nstd          20.681525\nmin           0.000000\n25%          44.149170\n50%          58.931244\n75%          69.586060\nmax          86.687220\nName: Slope, dtype: float64\ncount    308251.000000\nmean        170.498344\nstd         106.428245\nmin           0.000000\n25%          83.157240\n50%         176.729480\n75%         266.423680\nmax         359.906980\nName: Aspect, dtype: float64\ncount    295965.000000\nmean       -186.538634\nstd        3215.498709\nmin      -40479.438000\n25%       -1488.354700\n50%          29.660137\n75%        1457.598300\nmax       18450.988000\nName: Curvature, dtype: float64\ncount    300725.000000\nmean         -0.007756\nstd           0.590930\nmin          -0.785398\n25%          -0.620971\n50%           0.000000\n75%           0.615480\nmax           0.785398\nName: Northness, dtype: float64\ncount    300725.000000\nmean         -0.002146\nstd           0.577707\nmin          -0.785398\n25%          -0.615480\n50%           0.000000\n75%           0.612676\nmax           0.785398\nName: Eastness, dtype: float64\nNew dem features are updated in /home/chetana/gridmet_test_run/dem_all.csv\n",
  "history_begin_time" : 1695532964134,
  "history_end_time" : 1695532978272,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "gEpgBtBjlqRh",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\nimport rasterio\nimport csv\nfrom rasterio.transform import Affine\nfrom scipy.ndimage import sobel, gaussian_filter\n\nmile_to_meters = 1609.34\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect_for_single(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef save_as_geotiff(data, output_file, src_file):\n    with rasterio.open(src_file) as src_dataset:\n        profile = src_dataset.profile\n        transform = src_dataset.transform\n\n        # Update the data type, count, and set the transform for the new dataset\n        profile.update(dtype=rasterio.float32, count=1, transform=transform)\n\n        # Create the new GeoTIFF file\n        with rasterio.open(output_file, 'w', **profile) as dst_dataset:\n            # Write the data to the new GeoTIFF\n            dst_dataset.write(data, 1)\n  \ndef print_statistics(data):\n    # Calculate multiple statistics in one line\n    # clean data n/a\n    data = data[~np.isnan(data)]\n    print(data.shape)\n    mean, median, min_val, max_val, sum_val, std_dev, variance = [np.mean(data), np.median(data), np.min(data), np.max(data), np.sum(data), np.std(data), np.var(data)]\n\n    # Print the calculated statistics\n    print(\"Mean:\", mean)\n    print(\"Median:\", median)\n    print(\"Minimum:\", min_val)\n    print(\"Maximum:\", max_val)\n    print(\"Sum:\", sum_val)\n    print(\"Standard Deviation:\", std_dev)\n    print(\"Variance:\", variance)\n\ndef calculate_slope_aspect(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n        \n        # convert miles to meters\n        #dem_data = dem_data * mile_to_meters\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Calculate the slope and aspect using numpy\n        dx, dy = np.gradient(dem_data, transform[0], transform[4])\n        #slope = np.arctan(np.sqrt(dx ** 2 + dy ** 2)) * (180.0 / np.pi)\n        slope_rad = np.arctan(np.sqrt(dx**2 + dy**2))\n\n        # Convert the slope to degrees\n        slope = np.degrees(slope_rad)\n        #print_statistics(slope.ravel())\n        aspect = np.degrees(np.arctan2(-dy, dx))\n        #print_statistics(aspect.ravel())\n\n        # Adjust aspect values to range from 0 to 360 degrees\n        aspect[aspect < 0] += 360\n        print(f\"slope shape: {slope.shape}\")\n        print(f\"aspect shape: {aspect.shape}\")\n        \n        \n    return slope, aspect\n  \ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n  \ndef calculate_curvature(dem_file, sigma=1):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n        \n        # convert miles to meters\n        dem_data = dem_data*mile_to_meters\n\n        # Calculate the gradient using the Sobel filter\n        dx = sobel(dem_data, axis=1, mode='constant')\n        dy = sobel(dem_data, axis=0, mode='constant')\n\n        # Calculate the second derivatives using the Sobel filter\n        dxx = sobel(dx, axis=1, mode='constant')\n        dyy = sobel(dy, axis=0, mode='constant')\n\n        # Calculate the curvature using the second derivatives\n        curvature = dxx + dyy\n\n        # Smooth the curvature using Gaussian filtering (optional)\n        curvature = gaussian_filter(curvature, sigma)\n\n    return curvature\n  \ndef calculate_gradients(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradients along the North and East directions\n        dy, dx = np.gradient(dem_data, dataset.res[0], dataset.res[1])\n\n        # Calculate the Northness and Eastness\n        northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n        eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\n\n    return northness, eastness\n  \n  \ndef geotiff_to_csv(geotiff_file, csv_file, column_name):\n    # Open the GeoTIFF file\n    with rasterio.open(geotiff_file) as dataset:\n        # Get the pixel values as a 2D array\n        data = dataset.read(1)\n        \n        if column_name == \"Elevation\":\n          # convert miles to meters\n          data = data*mile_to_meters\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Get the width and height of the GeoTIFF\n        height, width = data.shape\n\n        # Open the CSV file for writing\n        with open(csv_file, 'w', newline='') as csvfile:\n            csvwriter = csv.writer(csvfile)\n\n            # Write the CSV header\n            csvwriter.writerow(['Latitude', 'Longitude', 'x', 'y', column_name])\n\n            # Loop through each pixel and extract latitude, longitude, and image value\n            for y in range(height):\n                for x in range(width):\n                    # Get the pixel value\n                    image_value = data[y, x]\n\n                    # Convert pixel coordinates to geographic coordinates\n                    lon, lat = transform * (x, y)\n\n                    # Write the data to the CSV file\n                    csvwriter.writerow([lat, lon, x, y, image_value])\n\n  \ndef read_elevation_data(file_path, result_dem_csv_path, result_dem_feature_csv_path):\n    neighborhood_size=4\n    df = pd.read_csv(file_path)\n    \n    dataset = rasterio.open(geotiff_file)\n    data = dataset.read(1)\n\n    # Get the width and height of the GeoTIFF\n    height, width = data.shape\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n  \n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n\n\ndem_file = \"/home/chetana/gridmet_test_run/dem_file.tif\"\nslope_file = '/home/chetana/gridmet_test_run/slope_file.tif'\naspect_file = '/home/chetana/gridmet_test_run/aspect_file.tif'\ncurvature_file = '/home/chetana/gridmet_test_run/curvature_file.tif'\nnorthness_file = '/home/chetana/gridmet_test_run/northness_file.tif'\neastness_file = '/home/chetana/gridmet_test_run/eastness_file.tif'\n\n\nslope, aspect = calculate_slope_aspect(dem_file)\ncurvature = calculate_curvature(dem_file)\nnorthness, eastness = calculate_gradients(dem_file)\n\n# Save the slope and aspect as new GeoTIFF files\nsave_as_geotiff(slope, slope_file, dem_file)\nsave_as_geotiff(aspect, aspect_file, dem_file)\nsave_as_geotiff(curvature, curvature_file, dem_file)\nsave_as_geotiff(northness, northness_file, dem_file)\nsave_as_geotiff(eastness, eastness_file, dem_file)\n\ngeotiff_to_csv(dem_file, dem_file+\".csv\", \"Elevation\")\ngeotiff_to_csv(slope_file, slope_file+\".csv\", \"Slope\")\ngeotiff_to_csv(aspect_file, aspect_file+\".csv\", \"Aspect\")\ngeotiff_to_csv(curvature_file, curvature_file+\".csv\", \"Curvature\")\ngeotiff_to_csv(northness_file, northness_file+\".csv\", \"Northness\")\ngeotiff_to_csv(eastness_file, eastness_file+\".csv\", \"Eastness\")\n\n# List of file paths for the CSV files\ncsv_files = [dem_file+\".csv\", slope_file+\".csv\", aspect_file+\".csv\", \n             curvature_file+\".csv\", northness_file+\".csv\", eastness_file+\".csv\"]\n\n# Initialize an empty list to store all dataframes\ndfs = []\n\n# Read each CSV file into separate dataframes\nfor file in csv_files:\n    df = pd.read_csv(file, encoding='utf-8')\n    dfs.append(df)\n\n# Merge the dataframes based on the latitude and longitude columns\nmerged_df = dfs[0]  # Start with the first dataframe\nfor i in range(1, len(dfs)):\n    merged_df = pd.merge(merged_df, dfs[i], on=['Latitude', 'Longitude', 'x', 'y'])\n\n# check the statistics of the columns\nfor column in merged_df.columns:\n    merged_df[column] = pd.to_numeric(merged_df[column], errors='coerce')\n    print(merged_df[column].describe())\n    \n# Save the merged dataframe to a new CSV file\nmerged_df.to_csv(result_dem_feature_csv_path, index=False)\nprint(f\"New dem features are updated in {result_dem_feature_csv_path}\")\n\n",
  "history_output" : "/home/chetana/gw-workspace/gEpgBtBjlqRh/western_us_dem.py:136: RuntimeWarning: invalid value encountered in divide\n  northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n/home/chetana/gw-workspace/gEpgBtBjlqRh/western_us_dem.py:137: RuntimeWarning: invalid value encountered in divide\n  eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\nslope shape: (666, 694)\naspect shape: (666, 694)\ncount    462204.000000\nmean         37.030000\nstd           6.921275\nmin          25.060000\n25%          31.036000\n50%          37.030000\n75%          43.024000\nmax          49.000000\nName: Latitude, dtype: float64\ncount    462204.00000\nmean       -112.52600\nstd           7.21226\nmin        -125.00000\n25%        -118.77200\n50%        -112.52600\n75%        -106.28000\nmax        -100.05200\nName: Longitude, dtype: float64\ncount    462204.000000\nmean        346.500000\nstd         200.340552\nmin           0.000000\n25%         173.000000\n50%         346.500000\n75%         520.000000\nmax         693.000000\nName: x, dtype: float64\ncount    462204.000000\nmean        332.500000\nstd         192.257631\nmin           0.000000\n25%         166.000000\n50%         332.500000\n75%         499.000000\nmax         665.000000\nName: y, dtype: float64\ncount    309830.000000\nmean       2561.017903\nstd         376.542591\nmin        1691.416300\n25%        2286.872000\n50%        2471.946300\n75%        2776.111600\nmax        4115.082000\nName: Elevation, dtype: float64\ncount    308251.000000\nmean         54.006650\nstd          20.681525\nmin           0.000000\n25%          44.149170\n50%          58.931244\n75%          69.586060\nmax          86.687220\nName: Slope, dtype: float64\ncount    308251.000000\nmean        170.498344\nstd         106.428245\nmin           0.000000\n25%          83.157240\n50%         176.729480\n75%         266.423680\nmax         359.906980\nName: Aspect, dtype: float64\ncount    295965.000000\nmean       -186.538634\nstd        3215.498709\nmin      -40479.438000\n25%       -1488.354700\n50%          29.660137\n75%        1457.598300\nmax       18450.988000\nName: Curvature, dtype: float64\ncount    300725.000000\nmean         -0.007756\nstd           0.590930\nmin          -0.785398\n25%          -0.620971\n50%           0.000000\n75%           0.615480\nmax           0.785398\nName: Northness, dtype: float64\ncount    300725.000000\nmean         -0.002146\nstd           0.577707\nmin          -0.785398\n25%          -0.615480\n50%           0.000000\n75%           0.612676\nmax           0.785398\nName: Eastness, dtype: float64\nNew dem features are updated in /home/chetana/gridmet_test_run/dem_all.csv\n",
  "history_begin_time" : 1695532887119,
  "history_end_time" : 1695532901425,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "TDn6nZOWlrN5",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\nimport rasterio\nimport csv\nfrom rasterio.transform import Affine\nfrom scipy.ndimage import sobel, gaussian_filter\n\nmile_to_meters = 1609.34\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect_for_single(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef save_as_geotiff(data, output_file, src_file):\n    with rasterio.open(src_file) as src_dataset:\n        profile = src_dataset.profile\n        transform = src_dataset.transform\n\n        # Update the data type, count, and set the transform for the new dataset\n        profile.update(dtype=rasterio.float32, count=1, transform=transform)\n\n        # Create the new GeoTIFF file\n        with rasterio.open(output_file, 'w', **profile) as dst_dataset:\n            # Write the data to the new GeoTIFF\n            dst_dataset.write(data, 1)\n  \ndef print_statistics(data):\n    # Calculate multiple statistics in one line\n    # clean data n/a\n    data = data[~np.isnan(data)]\n    print(data.shape)\n    mean, median, min_val, max_val, sum_val, std_dev, variance = [np.mean(data), np.median(data), np.min(data), np.max(data), np.sum(data), np.std(data), np.var(data)]\n\n    # Print the calculated statistics\n    print(\"Mean:\", mean)\n    print(\"Median:\", median)\n    print(\"Minimum:\", min_val)\n    print(\"Maximum:\", max_val)\n    print(\"Sum:\", sum_val)\n    print(\"Standard Deviation:\", std_dev)\n    print(\"Variance:\", variance)\n\ndef calculate_slope_aspect(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n        \n        # convert miles to meters\n        #dem_data = dem_data * mile_to_meters\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Calculate the slope and aspect using numpy\n        dx, dy = np.gradient(dem_data, transform[0], transform[4])\n        #slope = np.arctan(np.sqrt(dx ** 2 + dy ** 2)) * (180.0 / np.pi)\n        slope_rad = np.arctan(np.sqrt(dx**2 + dy**2))\n\n        # Convert the slope to degrees\n        slope = np.degrees(slope_rad)\n        print(\"Slop: \", print_statistics(slope.ravel()))\n        aspect = np.degrees(np.arctan2(-dy, dx))\n        print(\"Aspect: \", print_statistics(aspect.ravel()))\n\n        # Adjust aspect values to range from 0 to 360 degrees\n        aspect[aspect < 0] += 360\n        print(f\"slope shape: {slope.shape}\")\n        print(f\"aspect shape: {aspect.shape}\")\n        \n        \n    return slope, aspect\n  \ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n  \ndef calculate_curvature(dem_file, sigma=1):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n        \n        # convert miles to meters\n        dem_data = dem_data*mile_to_meters\n\n        # Calculate the gradient using the Sobel filter\n        dx = sobel(dem_data, axis=1, mode='constant')\n        dy = sobel(dem_data, axis=0, mode='constant')\n\n        # Calculate the second derivatives using the Sobel filter\n        dxx = sobel(dx, axis=1, mode='constant')\n        dyy = sobel(dy, axis=0, mode='constant')\n\n        # Calculate the curvature using the second derivatives\n        curvature = dxx + dyy\n\n        # Smooth the curvature using Gaussian filtering (optional)\n        curvature = gaussian_filter(curvature, sigma)\n\n    return curvature\n  \ndef calculate_gradients(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradients along the North and East directions\n        dy, dx = np.gradient(dem_data, dataset.res[0], dataset.res[1])\n\n        # Calculate the Northness and Eastness\n        northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n        eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\n\n    return northness, eastness\n  \n  \ndef geotiff_to_csv(geotiff_file, csv_file, column_name):\n    # Open the GeoTIFF file\n    with rasterio.open(geotiff_file) as dataset:\n        # Get the pixel values as a 2D array\n        data = dataset.read(1)\n        \n        if column_name == \"Elevation\":\n          # convert miles to meters\n          data = data*mile_to_meters\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Get the width and height of the GeoTIFF\n        height, width = data.shape\n\n        # Open the CSV file for writing\n        with open(csv_file, 'w', newline='') as csvfile:\n            csvwriter = csv.writer(csvfile)\n\n            # Write the CSV header\n            csvwriter.writerow(['Latitude', 'Longitude', 'x', 'y', column_name])\n\n            # Loop through each pixel and extract latitude, longitude, and image value\n            for y in range(height):\n                for x in range(width):\n                    # Get the pixel value\n                    image_value = data[y, x]\n\n                    # Convert pixel coordinates to geographic coordinates\n                    lon, lat = transform * (x, y)\n\n                    # Write the data to the CSV file\n                    csvwriter.writerow([lat, lon, x, y, image_value])\n\n  \ndef read_elevation_data(file_path, result_dem_csv_path, result_dem_feature_csv_path):\n    neighborhood_size=4\n    df = pd.read_csv(file_path)\n    \n    dataset = rasterio.open(geotiff_file)\n    data = dataset.read(1)\n\n    # Get the width and height of the GeoTIFF\n    height, width = data.shape\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n  \n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n\n\ndem_file = \"/home/chetana/gridmet_test_run/dem_file.tif\"\nslope_file = '/home/chetana/gridmet_test_run/slope_file.tif'\naspect_file = '/home/chetana/gridmet_test_run/aspect_file.tif'\ncurvature_file = '/home/chetana/gridmet_test_run/curvature_file.tif'\nnorthness_file = '/home/chetana/gridmet_test_run/northness_file.tif'\neastness_file = '/home/chetana/gridmet_test_run/eastness_file.tif'\n\n\nslope, aspect = calculate_slope_aspect(dem_file)\ncurvature = calculate_curvature(dem_file)\nnorthness, eastness = calculate_gradients(dem_file)\n\n# Save the slope and aspect as new GeoTIFF files\nsave_as_geotiff(slope, slope_file, dem_file)\nsave_as_geotiff(aspect, aspect_file, dem_file)\nsave_as_geotiff(curvature, curvature_file, dem_file)\nsave_as_geotiff(northness, northness_file, dem_file)\nsave_as_geotiff(eastness, eastness_file, dem_file)\n\ngeotiff_to_csv(dem_file, dem_file+\".csv\", \"Elevation\")\ngeotiff_to_csv(slope_file, slope_file+\".csv\", \"Slope\")\ngeotiff_to_csv(aspect_file, aspect_file+\".csv\", \"Aspect\")\ngeotiff_to_csv(curvature_file, curvature_file+\".csv\", \"Curvature\")\ngeotiff_to_csv(northness_file, northness_file+\".csv\", \"Northness\")\ngeotiff_to_csv(eastness_file, eastness_file+\".csv\", \"Eastness\")\n\n# List of file paths for the CSV files\ncsv_files = [dem_file+\".csv\", slope_file+\".csv\", aspect_file+\".csv\", \n             curvature_file+\".csv\", northness_file+\".csv\", eastness_file+\".csv\"]\n\n# Initialize an empty list to store all dataframes\ndfs = []\n\n# Read each CSV file into separate dataframes\nfor file in csv_files:\n    df = pd.read_csv(file, encoding='utf-8')\n    dfs.append(df)\n\n# Merge the dataframes based on the latitude and longitude columns\nmerged_df = dfs[0]  # Start with the first dataframe\nfor i in range(1, len(dfs)):\n    merged_df = pd.merge(merged_df, dfs[i], on=['Latitude', 'Longitude', 'x', 'y'])\n\n# check the statistics of the columns\nfor column in merged_df.columns:\n    merged_df[column] = pd.to_numeric(merged_df[column], errors='coerce')\n    print(merged_df[column].describe())\n    \n# Save the merged dataframe to a new CSV file\nmerged_df.to_csv(result_dem_feature_csv_path, index=False)\nprint(f\"New dem features are updated in {result_dem_feature_csv_path}\")\n\n",
  "history_output" : "/home/chetana/gw-workspace/TDn6nZOWlrN5/western_us_dem.py:136: RuntimeWarning: invalid value encountered in divide\n  northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n/home/chetana/gw-workspace/TDn6nZOWlrN5/western_us_dem.py:137: RuntimeWarning: invalid value encountered in divide\n  eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\n(308251,)\nMean: 54.006653\nMedian: 58.931244\nMinimum: 0.0\nMaximum: 86.68722\nSum: 16647605.0\nStandard Deviation: 20.681492\nVariance: 427.7241\nSlop:  None\n(308251,)\nMean: 4.950267\nMedian: 0.0\nMinimum: -179.89488\nMaximum: 180.0\nSum: 1525924.8\nStandard Deviation: 104.200294\nVariance: 10857.701\nAspect:  None\nslope shape: (666, 694)\naspect shape: (666, 694)\ncount    462204.000000\nmean         37.030000\nstd           6.921275\nmin          25.060000\n25%          31.036000\n50%          37.030000\n75%          43.024000\nmax          49.000000\nName: Latitude, dtype: float64\ncount    462204.00000\nmean       -112.52600\nstd           7.21226\nmin        -125.00000\n25%        -118.77200\n50%        -112.52600\n75%        -106.28000\nmax        -100.05200\nName: Longitude, dtype: float64\ncount    462204.000000\nmean        346.500000\nstd         200.340552\nmin           0.000000\n25%         173.000000\n50%         346.500000\n75%         520.000000\nmax         693.000000\nName: x, dtype: float64\ncount    462204.000000\nmean        332.500000\nstd         192.257631\nmin           0.000000\n25%         166.000000\n50%         332.500000\n75%         499.000000\nmax         665.000000\nName: y, dtype: float64\ncount    309830.000000\nmean       2561.017903\nstd         376.542591\nmin        1691.416300\n25%        2286.872000\n50%        2471.946300\n75%        2776.111600\nmax        4115.082000\nName: Elevation, dtype: float64\ncount    308251.000000\nmean         54.006650\nstd          20.681525\nmin           0.000000\n25%          44.149170\n50%          58.931244\n75%          69.586060\nmax          86.687220\nName: Slope, dtype: float64\ncount    308251.000000\nmean        170.498344\nstd         106.428245\nmin           0.000000\n25%          83.157240\n50%         176.729480\n75%         266.423680\nmax         359.906980\nName: Aspect, dtype: float64\ncount    295965.000000\nmean       -186.538634\nstd        3215.498709\nmin      -40479.438000\n25%       -1488.354700\n50%          29.660137\n75%        1457.598300\nmax       18450.988000\nName: Curvature, dtype: float64\ncount    300725.000000\nmean         -0.007756\nstd           0.590930\nmin          -0.785398\n25%          -0.620971\n50%           0.000000\n75%           0.615480\nmax           0.785398\nName: Northness, dtype: float64\ncount    300725.000000\nmean         -0.002146\nstd           0.577707\nmin          -0.785398\n25%          -0.615480\n50%           0.000000\n75%           0.612676\nmax           0.785398\nName: Eastness, dtype: float64\nNew dem features are updated in /home/chetana/gridmet_test_run/dem_all.csv\n",
  "history_begin_time" : 1695532788138,
  "history_end_time" : 1695532802193,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "958hZSPX8iDB",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\nimport rasterio\nimport csv\nfrom rasterio.transform import Affine\nfrom scipy.ndimage import sobel, gaussian_filter\n\nmile_to_meters = 1609.34\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect_for_single(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef save_as_geotiff(data, output_file, src_file):\n    with rasterio.open(src_file) as src_dataset:\n        profile = src_dataset.profile\n        transform = src_dataset.transform\n\n        # Update the data type, count, and set the transform for the new dataset\n        profile.update(dtype=rasterio.float32, count=1, transform=transform)\n\n        # Create the new GeoTIFF file\n        with rasterio.open(output_file, 'w', **profile) as dst_dataset:\n            # Write the data to the new GeoTIFF\n            dst_dataset.write(data, 1)\n  \ndef print_statistics(data):\n    # Calculate multiple statistics in one line\n    # clean data n/a\n    data = data[~np.isnan(data)]\n    print(data.shape)\n    mean, median, min_val, max_val, sum_val, std_dev, variance = [np.mean(data), np.median(data), np.min(data), np.max(data), np.sum(data), np.std(data), np.var(data)]\n\n    # Print the calculated statistics\n    print(\"Mean:\", mean)\n    print(\"Median:\", median)\n    print(\"Minimum:\", min_val)\n    print(\"Maximum:\", max_val)\n    print(\"Sum:\", sum_val)\n    print(\"Standard Deviation:\", std_dev)\n    print(\"Variance:\", variance)\n\ndef calculate_slope_aspect(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n        \n        # convert miles to meters\n        dem_data = dem_data * mile_to_meters\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Calculate the slope and aspect using numpy\n        dx, dy = np.gradient(dem_data, transform[0], transform[4])\n        #slope = np.arctan(np.sqrt(dx ** 2 + dy ** 2)) * (180.0 / np.pi)\n        slope_rad = np.arctan(np.sqrt(dx**2 + dy**2))\n\n        # Convert the slope to degrees\n        slope = np.degrees(slope_rad)\n        print(\"Slop: \", print_statistics(slope.ravel()))\n        aspect = np.degrees(np.arctan2(-dy, dx))\n        print(\"Aspect: \", print_statistics(aspect.ravel()))\n\n        # Adjust aspect values to range from 0 to 360 degrees\n        aspect[aspect < 0] += 360\n        print(f\"slope shape: {slope.shape}\")\n        print(f\"aspect shape: {aspect.shape}\")\n        \n        \n    return slope, aspect\n  \ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n  \ndef calculate_curvature(dem_file, sigma=1):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n        \n        # convert miles to meters\n        dem_data = dem_data*mile_to_meters\n\n        # Calculate the gradient using the Sobel filter\n        dx = sobel(dem_data, axis=1, mode='constant')\n        dy = sobel(dem_data, axis=0, mode='constant')\n\n        # Calculate the second derivatives using the Sobel filter\n        dxx = sobel(dx, axis=1, mode='constant')\n        dyy = sobel(dy, axis=0, mode='constant')\n\n        # Calculate the curvature using the second derivatives\n        curvature = dxx + dyy\n\n        # Smooth the curvature using Gaussian filtering (optional)\n        curvature = gaussian_filter(curvature, sigma)\n\n    return curvature\n  \ndef calculate_gradients(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradients along the North and East directions\n        dy, dx = np.gradient(dem_data, dataset.res[0], dataset.res[1])\n\n        # Calculate the Northness and Eastness\n        northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n        eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\n\n    return northness, eastness\n  \n  \ndef geotiff_to_csv(geotiff_file, csv_file, column_name):\n    # Open the GeoTIFF file\n    with rasterio.open(geotiff_file) as dataset:\n        # Get the pixel values as a 2D array\n        data = dataset.read(1)\n        \n        if column_name == \"Elevation\":\n          # convert miles to meters\n          data = data*mile_to_meters\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Get the width and height of the GeoTIFF\n        height, width = data.shape\n\n        # Open the CSV file for writing\n        with open(csv_file, 'w', newline='') as csvfile:\n            csvwriter = csv.writer(csvfile)\n\n            # Write the CSV header\n            csvwriter.writerow(['Latitude', 'Longitude', 'x', 'y', column_name])\n\n            # Loop through each pixel and extract latitude, longitude, and image value\n            for y in range(height):\n                for x in range(width):\n                    # Get the pixel value\n                    image_value = data[y, x]\n\n                    # Convert pixel coordinates to geographic coordinates\n                    lon, lat = transform * (x, y)\n\n                    # Write the data to the CSV file\n                    csvwriter.writerow([lat, lon, x, y, image_value])\n\n  \ndef read_elevation_data(file_path, result_dem_csv_path, result_dem_feature_csv_path):\n    neighborhood_size=4\n    df = pd.read_csv(file_path)\n    \n    dataset = rasterio.open(geotiff_file)\n    data = dataset.read(1)\n\n    # Get the width and height of the GeoTIFF\n    height, width = data.shape\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n  \n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n\n\ndem_file = \"/home/chetana/gridmet_test_run/dem_file.tif\"\nslope_file = '/home/chetana/gridmet_test_run/slope_file.tif'\naspect_file = '/home/chetana/gridmet_test_run/aspect_file.tif'\ncurvature_file = '/home/chetana/gridmet_test_run/curvature_file.tif'\nnorthness_file = '/home/chetana/gridmet_test_run/northness_file.tif'\neastness_file = '/home/chetana/gridmet_test_run/eastness_file.tif'\n\n\nslope, aspect = calculate_slope_aspect(dem_file)\ncurvature = calculate_curvature(dem_file)\nnorthness, eastness = calculate_gradients(dem_file)\n\n# Save the slope and aspect as new GeoTIFF files\nsave_as_geotiff(slope, slope_file, dem_file)\nsave_as_geotiff(aspect, aspect_file, dem_file)\nsave_as_geotiff(curvature, curvature_file, dem_file)\nsave_as_geotiff(northness, northness_file, dem_file)\nsave_as_geotiff(eastness, eastness_file, dem_file)\n\ngeotiff_to_csv(dem_file, dem_file+\".csv\", \"Elevation\")\ngeotiff_to_csv(slope_file, slope_file+\".csv\", \"Slope\")\ngeotiff_to_csv(aspect_file, aspect_file+\".csv\", \"Aspect\")\ngeotiff_to_csv(curvature_file, curvature_file+\".csv\", \"Curvature\")\ngeotiff_to_csv(northness_file, northness_file+\".csv\", \"Northness\")\ngeotiff_to_csv(eastness_file, eastness_file+\".csv\", \"Eastness\")\n\n# List of file paths for the CSV files\ncsv_files = [dem_file+\".csv\", slope_file+\".csv\", aspect_file+\".csv\", \n             curvature_file+\".csv\", northness_file+\".csv\", eastness_file+\".csv\"]\n\n# Initialize an empty list to store all dataframes\ndfs = []\n\n# Read each CSV file into separate dataframes\nfor file in csv_files:\n    df = pd.read_csv(file, encoding='utf-8')\n    dfs.append(df)\n\n# Merge the dataframes based on the latitude and longitude columns\nmerged_df = dfs[0]  # Start with the first dataframe\nfor i in range(1, len(dfs)):\n    merged_df = pd.merge(merged_df, dfs[i], on=['Latitude', 'Longitude', 'x', 'y'])\n\n# check the statistics of the columns\nfor column in merged_df.columns:\n    merged_df[column] = pd.to_numeric(merged_df[column], errors='coerce')\n    print(merged_df[column].describe())\n    \n# Save the merged dataframe to a new CSV file\nmerged_df.to_csv(result_dem_feature_csv_path, index=False)\nprint(f\"New dem features are updated in {result_dem_feature_csv_path}\")\n\n",
  "history_output" : "/home/chetana/gw-workspace/958hZSPX8iDB/western_us_dem.py:136: RuntimeWarning: invalid value encountered in divide\n  northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n/home/chetana/gw-workspace/958hZSPX8iDB/western_us_dem.py:137: RuntimeWarning: invalid value encountered in divide\n  eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\n(308251,)\nMean: 87.74606\nMedian: 89.97855\nMinimum: 0.0\nMaximum: 89.99793\nSum: 27047812.0\nStandard Deviation: 13.882807\nVariance: 192.73232\nSlop:  None\n(308251,)\nMean: 4.950267\nMedian: 0.0\nMinimum: -179.89487\nMaximum: 180.0\nSum: 1525924.8\nStandard Deviation: 104.200294\nVariance: 10857.701\nAspect:  None\nslope shape: (666, 694)\naspect shape: (666, 694)\ncount    462204.000000\nmean         37.030000\nstd           6.921275\nmin          25.060000\n25%          31.036000\n50%          37.030000\n75%          43.024000\nmax          49.000000\nName: Latitude, dtype: float64\ncount    462204.00000\nmean       -112.52600\nstd           7.21226\nmin        -125.00000\n25%        -118.77200\n50%        -112.52600\n75%        -106.28000\nmax        -100.05200\nName: Longitude, dtype: float64\ncount    462204.000000\nmean        346.500000\nstd         200.340552\nmin           0.000000\n25%         173.000000\n50%         346.500000\n75%         520.000000\nmax         693.000000\nName: x, dtype: float64\ncount    462204.000000\nmean        332.500000\nstd         192.257631\nmin           0.000000\n25%         166.000000\n50%         332.500000\n75%         499.000000\nmax         665.000000\nName: y, dtype: float64\ncount    309830.000000\nmean       2561.017903\nstd         376.542591\nmin        1691.416300\n25%        2286.872000\n50%        2471.946300\n75%        2776.111600\nmax        4115.082000\nName: Elevation, dtype: float64\ncount    308251.000000\nmean         87.746066\nstd          13.882829\nmin           0.000000\n25%          89.963320\n50%          89.978550\n75%          89.986750\nmax          89.997930\nName: Slope, dtype: float64\ncount    308251.000000\nmean        170.498343\nstd         106.428245\nmin           0.000000\n25%          83.157240\n50%         176.729450\n75%         266.423700\nmax         359.907000\nName: Aspect, dtype: float64\ncount    295965.000000\nmean       -186.538634\nstd        3215.498709\nmin      -40479.438000\n25%       -1488.354700\n50%          29.660137\n75%        1457.598300\nmax       18450.988000\nName: Curvature, dtype: float64\ncount    300725.000000\nmean         -0.007756\nstd           0.590930\nmin          -0.785398\n25%          -0.620971\n50%           0.000000\n75%           0.615480\nmax           0.785398\nName: Northness, dtype: float64\ncount    300725.000000\nmean         -0.002146\nstd           0.577707\nmin          -0.785398\n25%          -0.615480\n50%           0.000000\n75%           0.612676\nmax           0.785398\nName: Eastness, dtype: float64\nNew dem features are updated in /home/chetana/gridmet_test_run/dem_all.csv\n",
  "history_begin_time" : 1695532720325,
  "history_end_time" : 1695532733927,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "AklhZMKNNsPF",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\nimport rasterio\nimport csv\nfrom rasterio.transform import Affine\nfrom scipy.ndimage import sobel, gaussian_filter\n\nmile_to_meters = 1609.34\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect_for_single(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef save_as_geotiff(data, output_file, src_file):\n    with rasterio.open(src_file) as src_dataset:\n        profile = src_dataset.profile\n        transform = src_dataset.transform\n\n        # Update the data type, count, and set the transform for the new dataset\n        profile.update(dtype=rasterio.float32, count=1, transform=transform)\n\n        # Create the new GeoTIFF file\n        with rasterio.open(output_file, 'w', **profile) as dst_dataset:\n            # Write the data to the new GeoTIFF\n            dst_dataset.write(data, 1)\n  \ndef print_statistics(data):\n    # Calculate multiple statistics in one line\n    print(data)\n    print(data.shape)\n    mean, median, min_val, max_val, sum_val, std_dev, variance = [np.mean(data), np.median(data), np.min(data), np.max(data), np.sum(data), np.std(data), np.var(data)]\n\n    # Print the calculated statistics\n    print(\"Mean:\", mean)\n    print(\"Median:\", median)\n    print(\"Minimum:\", min_val)\n    print(\"Maximum:\", max_val)\n    print(\"Sum:\", sum_val)\n    print(\"Standard Deviation:\", std_dev)\n    print(\"Variance:\", variance)\n\ndef calculate_slope_aspect(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n        \n        # convert miles to meters\n        dem_data = dem_data * mile_to_meters\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Calculate the slope and aspect using numpy\n        dx, dy = np.gradient(dem_data, transform[0], transform[4])\n        #slope = np.arctan(np.sqrt(dx ** 2 + dy ** 2)) * (180.0 / np.pi)\n        slope_rad = np.arctan(np.sqrt(dx**2 + dy**2))\n\n        # Convert the slope to degrees\n        slope = np.degrees(slope_rad)\n        print(\"Slop: \", print_statistics(slope.ravel()))\n        aspect = np.degrees(np.arctan2(-dy, dx))\n        print(\"Aspect: \", print_statistics(aspect.ravel()))\n\n        # Adjust aspect values to range from 0 to 360 degrees\n        aspect[aspect < 0] += 360\n        print(f\"slope shape: {slope.shape}\")\n        print(f\"aspect shape: {aspect.shape}\")\n        \n        \n    return slope, aspect\n  \ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n  \ndef calculate_curvature(dem_file, sigma=1):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n        \n        # convert miles to meters\n        dem_data = dem_data*mile_to_meters\n\n        # Calculate the gradient using the Sobel filter\n        dx = sobel(dem_data, axis=1, mode='constant')\n        dy = sobel(dem_data, axis=0, mode='constant')\n\n        # Calculate the second derivatives using the Sobel filter\n        dxx = sobel(dx, axis=1, mode='constant')\n        dyy = sobel(dy, axis=0, mode='constant')\n\n        # Calculate the curvature using the second derivatives\n        curvature = dxx + dyy\n\n        # Smooth the curvature using Gaussian filtering (optional)\n        curvature = gaussian_filter(curvature, sigma)\n\n    return curvature\n  \ndef calculate_gradients(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradients along the North and East directions\n        dy, dx = np.gradient(dem_data, dataset.res[0], dataset.res[1])\n\n        # Calculate the Northness and Eastness\n        northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n        eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\n\n    return northness, eastness\n  \n  \ndef geotiff_to_csv(geotiff_file, csv_file, column_name):\n    # Open the GeoTIFF file\n    with rasterio.open(geotiff_file) as dataset:\n        # Get the pixel values as a 2D array\n        data = dataset.read(1)\n        \n        if column_name == \"Elevation\":\n          # convert miles to meters\n          data = data*mile_to_meters\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Get the width and height of the GeoTIFF\n        height, width = data.shape\n\n        # Open the CSV file for writing\n        with open(csv_file, 'w', newline='') as csvfile:\n            csvwriter = csv.writer(csvfile)\n\n            # Write the CSV header\n            csvwriter.writerow(['Latitude', 'Longitude', 'x', 'y', column_name])\n\n            # Loop through each pixel and extract latitude, longitude, and image value\n            for y in range(height):\n                for x in range(width):\n                    # Get the pixel value\n                    image_value = data[y, x]\n\n                    # Convert pixel coordinates to geographic coordinates\n                    lon, lat = transform * (x, y)\n\n                    # Write the data to the CSV file\n                    csvwriter.writerow([lat, lon, x, y, image_value])\n\n  \ndef read_elevation_data(file_path, result_dem_csv_path, result_dem_feature_csv_path):\n    neighborhood_size=4\n    df = pd.read_csv(file_path)\n    \n    dataset = rasterio.open(geotiff_file)\n    data = dataset.read(1)\n\n    # Get the width and height of the GeoTIFF\n    height, width = data.shape\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n  \n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n\n\ndem_file = \"/home/chetana/gridmet_test_run/dem_file.tif\"\nslope_file = '/home/chetana/gridmet_test_run/slope_file.tif'\naspect_file = '/home/chetana/gridmet_test_run/aspect_file.tif'\ncurvature_file = '/home/chetana/gridmet_test_run/curvature_file.tif'\nnorthness_file = '/home/chetana/gridmet_test_run/northness_file.tif'\neastness_file = '/home/chetana/gridmet_test_run/eastness_file.tif'\n\n\nslope, aspect = calculate_slope_aspect(dem_file)\ncurvature = calculate_curvature(dem_file)\nnorthness, eastness = calculate_gradients(dem_file)\n\n# Save the slope and aspect as new GeoTIFF files\nsave_as_geotiff(slope, slope_file, dem_file)\nsave_as_geotiff(aspect, aspect_file, dem_file)\nsave_as_geotiff(curvature, curvature_file, dem_file)\nsave_as_geotiff(northness, northness_file, dem_file)\nsave_as_geotiff(eastness, eastness_file, dem_file)\n\ngeotiff_to_csv(dem_file, dem_file+\".csv\", \"Elevation\")\ngeotiff_to_csv(slope_file, slope_file+\".csv\", \"Slope\")\ngeotiff_to_csv(aspect_file, aspect_file+\".csv\", \"Aspect\")\ngeotiff_to_csv(curvature_file, curvature_file+\".csv\", \"Curvature\")\ngeotiff_to_csv(northness_file, northness_file+\".csv\", \"Northness\")\ngeotiff_to_csv(eastness_file, eastness_file+\".csv\", \"Eastness\")\n\n# List of file paths for the CSV files\ncsv_files = [dem_file+\".csv\", slope_file+\".csv\", aspect_file+\".csv\", \n             curvature_file+\".csv\", northness_file+\".csv\", eastness_file+\".csv\"]\n\n# Initialize an empty list to store all dataframes\ndfs = []\n\n# Read each CSV file into separate dataframes\nfor file in csv_files:\n    df = pd.read_csv(file, encoding='utf-8')\n    dfs.append(df)\n\n# Merge the dataframes based on the latitude and longitude columns\nmerged_df = dfs[0]  # Start with the first dataframe\nfor i in range(1, len(dfs)):\n    merged_df = pd.merge(merged_df, dfs[i], on=['Latitude', 'Longitude', 'x', 'y'])\n\n# check the statistics of the columns\nfor column in merged_df.columns:\n    merged_df[column] = pd.to_numeric(merged_df[column], errors='coerce')\n    print(merged_df[column].describe())\n    \n# Save the merged dataframe to a new CSV file\nmerged_df.to_csv(result_dem_feature_csv_path, index=False)\nprint(f\"New dem features are updated in {result_dem_feature_csv_path}\")\n\n",
  "history_output" : "/home/chetana/gw-workspace/AklhZMKNNsPF/western_us_dem.py:135: RuntimeWarning: invalid value encountered in divide\n  northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n/home/chetana/gw-workspace/AklhZMKNNsPF/western_us_dem.py:136: RuntimeWarning: invalid value encountered in divide\n  eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\n[nan nan nan ... nan nan nan]\n(462204,)\nMean: nan\nMedian: nan\nMinimum: nan\nMaximum: nan\nSum: nan\nStandard Deviation: nan\nVariance: nan\nSlop:  None\n[nan nan nan ... nan nan nan]\n(462204,)\nMean: nan\nMedian: nan\nMinimum: nan\nMaximum: nan\nSum: nan\nStandard Deviation: nan\nVariance: nan\nAspect:  None\nslope shape: (666, 694)\naspect shape: (666, 694)\ncount    462204.000000\nmean         37.030000\nstd           6.921275\nmin          25.060000\n25%          31.036000\n50%          37.030000\n75%          43.024000\nmax          49.000000\nName: Latitude, dtype: float64\ncount    462204.00000\nmean       -112.52600\nstd           7.21226\nmin        -125.00000\n25%        -118.77200\n50%        -112.52600\n75%        -106.28000\nmax        -100.05200\nName: Longitude, dtype: float64\ncount    462204.000000\nmean        346.500000\nstd         200.340552\nmin           0.000000\n25%         173.000000\n50%         346.500000\n75%         520.000000\nmax         693.000000\nName: x, dtype: float64\ncount    462204.000000\nmean        332.500000\nstd         192.257631\nmin           0.000000\n25%         166.000000\n50%         332.500000\n75%         499.000000\nmax         665.000000\nName: y, dtype: float64\ncount    309830.000000\nmean       2561.017903\nstd         376.542591\nmin        1691.416300\n25%        2286.872000\n50%        2471.946300\n75%        2776.111600\nmax        4115.082000\nName: Elevation, dtype: float64\ncount    308251.000000\nmean         87.746066\nstd          13.882829\nmin           0.000000\n25%          89.963320\n50%          89.978550\n75%          89.986750\nmax          89.997930\nName: Slope, dtype: float64\ncount    308251.000000\nmean        170.498343\nstd         106.428245\nmin           0.000000\n25%          83.157240\n50%         176.729450\n75%         266.423700\nmax         359.907000\nName: Aspect, dtype: float64\ncount    295965.000000\nmean       -186.538634\nstd        3215.498709\nmin      -40479.438000\n25%       -1488.354700\n50%          29.660137\n75%        1457.598300\nmax       18450.988000\nName: Curvature, dtype: float64\ncount    300725.000000\nmean         -0.007756\nstd           0.590930\nmin          -0.785398\n25%          -0.620971\n50%           0.000000\n75%           0.615480\nmax           0.785398\nName: Northness, dtype: float64\ncount    300725.000000\nmean         -0.002146\nstd           0.577707\nmin          -0.785398\n25%          -0.615480\n50%           0.000000\n75%           0.612676\nmax           0.785398\nName: Eastness, dtype: float64\nNew dem features are updated in /home/chetana/gridmet_test_run/dem_all.csv\n",
  "history_begin_time" : 1695532559004,
  "history_end_time" : 1695532572955,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "keu50vkM50zg",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\nimport rasterio\nimport csv\nfrom rasterio.transform import Affine\nfrom scipy.ndimage import sobel, gaussian_filter\n\nmile_to_meters = 1609.34\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect_for_single(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef save_as_geotiff(data, output_file, src_file):\n    with rasterio.open(src_file) as src_dataset:\n        profile = src_dataset.profile\n        transform = src_dataset.transform\n\n        # Update the data type, count, and set the transform for the new dataset\n        profile.update(dtype=rasterio.float32, count=1, transform=transform)\n\n        # Create the new GeoTIFF file\n        with rasterio.open(output_file, 'w', **profile) as dst_dataset:\n            # Write the data to the new GeoTIFF\n            dst_dataset.write(data, 1)\n  \ndef print_statistics(data):\n    # Calculate multiple statistics in one line\n    mean, median, min_val, max_val, sum_val, std_dev, variance = [np.mean(data), np.median(data), np.min(data), np.max(data), np.sum(data), np.std(data), np.var(data)]\n\n    # Print the calculated statistics\n    print(\"Mean:\", mean)\n    print(\"Median:\", median)\n    print(\"Minimum:\", min_val)\n    print(\"Maximum:\", max_val)\n    print(\"Sum:\", sum_val)\n    print(\"Standard Deviation:\", std_dev)\n    print(\"Variance:\", variance)\n\ndef calculate_slope_aspect(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n        \n        # convert miles to meters\n        dem_data = dem_data * mile_to_meters\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Calculate the slope and aspect using numpy\n        dx, dy = np.gradient(dem_data, transform[0], transform[4])\n        #slope = np.arctan(np.sqrt(dx ** 2 + dy ** 2)) * (180.0 / np.pi)\n        slope_rad = np.arctan(np.sqrt(dx**2 + dy**2))\n\n        # Convert the slope to degrees\n        slope = np.degrees(slope_rad)\n        print(\"Slop: \", print_statistics(slope.ravel()))\n        aspect = np.degrees(np.arctan2(-dy, dx))\n        print(\"Aspect: \", print_statistics(aspect.ravel()))\n\n        # Adjust aspect values to range from 0 to 360 degrees\n        aspect[aspect < 0] += 360\n        print(f\"slope shape: {slope.shape}\")\n        print(f\"aspect shape: {aspect.shape}\")\n        \n        \n    return slope, aspect\n  \ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n  \ndef calculate_curvature(dem_file, sigma=1):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n        \n        # convert miles to meters\n        dem_data = dem_data*mile_to_meters\n\n        # Calculate the gradient using the Sobel filter\n        dx = sobel(dem_data, axis=1, mode='constant')\n        dy = sobel(dem_data, axis=0, mode='constant')\n\n        # Calculate the second derivatives using the Sobel filter\n        dxx = sobel(dx, axis=1, mode='constant')\n        dyy = sobel(dy, axis=0, mode='constant')\n\n        # Calculate the curvature using the second derivatives\n        curvature = dxx + dyy\n\n        # Smooth the curvature using Gaussian filtering (optional)\n        curvature = gaussian_filter(curvature, sigma)\n\n    return curvature\n  \ndef calculate_gradients(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradients along the North and East directions\n        dy, dx = np.gradient(dem_data, dataset.res[0], dataset.res[1])\n\n        # Calculate the Northness and Eastness\n        northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n        eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\n\n    return northness, eastness\n  \n  \ndef geotiff_to_csv(geotiff_file, csv_file, column_name):\n    # Open the GeoTIFF file\n    with rasterio.open(geotiff_file) as dataset:\n        # Get the pixel values as a 2D array\n        data = dataset.read(1)\n        \n        if column_name == \"Elevation\":\n          # convert miles to meters\n          data = data*mile_to_meters\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Get the width and height of the GeoTIFF\n        height, width = data.shape\n\n        # Open the CSV file for writing\n        with open(csv_file, 'w', newline='') as csvfile:\n            csvwriter = csv.writer(csvfile)\n\n            # Write the CSV header\n            csvwriter.writerow(['Latitude', 'Longitude', 'x', 'y', column_name])\n\n            # Loop through each pixel and extract latitude, longitude, and image value\n            for y in range(height):\n                for x in range(width):\n                    # Get the pixel value\n                    image_value = data[y, x]\n\n                    # Convert pixel coordinates to geographic coordinates\n                    lon, lat = transform * (x, y)\n\n                    # Write the data to the CSV file\n                    csvwriter.writerow([lat, lon, x, y, image_value])\n\n  \ndef read_elevation_data(file_path, result_dem_csv_path, result_dem_feature_csv_path):\n    neighborhood_size=4\n    df = pd.read_csv(file_path)\n    \n    dataset = rasterio.open(geotiff_file)\n    data = dataset.read(1)\n\n    # Get the width and height of the GeoTIFF\n    height, width = data.shape\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n  \n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n\n\ndem_file = \"/home/chetana/gridmet_test_run/dem_file.tif\"\nslope_file = '/home/chetana/gridmet_test_run/slope_file.tif'\naspect_file = '/home/chetana/gridmet_test_run/aspect_file.tif'\ncurvature_file = '/home/chetana/gridmet_test_run/curvature_file.tif'\nnorthness_file = '/home/chetana/gridmet_test_run/northness_file.tif'\neastness_file = '/home/chetana/gridmet_test_run/eastness_file.tif'\n\n\nslope, aspect = calculate_slope_aspect(dem_file)\ncurvature = calculate_curvature(dem_file)\nnorthness, eastness = calculate_gradients(dem_file)\n\n# Save the slope and aspect as new GeoTIFF files\nsave_as_geotiff(slope, slope_file, dem_file)\nsave_as_geotiff(aspect, aspect_file, dem_file)\nsave_as_geotiff(curvature, curvature_file, dem_file)\nsave_as_geotiff(northness, northness_file, dem_file)\nsave_as_geotiff(eastness, eastness_file, dem_file)\n\ngeotiff_to_csv(dem_file, dem_file+\".csv\", \"Elevation\")\ngeotiff_to_csv(slope_file, slope_file+\".csv\", \"Slope\")\ngeotiff_to_csv(aspect_file, aspect_file+\".csv\", \"Aspect\")\ngeotiff_to_csv(curvature_file, curvature_file+\".csv\", \"Curvature\")\ngeotiff_to_csv(northness_file, northness_file+\".csv\", \"Northness\")\ngeotiff_to_csv(eastness_file, eastness_file+\".csv\", \"Eastness\")\n\n# List of file paths for the CSV files\ncsv_files = [dem_file+\".csv\", slope_file+\".csv\", aspect_file+\".csv\", \n             curvature_file+\".csv\", northness_file+\".csv\", eastness_file+\".csv\"]\n\n# Initialize an empty list to store all dataframes\ndfs = []\n\n# Read each CSV file into separate dataframes\nfor file in csv_files:\n    df = pd.read_csv(file, encoding='utf-8')\n    dfs.append(df)\n\n# Merge the dataframes based on the latitude and longitude columns\nmerged_df = dfs[0]  # Start with the first dataframe\nfor i in range(1, len(dfs)):\n    merged_df = pd.merge(merged_df, dfs[i], on=['Latitude', 'Longitude', 'x', 'y'])\n\n# check the statistics of the columns\nfor column in merged_df.columns:\n    merged_df[column] = pd.to_numeric(merged_df[column], errors='coerce')\n    print(merged_df[column].describe())\n    \n# Save the merged dataframe to a new CSV file\nmerged_df.to_csv(result_dem_feature_csv_path, index=False)\nprint(f\"New dem features are updated in {result_dem_feature_csv_path}\")\n\n",
  "history_output" : "/home/chetana/gw-workspace/keu50vkM50zg/western_us_dem.py:133: RuntimeWarning: invalid value encountered in divide\n  northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n/home/chetana/gw-workspace/keu50vkM50zg/western_us_dem.py:134: RuntimeWarning: invalid value encountered in divide\n  eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\nMean: nan\nMedian: nan\nMinimum: nan\nMaximum: nan\nSum: nan\nStandard Deviation: nan\nVariance: nan\nSlop:  None\nMean: nan\nMedian: nan\nMinimum: nan\nMaximum: nan\nSum: nan\nStandard Deviation: nan\nVariance: nan\nAspect:  None\nslope shape: (666, 694)\naspect shape: (666, 694)\ncount    462204.000000\nmean         37.030000\nstd           6.921275\nmin          25.060000\n25%          31.036000\n50%          37.030000\n75%          43.024000\nmax          49.000000\nName: Latitude, dtype: float64\ncount    462204.00000\nmean       -112.52600\nstd           7.21226\nmin        -125.00000\n25%        -118.77200\n50%        -112.52600\n75%        -106.28000\nmax        -100.05200\nName: Longitude, dtype: float64\ncount    462204.000000\nmean        346.500000\nstd         200.340552\nmin           0.000000\n25%         173.000000\n50%         346.500000\n75%         520.000000\nmax         693.000000\nName: x, dtype: float64\ncount    462204.000000\nmean        332.500000\nstd         192.257631\nmin           0.000000\n25%         166.000000\n50%         332.500000\n75%         499.000000\nmax         665.000000\nName: y, dtype: float64\ncount    309830.000000\nmean       2561.017903\nstd         376.542591\nmin        1691.416300\n25%        2286.872000\n50%        2471.946300\n75%        2776.111600\nmax        4115.082000\nName: Elevation, dtype: float64\ncount    308251.000000\nmean         87.746066\nstd          13.882829\nmin           0.000000\n25%          89.963320\n50%          89.978550\n75%          89.986750\nmax          89.997930\nName: Slope, dtype: float64\ncount    308251.000000\nmean        170.498343\nstd         106.428245\nmin           0.000000\n25%          83.157240\n50%         176.729450\n75%         266.423700\nmax         359.907000\nName: Aspect, dtype: float64\ncount    295965.000000\nmean       -186.538634\nstd        3215.498709\nmin      -40479.438000\n25%       -1488.354700\n50%          29.660137\n75%        1457.598300\nmax       18450.988000\nName: Curvature, dtype: float64\ncount    300725.000000\nmean         -0.007756\nstd           0.590930\nmin          -0.785398\n25%          -0.620971\n50%           0.000000\n75%           0.615480\nmax           0.785398\nName: Northness, dtype: float64\ncount    300725.000000\nmean         -0.002146\nstd           0.577707\nmin          -0.785398\n25%          -0.615480\n50%           0.000000\n75%           0.612676\nmax           0.785398\nName: Eastness, dtype: float64\nNew dem features are updated in /home/chetana/gridmet_test_run/dem_all.csv\n",
  "history_begin_time" : 1695532480002,
  "history_end_time" : 1695532493964,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "chIMrNOT9TGh",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\nimport rasterio\nimport csv\nfrom rasterio.transform import Affine\nfrom scipy.ndimage import sobel, gaussian_filter\n\nmile_to_meters = 1609.34\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect_for_single(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef save_as_geotiff(data, output_file, src_file):\n    with rasterio.open(src_file) as src_dataset:\n        profile = src_dataset.profile\n        transform = src_dataset.transform\n\n        # Update the data type, count, and set the transform for the new dataset\n        profile.update(dtype=rasterio.float32, count=1, transform=transform)\n\n        # Create the new GeoTIFF file\n        with rasterio.open(output_file, 'w', **profile) as dst_dataset:\n            # Write the data to the new GeoTIFF\n            dst_dataset.write(data, 1)\n  \ndef print_statistics(data):\n    # Calculate multiple statistics in one line\n    mean, median, min_val, max_val, sum_val, std_dev, variance = [np.mean(data), np.median(data), np.min(data), np.max(data), np.sum(data), np.std(data), np.var(data)]\n\n    # Print the calculated statistics\n    print(\"Mean:\", mean)\n    print(\"Median:\", median)\n    print(\"Minimum:\", min_val)\n    print(\"Maximum:\", max_val)\n    print(\"Sum:\", sum_val)\n    print(\"Standard Deviation:\", std_dev)\n    print(\"Variance:\", variance)\n\ndef calculate_slope_aspect(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n        \n        # convert miles to meters\n        dem_data = dem_data * mile_to_meters\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Calculate the slope and aspect using numpy\n        dx, dy = np.gradient(dem_data, transform[0], transform[4])\n        #slope = np.arctan(np.sqrt(dx ** 2 + dy ** 2)) * (180.0 / np.pi)\n        slope_rad = np.arctan(np.sqrt(dx**2 + dy**2))\n\n        # Convert the slope to degrees\n        slope = np.degrees(slope_rad)\n        print(\"Slop: \", print_statistics(slope))\n        aspect = np.degrees(np.arctan2(-dy, dx))\n        print(\"Aspect: \", print_statistics(aspect))\n\n        # Adjust aspect values to range from 0 to 360 degrees\n        aspect[aspect < 0] += 360\n        print(f\"slope shape: {slope.shape}\")\n        print(f\"aspect shape: {aspect.shape}\")\n        \n        \n    return slope, aspect\n  \ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n  \ndef calculate_curvature(dem_file, sigma=1):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n        \n        # convert miles to meters\n        dem_data = dem_data*mile_to_meters\n\n        # Calculate the gradient using the Sobel filter\n        dx = sobel(dem_data, axis=1, mode='constant')\n        dy = sobel(dem_data, axis=0, mode='constant')\n\n        # Calculate the second derivatives using the Sobel filter\n        dxx = sobel(dx, axis=1, mode='constant')\n        dyy = sobel(dy, axis=0, mode='constant')\n\n        # Calculate the curvature using the second derivatives\n        curvature = dxx + dyy\n\n        # Smooth the curvature using Gaussian filtering (optional)\n        curvature = gaussian_filter(curvature, sigma)\n\n    return curvature\n  \ndef calculate_gradients(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradients along the North and East directions\n        dy, dx = np.gradient(dem_data, dataset.res[0], dataset.res[1])\n\n        # Calculate the Northness and Eastness\n        northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n        eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\n\n    return northness, eastness\n  \n  \ndef geotiff_to_csv(geotiff_file, csv_file, column_name):\n    # Open the GeoTIFF file\n    with rasterio.open(geotiff_file) as dataset:\n        # Get the pixel values as a 2D array\n        data = dataset.read(1)\n        \n        if column_name == \"Elevation\":\n          # convert miles to meters\n          data = data*mile_to_meters\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Get the width and height of the GeoTIFF\n        height, width = data.shape\n\n        # Open the CSV file for writing\n        with open(csv_file, 'w', newline='') as csvfile:\n            csvwriter = csv.writer(csvfile)\n\n            # Write the CSV header\n            csvwriter.writerow(['Latitude', 'Longitude', 'x', 'y', column_name])\n\n            # Loop through each pixel and extract latitude, longitude, and image value\n            for y in range(height):\n                for x in range(width):\n                    # Get the pixel value\n                    image_value = data[y, x]\n\n                    # Convert pixel coordinates to geographic coordinates\n                    lon, lat = transform * (x, y)\n\n                    # Write the data to the CSV file\n                    csvwriter.writerow([lat, lon, x, y, image_value])\n\n  \ndef read_elevation_data(file_path, result_dem_csv_path, result_dem_feature_csv_path):\n    neighborhood_size=4\n    df = pd.read_csv(file_path)\n    \n    dataset = rasterio.open(geotiff_file)\n    data = dataset.read(1)\n\n    # Get the width and height of the GeoTIFF\n    height, width = data.shape\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n  \n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n\n\ndem_file = \"/home/chetana/gridmet_test_run/dem_file.tif\"\nslope_file = '/home/chetana/gridmet_test_run/slope_file.tif'\naspect_file = '/home/chetana/gridmet_test_run/aspect_file.tif'\ncurvature_file = '/home/chetana/gridmet_test_run/curvature_file.tif'\nnorthness_file = '/home/chetana/gridmet_test_run/northness_file.tif'\neastness_file = '/home/chetana/gridmet_test_run/eastness_file.tif'\n\n\nslope, aspect = calculate_slope_aspect(dem_file)\ncurvature = calculate_curvature(dem_file)\nnorthness, eastness = calculate_gradients(dem_file)\n\n# Save the slope and aspect as new GeoTIFF files\nsave_as_geotiff(slope, slope_file, dem_file)\nsave_as_geotiff(aspect, aspect_file, dem_file)\nsave_as_geotiff(curvature, curvature_file, dem_file)\nsave_as_geotiff(northness, northness_file, dem_file)\nsave_as_geotiff(eastness, eastness_file, dem_file)\n\ngeotiff_to_csv(dem_file, dem_file+\".csv\", \"Elevation\")\ngeotiff_to_csv(slope_file, slope_file+\".csv\", \"Slope\")\ngeotiff_to_csv(aspect_file, aspect_file+\".csv\", \"Aspect\")\ngeotiff_to_csv(curvature_file, curvature_file+\".csv\", \"Curvature\")\ngeotiff_to_csv(northness_file, northness_file+\".csv\", \"Northness\")\ngeotiff_to_csv(eastness_file, eastness_file+\".csv\", \"Eastness\")\n\n# List of file paths for the CSV files\ncsv_files = [dem_file+\".csv\", slope_file+\".csv\", aspect_file+\".csv\", \n             curvature_file+\".csv\", northness_file+\".csv\", eastness_file+\".csv\"]\n\n# Initialize an empty list to store all dataframes\ndfs = []\n\n# Read each CSV file into separate dataframes\nfor file in csv_files:\n    df = pd.read_csv(file, encoding='utf-8')\n    dfs.append(df)\n\n# Merge the dataframes based on the latitude and longitude columns\nmerged_df = dfs[0]  # Start with the first dataframe\nfor i in range(1, len(dfs)):\n    merged_df = pd.merge(merged_df, dfs[i], on=['Latitude', 'Longitude', 'x', 'y'])\n\n# check the statistics of the columns\nfor column in merged_df.columns:\n    merged_df[column] = pd.to_numeric(merged_df[column], errors='coerce')\n    print(merged_df[column].describe())\n    \n# Save the merged dataframe to a new CSV file\nmerged_df.to_csv(result_dem_feature_csv_path, index=False)\nprint(f\"New dem features are updated in {result_dem_feature_csv_path}\")\n\n",
  "history_output" : "/home/chetana/gw-workspace/chIMrNOT9TGh/western_us_dem.py:133: RuntimeWarning: invalid value encountered in divide\n  northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n/home/chetana/gw-workspace/chIMrNOT9TGh/western_us_dem.py:134: RuntimeWarning: invalid value encountered in divide\n  eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\nMean: nan\nMedian: nan\nMinimum: nan\nMaximum: nan\nSum: nan\nStandard Deviation: nan\nVariance: nan\nSlop:  None\nMean: nan\nMedian: nan\nMinimum: nan\nMaximum: nan\nSum: nan\nStandard Deviation: nan\nVariance: nan\nAspect:  None\nslope shape: (666, 694)\naspect shape: (666, 694)\ncount    462204.000000\nmean         37.030000\nstd           6.921275\nmin          25.060000\n25%          31.036000\n50%          37.030000\n75%          43.024000\nmax          49.000000\nName: Latitude, dtype: float64\ncount    462204.00000\nmean       -112.52600\nstd           7.21226\nmin        -125.00000\n25%        -118.77200\n50%        -112.52600\n75%        -106.28000\nmax        -100.05200\nName: Longitude, dtype: float64\ncount    462204.000000\nmean        346.500000\nstd         200.340552\nmin           0.000000\n25%         173.000000\n50%         346.500000\n75%         520.000000\nmax         693.000000\nName: x, dtype: float64\ncount    462204.000000\nmean        332.500000\nstd         192.257631\nmin           0.000000\n25%         166.000000\n50%         332.500000\n75%         499.000000\nmax         665.000000\nName: y, dtype: float64\ncount    309830.000000\nmean       2561.017903\nstd         376.542591\nmin        1691.416300\n25%        2286.872000\n50%        2471.946300\n75%        2776.111600\nmax        4115.082000\nName: Elevation, dtype: float64\ncount    308251.000000\nmean         87.746066\nstd          13.882829\nmin           0.000000\n25%          89.963320\n50%          89.978550\n75%          89.986750\nmax          89.997930\nName: Slope, dtype: float64\ncount    308251.000000\nmean        170.498343\nstd         106.428245\nmin           0.000000\n25%          83.157240\n50%         176.729450\n75%         266.423700\nmax         359.907000\nName: Aspect, dtype: float64\ncount    295965.000000\nmean       -186.538634\nstd        3215.498709\nmin      -40479.438000\n25%       -1488.354700\n50%          29.660137\n75%        1457.598300\nmax       18450.988000\nName: Curvature, dtype: float64\ncount    300725.000000\nmean         -0.007756\nstd           0.590930\nmin          -0.785398\n25%          -0.620971\n50%           0.000000\n75%           0.615480\nmax           0.785398\nName: Northness, dtype: float64\ncount    300725.000000\nmean         -0.002146\nstd           0.577707\nmin          -0.785398\n25%          -0.615480\n50%           0.000000\n75%           0.612676\nmax           0.785398\nName: Eastness, dtype: float64\nNew dem features are updated in /home/chetana/gridmet_test_run/dem_all.csv\n",
  "history_begin_time" : 1695532209664,
  "history_end_time" : 1695532226412,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "euc1cm2bdy4",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695529187863,
  "history_end_time" : 1695529187863,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "fws306dt273",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695528505186,
  "history_end_time" : 1695528505186,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "15yl89ebkhp",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695515862427,
  "history_end_time" : 1695515862427,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "d2QcSiU4M4V5",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\nimport rasterio\nimport csv\nfrom rasterio.transform import Affine\nfrom scipy.ndimage import sobel, gaussian_filter\n\nmile_to_meters = 1609.34\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect_for_single(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef save_as_geotiff(data, output_file, src_file):\n    with rasterio.open(src_file) as src_dataset:\n        profile = src_dataset.profile\n        transform = src_dataset.transform\n\n        # Update the data type, count, and set the transform for the new dataset\n        profile.update(dtype=rasterio.float32, count=1, transform=transform)\n\n        # Create the new GeoTIFF file\n        with rasterio.open(output_file, 'w', **profile) as dst_dataset:\n            # Write the data to the new GeoTIFF\n            dst_dataset.write(data, 1)\n  \n\ndef calculate_slope_aspect(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n        \n        # convert miles to meters\n        dem_data = dem_data * mile_to_meters\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Calculate the slope and aspect using numpy\n        dx, dy = np.gradient(dem_data, transform[0], transform[4])\n        slope = np.arctan(np.sqrt(dx ** 2 + dy ** 2)) * (180.0 / np.pi)\n        aspect = np.arctan2(-dy, dx) * (180.0 / np.pi)\n\n        # Adjust aspect values to range from 0 to 360 degrees\n        aspect[aspect < 0] += 360\n        print(f\"slope shape: {slope.shape}\")\n        print(f\"aspect shape: {aspect.shape}\")\n        \n        \n    return slope, aspect\n  \ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n  \ndef calculate_curvature(dem_file, sigma=1):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n        \n        # convert miles to meters\n        dem_data = dem_data*mile_to_meters\n\n        # Calculate the gradient using the Sobel filter\n        dx = sobel(dem_data, axis=1, mode='constant')\n        dy = sobel(dem_data, axis=0, mode='constant')\n\n        # Calculate the second derivatives using the Sobel filter\n        dxx = sobel(dx, axis=1, mode='constant')\n        dyy = sobel(dy, axis=0, mode='constant')\n\n        # Calculate the curvature using the second derivatives\n        curvature = dxx + dyy\n\n        # Smooth the curvature using Gaussian filtering (optional)\n        curvature = gaussian_filter(curvature, sigma)\n\n    return curvature\n  \ndef calculate_gradients(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradients along the North and East directions\n        dy, dx = np.gradient(dem_data, dataset.res[0], dataset.res[1])\n\n        # Calculate the Northness and Eastness\n        northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n        eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\n\n    return northness, eastness\n  \n  \ndef geotiff_to_csv(geotiff_file, csv_file, column_name):\n    # Open the GeoTIFF file\n    with rasterio.open(geotiff_file) as dataset:\n        # Get the pixel values as a 2D array\n        data = dataset.read(1)\n        \n        if column_name == \"Elevation\":\n          # convert miles to meters\n          data = data*mile_to_meters\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Get the width and height of the GeoTIFF\n        height, width = data.shape\n\n        # Open the CSV file for writing\n        with open(csv_file, 'w', newline='') as csvfile:\n            csvwriter = csv.writer(csvfile)\n\n            # Write the CSV header\n            csvwriter.writerow(['Latitude', 'Longitude', 'x', 'y', column_name])\n\n            # Loop through each pixel and extract latitude, longitude, and image value\n            for y in range(height):\n                for x in range(width):\n                    # Get the pixel value\n                    image_value = data[y, x]\n\n                    # Convert pixel coordinates to geographic coordinates\n                    lon, lat = transform * (x, y)\n\n                    # Write the data to the CSV file\n                    csvwriter.writerow([lat, lon, x, y, image_value])\n\n  \ndef read_elevation_data(file_path, result_dem_csv_path, result_dem_feature_csv_path):\n    neighborhood_size=4\n    df = pd.read_csv(file_path)\n    \n    dataset = rasterio.open(geotiff_file)\n    data = dataset.read(1)\n\n    # Get the width and height of the GeoTIFF\n    height, width = data.shape\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n  \n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n\n\ndem_file = \"/home/chetana/gridmet_test_run/dem_file.tif\"\nslope_file = '/home/chetana/gridmet_test_run/slope_file.tif'\naspect_file = '/home/chetana/gridmet_test_run/aspect_file.tif'\ncurvature_file = '/home/chetana/gridmet_test_run/curvature_file.tif'\nnorthness_file = '/home/chetana/gridmet_test_run/northness_file.tif'\neastness_file = '/home/chetana/gridmet_test_run/eastness_file.tif'\n\n\nslope, aspect = calculate_slope_aspect(dem_file)\ncurvature = calculate_curvature(dem_file)\nnorthness, eastness = calculate_gradients(dem_file)\n\n# Save the slope and aspect as new GeoTIFF files\nsave_as_geotiff(slope, slope_file, dem_file)\nsave_as_geotiff(aspect, aspect_file, dem_file)\nsave_as_geotiff(curvature, curvature_file, dem_file)\nsave_as_geotiff(northness, northness_file, dem_file)\nsave_as_geotiff(eastness, eastness_file, dem_file)\n\ngeotiff_to_csv(dem_file, dem_file+\".csv\", \"Elevation\")\ngeotiff_to_csv(slope_file, slope_file+\".csv\", \"Slope\")\ngeotiff_to_csv(aspect_file, aspect_file+\".csv\", \"Aspect\")\ngeotiff_to_csv(curvature_file, curvature_file+\".csv\", \"Curvature\")\ngeotiff_to_csv(northness_file, northness_file+\".csv\", \"Northness\")\ngeotiff_to_csv(eastness_file, eastness_file+\".csv\", \"Eastness\")\n\n# List of file paths for the CSV files\ncsv_files = [dem_file+\".csv\", slope_file+\".csv\", aspect_file+\".csv\", \n             curvature_file+\".csv\", northness_file+\".csv\", eastness_file+\".csv\"]\n\n# Initialize an empty list to store all dataframes\ndfs = []\n\n# Read each CSV file into separate dataframes\nfor file in csv_files:\n    df = pd.read_csv(file, encoding='utf-8')\n    dfs.append(df)\n\n# Merge the dataframes based on the latitude and longitude columns\nmerged_df = dfs[0]  # Start with the first dataframe\nfor i in range(1, len(dfs)):\n    merged_df = pd.merge(merged_df, dfs[i], on=['Latitude', 'Longitude', 'x', 'y'])\n\n# check the statistics of the columns\nfor column in merged_df.columns:\n    merged_df[column] = pd.to_numeric(merged_df[column], errors='coerce')\n    print(merged_df[column].describe())\n    \n# Save the merged dataframe to a new CSV file\nmerged_df.to_csv(result_dem_feature_csv_path, index=False)\nprint(f\"New dem features are updated in {result_dem_feature_csv_path}\")\n\n",
  "history_output" : "/home/chetana/gw-workspace/d2QcSiU4M4V5/western_us_dem.py:115: RuntimeWarning: invalid value encountered in divide\n  northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n/home/chetana/gw-workspace/d2QcSiU4M4V5/western_us_dem.py:116: RuntimeWarning: invalid value encountered in divide\n  eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\nslope shape: (666, 694)\naspect shape: (666, 694)\ncount    462204.000000\nmean         37.030000\nstd           6.921275\nmin          25.060000\n25%          31.036000\n50%          37.030000\n75%          43.024000\nmax          49.000000\nName: Latitude, dtype: float64\ncount    462204.00000\nmean       -112.52600\nstd           7.21226\nmin        -125.00000\n25%        -118.77200\n50%        -112.52600\n75%        -106.28000\nmax        -100.05200\nName: Longitude, dtype: float64\ncount    462204.000000\nmean        346.500000\nstd         200.340552\nmin           0.000000\n25%         173.000000\n50%         346.500000\n75%         520.000000\nmax         693.000000\nName: x, dtype: float64\ncount    462204.000000\nmean        332.500000\nstd         192.257631\nmin           0.000000\n25%         166.000000\n50%         332.500000\n75%         499.000000\nmax         665.000000\nName: y, dtype: float64\ncount    309830.000000\nmean       2561.017903\nstd         376.542591\nmin        1691.416300\n25%        2286.872000\n50%        2471.946300\n75%        2776.111600\nmax        4115.082000\nName: Elevation, dtype: float64\ncount    308251.000000\nmean         87.746072\nstd          13.882830\nmin           0.000000\n25%          89.963326\n50%          89.978550\n75%          89.986755\nmax          89.997940\nName: Slope, dtype: float64\ncount    308251.000000\nmean        170.498343\nstd         106.428242\nmin           0.000000\n25%          83.157250\n50%         176.729450\n75%         266.423700\nmax         359.907000\nName: Aspect, dtype: float64\ncount    295965.000000\nmean       -186.538634\nstd        3215.498709\nmin      -40479.438000\n25%       -1488.354700\n50%          29.660137\n75%        1457.598300\nmax       18450.988000\nName: Curvature, dtype: float64\ncount    300725.000000\nmean         -0.007756\nstd           0.590930\nmin          -0.785398\n25%          -0.620971\n50%           0.000000\n75%           0.615480\nmax           0.785398\nName: Northness, dtype: float64\ncount    300725.000000\nmean         -0.002146\nstd           0.577707\nmin          -0.785398\n25%          -0.615480\n50%           0.000000\n75%           0.612676\nmax           0.785398\nName: Eastness, dtype: float64\nNew dem features are updated in /home/chetana/gridmet_test_run/dem_all.csv\n",
  "history_begin_time" : 1695515746336,
  "history_end_time" : 1695515761006,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "9jcJbN2ASspU",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\nimport rasterio\nimport csv\nfrom rasterio.transform import Affine\nfrom scipy.ndimage import sobel, gaussian_filter\n\nmile_to_meters = 1609.34\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect_for_single(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef save_as_geotiff(data, output_file, src_file):\n    with rasterio.open(src_file) as src_dataset:\n        profile = src_dataset.profile\n        transform = src_dataset.transform\n\n        # Update the data type, count, and set the transform for the new dataset\n        profile.update(dtype=rasterio.float32, count=1, transform=transform)\n\n        # Create the new GeoTIFF file\n        with rasterio.open(output_file, 'w', **profile) as dst_dataset:\n            # Write the data to the new GeoTIFF\n            dst_dataset.write(data, 1)\n  \n\ndef calculate_slope_aspect(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n        \n        # convert miles to meters\n        dem_data = dem_data * mile_to_meters\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Calculate the slope and aspect using numpy\n        dx, dy = np.gradient(dem_data, transform[0], transform[4])\n        slope = np.arctan(np.sqrt(dx ** 2 + dy ** 2)) * (180.0 / np.pi)\n        aspect = np.arctan2(-dy, dx) * (180.0 / np.pi)\n\n        # Adjust aspect values to range from 0 to 360 degrees\n        aspect[aspect < 0] += 360\n        print(f\"slope shape: {slope.shape}\")\n        print(f\"aspect shape: {aspect.shape}\")\n        \n        \n    return slope, aspect\n  \ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n  \ndef calculate_curvature(dem_file, sigma=1):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n        \n        # convert miles to meters\n        dem_data = dem_data*mile_to_meters\n\n        # Calculate the gradient using the Sobel filter\n        dx = sobel(dem_data, axis=1, mode='constant')\n        dy = sobel(dem_data, axis=0, mode='constant')\n\n        # Calculate the second derivatives using the Sobel filter\n        dxx = sobel(dx, axis=1, mode='constant')\n        dyy = sobel(dy, axis=0, mode='constant')\n\n        # Calculate the curvature using the second derivatives\n        curvature = dxx + dyy\n\n        # Smooth the curvature using Gaussian filtering (optional)\n        curvature = gaussian_filter(curvature, sigma)\n\n    return curvature\n  \ndef calculate_gradients(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradients along the North and East directions\n        dy, dx = np.gradient(dem_data, dataset.res[0], dataset.res[1])\n\n        # Calculate the Northness and Eastness\n        northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n        eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\n\n    return northness, eastness\n  \n  \ndef geotiff_to_csv(geotiff_file, csv_file, column_name):\n    # Open the GeoTIFF file\n    with rasterio.open(geotiff_file) as dataset:\n        # Get the pixel values as a 2D array\n        data = dataset.read(1)\n        \n        if column_name == \"Elevation\":\n          # convert miles to meters\n          data = data*mile_to_meters\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Get the width and height of the GeoTIFF\n        height, width = data.shape\n\n        # Open the CSV file for writing\n        with open(csv_file, 'w', newline='') as csvfile:\n            csvwriter = csv.writer(csvfile)\n\n            # Write the CSV header\n            csvwriter.writerow(['Latitude', 'Longitude', 'x', 'y', column_name])\n\n            # Loop through each pixel and extract latitude, longitude, and image value\n            for y in range(height):\n                for x in range(width):\n                    # Get the pixel value\n                    image_value = data[y, x]\n\n                    # Convert pixel coordinates to geographic coordinates\n                    lon, lat = transform * (x, y)\n\n                    # Write the data to the CSV file\n                    csvwriter.writerow([lat, lon, x, y, image_value])\n\n  \ndef read_elevation_data(file_path, result_dem_csv_path, result_dem_feature_csv_path):\n    neighborhood_size=4\n    df = pd.read_csv(file_path)\n    \n    dataset = rasterio.open(geotiff_file)\n    data = dataset.read(1)\n\n    # Get the width and height of the GeoTIFF\n    height, width = data.shape\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n  \n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n\n\ndem_file = \"/home/chetana/gridmet_test_run/dem_file.tif\"\nslope_file = '/home/chetana/gridmet_test_run/slope_file.tif'\naspect_file = '/home/chetana/gridmet_test_run/aspect_file.tif'\ncurvature_file = '/home/chetana/gridmet_test_run/curvature_file.tif'\nnorthness_file = '/home/chetana/gridmet_test_run/northness_file.tif'\neastness_file = '/home/chetana/gridmet_test_run/eastness_file.tif'\n\n\nslope, aspect = calculate_slope_aspect(dem_file)\ncurvature = calculate_curvature(dem_file)\nnorthness, eastness = calculate_gradients(dem_file)\n\n# Save the slope and aspect as new GeoTIFF files\nsave_as_geotiff(slope, slope_file, dem_file)\nsave_as_geotiff(aspect, aspect_file, dem_file)\nsave_as_geotiff(curvature, curvature_file, dem_file)\nsave_as_geotiff(northness, northness_file, dem_file)\nsave_as_geotiff(eastness, eastness_file, dem_file)\n\ngeotiff_to_csv(dem_file, dem_file+\".csv\", \"Elevation\")\ngeotiff_to_csv(slope_file, slope_file+\".csv\", \"Slope\")\ngeotiff_to_csv(aspect_file, aspect_file+\".csv\", \"Aspect\")\ngeotiff_to_csv(curvature_file, curvature_file+\".csv\", \"Curvature\")\ngeotiff_to_csv(northness_file, northness_file+\".csv\", \"Northness\")\ngeotiff_to_csv(eastness_file, eastness_file+\".csv\", \"Eastness\")\n\n# List of file paths for the CSV files\ncsv_files = [dem_file+\".csv\", slope_file+\".csv\", aspect_file+\".csv\", \n             curvature_file+\".csv\", northness_file+\".csv\", eastness_file+\".csv\"]\n\n# Initialize an empty list to store all dataframes\ndfs = []\n\n# Read each CSV file into separate dataframes\nfor file in csv_files:\n    df = pd.read_csv(file, encoding='utf-8')\n    dfs.append(df)\n\n# Merge the dataframes based on the latitude and longitude columns\nmerged_df = dfs[0]  # Start with the first dataframe\nfor i in range(1, len(dfs)):\n    merged_df = pd.merge(merged_df, dfs[i], on=['Latitude', 'Longitude', 'x', 'y'])\n\n# Save the merged dataframe to a new CSV file\nmerged_df.to_csv(result_dem_feature_csv_path, index=False)\nprint(f\"New dem features are updated in {result_dem_feature_csv_path}\")\n",
  "history_output" : "/home/chetana/gw-workspace/9jcJbN2ASspU/western_us_dem.py:115: RuntimeWarning: invalid value encountered in divide\n  northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n/home/chetana/gw-workspace/9jcJbN2ASspU/western_us_dem.py:116: RuntimeWarning: invalid value encountered in divide\n  eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\nslope shape: (666, 694)\naspect shape: (666, 694)\nNew dem features are updated in /home/chetana/gridmet_test_run/dem_all.csv\n",
  "history_begin_time" : 1695515589561,
  "history_end_time" : 1695515603256,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "MeyMuROD1yRh",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\nimport rasterio\nimport csv\nfrom rasterio.transform import Affine\nfrom scipy.ndimage import sobel, gaussian_filter\n\nmile_to_meters = 1609.34\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect_for_single(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef save_as_geotiff(data, output_file, src_file):\n    with rasterio.open(src_file) as src_dataset:\n        profile = src_dataset.profile\n        transform = src_dataset.transform\n\n        # Update the data type, count, and set the transform for the new dataset\n        profile.update(dtype=rasterio.float32, count=1, transform=transform)\n\n        # Create the new GeoTIFF file\n        with rasterio.open(output_file, 'w', **profile) as dst_dataset:\n            # Write the data to the new GeoTIFF\n            dst_dataset.write(data, 1)\n  \n\ndef calculate_slope_aspect(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n        \n        # convert miles to meters\n        dem_data = dem_data * mile_to_meters\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Calculate the slope and aspect using numpy\n        dx, dy = np.gradient(dem_data, transform[0], transform[4])\n        slope = np.arctan(np.sqrt(dx ** 2 + dy ** 2)) * (180.0 / np.pi)\n        aspect = np.arctan2(-dy, dx) * (180.0 / np.pi)\n\n        # Adjust aspect values to range from 0 to 360 degrees\n        aspect[aspect < 0] += 360\n        print(f\"slope shape: {slope.shape}\")\n        print(f\"aspect shape: {aspect.shape}\")\n        \n        \n    return slope, aspect\n  \ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n  \ndef calculate_curvature(dem_file, sigma=1):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n        \n        # convert miles to meters\n        dem_data = dem_data*mile_to_meters\n\n        # Calculate the gradient using the Sobel filter\n        dx = sobel(dem_data, axis=1, mode='constant')\n        dy = sobel(dem_data, axis=0, mode='constant')\n\n        # Calculate the second derivatives using the Sobel filter\n        dxx = sobel(dx, axis=1, mode='constant')\n        dyy = sobel(dy, axis=0, mode='constant')\n\n        # Calculate the curvature using the second derivatives\n        curvature = dxx + dyy\n\n        # Smooth the curvature using Gaussian filtering (optional)\n        curvature = gaussian_filter(curvature, sigma)\n\n    return curvature\n  \ndef calculate_gradients(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradients along the North and East directions\n        dy, dx = np.gradient(dem_data, dataset.res[0], dataset.res[1])\n\n        # Calculate the Northness and Eastness\n        northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n        eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\n\n    return northness, eastness\n  \n  \ndef geotiff_to_csv(geotiff_file, csv_file, column_name):\n    # Open the GeoTIFF file\n    with rasterio.open(geotiff_file) as dataset:\n        # Get the pixel values as a 2D array\n        data = dataset.read(1)\n        \n        if column_name == \"Elevation\":\n          # convert miles to meters\n          data = data*mile_to_meters\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Get the width and height of the GeoTIFF\n        height, width = data.shape\n\n        # Open the CSV file for writing\n        with open(csv_file, 'w', newline='') as csvfile:\n            csvwriter = csv.writer(csvfile)\n\n            # Write the CSV header\n            csvwriter.writerow(['Latitude', 'Longitude', 'x', 'y', column_name])\n\n            # Loop through each pixel and extract latitude, longitude, and image value\n            for y in range(height):\n                for x in range(width):\n                    # Get the pixel value\n                    image_value = data[y, x]\n\n                    # Convert pixel coordinates to geographic coordinates\n                    lon, lat = transform * (x, y)\n\n                    # Write the data to the CSV file\n                    csvwriter.writerow([lat, lon, x, y, image_value])\n\n  \ndef read_elevation_data(file_path, result_dem_csv_path, result_dem_feature_csv_path):\n    neighborhood_size=4\n    df = pd.read_csv(file_path)\n    \n    dataset = rasterio.open(geotiff_file)\n    data = dataset.read(1)\n\n    # Get the width and height of the GeoTIFF\n    height, width = data.shape\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n  \n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n\n\ndem_file = \"/home/chetana/gridmet_test_run/dem_file.tif\"\nslope_file = '/home/chetana/gridmet_test_run/slope_file.tif'\naspect_file = '/home/chetana/gridmet_test_run/aspect_file.tif'\ncurvature_file = '/home/chetana/gridmet_test_run/curvature_file.tif'\nnorthness_file = '/home/chetana/gridmet_test_run/northness_file.tif'\neastness_file = '/home/chetana/gridmet_test_run/eastness_file.tif'\n\n\nslope, aspect = calculate_slope_aspect(dem_file)\ncurvature = calculate_curvature(dem_file)\nnorthness, eastness = calculate_gradients(dem_file)\n\n# Save the slope and aspect as new GeoTIFF files\nsave_as_geotiff(slope, slope_file, dem_file)\nsave_as_geotiff(aspect, aspect_file, dem_file)\nsave_as_geotiff(curvature, curvature_file, dem_file)\nsave_as_geotiff(northness, northness_file, dem_file)\nsave_as_geotiff(eastness, eastness_file, dem_file)\n\ngeotiff_to_csv(dem_file, dem_file+\".csv\", \"Elevation\")\ngeotiff_to_csv(slope_file, slope_file+\".csv\", \"Slope\")\ngeotiff_to_csv(aspect_file, aspect_file+\".csv\", \"Aspect\")\ngeotiff_to_csv(curvature_file, curvature_file+\".csv\", \"Curvature\")\ngeotiff_to_csv(northness_file, northness_file+\".csv\", \"Northness\")\ngeotiff_to_csv(eastness_file, eastness_file+\".csv\", \"Eastness\")\n\n# List of file paths for the CSV files\ncsv_files = [dem_file+\".csv\", slope_file+\".csv\", aspect_file+\".csv\", \n             curvature_file+\".csv\", northness_file+\".csv\", eastness_file+\".csv\"]\n\n# Initialize an empty list to store all dataframes\ndfs = []\n\n# Read each CSV file into separate dataframes\nfor file in csv_files:\n    df = pd.read_csv(file, encoding='utf-8')\n    dfs.append(df)\n\n# Merge the dataframes based on the latitude and longitude columns\nmerged_df = dfs[0]  # Start with the first dataframe\nfor i in range(1, len(dfs)):\n    merged_df = pd.merge(merged_df, dfs[i], on=['Latitude', 'Longitude', 'x', 'y'])\n\n# Save the merged dataframe to a new CSV file\nmerged_df.to_csv(result_dem_feature_csv_path, index=False)\n",
  "history_output" : "/home/chetana/gw-workspace/MeyMuROD1yRh/western_us_dem.py:115: RuntimeWarning: invalid value encountered in divide\n  northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n/home/chetana/gw-workspace/MeyMuROD1yRh/western_us_dem.py:116: RuntimeWarning: invalid value encountered in divide\n  eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\nslope shape: (666, 694)\naspect shape: (666, 694)\n",
  "history_begin_time" : 1695515543037,
  "history_end_time" : 1695515558211,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "JINOaZmsp5W7",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\nimport rasterio\nimport csv\nfrom rasterio.transform import Affine\nfrom scipy.ndimage import sobel, gaussian_filter\n\nmile_to_meters = 1609.34\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect_for_single(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef save_as_geotiff(data, output_file, src_file):\n    with rasterio.open(src_file) as src_dataset:\n        profile = src_dataset.profile\n        transform = src_dataset.transform\n\n        # Update the data type, count, and set the transform for the new dataset\n        profile.update(dtype=rasterio.float32, count=1, transform=transform)\n\n        # Create the new GeoTIFF file\n        with rasterio.open(output_file, 'w', **profile) as dst_dataset:\n            # Write the data to the new GeoTIFF\n            dst_dataset.write(data, 1)\n  \n\ndef calculate_slope_aspect(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n        \n        # convert miles to meters\n        print(dem_data)\n        dem_data = dem_data * mile_to_meters\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Calculate the slope and aspect using numpy\n        dx, dy = np.gradient(dem_data, transform[0], transform[4])\n        slope = np.arctan(np.sqrt(dx ** 2 + dy ** 2)) * (180.0 / np.pi)\n        aspect = np.arctan2(-dy, dx) * (180.0 / np.pi)\n\n        # Adjust aspect values to range from 0 to 360 degrees\n        aspect[aspect < 0] += 360\n        print(f\"slope shape: {slope.shape}\")\n        print(f\"aspect shape: {aspect.shape}\")\n        \n        \n    return slope, aspect\n  \ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n  \ndef calculate_curvature(dem_file, sigma=1):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n        \n        # convert miles to meters\n        dem_data = dem_data*mile_to_meters\n\n        # Calculate the gradient using the Sobel filter\n        dx = sobel(dem_data, axis=1, mode='constant')\n        dy = sobel(dem_data, axis=0, mode='constant')\n\n        # Calculate the second derivatives using the Sobel filter\n        dxx = sobel(dx, axis=1, mode='constant')\n        dyy = sobel(dy, axis=0, mode='constant')\n\n        # Calculate the curvature using the second derivatives\n        curvature = dxx + dyy\n\n        # Smooth the curvature using Gaussian filtering (optional)\n        curvature = gaussian_filter(curvature, sigma)\n\n    return curvature\n  \ndef calculate_gradients(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradients along the North and East directions\n        dy, dx = np.gradient(dem_data, dataset.res[0], dataset.res[1])\n\n        # Calculate the Northness and Eastness\n        northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n        eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\n\n    return northness, eastness\n  \n  \ndef geotiff_to_csv(geotiff_file, csv_file, column_name):\n    # Open the GeoTIFF file\n    with rasterio.open(geotiff_file) as dataset:\n        # Get the pixel values as a 2D array\n        data = dataset.read(1)\n        \n        if column_name == \"Elevation\":\n          # convert miles to meters\n          dem_data = dem_data*mile_to_meters\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Get the width and height of the GeoTIFF\n        height, width = data.shape\n\n        # Open the CSV file for writing\n        with open(csv_file, 'w', newline='') as csvfile:\n            csvwriter = csv.writer(csvfile)\n\n            # Write the CSV header\n            csvwriter.writerow(['Latitude', 'Longitude', 'x', 'y', column_name])\n\n            # Loop through each pixel and extract latitude, longitude, and image value\n            for y in range(height):\n                for x in range(width):\n                    # Get the pixel value\n                    image_value = data[y, x]\n\n                    # Convert pixel coordinates to geographic coordinates\n                    lon, lat = transform * (x, y)\n\n                    # Write the data to the CSV file\n                    csvwriter.writerow([lat, lon, x, y, image_value])\n\n  \ndef read_elevation_data(file_path, result_dem_csv_path, result_dem_feature_csv_path):\n    neighborhood_size=4\n    df = pd.read_csv(file_path)\n    \n    dataset = rasterio.open(geotiff_file)\n    data = dataset.read(1)\n\n    # Get the width and height of the GeoTIFF\n    height, width = data.shape\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n  \n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n\n\ndem_file = \"/home/chetana/gridmet_test_run/dem_file.tif\"\nslope_file = '/home/chetana/gridmet_test_run/slope_file.tif'\naspect_file = '/home/chetana/gridmet_test_run/aspect_file.tif'\ncurvature_file = '/home/chetana/gridmet_test_run/curvature_file.tif'\nnorthness_file = '/home/chetana/gridmet_test_run/northness_file.tif'\neastness_file = '/home/chetana/gridmet_test_run/eastness_file.tif'\n\n\nslope, aspect = calculate_slope_aspect(dem_file)\ncurvature = calculate_curvature(dem_file)\nnorthness, eastness = calculate_gradients(dem_file)\n\n# Save the slope and aspect as new GeoTIFF files\nsave_as_geotiff(slope, slope_file, dem_file)\nsave_as_geotiff(aspect, aspect_file, dem_file)\nsave_as_geotiff(curvature, curvature_file, dem_file)\nsave_as_geotiff(northness, northness_file, dem_file)\nsave_as_geotiff(eastness, eastness_file, dem_file)\n\ngeotiff_to_csv(dem_file, dem_file+\".csv\", \"Elevation\")\ngeotiff_to_csv(slope_file, slope_file+\".csv\", \"Slope\")\ngeotiff_to_csv(aspect_file, aspect_file+\".csv\", \"Aspect\")\ngeotiff_to_csv(curvature_file, curvature_file+\".csv\", \"Curvature\")\ngeotiff_to_csv(northness_file, northness_file+\".csv\", \"Northness\")\ngeotiff_to_csv(eastness_file, eastness_file+\".csv\", \"Eastness\")\n\n# List of file paths for the CSV files\ncsv_files = [dem_file+\".csv\", slope_file+\".csv\", aspect_file+\".csv\", \n             curvature_file+\".csv\", northness_file+\".csv\", eastness_file+\".csv\"]\n\n# Initialize an empty list to store all dataframes\ndfs = []\n\n# Read each CSV file into separate dataframes\nfor file in csv_files:\n    df = pd.read_csv(file, encoding='utf-8')\n    dfs.append(df)\n\n# Merge the dataframes based on the latitude and longitude columns\nmerged_df = dfs[0]  # Start with the first dataframe\nfor i in range(1, len(dfs)):\n    merged_df = pd.merge(merged_df, dfs[i], on=['Latitude', 'Longitude', 'x', 'y'])\n\n# Save the merged dataframe to a new CSV file\nmerged_df.to_csv(result_dem_feature_csv_path, index=False)\n",
  "history_output" : "/home/chetana/gw-workspace/JINOaZmsp5W7/western_us_dem.py:116: RuntimeWarning: invalid value encountered in divide\n  northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n/home/chetana/gw-workspace/JINOaZmsp5W7/western_us_dem.py:117: RuntimeWarning: invalid value encountered in divide\n  eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\n[[  nan   nan   nan ... 2.373 2.366 2.366]\n [  nan   nan   nan ... 2.309 2.344 2.344]\n [  nan   nan   nan ... 2.288 2.309 2.309]\n ...\n [  nan   nan   nan ...   nan   nan   nan]\n [  nan   nan   nan ...   nan   nan   nan]\n [  nan   nan   nan ...   nan   nan   nan]]\nslope shape: (666, 694)\naspect shape: (666, 694)\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/JINOaZmsp5W7/western_us_dem.py\", line 202, in <module>\n    geotiff_to_csv(dem_file, dem_file+\".csv\", \"Elevation\")\n  File \"/home/chetana/gw-workspace/JINOaZmsp5W7/western_us_dem.py\", line 130, in geotiff_to_csv\n    dem_data = dem_data*mile_to_meters\nUnboundLocalError: local variable 'dem_data' referenced before assignment\n",
  "history_begin_time" : 1695515508761,
  "history_end_time" : 1695515510241,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "Y4T7Z9RIdrC0",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\nimport rasterio\nimport csv\nfrom rasterio.transform import Affine\nfrom scipy.ndimage import sobel, gaussian_filter\n\nmile_to_meters = 1,609.34\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect_for_single(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef save_as_geotiff(data, output_file, src_file):\n    with rasterio.open(src_file) as src_dataset:\n        profile = src_dataset.profile\n        transform = src_dataset.transform\n\n        # Update the data type, count, and set the transform for the new dataset\n        profile.update(dtype=rasterio.float32, count=1, transform=transform)\n\n        # Create the new GeoTIFF file\n        with rasterio.open(output_file, 'w', **profile) as dst_dataset:\n            # Write the data to the new GeoTIFF\n            dst_dataset.write(data, 1)\n  \n\ndef calculate_slope_aspect(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n        \n        # convert miles to meters\n        print(dem_data)\n        dem_data = dem_data * mile_to_meters\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Calculate the slope and aspect using numpy\n        dx, dy = np.gradient(dem_data, transform[0], transform[4])\n        slope = np.arctan(np.sqrt(dx ** 2 + dy ** 2)) * (180.0 / np.pi)\n        aspect = np.arctan2(-dy, dx) * (180.0 / np.pi)\n\n        # Adjust aspect values to range from 0 to 360 degrees\n        aspect[aspect < 0] += 360\n        print(f\"slope shape: {slope.shape}\")\n        print(f\"aspect shape: {aspect.shape}\")\n        \n        \n    return slope, aspect\n  \ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n  \ndef calculate_curvature(dem_file, sigma=1):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n        \n        # convert miles to meters\n        dem_data = dem_data*mile_to_meters\n\n        # Calculate the gradient using the Sobel filter\n        dx = sobel(dem_data, axis=1, mode='constant')\n        dy = sobel(dem_data, axis=0, mode='constant')\n\n        # Calculate the second derivatives using the Sobel filter\n        dxx = sobel(dx, axis=1, mode='constant')\n        dyy = sobel(dy, axis=0, mode='constant')\n\n        # Calculate the curvature using the second derivatives\n        curvature = dxx + dyy\n\n        # Smooth the curvature using Gaussian filtering (optional)\n        curvature = gaussian_filter(curvature, sigma)\n\n    return curvature\n  \ndef calculate_gradients(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradients along the North and East directions\n        dy, dx = np.gradient(dem_data, dataset.res[0], dataset.res[1])\n\n        # Calculate the Northness and Eastness\n        northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n        eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\n\n    return northness, eastness\n  \n  \ndef geotiff_to_csv(geotiff_file, csv_file, column_name):\n    # Open the GeoTIFF file\n    with rasterio.open(geotiff_file) as dataset:\n        # Get the pixel values as a 2D array\n        data = dataset.read(1)\n        \n        if column_name == \"Elevation\":\n          # convert miles to meters\n          dem_data = dem_data*mile_to_meters\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Get the width and height of the GeoTIFF\n        height, width = data.shape\n\n        # Open the CSV file for writing\n        with open(csv_file, 'w', newline='') as csvfile:\n            csvwriter = csv.writer(csvfile)\n\n            # Write the CSV header\n            csvwriter.writerow(['Latitude', 'Longitude', 'x', 'y', column_name])\n\n            # Loop through each pixel and extract latitude, longitude, and image value\n            for y in range(height):\n                for x in range(width):\n                    # Get the pixel value\n                    image_value = data[y, x]\n\n                    # Convert pixel coordinates to geographic coordinates\n                    lon, lat = transform * (x, y)\n\n                    # Write the data to the CSV file\n                    csvwriter.writerow([lat, lon, x, y, image_value])\n\n  \ndef read_elevation_data(file_path, result_dem_csv_path, result_dem_feature_csv_path):\n    neighborhood_size=4\n    df = pd.read_csv(file_path)\n    \n    dataset = rasterio.open(geotiff_file)\n    data = dataset.read(1)\n\n    # Get the width and height of the GeoTIFF\n    height, width = data.shape\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n  \n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n\n\ndem_file = \"/home/chetana/gridmet_test_run/dem_file.tif\"\nslope_file = '/home/chetana/gridmet_test_run/slope_file.tif'\naspect_file = '/home/chetana/gridmet_test_run/aspect_file.tif'\ncurvature_file = '/home/chetana/gridmet_test_run/curvature_file.tif'\nnorthness_file = '/home/chetana/gridmet_test_run/northness_file.tif'\neastness_file = '/home/chetana/gridmet_test_run/eastness_file.tif'\n\n\nslope, aspect = calculate_slope_aspect(dem_file)\ncurvature = calculate_curvature(dem_file)\nnorthness, eastness = calculate_gradients(dem_file)\n\n# Save the slope and aspect as new GeoTIFF files\nsave_as_geotiff(slope, slope_file, dem_file)\nsave_as_geotiff(aspect, aspect_file, dem_file)\nsave_as_geotiff(curvature, curvature_file, dem_file)\nsave_as_geotiff(northness, northness_file, dem_file)\nsave_as_geotiff(eastness, eastness_file, dem_file)\n\ngeotiff_to_csv(dem_file, dem_file+\".csv\", \"Elevation\")\ngeotiff_to_csv(slope_file, slope_file+\".csv\", \"Slope\")\ngeotiff_to_csv(aspect_file, aspect_file+\".csv\", \"Aspect\")\ngeotiff_to_csv(curvature_file, curvature_file+\".csv\", \"Curvature\")\ngeotiff_to_csv(northness_file, northness_file+\".csv\", \"Northness\")\ngeotiff_to_csv(eastness_file, eastness_file+\".csv\", \"Eastness\")\n\n# List of file paths for the CSV files\ncsv_files = [dem_file+\".csv\", slope_file+\".csv\", aspect_file+\".csv\", \n             curvature_file+\".csv\", northness_file+\".csv\", eastness_file+\".csv\"]\n\n# Initialize an empty list to store all dataframes\ndfs = []\n\n# Read each CSV file into separate dataframes\nfor file in csv_files:\n    df = pd.read_csv(file, encoding='utf-8')\n    dfs.append(df)\n\n# Merge the dataframes based on the latitude and longitude columns\nmerged_df = dfs[0]  # Start with the first dataframe\nfor i in range(1, len(dfs)):\n    merged_df = pd.merge(merged_df, dfs[i], on=['Latitude', 'Longitude', 'x', 'y'])\n\n# Save the merged dataframe to a new CSV file\nmerged_df.to_csv(result_dem_feature_csv_path, index=False)\n",
  "history_output" : "[[  nan   nan   nan ... 2.373 2.366 2.366]\n [  nan   nan   nan ... 2.309 2.344 2.344]\n [  nan   nan   nan ... 2.288 2.309 2.309]\n ...\n [  nan   nan   nan ...   nan   nan   nan]\n [  nan   nan   nan ...   nan   nan   nan]\n [  nan   nan   nan ...   nan   nan   nan]]\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/Y4T7Z9RIdrC0/western_us_dem.py\", line 191, in <module>\n    slope, aspect = calculate_slope_aspect(dem_file)\n  File \"/home/chetana/gw-workspace/Y4T7Z9RIdrC0/western_us_dem.py\", line 56, in calculate_slope_aspect\n    dem_data = dem_data * mile_to_meters\nValueError: operands could not be broadcast together with shapes (666,694) (2,) \n",
  "history_begin_time" : 1695515465406,
  "history_end_time" : 1695515466493,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "azsM0kZBEUIA",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\nimport rasterio\nimport csv\nfrom rasterio.transform import Affine\nfrom scipy.ndimage import sobel, gaussian_filter\n\nmile_to_meters = 1,609.34\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect_for_single(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef save_as_geotiff(data, output_file, src_file):\n    with rasterio.open(src_file) as src_dataset:\n        profile = src_dataset.profile\n        transform = src_dataset.transform\n\n        # Update the data type, count, and set the transform for the new dataset\n        profile.update(dtype=rasterio.float32, count=1, transform=transform)\n\n        # Create the new GeoTIFF file\n        with rasterio.open(output_file, 'w', **profile) as dst_dataset:\n            # Write the data to the new GeoTIFF\n            dst_dataset.write(data, 1)\n  \n\ndef calculate_slope_aspect(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n        \n        # convert miles to meters\n        dem_data = dem_data*mile_to_meters\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Calculate the slope and aspect using numpy\n        dx, dy = np.gradient(dem_data, transform[0], transform[4])\n        slope = np.arctan(np.sqrt(dx ** 2 + dy ** 2)) * (180.0 / np.pi)\n        aspect = np.arctan2(-dy, dx) * (180.0 / np.pi)\n\n        # Adjust aspect values to range from 0 to 360 degrees\n        aspect[aspect < 0] += 360\n        print(f\"slope shape: {slope.shape}\")\n        print(f\"aspect shape: {aspect.shape}\")\n        \n        \n    return slope, aspect\n  \ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n  \ndef calculate_curvature(dem_file, sigma=1):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n        \n        # convert miles to meters\n        dem_data = dem_data*mile_to_meters\n\n        # Calculate the gradient using the Sobel filter\n        dx = sobel(dem_data, axis=1, mode='constant')\n        dy = sobel(dem_data, axis=0, mode='constant')\n\n        # Calculate the second derivatives using the Sobel filter\n        dxx = sobel(dx, axis=1, mode='constant')\n        dyy = sobel(dy, axis=0, mode='constant')\n\n        # Calculate the curvature using the second derivatives\n        curvature = dxx + dyy\n\n        # Smooth the curvature using Gaussian filtering (optional)\n        curvature = gaussian_filter(curvature, sigma)\n\n    return curvature\n  \ndef calculate_gradients(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradients along the North and East directions\n        dy, dx = np.gradient(dem_data, dataset.res[0], dataset.res[1])\n\n        # Calculate the Northness and Eastness\n        northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n        eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\n\n    return northness, eastness\n  \n  \ndef geotiff_to_csv(geotiff_file, csv_file, column_name):\n    # Open the GeoTIFF file\n    with rasterio.open(geotiff_file) as dataset:\n        # Get the pixel values as a 2D array\n        data = dataset.read(1)\n        \n        if column_name == \"Elevation\":\n          # convert miles to meters\n          dem_data = dem_data*mile_to_meters\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Get the width and height of the GeoTIFF\n        height, width = data.shape\n\n        # Open the CSV file for writing\n        with open(csv_file, 'w', newline='') as csvfile:\n            csvwriter = csv.writer(csvfile)\n\n            # Write the CSV header\n            csvwriter.writerow(['Latitude', 'Longitude', 'x', 'y', column_name])\n\n            # Loop through each pixel and extract latitude, longitude, and image value\n            for y in range(height):\n                for x in range(width):\n                    # Get the pixel value\n                    image_value = data[y, x]\n\n                    # Convert pixel coordinates to geographic coordinates\n                    lon, lat = transform * (x, y)\n\n                    # Write the data to the CSV file\n                    csvwriter.writerow([lat, lon, x, y, image_value])\n\n  \ndef read_elevation_data(file_path, result_dem_csv_path, result_dem_feature_csv_path):\n    neighborhood_size=4\n    df = pd.read_csv(file_path)\n    \n    dataset = rasterio.open(geotiff_file)\n    data = dataset.read(1)\n\n    # Get the width and height of the GeoTIFF\n    height, width = data.shape\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n  \n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n\n\ndem_file = \"/home/chetana/gridmet_test_run/dem_file.tif\"\nslope_file = '/home/chetana/gridmet_test_run/slope_file.tif'\naspect_file = '/home/chetana/gridmet_test_run/aspect_file.tif'\ncurvature_file = '/home/chetana/gridmet_test_run/curvature_file.tif'\nnorthness_file = '/home/chetana/gridmet_test_run/northness_file.tif'\neastness_file = '/home/chetana/gridmet_test_run/eastness_file.tif'\n\n\nslope, aspect = calculate_slope_aspect(dem_file)\ncurvature = calculate_curvature(dem_file)\nnorthness, eastness = calculate_gradients(dem_file)\n\n# Save the slope and aspect as new GeoTIFF files\nsave_as_geotiff(slope, slope_file, dem_file)\nsave_as_geotiff(aspect, aspect_file, dem_file)\nsave_as_geotiff(curvature, curvature_file, dem_file)\nsave_as_geotiff(northness, northness_file, dem_file)\nsave_as_geotiff(eastness, eastness_file, dem_file)\n\ngeotiff_to_csv(dem_file, dem_file+\".csv\", \"Elevation\")\ngeotiff_to_csv(slope_file, slope_file+\".csv\", \"Slope\")\ngeotiff_to_csv(aspect_file, aspect_file+\".csv\", \"Aspect\")\ngeotiff_to_csv(curvature_file, curvature_file+\".csv\", \"Curvature\")\ngeotiff_to_csv(northness_file, northness_file+\".csv\", \"Northness\")\ngeotiff_to_csv(eastness_file, eastness_file+\".csv\", \"Eastness\")\n\n# List of file paths for the CSV files\ncsv_files = [dem_file+\".csv\", slope_file+\".csv\", aspect_file+\".csv\", \n             curvature_file+\".csv\", northness_file+\".csv\", eastness_file+\".csv\"]\n\n# Initialize an empty list to store all dataframes\ndfs = []\n\n# Read each CSV file into separate dataframes\nfor file in csv_files:\n    df = pd.read_csv(file, encoding='utf-8')\n    dfs.append(df)\n\n# Merge the dataframes based on the latitude and longitude columns\nmerged_df = dfs[0]  # Start with the first dataframe\nfor i in range(1, len(dfs)):\n    merged_df = pd.merge(merged_df, dfs[i], on=['Latitude', 'Longitude', 'x', 'y'])\n\n# Save the merged dataframe to a new CSV file\nmerged_df.to_csv(result_dem_feature_csv_path, index=False)\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/azsM0kZBEUIA/western_us_dem.py\", line 190, in <module>\n    slope, aspect = calculate_slope_aspect(dem_file)\n  File \"/home/chetana/gw-workspace/azsM0kZBEUIA/western_us_dem.py\", line 55, in calculate_slope_aspect\n    dem_data = dem_data*mile_to_meters\nValueError: operands could not be broadcast together with shapes (666,694) (2,) \n",
  "history_begin_time" : 1695515350419,
  "history_end_time" : 1695515358590,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "225but3zpty",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695506423847,
  "history_end_time" : 1695506423847,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "jfkmvzd578l",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695418741338,
  "history_end_time" : 1695418741338,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "q8fo60qatko",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695417619675,
  "history_end_time" : 1695417619675,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "vpx7lbd9y9e",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695417171277,
  "history_end_time" : 1695417171277,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "lpwbwxcvg3f",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695417052729,
  "history_end_time" : 1695417052729,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "3zmhxxwra4v",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695416916046,
  "history_end_time" : 1695416916046,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "deuri77j4o5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695106488976,
  "history_end_time" : 1695106488976,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "h4kyw7947gn",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695106316210,
  "history_end_time" : 1695106316210,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "uirxbsrz1wv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695054045025,
  "history_end_time" : 1695054045025,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "wanom0tnpo4",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\nimport rasterio\nimport csv\nfrom rasterio.transform import Affine\nfrom scipy.ndimage import sobel, gaussian_filter\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect_for_single(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef save_as_geotiff(data, output_file, src_file):\n    with rasterio.open(src_file) as src_dataset:\n        profile = src_dataset.profile\n        transform = src_dataset.transform\n\n        # Update the data type, count, and set the transform for the new dataset\n        profile.update(dtype=rasterio.float32, count=1, transform=transform)\n\n        # Create the new GeoTIFF file\n        with rasterio.open(output_file, 'w', **profile) as dst_dataset:\n            # Write the data to the new GeoTIFF\n            dst_dataset.write(data, 1)\n  \n\ndef calculate_slope_aspect(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Calculate the slope and aspect using numpy\n        dx, dy = np.gradient(dem_data, transform[0], transform[4])\n        slope = np.arctan(np.sqrt(dx ** 2 + dy ** 2)) * (180.0 / np.pi)\n        aspect = np.arctan2(-dy, dx) * (180.0 / np.pi)\n\n        # Adjust aspect values to range from 0 to 360 degrees\n        aspect[aspect < 0] += 360\n        print(f\"slope shape: {slope.shape}\")\n        print(f\"aspect shape: {aspect.shape}\")\n        \n        \n    return slope, aspect\n  \ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n  \ndef calculate_curvature(dem_file, sigma=1):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradient using the Sobel filter\n        dx = sobel(dem_data, axis=1, mode='constant')\n        dy = sobel(dem_data, axis=0, mode='constant')\n\n        # Calculate the second derivatives using the Sobel filter\n        dxx = sobel(dx, axis=1, mode='constant')\n        dyy = sobel(dy, axis=0, mode='constant')\n\n        # Calculate the curvature using the second derivatives\n        curvature = dxx + dyy\n\n        # Smooth the curvature using Gaussian filtering (optional)\n        curvature = gaussian_filter(curvature, sigma)\n\n    return curvature\n  \ndef calculate_gradients(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradients along the North and East directions\n        dy, dx = np.gradient(dem_data, dataset.res[0], dataset.res[1])\n\n        # Calculate the Northness and Eastness\n        northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n        eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\n\n    return northness, eastness\n  \n  \ndef geotiff_to_csv(geotiff_file, csv_file, column_name):\n    # Open the GeoTIFF file\n    with rasterio.open(geotiff_file) as dataset:\n        # Get the pixel values as a 2D array\n        data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Get the width and height of the GeoTIFF\n        height, width = data.shape\n\n        # Open the CSV file for writing\n        with open(csv_file, 'w', newline='') as csvfile:\n            csvwriter = csv.writer(csvfile)\n\n            # Write the CSV header\n            csvwriter.writerow(['Latitude', 'Longitude', 'x', 'y', column_name])\n\n            # Loop through each pixel and extract latitude, longitude, and image value\n            for y in range(height):\n                for x in range(width):\n                    # Get the pixel value\n                    image_value = data[y, x]\n\n                    # Convert pixel coordinates to geographic coordinates\n                    lon, lat = transform * (x, y)\n\n                    # Write the data to the CSV file\n                    csvwriter.writerow([lat, lon, x, y, image_value])\n\n  \ndef read_elevation_data(file_path, result_dem_csv_path, result_dem_feature_csv_path):\n    neighborhood_size=4\n    df = pd.read_csv(file_path)\n    \n    dataset = rasterio.open(geotiff_file)\n    data = dataset.read(1)\n\n    # Get the width and height of the GeoTIFF\n    height, width = data.shape\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n  \n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n\n\ndem_file = \"/home/chetana/gridmet_test_run/dem_file.tif\"\nslope_file = '/home/chetana/gridmet_test_run/slope_file.tif'\naspect_file = '/home/chetana/gridmet_test_run/aspect_file.tif'\ncurvature_file = '/home/chetana/gridmet_test_run/curvature_file.tif'\nnorthness_file = '/home/chetana/gridmet_test_run/northness_file.tif'\neastness_file = '/home/chetana/gridmet_test_run/eastness_file.tif'\n\n\nslope, aspect = calculate_slope_aspect(dem_file)\ncurvature = calculate_curvature(dem_file)\nnorthness, eastness = calculate_gradients(dem_file)\n\n# Save the slope and aspect as new GeoTIFF files\nsave_as_geotiff(slope, slope_file, dem_file)\nsave_as_geotiff(aspect, aspect_file, dem_file)\nsave_as_geotiff(curvature, curvature_file, dem_file)\nsave_as_geotiff(northness, northness_file, dem_file)\nsave_as_geotiff(eastness, eastness_file, dem_file)\n\ngeotiff_to_csv(dem_file, dem_file+\".csv\", \"Elevation\")\ngeotiff_to_csv(slope_file, slope_file+\".csv\", \"Slope\")\ngeotiff_to_csv(aspect_file, aspect_file+\".csv\", \"Aspect\")\ngeotiff_to_csv(curvature_file, curvature_file+\".csv\", \"Curvature\")\ngeotiff_to_csv(northness_file, northness_file+\".csv\", \"Northness\")\ngeotiff_to_csv(eastness_file, eastness_file+\".csv\", \"Eastness\")\n\n# List of file paths for the CSV files\ncsv_files = [dem_file+\".csv\", slope_file+\".csv\", aspect_file+\".csv\", \n             curvature_file+\".csv\", northness_file+\".csv\", eastness_file+\".csv\"]\n\n# Initialize an empty list to store all dataframes\ndfs = []\n\n# Read each CSV file into separate dataframes\nfor file in csv_files:\n    df = pd.read_csv(file, encoding='utf-8')\n    dfs.append(df)\n\n# Merge the dataframes based on the latitude and longitude columns\nmerged_df = dfs[0]  # Start with the first dataframe\nfor i in range(1, len(dfs)):\n    merged_df = pd.merge(merged_df, dfs[i], on=['Latitude', 'Longitude', 'x', 'y'])\n\n# Save the merged dataframe to a new CSV file\nmerged_df.to_csv(result_dem_feature_csv_path, index=False)\n",
  "history_output" : "Running",
  "history_begin_time" : 1695054020287,
  "history_end_time" : 1695054032350,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "cvyzgtqz292",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\nimport rasterio\nimport csv\nfrom rasterio.transform import Affine\nfrom scipy.ndimage import sobel, gaussian_filter\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect_for_single(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef save_as_geotiff(data, output_file, src_file):\n    with rasterio.open(src_file) as src_dataset:\n        profile = src_dataset.profile\n        transform = src_dataset.transform\n\n        # Update the data type, count, and set the transform for the new dataset\n        profile.update(dtype=rasterio.float32, count=1, transform=transform)\n\n        # Create the new GeoTIFF file\n        with rasterio.open(output_file, 'w', **profile) as dst_dataset:\n            # Write the data to the new GeoTIFF\n            dst_dataset.write(data, 1)\n  \n\ndef calculate_slope_aspect(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Calculate the slope and aspect using numpy\n        dx, dy = np.gradient(dem_data, transform[0], transform[4])\n        slope = np.arctan(np.sqrt(dx ** 2 + dy ** 2)) * (180.0 / np.pi)\n        aspect = np.arctan2(-dy, dx) * (180.0 / np.pi)\n\n        # Adjust aspect values to range from 0 to 360 degrees\n        aspect[aspect < 0] += 360\n        print(f\"slope shape: {slope.shape}\")\n        print(f\"aspect shape: {aspect.shape}\")\n        \n        \n    return slope, aspect\n  \ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n  \ndef calculate_curvature(dem_file, sigma=1):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradient using the Sobel filter\n        dx = sobel(dem_data, axis=1, mode='constant')\n        dy = sobel(dem_data, axis=0, mode='constant')\n\n        # Calculate the second derivatives using the Sobel filter\n        dxx = sobel(dx, axis=1, mode='constant')\n        dyy = sobel(dy, axis=0, mode='constant')\n\n        # Calculate the curvature using the second derivatives\n        curvature = dxx + dyy\n\n        # Smooth the curvature using Gaussian filtering (optional)\n        curvature = gaussian_filter(curvature, sigma)\n\n    return curvature\n  \ndef calculate_gradients(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradients along the North and East directions\n        dy, dx = np.gradient(dem_data, dataset.res[0], dataset.res[1])\n\n        # Calculate the Northness and Eastness\n        northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n        eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\n\n    return northness, eastness\n  \n  \ndef geotiff_to_csv(geotiff_file, csv_file, column_name):\n    # Open the GeoTIFF file\n    with rasterio.open(geotiff_file) as dataset:\n        # Get the pixel values as a 2D array\n        data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Get the width and height of the GeoTIFF\n        height, width = data.shape\n\n        # Open the CSV file for writing\n        with open(csv_file, 'w', newline='') as csvfile:\n            csvwriter = csv.writer(csvfile)\n\n            # Write the CSV header\n            csvwriter.writerow(['Latitude', 'Longitude', 'x', 'y', column_name])\n\n            # Loop through each pixel and extract latitude, longitude, and image value\n            for y in range(height):\n                for x in range(width):\n                    # Get the pixel value\n                    image_value = data[y, x]\n\n                    # Convert pixel coordinates to geographic coordinates\n                    lon, lat = transform * (x, y)\n\n                    # Write the data to the CSV file\n                    csvwriter.writerow([lat, lon, x, y, image_value])\n\n  \ndef read_elevation_data(file_path, result_dem_csv_path, result_dem_feature_csv_path):\n    neighborhood_size=4\n    df = pd.read_csv(file_path)\n    \n    dataset = rasterio.open(geotiff_file)\n    data = dataset.read(1)\n\n    # Get the width and height of the GeoTIFF\n    height, width = data.shape\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n  \n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n\n\ndem_file = \"/home/chetana/gridmet_test_run/dem_file.tif\"\nslope_file = '/home/chetana/gridmet_test_run/slope_file.tif'\naspect_file = '/home/chetana/gridmet_test_run/aspect_file.tif'\ncurvature_file = '/home/chetana/gridmet_test_run/curvature_file.tif'\nnorthness_file = '/home/chetana/gridmet_test_run/northness_file.tif'\neastness_file = '/home/chetana/gridmet_test_run/eastness_file.tif'\n\n\nslope, aspect = calculate_slope_aspect(dem_file)\ncurvature = calculate_curvature(dem_file)\nnorthness, eastness = calculate_gradients(dem_file)\n\n# Save the slope and aspect as new GeoTIFF files\nsave_as_geotiff(slope, slope_file, dem_file)\nsave_as_geotiff(aspect, aspect_file, dem_file)\nsave_as_geotiff(curvature, curvature_file, dem_file)\nsave_as_geotiff(northness, northness_file, dem_file)\nsave_as_geotiff(eastness, eastness_file, dem_file)\n\ngeotiff_to_csv(dem_file, dem_file+\".csv\", \"Elevation\")\ngeotiff_to_csv(slope_file, slope_file+\".csv\", \"Slope\")\ngeotiff_to_csv(aspect_file, aspect_file+\".csv\", \"Aspect\")\ngeotiff_to_csv(curvature_file, curvature_file+\".csv\", \"Curvature\")\ngeotiff_to_csv(northness_file, northness_file+\".csv\", \"Northness\")\ngeotiff_to_csv(eastness_file, eastness_file+\".csv\", \"Eastness\")\n\n# List of file paths for the CSV files\ncsv_files = [dem_file+\".csv\", slope_file+\".csv\", aspect_file+\".csv\", \n             curvature_file+\".csv\", northness_file+\".csv\", eastness_file+\".csv\"]\n\n# Initialize an empty list to store all dataframes\ndfs = []\n\n# Read each CSV file into separate dataframes\nfor file in csv_files:\n    df = pd.read_csv(file, encoding='utf-8')\n    dfs.append(df)\n\n# Merge the dataframes based on the latitude and longitude columns\nmerged_df = dfs[0]  # Start with the first dataframe\nfor i in range(1, len(dfs)):\n    merged_df = pd.merge(merged_df, dfs[i], on=['Latitude', 'Longitude', 'x', 'y'])\n\n# Save the merged dataframe to a new CSV file\nmerged_df.to_csv(result_dem_feature_csv_path, index=False)\n",
  "history_output" : "/home/chetana/gw-workspace/cvyzgtqz292/western_us_dem.py:107: RuntimeWarning: invalid value encountered in divide\n  northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n/home/chetana/gw-workspace/cvyzgtqz292/western_us_dem.py:108: RuntimeWarning: invalid value encountered in divide\n  eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\nslope shape: (666, 694)\naspect shape: (666, 694)\n",
  "history_begin_time" : 1695053980593,
  "history_end_time" : 1695054019273,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "s6ba0g90rym",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695053793416,
  "history_end_time" : 1695053793416,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "cxya967ot61",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695053733433,
  "history_end_time" : 1695053733433,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "shyyi1ewdcr",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1694971144823,
  "history_end_time" : 1694972839687,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "hw8nu6ke6oa",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1694970707922,
  "history_end_time" : 1694970707922,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "9wobw7m87a8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1694970594759,
  "history_end_time" : 1694970594759,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ibwz2tkunf0",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1694970131593,
  "history_end_time" : 1694970131593,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "RyREWqRLgg5i",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\nimport rasterio\nimport csv\nfrom rasterio.transform import Affine\nfrom scipy.ndimage import sobel, gaussian_filter\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect_for_single(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef save_as_geotiff(data, output_file, src_file):\n    with rasterio.open(src_file) as src_dataset:\n        profile = src_dataset.profile\n        transform = src_dataset.transform\n\n        # Update the data type, count, and set the transform for the new dataset\n        profile.update(dtype=rasterio.float32, count=1, transform=transform)\n\n        # Create the new GeoTIFF file\n        with rasterio.open(output_file, 'w', **profile) as dst_dataset:\n            # Write the data to the new GeoTIFF\n            dst_dataset.write(data, 1)\n  \n\ndef calculate_slope_aspect(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Calculate the slope and aspect using numpy\n        dx, dy = np.gradient(dem_data, transform[0], transform[4])\n        slope = np.arctan(np.sqrt(dx ** 2 + dy ** 2)) * (180.0 / np.pi)\n        aspect = np.arctan2(-dy, dx) * (180.0 / np.pi)\n\n        # Adjust aspect values to range from 0 to 360 degrees\n        aspect[aspect < 0] += 360\n        print(f\"slope shape: {slope.shape}\")\n        print(f\"aspect shape: {aspect.shape}\")\n        \n        \n    return slope, aspect\n  \ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n  \ndef calculate_curvature(dem_file, sigma=1):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradient using the Sobel filter\n        dx = sobel(dem_data, axis=1, mode='constant')\n        dy = sobel(dem_data, axis=0, mode='constant')\n\n        # Calculate the second derivatives using the Sobel filter\n        dxx = sobel(dx, axis=1, mode='constant')\n        dyy = sobel(dy, axis=0, mode='constant')\n\n        # Calculate the curvature using the second derivatives\n        curvature = dxx + dyy\n\n        # Smooth the curvature using Gaussian filtering (optional)\n        curvature = gaussian_filter(curvature, sigma)\n\n    return curvature\n  \ndef calculate_gradients(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradients along the North and East directions\n        dy, dx = np.gradient(dem_data, dataset.res[0], dataset.res[1])\n\n        # Calculate the Northness and Eastness\n        northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n        eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\n\n    return northness, eastness\n  \n  \ndef geotiff_to_csv(geotiff_file, csv_file, column_name):\n    # Open the GeoTIFF file\n    with rasterio.open(geotiff_file) as dataset:\n        # Get the pixel values as a 2D array\n        data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Get the width and height of the GeoTIFF\n        height, width = data.shape\n\n        # Open the CSV file for writing\n        with open(csv_file, 'w', newline='') as csvfile:\n            csvwriter = csv.writer(csvfile)\n\n            # Write the CSV header\n            csvwriter.writerow(['Latitude', 'Longitude', 'x', 'y', column_name])\n\n            # Loop through each pixel and extract latitude, longitude, and image value\n            for y in range(height):\n                for x in range(width):\n                    # Get the pixel value\n                    image_value = data[y, x]\n\n                    # Convert pixel coordinates to geographic coordinates\n                    lon, lat = transform * (x, y)\n\n                    # Write the data to the CSV file\n                    csvwriter.writerow([lat, lon, x, y, image_value])\n\n  \ndef read_elevation_data(file_path, result_dem_csv_path, result_dem_feature_csv_path):\n    neighborhood_size=4\n    df = pd.read_csv(file_path)\n    \n    dataset = rasterio.open(geotiff_file)\n    data = dataset.read(1)\n\n    # Get the width and height of the GeoTIFF\n    height, width = data.shape\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n  \n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n\n\ndem_file = \"/home/chetana/gridmet_test_run/dem_file.tif\"\nslope_file = '/home/chetana/gridmet_test_run/slope_file.tif'\naspect_file = '/home/chetana/gridmet_test_run/aspect_file.tif'\ncurvature_file = '/home/chetana/gridmet_test_run/curvature_file.tif'\nnorthness_file = '/home/chetana/gridmet_test_run/northness_file.tif'\neastness_file = '/home/chetana/gridmet_test_run/eastness_file.tif'\n\n\nslope, aspect = calculate_slope_aspect(dem_file)\ncurvature = calculate_curvature(dem_file)\nnorthness, eastness = calculate_gradients(dem_file)\n\n# Save the slope and aspect as new GeoTIFF files\nsave_as_geotiff(slope, slope_file, dem_file)\nsave_as_geotiff(aspect, aspect_file, dem_file)\nsave_as_geotiff(curvature, curvature_file, dem_file)\nsave_as_geotiff(northness, northness_file, dem_file)\nsave_as_geotiff(eastness, eastness_file, dem_file)\n\ngeotiff_to_csv(dem_file, dem_file+\".csv\", \"Elevation\")\ngeotiff_to_csv(slope_file, slope_file+\".csv\", \"Slope\")\ngeotiff_to_csv(aspect_file, aspect_file+\".csv\", \"Aspect\")\ngeotiff_to_csv(curvature_file, curvature_file+\".csv\", \"Curvature\")\ngeotiff_to_csv(northness_file, northness_file+\".csv\", \"Northness\")\ngeotiff_to_csv(eastness_file, eastness_file+\".csv\", \"Eastness\")\n\n# List of file paths for the CSV files\ncsv_files = [dem_file+\".csv\", slope_file+\".csv\", aspect_file+\".csv\", \n             curvature_file+\".csv\", northness_file+\".csv\", eastness_file+\".csv\"]\n\n# Initialize an empty list to store all dataframes\ndfs = []\n\n# Read each CSV file into separate dataframes\nfor file in csv_files:\n    df = pd.read_csv(file, encoding='utf-8')\n    dfs.append(df)\n\n# Merge the dataframes based on the latitude and longitude columns\nmerged_df = dfs[0]  # Start with the first dataframe\nfor i in range(1, len(dfs)):\n    merged_df = pd.merge(merged_df, dfs[i], on=['Latitude', 'Longitude', 'x', 'y'])\n\n# Save the merged dataframe to a new CSV file\nmerged_df.to_csv(result_dem_feature_csv_path, index=False)\n",
  "history_output" : "/home/chetana/gw-workspace/RyREWqRLgg5i/western_us_dem.py:107: RuntimeWarning: invalid value encountered in divide\n  northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n/home/chetana/gw-workspace/RyREWqRLgg5i/western_us_dem.py:108: RuntimeWarning: invalid value encountered in divide\n  eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\nslope shape: (666, 694)\naspect shape: (666, 694)\n",
  "history_begin_time" : 1694970076791,
  "history_end_time" : 1694970091738,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "soxrpq036pg",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\nimport rasterio\nimport csv\nfrom rasterio.transform import Affine\nfrom scipy.ndimage import sobel, gaussian_filter\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect_for_single(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef save_as_geotiff(data, output_file, src_file):\n    with rasterio.open(src_file) as src_dataset:\n        profile = src_dataset.profile\n        transform = src_dataset.transform\n\n        # Update the data type, count, and set the transform for the new dataset\n        profile.update(dtype=rasterio.float32, count=1, transform=transform)\n\n        # Create the new GeoTIFF file\n        with rasterio.open(output_file, 'w', **profile) as dst_dataset:\n            # Write the data to the new GeoTIFF\n            dst_dataset.write(data, 1)\n  \n\ndef calculate_slope_aspect(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Calculate the slope and aspect using numpy\n        dx, dy = np.gradient(dem_data, transform[0], transform[4])\n        slope = np.arctan(np.sqrt(dx ** 2 + dy ** 2)) * (180.0 / np.pi)\n        aspect = np.arctan2(-dy, dx) * (180.0 / np.pi)\n\n        # Adjust aspect values to range from 0 to 360 degrees\n        aspect[aspect < 0] += 360\n        print(f\"slope shape: {slope.shape}\")\n        print(f\"aspect shape: {aspect.shape}\")\n        \n        \n    return slope, aspect\n  \ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n  \ndef calculate_curvature(dem_file, sigma=1):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradient using the Sobel filter\n        dx = sobel(dem_data, axis=1, mode='constant')\n        dy = sobel(dem_data, axis=0, mode='constant')\n\n        # Calculate the second derivatives using the Sobel filter\n        dxx = sobel(dx, axis=1, mode='constant')\n        dyy = sobel(dy, axis=0, mode='constant')\n\n        # Calculate the curvature using the second derivatives\n        curvature = dxx + dyy\n\n        # Smooth the curvature using Gaussian filtering (optional)\n        curvature = gaussian_filter(curvature, sigma)\n\n    return curvature\n  \ndef calculate_gradients(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradients along the North and East directions\n        dy, dx = np.gradient(dem_data, dataset.res[0], dataset.res[1])\n\n        # Calculate the Northness and Eastness\n        northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n        eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\n\n    return northness, eastness\n  \n  \ndef geotiff_to_csv(geotiff_file, csv_file, column_name):\n    # Open the GeoTIFF file\n    with rasterio.open(geotiff_file) as dataset:\n        # Get the pixel values as a 2D array\n        data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Get the width and height of the GeoTIFF\n        height, width = data.shape\n\n        # Open the CSV file for writing\n        with open(csv_file, 'w', newline='') as csvfile:\n            csvwriter = csv.writer(csvfile)\n\n            # Write the CSV header\n            csvwriter.writerow(['Latitude', 'Longitude', 'x', 'y', column_name])\n\n            # Loop through each pixel and extract latitude, longitude, and image value\n            for y in range(height):\n                for x in range(width):\n                    # Get the pixel value\n                    image_value = data[y, x]\n\n                    # Convert pixel coordinates to geographic coordinates\n                    lon, lat = transform * (x, y)\n\n                    # Write the data to the CSV file\n                    csvwriter.writerow([lat, lon, x, y, image_value])\n\n  \ndef read_elevation_data(file_path, result_dem_csv_path, result_dem_feature_csv_path):\n    neighborhood_size=4\n    df = pd.read_csv(file_path)\n    \n    dataset = rasterio.open(geotiff_file)\n    data = dataset.read(1)\n\n    # Get the width and height of the GeoTIFF\n    height, width = data.shape\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n  \n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n\n\ndem_file = \"/home/chetana/gridmet_test_run/dem_file.tif\"\nslope_file = '/home/chetana/gridmet_test_run/slope_file.tif'\naspect_file = '/home/chetana/gridmet_test_run/aspect_file.tif'\ncurvature_file = '/home/chetana/gridmet_test_run/curvature_file.tif'\nnorthness_file = '/home/chetana/gridmet_test_run/northness_file.tif'\neastness_file = '/home/chetana/gridmet_test_run/eastness_file.tif'\n\n\nslope, aspect = calculate_slope_aspect(dem_file)\ncurvature = calculate_curvature(dem_file)\nnorthness, eastness = calculate_gradients(dem_file)\n\n# Save the slope and aspect as new GeoTIFF files\nsave_as_geotiff(slope, slope_file, dem_file)\nsave_as_geotiff(aspect, aspect_file, dem_file)\nsave_as_geotiff(curvature, curvature_file, dem_file)\nsave_as_geotiff(northness, northness_file, dem_file)\nsave_as_geotiff(eastness, eastness_file, dem_file)\n\ngeotiff_to_csv(dem_file, dem_file+\".csv\", \"Elevation\")\ngeotiff_to_csv(slope_file, slope_file+\".csv\", \"Slope\")\ngeotiff_to_csv(aspect_file, aspect_file+\".csv\", \"Aspect\")\ngeotiff_to_csv(curvature_file, curvature_file+\".csv\", \"Curvature\")\ngeotiff_to_csv(northness_file, northness_file+\".csv\", \"Northness\")\ngeotiff_to_csv(eastness_file, eastness_file+\".csv\", \"Eastness\")\n\n# List of file paths for the CSV files\ncsv_files = [dem_file+\".csv\", slope_file+\".csv\", aspect_file+\".csv\", \n             curvature_file+\".csv\", northness_file+\".csv\", eastness_file+\".csv\"]\n\n# Initialize an empty list to store all dataframes\ndfs = []\n\n# Read each CSV file into separate dataframes\nfor file in csv_files:\n    df = pd.read_csv(file, encoding='utf-8')\n    dfs.append(df)\n\n# Merge the dataframes based on the latitude and longitude columns\nmerged_df = dfs[0]  # Start with the first dataframe\nfor i in range(1, len(dfs)):\n    merged_df = pd.merge(merged_df, dfs[i], on=['Latitude', 'Longitude', 'x', 'y'])\n\n# Save the merged dataframe to a new CSV file\nmerged_df.to_csv(result_dem_feature_csv_path, index=False)\n",
  "history_output" : "",
  "history_begin_time" : 1694969350763,
  "history_end_time" : 1694969353415,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "mutode0w3ga",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\nimport rasterio\nimport csv\nfrom rasterio.transform import Affine\nfrom scipy.ndimage import sobel, gaussian_filter\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect_for_single(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef save_as_geotiff(data, output_file, src_file):\n    with rasterio.open(src_file) as src_dataset:\n        profile = src_dataset.profile\n        transform = src_dataset.transform\n\n        # Update the data type, count, and set the transform for the new dataset\n        profile.update(dtype=rasterio.float32, count=1, transform=transform)\n\n        # Create the new GeoTIFF file\n        with rasterio.open(output_file, 'w', **profile) as dst_dataset:\n            # Write the data to the new GeoTIFF\n            dst_dataset.write(data, 1)\n  \n\ndef calculate_slope_aspect(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Calculate the slope and aspect using numpy\n        dx, dy = np.gradient(dem_data, transform[0], transform[4])\n        slope = np.arctan(np.sqrt(dx ** 2 + dy ** 2)) * (180.0 / np.pi)\n        aspect = np.arctan2(-dy, dx) * (180.0 / np.pi)\n\n        # Adjust aspect values to range from 0 to 360 degrees\n        aspect[aspect < 0] += 360\n        print(f\"slope shape: {slope.shape}\")\n        print(f\"aspect shape: {aspect.shape}\")\n        \n        \n    return slope, aspect\n  \ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n  \ndef calculate_curvature(dem_file, sigma=1):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradient using the Sobel filter\n        dx = sobel(dem_data, axis=1, mode='constant')\n        dy = sobel(dem_data, axis=0, mode='constant')\n\n        # Calculate the second derivatives using the Sobel filter\n        dxx = sobel(dx, axis=1, mode='constant')\n        dyy = sobel(dy, axis=0, mode='constant')\n\n        # Calculate the curvature using the second derivatives\n        curvature = dxx + dyy\n\n        # Smooth the curvature using Gaussian filtering (optional)\n        curvature = gaussian_filter(curvature, sigma)\n\n    return curvature\n  \ndef calculate_gradients(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradients along the North and East directions\n        dy, dx = np.gradient(dem_data, dataset.res[0], dataset.res[1])\n\n        # Calculate the Northness and Eastness\n        northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n        eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\n\n    return northness, eastness\n  \n  \ndef geotiff_to_csv(geotiff_file, csv_file, column_name):\n    # Open the GeoTIFF file\n    with rasterio.open(geotiff_file) as dataset:\n        # Get the pixel values as a 2D array\n        data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Get the width and height of the GeoTIFF\n        height, width = data.shape\n\n        # Open the CSV file for writing\n        with open(csv_file, 'w', newline='') as csvfile:\n            csvwriter = csv.writer(csvfile)\n\n            # Write the CSV header\n            csvwriter.writerow(['Latitude', 'Longitude', 'x', 'y', column_name])\n\n            # Loop through each pixel and extract latitude, longitude, and image value\n            for y in range(height):\n                for x in range(width):\n                    # Get the pixel value\n                    image_value = data[y, x]\n\n                    # Convert pixel coordinates to geographic coordinates\n                    lon, lat = transform * (x, y)\n\n                    # Write the data to the CSV file\n                    csvwriter.writerow([lat, lon, x, y, image_value])\n\n  \ndef read_elevation_data(file_path, result_dem_csv_path, result_dem_feature_csv_path):\n    neighborhood_size=4\n    df = pd.read_csv(file_path)\n    \n    dataset = rasterio.open(geotiff_file)\n    data = dataset.read(1)\n\n    # Get the width and height of the GeoTIFF\n    height, width = data.shape\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n  \n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n\n\ndem_file = \"/home/chetana/gridmet_test_run/dem_file.tif\"\nslope_file = '/home/chetana/gridmet_test_run/slope_file.tif'\naspect_file = '/home/chetana/gridmet_test_run/aspect_file.tif'\ncurvature_file = '/home/chetana/gridmet_test_run/curvature_file.tif'\nnorthness_file = '/home/chetana/gridmet_test_run/northness_file.tif'\neastness_file = '/home/chetana/gridmet_test_run/eastness_file.tif'\n\n\nslope, aspect = calculate_slope_aspect(dem_file)\ncurvature = calculate_curvature(dem_file)\nnorthness, eastness = calculate_gradients(dem_file)\n\n# Save the slope and aspect as new GeoTIFF files\nsave_as_geotiff(slope, slope_file, dem_file)\nsave_as_geotiff(aspect, aspect_file, dem_file)\nsave_as_geotiff(curvature, curvature_file, dem_file)\nsave_as_geotiff(northness, northness_file, dem_file)\nsave_as_geotiff(eastness, eastness_file, dem_file)\n\ngeotiff_to_csv(dem_file, dem_file+\".csv\", \"Elevation\")\ngeotiff_to_csv(slope_file, slope_file+\".csv\", \"Slope\")\ngeotiff_to_csv(aspect_file, aspect_file+\".csv\", \"Aspect\")\ngeotiff_to_csv(curvature_file, curvature_file+\".csv\", \"Curvature\")\ngeotiff_to_csv(northness_file, northness_file+\".csv\", \"Northness\")\ngeotiff_to_csv(eastness_file, eastness_file+\".csv\", \"Eastness\")\n\n# List of file paths for the CSV files\ncsv_files = [dem_file+\".csv\", slope_file+\".csv\", aspect_file+\".csv\", \n             curvature_file+\".csv\", northness_file+\".csv\", eastness_file+\".csv\"]\n\n# Initialize an empty list to store all dataframes\ndfs = []\n\n# Read each CSV file into separate dataframes\nfor file in csv_files:\n    df = pd.read_csv(file, encoding='utf-8')\n    dfs.append(df)\n\n# Merge the dataframes based on the latitude and longitude columns\nmerged_df = dfs[0]  # Start with the first dataframe\nfor i in range(1, len(dfs)):\n    merged_df = pd.merge(merged_df, dfs[i], on=['Latitude', 'Longitude', 'x', 'y'])\n\n# Save the merged dataframe to a new CSV file\nmerged_df.to_csv(result_dem_feature_csv_path, index=False)\n",
  "history_output" : "/home/chetana/gw-workspace/mutode0w3ga/western_us_dem.py:107: RuntimeWarning: invalid value encountered in true_divide\n  northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n/home/chetana/gw-workspace/mutode0w3ga/western_us_dem.py:108: RuntimeWarning: invalid value encountered in true_divide\n  eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\nslope shape: (666, 694)\naspect shape: (666, 694)\n",
  "history_begin_time" : 1694905308580,
  "history_end_time" : 1694905325440,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "dzkk0pd1vvy",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\nimport rasterio\nimport csv\nfrom rasterio.transform import Affine\nfrom scipy.ndimage import sobel, gaussian_filter\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect_for_single(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef save_as_geotiff(data, output_file, src_file):\n    with rasterio.open(src_file) as src_dataset:\n        profile = src_dataset.profile\n        transform = src_dataset.transform\n\n        # Update the data type, count, and set the transform for the new dataset\n        profile.update(dtype=rasterio.float32, count=1, transform=transform)\n\n        # Create the new GeoTIFF file\n        with rasterio.open(output_file, 'w', **profile) as dst_dataset:\n            # Write the data to the new GeoTIFF\n            dst_dataset.write(data, 1)\n  \n\ndef calculate_slope_aspect(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Calculate the slope and aspect using numpy\n        dx, dy = np.gradient(dem_data, transform[0], transform[4])\n        slope = np.arctan(np.sqrt(dx ** 2 + dy ** 2)) * (180.0 / np.pi)\n        aspect = np.arctan2(-dy, dx) * (180.0 / np.pi)\n\n        # Adjust aspect values to range from 0 to 360 degrees\n        aspect[aspect < 0] += 360\n        print(f\"slope shape: {slope.shape}\")\n        print(f\"aspect shape: {aspect.shape}\")\n        \n        \n    return slope, aspect\n  \ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n  \ndef calculate_curvature(dem_file, sigma=1):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradient using the Sobel filter\n        dx = sobel(dem_data, axis=1, mode='constant')\n        dy = sobel(dem_data, axis=0, mode='constant')\n\n        # Calculate the second derivatives using the Sobel filter\n        dxx = sobel(dx, axis=1, mode='constant')\n        dyy = sobel(dy, axis=0, mode='constant')\n\n        # Calculate the curvature using the second derivatives\n        curvature = dxx + dyy\n\n        # Smooth the curvature using Gaussian filtering (optional)\n        curvature = gaussian_filter(curvature, sigma)\n\n    return curvature\n  \ndef calculate_gradients(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradients along the North and East directions\n        dy, dx = np.gradient(dem_data, dataset.res[0], dataset.res[1])\n\n        # Calculate the Northness and Eastness\n        northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n        eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\n\n    return northness, eastness\n  \n  \ndef geotiff_to_csv(geotiff_file, csv_file, column_name):\n    # Open the GeoTIFF file\n    with rasterio.open(geotiff_file) as dataset:\n        # Get the pixel values as a 2D array\n        data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Get the width and height of the GeoTIFF\n        height, width = data.shape\n\n        # Open the CSV file for writing\n        with open(csv_file, 'w', newline='') as csvfile:\n            csvwriter = csv.writer(csvfile)\n\n            # Write the CSV header\n            csvwriter.writerow(['Latitude', 'Longitude', 'x', 'y', column_name])\n\n            # Loop through each pixel and extract latitude, longitude, and image value\n            for y in range(height):\n                for x in range(width):\n                    # Get the pixel value\n                    image_value = data[y, x]\n\n                    # Convert pixel coordinates to geographic coordinates\n                    lon, lat = transform * (x, y)\n\n                    # Write the data to the CSV file\n                    csvwriter.writerow([lat, lon, x, y, image_value])\n\n  \ndef read_elevation_data(file_path, result_dem_csv_path, result_dem_feature_csv_path):\n    neighborhood_size=4\n    df = pd.read_csv(file_path)\n    \n    dataset = rasterio.open(geotiff_file)\n    data = dataset.read(1)\n\n    # Get the width and height of the GeoTIFF\n    height, width = data.shape\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n  \n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n\n\ndem_file = \"/home/chetana/gridmet_test_run/dem_file.tif\"\nslope_file = '/home/chetana/gridmet_test_run/slope_file.tif'\naspect_file = '/home/chetana/gridmet_test_run/aspect_file.tif'\ncurvature_file = '/home/chetana/gridmet_test_run/curvature_file.tif'\nnorthness_file = '/home/chetana/gridmet_test_run/northness_file.tif'\neastness_file = '/home/chetana/gridmet_test_run/eastness_file.tif'\n\n\nslope, aspect = calculate_slope_aspect(dem_file)\ncurvature = calculate_curvature(dem_file)\nnorthness, eastness = calculate_gradients(dem_file)\n\n# Save the slope and aspect as new GeoTIFF files\nsave_as_geotiff(slope, slope_file, dem_file)\nsave_as_geotiff(aspect, aspect_file, dem_file)\nsave_as_geotiff(curvature, curvature_file, dem_file)\nsave_as_geotiff(northness, northness_file, dem_file)\nsave_as_geotiff(eastness, eastness_file, dem_file)\n\ngeotiff_to_csv(dem_file, dem_file+\".csv\", \"Elevation\")\ngeotiff_to_csv(slope_file, slope_file+\".csv\", \"Slope\")\ngeotiff_to_csv(aspect_file, aspect_file+\".csv\", \"Aspect\")\ngeotiff_to_csv(curvature_file, curvature_file+\".csv\", \"Curvature\")\ngeotiff_to_csv(northness_file, northness_file+\".csv\", \"Northness\")\ngeotiff_to_csv(eastness_file, eastness_file+\".csv\", \"Eastness\")\n\n# List of file paths for the CSV files\ncsv_files = [dem_file+\".csv\", slope_file+\".csv\", aspect_file+\".csv\", \n             curvature_file+\".csv\", northness_file+\".csv\", eastness_file+\".csv\"]\n\n# Initialize an empty list to store all dataframes\ndfs = []\n\n# Read each CSV file into separate dataframes\nfor file in csv_files:\n    df = pd.read_csv(file, encoding='utf-8')\n    dfs.append(df)\n\n# Merge the dataframes based on the latitude and longitude columns\nmerged_df = dfs[0]  # Start with the first dataframe\nfor i in range(1, len(dfs)):\n    merged_df = pd.merge(merged_df, dfs[i], on=['Latitude', 'Longitude', 'x', 'y'])\n\n# Save the merged dataframe to a new CSV file\nmerged_df.to_csv(result_dem_feature_csv_path, index=False)\n",
  "history_output" : "/home/chetana/gw-workspace/dzkk0pd1vvy/western_us_dem.py:107: RuntimeWarning: invalid value encountered in true_divide\n  northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n/home/chetana/gw-workspace/dzkk0pd1vvy/western_us_dem.py:108: RuntimeWarning: invalid value encountered in true_divide\n  eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\nslope shape: (666, 694)\naspect shape: (666, 694)\n",
  "history_begin_time" : 1694897888115,
  "history_end_time" : 1694897919598,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "hE55anLijRks",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\nimport rasterio\nimport csv\nfrom rasterio.transform import Affine\nfrom scipy.ndimage import sobel, gaussian_filter\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect_for_single(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef save_as_geotiff(data, output_file, src_file):\n    with rasterio.open(src_file) as src_dataset:\n        profile = src_dataset.profile\n        transform = src_dataset.transform\n\n        # Update the data type, count, and set the transform for the new dataset\n        profile.update(dtype=rasterio.float32, count=1, transform=transform)\n\n        # Create the new GeoTIFF file\n        with rasterio.open(output_file, 'w', **profile) as dst_dataset:\n            # Write the data to the new GeoTIFF\n            dst_dataset.write(data, 1)\n  \n\ndef calculate_slope_aspect(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Calculate the slope and aspect using numpy\n        dx, dy = np.gradient(dem_data, transform[0], transform[4])\n        slope = np.arctan(np.sqrt(dx ** 2 + dy ** 2)) * (180.0 / np.pi)\n        aspect = np.arctan2(-dy, dx) * (180.0 / np.pi)\n\n        # Adjust aspect values to range from 0 to 360 degrees\n        aspect[aspect < 0] += 360\n        print(f\"slope shape: {slope.shape}\")\n        print(f\"aspect shape: {aspect.shape}\")\n        \n        \n    return slope, aspect\n  \ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n  \ndef calculate_curvature(dem_file, sigma=1):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradient using the Sobel filter\n        dx = sobel(dem_data, axis=1, mode='constant')\n        dy = sobel(dem_data, axis=0, mode='constant')\n\n        # Calculate the second derivatives using the Sobel filter\n        dxx = sobel(dx, axis=1, mode='constant')\n        dyy = sobel(dy, axis=0, mode='constant')\n\n        # Calculate the curvature using the second derivatives\n        curvature = dxx + dyy\n\n        # Smooth the curvature using Gaussian filtering (optional)\n        curvature = gaussian_filter(curvature, sigma)\n\n    return curvature\n  \ndef calculate_gradients(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradients along the North and East directions\n        dy, dx = np.gradient(dem_data, dataset.res[0], dataset.res[1])\n\n        # Calculate the Northness and Eastness\n        northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n        eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\n\n    return northness, eastness\n  \n  \ndef geotiff_to_csv(geotiff_file, csv_file, column_name):\n    # Open the GeoTIFF file\n    with rasterio.open(geotiff_file) as dataset:\n        # Get the pixel values as a 2D array\n        data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Get the width and height of the GeoTIFF\n        height, width = data.shape\n\n        # Open the CSV file for writing\n        with open(csv_file, 'w', newline='') as csvfile:\n            csvwriter = csv.writer(csvfile)\n\n            # Write the CSV header\n            csvwriter.writerow(['Latitude', 'Longitude', 'x', 'y', column_name])\n\n            # Loop through each pixel and extract latitude, longitude, and image value\n            for y in range(height):\n                for x in range(width):\n                    # Get the pixel value\n                    image_value = data[y, x]\n\n                    # Convert pixel coordinates to geographic coordinates\n                    lon, lat = transform * (x, y)\n\n                    # Write the data to the CSV file\n                    csvwriter.writerow([lat, lon, x, y, image_value])\n\n  \ndef read_elevation_data(file_path, result_dem_csv_path, result_dem_feature_csv_path):\n    neighborhood_size=4\n    df = pd.read_csv(file_path)\n    \n    dataset = rasterio.open(geotiff_file)\n    data = dataset.read(1)\n\n    # Get the width and height of the GeoTIFF\n    height, width = data.shape\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n  \n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n\n\ndem_file = \"/home/chetana/gridmet_test_run/dem_file.tif\"\nslope_file = '/home/chetana/gridmet_test_run/slope_file.tif'\naspect_file = '/home/chetana/gridmet_test_run/aspect_file.tif'\ncurvature_file = '/home/chetana/gridmet_test_run/curvature_file.tif'\nnorthness_file = '/home/chetana/gridmet_test_run/northness_file.tif'\neastness_file = '/home/chetana/gridmet_test_run/eastness_file.tif'\n\n\nslope, aspect = calculate_slope_aspect(dem_file)\ncurvature = calculate_curvature(dem_file)\nnorthness, eastness = calculate_gradients(dem_file)\n\n# Save the slope and aspect as new GeoTIFF files\nsave_as_geotiff(slope, slope_file, dem_file)\nsave_as_geotiff(aspect, aspect_file, dem_file)\nsave_as_geotiff(curvature, curvature_file, dem_file)\nsave_as_geotiff(northness, northness_file, dem_file)\nsave_as_geotiff(eastness, eastness_file, dem_file)\n\ngeotiff_to_csv(dem_file, dem_file+\".csv\", \"Elevation\")\ngeotiff_to_csv(slope_file, slope_file+\".csv\", \"Slope\")\ngeotiff_to_csv(aspect_file, aspect_file+\".csv\", \"Aspect\")\ngeotiff_to_csv(curvature_file, curvature_file+\".csv\", \"Curvature\")\ngeotiff_to_csv(northness_file, northness_file+\".csv\", \"Northness\")\ngeotiff_to_csv(eastness_file, eastness_file+\".csv\", \"Eastness\")\n\n# List of file paths for the CSV files\ncsv_files = [dem_file+\".csv\", slope_file+\".csv\", aspect_file+\".csv\", \n             curvature_file+\".csv\", northness_file+\".csv\", eastness_file+\".csv\"]\n\n# Initialize an empty list to store all dataframes\ndfs = []\n\n# Read each CSV file into separate dataframes\nfor file in csv_files:\n    df = pd.read_csv(file, encoding='utf-8')\n    dfs.append(df)\n\n# Merge the dataframes based on the latitude and longitude columns\nmerged_df = dfs[0]  # Start with the first dataframe\nfor i in range(1, len(dfs)):\n    merged_df = pd.merge(merged_df, dfs[i], on=['Latitude', 'Longitude', 'x', 'y'])\n\n# Save the merged dataframe to a new CSV file\nmerged_df.to_csv(result_dem_feature_csv_path, index=False)\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/hE55anLijRks/western_us_dem.py\", line 3, in <module>\n    from osgeo import gdal\nModuleNotFoundError: No module named 'osgeo'\n",
  "history_begin_time" : 1694572934611,
  "history_end_time" : 1694572936020,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "R5TVBfp1G5r4",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\nimport rasterio\nimport csv\nfrom rasterio.transform import Affine\nfrom scipy.ndimage import sobel, gaussian_filter\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect_for_single(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef save_as_geotiff(data, output_file, src_file):\n    with rasterio.open(src_file) as src_dataset:\n        profile = src_dataset.profile\n        transform = src_dataset.transform\n\n        # Update the data type, count, and set the transform for the new dataset\n        profile.update(dtype=rasterio.float32, count=1, transform=transform)\n\n        # Create the new GeoTIFF file\n        with rasterio.open(output_file, 'w', **profile) as dst_dataset:\n            # Write the data to the new GeoTIFF\n            dst_dataset.write(data, 1)\n  \n\ndef calculate_slope_aspect(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Calculate the slope and aspect using numpy\n        dx, dy = np.gradient(dem_data, transform[0], transform[4])\n        slope = np.arctan(np.sqrt(dx ** 2 + dy ** 2)) * (180.0 / np.pi)\n        aspect = np.arctan2(-dy, dx) * (180.0 / np.pi)\n\n        # Adjust aspect values to range from 0 to 360 degrees\n        aspect[aspect < 0] += 360\n        print(f\"slope shape: {slope.shape}\")\n        print(f\"aspect shape: {aspect.shape}\")\n        \n        \n    return slope, aspect\n  \ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n  \ndef calculate_curvature(dem_file, sigma=1):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradient using the Sobel filter\n        dx = sobel(dem_data, axis=1, mode='constant')\n        dy = sobel(dem_data, axis=0, mode='constant')\n\n        # Calculate the second derivatives using the Sobel filter\n        dxx = sobel(dx, axis=1, mode='constant')\n        dyy = sobel(dy, axis=0, mode='constant')\n\n        # Calculate the curvature using the second derivatives\n        curvature = dxx + dyy\n\n        # Smooth the curvature using Gaussian filtering (optional)\n        curvature = gaussian_filter(curvature, sigma)\n\n    return curvature\n  \ndef calculate_gradients(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradients along the North and East directions\n        dy, dx = np.gradient(dem_data, dataset.res[0], dataset.res[1])\n\n        # Calculate the Northness and Eastness\n        northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n        eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\n\n    return northness, eastness\n  \n  \ndef geotiff_to_csv(geotiff_file, csv_file, column_name):\n    # Open the GeoTIFF file\n    with rasterio.open(geotiff_file) as dataset:\n        # Get the pixel values as a 2D array\n        data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Get the width and height of the GeoTIFF\n        height, width = data.shape\n\n        # Open the CSV file for writing\n        with open(csv_file, 'w', newline='') as csvfile:\n            csvwriter = csv.writer(csvfile)\n\n            # Write the CSV header\n            csvwriter.writerow(['Latitude', 'Longitude', 'x', 'y', column_name])\n\n            # Loop through each pixel and extract latitude, longitude, and image value\n            for y in range(height):\n                for x in range(width):\n                    # Get the pixel value\n                    image_value = data[y, x]\n\n                    # Convert pixel coordinates to geographic coordinates\n                    lon, lat = transform * (x, y)\n\n                    # Write the data to the CSV file\n                    csvwriter.writerow([lat, lon, x, y, image_value])\n\n  \ndef read_elevation_data(file_path, result_dem_csv_path, result_dem_feature_csv_path):\n    neighborhood_size=4\n    df = pd.read_csv(file_path)\n    \n    dataset = rasterio.open(geotiff_file)\n    data = dataset.read(1)\n\n    # Get the width and height of the GeoTIFF\n    height, width = data.shape\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n  \n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n\n\ndem_file = \"/home/chetana/gridmet_test_run/dem_file.tif\"\nslope_file = '/home/chetana/gridmet_test_run/slope_file.tif'\naspect_file = '/home/chetana/gridmet_test_run/aspect_file.tif'\ncurvature_file = '/home/chetana/gridmet_test_run/curvature_file.tif'\nnorthness_file = '/home/chetana/gridmet_test_run/northness_file.tif'\neastness_file = '/home/chetana/gridmet_test_run/eastness_file.tif'\n\n\nslope, aspect = calculate_slope_aspect(dem_file)\ncurvature = calculate_curvature(dem_file)\nnorthness, eastness = calculate_gradients(dem_file)\n\n# Save the slope and aspect as new GeoTIFF files\nsave_as_geotiff(slope, slope_file, dem_file)\nsave_as_geotiff(aspect, aspect_file, dem_file)\nsave_as_geotiff(curvature, curvature_file, dem_file)\nsave_as_geotiff(northness, northness_file, dem_file)\nsave_as_geotiff(eastness, eastness_file, dem_file)\n\ngeotiff_to_csv(dem_file, dem_file+\".csv\", \"Elevation\")\ngeotiff_to_csv(slope_file, slope_file+\".csv\", \"Slope\")\ngeotiff_to_csv(aspect_file, aspect_file+\".csv\", \"Aspect\")\ngeotiff_to_csv(curvature_file, curvature_file+\".csv\", \"Curvature\")\ngeotiff_to_csv(northness_file, northness_file+\".csv\", \"Northness\")\ngeotiff_to_csv(eastness_file, eastness_file+\".csv\", \"Eastness\")\n\n# List of file paths for the CSV files\ncsv_files = [dem_file+\".csv\", slope_file+\".csv\", aspect_file+\".csv\", \n             curvature_file+\".csv\", northness_file+\".csv\", eastness_file+\".csv\"]\n\n# Initialize an empty list to store all dataframes\ndfs = []\n\n# Read each CSV file into separate dataframes\nfor file in csv_files:\n    df = pd.read_csv(file, encoding='utf-8')\n    dfs.append(df)\n\n# Merge the dataframes based on the latitude and longitude columns\nmerged_df = dfs[0]  # Start with the first dataframe\nfor i in range(1, len(dfs)):\n    merged_df = pd.merge(merged_df, dfs[i], on=['Latitude', 'Longitude', 'x', 'y'])\n\n# Save the merged dataframe to a new CSV file\nmerged_df.to_csv(result_dem_feature_csv_path, index=False)\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/R5TVBfp1G5r4/western_us_dem.py\", line 3, in <module>\n    from osgeo import gdal\nModuleNotFoundError: No module named 'osgeo'\n",
  "history_begin_time" : 1694572722936,
  "history_end_time" : 1694572724372,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "w5ugVPUQvyAy",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\nimport rasterio\nimport csv\nfrom rasterio.transform import Affine\nfrom scipy.ndimage import sobel, gaussian_filter\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect_for_single(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef save_as_geotiff(data, output_file, src_file):\n    with rasterio.open(src_file) as src_dataset:\n        profile = src_dataset.profile\n        transform = src_dataset.transform\n\n        # Update the data type, count, and set the transform for the new dataset\n        profile.update(dtype=rasterio.float32, count=1, transform=transform)\n\n        # Create the new GeoTIFF file\n        with rasterio.open(output_file, 'w', **profile) as dst_dataset:\n            # Write the data to the new GeoTIFF\n            dst_dataset.write(data, 1)\n  \n\ndef calculate_slope_aspect(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Calculate the slope and aspect using numpy\n        dx, dy = np.gradient(dem_data, transform[0], transform[4])\n        slope = np.arctan(np.sqrt(dx ** 2 + dy ** 2)) * (180.0 / np.pi)\n        aspect = np.arctan2(-dy, dx) * (180.0 / np.pi)\n\n        # Adjust aspect values to range from 0 to 360 degrees\n        aspect[aspect < 0] += 360\n        print(f\"slope shape: {slope.shape}\")\n        print(f\"aspect shape: {aspect.shape}\")\n        \n        \n    return slope, aspect\n  \ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n  \ndef calculate_curvature(dem_file, sigma=1):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradient using the Sobel filter\n        dx = sobel(dem_data, axis=1, mode='constant')\n        dy = sobel(dem_data, axis=0, mode='constant')\n\n        # Calculate the second derivatives using the Sobel filter\n        dxx = sobel(dx, axis=1, mode='constant')\n        dyy = sobel(dy, axis=0, mode='constant')\n\n        # Calculate the curvature using the second derivatives\n        curvature = dxx + dyy\n\n        # Smooth the curvature using Gaussian filtering (optional)\n        curvature = gaussian_filter(curvature, sigma)\n\n    return curvature\n  \ndef calculate_gradients(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradients along the North and East directions\n        dy, dx = np.gradient(dem_data, dataset.res[0], dataset.res[1])\n\n        # Calculate the Northness and Eastness\n        northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n        eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\n\n    return northness, eastness\n  \n  \ndef geotiff_to_csv(geotiff_file, csv_file, column_name):\n    # Open the GeoTIFF file\n    with rasterio.open(geotiff_file) as dataset:\n        # Get the pixel values as a 2D array\n        data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Get the width and height of the GeoTIFF\n        height, width = data.shape\n\n        # Open the CSV file for writing\n        with open(csv_file, 'w', newline='') as csvfile:\n            csvwriter = csv.writer(csvfile)\n\n            # Write the CSV header\n            csvwriter.writerow(['Latitude', 'Longitude', 'x', 'y', column_name])\n\n            # Loop through each pixel and extract latitude, longitude, and image value\n            for y in range(height):\n                for x in range(width):\n                    # Get the pixel value\n                    image_value = data[y, x]\n\n                    # Convert pixel coordinates to geographic coordinates\n                    lon, lat = transform * (x, y)\n\n                    # Write the data to the CSV file\n                    csvwriter.writerow([lat, lon, x, y, image_value])\n\n  \ndef read_elevation_data(file_path, result_dem_csv_path, result_dem_feature_csv_path):\n    neighborhood_size=4\n    df = pd.read_csv(file_path)\n    \n    dataset = rasterio.open(geotiff_file)\n    data = dataset.read(1)\n\n    # Get the width and height of the GeoTIFF\n    height, width = data.shape\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n  \n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n\n\ndem_file = \"/home/chetana/gridmet_test_run/dem_file.tif\"\nslope_file = '/home/chetana/gridmet_test_run/slope_file.tif'\naspect_file = '/home/chetana/gridmet_test_run/aspect_file.tif'\ncurvature_file = '/home/chetana/gridmet_test_run/curvature_file.tif'\nnorthness_file = '/home/chetana/gridmet_test_run/northness_file.tif'\neastness_file = '/home/chetana/gridmet_test_run/eastness_file.tif'\n\n\nslope, aspect = calculate_slope_aspect(dem_file)\ncurvature = calculate_curvature(dem_file)\nnorthness, eastness = calculate_gradients(dem_file)\n\n# Save the slope and aspect as new GeoTIFF files\nsave_as_geotiff(slope, slope_file, dem_file)\nsave_as_geotiff(aspect, aspect_file, dem_file)\nsave_as_geotiff(curvature, curvature_file, dem_file)\nsave_as_geotiff(northness, northness_file, dem_file)\nsave_as_geotiff(eastness, eastness_file, dem_file)\n\ngeotiff_to_csv(dem_file, dem_file+\".csv\", \"Elevation\")\ngeotiff_to_csv(slope_file, slope_file+\".csv\", \"Slope\")\ngeotiff_to_csv(aspect_file, aspect_file+\".csv\", \"Aspect\")\ngeotiff_to_csv(curvature_file, curvature_file+\".csv\", \"Curvature\")\ngeotiff_to_csv(northness_file, northness_file+\".csv\", \"Northness\")\ngeotiff_to_csv(eastness_file, eastness_file+\".csv\", \"Eastness\")\n\n# List of file paths for the CSV files\ncsv_files = [dem_file+\".csv\", slope_file+\".csv\", aspect_file+\".csv\", \n             curvature_file+\".csv\", northness_file+\".csv\", eastness_file+\".csv\"]\n\n# Initialize an empty list to store all dataframes\ndfs = []\n\n# Read each CSV file into separate dataframes\nfor file in csv_files:\n    df = pd.read_csv(file, encoding='utf-8')\n    dfs.append(df)\n\n# Merge the dataframes based on the latitude and longitude columns\nmerged_df = dfs[0]  # Start with the first dataframe\nfor i in range(1, len(dfs)):\n    merged_df = pd.merge(merged_df, dfs[i], on=['Latitude', 'Longitude', 'x', 'y'])\n\n# Save the merged dataframe to a new CSV file\nmerged_df.to_csv(result_dem_feature_csv_path, index=False)\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/w5ugVPUQvyAy/western_us_dem.py\", line 3, in <module>\n    from osgeo import gdal\nModuleNotFoundError: No module named 'osgeo'\n",
  "history_begin_time" : 1694572714707,
  "history_end_time" : 1694572716097,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "vm3ked606kc",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1691531335813,
  "history_end_time" : 1691531335813,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "tq3z35",
  "indicator" : "Skipped"
},{
  "history_id" : "cjlkco0rpo6",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1691531292805,
  "history_end_time" : 1691531292805,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "tq3z35",
  "indicator" : "Skipped"
},{
  "history_id" : "qp0y2bklkxp",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1691531254670,
  "history_end_time" : 1691531284899,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "tq3z35",
  "indicator" : "Stopped"
},{
  "history_id" : "kh7ju7kh53w",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1691531163869,
  "history_end_time" : 1691531163869,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "tq3z35",
  "indicator" : "Skipped"
},{
  "history_id" : "991oo8torxa",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1691531120888,
  "history_end_time" : 1691531120888,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "tq3z35",
  "indicator" : "Skipped"
},{
  "history_id" : "39zpi978omm",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1691531060945,
  "history_end_time" : 1691531060945,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "tq3z35",
  "indicator" : "Skipped"
},{
  "history_id" : "zv5e23w49v7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1691530848327,
  "history_end_time" : 1691530848327,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "tq3z35",
  "indicator" : "Skipped"
},{
  "history_id" : "znorl58miy7",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\nimport rasterio\nimport csv\nfrom rasterio.transform import Affine\nfrom scipy.ndimage import sobel, gaussian_filter\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect_for_single(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef save_as_geotiff(data, output_file, src_file):\n    with rasterio.open(src_file) as src_dataset:\n        profile = src_dataset.profile\n        transform = src_dataset.transform\n\n        # Update the data type, count, and set the transform for the new dataset\n        profile.update(dtype=rasterio.float32, count=1, transform=transform)\n\n        # Create the new GeoTIFF file\n        with rasterio.open(output_file, 'w', **profile) as dst_dataset:\n            # Write the data to the new GeoTIFF\n            dst_dataset.write(data, 1)\n  \n\ndef calculate_slope_aspect(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Calculate the slope and aspect using numpy\n        dx, dy = np.gradient(dem_data, transform[0], transform[4])\n        slope = np.arctan(np.sqrt(dx ** 2 + dy ** 2)) * (180.0 / np.pi)\n        aspect = np.arctan2(-dy, dx) * (180.0 / np.pi)\n\n        # Adjust aspect values to range from 0 to 360 degrees\n        aspect[aspect < 0] += 360\n        print(f\"slope shape: {slope.shape}\")\n        print(f\"aspect shape: {aspect.shape}\")\n        \n        \n    return slope, aspect\n  \ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n  \ndef calculate_curvature(dem_file, sigma=1):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradient using the Sobel filter\n        dx = sobel(dem_data, axis=1, mode='constant')\n        dy = sobel(dem_data, axis=0, mode='constant')\n\n        # Calculate the second derivatives using the Sobel filter\n        dxx = sobel(dx, axis=1, mode='constant')\n        dyy = sobel(dy, axis=0, mode='constant')\n\n        # Calculate the curvature using the second derivatives\n        curvature = dxx + dyy\n\n        # Smooth the curvature using Gaussian filtering (optional)\n        curvature = gaussian_filter(curvature, sigma)\n\n    return curvature\n  \ndef calculate_gradients(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradients along the North and East directions\n        dy, dx = np.gradient(dem_data, dataset.res[0], dataset.res[1])\n\n        # Calculate the Northness and Eastness\n        northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n        eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\n\n    return northness, eastness\n  \n  \ndef geotiff_to_csv(geotiff_file, csv_file, column_name):\n    # Open the GeoTIFF file\n    with rasterio.open(geotiff_file) as dataset:\n        # Get the pixel values as a 2D array\n        data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Get the width and height of the GeoTIFF\n        height, width = data.shape\n\n        # Open the CSV file for writing\n        with open(csv_file, 'w', newline='') as csvfile:\n            csvwriter = csv.writer(csvfile)\n\n            # Write the CSV header\n            csvwriter.writerow(['Latitude', 'Longitude', 'x', 'y', column_name])\n\n            # Loop through each pixel and extract latitude, longitude, and image value\n            for y in range(height):\n                for x in range(width):\n                    # Get the pixel value\n                    image_value = data[y, x]\n\n                    # Convert pixel coordinates to geographic coordinates\n                    lon, lat = transform * (x, y)\n\n                    # Write the data to the CSV file\n                    csvwriter.writerow([lat, lon, x, y, image_value])\n\n  \ndef read_elevation_data(file_path, result_dem_csv_path, result_dem_feature_csv_path):\n    neighborhood_size=4\n    df = pd.read_csv(file_path)\n    \n    dataset = rasterio.open(geotiff_file)\n    data = dataset.read(1)\n\n    # Get the width and height of the GeoTIFF\n    height, width = data.shape\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n  \n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n\n\ndem_file = \"/home/chetana/gridmet_test_run/dem_file.tif\"\nslope_file = '/home/chetana/gridmet_test_run/slope_file.tif'\naspect_file = '/home/chetana/gridmet_test_run/aspect_file.tif'\ncurvature_file = '/home/chetana/gridmet_test_run/curvature_file.tif'\nnorthness_file = '/home/chetana/gridmet_test_run/northness_file.tif'\neastness_file = '/home/chetana/gridmet_test_run/eastness_file.tif'\n\n\nslope, aspect = calculate_slope_aspect(dem_file)\ncurvature = calculate_curvature(dem_file)\nnorthness, eastness = calculate_gradients(dem_file)\n\n# Save the slope and aspect as new GeoTIFF files\nsave_as_geotiff(slope, slope_file, dem_file)\nsave_as_geotiff(aspect, aspect_file, dem_file)\nsave_as_geotiff(curvature, curvature_file, dem_file)\nsave_as_geotiff(northness, northness_file, dem_file)\nsave_as_geotiff(eastness, eastness_file, dem_file)\n\ngeotiff_to_csv(dem_file, dem_file+\".csv\", \"Elevation\")\ngeotiff_to_csv(slope_file, slope_file+\".csv\", \"Slope\")\ngeotiff_to_csv(aspect_file, aspect_file+\".csv\", \"Aspect\")\ngeotiff_to_csv(curvature_file, curvature_file+\".csv\", \"Curvature\")\ngeotiff_to_csv(northness_file, northness_file+\".csv\", \"Northness\")\ngeotiff_to_csv(eastness_file, eastness_file+\".csv\", \"Eastness\")\n\n# List of file paths for the CSV files\ncsv_files = [dem_file+\".csv\", slope_file+\".csv\", aspect_file+\".csv\", \n             curvature_file+\".csv\", northness_file+\".csv\", eastness_file+\".csv\"]\n\n# Initialize an empty list to store all dataframes\ndfs = []\n\n# Read each CSV file into separate dataframes\nfor file in csv_files:\n    df = pd.read_csv(file, encoding='utf-8')\n    dfs.append(df)\n\n# Merge the dataframes based on the latitude and longitude columns\nmerged_df = dfs[0]  # Start with the first dataframe\nfor i in range(1, len(dfs)):\n    merged_df = pd.merge(merged_df, dfs[i], on=['Latitude', 'Longitude', 'x', 'y'])\n\n# Save the merged dataframe to a new CSV file\nmerged_df.to_csv(result_dem_feature_csv_path, index=False)\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/znorl58miy7/western_us_dem.py\", line 3, in <module>\n    from osgeo import gdal\nModuleNotFoundError: No module named 'osgeo'\n",
  "history_begin_time" : 1691530718020,
  "history_end_time" : 1691530721104,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "tq3z35",
  "indicator" : "Stopped"
},{
  "history_id" : "e0og0gpd2x1",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\nimport rasterio\nimport csv\nfrom rasterio.transform import Affine\nfrom scipy.ndimage import sobel, gaussian_filter\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect_for_single(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef save_as_geotiff(data, output_file, src_file):\n    with rasterio.open(src_file) as src_dataset:\n        profile = src_dataset.profile\n        transform = src_dataset.transform\n\n        # Update the data type, count, and set the transform for the new dataset\n        profile.update(dtype=rasterio.float32, count=1, transform=transform)\n\n        # Create the new GeoTIFF file\n        with rasterio.open(output_file, 'w', **profile) as dst_dataset:\n            # Write the data to the new GeoTIFF\n            dst_dataset.write(data, 1)\n  \n\ndef calculate_slope_aspect(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Calculate the slope and aspect using numpy\n        dx, dy = np.gradient(dem_data, transform[0], transform[4])\n        slope = np.arctan(np.sqrt(dx ** 2 + dy ** 2)) * (180.0 / np.pi)\n        aspect = np.arctan2(-dy, dx) * (180.0 / np.pi)\n\n        # Adjust aspect values to range from 0 to 360 degrees\n        aspect[aspect < 0] += 360\n        print(f\"slope shape: {slope.shape}\")\n        print(f\"aspect shape: {aspect.shape}\")\n        \n        \n    return slope, aspect\n  \ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n  \ndef calculate_curvature(dem_file, sigma=1):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradient using the Sobel filter\n        dx = sobel(dem_data, axis=1, mode='constant')\n        dy = sobel(dem_data, axis=0, mode='constant')\n\n        # Calculate the second derivatives using the Sobel filter\n        dxx = sobel(dx, axis=1, mode='constant')\n        dyy = sobel(dy, axis=0, mode='constant')\n\n        # Calculate the curvature using the second derivatives\n        curvature = dxx + dyy\n\n        # Smooth the curvature using Gaussian filtering (optional)\n        curvature = gaussian_filter(curvature, sigma)\n\n    return curvature\n  \ndef calculate_gradients(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradients along the North and East directions\n        dy, dx = np.gradient(dem_data, dataset.res[0], dataset.res[1])\n\n        # Calculate the Northness and Eastness\n        northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n        eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\n\n    return northness, eastness\n  \n  \ndef geotiff_to_csv(geotiff_file, csv_file, column_name):\n    # Open the GeoTIFF file\n    with rasterio.open(geotiff_file) as dataset:\n        # Get the pixel values as a 2D array\n        data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Get the width and height of the GeoTIFF\n        height, width = data.shape\n\n        # Open the CSV file for writing\n        with open(csv_file, 'w', newline='') as csvfile:\n            csvwriter = csv.writer(csvfile)\n\n            # Write the CSV header\n            csvwriter.writerow(['Latitude', 'Longitude', 'x', 'y', column_name])\n\n            # Loop through each pixel and extract latitude, longitude, and image value\n            for y in range(height):\n                for x in range(width):\n                    # Get the pixel value\n                    image_value = data[y, x]\n\n                    # Convert pixel coordinates to geographic coordinates\n                    lon, lat = transform * (x, y)\n\n                    # Write the data to the CSV file\n                    csvwriter.writerow([lat, lon, x, y, image_value])\n\n  \ndef read_elevation_data(file_path, result_dem_csv_path, result_dem_feature_csv_path):\n    neighborhood_size=4\n    df = pd.read_csv(file_path)\n    \n    dataset = rasterio.open(geotiff_file)\n    data = dataset.read(1)\n\n    # Get the width and height of the GeoTIFF\n    height, width = data.shape\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n  \n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n\n\ndem_file = \"/home/chetana/gridmet_test_run/dem_file.tif\"\nslope_file = '/home/chetana/gridmet_test_run/slope_file.tif'\naspect_file = '/home/chetana/gridmet_test_run/aspect_file.tif'\ncurvature_file = '/home/chetana/gridmet_test_run/curvature_file.tif'\nnorthness_file = '/home/chetana/gridmet_test_run/northness_file.tif'\neastness_file = '/home/chetana/gridmet_test_run/eastness_file.tif'\n\n\nslope, aspect = calculate_slope_aspect(dem_file)\ncurvature = calculate_curvature(dem_file)\nnorthness, eastness = calculate_gradients(dem_file)\n\n# Save the slope and aspect as new GeoTIFF files\nsave_as_geotiff(slope, slope_file, dem_file)\nsave_as_geotiff(aspect, aspect_file, dem_file)\nsave_as_geotiff(curvature, curvature_file, dem_file)\nsave_as_geotiff(northness, northness_file, dem_file)\nsave_as_geotiff(eastness, eastness_file, dem_file)\n\ngeotiff_to_csv(dem_file, dem_file+\".csv\", \"Elevation\")\ngeotiff_to_csv(slope_file, slope_file+\".csv\", \"Slope\")\ngeotiff_to_csv(aspect_file, aspect_file+\".csv\", \"Aspect\")\ngeotiff_to_csv(curvature_file, curvature_file+\".csv\", \"Curvature\")\ngeotiff_to_csv(northness_file, northness_file+\".csv\", \"Northness\")\ngeotiff_to_csv(eastness_file, eastness_file+\".csv\", \"Eastness\")\n\n# List of file paths for the CSV files\ncsv_files = [dem_file+\".csv\", slope_file+\".csv\", aspect_file+\".csv\", \n             curvature_file+\".csv\", northness_file+\".csv\", eastness_file+\".csv\"]\n\n# Initialize an empty list to store all dataframes\ndfs = []\n\n# Read each CSV file into separate dataframes\nfor file in csv_files:\n    df = pd.read_csv(file, encoding='utf-8')\n    dfs.append(df)\n\n# Merge the dataframes based on the latitude and longitude columns\nmerged_df = dfs[0]  # Start with the first dataframe\nfor i in range(1, len(dfs)):\n    merged_df = pd.merge(merged_df, dfs[i], on=['Latitude', 'Longitude', 'x', 'y'])\n\n# Save the merged dataframe to a new CSV file\nmerged_df.to_csv(result_dem_feature_csv_path, index=False)\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/e0og0gpd2x1/western_us_dem.py\", line 3, in <module>\n    from osgeo import gdal\nModuleNotFoundError: No module named 'osgeo'\n",
  "history_begin_time" : 1691530690829,
  "history_end_time" : 1691530716749,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "tq3z35",
  "indicator" : "Stopped"
},{
  "history_id" : "sq98l75csxi",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\nimport rasterio\nimport csv\nfrom rasterio.transform import Affine\nfrom scipy.ndimage import sobel, gaussian_filter\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect_for_single(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef save_as_geotiff(data, output_file, src_file):\n    with rasterio.open(src_file) as src_dataset:\n        profile = src_dataset.profile\n        transform = src_dataset.transform\n\n        # Update the data type, count, and set the transform for the new dataset\n        profile.update(dtype=rasterio.float32, count=1, transform=transform)\n\n        # Create the new GeoTIFF file\n        with rasterio.open(output_file, 'w', **profile) as dst_dataset:\n            # Write the data to the new GeoTIFF\n            dst_dataset.write(data, 1)\n  \n\ndef calculate_slope_aspect(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Calculate the slope and aspect using numpy\n        dx, dy = np.gradient(dem_data, transform[0], transform[4])\n        slope = np.arctan(np.sqrt(dx ** 2 + dy ** 2)) * (180.0 / np.pi)\n        aspect = np.arctan2(-dy, dx) * (180.0 / np.pi)\n\n        # Adjust aspect values to range from 0 to 360 degrees\n        aspect[aspect < 0] += 360\n        print(f\"slope shape: {slope.shape}\")\n        print(f\"aspect shape: {aspect.shape}\")\n        \n        \n    return slope, aspect\n  \ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n  \ndef calculate_curvature(dem_file, sigma=1):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradient using the Sobel filter\n        dx = sobel(dem_data, axis=1, mode='constant')\n        dy = sobel(dem_data, axis=0, mode='constant')\n\n        # Calculate the second derivatives using the Sobel filter\n        dxx = sobel(dx, axis=1, mode='constant')\n        dyy = sobel(dy, axis=0, mode='constant')\n\n        # Calculate the curvature using the second derivatives\n        curvature = dxx + dyy\n\n        # Smooth the curvature using Gaussian filtering (optional)\n        curvature = gaussian_filter(curvature, sigma)\n\n    return curvature\n  \ndef calculate_gradients(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradients along the North and East directions\n        dy, dx = np.gradient(dem_data, dataset.res[0], dataset.res[1])\n\n        # Calculate the Northness and Eastness\n        northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n        eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\n\n    return northness, eastness\n  \n  \ndef geotiff_to_csv(geotiff_file, csv_file, column_name):\n    # Open the GeoTIFF file\n    with rasterio.open(geotiff_file) as dataset:\n        # Get the pixel values as a 2D array\n        data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Get the width and height of the GeoTIFF\n        height, width = data.shape\n\n        # Open the CSV file for writing\n        with open(csv_file, 'w', newline='') as csvfile:\n            csvwriter = csv.writer(csvfile)\n\n            # Write the CSV header\n            csvwriter.writerow(['Latitude', 'Longitude', 'x', 'y', column_name])\n\n            # Loop through each pixel and extract latitude, longitude, and image value\n            for y in range(height):\n                for x in range(width):\n                    # Get the pixel value\n                    image_value = data[y, x]\n\n                    # Convert pixel coordinates to geographic coordinates\n                    lon, lat = transform * (x, y)\n\n                    # Write the data to the CSV file\n                    csvwriter.writerow([lat, lon, x, y, image_value])\n\n  \ndef read_elevation_data(file_path, result_dem_csv_path, result_dem_feature_csv_path):\n    neighborhood_size=4\n    df = pd.read_csv(file_path)\n    \n    dataset = rasterio.open(geotiff_file)\n    data = dataset.read(1)\n\n    # Get the width and height of the GeoTIFF\n    height, width = data.shape\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n  \n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n\n\ndem_file = \"/home/chetana/gridmet_test_run/dem_file.tif\"\nslope_file = '/home/chetana/gridmet_test_run/slope_file.tif'\naspect_file = '/home/chetana/gridmet_test_run/aspect_file.tif'\ncurvature_file = '/home/chetana/gridmet_test_run/curvature_file.tif'\nnorthness_file = '/home/chetana/gridmet_test_run/northness_file.tif'\neastness_file = '/home/chetana/gridmet_test_run/eastness_file.tif'\n\n\nslope, aspect = calculate_slope_aspect(dem_file)\ncurvature = calculate_curvature(dem_file)\nnorthness, eastness = calculate_gradients(dem_file)\n\n# Save the slope and aspect as new GeoTIFF files\nsave_as_geotiff(slope, slope_file, dem_file)\nsave_as_geotiff(aspect, aspect_file, dem_file)\nsave_as_geotiff(curvature, curvature_file, dem_file)\nsave_as_geotiff(northness, northness_file, dem_file)\nsave_as_geotiff(eastness, eastness_file, dem_file)\n\ngeotiff_to_csv(dem_file, dem_file+\".csv\", \"Elevation\")\ngeotiff_to_csv(slope_file, slope_file+\".csv\", \"Slope\")\ngeotiff_to_csv(aspect_file, aspect_file+\".csv\", \"Aspect\")\ngeotiff_to_csv(curvature_file, curvature_file+\".csv\", \"Curvature\")\ngeotiff_to_csv(northness_file, northness_file+\".csv\", \"Northness\")\ngeotiff_to_csv(eastness_file, eastness_file+\".csv\", \"Eastness\")\n\n# List of file paths for the CSV files\ncsv_files = [dem_file+\".csv\", slope_file+\".csv\", aspect_file+\".csv\", \n             curvature_file+\".csv\", northness_file+\".csv\", eastness_file+\".csv\"]\n\n# Initialize an empty list to store all dataframes\ndfs = []\n\n# Read each CSV file into separate dataframes\nfor file in csv_files:\n    df = pd.read_csv(file, encoding='utf-8')\n    dfs.append(df)\n\n# Merge the dataframes based on the latitude and longitude columns\nmerged_df = dfs[0]  # Start with the first dataframe\nfor i in range(1, len(dfs)):\n    merged_df = pd.merge(merged_df, dfs[i], on=['Latitude', 'Longitude', 'x', 'y'])\n\n# Save the merged dataframe to a new CSV file\nmerged_df.to_csv(result_dem_feature_csv_path, index=False)\n",
  "history_output" : "",
  "history_begin_time" : 1691530618001,
  "history_end_time" : 1691530620308,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "tq3z35",
  "indicator" : "Failed"
},{
  "history_id" : "co1yzzbnb2l",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\nimport rasterio\nimport csv\nfrom rasterio.transform import Affine\nfrom scipy.ndimage import sobel, gaussian_filter\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect_for_single(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef save_as_geotiff(data, output_file, src_file):\n    with rasterio.open(src_file) as src_dataset:\n        profile = src_dataset.profile\n        transform = src_dataset.transform\n\n        # Update the data type, count, and set the transform for the new dataset\n        profile.update(dtype=rasterio.float32, count=1, transform=transform)\n\n        # Create the new GeoTIFF file\n        with rasterio.open(output_file, 'w', **profile) as dst_dataset:\n            # Write the data to the new GeoTIFF\n            dst_dataset.write(data, 1)\n  \n\ndef calculate_slope_aspect(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Calculate the slope and aspect using numpy\n        dx, dy = np.gradient(dem_data, transform[0], transform[4])\n        slope = np.arctan(np.sqrt(dx ** 2 + dy ** 2)) * (180.0 / np.pi)\n        aspect = np.arctan2(-dy, dx) * (180.0 / np.pi)\n\n        # Adjust aspect values to range from 0 to 360 degrees\n        aspect[aspect < 0] += 360\n        print(f\"slope shape: {slope.shape}\")\n        print(f\"aspect shape: {aspect.shape}\")\n        \n        \n    return slope, aspect\n  \ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n  \ndef calculate_curvature(dem_file, sigma=1):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradient using the Sobel filter\n        dx = sobel(dem_data, axis=1, mode='constant')\n        dy = sobel(dem_data, axis=0, mode='constant')\n\n        # Calculate the second derivatives using the Sobel filter\n        dxx = sobel(dx, axis=1, mode='constant')\n        dyy = sobel(dy, axis=0, mode='constant')\n\n        # Calculate the curvature using the second derivatives\n        curvature = dxx + dyy\n\n        # Smooth the curvature using Gaussian filtering (optional)\n        curvature = gaussian_filter(curvature, sigma)\n\n    return curvature\n  \ndef calculate_gradients(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradients along the North and East directions\n        dy, dx = np.gradient(dem_data, dataset.res[0], dataset.res[1])\n\n        # Calculate the Northness and Eastness\n        northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n        eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\n\n    return northness, eastness\n  \n  \ndef geotiff_to_csv(geotiff_file, csv_file, column_name):\n    # Open the GeoTIFF file\n    with rasterio.open(geotiff_file) as dataset:\n        # Get the pixel values as a 2D array\n        data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Get the width and height of the GeoTIFF\n        height, width = data.shape\n\n        # Open the CSV file for writing\n        with open(csv_file, 'w', newline='') as csvfile:\n            csvwriter = csv.writer(csvfile)\n\n            # Write the CSV header\n            csvwriter.writerow(['Latitude', 'Longitude', 'x', 'y', column_name])\n\n            # Loop through each pixel and extract latitude, longitude, and image value\n            for y in range(height):\n                for x in range(width):\n                    # Get the pixel value\n                    image_value = data[y, x]\n\n                    # Convert pixel coordinates to geographic coordinates\n                    lon, lat = transform * (x, y)\n\n                    # Write the data to the CSV file\n                    csvwriter.writerow([lat, lon, x, y, image_value])\n\n  \ndef read_elevation_data(file_path, result_dem_csv_path, result_dem_feature_csv_path):\n    neighborhood_size=4\n    df = pd.read_csv(file_path)\n    \n    dataset = rasterio.open(geotiff_file)\n    data = dataset.read(1)\n\n    # Get the width and height of the GeoTIFF\n    height, width = data.shape\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n  \n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n\n\ndem_file = \"/home/chetana/gridmet_test_run/dem_file.tif\"\nslope_file = '/home/chetana/gridmet_test_run/slope_file.tif'\naspect_file = '/home/chetana/gridmet_test_run/aspect_file.tif'\ncurvature_file = '/home/chetana/gridmet_test_run/curvature_file.tif'\nnorthness_file = '/home/chetana/gridmet_test_run/northness_file.tif'\neastness_file = '/home/chetana/gridmet_test_run/eastness_file.tif'\n\n\nslope, aspect = calculate_slope_aspect(dem_file)\ncurvature = calculate_curvature(dem_file)\nnorthness, eastness = calculate_gradients(dem_file)\n\n# Save the slope and aspect as new GeoTIFF files\nsave_as_geotiff(slope, slope_file, dem_file)\nsave_as_geotiff(aspect, aspect_file, dem_file)\nsave_as_geotiff(curvature, curvature_file, dem_file)\nsave_as_geotiff(northness, northness_file, dem_file)\nsave_as_geotiff(eastness, eastness_file, dem_file)\n\ngeotiff_to_csv(dem_file, dem_file+\".csv\", \"Elevation\")\ngeotiff_to_csv(slope_file, slope_file+\".csv\", \"Slope\")\ngeotiff_to_csv(aspect_file, aspect_file+\".csv\", \"Aspect\")\ngeotiff_to_csv(curvature_file, curvature_file+\".csv\", \"Curvature\")\ngeotiff_to_csv(northness_file, northness_file+\".csv\", \"Northness\")\ngeotiff_to_csv(eastness_file, eastness_file+\".csv\", \"Eastness\")\n\n# List of file paths for the CSV files\ncsv_files = [dem_file+\".csv\", slope_file+\".csv\", aspect_file+\".csv\", \n             curvature_file+\".csv\", northness_file+\".csv\", eastness_file+\".csv\"]\n\n# Initialize an empty list to store all dataframes\ndfs = []\n\n# Read each CSV file into separate dataframes\nfor file in csv_files:\n    df = pd.read_csv(file, encoding='utf-8')\n    dfs.append(df)\n\n# Merge the dataframes based on the latitude and longitude columns\nmerged_df = dfs[0]  # Start with the first dataframe\nfor i in range(1, len(dfs)):\n    merged_df = pd.merge(merged_df, dfs[i], on=['Latitude', 'Longitude', 'x', 'y'])\n\n# Save the merged dataframe to a new CSV file\nmerged_df.to_csv(result_dem_feature_csv_path, index=False)\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/co1yzzbnb2l/western_us_dem.py\", line 3, in <module>\n    from osgeo import gdal\nModuleNotFoundError: No module named 'osgeo'\n",
  "history_begin_time" : 1691530600561,
  "history_end_time" : 1691530614283,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "tq3z35",
  "indicator" : "Stopped"
},{
  "history_id" : "dGaHkcIqohYJ",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\nimport rasterio\nimport csv\nfrom rasterio.transform import Affine\nfrom scipy.ndimage import sobel, gaussian_filter\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect_for_single(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef save_as_geotiff(data, output_file, src_file):\n    with rasterio.open(src_file) as src_dataset:\n        profile = src_dataset.profile\n        transform = src_dataset.transform\n\n        # Update the data type, count, and set the transform for the new dataset\n        profile.update(dtype=rasterio.float32, count=1, transform=transform)\n\n        # Create the new GeoTIFF file\n        with rasterio.open(output_file, 'w', **profile) as dst_dataset:\n            # Write the data to the new GeoTIFF\n            dst_dataset.write(data, 1)\n  \n\ndef calculate_slope_aspect(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Calculate the slope and aspect using numpy\n        dx, dy = np.gradient(dem_data, transform[0], transform[4])\n        slope = np.arctan(np.sqrt(dx ** 2 + dy ** 2)) * (180.0 / np.pi)\n        aspect = np.arctan2(-dy, dx) * (180.0 / np.pi)\n\n        # Adjust aspect values to range from 0 to 360 degrees\n        aspect[aspect < 0] += 360\n        print(f\"slope shape: {slope.shape}\")\n        print(f\"aspect shape: {aspect.shape}\")\n        \n        \n    return slope, aspect\n  \ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n  \ndef calculate_curvature(dem_file, sigma=1):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradient using the Sobel filter\n        dx = sobel(dem_data, axis=1, mode='constant')\n        dy = sobel(dem_data, axis=0, mode='constant')\n\n        # Calculate the second derivatives using the Sobel filter\n        dxx = sobel(dx, axis=1, mode='constant')\n        dyy = sobel(dy, axis=0, mode='constant')\n\n        # Calculate the curvature using the second derivatives\n        curvature = dxx + dyy\n\n        # Smooth the curvature using Gaussian filtering (optional)\n        curvature = gaussian_filter(curvature, sigma)\n\n    return curvature\n  \ndef calculate_gradients(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradients along the North and East directions\n        dy, dx = np.gradient(dem_data, dataset.res[0], dataset.res[1])\n\n        # Calculate the Northness and Eastness\n        northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n        eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\n\n    return northness, eastness\n  \n  \ndef geotiff_to_csv(geotiff_file, csv_file, column_name):\n    # Open the GeoTIFF file\n    with rasterio.open(geotiff_file) as dataset:\n        # Get the pixel values as a 2D array\n        data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Get the width and height of the GeoTIFF\n        height, width = data.shape\n\n        # Open the CSV file for writing\n        with open(csv_file, 'w', newline='') as csvfile:\n            csvwriter = csv.writer(csvfile)\n\n            # Write the CSV header\n            csvwriter.writerow(['Latitude', 'Longitude', 'x', 'y', column_name])\n\n            # Loop through each pixel and extract latitude, longitude, and image value\n            for y in range(height):\n                for x in range(width):\n                    # Get the pixel value\n                    image_value = data[y, x]\n\n                    # Convert pixel coordinates to geographic coordinates\n                    lon, lat = transform * (x, y)\n\n                    # Write the data to the CSV file\n                    csvwriter.writerow([lat, lon, x, y, image_value])\n\n  \ndef read_elevation_data(file_path, result_dem_csv_path, result_dem_feature_csv_path):\n    neighborhood_size=4\n    df = pd.read_csv(file_path)\n    \n    dataset = rasterio.open(geotiff_file)\n    data = dataset.read(1)\n\n    # Get the width and height of the GeoTIFF\n    height, width = data.shape\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n  \n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n\n\ndem_file = \"/home/chetana/gridmet_test_run/dem_file.tif\"\nslope_file = '/home/chetana/gridmet_test_run/slope_file.tif'\naspect_file = '/home/chetana/gridmet_test_run/aspect_file.tif'\ncurvature_file = '/home/chetana/gridmet_test_run/curvature_file.tif'\nnorthness_file = '/home/chetana/gridmet_test_run/northness_file.tif'\neastness_file = '/home/chetana/gridmet_test_run/eastness_file.tif'\n\n\nslope, aspect = calculate_slope_aspect(dem_file)\ncurvature = calculate_curvature(dem_file)\nnorthness, eastness = calculate_gradients(dem_file)\n\n# Save the slope and aspect as new GeoTIFF files\nsave_as_geotiff(slope, slope_file, dem_file)\nsave_as_geotiff(aspect, aspect_file, dem_file)\nsave_as_geotiff(curvature, curvature_file, dem_file)\nsave_as_geotiff(northness, northness_file, dem_file)\nsave_as_geotiff(eastness, eastness_file, dem_file)\n\ngeotiff_to_csv(dem_file, dem_file+\".csv\", \"Elevation\")\ngeotiff_to_csv(slope_file, slope_file+\".csv\", \"Slope\")\ngeotiff_to_csv(aspect_file, aspect_file+\".csv\", \"Aspect\")\ngeotiff_to_csv(curvature_file, curvature_file+\".csv\", \"Curvature\")\ngeotiff_to_csv(northness_file, northness_file+\".csv\", \"Northness\")\ngeotiff_to_csv(eastness_file, eastness_file+\".csv\", \"Eastness\")\n\n# List of file paths for the CSV files\ncsv_files = [dem_file+\".csv\", slope_file+\".csv\", aspect_file+\".csv\", \n             curvature_file+\".csv\", northness_file+\".csv\", eastness_file+\".csv\"]\n\n# Initialize an empty list to store all dataframes\ndfs = []\n\n# Read each CSV file into separate dataframes\nfor file in csv_files:\n    df = pd.read_csv(file, encoding='utf-8')\n    dfs.append(df)\n\n# Merge the dataframes based on the latitude and longitude columns\nmerged_df = dfs[0]  # Start with the first dataframe\nfor i in range(1, len(dfs)):\n    merged_df = pd.merge(merged_df, dfs[i], on=['Latitude', 'Longitude', 'x', 'y'])\n\n# Save the merged dataframe to a new CSV file\nmerged_df.to_csv(result_dem_feature_csv_path, index=False)\n",
  "history_output" : "/home/chetana/gw-workspace/dGaHkcIqohYJ/western_us_dem.py:107: RuntimeWarning: invalid value encountered in true_divide\n  northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n/home/chetana/gw-workspace/dGaHkcIqohYJ/western_us_dem.py:108: RuntimeWarning: invalid value encountered in true_divide\n  eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\nslope shape: (666, 694)\naspect shape: (666, 694)\n",
  "history_begin_time" : 1690261427808,
  "history_end_time" : 1690261441919,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "8cS9A8dQoAxo",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\nimport rasterio\nimport csv\nfrom rasterio.transform import Affine\nfrom scipy.ndimage import sobel, gaussian_filter\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect_for_single(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef save_as_geotiff(data, output_file, src_file):\n    with rasterio.open(src_file) as src_dataset:\n        profile = src_dataset.profile\n        transform = src_dataset.transform\n\n        # Update the data type, count, and set the transform for the new dataset\n        profile.update(dtype=rasterio.float32, count=1, transform=transform)\n\n        # Create the new GeoTIFF file\n        with rasterio.open(output_file, 'w', **profile) as dst_dataset:\n            # Write the data to the new GeoTIFF\n            dst_dataset.write(data, 1)\n  \n\ndef calculate_slope_aspect(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Calculate the slope and aspect using numpy\n        dx, dy = np.gradient(dem_data, transform[0], transform[4])\n        slope = np.arctan(np.sqrt(dx ** 2 + dy ** 2)) * (180.0 / np.pi)\n        aspect = np.arctan2(-dy, dx) * (180.0 / np.pi)\n\n        # Adjust aspect values to range from 0 to 360 degrees\n        aspect[aspect < 0] += 360\n        print(f\"slope shape: {slope.shape}\")\n        print(f\"aspect shape: {aspect.shape}\")\n        \n        \n    return slope, aspect\n  \ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n  \ndef calculate_curvature(dem_file, sigma=1):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradient using the Sobel filter\n        dx = sobel(dem_data, axis=1, mode='constant')\n        dy = sobel(dem_data, axis=0, mode='constant')\n\n        # Calculate the second derivatives using the Sobel filter\n        dxx = sobel(dx, axis=1, mode='constant')\n        dyy = sobel(dy, axis=0, mode='constant')\n\n        # Calculate the curvature using the second derivatives\n        curvature = dxx + dyy\n\n        # Smooth the curvature using Gaussian filtering (optional)\n        curvature = gaussian_filter(curvature, sigma)\n\n    return curvature\n  \ndef calculate_gradients(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradients along the North and East directions\n        dy, dx = np.gradient(dem_data, dataset.res[0], dataset.res[1])\n\n        # Calculate the Northness and Eastness\n        northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n        eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\n\n    return northness, eastness\n  \n  \ndef geotiff_to_csv(geotiff_file, csv_file):\n    # Open the GeoTIFF file\n    with rasterio.open(geotiff_file) as dataset:\n        # Get the pixel values as a 2D array\n        data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Get the width and height of the GeoTIFF\n        height, width = data.shape\n\n        # Open the CSV file for writing\n        with open(csv_file, 'w', newline='') as csvfile:\n            csvwriter = csv.writer(csvfile)\n\n            # Write the CSV header\n            csvwriter.writerow(['Latitude', 'Longitude', 'x', 'y', 'Elevation'])\n\n            # Loop through each pixel and extract latitude, longitude, and image value\n            for y in range(height):\n                for x in range(width):\n                    # Get the pixel value\n                    image_value = data[y, x]\n\n                    # Convert pixel coordinates to geographic coordinates\n                    lon, lat = transform * (x, y)\n\n                    # Write the data to the CSV file\n                    csvwriter.writerow([lat, lon, x, y, image_value])\n\n  \ndef read_elevation_data(file_path, result_dem_csv_path, result_dem_feature_csv_path):\n    neighborhood_size=4\n    df = pd.read_csv(file_path)\n    \n    dataset = rasterio.open(geotiff_file)\n    data = dataset.read(1)\n\n    # Get the width and height of the GeoTIFF\n    height, width = data.shape\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n  \n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n\n\ndem_file = \"/home/chetana/gridmet_test_run/dem_file.tif\"\nslope_file = '/home/chetana/gridmet_test_run/slope_file.tif'\naspect_file = '/home/chetana/gridmet_test_run/aspect_file.tif'\ncurvature_file = '/home/chetana/gridmet_test_run/curvature_file.tif'\nnorthness_file = '/home/chetana/gridmet_test_run/northness_file.tif'\neastness_file = '/home/chetana/gridmet_test_run/eastness_file.tif'\n\n\nslope, aspect = calculate_slope_aspect(dem_file)\ncurvature = calculate_curvature(dem_file)\nnorthness, eastness = calculate_gradients(dem_file)\n\n# Save the slope and aspect as new GeoTIFF files\nsave_as_geotiff(slope, slope_file, dem_file)\nsave_as_geotiff(aspect, aspect_file, dem_file)\nsave_as_geotiff(curvature, curvature_file, dem_file)\nsave_as_geotiff(northness, northness_file, dem_file)\nsave_as_geotiff(eastness, eastness_file, dem_file)\n\ngeotiff_to_csv(dem_file, dem_file+\".csv\")\ngeotiff_to_csv(slope_file, slope_file+\".csv\")\ngeotiff_to_csv(aspect_file, aspect_file+\".csv\")\ngeotiff_to_csv(curvature_file, curvature_file+\".csv\")\ngeotiff_to_csv(northness_file, northness_file+\".csv\")\ngeotiff_to_csv(eastness_file, eastness_file+\".csv\")\n\n# List of file paths for the CSV files\ncsv_files = [dem_file+\".csv\", slope_file+\".csv\", aspect_file+\".csv\", \n             curvature_file+\".csv\", northness_file+\".csv\", eastness_file+\".csv\"]\n\n# Initialize an empty list to store all dataframes\ndfs = []\n\n# Read each CSV file into separate dataframes\nfor file in csv_files:\n    df = pd.read_csv(file, encoding='utf-8')\n    dfs.append(df)\n\n# Merge the dataframes based on the latitude and longitude columns\nmerged_df = dfs[0]  # Start with the first dataframe\nfor i in range(1, len(dfs)):\n    merged_df = pd.merge(merged_df, dfs[i], on=['Latitude', 'Longitude', 'x', 'y'])\n\n# Save the merged dataframe to a new CSV file\nmerged_df.to_csv(result_dem_feature_csv_path, index=False)\n",
  "history_output" : "/home/chetana/gw-workspace/8cS9A8dQoAxo/western_us_dem.py:107: RuntimeWarning: invalid value encountered in true_divide\n  northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n/home/chetana/gw-workspace/8cS9A8dQoAxo/western_us_dem.py:108: RuntimeWarning: invalid value encountered in true_divide\n  eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\nslope shape: (666, 694)\naspect shape: (666, 694)\n",
  "history_begin_time" : 1690261302691,
  "history_end_time" : 1690261316508,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "4d7pceQwMCfK",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\nimport rasterio\nimport csv\nfrom rasterio.transform import Affine\nfrom scipy.ndimage import sobel, gaussian_filter\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect_for_single(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef save_as_geotiff(data, output_file, src_file):\n    with rasterio.open(src_file) as src_dataset:\n        profile = src_dataset.profile\n        transform = src_dataset.transform\n\n        # Update the data type, count, and set the transform for the new dataset\n        profile.update(dtype=rasterio.float32, count=1, transform=transform)\n\n        # Create the new GeoTIFF file\n        with rasterio.open(output_file, 'w', **profile) as dst_dataset:\n            # Write the data to the new GeoTIFF\n            dst_dataset.write(data, 1)\n  \n\ndef calculate_slope_aspect(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Calculate the slope and aspect using numpy\n        dx, dy = np.gradient(dem_data, transform[0], transform[4])\n        slope = np.arctan(np.sqrt(dx ** 2 + dy ** 2)) * (180.0 / np.pi)\n        aspect = np.arctan2(-dy, dx) * (180.0 / np.pi)\n\n        # Adjust aspect values to range from 0 to 360 degrees\n        aspect[aspect < 0] += 360\n        print(f\"slope shape: {slope.shape}\")\n        print(f\"aspect shape: {aspect.shape}\")\n        \n        \n    return slope, aspect\n  \ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n  \ndef calculate_curvature(dem_file, sigma=1):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradient using the Sobel filter\n        dx = sobel(dem_data, axis=1, mode='constant')\n        dy = sobel(dem_data, axis=0, mode='constant')\n\n        # Calculate the second derivatives using the Sobel filter\n        dxx = sobel(dx, axis=1, mode='constant')\n        dyy = sobel(dy, axis=0, mode='constant')\n\n        # Calculate the curvature using the second derivatives\n        curvature = dxx + dyy\n\n        # Smooth the curvature using Gaussian filtering (optional)\n        curvature = gaussian_filter(curvature, sigma)\n\n    return curvature\n  \ndef calculate_gradients(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradients along the North and East directions\n        dy, dx = np.gradient(dem_data, dataset.res[0], dataset.res[1])\n\n        # Calculate the Northness and Eastness\n        northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n        eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\n\n    return northness, eastness\n  \n  \ndef geotiff_to_csv(geotiff_file, csv_file):\n    # Open the GeoTIFF file\n    with rasterio.open(geotiff_file) as dataset:\n        # Get the pixel values as a 2D array\n        data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Get the width and height of the GeoTIFF\n        height, width = data.shape\n\n        # Open the CSV file for writing\n        with open(csv_file, 'w', newline='') as csvfile:\n            csvwriter = csv.writer(csvfile)\n\n            # Write the CSV header\n            csvwriter.writerow(['Latitude', 'Longitude', 'x', 'y', 'Elevation'])\n\n            # Loop through each pixel and extract latitude, longitude, and image value\n            for y in range(height):\n                for x in range(width):\n                    # Get the pixel value\n                    image_value = data[y, x]\n\n                    # Convert pixel coordinates to geographic coordinates\n                    lon, lat = transform * (x, y)\n\n                    # Write the data to the CSV file\n                    csvwriter.writerow([lat, lon, x, y, image_value])\n\n  \ndef read_elevation_data(file_path, result_dem_csv_path, result_dem_feature_csv_path):\n    neighborhood_size=4\n    df = pd.read_csv(file_path)\n    \n    dataset = rasterio.open(geotiff_file)\n    data = dataset.read(1)\n\n    # Get the width and height of the GeoTIFF\n    height, width = data.shape\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n  \n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n\n\ndem_file = \"/home/chetana/gridmet_test_run/dem_file.tif\"\nslope_file = '/home/chetana/gridmet_test_run/slope_file.tif'\naspect_file = '/home/chetana/gridmet_test_run/aspect_file.tif'\ncurvature_file = '/home/chetana/gridmet_test_run/curvature_file.tif'\nnorthness_file = '/home/chetana/gridmet_test_run/northness_file.tif'\neastness_file = '/home/chetana/gridmet_test_run/eastness_file.tif'\n\n\nslope, aspect = calculate_slope_aspect(dem_file)\ncurvature = calculate_curvature(dem_file)\nnorthness, eastness = calculate_gradients(dem_file)\n\n# Save the slope and aspect as new GeoTIFF files\nsave_as_geotiff(slope, slope_file, dem_file)\nsave_as_geotiff(aspect, aspect_file, dem_file)\nsave_as_geotiff(curvature, curvature_file, dem_file)\nsave_as_geotiff(northness, northness_file, dem_file)\nsave_as_geotiff(eastness, eastness_file, dem_file)\n\ngeotiff_to_csv(dem_file, dem_file+\".csv\")\ngeotiff_to_csv(slope_file, slope_file+\".csv\")\ngeotiff_to_csv(aspect_file, aspect_file+\".csv\")\ngeotiff_to_csv(curvature_file, curvature_file+\".csv\")\ngeotiff_to_csv(northness_file, northness_file+\".csv\")\ngeotiff_to_csv(eastness_file, eastness_file+\".csv\")\n\n# List of file paths for the CSV files\ncsv_files = [dem_file+\".csv\", slope_file+\".csv\", aspect_file+\".csv\", \n             curvature_file+\".csv\", northness_file+\".csv\", eastness_file+\".csv\"]\n\n# Initialize an empty list to store all dataframes\ndfs = []\n\n# Read each CSV file into separate dataframes\nfor file in csv_files:\n    df = pd.read_csv(file, encoding='utf-8')\n    dfs.append(df)\n\n# Merge the dataframes based on the latitude and longitude columns\nmerged_df = dfs[0]  # Start with the first dataframe\nfor i in range(1, len(dfs)):\n    merged_df = pd.merge(merged_df, dfs[i], on=['Latitude', 'Longitude'])\n\n# Save the merged dataframe to a new CSV file\nmerged_df.to_csv(result_dem_feature_csv_path, index=False)\n",
  "history_output" : "/home/chetana/gw-workspace/4d7pceQwMCfK/western_us_dem.py:107: RuntimeWarning: invalid value encountered in true_divide\n  northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n/home/chetana/gw-workspace/4d7pceQwMCfK/western_us_dem.py:108: RuntimeWarning: invalid value encountered in true_divide\n  eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\nslope shape: (666, 694)\naspect shape: (666, 694)\n",
  "history_begin_time" : 1690261260758,
  "history_end_time" : 1690261275968,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "XCHeSv7CWHkz",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\nimport rasterio\nimport csv\nfrom rasterio.transform import Affine\nfrom scipy.ndimage import sobel, gaussian_filter\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect_for_single(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef save_as_geotiff(data, output_file, src_file):\n    with rasterio.open(src_file) as src_dataset:\n        profile = src_dataset.profile\n        transform = src_dataset.transform\n\n        # Update the data type, count, and set the transform for the new dataset\n        profile.update(dtype=rasterio.float32, count=1, transform=transform)\n\n        # Create the new GeoTIFF file\n        with rasterio.open(output_file, 'w', **profile) as dst_dataset:\n            # Write the data to the new GeoTIFF\n            dst_dataset.write(data, 1)\n  \n\ndef calculate_slope_aspect(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Calculate the slope and aspect using numpy\n        dx, dy = np.gradient(dem_data, transform[0], transform[4])\n        slope = np.arctan(np.sqrt(dx ** 2 + dy ** 2)) * (180.0 / np.pi)\n        aspect = np.arctan2(-dy, dx) * (180.0 / np.pi)\n\n        # Adjust aspect values to range from 0 to 360 degrees\n        aspect[aspect < 0] += 360\n        print(f\"slope shape: {slope.shape}\")\n        print(f\"aspect shape: {aspect.shape}\")\n        \n        \n    return slope, aspect\n  \ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n  \ndef calculate_curvature(dem_file, sigma=1):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradient using the Sobel filter\n        dx = sobel(dem_data, axis=1, mode='constant')\n        dy = sobel(dem_data, axis=0, mode='constant')\n\n        # Calculate the second derivatives using the Sobel filter\n        dxx = sobel(dx, axis=1, mode='constant')\n        dyy = sobel(dy, axis=0, mode='constant')\n\n        # Calculate the curvature using the second derivatives\n        curvature = dxx + dyy\n\n        # Smooth the curvature using Gaussian filtering (optional)\n        curvature = gaussian_filter(curvature, sigma)\n\n    return curvature\n  \ndef calculate_gradients(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradients along the North and East directions\n        dy, dx = np.gradient(dem_data, dataset.res[0], dataset.res[1])\n\n        # Calculate the Northness and Eastness\n        northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n        eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\n\n    return northness, eastness\n  \n  \ndef geotiff_to_csv(geotiff_file, csv_file):\n    # Open the GeoTIFF file\n    with rasterio.open(geotiff_file) as dataset:\n        # Get the pixel values as a 2D array\n        data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Get the width and height of the GeoTIFF\n        height, width = data.shape\n\n        # Open the CSV file for writing\n        with open(csv_file, 'w', newline='') as csvfile:\n            csvwriter = csv.writer(csvfile)\n\n            # Write the CSV header\n            csvwriter.writerow(['Latitude', 'Longitude', 'x', 'y', 'Elevation'])\n\n            # Loop through each pixel and extract latitude, longitude, and image value\n            for y in range(height):\n                for x in range(width):\n                    # Get the pixel value\n                    image_value = data[y, x]\n\n                    # Convert pixel coordinates to geographic coordinates\n                    lon, lat = transform * (x, y)\n\n                    # Write the data to the CSV file\n                    csvwriter.writerow([lat, lon, x, y, image_value])\n\n  \ndef read_elevation_data(file_path, result_dem_csv_path, result_dem_feature_csv_path):\n    neighborhood_size=4\n    df = pd.read_csv(file_path)\n    \n    dataset = rasterio.open(geotiff_file)\n    data = dataset.read(1)\n\n    # Get the width and height of the GeoTIFF\n    height, width = data.shape\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n  \n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n\n\ndem_file = \"/home/chetana/gridmet_test_run/dem_file.tif\"\nslope_file = '/home/chetana/gridmet_test_run/slope_file.tif'\naspect_file = '/home/chetana/gridmet_test_run/aspect_file.tif'\ncurvature_file = '/home/chetana/gridmet_test_run/curvature_file.tif'\nnorthness_file = '/home/chetana/gridmet_test_run/northness_file.tif'\neastness_file = '/home/chetana/gridmet_test_run/eastness_file.tif'\n\n\nslope, aspect = calculate_slope_aspect(dem_file)\ncurvature = calculate_curvature(dem_file)\nnorthness, eastness = calculate_gradients(dem_file)\n\n# Save the slope and aspect as new GeoTIFF files\nsave_as_geotiff(slope, slope_file, dem_file)\nsave_as_geotiff(aspect, aspect_file, dem_file)\nsave_as_geotiff(curvature, curvature_file, dem_file)\nsave_as_geotiff(northness, northness_file, dem_file)\nsave_as_geotiff(eastness, eastness_file, dem_file)\n\ngeotiff_to_csv(dem_file, dem_file+\".csv\")\ngeotiff_to_csv(slope_file, slope_file+\".csv\")\ngeotiff_to_csv(aspect_file, aspect_file+\".csv\")\ngeotiff_to_csv(curvature_file, curvature_file+\".csv\")\ngeotiff_to_csv(northness_file, northness_file+\".csv\")\ngeotiff_to_csv(eastness_file, eastness_file+\".csv\")\n\n# List of file paths for the CSV files\ncsv_files = [dem_file+\".csv\", slope_file+\".csv\", aspect_file+\".csv\", \n             curvature_file+\".csv\", northness_file+\".csv\", eastness_file+\".csv\"]\n\n# Initialize an empty list to store all dataframes\ndfs = []\n\n# Read each CSV file into separate dataframes\nfor file in csv_files:\n    df = pd.read_csv(file, encoding='utf-8')\n    dfs.append(df)\n\n# Merge the dataframes based on the latitude and longitude columns\nmerged_df = dfs[0]  # Start with the first dataframe\nfor i in range(1, len(dfs)):\n    merged_df = pd.merge(merged_df, dfs[i], on=['latitude', 'longitude'])\n\n# Save the merged dataframe to a new CSV file\nmerged_df.to_csv(result_dem_feature_csv_path, index=False)\n",
  "history_output" : "/home/chetana/gw-workspace/XCHeSv7CWHkz/western_us_dem.py:107: RuntimeWarning: invalid value encountered in true_divide\n  northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n/home/chetana/gw-workspace/XCHeSv7CWHkz/western_us_dem.py:108: RuntimeWarning: invalid value encountered in true_divide\n  eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\nslope shape: (666, 694)\naspect shape: (666, 694)\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/XCHeSv7CWHkz/western_us_dem.py\", line 211, in <module>\n    merged_df = pd.merge(merged_df, dfs[i], on=['latitude', 'longitude'])\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/reshape/merge.py\", line 110, in merge\n    op = _MergeOperation(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/reshape/merge.py\", line 703, in __init__\n    ) = self._get_merge_keys()\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/reshape/merge.py\", line 1162, in _get_merge_keys\n    right_keys.append(right._get_label_or_level_values(rk))\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/core/generic.py\", line 1850, in _get_label_or_level_values\n    raise KeyError(key)\nKeyError: 'latitude'\n",
  "history_begin_time" : 1690261180853,
  "history_end_time" : 1690261191392,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "j0owTJRqvDqA",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\nimport rasterio\nimport csv\nfrom rasterio.transform import Affine\nfrom scipy.ndimage import sobel, gaussian_filter\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect_for_single(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef save_as_geotiff(data, output_file, src_file):\n    with rasterio.open(src_file) as src_dataset:\n        profile = src_dataset.profile\n        transform = src_dataset.transform\n\n        # Update the data type, count, and set the transform for the new dataset\n        profile.update(dtype=rasterio.float32, count=1, transform=transform)\n\n        # Create the new GeoTIFF file\n        with rasterio.open(output_file, 'w', **profile) as dst_dataset:\n            # Write the data to the new GeoTIFF\n            dst_dataset.write(data, 1)\n  \n\ndef calculate_slope_aspect(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Calculate the slope and aspect using numpy\n        dx, dy = np.gradient(dem_data, transform[0], transform[4])\n        slope = np.arctan(np.sqrt(dx ** 2 + dy ** 2)) * (180.0 / np.pi)\n        aspect = np.arctan2(-dy, dx) * (180.0 / np.pi)\n\n        # Adjust aspect values to range from 0 to 360 degrees\n        aspect[aspect < 0] += 360\n        print(f\"slope shape: {slope.shape}\")\n        print(f\"aspect shape: {aspect.shape}\")\n        \n        \n    return slope, aspect\n  \ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n  \ndef calculate_curvature(dem_file, sigma=1):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradient using the Sobel filter\n        dx = sobel(dem_data, axis=1, mode='constant')\n        dy = sobel(dem_data, axis=0, mode='constant')\n\n        # Calculate the second derivatives using the Sobel filter\n        dxx = sobel(dx, axis=1, mode='constant')\n        dyy = sobel(dy, axis=0, mode='constant')\n\n        # Calculate the curvature using the second derivatives\n        curvature = dxx + dyy\n\n        # Smooth the curvature using Gaussian filtering (optional)\n        curvature = gaussian_filter(curvature, sigma)\n\n    return curvature\n  \ndef calculate_gradients(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradients along the North and East directions\n        dy, dx = np.gradient(dem_data, dataset.res[0], dataset.res[1])\n\n        # Calculate the Northness and Eastness\n        northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n        eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\n\n    return northness, eastness\n  \n  \ndef geotiff_to_csv(geotiff_file, csv_file):\n    # Open the GeoTIFF file\n    with rasterio.open(geotiff_file) as dataset:\n        # Get the pixel values as a 2D array\n        data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Get the width and height of the GeoTIFF\n        height, width = data.shape\n\n        # Open the CSV file for writing\n        with open(csv_file, 'w', newline='') as csvfile:\n            csvwriter = csv.writer(csvfile)\n\n            # Write the CSV header\n            csvwriter.writerow(['Latitude', 'Longitude', 'x', 'y', 'Elevation'])\n\n            # Loop through each pixel and extract latitude, longitude, and image value\n            for y in range(height):\n                for x in range(width):\n                    # Get the pixel value\n                    image_value = data[y, x]\n\n                    # Convert pixel coordinates to geographic coordinates\n                    lon, lat = transform * (x, y)\n\n                    # Write the data to the CSV file\n                    csvwriter.writerow([lat, lon, x, y, image_value])\n\n  \ndef read_elevation_data(file_path, result_dem_csv_path, result_dem_feature_csv_path):\n    neighborhood_size=4\n    df = pd.read_csv(file_path)\n    \n    dataset = rasterio.open(geotiff_file)\n    data = dataset.read(1)\n\n    # Get the width and height of the GeoTIFF\n    height, width = data.shape\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n  \n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n\n\ndem_file = \"/home/chetana/gridmet_test_run/dem_file.tif\"\nslope_file = '/home/chetana/gridmet_test_run/slope_file.tif'\naspect_file = '/home/chetana/gridmet_test_run/aspect_file.tif'\ncurvature_file = '/home/chetana/gridmet_test_run/curvature_file.tif'\nnorthness_file = '/home/chetana/gridmet_test_run/northness_file.tif'\neastness_file = '/home/chetana/gridmet_test_run/eastness_file.tif'\n\n\nslope, aspect = calculate_slope_aspect(dem_file)\ncurvature = calculate_curvature(dem_file)\nnorthness, eastness = calculate_gradients(dem_file)\n\n# Save the slope and aspect as new GeoTIFF files\nsave_as_geotiff(slope, slope_file, dem_file)\nsave_as_geotiff(aspect, aspect_file, dem_file)\nsave_as_geotiff(curvature, curvature_file, dem_file)\nsave_as_geotiff(northness, northness_file, dem_file)\nsave_as_geotiff(eastness, eastness_file, dem_file)\n\ngeotiff_to_csv(dem_file, dem_file+\".csv\")\ngeotiff_to_csv(slope_file, slope_file+\".csv\")\ngeotiff_to_csv(aspect_file, aspect_file+\".csv\")\ngeotiff_to_csv(curvature_file, curvature_file+\".csv\")\ngeotiff_to_csv(northness_file, northness_file+\".csv\")\ngeotiff_to_csv(eastness_file, eastness_file+\".csv\")\n\n# List of file paths for the CSV files\ncsv_files = [dem_file, slope_file, aspect_file, curvature_file, \n             northness_file, eastness_file]\n\n# Initialize an empty list to store all dataframes\ndfs = []\n\n# Read each CSV file into separate dataframes\nfor file in csv_files:\n    df = pd.read_csv(file, encoding='utf-8')\n    dfs.append(df)\n\n# Merge the dataframes based on the latitude and longitude columns\nmerged_df = dfs[0]  # Start with the first dataframe\nfor i in range(1, len(dfs)):\n    merged_df = pd.merge(merged_df, dfs[i], on=['latitude', 'longitude'])\n\n# Save the merged dataframe to a new CSV file\nmerged_df.to_csv(result_dem_feature_csv_path, index=False)\n",
  "history_output" : "/home/chetana/gw-workspace/j0owTJRqvDqA/western_us_dem.py:107: RuntimeWarning: invalid value encountered in true_divide\n  northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n/home/chetana/gw-workspace/j0owTJRqvDqA/western_us_dem.py:108: RuntimeWarning: invalid value encountered in true_divide\n  eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\nslope shape: (666, 694)\naspect shape: (666, 694)\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/j0owTJRqvDqA/western_us_dem.py\", line 205, in <module>\n    df = pd.read_csv(file, encoding='utf-8')\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/util/_decorators.py\", line 211, in wrapper\n    return func(*args, **kwargs)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/util/_decorators.py\", line 331, in wrapper\n    return func(*args, **kwargs)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/io/parsers/readers.py\", line 950, in read_csv\n    return _read(filepath_or_buffer, kwds)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/io/parsers/readers.py\", line 611, in _read\n    return parser.read(nrows)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/io/parsers/readers.py\", line 1778, in read\n    ) = self._engine.read(  # type: ignore[attr-defined]\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/io/parsers/c_parser_wrapper.py\", line 230, in read\n    chunks = self._reader.read_low_memory(nrows)\n  File \"pandas/_libs/parsers.pyx\", line 808, in pandas._libs.parsers.TextReader.read_low_memory\n  File \"pandas/_libs/parsers.pyx\", line 866, in pandas._libs.parsers.TextReader._read_rows\n  File \"pandas/_libs/parsers.pyx\", line 852, in pandas._libs.parsers.TextReader._tokenize_rows\n  File \"pandas/_libs/parsers.pyx\", line 1973, in pandas._libs.parsers.raise_parser_error\npandas.errors.ParserError: Error tokenizing data. C error: Expected 5 fields in line 26, saw 11\n",
  "history_begin_time" : 1690261095699,
  "history_end_time" : 1690261104805,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "md4JsEofEfT6",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\nimport rasterio\nimport csv\nfrom rasterio.transform import Affine\nfrom scipy.ndimage import sobel, gaussian_filter\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect_for_single(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef save_as_geotiff(data, output_file, src_file):\n    with rasterio.open(src_file) as src_dataset:\n        profile = src_dataset.profile\n        transform = src_dataset.transform\n\n        # Update the data type, count, and set the transform for the new dataset\n        profile.update(dtype=rasterio.float32, count=1, transform=transform)\n\n        # Create the new GeoTIFF file\n        with rasterio.open(output_file, 'w', **profile) as dst_dataset:\n            # Write the data to the new GeoTIFF\n            dst_dataset.write(data, 1)\n  \n\ndef calculate_slope_aspect(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Calculate the slope and aspect using numpy\n        dx, dy = np.gradient(dem_data, transform[0], transform[4])\n        slope = np.arctan(np.sqrt(dx ** 2 + dy ** 2)) * (180.0 / np.pi)\n        aspect = np.arctan2(-dy, dx) * (180.0 / np.pi)\n\n        # Adjust aspect values to range from 0 to 360 degrees\n        aspect[aspect < 0] += 360\n        print(f\"slope shape: {slope.shape}\")\n        print(f\"aspect shape: {aspect.shape}\")\n        \n        \n    return slope, aspect\n  \ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n  \ndef calculate_curvature(dem_file, sigma=1):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradient using the Sobel filter\n        dx = sobel(dem_data, axis=1, mode='constant')\n        dy = sobel(dem_data, axis=0, mode='constant')\n\n        # Calculate the second derivatives using the Sobel filter\n        dxx = sobel(dx, axis=1, mode='constant')\n        dyy = sobel(dy, axis=0, mode='constant')\n\n        # Calculate the curvature using the second derivatives\n        curvature = dxx + dyy\n\n        # Smooth the curvature using Gaussian filtering (optional)\n        curvature = gaussian_filter(curvature, sigma)\n\n    return curvature\n  \ndef calculate_gradients(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradients along the North and East directions\n        dy, dx = np.gradient(dem_data, dataset.res[0], dataset.res[1])\n\n        # Calculate the Northness and Eastness\n        northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n        eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\n\n    return northness, eastness\n  \n  \ndef geotiff_to_csv(geotiff_file, csv_file):\n    # Open the GeoTIFF file\n    with rasterio.open(geotiff_file) as dataset:\n        # Get the pixel values as a 2D array\n        data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Get the width and height of the GeoTIFF\n        height, width = data.shape\n\n        # Open the CSV file for writing\n        with open(csv_file, 'w', newline='') as csvfile:\n            csvwriter = csv.writer(csvfile)\n\n            # Write the CSV header\n            csvwriter.writerow(['Latitude', 'Longitude', 'x', 'y', 'Elevation'])\n\n            # Loop through each pixel and extract latitude, longitude, and image value\n            for y in range(height):\n                for x in range(width):\n                    # Get the pixel value\n                    image_value = data[y, x]\n\n                    # Convert pixel coordinates to geographic coordinates\n                    lon, lat = transform * (x, y)\n\n                    # Write the data to the CSV file\n                    csvwriter.writerow([lat, lon, x, y, image_value])\n\n  \ndef read_elevation_data(file_path, result_dem_csv_path, result_dem_feature_csv_path):\n    neighborhood_size=4\n    df = pd.read_csv(file_path)\n    \n    dataset = rasterio.open(geotiff_file)\n    data = dataset.read(1)\n\n    # Get the width and height of the GeoTIFF\n    height, width = data.shape\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n  \n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n\n\ndem_file = \"/home/chetana/gridmet_test_run/dem_file.tif\"\nslope_file = '/home/chetana/gridmet_test_run/slope_file.tif'\naspect_file = '/home/chetana/gridmet_test_run/aspect_file.tif'\ncurvature_file = '/home/chetana/gridmet_test_run/curvature_file.tif'\nnorthness_file = '/home/chetana/gridmet_test_run/northness_file.tif'\neastness_file = '/home/chetana/gridmet_test_run/eastness_file.tif'\n\n\nslope, aspect = calculate_slope_aspect(dem_file)\ncurvature = calculate_curvature(dem_file)\nnorthness, eastness = calculate_gradients(dem_file)\n\n# Save the slope and aspect as new GeoTIFF files\nsave_as_geotiff(slope, slope_file, dem_file)\nsave_as_geotiff(aspect, aspect_file, dem_file)\nsave_as_geotiff(curvature, curvature_file, dem_file)\nsave_as_geotiff(northness, northness_file, dem_file)\nsave_as_geotiff(eastness, eastness_file, dem_file)\n\ngeotiff_to_csv(dem_file, dem_file+\".csv\")\ngeotiff_to_csv(slope_file, slope_file+\".csv\")\ngeotiff_to_csv(aspect_file, aspect_file+\".csv\")\ngeotiff_to_csv(curvature_file, curvature_file+\".csv\")\ngeotiff_to_csv(northness_file, northness_file+\".csv\")\ngeotiff_to_csv(eastness_file, eastness_file+\".csv\")\n\n# List of file paths for the CSV files\ncsv_files = [dem_file, slope_file, aspect_file, curvature_file, \n             northness_file, eastness_file]\n\n# Initialize an empty list to store all dataframes\ndfs = []\n\n# Read each CSV file into separate dataframes\nfor file in csv_files:\n    df = pd.read_csv(file)\n    dfs.append(df)\n\n# Merge the dataframes based on the latitude and longitude columns\nmerged_df = dfs[0]  # Start with the first dataframe\nfor i in range(1, len(dfs)):\n    merged_df = pd.merge(merged_df, dfs[i], on=['latitude', 'longitude'])\n\n# Save the merged dataframe to a new CSV file\nmerged_df.to_csv(result_dem_feature_csv_path, index=False)\n",
  "history_output" : "/home/chetana/gw-workspace/md4JsEofEfT6/western_us_dem.py:107: RuntimeWarning: invalid value encountered in true_divide\n  northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n/home/chetana/gw-workspace/md4JsEofEfT6/western_us_dem.py:108: RuntimeWarning: invalid value encountered in true_divide\n  eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\nslope shape: (666, 694)\naspect shape: (666, 694)\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/md4JsEofEfT6/western_us_dem.py\", line 205, in <module>\n    df = pd.read_csv(file)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/util/_decorators.py\", line 211, in wrapper\n    return func(*args, **kwargs)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/util/_decorators.py\", line 331, in wrapper\n    return func(*args, **kwargs)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/io/parsers/readers.py\", line 950, in read_csv\n    return _read(filepath_or_buffer, kwds)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/io/parsers/readers.py\", line 605, in _read\n    parser = TextFileReader(filepath_or_buffer, **kwds)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/io/parsers/readers.py\", line 1442, in __init__\n    self._engine = self._make_engine(f, self.engine)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/io/parsers/readers.py\", line 1753, in _make_engine\n    return mapping[engine](f, **self.options)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/pandas/io/parsers/c_parser_wrapper.py\", line 79, in __init__\n    self._reader = parsers.TextReader(src, **kwds)\n  File \"pandas/_libs/parsers.pyx\", line 547, in pandas._libs.parsers.TextReader.__cinit__\n  File \"pandas/_libs/parsers.pyx\", line 636, in pandas._libs.parsers.TextReader._get_header\n  File \"pandas/_libs/parsers.pyx\", line 852, in pandas._libs.parsers.TextReader._tokenize_rows\n  File \"pandas/_libs/parsers.pyx\", line 1965, in pandas._libs.parsers.raise_parser_error\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0xb6 in position 18: invalid start byte\n",
  "history_begin_time" : 1690261041183,
  "history_end_time" : 1690261050135,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "VpuW3hTzGVHH",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\nimport rasterio\nimport csv\nfrom rasterio.transform import Affine\nfrom scipy.ndimage import sobel, gaussian_filter\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect_for_single(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef save_as_geotiff(data, output_file, src_file):\n    with rasterio.open(src_file) as src_dataset:\n        profile = src_dataset.profile\n        transform = src_dataset.transform\n\n        # Update the data type, count, and set the transform for the new dataset\n        profile.update(dtype=rasterio.float32, count=1, transform=transform)\n\n        # Create the new GeoTIFF file\n        with rasterio.open(output_file, 'w', **profile) as dst_dataset:\n            # Write the data to the new GeoTIFF\n            dst_dataset.write(data, 1)\n  \n\ndef calculate_slope_aspect(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Calculate the slope and aspect using numpy\n        dx, dy = np.gradient(dem_data, transform[0], transform[4])\n        slope = np.arctan(np.sqrt(dx ** 2 + dy ** 2)) * (180.0 / np.pi)\n        aspect = np.arctan2(-dy, dx) * (180.0 / np.pi)\n\n        # Adjust aspect values to range from 0 to 360 degrees\n        aspect[aspect < 0] += 360\n        print(f\"slope shape: {slope.shape}\")\n        print(f\"aspect shape: {aspect.shape}\")\n        \n        \n    return slope, aspect\n  \ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n  \ndef calculate_curvature(dem_file, sigma=1):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradient using the Sobel filter\n        dx = sobel(dem_data, axis=1, mode='constant')\n        dy = sobel(dem_data, axis=0, mode='constant')\n\n        # Calculate the second derivatives using the Sobel filter\n        dxx = sobel(dx, axis=1, mode='constant')\n        dyy = sobel(dy, axis=0, mode='constant')\n\n        # Calculate the curvature using the second derivatives\n        curvature = dxx + dyy\n\n        # Smooth the curvature using Gaussian filtering (optional)\n        curvature = gaussian_filter(curvature, sigma)\n\n    return curvature\n  \ndef calculate_gradients(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradients along the North and East directions\n        dy, dx = np.gradient(dem_data, dataset.res[0], dataset.res[1])\n\n        # Calculate the Northness and Eastness\n        northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n        eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\n\n    return northness, eastness\n  \n  \ndef geotiff_to_csv(geotiff_file, csv_file):\n    # Open the GeoTIFF file\n    with rasterio.open(geotiff_file) as dataset:\n        # Get the pixel values as a 2D array\n        data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Get the width and height of the GeoTIFF\n        height, width = data.shape\n\n        # Open the CSV file for writing\n        with open(csv_file, 'w', newline='') as csvfile:\n            csvwriter = csv.writer(csvfile)\n\n            # Write the CSV header\n            csvwriter.writerow(['Latitude', 'Longitude', 'x', 'y', 'Elevation'])\n\n            # Loop through each pixel and extract latitude, longitude, and image value\n            for y in range(height):\n                for x in range(width):\n                    # Get the pixel value\n                    image_value = data[y, x]\n\n                    # Convert pixel coordinates to geographic coordinates\n                    lon, lat = transform * (x, y)\n\n                    # Write the data to the CSV file\n                    csvwriter.writerow([lat, lon, x, y, image_value])\n\n  \ndef read_elevation_data(file_path, result_dem_csv_path, result_dem_feature_csv_path):\n    neighborhood_size=4\n    df = pd.read_csv(file_path)\n    \n    dataset = rasterio.open(geotiff_file)\n    data = dataset.read(1)\n\n    # Get the width and height of the GeoTIFF\n    height, width = data.shape\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n  \n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n\n\ndem_file = \"/home/chetana/gridmet_test_run/dem_file.tif\"\nslope_file = '/home/chetana/gridmet_test_run/slope_file.tif'\naspect_file = '/home/chetana/gridmet_test_run/aspect_file.tif'\ncurvature_file = '/home/chetana/gridmet_test_run/curvature_file.tif'\nnorthness_file = '/home/chetana/gridmet_test_run/northness_file.tif'\neastness_file = '/home/chetana/gridmet_test_run/eastness_file.tif'\n\n\nslope, aspect = calculate_slope_aspect(dem_file)\ncurvature = calculate_curvature(dem_file)\nnorthness, eastness = calculate_gradients(dem_file)\n\n# Save the slope and aspect as new GeoTIFF files\nsave_as_geotiff(slope, slope_file, dem_file)\nsave_as_geotiff(aspect, aspect_file, dem_file)\nsave_as_geotiff(curvature, curvature_file, dem_file)\nsave_as_geotiff(northness, northness_file, dem_file)\nsave_as_geotiff(eastness, eastness_file, dem_file)\n\ngeotiff_to_csv(dem_file, dem_file+\".csv\")\ngeotiff_to_csv(slope_file, slope_file+\".csv\")\ngeotiff_to_csv(aspect_file, aspect_file+\".csv\")\ngeotiff_to_csv(curvature_file, curvature_file+\".csv\")\ngeotiff_to_csv(northness_file, northness_file+\".csv\")\ngeotiff_to_csv(eastness_file, eastness_file+\".csv\")\n\n#generate_all_elevation_variables(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\", result_dem_csv_path, result_dem_feature_csv_path)\n\n\n\n#final_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n",
  "history_output" : "/home/chetana/gw-workspace/VpuW3hTzGVHH/western_us_dem.py:107: RuntimeWarning: invalid value encountered in true_divide\n  northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n/home/chetana/gw-workspace/VpuW3hTzGVHH/western_us_dem.py:108: RuntimeWarning: invalid value encountered in true_divide\n  eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\nslope shape: (666, 694)\naspect shape: (666, 694)\n",
  "history_begin_time" : 1690260450645,
  "history_end_time" : 1690260459515,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "7gIvhDI1P23p",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\nimport rasterio\nimport csv\nfrom rasterio.transform import Affine\nfrom scipy.ndimage import sobel, gaussian_filter\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect_for_single(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef save_as_geotiff(data, output_file, src_file):\n    with rasterio.open(src_file) as src_dataset:\n        profile = src_dataset.profile\n        transform = src_dataset.transform\n\n        # Update the data type, count, and set the transform for the new dataset\n        profile.update(dtype=rasterio.float32, count=1, transform=transform)\n\n        # Create the new GeoTIFF file\n        with rasterio.open(output_file, 'w', **profile) as dst_dataset:\n            # Write the data to the new GeoTIFF\n            dst_dataset.write(data, 1)\n  \n\ndef calculate_slope_aspect(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Calculate the slope and aspect using numpy\n        dx, dy = np.gradient(dem_data, transform[0], transform[4])\n        slope = np.arctan(np.sqrt(dx ** 2 + dy ** 2)) * (180.0 / np.pi)\n        aspect = np.arctan2(-dy, dx) * (180.0 / np.pi)\n\n        # Adjust aspect values to range from 0 to 360 degrees\n        aspect[aspect < 0] += 360\n        print(f\"slope shape: {slope.shape}\")\n        print(f\"aspect shape: {aspect.shape}\")\n        \n        \n    return slope, aspect\n  \ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n  \ndef calculate_curvature(dem_file, sigma=1):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradient using the Sobel filter\n        dx = sobel(dem_data, axis=1, mode='constant')\n        dy = sobel(dem_data, axis=0, mode='constant')\n\n        # Calculate the second derivatives using the Sobel filter\n        dxx = sobel(dx, axis=1, mode='constant')\n        dyy = sobel(dy, axis=0, mode='constant')\n\n        # Calculate the curvature using the second derivatives\n        curvature = dxx + dyy\n\n        # Smooth the curvature using Gaussian filtering (optional)\n        curvature = gaussian_filter(curvature, sigma)\n\n    return curvature\n  \ndef calculate_gradients(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradients along the North and East directions\n        dy, dx = np.gradient(dem_data, dataset.res[0], dataset.res[1])\n\n        # Calculate the Northness and Eastness\n        northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n        eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\n\n    return northness, eastness\n  \n  \ndef geotiff_to_csv(geotiff_file, csv_file):\n    # Open the GeoTIFF file\n    with rasterio.open(geotiff_file) as dataset:\n        # Get the pixel values as a 2D array\n        data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Get the width and height of the GeoTIFF\n        height, width = data.shape\n\n        # Open the CSV file for writing\n        with open(csv_file, 'w', newline='') as csvfile:\n            csvwriter = csv.writer(csvfile)\n\n            # Write the CSV header\n            csvwriter.writerow(['Latitude', 'Longitude', 'x', 'y', 'Elevation'])\n\n            # Loop through each pixel and extract latitude, longitude, and image value\n            for y in range(height):\n                for x in range(width):\n                    # Get the pixel value\n                    image_value = data[y, x]\n\n                    # Convert pixel coordinates to geographic coordinates\n                    lon, lat = transform * (x, y)\n\n                    # Write the data to the CSV file\n                    csvwriter.writerow([lat, lon, x, y, image_value])\n\n  \ndef read_elevation_data(file_path, result_dem_csv_path, result_dem_feature_csv_path):\n    neighborhood_size=4\n    df = pd.read_csv(file_path)\n    \n    dataset = rasterio.open(geotiff_file)\n    data = dataset.read(1)\n\n    # Get the width and height of the GeoTIFF\n    height, width = data.shape\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n  \n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n\n\ndem_file = \"/home/chetana/gridmet_test_run/output_4km_clipped.tif\"\nslope_file = '/home/chetana/gridmet_test_run/slope_file.tif'\naspect_file = '/home/chetana/gridmet_test_run/aspect_file.tif'\ncurvature_file = '/home/chetana/gridmet_test_run/curvature_file.tif'\nnorthness_file = '/home/chetana/gridmet_test_run/northness_file.tif'\neastness_file = '/home/chetana/gridmet_test_run/eastness_file.tif'\n\n#geotiff_to_csv(dem_file, result_dem_csv_path)\n\n\nslope, aspect = calculate_slope_aspect(dem_file)\ncurvature = calculate_curvature(dem_file)\nnorthness, eastness = calculate_gradients(dem_file)\n\n# Save the slope and aspect as new GeoTIFF files\nsave_as_geotiff(slope, slope_file, dem_file)\nsave_as_geotiff(aspect, aspect_file, dem_file)\nsave_as_geotiff(curvature, curvature_file, dem_file)\nsave_as_geotiff(northness, northness_file, dem_file)\nsave_as_geotiff(eastness, eastness_file, dem_file)\n\ngeotiff_to_csv(dem_file, dem_file+\".csv\")\ngeotiff_to_csv(slope_file, slope_file+\".csv\")\ngeotiff_to_csv(aspect_file, aspect_file+\".csv\")\ngeotiff_to_csv(curvature_file, curvature_file+\".csv\")\ngeotiff_to_csv(northness_file, northness_file+\".csv\")\ngeotiff_to_csv(eastness_file, eastness_file+\".csv\")\n\n#generate_all_elevation_variables(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\", result_dem_csv_path, result_dem_feature_csv_path)\n\n\n\n#final_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n",
  "history_output" : "/home/chetana/gw-workspace/7gIvhDI1P23p/western_us_dem.py:107: RuntimeWarning: invalid value encountered in true_divide\n  northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n/home/chetana/gw-workspace/7gIvhDI1P23p/western_us_dem.py:108: RuntimeWarning: invalid value encountered in true_divide\n  eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\nslope shape: (666, 694)\naspect shape: (666, 694)\n",
  "history_begin_time" : 1690260295692,
  "history_end_time" : 1690260304684,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "eVr45NhOh1V0",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\nimport rasterio\nimport csv\nfrom rasterio.transform import Affine\nfrom scipy.ndimage import sobel, gaussian_filter\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect_for_single(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef save_as_geotiff(data, output_file, src_file):\n    with rasterio.open(src_file) as src_dataset:\n        profile = src_dataset.profile\n        transform = src_dataset.transform\n\n        # Update the data type, count, and set the transform for the new dataset\n        profile.update(dtype=rasterio.float32, count=1, transform=transform)\n\n        # Create the new GeoTIFF file\n        with rasterio.open(output_file, 'w', **profile) as dst_dataset:\n            # Write the data to the new GeoTIFF\n            dst_dataset.write(data, 1)\n  \n\ndef calculate_slope_aspect(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Calculate the slope and aspect using numpy\n        dx, dy = np.gradient(dem_data, transform[0], transform[4])\n        slope = np.arctan(np.sqrt(dx ** 2 + dy ** 2)) * (180.0 / np.pi)\n        aspect = np.arctan2(-dy, dx) * (180.0 / np.pi)\n\n        # Adjust aspect values to range from 0 to 360 degrees\n        aspect[aspect < 0] += 360\n        print(f\"slope shape: {slope.shape}\")\n        print(f\"aspect shape: {aspect.shape}\")\n        \n        \n    return slope, aspect\n  \ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n  \ndef calculate_curvature(dem_file, sigma=1):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradient using the Sobel filter\n        dx = sobel(dem_data, axis=1, mode='constant')\n        dy = sobel(dem_data, axis=0, mode='constant')\n\n        # Calculate the second derivatives using the Sobel filter\n        dxx = sobel(dx, axis=1, mode='constant')\n        dyy = sobel(dy, axis=0, mode='constant')\n\n        # Calculate the curvature using the second derivatives\n        curvature = dxx + dyy\n\n        # Smooth the curvature using Gaussian filtering (optional)\n        curvature = gaussian_filter(curvature, sigma)\n\n    return curvature\n  \ndef calculate_gradients(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradients along the North and East directions\n        dy, dx = np.gradient(dem_data, dataset.res[0], dataset.res[1])\n\n        # Calculate the Northness and Eastness\n        northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n        eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\n\n    return northness, eastness\n  \n  \ndef geotiff_to_csv(geotiff_file, csv_file):\n    # Open the GeoTIFF file\n    with rasterio.open(geotiff_file) as dataset:\n        # Get the pixel values as a 2D array\n        data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Get the width and height of the GeoTIFF\n        height, width = data.shape\n\n        # Open the CSV file for writing\n        with open(csv_file, 'w', newline='') as csvfile:\n            csvwriter = csv.writer(csvfile)\n\n            # Write the CSV header\n            csvwriter.writerow(['Latitude', 'Longitude', 'x', 'y', 'Elevation'])\n\n            # Loop through each pixel and extract latitude, longitude, and image value\n            for y in range(height):\n                for x in range(width):\n                    # Get the pixel value\n                    image_value = data[y, x]\n\n                    # Convert pixel coordinates to geographic coordinates\n                    lon, lat = transform * (x, y)\n\n                    # Write the data to the CSV file\n                    csvwriter.writerow([lat, lon, x, y, image_value])\n\n  \ndef read_elevation_data(file_path, result_dem_csv_path, result_dem_feature_csv_path):\n    neighborhood_size=4\n    df = pd.read_csv(file_path)\n    \n    dataset = rasterio.open(geotiff_file)\n    data = dataset.read(1)\n\n    # Get the width and height of the GeoTIFF\n    height, width = data.shape\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    print(f\"neighborhood_size // 2 = {neighborhood_size // 2}\")\n    \n    for index, row in original_df.iterrows():\n      # Access individual row elements using row['column_name']\n      # Convert latitude and longitude to pixel indices\n      x = row[\"x\"]\n      y = row[\"y\"]\n      lat = row['Latitude']\n      lon = row['Longitude']\n      elevation = row['Elevation']\n      \n      if index % 500 == 0:\n        print(f\"processing {x} {y}\")\n\t  \n      if x < neighborhood_size // 2 or y < neighborhood_size // 2 or x > (width - neighborhood_size // 2) or y > (height - neighborhood_size // 2):\n      \tdata_row = {\n            'lat': lat,\n            'lon': lon,\n            'elevation': elevation,\n            'slope': -1,\n            'aspect': -1,\n            'curvature': -1,\n            'northness': -1,\n            'eastness': -1\n        }\n      else:\n        # Read a small neighborhood of elevation data around the selected point\n        small_elevation_data = band.ReadAsArray(x - neighborhood_size // 2, y - neighborhood_size // 2, neighborhood_size, neighborhood_size)\n\n        # Calculate slope and aspect\n        slope_data, aspect_data = calculate_slope_aspect(small_elevation_data, pixel_size_x, pixel_size_y)\n\n        # Calculate curvature\n        curvature_data = calculate_curvature(small_elevation_data, pixel_size_x, pixel_size_y)\n        northness_data = np.abs(np.sin(np.radians(aspect_data)))\n        eastness_data = np.abs(np.cos(np.radians(aspect_data)))\n\n\n        data_row = {\n            'lat': lat,\n            'lon': lon,\n            'elevation': elevation,\n            'slope': slope_data[neighborhood_size // 2, neighborhood_size // 2],\n            'aspect': aspect_data[neighborhood_size // 2, neighborhood_size // 2],\n            'curvature': curvature_data[neighborhood_size // 2, neighborhood_size // 2],\n            'northness': northness_data[neighborhood_size // 2, neighborhood_size // 2],\n            'eastness': eastness_data[neighborhood_size // 2, neighborhood_size // 2]\n        }\n      \n      \n      # Append a row to the DataFrame\n      all_df = all_df.append(data_row, ignore_index=True)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n  \n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n\n\ndem_file = \"/home/chetana/gridmet_test_run/output_4km_clipped.tif\"\nslope_file = '/home/chetana/gridmet_test_run/slope_file.tif'\naspect_file = '/home/chetana/gridmet_test_run/aspect_file.tif'\ncurvature_file = '/home/chetana/gridmet_test_run/curvature_file.tif'\nnorthness_file = '/home/chetana/gridmet_test_run/northness_file.tif'\neastness_file = '/home/chetana/gridmet_test_run/eastness_file.tif'\n\n#geotiff_to_csv(dem_file, result_dem_csv_path)\n\n\nslope, aspect = calculate_slope_aspect(dem_file)\ncurvature = calculate_curvature(dem_file)\nnorthness, eastness = calculate_gradients(dem_file)\n\n# Save the slope and aspect as new GeoTIFF files\nsave_as_geotiff(slope, slope_file, dem_file)\nsave_as_geotiff(aspect, aspect_file, dem_file)\nsave_as_geotiff(curvature, curvature_file, dem_file)\nsave_as_geotiff(northness, northness_file, dem_file)\nsave_as_geotiff(eastness, eastness_file, dem_file)\n\n\n#generate_all_elevation_variables(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\", result_dem_csv_path, result_dem_feature_csv_path)\n\n\n\n#final_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n",
  "history_output" : "/home/chetana/gw-workspace/eVr45NhOh1V0/western_us_dem.py:107: RuntimeWarning: invalid value encountered in true_divide\n  northness = np.arctan(dy / np.sqrt(dx**2 + dy**2))\n/home/chetana/gw-workspace/eVr45NhOh1V0/western_us_dem.py:108: RuntimeWarning: invalid value encountered in true_divide\n  eastness = np.arctan(dx / np.sqrt(dx**2 + dy**2))\nslope shape: (666, 694)\naspect shape: (666, 694)\n",
  "history_begin_time" : 1690259970965,
  "history_end_time" : 1690259972344,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "j3Pm6hwj4Avy",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\nimport rasterio\nimport csv\nfrom rasterio.transform import Affine\nfrom scipy.ndimage import sobel, gaussian_filter\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect_for_single(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef save_as_geotiff(data, output_file, src_file):\n    with rasterio.open(src_file) as src_dataset:\n        profile = src_dataset.profile\n        transform = src_dataset.transform\n\n        # Update the data type, count, and set the transform for the new dataset\n        profile.update(dtype=rasterio.float32, count=1, transform=transform)\n\n        # Create the new GeoTIFF file\n        with rasterio.open(output_file, 'w', **profile) as dst_dataset:\n            # Write the data to the new GeoTIFF\n            dst_dataset.write(data, 1)\n  \n\ndef calculate_slope_aspect(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Calculate the slope and aspect using numpy\n        dx, dy = np.gradient(dem_data, transform[0], transform[4])\n        slope = np.arctan(np.sqrt(dx ** 2 + dy ** 2)) * (180.0 / np.pi)\n        aspect = np.arctan2(-dy, dx) * (180.0 / np.pi)\n\n        # Adjust aspect values to range from 0 to 360 degrees\n        aspect[aspect < 0] += 360\n        print(f\"slope shape: {slope.shape}\")\n        print(f\"aspect shape: {aspect.shape}\")\n        \n        \n    return slope, aspect\n  \ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n  \ndef calculate_curvature(dem_file, sigma=1):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradient using the Sobel filter\n        dx = sobel(dem_data, axis=1, mode='constant')\n        dy = sobel(dem_data, axis=0, mode='constant')\n\n        # Calculate the second derivatives using the Sobel filter\n        dxx = sobel(dx, axis=1, mode='constant')\n        dyy = sobel(dy, axis=0, mode='constant')\n\n        # Calculate the curvature using the second derivatives\n        curvature = dxx + dyy\n\n        # Smooth the curvature using Gaussian filtering (optional)\n        curvature = gaussian_filter(curvature, sigma)\n\n    return curvature\n  \n  \ndef geotiff_to_csv(geotiff_file, csv_file):\n    # Open the GeoTIFF file\n    with rasterio.open(geotiff_file) as dataset:\n        # Get the pixel values as a 2D array\n        data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Get the width and height of the GeoTIFF\n        height, width = data.shape\n\n        # Open the CSV file for writing\n        with open(csv_file, 'w', newline='') as csvfile:\n            csvwriter = csv.writer(csvfile)\n\n            # Write the CSV header\n            csvwriter.writerow(['Latitude', 'Longitude', 'x', 'y', 'Elevation'])\n\n            # Loop through each pixel and extract latitude, longitude, and image value\n            for y in range(height):\n                for x in range(width):\n                    # Get the pixel value\n                    image_value = data[y, x]\n\n                    # Convert pixel coordinates to geographic coordinates\n                    lon, lat = transform * (x, y)\n\n                    # Write the data to the CSV file\n                    csvwriter.writerow([lat, lon, x, y, image_value])\n\n  \ndef read_elevation_data(file_path, result_dem_csv_path, result_dem_feature_csv_path):\n    neighborhood_size=4\n    df = pd.read_csv(file_path)\n    \n    dataset = rasterio.open(geotiff_file)\n    data = dataset.read(1)\n\n    # Get the width and height of the GeoTIFF\n    height, width = data.shape\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    print(f\"neighborhood_size // 2 = {neighborhood_size // 2}\")\n    \n    for index, row in original_df.iterrows():\n      # Access individual row elements using row['column_name']\n      # Convert latitude and longitude to pixel indices\n      x = row[\"x\"]\n      y = row[\"y\"]\n      lat = row['Latitude']\n      lon = row['Longitude']\n      elevation = row['Elevation']\n      \n      if index % 500 == 0:\n        print(f\"processing {x} {y}\")\n\t  \n      if x < neighborhood_size // 2 or y < neighborhood_size // 2 or x > (width - neighborhood_size // 2) or y > (height - neighborhood_size // 2):\n      \tdata_row = {\n            'lat': lat,\n            'lon': lon,\n            'elevation': elevation,\n            'slope': -1,\n            'aspect': -1,\n            'curvature': -1,\n            'northness': -1,\n            'eastness': -1\n        }\n      else:\n        # Read a small neighborhood of elevation data around the selected point\n        small_elevation_data = band.ReadAsArray(x - neighborhood_size // 2, y - neighborhood_size // 2, neighborhood_size, neighborhood_size)\n\n        # Calculate slope and aspect\n        slope_data, aspect_data = calculate_slope_aspect(small_elevation_data, pixel_size_x, pixel_size_y)\n\n        # Calculate curvature\n        curvature_data = calculate_curvature(small_elevation_data, pixel_size_x, pixel_size_y)\n        northness_data = np.abs(np.sin(np.radians(aspect_data)))\n        eastness_data = np.abs(np.cos(np.radians(aspect_data)))\n\n\n        data_row = {\n            'lat': lat,\n            'lon': lon,\n            'elevation': elevation,\n            'slope': slope_data[neighborhood_size // 2, neighborhood_size // 2],\n            'aspect': aspect_data[neighborhood_size // 2, neighborhood_size // 2],\n            'curvature': curvature_data[neighborhood_size // 2, neighborhood_size // 2],\n            'northness': northness_data[neighborhood_size // 2, neighborhood_size // 2],\n            'eastness': eastness_data[neighborhood_size // 2, neighborhood_size // 2]\n        }\n      \n      \n      # Append a row to the DataFrame\n      all_df = all_df.append(data_row, ignore_index=True)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n  \n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n\n\ndem_file = \"/home/chetana/gridmet_test_run/output_4km_clipped.tif\"\nslope_file = '/home/chetana/gridmet_test_run/slope_file.tif'\naspect_file = '/home/chetana/gridmet_test_run/aspect_file.tif'\ncurvature_file = '/home/chetana/gridmet_test_run/curvature_file.tif'\n\n\n#geotiff_to_csv(dem_file, result_dem_csv_path)\n\n\nslope, aspect = calculate_slope_aspect(dem_file)\ncurvature = calculate_curvature(dem_file)\n\n# Save the slope and aspect as new GeoTIFF files\nsave_as_geotiff(slope, slope_file, dem_file)\nsave_as_geotiff(aspect, aspect_file, dem_file)\nsave_as_geotiff(curvature, curvature_file, dem_file)\n\n\n#generate_all_elevation_variables(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\", result_dem_csv_path, result_dem_feature_csv_path)\n\n\n\n#final_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n",
  "history_output" : "slope shape: (666, 694)\naspect shape: (666, 694)\n",
  "history_begin_time" : 1690259694643,
  "history_end_time" : 1690259696885,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "3a0JdQOddlTL",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\nimport rasterio\nimport csv\nfrom rasterio.transform import Affine\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect_for_single(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef save_as_geotiff(data, output_file, src_file):\n    with rasterio.open(src_file) as src_dataset:\n        profile = src_dataset.profile\n        transform = src_dataset.transform\n\n        # Update the data type, count, and set the transform for the new dataset\n        profile.update(dtype=rasterio.float32, count=1, transform=transform)\n\n        # Create the new GeoTIFF file\n        with rasterio.open(output_file, 'w', **profile) as dst_dataset:\n            # Write the data to the new GeoTIFF\n            dst_dataset.write(data, 1)\n  \n\ndef calculate_slope_aspect(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Calculate the slope and aspect using numpy\n        dx, dy = np.gradient(dem_data, transform[0], transform[4])\n        slope = np.arctan(np.sqrt(dx ** 2 + dy ** 2)) * (180.0 / np.pi)\n        aspect = np.arctan2(-dy, dx) * (180.0 / np.pi)\n\n        # Adjust aspect values to range from 0 to 360 degrees\n        aspect[aspect < 0] += 360\n        print(f\"slope shape: {slope.shape}\")\n        print(f\"aspect shape: {aspect.shape}\")\n        \n        \n    return slope, aspect\n  \ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n  \ndef calculate_curvature(dem_file, sigma=1):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Calculate the gradient using the Sobel filter\n        dx = sobel(dem_data, axis=1, mode='constant')\n        dy = sobel(dem_data, axis=0, mode='constant')\n\n        # Calculate the second derivatives using the Sobel filter\n        dxx = sobel(dx, axis=1, mode='constant')\n        dyy = sobel(dy, axis=0, mode='constant')\n\n        # Calculate the curvature using the second derivatives\n        curvature = dxx + dyy\n\n        # Smooth the curvature using Gaussian filtering (optional)\n        curvature = gaussian_filter(curvature, sigma)\n\n    return curvature\n  \n  \ndef geotiff_to_csv(geotiff_file, csv_file):\n    # Open the GeoTIFF file\n    with rasterio.open(geotiff_file) as dataset:\n        # Get the pixel values as a 2D array\n        data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Get the width and height of the GeoTIFF\n        height, width = data.shape\n\n        # Open the CSV file for writing\n        with open(csv_file, 'w', newline='') as csvfile:\n            csvwriter = csv.writer(csvfile)\n\n            # Write the CSV header\n            csvwriter.writerow(['Latitude', 'Longitude', 'x', 'y', 'Elevation'])\n\n            # Loop through each pixel and extract latitude, longitude, and image value\n            for y in range(height):\n                for x in range(width):\n                    # Get the pixel value\n                    image_value = data[y, x]\n\n                    # Convert pixel coordinates to geographic coordinates\n                    lon, lat = transform * (x, y)\n\n                    # Write the data to the CSV file\n                    csvwriter.writerow([lat, lon, x, y, image_value])\n\n  \ndef read_elevation_data(file_path, result_dem_csv_path, result_dem_feature_csv_path):\n    neighborhood_size=4\n    df = pd.read_csv(file_path)\n    \n    dataset = rasterio.open(geotiff_file)\n    data = dataset.read(1)\n\n    # Get the width and height of the GeoTIFF\n    height, width = data.shape\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    print(f\"neighborhood_size // 2 = {neighborhood_size // 2}\")\n    \n    for index, row in original_df.iterrows():\n      # Access individual row elements using row['column_name']\n      # Convert latitude and longitude to pixel indices\n      x = row[\"x\"]\n      y = row[\"y\"]\n      lat = row['Latitude']\n      lon = row['Longitude']\n      elevation = row['Elevation']\n      \n      if index % 500 == 0:\n        print(f\"processing {x} {y}\")\n\t  \n      if x < neighborhood_size // 2 or y < neighborhood_size // 2 or x > (width - neighborhood_size // 2) or y > (height - neighborhood_size // 2):\n      \tdata_row = {\n            'lat': lat,\n            'lon': lon,\n            'elevation': elevation,\n            'slope': -1,\n            'aspect': -1,\n            'curvature': -1,\n            'northness': -1,\n            'eastness': -1\n        }\n      else:\n        # Read a small neighborhood of elevation data around the selected point\n        small_elevation_data = band.ReadAsArray(x - neighborhood_size // 2, y - neighborhood_size // 2, neighborhood_size, neighborhood_size)\n\n        # Calculate slope and aspect\n        slope_data, aspect_data = calculate_slope_aspect(small_elevation_data, pixel_size_x, pixel_size_y)\n\n        # Calculate curvature\n        curvature_data = calculate_curvature(small_elevation_data, pixel_size_x, pixel_size_y)\n        northness_data = np.abs(np.sin(np.radians(aspect_data)))\n        eastness_data = np.abs(np.cos(np.radians(aspect_data)))\n\n\n        data_row = {\n            'lat': lat,\n            'lon': lon,\n            'elevation': elevation,\n            'slope': slope_data[neighborhood_size // 2, neighborhood_size // 2],\n            'aspect': aspect_data[neighborhood_size // 2, neighborhood_size // 2],\n            'curvature': curvature_data[neighborhood_size // 2, neighborhood_size // 2],\n            'northness': northness_data[neighborhood_size // 2, neighborhood_size // 2],\n            'eastness': eastness_data[neighborhood_size // 2, neighborhood_size // 2]\n        }\n      \n      \n      # Append a row to the DataFrame\n      all_df = all_df.append(data_row, ignore_index=True)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n  \n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n\n\ndem_file = \"/home/chetana/gridmet_test_run/output_4km_clipped.tif\"\nslope_file = '/home/chetana/gridmet_test_run/slope_file.tif'\naspect_file = '/home/chetana/gridmet_test_run/aspect_file.tif'\ncurvature_file = '/home/chetana/gridmet_test_run/curvature_file.tif'\n\n\n#geotiff_to_csv(dem_file, result_dem_csv_path)\n\n\nslope, aspect = calculate_slope_aspect(dem_file)\ncurvature = calculate_curvature(dem_file)\n\n# Save the slope and aspect as new GeoTIFF files\nsave_as_geotiff(slope, slope_file, dem_file)\nsave_as_geotiff(aspect, aspect_file, dem_file)\nsave_as_geotiff(curvature, curvature_file, dem_file)\n\n\n#generate_all_elevation_variables(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\", result_dem_csv_path, result_dem_feature_csv_path)\n\n\n\n#final_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n",
  "history_output" : "slope shape: (666, 694)\naspect shape: (666, 694)\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/3a0JdQOddlTL/western_us_dem.py\", line 218, in <module>\n    curvature = calculate_curvature(dem_file)\n  File \"/home/chetana/gw-workspace/3a0JdQOddlTL/western_us_dem.py\", line 82, in calculate_curvature\n    dx = sobel(dem_data, axis=1, mode='constant')\nNameError: name 'sobel' is not defined\n",
  "history_begin_time" : 1690259677530,
  "history_end_time" : 1690259678316,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "luL7DDnjwTu7",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\nimport rasterio\nimport csv\nfrom rasterio.transform import Affine\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect_for_single(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef save_as_geotiff(data, output_file, src_file):\n    with rasterio.open(src_file) as src_dataset:\n        profile = src_dataset.profile\n        transform = src_dataset.transform\n\n        # Update the data type, count, and set the transform for the new dataset\n        profile.update(dtype=rasterio.float32, count=1, transform=transform)\n\n        # Create the new GeoTIFF file\n        with rasterio.open(output_file, 'w', **profile) as dst_dataset:\n            # Write the data to the new GeoTIFF\n            dst_dataset.write(data, 1)\n  \n\ndef calculate_slope_aspect(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Calculate the slope and aspect using numpy\n        dx, dy = np.gradient(dem_data, transform[0], transform[4])\n        slope = np.arctan(np.sqrt(dx ** 2 + dy ** 2)) * (180.0 / np.pi)\n        aspect = np.arctan2(-dy, dx) * (180.0 / np.pi)\n\n        # Adjust aspect values to range from 0 to 360 degrees\n        aspect[aspect < 0] += 360\n        print(f\"slope shape: {slope.shape}\")\n        print(f\"aspect shape: {aspect.shape}\")\n        \n        \n    return slope, aspect\n  \ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\ndef geotiff_to_csv(geotiff_file, csv_file):\n    # Open the GeoTIFF file\n    with rasterio.open(geotiff_file) as dataset:\n        # Get the pixel values as a 2D array\n        data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Get the width and height of the GeoTIFF\n        height, width = data.shape\n\n        # Open the CSV file for writing\n        with open(csv_file, 'w', newline='') as csvfile:\n            csvwriter = csv.writer(csvfile)\n\n            # Write the CSV header\n            csvwriter.writerow(['Latitude', 'Longitude', 'x', 'y', 'Elevation'])\n\n            # Loop through each pixel and extract latitude, longitude, and image value\n            for y in range(height):\n                for x in range(width):\n                    # Get the pixel value\n                    image_value = data[y, x]\n\n                    # Convert pixel coordinates to geographic coordinates\n                    lon, lat = transform * (x, y)\n\n                    # Write the data to the CSV file\n                    csvwriter.writerow([lat, lon, x, y, image_value])\n\n  \ndef read_elevation_data(file_path, result_dem_csv_path, result_dem_feature_csv_path):\n    neighborhood_size=4\n    df = pd.read_csv(file_path)\n    \n    dataset = rasterio.open(geotiff_file)\n    data = dataset.read(1)\n\n    # Get the width and height of the GeoTIFF\n    height, width = data.shape\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    print(f\"neighborhood_size // 2 = {neighborhood_size // 2}\")\n    \n    for index, row in original_df.iterrows():\n      # Access individual row elements using row['column_name']\n      # Convert latitude and longitude to pixel indices\n      x = row[\"x\"]\n      y = row[\"y\"]\n      lat = row['Latitude']\n      lon = row['Longitude']\n      elevation = row['Elevation']\n      \n      if index % 500 == 0:\n        print(f\"processing {x} {y}\")\n\t  \n      if x < neighborhood_size // 2 or y < neighborhood_size // 2 or x > (width - neighborhood_size // 2) or y > (height - neighborhood_size // 2):\n      \tdata_row = {\n            'lat': lat,\n            'lon': lon,\n            'elevation': elevation,\n            'slope': -1,\n            'aspect': -1,\n            'curvature': -1,\n            'northness': -1,\n            'eastness': -1\n        }\n      else:\n        # Read a small neighborhood of elevation data around the selected point\n        small_elevation_data = band.ReadAsArray(x - neighborhood_size // 2, y - neighborhood_size // 2, neighborhood_size, neighborhood_size)\n\n        # Calculate slope and aspect\n        slope_data, aspect_data = calculate_slope_aspect(small_elevation_data, pixel_size_x, pixel_size_y)\n\n        # Calculate curvature\n        curvature_data = calculate_curvature(small_elevation_data, pixel_size_x, pixel_size_y)\n        northness_data = np.abs(np.sin(np.radians(aspect_data)))\n        eastness_data = np.abs(np.cos(np.radians(aspect_data)))\n\n\n        data_row = {\n            'lat': lat,\n            'lon': lon,\n            'elevation': elevation,\n            'slope': slope_data[neighborhood_size // 2, neighborhood_size // 2],\n            'aspect': aspect_data[neighborhood_size // 2, neighborhood_size // 2],\n            'curvature': curvature_data[neighborhood_size // 2, neighborhood_size // 2],\n            'northness': northness_data[neighborhood_size // 2, neighborhood_size // 2],\n            'eastness': eastness_data[neighborhood_size // 2, neighborhood_size // 2]\n        }\n      \n      \n      # Append a row to the DataFrame\n      all_df = all_df.append(data_row, ignore_index=True)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n  \n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n\n\ndem_file = \"/home/chetana/gridmet_test_run/output_4km_clipped.tif\"\nslope_file = '/home/chetana/gridmet_test_run/slope_file.tif'\naspect_file = '/home/chetana/gridmet_test_run/aspect_file.tif'\n\n#geotiff_to_csv(dem_file, result_dem_csv_path)\n\n\nslope, aspect = calculate_slope_aspect(dem_file)\n\n# Save the slope and aspect as new GeoTIFF files\nsave_as_geotiff(slope, slope_file, dem_file)\nsave_as_geotiff(aspect, aspect_file, dem_file)\n\n\n#generate_all_elevation_variables(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\", result_dem_csv_path, result_dem_feature_csv_path)\n\n\n\n#final_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n",
  "history_output" : "slope shape: (666, 694)\naspect shape: (666, 694)\n",
  "history_begin_time" : 1690259518303,
  "history_end_time" : 1690259519280,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "7n5tqVx3bqil",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\nimport rasterio\nimport csv\nfrom rasterio.transform import Affine\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect_for_single(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef save_as_geotiff(data, output_file, src_file):\n    with rasterio.open(src_file) as src_dataset:\n        profile = src_dataset.profile\n        a, b, c, d, e, f = src_dataset.transform\n\n        # Update the data type, count, and set the transform for the new dataset\n        profile.update(dtype=rasterio.float32, count=1, transform=Affine(a, b, c, d, e, f))\n\n        # Create the new GeoTIFF file\n        with rasterio.open(output_file, 'w', **profile) as dst_dataset:\n            # Write the data to the new GeoTIFF\n            dst_dataset.write(data, 1)\n  \n\ndef calculate_slope_aspect(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Calculate the slope and aspect using numpy\n        dx, dy = np.gradient(dem_data, transform[0], transform[4])\n        slope = np.arctan(np.sqrt(dx ** 2 + dy ** 2)) * (180.0 / np.pi)\n        aspect = np.arctan2(-dy, dx) * (180.0 / np.pi)\n\n        # Adjust aspect values to range from 0 to 360 degrees\n        aspect[aspect < 0] += 360\n        print(f\"slope shape: {slope.shape}\")\n        print(f\"aspect shape: {aspect.shape}\")\n        \n        \n    return slope, aspect\n  \ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\ndef geotiff_to_csv(geotiff_file, csv_file):\n    # Open the GeoTIFF file\n    with rasterio.open(geotiff_file) as dataset:\n        # Get the pixel values as a 2D array\n        data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Get the width and height of the GeoTIFF\n        height, width = data.shape\n\n        # Open the CSV file for writing\n        with open(csv_file, 'w', newline='') as csvfile:\n            csvwriter = csv.writer(csvfile)\n\n            # Write the CSV header\n            csvwriter.writerow(['Latitude', 'Longitude', 'x', 'y', 'Elevation'])\n\n            # Loop through each pixel and extract latitude, longitude, and image value\n            for y in range(height):\n                for x in range(width):\n                    # Get the pixel value\n                    image_value = data[y, x]\n\n                    # Convert pixel coordinates to geographic coordinates\n                    lon, lat = transform * (x, y)\n\n                    # Write the data to the CSV file\n                    csvwriter.writerow([lat, lon, x, y, image_value])\n\n  \ndef read_elevation_data(file_path, result_dem_csv_path, result_dem_feature_csv_path):\n    neighborhood_size=4\n    df = pd.read_csv(file_path)\n    \n    dataset = rasterio.open(geotiff_file)\n    data = dataset.read(1)\n\n    # Get the width and height of the GeoTIFF\n    height, width = data.shape\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    print(f\"neighborhood_size // 2 = {neighborhood_size // 2}\")\n    \n    for index, row in original_df.iterrows():\n      # Access individual row elements using row['column_name']\n      # Convert latitude and longitude to pixel indices\n      x = row[\"x\"]\n      y = row[\"y\"]\n      lat = row['Latitude']\n      lon = row['Longitude']\n      elevation = row['Elevation']\n      \n      if index % 500 == 0:\n        print(f\"processing {x} {y}\")\n\t  \n      if x < neighborhood_size // 2 or y < neighborhood_size // 2 or x > (width - neighborhood_size // 2) or y > (height - neighborhood_size // 2):\n      \tdata_row = {\n            'lat': lat,\n            'lon': lon,\n            'elevation': elevation,\n            'slope': -1,\n            'aspect': -1,\n            'curvature': -1,\n            'northness': -1,\n            'eastness': -1\n        }\n      else:\n        # Read a small neighborhood of elevation data around the selected point\n        small_elevation_data = band.ReadAsArray(x - neighborhood_size // 2, y - neighborhood_size // 2, neighborhood_size, neighborhood_size)\n\n        # Calculate slope and aspect\n        slope_data, aspect_data = calculate_slope_aspect(small_elevation_data, pixel_size_x, pixel_size_y)\n\n        # Calculate curvature\n        curvature_data = calculate_curvature(small_elevation_data, pixel_size_x, pixel_size_y)\n        northness_data = np.abs(np.sin(np.radians(aspect_data)))\n        eastness_data = np.abs(np.cos(np.radians(aspect_data)))\n\n\n        data_row = {\n            'lat': lat,\n            'lon': lon,\n            'elevation': elevation,\n            'slope': slope_data[neighborhood_size // 2, neighborhood_size // 2],\n            'aspect': aspect_data[neighborhood_size // 2, neighborhood_size // 2],\n            'curvature': curvature_data[neighborhood_size // 2, neighborhood_size // 2],\n            'northness': northness_data[neighborhood_size // 2, neighborhood_size // 2],\n            'eastness': eastness_data[neighborhood_size // 2, neighborhood_size // 2]\n        }\n      \n      \n      # Append a row to the DataFrame\n      all_df = all_df.append(data_row, ignore_index=True)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n  \n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n\n\ndem_file = \"/home/chetana/gridmet_test_run/output_4km_clipped.tif\"\nslope_file = '/home/chetana/gridmet_test_run/slope_file.tif'\naspect_file = '/home/chetana/gridmet_test_run/aspect_file.tif'\n\n#geotiff_to_csv(dem_file, result_dem_csv_path)\n\n\nslope, aspect = calculate_slope_aspect(dem_file)\n\n# Save the slope and aspect as new GeoTIFF files\nsave_as_geotiff(slope, slope_file, dem_file)\nsave_as_geotiff(aspect, aspect_file, dem_file)\n\n\n#generate_all_elevation_variables(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\", result_dem_csv_path, result_dem_feature_csv_path)\n\n\n\n#final_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n",
  "history_output" : "slope shape: (666, 694)\naspect shape: (666, 694)\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/7n5tqVx3bqil/western_us_dem.py\", line 195, in <module>\n    save_as_geotiff(slope, slope_file, dem_file)\n  File \"/home/chetana/gw-workspace/7n5tqVx3bqil/western_us_dem.py\", line 35, in save_as_geotiff\n    a, b, c, d, e, f = src_dataset.transform\nValueError: too many values to unpack (expected 6)\n",
  "history_begin_time" : 1690259467302,
  "history_end_time" : 1690259468158,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "GzoryWAku408",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\nimport rasterio\nimport csv\nfrom rasterio.transform import Affine\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect_for_single(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef save_as_geotiff(data, output_file, src_file):\n    with rasterio.open(src_file) as src_dataset:\n        profile = src_dataset.profile\n\n        # Update the data type, count, and set the transform for the new dataset\n        profile.update(dtype=rasterio.float32, count=1, transform=Affine.from_gdal(*src_dataset.transform))\n\n        # Create the new GeoTIFF file\n        with rasterio.open(output_file, 'w', **profile) as dst_dataset:\n            # Write the data to the new GeoTIFF\n            dst_dataset.write(data, 1)\n  \n\ndef calculate_slope_aspect(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Calculate the slope and aspect using numpy\n        dx, dy = np.gradient(dem_data, transform[0], transform[4])\n        slope = np.arctan(np.sqrt(dx ** 2 + dy ** 2)) * (180.0 / np.pi)\n        aspect = np.arctan2(-dy, dx) * (180.0 / np.pi)\n\n        # Adjust aspect values to range from 0 to 360 degrees\n        aspect[aspect < 0] += 360\n        print(f\"slope shape: {slope.shape}\")\n        print(f\"aspect shape: {aspect.shape}\")\n        \n        \n    return slope, aspect\n  \ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\ndef geotiff_to_csv(geotiff_file, csv_file):\n    # Open the GeoTIFF file\n    with rasterio.open(geotiff_file) as dataset:\n        # Get the pixel values as a 2D array\n        data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Get the width and height of the GeoTIFF\n        height, width = data.shape\n\n        # Open the CSV file for writing\n        with open(csv_file, 'w', newline='') as csvfile:\n            csvwriter = csv.writer(csvfile)\n\n            # Write the CSV header\n            csvwriter.writerow(['Latitude', 'Longitude', 'x', 'y', 'Elevation'])\n\n            # Loop through each pixel and extract latitude, longitude, and image value\n            for y in range(height):\n                for x in range(width):\n                    # Get the pixel value\n                    image_value = data[y, x]\n\n                    # Convert pixel coordinates to geographic coordinates\n                    lon, lat = transform * (x, y)\n\n                    # Write the data to the CSV file\n                    csvwriter.writerow([lat, lon, x, y, image_value])\n\n  \ndef read_elevation_data(file_path, result_dem_csv_path, result_dem_feature_csv_path):\n    neighborhood_size=4\n    df = pd.read_csv(file_path)\n    \n    dataset = rasterio.open(geotiff_file)\n    data = dataset.read(1)\n\n    # Get the width and height of the GeoTIFF\n    height, width = data.shape\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    print(f\"neighborhood_size // 2 = {neighborhood_size // 2}\")\n    \n    for index, row in original_df.iterrows():\n      # Access individual row elements using row['column_name']\n      # Convert latitude and longitude to pixel indices\n      x = row[\"x\"]\n      y = row[\"y\"]\n      lat = row['Latitude']\n      lon = row['Longitude']\n      elevation = row['Elevation']\n      \n      if index % 500 == 0:\n        print(f\"processing {x} {y}\")\n\t  \n      if x < neighborhood_size // 2 or y < neighborhood_size // 2 or x > (width - neighborhood_size // 2) or y > (height - neighborhood_size // 2):\n      \tdata_row = {\n            'lat': lat,\n            'lon': lon,\n            'elevation': elevation,\n            'slope': -1,\n            'aspect': -1,\n            'curvature': -1,\n            'northness': -1,\n            'eastness': -1\n        }\n      else:\n        # Read a small neighborhood of elevation data around the selected point\n        small_elevation_data = band.ReadAsArray(x - neighborhood_size // 2, y - neighborhood_size // 2, neighborhood_size, neighborhood_size)\n\n        # Calculate slope and aspect\n        slope_data, aspect_data = calculate_slope_aspect(small_elevation_data, pixel_size_x, pixel_size_y)\n\n        # Calculate curvature\n        curvature_data = calculate_curvature(small_elevation_data, pixel_size_x, pixel_size_y)\n        northness_data = np.abs(np.sin(np.radians(aspect_data)))\n        eastness_data = np.abs(np.cos(np.radians(aspect_data)))\n\n\n        data_row = {\n            'lat': lat,\n            'lon': lon,\n            'elevation': elevation,\n            'slope': slope_data[neighborhood_size // 2, neighborhood_size // 2],\n            'aspect': aspect_data[neighborhood_size // 2, neighborhood_size // 2],\n            'curvature': curvature_data[neighborhood_size // 2, neighborhood_size // 2],\n            'northness': northness_data[neighborhood_size // 2, neighborhood_size // 2],\n            'eastness': eastness_data[neighborhood_size // 2, neighborhood_size // 2]\n        }\n      \n      \n      # Append a row to the DataFrame\n      all_df = all_df.append(data_row, ignore_index=True)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n  \n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n\n\ndem_file = \"/home/chetana/gridmet_test_run/output_4km_clipped.tif\"\nslope_file = '/home/chetana/gridmet_test_run/slope_file.tif'\naspect_file = '/home/chetana/gridmet_test_run/aspect_file.tif'\n\n#geotiff_to_csv(dem_file, result_dem_csv_path)\n\n\nslope, aspect = calculate_slope_aspect(dem_file)\n\n# Save the slope and aspect as new GeoTIFF files\nsave_as_geotiff(slope, slope_file, dem_file)\nsave_as_geotiff(aspect, aspect_file, dem_file)\n\n\n#generate_all_elevation_variables(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\", result_dem_csv_path, result_dem_feature_csv_path)\n\n\n\n#final_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n",
  "history_output" : "slope shape: (666, 694)\naspect shape: (666, 694)\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/GzoryWAku408/western_us_dem.py\", line 194, in <module>\n    save_as_geotiff(slope, slope_file, dem_file)\n  File \"/home/chetana/gw-workspace/GzoryWAku408/western_us_dem.py\", line 37, in save_as_geotiff\n    profile.update(dtype=rasterio.float32, count=1, transform=Affine.from_gdal(*src_dataset.transform))\nTypeError: from_gdal() takes 7 positional arguments but 10 were given\n",
  "history_begin_time" : 1690259300905,
  "history_end_time" : 1690259301725,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "TqOSFt00365y",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\nimport rasterio\nimport csv\nfrom rasterio.transform import Affine\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect_for_single(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef save_as_geotiff(data, output_file, src_file):\n    with rasterio.open(src_file) as src_dataset:\n        profile = src_dataset.profile\n\n        # Update the data type, count, and set the transform for the new dataset\n        profile.update(dtype=rasterio.float32, count=1, transform=Affine.from_gdal(*profile[\"transform\"]))\n\n        # Create the new GeoTIFF file\n        with rasterio.open(output_file, 'w', **profile) as dst_dataset:\n            # Write the data to the new GeoTIFF\n            dst_dataset.write(data, 1)\n  \n\ndef calculate_slope_aspect(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Calculate the slope and aspect using numpy\n        dx, dy = np.gradient(dem_data, transform[0], transform[4])\n        slope = np.arctan(np.sqrt(dx ** 2 + dy ** 2)) * (180.0 / np.pi)\n        aspect = np.arctan2(-dy, dx) * (180.0 / np.pi)\n\n        # Adjust aspect values to range from 0 to 360 degrees\n        aspect[aspect < 0] += 360\n        print(f\"slope shape: {slope.shape}\")\n        print(f\"aspect shape: {aspect.shape}\")\n        \n        \n    return slope, aspect\n  \ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\ndef geotiff_to_csv(geotiff_file, csv_file):\n    # Open the GeoTIFF file\n    with rasterio.open(geotiff_file) as dataset:\n        # Get the pixel values as a 2D array\n        data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Get the width and height of the GeoTIFF\n        height, width = data.shape\n\n        # Open the CSV file for writing\n        with open(csv_file, 'w', newline='') as csvfile:\n            csvwriter = csv.writer(csvfile)\n\n            # Write the CSV header\n            csvwriter.writerow(['Latitude', 'Longitude', 'x', 'y', 'Elevation'])\n\n            # Loop through each pixel and extract latitude, longitude, and image value\n            for y in range(height):\n                for x in range(width):\n                    # Get the pixel value\n                    image_value = data[y, x]\n\n                    # Convert pixel coordinates to geographic coordinates\n                    lon, lat = transform * (x, y)\n\n                    # Write the data to the CSV file\n                    csvwriter.writerow([lat, lon, x, y, image_value])\n\n  \ndef read_elevation_data(file_path, result_dem_csv_path, result_dem_feature_csv_path):\n    neighborhood_size=4\n    df = pd.read_csv(file_path)\n    \n    dataset = rasterio.open(geotiff_file)\n    data = dataset.read(1)\n\n    # Get the width and height of the GeoTIFF\n    height, width = data.shape\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    print(f\"neighborhood_size // 2 = {neighborhood_size // 2}\")\n    \n    for index, row in original_df.iterrows():\n      # Access individual row elements using row['column_name']\n      # Convert latitude and longitude to pixel indices\n      x = row[\"x\"]\n      y = row[\"y\"]\n      lat = row['Latitude']\n      lon = row['Longitude']\n      elevation = row['Elevation']\n      \n      if index % 500 == 0:\n        print(f\"processing {x} {y}\")\n\t  \n      if x < neighborhood_size // 2 or y < neighborhood_size // 2 or x > (width - neighborhood_size // 2) or y > (height - neighborhood_size // 2):\n      \tdata_row = {\n            'lat': lat,\n            'lon': lon,\n            'elevation': elevation,\n            'slope': -1,\n            'aspect': -1,\n            'curvature': -1,\n            'northness': -1,\n            'eastness': -1\n        }\n      else:\n        # Read a small neighborhood of elevation data around the selected point\n        small_elevation_data = band.ReadAsArray(x - neighborhood_size // 2, y - neighborhood_size // 2, neighborhood_size, neighborhood_size)\n\n        # Calculate slope and aspect\n        slope_data, aspect_data = calculate_slope_aspect(small_elevation_data, pixel_size_x, pixel_size_y)\n\n        # Calculate curvature\n        curvature_data = calculate_curvature(small_elevation_data, pixel_size_x, pixel_size_y)\n        northness_data = np.abs(np.sin(np.radians(aspect_data)))\n        eastness_data = np.abs(np.cos(np.radians(aspect_data)))\n\n\n        data_row = {\n            'lat': lat,\n            'lon': lon,\n            'elevation': elevation,\n            'slope': slope_data[neighborhood_size // 2, neighborhood_size // 2],\n            'aspect': aspect_data[neighborhood_size // 2, neighborhood_size // 2],\n            'curvature': curvature_data[neighborhood_size // 2, neighborhood_size // 2],\n            'northness': northness_data[neighborhood_size // 2, neighborhood_size // 2],\n            'eastness': eastness_data[neighborhood_size // 2, neighborhood_size // 2]\n        }\n      \n      \n      # Append a row to the DataFrame\n      all_df = all_df.append(data_row, ignore_index=True)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n  \n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n\n\ndem_file = \"/home/chetana/gridmet_test_run/output_4km_clipped.tif\"\nslope_file = '/home/chetana/gridmet_test_run/slope_file.tif'\naspect_file = '/home/chetana/gridmet_test_run/aspect_file.tif'\n\n#geotiff_to_csv(dem_file, result_dem_csv_path)\n\n\nslope, aspect = calculate_slope_aspect(dem_file)\n\n# Save the slope and aspect as new GeoTIFF files\nsave_as_geotiff(slope, slope_file, dem_file)\nsave_as_geotiff(aspect, aspect_file, dem_file)\n\n\n#generate_all_elevation_variables(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\", result_dem_csv_path, result_dem_feature_csv_path)\n\n\n\n#final_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n",
  "history_output" : "slope shape: (666, 694)\naspect shape: (666, 694)\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/TqOSFt00365y/western_us_dem.py\", line 194, in <module>\n    save_as_geotiff(slope, slope_file, dem_file)\n  File \"/home/chetana/gw-workspace/TqOSFt00365y/western_us_dem.py\", line 37, in save_as_geotiff\n    profile.update(dtype=rasterio.float32, count=1, transform=Affine.from_gdal(*profile[\"transform\"]))\nTypeError: from_gdal() takes 7 positional arguments but 10 were given\n",
  "history_begin_time" : 1690259161088,
  "history_end_time" : 1690259161891,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "dEPtcTvcdYlo",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\nimport rasterio\nimport csv\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect_for_single(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef save_as_geotiff(data, output_file, src_file):\n    with rasterio.open(src_file) as src_dataset:\n        profile = src_dataset.profile\n\n        # Update the data type, count, and set the transform for the new dataset\n        profile.update(dtype=rasterio.float32, count=1, transform=Affine.from_gdal(*profile[\"transform\"]))\n\n        # Create the new GeoTIFF file\n        with rasterio.open(output_file, 'w', **profile) as dst_dataset:\n            # Write the data to the new GeoTIFF\n            dst_dataset.write(data, 1)\n  \n\ndef calculate_slope_aspect(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Calculate the slope and aspect using numpy\n        dx, dy = np.gradient(dem_data, transform[0], transform[4])\n        slope = np.arctan(np.sqrt(dx ** 2 + dy ** 2)) * (180.0 / np.pi)\n        aspect = np.arctan2(-dy, dx) * (180.0 / np.pi)\n\n        # Adjust aspect values to range from 0 to 360 degrees\n        aspect[aspect < 0] += 360\n        print(f\"slope shape: {slope.shape}\")\n        print(f\"aspect shape: {aspect.shape}\")\n        \n        \n    return slope, aspect\n  \ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\ndef geotiff_to_csv(geotiff_file, csv_file):\n    # Open the GeoTIFF file\n    with rasterio.open(geotiff_file) as dataset:\n        # Get the pixel values as a 2D array\n        data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Get the width and height of the GeoTIFF\n        height, width = data.shape\n\n        # Open the CSV file for writing\n        with open(csv_file, 'w', newline='') as csvfile:\n            csvwriter = csv.writer(csvfile)\n\n            # Write the CSV header\n            csvwriter.writerow(['Latitude', 'Longitude', 'x', 'y', 'Elevation'])\n\n            # Loop through each pixel and extract latitude, longitude, and image value\n            for y in range(height):\n                for x in range(width):\n                    # Get the pixel value\n                    image_value = data[y, x]\n\n                    # Convert pixel coordinates to geographic coordinates\n                    lon, lat = transform * (x, y)\n\n                    # Write the data to the CSV file\n                    csvwriter.writerow([lat, lon, x, y, image_value])\n\n  \ndef read_elevation_data(file_path, result_dem_csv_path, result_dem_feature_csv_path):\n    neighborhood_size=4\n    df = pd.read_csv(file_path)\n    \n    dataset = rasterio.open(geotiff_file)\n    data = dataset.read(1)\n\n    # Get the width and height of the GeoTIFF\n    height, width = data.shape\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    print(f\"neighborhood_size // 2 = {neighborhood_size // 2}\")\n    \n    for index, row in original_df.iterrows():\n      # Access individual row elements using row['column_name']\n      # Convert latitude and longitude to pixel indices\n      x = row[\"x\"]\n      y = row[\"y\"]\n      lat = row['Latitude']\n      lon = row['Longitude']\n      elevation = row['Elevation']\n      \n      if index % 500 == 0:\n        print(f\"processing {x} {y}\")\n\t  \n      if x < neighborhood_size // 2 or y < neighborhood_size // 2 or x > (width - neighborhood_size // 2) or y > (height - neighborhood_size // 2):\n      \tdata_row = {\n            'lat': lat,\n            'lon': lon,\n            'elevation': elevation,\n            'slope': -1,\n            'aspect': -1,\n            'curvature': -1,\n            'northness': -1,\n            'eastness': -1\n        }\n      else:\n        # Read a small neighborhood of elevation data around the selected point\n        small_elevation_data = band.ReadAsArray(x - neighborhood_size // 2, y - neighborhood_size // 2, neighborhood_size, neighborhood_size)\n\n        # Calculate slope and aspect\n        slope_data, aspect_data = calculate_slope_aspect(small_elevation_data, pixel_size_x, pixel_size_y)\n\n        # Calculate curvature\n        curvature_data = calculate_curvature(small_elevation_data, pixel_size_x, pixel_size_y)\n        northness_data = np.abs(np.sin(np.radians(aspect_data)))\n        eastness_data = np.abs(np.cos(np.radians(aspect_data)))\n\n\n        data_row = {\n            'lat': lat,\n            'lon': lon,\n            'elevation': elevation,\n            'slope': slope_data[neighborhood_size // 2, neighborhood_size // 2],\n            'aspect': aspect_data[neighborhood_size // 2, neighborhood_size // 2],\n            'curvature': curvature_data[neighborhood_size // 2, neighborhood_size // 2],\n            'northness': northness_data[neighborhood_size // 2, neighborhood_size // 2],\n            'eastness': eastness_data[neighborhood_size // 2, neighborhood_size // 2]\n        }\n      \n      \n      # Append a row to the DataFrame\n      all_df = all_df.append(data_row, ignore_index=True)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n  \n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n\n\ndem_file = \"/home/chetana/gridmet_test_run/output_4km_clipped.tif\"\nslope_file = '/home/chetana/gridmet_test_run/slope_file.tif'\naspect_file = '/home/chetana/gridmet_test_run/aspect_file.tif'\n\n#geotiff_to_csv(dem_file, result_dem_csv_path)\n\n\nslope, aspect = calculate_slope_aspect(dem_file)\n\n# Save the slope and aspect as new GeoTIFF files\nsave_as_geotiff(slope, slope_file, dem_file)\nsave_as_geotiff(aspect, aspect_file, dem_file)\n\n\n#generate_all_elevation_variables(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\", result_dem_csv_path, result_dem_feature_csv_path)\n\n\n\n#final_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n",
  "history_output" : "slope shape: (666, 694)\naspect shape: (666, 694)\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/dEPtcTvcdYlo/western_us_dem.py\", line 193, in <module>\n    save_as_geotiff(slope, slope_file, dem_file)\n  File \"/home/chetana/gw-workspace/dEPtcTvcdYlo/western_us_dem.py\", line 36, in save_as_geotiff\n    profile.update(dtype=rasterio.float32, count=1, transform=Affine.from_gdal(*profile[\"transform\"]))\nNameError: name 'Affine' is not defined\n",
  "history_begin_time" : 1690259132152,
  "history_end_time" : 1690259133027,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "PvMeML3iWNRw",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\nimport rasterio\nimport csv\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect_for_single(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef save_as_geotiff(data, output_file, src_file):\n    with rasterio.open(src_file) as src_dataset:\n        profile = src_dataset.profile\n\n        # Update the data type, count, and set the transform for the new dataset\n        profile.update(dtype=rasterio.float32, count=1, transform=Affine.from_gdal(*profile[\"transform\"]))\n\n        # Create the new GeoTIFF file\n        with rasterio.open(output_file, 'w', **profile) as dst_dataset:\n            # Write the data to the new GeoTIFF\n            dst_dataset.write(data, 1)\n  \n\ndef calculate_slope_aspect(dem_file):\n    with rasterio.open(dem_file) as dataset:\n        # Read the DEM data as a numpy array\n        dem_data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Calculate the slope and aspect using numpy\n        dx, dy = np.gradient(dem_data, transform[0], transform[4])\n        slope = np.arctan(np.sqrt(dx ** 2 + dy ** 2)) * (180.0 / np.pi)\n        aspect = np.arctan2(-dy, dx) * (180.0 / np.pi)\n\n        # Adjust aspect values to range from 0 to 360 degrees\n        aspect[aspect < 0] += 360\n\t\tprint(f\"slope shape: {slope.shape}\")\n        print(f\"aspect shape: {aspect.shape}\")\n        \n        \n    return slope, aspect\n  \ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\ndef geotiff_to_csv(geotiff_file, csv_file):\n    # Open the GeoTIFF file\n    with rasterio.open(geotiff_file) as dataset:\n        # Get the pixel values as a 2D array\n        data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Get the width and height of the GeoTIFF\n        height, width = data.shape\n\n        # Open the CSV file for writing\n        with open(csv_file, 'w', newline='') as csvfile:\n            csvwriter = csv.writer(csvfile)\n\n            # Write the CSV header\n            csvwriter.writerow(['Latitude', 'Longitude', 'x', 'y', 'Elevation'])\n\n            # Loop through each pixel and extract latitude, longitude, and image value\n            for y in range(height):\n                for x in range(width):\n                    # Get the pixel value\n                    image_value = data[y, x]\n\n                    # Convert pixel coordinates to geographic coordinates\n                    lon, lat = transform * (x, y)\n\n                    # Write the data to the CSV file\n                    csvwriter.writerow([lat, lon, x, y, image_value])\n\n  \ndef read_elevation_data(file_path, result_dem_csv_path, result_dem_feature_csv_path):\n    neighborhood_size=4\n    df = pd.read_csv(file_path)\n    \n    dataset = rasterio.open(geotiff_file)\n    data = dataset.read(1)\n\n    # Get the width and height of the GeoTIFF\n    height, width = data.shape\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    print(f\"neighborhood_size // 2 = {neighborhood_size // 2}\")\n    \n    for index, row in original_df.iterrows():\n      # Access individual row elements using row['column_name']\n      # Convert latitude and longitude to pixel indices\n      x = row[\"x\"]\n      y = row[\"y\"]\n      lat = row['Latitude']\n      lon = row['Longitude']\n      elevation = row['Elevation']\n      \n      if index % 500 == 0:\n        print(f\"processing {x} {y}\")\n\t  \n      if x < neighborhood_size // 2 or y < neighborhood_size // 2 or x > (width - neighborhood_size // 2) or y > (height - neighborhood_size // 2):\n      \tdata_row = {\n            'lat': lat,\n            'lon': lon,\n            'elevation': elevation,\n            'slope': -1,\n            'aspect': -1,\n            'curvature': -1,\n            'northness': -1,\n            'eastness': -1\n        }\n      else:\n        # Read a small neighborhood of elevation data around the selected point\n        small_elevation_data = band.ReadAsArray(x - neighborhood_size // 2, y - neighborhood_size // 2, neighborhood_size, neighborhood_size)\n\n        # Calculate slope and aspect\n        slope_data, aspect_data = calculate_slope_aspect(small_elevation_data, pixel_size_x, pixel_size_y)\n\n        # Calculate curvature\n        curvature_data = calculate_curvature(small_elevation_data, pixel_size_x, pixel_size_y)\n        northness_data = np.abs(np.sin(np.radians(aspect_data)))\n        eastness_data = np.abs(np.cos(np.radians(aspect_data)))\n\n\n        data_row = {\n            'lat': lat,\n            'lon': lon,\n            'elevation': elevation,\n            'slope': slope_data[neighborhood_size // 2, neighborhood_size // 2],\n            'aspect': aspect_data[neighborhood_size // 2, neighborhood_size // 2],\n            'curvature': curvature_data[neighborhood_size // 2, neighborhood_size // 2],\n            'northness': northness_data[neighborhood_size // 2, neighborhood_size // 2],\n            'eastness': eastness_data[neighborhood_size // 2, neighborhood_size // 2]\n        }\n      \n      \n      # Append a row to the DataFrame\n      all_df = all_df.append(data_row, ignore_index=True)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n  \n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n\n\ndem_file = \"/home/chetana/gridmet_test_run/output_4km_clipped.tif\"\nslope_file = '/home/chetana/gridmet_test_run/slope_file.tif'\naspect_file = '/home/chetana/gridmet_test_run/aspect_file.tif'\n\n#geotiff_to_csv(dem_file, result_dem_csv_path)\n\n\nslope, aspect = calculate_slope_aspect(dem_file)\n\n# Save the slope and aspect as new GeoTIFF files\nsave_as_geotiff(slope, slope_file, dem_file)\nsave_as_geotiff(aspect, aspect_file, dem_file)\n\n\n#generate_all_elevation_variables(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\", result_dem_csv_path, result_dem_feature_csv_path)\n\n\n\n#final_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n",
  "history_output" : "  File \"/home/chetana/gw-workspace/PvMeML3iWNRw/western_us_dem.py\", line 59\n    print(f\"slope shape: {slope.shape}\")\nTabError: inconsistent use of tabs and spaces in indentation\n",
  "history_begin_time" : 1690259044261,
  "history_end_time" : 1690259044312,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "QNYSnltJh7gz",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\nimport rasterio\nimport csv\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\ndef geotiff_to_csv(geotiff_file, csv_file):\n    # Open the GeoTIFF file\n    with rasterio.open(geotiff_file) as dataset:\n        # Get the pixel values as a 2D array\n        data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Get the width and height of the GeoTIFF\n        height, width = data.shape\n\n        # Open the CSV file for writing\n        with open(csv_file, 'w', newline='') as csvfile:\n            csvwriter = csv.writer(csvfile)\n\n            # Write the CSV header\n            csvwriter.writerow(['Latitude', 'Longitude', 'x', 'y', 'Elevation'])\n\n            # Loop through each pixel and extract latitude, longitude, and image value\n            for y in range(height):\n                for x in range(width):\n                    # Get the pixel value\n                    image_value = data[y, x]\n\n                    # Convert pixel coordinates to geographic coordinates\n                    lon, lat = transform * (x, y)\n\n                    # Write the data to the CSV file\n                    csvwriter.writerow([lat, lon, x, y, image_value])\n\n  \ndef read_elevation_data(file_path, neighborhood_size=4):\n    original_df, geotransform = read_elevation_data_only(file_path)\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    print(f\"neighborhood_size // 2 = {neighborhood_size // 2}\")\n    \n    for index, row in original_df.iterrows():\n      # Access individual row elements using row['column_name']\n      # Convert latitude and longitude to pixel indices\n      x, y = lat_lon_to_pixel(row['Latitude'], row['Longitude'], geotransform)\n      \n      if index % 10 == 0:\n        print(f\"processing {x} {y}\")\n\t  \n      if x < neighborhood_size // 2 or y < neighborhood_size // 2 or x > (raster_width - neighborhood_size // 2) or y > (raster_height - neighborhood_size // 2):\n      \tdata_row = {\n            'lat': row['Latitude'],\n            'lon': row['Longitude'],\n            'elevation': row['Elevation'],\n            'slope': -1,\n            'aspect': -1,\n            'curvature': -1,\n            'northness': -1,\n            'eastness': -1\n        }\n      else:\n        # Read a small neighborhood of elevation data around the selected point\n        small_elevation_data = band.ReadAsArray(x - neighborhood_size // 2, y - neighborhood_size // 2, neighborhood_size, neighborhood_size)\n\n        # Calculate slope and aspect\n        slope_data, aspect_data = calculate_slope_aspect(small_elevation_data, pixel_size_x, pixel_size_y)\n\n        # Calculate curvature\n        curvature_data = calculate_curvature(small_elevation_data, pixel_size_x, pixel_size_y)\n        northness_data = np.abs(np.sin(np.radians(aspect_data)))\n        eastness_data = np.abs(np.cos(np.radians(aspect_data)))\n\n\n        data_row = {\n            'lat': row['Latitude'],\n            'lon': row['Longitude'],\n            'elevation': row['Elevation'],\n            'slope': slope_data[neighborhood_size // 2, neighborhood_size // 2],\n            'aspect': aspect_data[neighborhood_size // 2, neighborhood_size // 2],\n            'curvature': curvature_data[neighborhood_size // 2, neighborhood_size // 2],\n            'northness': northness_data[neighborhood_size // 2, neighborhood_size // 2],\n            'eastness': eastness_data[neighborhood_size // 2, neighborhood_size // 2]\n        }\n      \n      \n      # Append a row to the DataFrame\n      all_df = all_df.append(data_row, ignore_index=True)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n\n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\ngeotiff_to_csv(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\", result_dem_csv_path)\n#final_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n",
  "history_output" : "",
  "history_begin_time" : 1690257925211,
  "history_end_time" : 1690257927168,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "bzn5HlXAAIQ6",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\nimport rasterio\nimport csv\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n\ndef read_elevation_data_only(file_path):\n    dataset = gdal.Open(file_path)\n    if dataset is None:\n      print(\"Error: Could not open the file.\")\n      return None\n\n    result_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\n    result_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n\n    print(f\"start to first convert geotiff to {result_dem_csv_path}\")\n\n    band = dataset.GetRasterBand(1)\n    elevation_data = band.ReadAsArray()\n\n    # Get geotransform information\n    geotransform = dataset.GetGeoTransform()\n    min_lon, pixel_size_x, _, max_lat, _, pixel_size_y = geotransform\n\n    # Calculate raster size\n    raster_width = dataset.RasterXSize\n    raster_height = dataset.RasterYSize\n\n    # Generate latitude and longitude arrays\n    lats = np.arange(max_lat, max_lat - pixel_size_y * raster_height, -pixel_size_y)\n    lons = np.arange(min_lon, min_lon + pixel_size_x * raster_width, pixel_size_x)\n\n    # Create meshgrid of latitude and longitude\n    lon_grid, lat_grid = np.meshgrid(lons, lats)\n\n    # Flatten the data and the lat/lon grids\n    elevation_data_flat = elevation_data.flatten()\n    lat_grid_flat = lat_grid.flatten()\n    lon_grid_flat = lon_grid.flatten()\n\n    # Create a DataFrame to store the data\n    df = pd.DataFrame({\n      'Latitude': lat_grid_flat,\n      'Longitude': lon_grid_flat,\n      'Elevation': elevation_data_flat,\n    })\n\n    df.to_csv(result_dem_csv_path)\n    print(f\"DEM geotif is saved to a csv file with only elevation {result_dem_csv_path}\")\n    return df, geotransform\n\ndef geotiff_to_csv(geotiff_file, csv_file):\n    # Open the GeoTIFF file\n    with rasterio.open(geotiff_file) as dataset:\n        # Get the pixel values as a 2D array\n        data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Get the width and height of the GeoTIFF\n        height, width = data.shape\n\n        # Open the CSV file for writing\n        with open(csv_file, 'w', newline='') as csvfile:\n            csvwriter = csv.writer(csvfile)\n\n            # Write the CSV header\n            csvwriter.writerow(['Latitude', 'Longitude', 'Image Value'])\n\n            # Loop through each pixel and extract latitude, longitude, and image value\n            for y in range(height):\n                for x in range(width):\n                    # Get the pixel value\n                    image_value = data[y, x]\n\n                    # Convert pixel coordinates to geographic coordinates\n                    lon, lat = transform * (x, y)\n\n                    # Write the data to the CSV file\n                    csvwriter.writerow([lat, lon, image_value])\n  \n  \ndef read_elevation_data(file_path, neighborhood_size=4):\n    original_df, geotransform = read_elevation_data_only(file_path)\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    print(f\"neighborhood_size // 2 = {neighborhood_size // 2}\")\n    \n    for index, row in original_df.iterrows():\n      # Access individual row elements using row['column_name']\n      # Convert latitude and longitude to pixel indices\n      x, y = lat_lon_to_pixel(row['Latitude'], row['Longitude'], geotransform)\n      \n      if index % 10 == 0:\n        print(f\"processing {x} {y}\")\n\t  \n      if x < neighborhood_size // 2 or y < neighborhood_size // 2 or x > (raster_width - neighborhood_size // 2) or y > (raster_height - neighborhood_size // 2):\n      \tdata_row = {\n            'lat': row['Latitude'],\n            'lon': row['Longitude'],\n            'elevation': row['Elevation'],\n            'slope': -1,\n            'aspect': -1,\n            'curvature': -1,\n            'northness': -1,\n            'eastness': -1\n        }\n      else:\n        # Read a small neighborhood of elevation data around the selected point\n        small_elevation_data = band.ReadAsArray(x - neighborhood_size // 2, y - neighborhood_size // 2, neighborhood_size, neighborhood_size)\n\n        # Calculate slope and aspect\n        slope_data, aspect_data = calculate_slope_aspect(small_elevation_data, pixel_size_x, pixel_size_y)\n\n        # Calculate curvature\n        curvature_data = calculate_curvature(small_elevation_data, pixel_size_x, pixel_size_y)\n        northness_data = np.abs(np.sin(np.radians(aspect_data)))\n        eastness_data = np.abs(np.cos(np.radians(aspect_data)))\n\n\n        data_row = {\n            'lat': row['Latitude'],\n            'lon': row['Longitude'],\n            'elevation': row['Elevation'],\n            'slope': slope_data[neighborhood_size // 2, neighborhood_size // 2],\n            'aspect': aspect_data[neighborhood_size // 2, neighborhood_size // 2],\n            'curvature': curvature_data[neighborhood_size // 2, neighborhood_size // 2],\n            'northness': northness_data[neighborhood_size // 2, neighborhood_size // 2],\n            'eastness': eastness_data[neighborhood_size // 2, neighborhood_size // 2]\n        }\n      \n      \n      # Append a row to the DataFrame\n      all_df = all_df.append(data_row, ignore_index=True)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n\n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\ngeotiff_to_csv(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\", result_dem_csv_path)\n#final_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n",
  "history_output" : "",
  "history_begin_time" : 1690257807700,
  "history_end_time" : 1690257809588,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "uVqGEykwTyGc",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\nimport rasterio\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n\ndef read_elevation_data_only(file_path):\n    dataset = gdal.Open(file_path)\n    if dataset is None:\n      print(\"Error: Could not open the file.\")\n      return None\n\n    result_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\n    result_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n\n    print(f\"start to first convert geotiff to {result_dem_csv_path}\")\n\n    band = dataset.GetRasterBand(1)\n    elevation_data = band.ReadAsArray()\n\n    # Get geotransform information\n    geotransform = dataset.GetGeoTransform()\n    min_lon, pixel_size_x, _, max_lat, _, pixel_size_y = geotransform\n\n    # Calculate raster size\n    raster_width = dataset.RasterXSize\n    raster_height = dataset.RasterYSize\n\n    # Generate latitude and longitude arrays\n    lats = np.arange(max_lat, max_lat - pixel_size_y * raster_height, -pixel_size_y)\n    lons = np.arange(min_lon, min_lon + pixel_size_x * raster_width, pixel_size_x)\n\n    # Create meshgrid of latitude and longitude\n    lon_grid, lat_grid = np.meshgrid(lons, lats)\n\n    # Flatten the data and the lat/lon grids\n    elevation_data_flat = elevation_data.flatten()\n    lat_grid_flat = lat_grid.flatten()\n    lon_grid_flat = lon_grid.flatten()\n\n    # Create a DataFrame to store the data\n    df = pd.DataFrame({\n      'Latitude': lat_grid_flat,\n      'Longitude': lon_grid_flat,\n      'Elevation': elevation_data_flat,\n    })\n\n    df.to_csv(result_dem_csv_path)\n    print(f\"DEM geotif is saved to a csv file with only elevation {result_dem_csv_path}\")\n    return df, geotransform\n\ndef geotiff_to_csv(geotiff_file, csv_file):\n    # Open the GeoTIFF file\n    with rasterio.open(geotiff_file) as dataset:\n        # Get the pixel values as a 2D array\n        data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Get the width and height of the GeoTIFF\n        height, width = data.shape\n\n        # Open the CSV file for writing\n        with open(csv_file, 'w', newline='') as csvfile:\n            csvwriter = csv.writer(csvfile)\n\n            # Write the CSV header\n            csvwriter.writerow(['Latitude', 'Longitude', 'Image Value'])\n\n            # Loop through each pixel and extract latitude, longitude, and image value\n            for y in range(height):\n                for x in range(width):\n                    # Get the pixel value\n                    image_value = data[y, x]\n\n                    # Convert pixel coordinates to geographic coordinates\n                    lon, lat = transform * (x, y)\n\n                    # Write the data to the CSV file\n                    csvwriter.writerow([lat, lon, image_value])\n  \n  \ndef read_elevation_data(file_path, neighborhood_size=4):\n    original_df, geotransform = read_elevation_data_only(file_path)\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    print(f\"neighborhood_size // 2 = {neighborhood_size // 2}\")\n    \n    for index, row in original_df.iterrows():\n      # Access individual row elements using row['column_name']\n      # Convert latitude and longitude to pixel indices\n      x, y = lat_lon_to_pixel(row['Latitude'], row['Longitude'], geotransform)\n      \n      if index % 10 == 0:\n        print(f\"processing {x} {y}\")\n\t  \n      if x < neighborhood_size // 2 or y < neighborhood_size // 2 or x > (raster_width - neighborhood_size // 2) or y > (raster_height - neighborhood_size // 2):\n      \tdata_row = {\n            'lat': row['Latitude'],\n            'lon': row['Longitude'],\n            'elevation': row['Elevation'],\n            'slope': -1,\n            'aspect': -1,\n            'curvature': -1,\n            'northness': -1,\n            'eastness': -1\n        }\n      else:\n        # Read a small neighborhood of elevation data around the selected point\n        small_elevation_data = band.ReadAsArray(x - neighborhood_size // 2, y - neighborhood_size // 2, neighborhood_size, neighborhood_size)\n\n        # Calculate slope and aspect\n        slope_data, aspect_data = calculate_slope_aspect(small_elevation_data, pixel_size_x, pixel_size_y)\n\n        # Calculate curvature\n        curvature_data = calculate_curvature(small_elevation_data, pixel_size_x, pixel_size_y)\n        northness_data = np.abs(np.sin(np.radians(aspect_data)))\n        eastness_data = np.abs(np.cos(np.radians(aspect_data)))\n\n\n        data_row = {\n            'lat': row['Latitude'],\n            'lon': row['Longitude'],\n            'elevation': row['Elevation'],\n            'slope': slope_data[neighborhood_size // 2, neighborhood_size // 2],\n            'aspect': aspect_data[neighborhood_size // 2, neighborhood_size // 2],\n            'curvature': curvature_data[neighborhood_size // 2, neighborhood_size // 2],\n            'northness': northness_data[neighborhood_size // 2, neighborhood_size // 2],\n            'eastness': eastness_data[neighborhood_size // 2, neighborhood_size // 2]\n        }\n      \n      \n      # Append a row to the DataFrame\n      all_df = all_df.append(data_row, ignore_index=True)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n\n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\ngeotiff_to_csv(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\", result_dem_csv_path)\n#final_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/uVqGEykwTyGc/western_us_dem.py\", line 181, in <module>\n    geotiff_to_csv(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\", result_dem_csv_path)\n  File \"/home/chetana/gw-workspace/uVqGEykwTyGc/western_us_dem.py\", line 98, in geotiff_to_csv\n    csvwriter = csv.writer(csvfile)\nNameError: name 'csv' is not defined\n",
  "history_begin_time" : 1690257791139,
  "history_end_time" : 1690257795571,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "ntIx1hNHkIhl",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n\ndef read_elevation_data_only(file_path):\n    dataset = gdal.Open(file_path)\n    if dataset is None:\n      print(\"Error: Could not open the file.\")\n      return None\n\n    result_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\n    result_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n\n    print(f\"start to first convert geotiff to {result_dem_csv_path}\")\n\n    band = dataset.GetRasterBand(1)\n    elevation_data = band.ReadAsArray()\n\n    # Get geotransform information\n    geotransform = dataset.GetGeoTransform()\n    min_lon, pixel_size_x, _, max_lat, _, pixel_size_y = geotransform\n\n    # Calculate raster size\n    raster_width = dataset.RasterXSize\n    raster_height = dataset.RasterYSize\n\n    # Generate latitude and longitude arrays\n    lats = np.arange(max_lat, max_lat - pixel_size_y * raster_height, -pixel_size_y)\n    lons = np.arange(min_lon, min_lon + pixel_size_x * raster_width, pixel_size_x)\n\n    # Create meshgrid of latitude and longitude\n    lon_grid, lat_grid = np.meshgrid(lons, lats)\n\n    # Flatten the data and the lat/lon grids\n    elevation_data_flat = elevation_data.flatten()\n    lat_grid_flat = lat_grid.flatten()\n    lon_grid_flat = lon_grid.flatten()\n\n    # Create a DataFrame to store the data\n    df = pd.DataFrame({\n      'Latitude': lat_grid_flat,\n      'Longitude': lon_grid_flat,\n      'Elevation': elevation_data_flat,\n    })\n\n    df.to_csv(result_dem_csv_path)\n    print(f\"DEM geotif is saved to a csv file with only elevation {result_dem_csv_path}\")\n    return df, geotransform\n\ndef geotiff_to_csv(geotiff_file, csv_file):\n    # Open the GeoTIFF file\n    with rasterio.open(geotiff_file) as dataset:\n        # Get the pixel values as a 2D array\n        data = dataset.read(1)\n\n        # Get the geotransform to convert pixel coordinates to geographic coordinates\n        transform = dataset.transform\n\n        # Get the width and height of the GeoTIFF\n        height, width = data.shape\n\n        # Open the CSV file for writing\n        with open(csv_file, 'w', newline='') as csvfile:\n            csvwriter = csv.writer(csvfile)\n\n            # Write the CSV header\n            csvwriter.writerow(['Latitude', 'Longitude', 'Image Value'])\n\n            # Loop through each pixel and extract latitude, longitude, and image value\n            for y in range(height):\n                for x in range(width):\n                    # Get the pixel value\n                    image_value = data[y, x]\n\n                    # Convert pixel coordinates to geographic coordinates\n                    lon, lat = transform * (x, y)\n\n                    # Write the data to the CSV file\n                    csvwriter.writerow([lat, lon, image_value])\n  \n  \ndef read_elevation_data(file_path, neighborhood_size=4):\n    original_df, geotransform = read_elevation_data_only(file_path)\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    print(f\"neighborhood_size // 2 = {neighborhood_size // 2}\")\n    \n    for index, row in original_df.iterrows():\n      # Access individual row elements using row['column_name']\n      # Convert latitude and longitude to pixel indices\n      x, y = lat_lon_to_pixel(row['Latitude'], row['Longitude'], geotransform)\n      \n      if index % 10 == 0:\n        print(f\"processing {x} {y}\")\n\t  \n      if x < neighborhood_size // 2 or y < neighborhood_size // 2 or x > (raster_width - neighborhood_size // 2) or y > (raster_height - neighborhood_size // 2):\n      \tdata_row = {\n            'lat': row['Latitude'],\n            'lon': row['Longitude'],\n            'elevation': row['Elevation'],\n            'slope': -1,\n            'aspect': -1,\n            'curvature': -1,\n            'northness': -1,\n            'eastness': -1\n        }\n      else:\n        # Read a small neighborhood of elevation data around the selected point\n        small_elevation_data = band.ReadAsArray(x - neighborhood_size // 2, y - neighborhood_size // 2, neighborhood_size, neighborhood_size)\n\n        # Calculate slope and aspect\n        slope_data, aspect_data = calculate_slope_aspect(small_elevation_data, pixel_size_x, pixel_size_y)\n\n        # Calculate curvature\n        curvature_data = calculate_curvature(small_elevation_data, pixel_size_x, pixel_size_y)\n        northness_data = np.abs(np.sin(np.radians(aspect_data)))\n        eastness_data = np.abs(np.cos(np.radians(aspect_data)))\n\n\n        data_row = {\n            'lat': row['Latitude'],\n            'lon': row['Longitude'],\n            'elevation': row['Elevation'],\n            'slope': slope_data[neighborhood_size // 2, neighborhood_size // 2],\n            'aspect': aspect_data[neighborhood_size // 2, neighborhood_size // 2],\n            'curvature': curvature_data[neighborhood_size // 2, neighborhood_size // 2],\n            'northness': northness_data[neighborhood_size // 2, neighborhood_size // 2],\n            'eastness': eastness_data[neighborhood_size // 2, neighborhood_size // 2]\n        }\n      \n      \n      # Append a row to the DataFrame\n      all_df = all_df.append(data_row, ignore_index=True)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n\n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\ngeotiff_to_csv(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\", result_dem_csv_path)\n#final_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/ntIx1hNHkIhl/western_us_dem.py\", line 180, in <module>\n    geotiff_to_csv(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\", result_dem_csv_path)\n  File \"/home/chetana/gw-workspace/ntIx1hNHkIhl/western_us_dem.py\", line 85, in geotiff_to_csv\n    with rasterio.open(geotiff_file) as dataset:\nNameError: name 'rasterio' is not defined\n",
  "history_begin_time" : 1690257778679,
  "history_end_time" : 1690257779204,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "ChyF4O3UFHGm",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n\ndef read_elevation_data_only(file_path):\n    dataset = gdal.Open(file_path)\n    if dataset is None:\n      print(\"Error: Could not open the file.\")\n      return None\n\n    result_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\n    result_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n\n    print(f\"start to first convert geotiff to {result_dem_csv_path}\")\n\n    band = dataset.GetRasterBand(1)\n    elevation_data = band.ReadAsArray()\n\n    # Get geotransform information\n    geotransform = dataset.GetGeoTransform()\n    min_lon, pixel_size_x, _, max_lat, _, pixel_size_y = geotransform\n\n    # Calculate raster size\n    raster_width = dataset.RasterXSize\n    raster_height = dataset.RasterYSize\n\n    # Generate latitude and longitude arrays\n    lats = np.arange(max_lat, max_lat - pixel_size_y * raster_height, -pixel_size_y)\n    lons = np.arange(min_lon, min_lon + pixel_size_x * raster_width, pixel_size_x)\n\n    # Create meshgrid of latitude and longitude\n    lon_grid, lat_grid = np.meshgrid(lons, lats)\n\n    # Flatten the data and the lat/lon grids\n    elevation_data_flat = elevation_data.flatten()\n    lat_grid_flat = lat_grid.flatten()\n    lon_grid_flat = lon_grid.flatten()\n\n    # Create a DataFrame to store the data\n    df = pd.DataFrame({\n      'Latitude': lat_grid_flat,\n      'Longitude': lon_grid_flat,\n      'Elevation': elevation_data_flat,\n    })\n\n    df.to_csv(result_dem_csv_path)\n    print(f\"DEM geotif is saved to a csv file with only elevation {result_dem_csv_path}\")\n    return df, geotransform\n\n  \ndef read_elevation_data(file_path, neighborhood_size=4):\n    original_df, geotransform = read_elevation_data_only(file_path)\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    print(f\"neighborhood_size // 2 = {neighborhood_size // 2}\")\n    \n    for index, row in original_df.iterrows():\n      # Access individual row elements using row['column_name']\n      # Convert latitude and longitude to pixel indices\n      x, y = lat_lon_to_pixel(row['Latitude'], row['Longitude'], geotransform)\n      \n      if index % 10 == 0:\n        print(f\"processing {x} {y}\")\n\t  \n      if x < neighborhood_size // 2 or y < neighborhood_size // 2 or x > (raster_width - neighborhood_size // 2) or y > (raster_height - neighborhood_size // 2):\n      \tdata_row = {\n            'lat': row['Latitude'],\n            'lon': row['Longitude'],\n            'elevation': row['Elevation'],\n            'slope': -1,\n            'aspect': -1,\n            'curvature': -1,\n            'northness': -1,\n            'eastness': -1\n        }\n      else:\n        # Read a small neighborhood of elevation data around the selected point\n        small_elevation_data = band.ReadAsArray(x - neighborhood_size // 2, y - neighborhood_size // 2, neighborhood_size, neighborhood_size)\n\n        # Calculate slope and aspect\n        slope_data, aspect_data = calculate_slope_aspect(small_elevation_data, pixel_size_x, pixel_size_y)\n\n        # Calculate curvature\n        curvature_data = calculate_curvature(small_elevation_data, pixel_size_x, pixel_size_y)\n        northness_data = np.abs(np.sin(np.radians(aspect_data)))\n        eastness_data = np.abs(np.cos(np.radians(aspect_data)))\n\n\n        data_row = {\n            'lat': row['Latitude'],\n            'lon': row['Longitude'],\n            'elevation': row['Elevation'],\n            'slope': slope_data[neighborhood_size // 2, neighborhood_size // 2],\n            'aspect': aspect_data[neighborhood_size // 2, neighborhood_size // 2],\n            'curvature': curvature_data[neighborhood_size // 2, neighborhood_size // 2],\n            'northness': northness_data[neighborhood_size // 2, neighborhood_size // 2],\n            'eastness': eastness_data[neighborhood_size // 2, neighborhood_size // 2]\n        }\n      \n      \n      # Append a row to the DataFrame\n      all_df = all_df.append(data_row, ignore_index=True)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n\n# Usage example:\nread_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n#final_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n",
  "history_output" : "start to first convert geotiff to /home/chetana/gridmet_test_run/dem_template.csv\nDEM geotif is saved to a csv file with only elevation /home/chetana/gridmet_test_run/dem_template.csv\nneighborhood_size // 2 = 2\nprocessing 0 0\nprocessing 10 0\nprocessing 20 0\nprocessing 30 0\nprocessing 40 0\nprocessing 50 0\nprocessing 60 0\nprocessing 70 0\nprocessing 80 0\nprocessing 90 0\nprocessing 100 0\nprocessing 110 0\nprocessing 120 0\nprocessing 130 0\nprocessing 140 0\nprocessing 150 0\nprocessing 160 0\nprocessing 170 0\nprocessing 180 0\nprocessing 190 0\nprocessing 200 0\nprocessing 210 0\nprocessing 220 0\nprocessing 230 0\nprocessing 240 0\nprocessing 250 0\nprocessing 260 0\nprocessing 270 0\nprocessing 280 0\nprocessing 290 0\nprocessing 300 0\nprocessing 310 0\nprocessing 320 0\nprocessing 330 0\nprocessing 340 0\nprocessing 350 0\nprocessing 360 0\nprocessing 370 0\nprocessing 380 0\nprocessing 390 0\nprocessing 400 0\nprocessing 410 0\nprocessing 420 0\nprocessing 430 0\nprocessing 440 0\nprocessing 450 0\nprocessing 460 0\nprocessing 470 0\nprocessing 480 0\nprocessing 490 0\nprocessing 500 0\nprocessing 510 0\nprocessing 520 0\nprocessing 530 0\nprocessing 540 0\nprocessing 550 0\nprocessing 560 0\nprocessing 570 0\nprocessing 580 0\nprocessing 590 0\nprocessing 600 0\nprocessing 610 0\nprocessing 620 0\nprocessing 630 0\nprocessing 640 0\nprocessing 650 0\nprocessing 660 0\nprocessing 670 0\nprocessing 680 0\nprocessing 690 0\nprocessing 6 -1\nprocessing 16 -1\nprocessing 26 -1\nprocessing 36 -1\nprocessing 46 -1\nprocessing 56 -1\nprocessing 66 -1\nprocessing 76 -1\nprocessing 86 -1\nprocessing 96 -1\nprocessing 106 -1\nprocessing 116 -1\nprocessing 126 -1\nprocessing 136 -1\nprocessing 146 -1\nprocessing 156 -1\nprocessing 166 -1\nprocessing 176 -1\nprocessing 186 -1\nprocessing 196 -1\nprocessing 206 -1\nprocessing 216 -1\nprocessing 226 -1\nprocessing 236 -1\nprocessing 246 -1\nprocessing 256 -1\nprocessing 266 -1\nprocessing 276 -1\nprocessing 286 -1\nprocessing 296 -1\nprocessing 306 -1\nprocessing 316 -1\nprocessing 326 -1\nprocessing 336 -1\nprocessing 346 -1\nprocessing 356 -1\nprocessing 366 -1\nprocessing 376 -1\nprocessing 386 -1\nprocessing 396 -1\nprocessing 406 -1\nprocessing 416 -1\nprocessing 426 -1\nprocessing 436 -1\nprocessing 446 -1\nprocessing 456 -1\nprocessing 466 -1\nprocessing 476 -1\nprocessing 486 -1\nprocessing 496 -1\nprocessing 506 -1\nprocessing 516 -1\nprocessing 526 -1\nprocessing 536 -1\nprocessing 546 -1\nprocessing 556 -1\nprocessing 566 -1\nprocessing 576 -1\nprocessing 586 -1\nprocessing 596 -1\nprocessing 606 -1\nprocessing 616 -1\nprocessing 626 -1\nprocessing 636 -1\nprocessing 646 -1\nprocessing 656 -1\nprocessing 666 -1\nprocessing 676 -1\nprocessing 686 -1\nprocessing 2 -2\nprocessing 12 -2\nprocessing 22 -2\nprocessing 32 -2\nprocessing 42 -2\nprocessing 52 -2\nprocessing 62 -2\nprocessing 72 -2\nprocessing 82 -2\nprocessing 92 -2\nprocessing 102 -2\nprocessing 112 -2\nprocessing 122 -2\nprocessing 132 -2\nprocessing 142 -2\nprocessing 152 -2\nprocessing 162 -2\nprocessing 172 -2\nprocessing 182 -2\nprocessing 192 -2\nprocessing 202 -2\nprocessing 212 -2\nprocessing 222 -2\nprocessing 232 -2\nprocessing 242 -2\nprocessing 252 -2\nprocessing 262 -2\nprocessing 272 -2\nprocessing 282 -2\nprocessing 292 -2\nprocessing 302 -2\nprocessing 312 -2\nprocessing 322 -2\nprocessing 332 -2\nprocessing 342 -2\nprocessing 352 -2\nprocessing 362 -2\nprocessing 372 -2\nprocessing 382 -2\nprocessing 392 -2\nprocessing 402 -2\nprocessing 412 -2\nprocessing 422 -2\nprocessing 432 -2\nprocessing 442 -2\nprocessing 452 -2\nprocessing 462 -2\nprocessing 472 -2\nprocessing 482 -2\nprocessing 492 -2\nprocessing 502 -2\nprocessing 512 -2\nprocessing 522 -2\nprocessing 532 -2\nprocessing 542 -2\nprocessing 552 -2\nprocessing 562 -2\nprocessing 572 -2\nprocessing 582 -2\nprocessing 592 -2\nprocessing 602 -2\nprocessing 612 -2\nprocessing 622 -2\nprocessing 632 -2\nprocessing 642 -2\nprocessing 652 -2\nprocessing 662 -2\nprocessing 672 -2\nprocessing 682 -2\nprocessing 692 -2\nprocessing 8 -3\nprocessing 18 -3\nprocessing 28 -3\nprocessing 38 -3\nprocessing 48 -3\nprocessing 58 -3\nprocessing 68 -3\nprocessing 78 -3\nprocessing 88 -3\nprocessing 98 -3\nprocessing 108 -3\nprocessing 118 -3\nprocessing 128 -3\nprocessing 138 -3\nprocessing 148 -3\nprocessing 158 -3\nprocessing 168 -3\nprocessing 178 -3\nprocessing 188 -3\nprocessing 198 -3\nprocessing 208 -3\nprocessing 218 -3\nprocessing 228 -3\nprocessing 238 -3\nprocessing 248 -3\nprocessing 258 -3\nprocessing 268 -3\nprocessing 278 -3\nprocessing 288 -3\nprocessing 298 -3\nprocessing 308 -3\nprocessing 318 -3\nprocessing 328 -3\nprocessing 338 -3\nprocessing 348 -3\nprocessing 358 -3\nprocessing 368 -3\nprocessing 378 -3\nprocessing 388 -3\nprocessing 398 -3\nprocessing 408 -3\nprocessing 418 -3\nprocessing 428 -3\nprocessing 438 -3\nprocessing 448 -3\nprocessing 458 -3\nprocessing 468 -3\nprocessing 478 -3\nprocessing 488 -3\nprocessing 498 -3\nprocessing 508 -3\nprocessing 518 -3\nprocessing 528 -3\nprocessing 538 -3\nprocessing 548 -3\nprocessing 558 -3\nprocessing 568 -3\nprocessing 578 -3\nprocessing 588 -3\nprocessing 598 -3\nprocessing 608 -3\nprocessing 618 -3\nprocessing 628 -3\nprocessing 638 -3\nprocessing 648 -3\nprocessing 658 -3\nprocessing 668 -3\nprocessing 678 -3\nprocessing 688 -3\nprocessing 4 -4\nprocessing 14 -4\nprocessing 24 -4\nprocessing 34 -4\nprocessing 44 -4\nprocessing 54 -4\nprocessing 64 -4\nprocessing 74 -4\nprocessing 84 -4\nprocessing 94 -4\nprocessing 104 -4\nprocessing 114 -4\nprocessing 124 -4\nprocessing 134 -4\nprocessing 144 -4\nprocessing 154 -4\nprocessing 164 -4\nprocessing 174 -4\nprocessing 184 -4\nprocessing 194 -4\nprocessing 204 -4\nprocessing 214 -4\nprocessing 224 -4\nprocessing 234 -4\nprocessing 244 -4\nprocessing 254 -4\nprocessing 264 -4\nprocessing 274 -4\nprocessing 284 -4\nprocessing 294 -4\nprocessing 304 -4\nprocessing 314 -4\nprocessing 324 -4\nprocessing 334 -4\nprocessing 344 -4\nprocessing 354 -4\nprocessing 364 -4\nprocessing 374 -4\nprocessing 384 -4\nprocessing 394 -4\nprocessing 404 -4\nprocessing 414 -4\nprocessing 424 -4\nprocessing 434 -4\nprocessing 444 -4\nprocessing 454 -4\nprocessing 464 -4\nprocessing 474 -4\nprocessing 484 -4\nprocessing 494 -4\nprocessing 504 -4\nprocessing 514 -4\nprocessing 524 -4\nprocessing 534 -4\nprocessing 544 -4\nprocessing 554 -4\nprocessing 564 -4\nprocessing 574 -4\nprocessing 584 -4\nprocessing 594 -4\nprocessing 604 -4\nprocessing 614 -4\nprocessing 624 -4\nprocessing 634 -4\nprocessing 644 -4\nprocessing 654 -4\nprocessing 664 -4\nprocessing 674 -4\nprocessing 684 -4\nprocessing 0 -5\nprocessing 10 -5\nprocessing 20 -5\nprocessing 30 -5\nprocessing 40 -5\nprocessing 50 -5\nprocessing 60 -5\nprocessing 70 -5\nprocessing 80 -5\nprocessing 90 -5\nprocessing 100 -5\nprocessing 110 -5\nprocessing 120 -5\nprocessing 130 -5\nprocessing 140 -5\nprocessing 150 -5\nprocessing 160 -5\nprocessing 170 -5\nprocessing 180 -5\nprocessing 190 -5\nprocessing 200 -5\nprocessing 210 -5\nprocessing 220 -5\nprocessing 230 -5\nprocessing 240 -5\nprocessing 250 -5\nprocessing 260 -5\nprocessing 270 -5\nprocessing 280 -5\nprocessing 290 -5\nprocessing 300 -5\nprocessing 310 -5\nprocessing 320 -5\nprocessing 330 -5\nprocessing 340 -5\nprocessing 350 -5\nprocessing 360 -5\nprocessing 370 -5\nprocessing 380 -5\nprocessing 390 -5\nprocessing 400 -5\nprocessing 410 -5\nprocessing 420 -5\nprocessing 430 -5\nprocessing 440 -5\nprocessing 450 -5\nprocessing 460 -5\nprocessing 470 -5\nprocessing 480 -5\nprocessing 490 -5\nprocessing 500 -5\nprocessing 510 -5\nprocessing 520 -5\nprocessing 530 -5\nprocessing 540 -5\nprocessing 550 -5\nprocessing 560 -5\nprocessing 570 -5\nprocessing 580 -5\nprocessing 590 -5\nprocessing 600 -5\nprocessing 610 -5\nprocessing 620 -5\nprocessing 630 -5\nprocessing 640 -5\nprocessing 650 -5\nprocessing 660 -5\nprocessing 670 -5\nprocessing 680 -5\nprocessing 690 -5\nprocessing 6 -6\nprocessing 16 -6\nprocessing 26 -6\nprocessing 36 -6\nprocessing 46 -6\nprocessing 56 -6\nprocessing 66 -6\nprocessing 76 -6\nprocessing 86 -6\nprocessing 96 -6\nprocessing 106 -6\nprocessing 116 -6\nprocessing 126 -6\nprocessing 136 -6\nprocessing 146 -6\nprocessing 156 -6\nprocessing 166 -6\nprocessing 176 -6\nprocessing 186 -6\nprocessing 196 -6\nprocessing 206 -6\nprocessing 216 -6\nprocessing 226 -6\nprocessing 236 -6\nprocessing 246 -6\nprocessing 256 -6\nprocessing 266 -6\nprocessing 276 -6\nprocessing 286 -6\nprocessing 296 -6\nprocessing 306 -6\nprocessing 316 -6\nprocessing 326 -6\nprocessing 336 -6\nprocessing 346 -6\nprocessing 356 -6\nprocessing 366 -6\nprocessing 376 -6\nprocessing 386 -6\nprocessing 396 -6\nprocessing 406 -6\nprocessing 416 -6\nprocessing 426 -6\nprocessing 436 -6\nprocessing 446 -6\nprocessing 456 -6\nprocessing 466 -6\nprocessing 476 -6\nprocessing 486 -6\nprocessing 496 -6\nprocessing 506 -6\nprocessing 516 -6\nprocessing 526 -6\nprocessing 536 -6\nprocessing 546 -6\nprocessing 556 -6\nprocessing 566 -6\nprocessing 576 -6\nprocessing 586 -6\nprocessing 596 -6\nprocessing 606 -6\nprocessing 616 -6\nprocessing 626 -6\nprocessing 636 -6\nprocessing 646 -6\nprocessing 656 -6\nprocessing 666 -6\nprocessing 676 -6\nprocessing 686 -6\nprocessing 2 -7\nprocessing 12 -7\nprocessing 22 -7\nprocessing 32 -7\nprocessing 42 -7\nprocessing 52 -7\nprocessing 62 -7\nprocessing 72 -7\nprocessing 82 -7\nprocessing 92 -7\nprocessing 102 -7\nprocessing 112 -7\nprocessing 122 -7\nprocessing 132 -7\nprocessing 142 -7\nprocessing 152 -7\nprocessing 162 -7\nprocessing 172 -7\nprocessing 182 -7\nprocessing 192 -7\nprocessing 202 -7\nprocessing 212 -7\nprocessing 222 -7\nprocessing 232 -7\nprocessing 242 -7\nprocessing 252 -7\nprocessing 262 -7\nprocessing 272 -7\nprocessing 282 -7\nprocessing 292 -7\nprocessing 302 -7\nprocessing 312 -7\nprocessing 322 -7\nprocessing 332 -7\nprocessing 342 -7\nprocessing 352 -7\nprocessing 362 -7\nprocessing 372 -7\nprocessing 382 -7\nprocessing 392 -7\nprocessing 402 -7\nprocessing 412 -7\nprocessing 422 -7\nprocessing 432 -7\nprocessing 442 -7\nprocessing 452 -7\nprocessing 462 -7\nprocessing 472 -7\nprocessing 482 -7\nprocessing 492 -7\nprocessing 502 -7\nprocessing 512 -7\nprocessing 522 -7\nprocessing 532 -7\nprocessing 542 -7\nprocessing 552 -7\nprocessing 562 -7\nprocessing 572 -7\nprocessing 582 -7\nprocessing 592 -7\nprocessing 602 -7\nprocessing 612 -7\nprocessing 622 -7\nprocessing 632 -7\nprocessing 642 -7\nprocessing 652 -7\nprocessing 662 -7\nprocessing 672 -7\nprocessing 682 -7\nprocessing 692 -7\nprocessing 8 -8\nprocessing 18 -8\nprocessing 28 -8\nprocessing 38 -8\nprocessing 48 -8\nprocessing 58 -8\nprocessing 68 -8\nprocessing 78 -8\nprocessing 88 -8\nprocessing 98 -8\nprocessing 108 -8\nprocessing 118 -8\nprocessing 128 -8\nprocessing 138 -8\nprocessing 148 -8\nprocessing 158 -8\nprocessing 168 -8\nprocessing 178 -8\nprocessing 188 -8\nprocessing 198 -8\nprocessing 208 -8\nprocessing 218 -8\nprocessing 228 -8\nprocessing 238 -8\nprocessing 248 -8\nprocessing 258 -8\nprocessing 268 -8\nprocessing 278 -8\nprocessing 288 -8\nprocessing 298 -8\nprocessing 308 -8\nprocessing 318 -8\nprocessing 328 -8\nprocessing 338 -8\nprocessing 348 -8\nprocessing 358 -8\nprocessing 368 -8\nprocessing 378 -8\nprocessing 388 -8\nprocessing 398 -8\nprocessing 408 -8\nprocessing 418 -8\nprocessing 428 -8\nprocessing 438 -8\nprocessing 448 -8\nprocessing 458 -8\nprocessing 468 -8\nprocessing 478 -8\nprocessing 488 -8\nprocessing 498 -8\nprocessing 508 -8\nprocessing 518 -8\nprocessing 528 -8\nprocessing 538 -8\nprocessing 548 -8\nprocessing 558 -8\nprocessing 568 -8\nprocessing 578 -8\nprocessing 588 -8\nprocessing 598 -8\nprocessing 608 -8\nprocessing 618 -8\nprocessing 628 -8\nprocessing 638 -8\nprocessing 648 -8\nprocessing 658 -8\nprocessing 668 -8\nprocessing 678 -8\nprocessing 688 -8\nprocessing 4 -9\nprocessing 14 -9\nprocessing 24 -9\nprocessing 34 -9\nprocessing 44 -9\nprocessing 54 -9\nprocessing 64 -9\nprocessing 74 -9\nprocessing 84 -9\nprocessing 94 -9\nprocessing 104 -9\nprocessing 114 -9\nprocessing 124 -9\nprocessing 134 -9\nprocessing 144 -9\nprocessing 154 -9\nprocessing 164 -9\nprocessing 174 -9\nprocessing 184 -9\nprocessing 194 -9\nprocessing 204 -9\nprocessing 214 -9\nprocessing 224 -9\nprocessing 234 -9\nprocessing 244 -9\nprocessing 254 -9\nprocessing 264 -9\nprocessing 274 -9\nprocessing 284 -9\nprocessing 294 -9\nprocessing 304 -9\nprocessing 314 -9\nprocessing 324 -9\nprocessing 334 -9\nprocessing 344 -9\nprocessing 354 -9\nprocessing 364 -9\nprocessing 374 -9\nprocessing 384 -9\nprocessing 394 -9\nprocessing 404 -9\nprocessing 414 -9\nprocessing 424 -9\nprocessing 434 -9\nprocessing 444 -9\nprocessing 454 -9\nprocessing 464 -9\nprocessing 474 -9\nprocessing 484 -9\nprocessing 494 -9\nprocessing 504 -9\nprocessing 514 -9\nprocessing 524 -9\nprocessing 534 -9\nprocessing 544 -9\nprocessing 554 -9\nprocessing 564 -9\nprocessing 574 -9\nprocessing 584 -9\nprocessing 594 -9\nprocessing 604 -9\nprocessing 614 -9\nprocessing 624 -9\nprocessing 634 -9\nprocessing 644 -9\nprocessing 654 -9\nprocessing 664 -9\nprocessing 674 -9\nprocessing 684 -9\nprocessing 0 -10\nprocessing 10 -10\nprocessing 20 -10\nprocessing 30 -10\nprocessing 40 -10\nprocessing 50 -10\nprocessing 60 -10\nprocessing 70 -10\nprocessing 80 -10\nprocessing 90 -10\nprocessing 100 -10\nprocessing 110 -10\nprocessing 120 -10\nprocessing 130 -10\nprocessing 140 -10\nprocessing 150 -10\nprocessing 160 -10\nprocessing 170 -10\nprocessing 180 -10\nprocessing 190 -10\nprocessing 200 -10\nprocessing 210 -10\nprocessing 220 -10\nprocessing 230 -10\nprocessing 240 -10\nprocessing 250 -10\nprocessing 260 -10\nprocessing 270 -10\nprocessing 280 -10\nprocessing 290 -10\nprocessing 300 -10\nprocessing 310 -10\nprocessing 320 -10\nprocessing 330 -10\nprocessing 340 -10\nprocessing 350 -10\nprocessing 360 -10\nprocessing 370 -10\nprocessing 380 -10\nprocessing 390 -10\nprocessing 400 -10\nprocessing 410 -10\nprocessing 420 -10\nprocessing 430 -10\nprocessing 440 -10\nprocessing 450 -10\nprocessing 460 -10\nprocessing 470 -10\nprocessing 480 -10\nprocessing 490 -10\nprocessing 500 -10\nprocessing 510 -10\nprocessing 520 -10\nprocessing 530 -10\nprocessing 540 -10\nprocessing 550 -10\nprocessing 560 -10\nprocessing 570 -10\nprocessing 580 -10\nprocessing 590 -10\nprocessing 600 -10\nprocessing 610 -10\nprocessing 620 -10\nprocessing 630 -10\nprocessing 640 -10\nprocessing 650 -10\nprocessing 660 -10\nprocessing 670 -10\nprocessing 680 -10\nprocessing 690 -10\nprocessing 6 -11\nprocessing 16 -11\nprocessing 26 -11\nprocessing 36 -11\nprocessing 46 -11\nprocessing 56 -11\nprocessing 66 -11\nprocessing 76 -11\nprocessing 86 -11\nprocessing 96 -11\nprocessing 106 -11\nprocessing 116 -11\nprocessing 126 -11\nprocessing 136 -11\nprocessing 146 -11\nprocessing 156 -11\nprocessing 166 -11\nprocessing 176 -11\nprocessing 186 -11\nprocessing 196 -11\nprocessing 206 -11\nprocessing 216 -11\nprocessing 226 -11\nprocessing 236 -11\nprocessing 246 -11\nprocessing 256 -11\nprocessing 266 -11\nprocessing 276 -11\nprocessing 286 -11\nprocessing 296 -11\nprocessing 306 -11\nprocessing 316 -11\nprocessing 326 -11\nprocessing 336 -11\nprocessing 346 -11\nprocessing 356 -11\nprocessing 366 -11\nprocessing 376 -11\nprocessing 386 -11\nprocessing 396 -11\nprocessing 406 -11\nprocessing 416 -11\nprocessing 426 -11\nprocessing 436 -11\nprocessing 446 -11\nprocessing 456 -11\nprocessing 466 -11\nprocessing 476 -11\nprocessing 486 -11\nprocessing 496 -11\nprocessing 506 -11\nprocessing 516 -11\nprocessing 526 -11\nprocessing 536 -11\nprocessing 546 -11\nprocessing 556 -11\nprocessing 566 -11\nprocessing 576 -11\nprocessing 586 -11\nprocessing 596 -11\nprocessing 606 -11\nprocessing 616 -11\nprocessing 626 -11\nprocessing 636 -11\nprocessing 646 -11\nprocessing 656 -11\nprocessing 666 -11\nprocessing 676 -11\nprocessing 686 -11\nprocessing 2 -12\nprocessing 12 -12\nprocessing 22 -12\nprocessing 32 -12\nprocessing 42 -12\nprocessing 52 -12\nprocessing 62 -12\nprocessing 72 -12\nprocessing 82 -12\nprocessing 92 -12\nprocessing 102 -12\nprocessing 112 -12\nprocessing 122 -12\nprocessing 132 -12\nprocessing 142 -12\nprocessing 152 -12\nprocessing 162 -12\nprocessing 172 -12\nprocessing 182 -12\nprocessing 192 -12\nprocessing 202 -12\nprocessing 212 -12\nprocessing 222 -12\nprocessing 232 -12\nprocessing 242 -12\nprocessing 252 -12\nprocessing 262 -12\nprocessing 272 -12\nprocessing 282 -12\nprocessing 292 -12\nprocessing 302 -12\nprocessing 312 -12\nprocessing 322 -12\nprocessing 332 -12\nprocessing 342 -12\nprocessing 352 -12\nprocessing 362 -12\nprocessing 372 -12\nprocessing 382 -12\nprocessing 392 -12\nprocessing 402 -12\nprocessing 412 -12\nprocessing 422 -12\nprocessing 432 -12\nprocessing 442 -12\nprocessing 452 -12\nprocessing 462 -12\nprocessing 472 -12\nprocessing 482 -12\nprocessing 492 -12\nprocessing 502 -12\nprocessing 512 -12\nprocessing 522 -12\nprocessing 532 -12\nprocessing 542 -12\nprocessing 552 -12\nprocessing 562 -12\nprocessing 572 -12\nprocessing 582 -12\nprocessing 592 -12\nprocessing 602 -12\nprocessing 612 -12\nprocessing 622 -12\nprocessing 632 -12\nprocessing 642 -12\nprocessing 652 -12\nprocessing 662 -12\nprocessing 672 -12\nprocessing 682 -12\nprocessing 692 -12\nprocessing 8 -13\nprocessing 18 -13\nprocessing 28 -13\nprocessing 38 -13\nprocessing 48 -13\nprocessing 58 -13\nprocessing 68 -13\nprocessing 78 -13\nprocessing 88 -13\nprocessing 98 -13\nprocessing 108 -13\nprocessing 118 -13\nprocessing 128 -13\nprocessing 138 -13\nprocessing 148 -13\nprocessing 158 -13\nprocessing 168 -13\nprocessing 178 -13\nprocessing 188 -13\nprocessing 198 -13\nprocessing 208 -13\nprocessing 218 -13\nprocessing 228 -13\nprocessing 238 -13\nprocessing 248 -13\nprocessing 258 -13\nprocessing 268 -13\nprocessing 278 -13\nprocessing 288 -13\nprocessing 298 -13\nprocessing 308 -13\nprocessing 318 -13\nprocessing 328 -13\nprocessing 338 -13\nprocessing 348 -13\nprocessing 358 -13\nprocessing 368 -13\nprocessing 378 -13\nprocessing 388 -13\nprocessing 398 -13\nprocessing 408 -13\nprocessing 418 -13\nprocessing 428 -13\nprocessing 438 -13\nprocessing 448 -13\nprocessing 458 -13\nprocessing 468 -13\nprocessing 478 -13\nprocessing 488 -13\nprocessing 498 -13\nprocessing 508 -13\nprocessing 518 -13\nprocessing 528 -13\nprocessing 538 -13\nprocessing 548 -13\nprocessing 558 -13\nprocessing 568 -13\nprocessing 578 -13\nprocessing 588 -13\nprocessing 598 -13\nprocessing 608 -13\nprocessing 618 -13\nprocessing 628 -13\nprocessing 638 -13\nprocessing 648 -13\nprocessing 658 -13\nprocessing 668 -13\nprocessing 678 -13\nprocessing 688 -13\nprocessing 4 -14\nprocessing 14 -14\nprocessing 24 -14\nprocessing 34 -14\nprocessing 44 -14\nprocessing 54 -14\nprocessing 64 -14\nprocessing 74 -14\nprocessing 84 -14\nprocessing 94 -14\nprocessing 104 -14\nprocessing 114 -14\nprocessing 124 -14\nprocessing 134 -14\nprocessing 144 -14\nprocessing 154 -14\nprocessing 164 -14\nprocessing 174 -14\nprocessing 184 -14\nprocessing 194 -14\nprocessing 204 -14\nprocessing 214 -14\nprocessing 224 -14\nprocessing 234 -14\nprocessing 244 -14\nprocessing 254 -14\nprocessing 264 -14\nprocessing 274 -14\nprocessing 284 -14\nprocessing 294 -14\nprocessing 304 -14\nprocessing 314 -14\nprocessing 324 -14\nprocessing 334 -14\nprocessing 344 -14\nprocessing 354 -14\nprocessing 364 -14\nprocessing 374 -14\nprocessing 384 -14\nprocessing 394 -14\nprocessing 404 -14\nprocessing 414 -14\nprocessing 424 -14\nprocessing 434 -14\nprocessing 444 -14\nprocessing 454 -14\nprocessing 464 -14\nprocessing 474 -14\nprocessing 484 -14\nprocessing 494 -14\nprocessing 504 -14\nprocessing 514 -14\nprocessing 524 -14\nprocessing 534 -14\nprocessing 544 -14\nprocessing 554 -14\nprocessing 564 -14\nprocessing 574 -14\nprocessing 584 -14\nprocessing 594 -14\nprocessing 604 -14\nprocessing 614 -14\nprocessing 624 -14\nprocessing 634 -14\nprocessing 644 -14\nprocessing 654 -14\nprocessing 664 -14\nprocessing 674 -14\nprocessing 684 -14\nprocessing 0 -15\nprocessing 10 -15\nprocessing 20 -15\nprocessing 30 -15\nprocessing 40 -15\nprocessing 50 -15\nprocessing 60 -15\nprocessing 70 -15\nprocessing 80 -15\nprocessing 90 -15\nprocessing 100 -15\nprocessing 110 -15\nprocessing 120 -15\nprocessing 130 -15\nprocessing 140 -15\nprocessing 150 -15\nprocessing 160 -15\nprocessing 170 -15\nprocessing 180 -15\nprocessing 190 -15\nprocessing 200 -15\nprocessing 210 -15\nprocessing 220 -15\nprocessing 230 -15\nprocessing 240 -15\nprocessing 250 -15\nprocessing 260 -15\nprocessing 270 -15\nprocessing 280 -15\nprocessing 290 -15\nprocessing 300 -15\nprocessing 310 -15\nprocessing 320 -15\nprocessing 330 -15\nprocessing 340 -15\nprocessing 350 -15\nprocessing 360 -15\nprocessing 370 -15\nprocessing 380 -15\nprocessing 390 -15\nprocessing 400 -15\nprocessing 410 -15\nprocessing 420 -15\nprocessing 430 -15\nprocessing 440 -15\nprocessing 450 -15\nprocessing 460 -15\nprocessing 470 -15\nprocessing 480 -15\nprocessing 490 -15\nprocessing 500 -15\nprocessing 510 -15\nprocessing 520 -15\nprocessing 530 -15\nprocessing 540 -15\nprocessing 550 -15\nprocessing 560 -15\nprocessing 570 -15\nprocessing 580 -15\nprocessing 590 -15\nprocessing 600 -15\nprocessing 610 -15\nprocessing 620 -15\nprocessing 630 -15\nprocessing 640 -15\nprocessing 650 -15\nprocessing 660 -15\nprocessing 670 -15\nprocessing 680 -15\nprocessing 690 -15\nprocessing 6 -16\nprocessing 16 -16\nprocessing 26 -16\nprocessing 36 -16\nprocessing 46 -16\nprocessing 56 -16\nprocessing 66 -16\nprocessing 76 -16\nprocessing 86 -16\nprocessing 96 -16\nprocessing 106 -16\nprocessing 116 -16\nprocessing 126 -16\nprocessing 136 -16\nprocessing 146 -16\nprocessing 156 -16\nprocessing 166 -16\nprocessing 176 -16\nprocessing 186 -16\nprocessing 196 -16\nprocessing 206 -16\nprocessing 216 -16\nprocessing 226 -16\nprocessing 236 -16\nprocessing 246 -16\nprocessing 256 -16\nprocessing 266 -16\nprocessing 276 -16\nprocessing 286 -16\nprocessing 296 -16\nprocessing 306 -16\nprocessing 316 -16\nprocessing 326 -16\nprocessing 336 -16\nprocessing 346 -16\nprocessing 356 -16\nprocessing 366 -16\nprocessing 376 -16\nprocessing 386 -16\nprocessing 396 -16\nprocessing 406 -16\nprocessing 416 -16\nprocessing 426 -16\nprocessing 436 -16\nprocessing 446 -16\nprocessing 456 -16\nprocessing 466 -16\nprocessing 476 -16\nprocessing 486 -16\nprocessing 496 -16\nprocessing 506 -16\nprocessing 516 -16\nprocessing 526 -16\nprocessing 536 -16\nprocessing 546 -16\nprocessing 556 -16\nprocessing 566 -16\nprocessing 576 -16\nprocessing 586 -16\nprocessing 596 -16\nprocessing 606 -16\nprocessing 616 -16\nprocessing 626 -16\nprocessing 636 -16\nprocessing 646 -16\nprocessing 656 -16\nprocessing 666 -16\nprocessing 676 -16\nprocessing 686 -16\nprocessing 2 -17\nprocessing 12 -17\nprocessing 22 -17\nprocessing 32 -17\nprocessing 42 -17\nprocessing 52 -17\nprocessing 62 -17\nprocessing 72 -17\nprocessing 82 -17\nprocessing 92 -17\nprocessing 102 -17\nprocessing 112 -17\nprocessing 122 -17\nprocessing 132 -17\nprocessing 142 -17\nprocessing 152 -17\nprocessing 162 -17\nprocessing 172 -17\nprocessing 182 -17\nprocessing 192 -17\nprocessing 202 -17\nprocessing 212 -17\nprocessing 222 -17\nprocessing 232 -17\nprocessing 242 -17\nprocessing 252 -17\nprocessing 262 -17\nprocessing 272 -17\nprocessing 282 -17\nprocessing 292 -17\nprocessing 302 -17\nprocessing 312 -17\nprocessing 322 -17\nprocessing 332 -17\nprocessing 342 -17\nprocessing 352 -17\nprocessing 362 -17\nprocessing 372 -17\nprocessing 382 -17\nprocessing 392 -17\nprocessing 402 -17\nprocessing 412 -17\nprocessing 422 -17\nprocessing 432 -17\nprocessing 442 -17\nprocessing 452 -17\nprocessing 462 -17\nprocessing 472 -17\nprocessing 482 -17\nprocessing 492 -17\nprocessing 502 -17\nprocessing 512 -17\nprocessing 522 -17\nprocessing 532 -17\nprocessing 542 -17\nprocessing 552 -17\nprocessing 562 -17\nprocessing 572 -17\nprocessing 582 -17\nprocessing 592 -17\nprocessing 602 -17\nprocessing 612 -17\nprocessing 622 -17\nprocessing 632 -17\nprocessing 642 -17\nprocessing 652 -17\nprocessing 662 -17\nprocessing 672 -17\nprocessing 682 -17\nprocessing 692 -17\nprocessing 8 -18\nprocessing 18 -18\nprocessing 28 -18\nprocessing 38 -18\nprocessing 48 -18\nprocessing 58 -18\nprocessing 68 -18\nprocessing 78 -18\nprocessing 88 -18\nprocessing 98 -18\nprocessing 108 -18\nprocessing 118 -18\nprocessing 128 -18\nprocessing 138 -18\nprocessing 148 -18\nprocessing 158 -18\nprocessing 168 -18\nprocessing 178 -18\nprocessing 188 -18\nprocessing 198 -18\nprocessing 208 -18\nprocessing 218 -18\nprocessing 228 -18\nprocessing 238 -18\nprocessing 248 -18\nprocessing 258 -18\nprocessing 268 -18\nprocessing 278 -18\nprocessing 288 -18\nprocessing 298 -18\nprocessing 308 -18\nprocessing 318 -18\nprocessing 328 -18\nprocessing 338 -18\nprocessing 348 -18\nprocessing 358 -18\nprocessing 368 -18\nprocessing 378 -18\nprocessing 388 -18\nprocessing 398 -18\nprocessing 408 -18\nprocessing 418 -18\nprocessing 428 -18\nprocessing 438 -18\nprocessing 448 -18\nprocessing 458 -18\nprocessing 468 -18\nprocessing 478 -18\nprocessing 488 -18\nprocessing 498 -18\nprocessing 508 -18\nprocessing 518 -18\nprocessing 528 -18\nprocessing 538 -18\nprocessing 548 -18\nprocessing 558 -18\nprocessing 568 -18\nprocessing 578 -18\nprocessing 588 -18\nprocessing 598 -18\nprocessing 608 -18\nprocessing 618 -18\nprocessing 628 -18\nprocessing 638 -18\nprocessing 648 -18\nprocessing 658 -18\nprocessing 668 -18\nprocessing 678 -18\nprocessing 688 -18\nprocessing 4 -19\nprocessing 14 -19\nprocessing 24 -19\nprocessing 34 -19\nprocessing 44 -19\nprocessing 54 -19\nprocessing 64 -19\nprocessing 74 -19\nprocessing 84 -19\nprocessing 94 -19\nprocessing 104 -19\nprocessing 114 -19\nprocessing 124 -19\nprocessing 134 -19\n",
  "history_begin_time" : 1690257507954,
  "history_end_time" : 1690257523358,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "dhW4EZ51jnID",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n\ndef read_elevation_data_only(file_path):\n    dataset = gdal.Open(file_path)\n    if dataset is None:\n      print(\"Error: Could not open the file.\")\n      return None\n\n    result_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\n    result_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n\n    print(f\"start to first convert geotiff to {result_dem_csv_path}\")\n\n    band = dataset.GetRasterBand(1)\n    elevation_data = band.ReadAsArray()\n\n    # Get geotransform information\n    geotransform = dataset.GetGeoTransform()\n    min_lon, pixel_size_x, _, max_lat, _, pixel_size_y = geotransform\n\n    # Calculate raster size\n    raster_width = dataset.RasterXSize\n    raster_height = dataset.RasterYSize\n\n    # Generate latitude and longitude arrays\n    lats = np.arange(max_lat, max_lat - pixel_size_y * raster_height, -pixel_size_y)\n    lons = np.arange(min_lon, min_lon + pixel_size_x * raster_width, pixel_size_x)\n\n    # Create meshgrid of latitude and longitude\n    lon_grid, lat_grid = np.meshgrid(lons, lats)\n\n    # Flatten the data and the lat/lon grids\n    elevation_data_flat = elevation_data.flatten()\n    lat_grid_flat = lat_grid.flatten()\n    lon_grid_flat = lon_grid.flatten()\n\n    # Create a DataFrame to store the data\n    df = pd.DataFrame({\n      'Latitude': lat_grid_flat,\n      'Longitude': lon_grid_flat,\n      'Elevation': elevation_data_flat,\n    })\n\n    df.to_csv(result_dem_csv_path)\n    print(f\"DEM geotif is saved to a csv file with only elevation {result_dem_csv_path}\")\n    return df\n\n  \ndef read_elevation_data(file_path, neighborhood_size=4):\n    original_df = read_elevation_data_only(file_path)\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    print(f\"neighborhood_size // 2 = {neighborhood_size // 2}\")\n    \n    for index, row in original_df.iterrows():\n      # Access individual row elements using row['column_name']\n      # Convert latitude and longitude to pixel indices\n      x, y = lat_lon_to_pixel(row['Latitude'], row['Longitude'], geotransform)\n      \n      if index % 10 == 0:\n        print(f\"processing {x} {y}\")\n\t  \n      if x < neighborhood_size // 2 or y < neighborhood_size // 2 or x > (raster_width - neighborhood_size // 2) or y > (raster_height - neighborhood_size // 2):\n      \tdata_row = {\n            'lat': row['Latitude'],\n            'lon': row['Longitude'],\n            'elevation': row['Elevation'],\n            'slope': -1,\n            'aspect': -1,\n            'curvature': -1,\n            'northness': -1,\n            'eastness': -1\n        }\n      else:\n        # Read a small neighborhood of elevation data around the selected point\n        small_elevation_data = band.ReadAsArray(x - neighborhood_size // 2, y - neighborhood_size // 2, neighborhood_size, neighborhood_size)\n\n        # Calculate slope and aspect\n        slope_data, aspect_data = calculate_slope_aspect(small_elevation_data, pixel_size_x, pixel_size_y)\n\n        # Calculate curvature\n        curvature_data = calculate_curvature(small_elevation_data, pixel_size_x, pixel_size_y)\n        northness_data = np.abs(np.sin(np.radians(aspect_data)))\n        eastness_data = np.abs(np.cos(np.radians(aspect_data)))\n\n\n        data_row = {\n            'lat': row['Latitude'],\n            'lon': row['Longitude'],\n            'elevation': row['Elevation'],\n            'slope': slope_data[neighborhood_size // 2, neighborhood_size // 2],\n            'aspect': aspect_data[neighborhood_size // 2, neighborhood_size // 2],\n            'curvature': curvature_data[neighborhood_size // 2, neighborhood_size // 2],\n            'northness': northness_data[neighborhood_size // 2, neighborhood_size // 2],\n            'eastness': eastness_data[neighborhood_size // 2, neighborhood_size // 2]\n        }\n      \n      \n      # Append a row to the DataFrame\n      all_df = all_df.append(data_row, ignore_index=True)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n\n# Usage example:\nread_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n#final_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n",
  "history_output" : "start to first convert geotiff to /home/chetana/gridmet_test_run/dem_template.csv\nDEM geotif is saved to a csv file with only elevation /home/chetana/gridmet_test_run/dem_template.csv\nneighborhood_size // 2 = 2\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/dhW4EZ51jnID/western_us_dem.py\", line 147, in <module>\n    read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n  File \"/home/chetana/gw-workspace/dhW4EZ51jnID/western_us_dem.py\", line 96, in read_elevation_data\n    x, y = lat_lon_to_pixel(row['Latitude'], row['Longitude'], geotransform)\nNameError: name 'geotransform' is not defined\n",
  "history_begin_time" : 1690257369531,
  "history_end_time" : 1690257371940,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "Yp5jaYzlGn45",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n\ndef read_elevation_data_only(file_path):\n  \tdataset = gdal.Open(file_path)\n  \tif dataset is None:\n  \t  print(\"Error: Could not open the file.\")\n  \t  return None\n\t\n  \tresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\n  \tresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n    \n  \tprint(f\"start to first convert geotiff to {result_dem_csv_path}\")\n    \n  \tband = dataset.GetRasterBand(1)\n  \televation_data = band.ReadAsArray()\n\n  \t# Get geotransform information\n  \tgeotransform = dataset.GetGeoTransform()\n  \tmin_lon, pixel_size_x, _, max_lat, _, pixel_size_y = geotransform\n\n  \t# Calculate raster size\n  \traster_width = dataset.RasterXSize\n  \traster_height = dataset.RasterYSize\n\n  \t# Generate latitude and longitude arrays\n  \tlats = np.arange(max_lat, max_lat - pixel_size_y * raster_height, -pixel_size_y)\n  \tlons = np.arange(min_lon, min_lon + pixel_size_x * raster_width, pixel_size_x)\n\n  \t# Create meshgrid of latitude and longitude\n  \tlon_grid, lat_grid = np.meshgrid(lons, lats)\n\n  \t# Flatten the data and the lat/lon grids\n  \televation_data_flat = elevation_data.flatten()\n  \tlat_grid_flat = lat_grid.flatten()\n  \tlon_grid_flat = lon_grid.flatten()\n\n  \t# Create a DataFrame to store the data\n  \tdf = pd.DataFrame({\n  \t  'Latitude': lat_grid_flat,\n  \t  'Longitude': lon_grid_flat,\n  \t  'Elevation': elevation_data_flat,\n  \t})\n    \n  \tdf.to_csv(result_dem_csv_path)\n  \tprint(f\"DEM geotif is saved to a csv file with only elevation {result_dem_csv_path}\")\n    return df\n\n  \ndef read_elevation_data(file_path, neighborhood_size=4):\n    original_df = read_elevation_data_only(file_path)\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    print(f\"neighborhood_size // 2 = {neighborhood_size // 2}\")\n    \n    for index, row in original_df.iterrows():\n      # Access individual row elements using row['column_name']\n      # Convert latitude and longitude to pixel indices\n      x, y = lat_lon_to_pixel(row['Latitude'], row['Longitude'], geotransform)\n      \n      if index % 10 == 0:\n        print(f\"processing {x} {y}\")\n\t  \n      if x < neighborhood_size // 2 or y < neighborhood_size // 2 or x > (raster_width - neighborhood_size // 2) or y > (raster_height - neighborhood_size // 2):\n      \tdata_row = {\n            'lat': row['Latitude'],\n            'lon': row['Longitude'],\n            'elevation': row['Elevation'],\n            'slope': -1,\n            'aspect': -1,\n            'curvature': -1,\n            'northness': -1,\n            'eastness': -1\n        }\n      else:\n        # Read a small neighborhood of elevation data around the selected point\n        small_elevation_data = band.ReadAsArray(x - neighborhood_size // 2, y - neighborhood_size // 2, neighborhood_size, neighborhood_size)\n\n        # Calculate slope and aspect\n        slope_data, aspect_data = calculate_slope_aspect(small_elevation_data, pixel_size_x, pixel_size_y)\n\n        # Calculate curvature\n        curvature_data = calculate_curvature(small_elevation_data, pixel_size_x, pixel_size_y)\n        northness_data = np.abs(np.sin(np.radians(aspect_data)))\n        eastness_data = np.abs(np.cos(np.radians(aspect_data)))\n\n\n        data_row = {\n            'lat': row['Latitude'],\n            'lon': row['Longitude'],\n            'elevation': row['Elevation'],\n            'slope': slope_data[neighborhood_size // 2, neighborhood_size // 2],\n            'aspect': aspect_data[neighborhood_size // 2, neighborhood_size // 2],\n            'curvature': curvature_data[neighborhood_size // 2, neighborhood_size // 2],\n            'northness': northness_data[neighborhood_size // 2, neighborhood_size // 2],\n            'eastness': eastness_data[neighborhood_size // 2, neighborhood_size // 2]\n        }\n      \n      \n      # Append a row to the DataFrame\n      all_df = all_df.append(data_row, ignore_index=True)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n\n# Usage example:\nread_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n#final_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n",
  "history_output" : "  File \"/home/chetana/gw-workspace/Yp5jaYzlGn45/western_us_dem.py\", line 81\n    return df\n             ^\nIndentationError: unindent does not match any outer indentation level\n",
  "history_begin_time" : 1690257287128,
  "history_end_time" : 1690257287184,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "Jz30k6iW5mjG",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n\ndef read_elevation_data_only(file_path):\n  \tdataset = gdal.Open(file_path)\n  \tif dataset is None:\n  \t  print(\"Error: Could not open the file.\")\n  \t  return None\n\t\n  \tresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\n  \tresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n    \n  \tprint(f\"start to first convert geotiff to {result_dem_csv_path}\")\n    \n  \tband = dataset.GetRasterBand(1)\n  \televation_data = band.ReadAsArray()\n\n  \t# Get geotransform information\n  \tgeotransform = dataset.GetGeoTransform()\n  \tmin_lon, pixel_size_x, _, max_lat, _, pixel_size_y = geotransform\n\n  \t# Calculate raster size\n  \traster_width = dataset.RasterXSize\n  \traster_height = dataset.RasterYSize\n\n  \t# Generate latitude and longitude arrays\n  \tlats = np.arange(max_lat, max_lat - pixel_size_y * raster_height, -pixel_size_y)\n  \tlons = np.arange(min_lon, min_lon + pixel_size_x * raster_width, pixel_size_x)\n\n  \t# Create meshgrid of latitude and longitude\n  \tlon_grid, lat_grid = np.meshgrid(lons, lats)\n\n  \t# Flatten the data and the lat/lon grids\n  \televation_data_flat = elevation_data.flatten()\n  \tlat_grid_flat = lat_grid.flatten()\n  \tlon_grid_flat = lon_grid.flatten()\n\n  \t# Create a DataFrame to store the data\n  \tdf = pd.DataFrame({\n  \t  'Latitude': lat_grid_flat,\n  \t  'Longitude': lon_grid_flat,\n  \t  'Elevation': elevation_data_flat,\n  \t})\n    \n  \tdf.to_csv(result_dem_csv_path)\n  \tprint(f\"DEM geotif is saved to a csv file with only elevation {result_dem_csv_path}\")\n\n  \ndef read_elevation_data(file_path, neighborhood_size=6):\n    \n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    print(f\"neighborhood_size // 2 = {neighborhood_size // 2}\")\n    \n    for index, row in df.iterrows():\n      # Access individual row elements using row['column_name']\n      # Convert latitude and longitude to pixel indices\n      x, y = lat_lon_to_pixel(row['Latitude'], row['Longitude'], geotransform)\n      \n      if index %1000 == 0:\n        print(f\"processing {x} {y}\")\n\t  \n      if x < neighborhood_size // 2 or y < neighborhood_size // 2 or x > (raster_width - neighborhood_size // 2) or y > (raster_height - neighborhood_size // 2):\n      \tdata_row = {\n            'lat': row['Latitude'],\n            'lon': row['Longitude'],\n            'elevation': row['Elevation'],\n            'slope': -1,\n            'aspect': -1,\n            'curvature': -1,\n            'northness': -1,\n            'eastness': -1\n        }\n      else:\n        # Read a small neighborhood of elevation data around the selected point\n        small_elevation_data = band.ReadAsArray(x - neighborhood_size // 2, y - neighborhood_size // 2, neighborhood_size, neighborhood_size)\n\n        # Calculate slope and aspect\n        slope_data, aspect_data = calculate_slope_aspect(small_elevation_data, pixel_size_x, pixel_size_y)\n\n        # Calculate curvature\n        curvature_data = calculate_curvature(small_elevation_data, pixel_size_x, pixel_size_y)\n        northness_data = np.abs(np.sin(np.radians(aspect_data)))\n        eastness_data = np.abs(np.cos(np.radians(aspect_data)))\n\n\n        data_row = {\n            'lat': row['Latitude'],\n            'lon': row['Longitude'],\n            'elevation': row['Elevation'],\n            'slope': slope_data[neighborhood_size // 2, neighborhood_size // 2],\n            'aspect': aspect_data[neighborhood_size // 2, neighborhood_size // 2],\n            'curvature': curvature_data[neighborhood_size // 2, neighborhood_size // 2],\n            'northness': northness_data[neighborhood_size // 2, neighborhood_size // 2],\n            'eastness': eastness_data[neighborhood_size // 2, neighborhood_size // 2]\n        }\n      \n      \n      # Append a row to the DataFrame\n      all_df = all_df.append(data_row, ignore_index=True)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n\n# Usage example:\nread_elevation_data_only(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n#final_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n",
  "history_output" : "start to first convert geotiff to /home/chetana/gridmet_test_run/dem_template.csv\nDEM geotif is saved to a csv file with only elevation /home/chetana/gridmet_test_run/dem_template.csv\n",
  "history_begin_time" : 1690257117960,
  "history_end_time" : 1690257120342,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "It95OYYWNjHj",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n\ndef read_elevation_data_only(file_path):\n  \tdataset = gdal.Open(file_path)\n  \tif dataset is None:\n  \t  print(\"Error: Could not open the file.\")\n  \t  return None\n\t\n  \tresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\n  \tresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n    \n  \tprint(f\"start to first convert geotiff to {result_dem_csv_path}\")\n    \n    band = dataset.GetRasterBand(1)\n    elevation_data = band.ReadAsArray()\n\n    # Get geotransform information\n    geotransform = dataset.GetGeoTransform()\n    min_lon, pixel_size_x, _, max_lat, _, pixel_size_y = geotransform\n\n    # Calculate raster size\n    raster_width = dataset.RasterXSize\n    raster_height = dataset.RasterYSize\n\n    # Generate latitude and longitude arrays\n    lats = np.arange(max_lat, max_lat - pixel_size_y * raster_height, -pixel_size_y)\n    lons = np.arange(min_lon, min_lon + pixel_size_x * raster_width, pixel_size_x)\n\n    # Create meshgrid of latitude and longitude\n    lon_grid, lat_grid = np.meshgrid(lons, lats)\n\n    # Flatten the data and the lat/lon grids\n    elevation_data_flat = elevation_data.flatten()\n    lat_grid_flat = lat_grid.flatten()\n    lon_grid_flat = lon_grid.flatten()\n\n    # Create a DataFrame to store the data\n    df = pd.DataFrame({\n      'Latitude': lat_grid_flat,\n      'Longitude': lon_grid_flat,\n      'Elevation': elevation_data_flat,\n    })\n    \n    df.to_csv(result_dem_csv_path)\n    print(f\"DEM geotif is saved to a csv file with only elevation {result_dem_csv_path}\")\n\n  \ndef read_elevation_data(file_path, neighborhood_size=6):\n    \n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    print(f\"neighborhood_size // 2 = {neighborhood_size // 2}\")\n    \n    for index, row in df.iterrows():\n      # Access individual row elements using row['column_name']\n      # Convert latitude and longitude to pixel indices\n      x, y = lat_lon_to_pixel(row['Latitude'], row['Longitude'], geotransform)\n      \n      if index %1000 == 0:\n        print(f\"processing {x} {y}\")\n\t  \n      if x < neighborhood_size // 2 or y < neighborhood_size // 2 or x > (raster_width - neighborhood_size // 2) or y > (raster_height - neighborhood_size // 2):\n      \tdata_row = {\n            'lat': row['Latitude'],\n            'lon': row['Longitude'],\n            'elevation': row['Elevation'],\n            'slope': -1,\n            'aspect': -1,\n            'curvature': -1,\n            'northness': -1,\n            'eastness': -1\n        }\n      else:\n        # Read a small neighborhood of elevation data around the selected point\n        small_elevation_data = band.ReadAsArray(x - neighborhood_size // 2, y - neighborhood_size // 2, neighborhood_size, neighborhood_size)\n\n        # Calculate slope and aspect\n        slope_data, aspect_data = calculate_slope_aspect(small_elevation_data, pixel_size_x, pixel_size_y)\n\n        # Calculate curvature\n        curvature_data = calculate_curvature(small_elevation_data, pixel_size_x, pixel_size_y)\n        northness_data = np.abs(np.sin(np.radians(aspect_data)))\n        eastness_data = np.abs(np.cos(np.radians(aspect_data)))\n\n\n        data_row = {\n            'lat': row['Latitude'],\n            'lon': row['Longitude'],\n            'elevation': row['Elevation'],\n            'slope': slope_data[neighborhood_size // 2, neighborhood_size // 2],\n            'aspect': aspect_data[neighborhood_size // 2, neighborhood_size // 2],\n            'curvature': curvature_data[neighborhood_size // 2, neighborhood_size // 2],\n            'northness': northness_data[neighborhood_size // 2, neighborhood_size // 2],\n            'eastness': eastness_data[neighborhood_size // 2, neighborhood_size // 2]\n        }\n      \n      \n      # Append a row to the DataFrame\n      all_df = all_df.append(data_row, ignore_index=True)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n\n# Usage example:\nread_elevation_data_only(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n#final_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n",
  "history_output" : "  File \"/home/chetana/gw-workspace/It95OYYWNjHj/western_us_dem.py\", line 49\n    band = dataset.GetRasterBand(1)\n                                   ^\nIndentationError: unindent does not match any outer indentation level\n",
  "history_begin_time" : 1690257068528,
  "history_end_time" : 1690257068584,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "gl068KTKHn93",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n\ndef read_elevation_data_only(file_path):\n  \tdataset = gdal.Open(file_path)\n  \tif dataset is None:\n  \t  print(\"Error: Could not open the file.\")\n  \t  return None\n\t\n  \tresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\n  \tresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n    \n    print(f\"start to first convert geotiff to {result_dem_csv_path}\")\n    \n    band = dataset.GetRasterBand(1)\n    elevation_data = band.ReadAsArray()\n\n    # Get geotransform information\n    geotransform = dataset.GetGeoTransform()\n    min_lon, pixel_size_x, _, max_lat, _, pixel_size_y = geotransform\n\n    # Calculate raster size\n    raster_width = dataset.RasterXSize\n    raster_height = dataset.RasterYSize\n\n    # Generate latitude and longitude arrays\n    lats = np.arange(max_lat, max_lat - pixel_size_y * raster_height, -pixel_size_y)\n    lons = np.arange(min_lon, min_lon + pixel_size_x * raster_width, pixel_size_x)\n\n    # Create meshgrid of latitude and longitude\n    lon_grid, lat_grid = np.meshgrid(lons, lats)\n\n    # Flatten the data and the lat/lon grids\n    elevation_data_flat = elevation_data.flatten()\n    lat_grid_flat = lat_grid.flatten()\n    lon_grid_flat = lon_grid.flatten()\n\n    # Create a DataFrame to store the data\n    df = pd.DataFrame({\n      'Latitude': lat_grid_flat,\n      'Longitude': lon_grid_flat,\n      'Elevation': elevation_data_flat,\n    })\n    \n    df.to_csv(result_dem_csv_path)\n    print(f\"DEM geotif is saved to a csv file with only elevation {result_dem_csv_path}\")\n\n  \ndef read_elevation_data(file_path, neighborhood_size=6):\n    \n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    print(f\"neighborhood_size // 2 = {neighborhood_size // 2}\")\n    \n    for index, row in df.iterrows():\n      # Access individual row elements using row['column_name']\n      # Convert latitude and longitude to pixel indices\n      x, y = lat_lon_to_pixel(row['Latitude'], row['Longitude'], geotransform)\n      \n      if index %1000 == 0:\n        print(f\"processing {x} {y}\")\n\t  \n      if x < neighborhood_size // 2 or y < neighborhood_size // 2 or x > (raster_width - neighborhood_size // 2) or y > (raster_height - neighborhood_size // 2):\n      \tdata_row = {\n            'lat': row['Latitude'],\n            'lon': row['Longitude'],\n            'elevation': row['Elevation'],\n            'slope': -1,\n            'aspect': -1,\n            'curvature': -1,\n            'northness': -1,\n            'eastness': -1\n        }\n      else:\n        # Read a small neighborhood of elevation data around the selected point\n        small_elevation_data = band.ReadAsArray(x - neighborhood_size // 2, y - neighborhood_size // 2, neighborhood_size, neighborhood_size)\n\n        # Calculate slope and aspect\n        slope_data, aspect_data = calculate_slope_aspect(small_elevation_data, pixel_size_x, pixel_size_y)\n\n        # Calculate curvature\n        curvature_data = calculate_curvature(small_elevation_data, pixel_size_x, pixel_size_y)\n        northness_data = np.abs(np.sin(np.radians(aspect_data)))\n        eastness_data = np.abs(np.cos(np.radians(aspect_data)))\n\n\n        data_row = {\n            'lat': row['Latitude'],\n            'lon': row['Longitude'],\n            'elevation': row['Elevation'],\n            'slope': slope_data[neighborhood_size // 2, neighborhood_size // 2],\n            'aspect': aspect_data[neighborhood_size // 2, neighborhood_size // 2],\n            'curvature': curvature_data[neighborhood_size // 2, neighborhood_size // 2],\n            'northness': northness_data[neighborhood_size // 2, neighborhood_size // 2],\n            'eastness': eastness_data[neighborhood_size // 2, neighborhood_size // 2]\n        }\n      \n      \n      # Append a row to the DataFrame\n      all_df = all_df.append(data_row, ignore_index=True)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n\n# Usage example:\nread_elevation_data_only(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n#final_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n",
  "history_output" : "  File \"/home/chetana/gw-workspace/gl068KTKHn93/western_us_dem.py\", line 47\n    print(f\"start to first convert geotiff to {result_dem_csv_path}\")\n                                                                     ^\nIndentationError: unindent does not match any outer indentation level\n",
  "history_begin_time" : 1690257061142,
  "history_end_time" : 1690257061198,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "Ujz8UV0xpU0V",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n\ndef read_elevation_data_only(file_path):\n  \tdataset = gdal.Open(file_path)\n  \tif dataset is None:\n  \t  print(\"Error: Could not open the file.\")\n  \t  return None\n\t\n    result_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\n    result_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n    \n    print(f\"start to first convert geotiff to {result_dem_csv_path}\")\n    \n    band = dataset.GetRasterBand(1)\n    elevation_data = band.ReadAsArray()\n\n    # Get geotransform information\n    geotransform = dataset.GetGeoTransform()\n    min_lon, pixel_size_x, _, max_lat, _, pixel_size_y = geotransform\n\n    # Calculate raster size\n    raster_width = dataset.RasterXSize\n    raster_height = dataset.RasterYSize\n\n    # Generate latitude and longitude arrays\n    lats = np.arange(max_lat, max_lat - pixel_size_y * raster_height, -pixel_size_y)\n    lons = np.arange(min_lon, min_lon + pixel_size_x * raster_width, pixel_size_x)\n\n    # Create meshgrid of latitude and longitude\n    lon_grid, lat_grid = np.meshgrid(lons, lats)\n\n    # Flatten the data and the lat/lon grids\n    elevation_data_flat = elevation_data.flatten()\n    lat_grid_flat = lat_grid.flatten()\n    lon_grid_flat = lon_grid.flatten()\n\n    # Create a DataFrame to store the data\n    df = pd.DataFrame({\n      'Latitude': lat_grid_flat,\n      'Longitude': lon_grid_flat,\n      'Elevation': elevation_data_flat,\n    })\n    \n    df.to_csv(result_dem_csv_path)\n    print(f\"DEM geotif is saved to a csv file with only elevation {result_dem_csv_path}\")\n\n  \ndef read_elevation_data(file_path, neighborhood_size=6):\n    \n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    print(f\"neighborhood_size // 2 = {neighborhood_size // 2}\")\n    \n    for index, row in df.iterrows():\n      # Access individual row elements using row['column_name']\n      # Convert latitude and longitude to pixel indices\n      x, y = lat_lon_to_pixel(row['Latitude'], row['Longitude'], geotransform)\n      \n      if index %1000 == 0:\n        print(f\"processing {x} {y}\")\n\t  \n      if x < neighborhood_size // 2 or y < neighborhood_size // 2 or x > (raster_width - neighborhood_size // 2) or y > (raster_height - neighborhood_size // 2):\n      \tdata_row = {\n            'lat': row['Latitude'],\n            'lon': row['Longitude'],\n            'elevation': row['Elevation'],\n            'slope': -1,\n            'aspect': -1,\n            'curvature': -1,\n            'northness': -1,\n            'eastness': -1\n        }\n      else:\n        # Read a small neighborhood of elevation data around the selected point\n        small_elevation_data = band.ReadAsArray(x - neighborhood_size // 2, y - neighborhood_size // 2, neighborhood_size, neighborhood_size)\n\n        # Calculate slope and aspect\n        slope_data, aspect_data = calculate_slope_aspect(small_elevation_data, pixel_size_x, pixel_size_y)\n\n        # Calculate curvature\n        curvature_data = calculate_curvature(small_elevation_data, pixel_size_x, pixel_size_y)\n        northness_data = np.abs(np.sin(np.radians(aspect_data)))\n        eastness_data = np.abs(np.cos(np.radians(aspect_data)))\n\n\n        data_row = {\n            'lat': row['Latitude'],\n            'lon': row['Longitude'],\n            'elevation': row['Elevation'],\n            'slope': slope_data[neighborhood_size // 2, neighborhood_size // 2],\n            'aspect': aspect_data[neighborhood_size // 2, neighborhood_size // 2],\n            'curvature': curvature_data[neighborhood_size // 2, neighborhood_size // 2],\n            'northness': northness_data[neighborhood_size // 2, neighborhood_size // 2],\n            'eastness': eastness_data[neighborhood_size // 2, neighborhood_size // 2]\n        }\n      \n      \n      # Append a row to the DataFrame\n      all_df = all_df.append(data_row, ignore_index=True)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n\n# Usage example:\nread_elevation_data_only(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n#final_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n",
  "history_output" : "  File \"/home/chetana/gw-workspace/Ujz8UV0xpU0V/western_us_dem.py\", line 44\n    result_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\n                                                                           ^\nIndentationError: unindent does not match any outer indentation level\n",
  "history_begin_time" : 1690257051135,
  "history_end_time" : 1690257051194,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "wyAej3SXUywU",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n\ndef read_elevation_data_only(file_path):\n  \tdataset = gdal.Open(file_path)\n  \tif dataset is None:\n      print(\"Error: Could not open the file.\")\n      return None\n\t\n    result_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\n    result_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n    \n    print(f\"start to first convert geotiff to {result_dem_csv_path}\")\n    \n    band = dataset.GetRasterBand(1)\n    elevation_data = band.ReadAsArray()\n\n    # Get geotransform information\n    geotransform = dataset.GetGeoTransform()\n    min_lon, pixel_size_x, _, max_lat, _, pixel_size_y = geotransform\n\n    # Calculate raster size\n    raster_width = dataset.RasterXSize\n    raster_height = dataset.RasterYSize\n\n    # Generate latitude and longitude arrays\n    lats = np.arange(max_lat, max_lat - pixel_size_y * raster_height, -pixel_size_y)\n    lons = np.arange(min_lon, min_lon + pixel_size_x * raster_width, pixel_size_x)\n\n    # Create meshgrid of latitude and longitude\n    lon_grid, lat_grid = np.meshgrid(lons, lats)\n\n    # Flatten the data and the lat/lon grids\n    elevation_data_flat = elevation_data.flatten()\n    lat_grid_flat = lat_grid.flatten()\n    lon_grid_flat = lon_grid.flatten()\n\n    # Create a DataFrame to store the data\n    df = pd.DataFrame({\n      'Latitude': lat_grid_flat,\n      'Longitude': lon_grid_flat,\n      'Elevation': elevation_data_flat,\n    })\n    \n    df.to_csv(result_dem_csv_path)\n    print(f\"DEM geotif is saved to a csv file with only elevation {result_dem_csv_path}\")\n\n  \ndef read_elevation_data(file_path, neighborhood_size=6):\n    \n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    print(f\"neighborhood_size // 2 = {neighborhood_size // 2}\")\n    \n    for index, row in df.iterrows():\n      # Access individual row elements using row['column_name']\n      # Convert latitude and longitude to pixel indices\n      x, y = lat_lon_to_pixel(row['Latitude'], row['Longitude'], geotransform)\n      \n      if index %1000 == 0:\n        print(f\"processing {x} {y}\")\n\t  \n      if x < neighborhood_size // 2 or y < neighborhood_size // 2 or x > (raster_width - neighborhood_size // 2) or y > (raster_height - neighborhood_size // 2):\n      \tdata_row = {\n            'lat': row['Latitude'],\n            'lon': row['Longitude'],\n            'elevation': row['Elevation'],\n            'slope': -1,\n            'aspect': -1,\n            'curvature': -1,\n            'northness': -1,\n            'eastness': -1\n        }\n      else:\n        # Read a small neighborhood of elevation data around the selected point\n        small_elevation_data = band.ReadAsArray(x - neighborhood_size // 2, y - neighborhood_size // 2, neighborhood_size, neighborhood_size)\n\n        # Calculate slope and aspect\n        slope_data, aspect_data = calculate_slope_aspect(small_elevation_data, pixel_size_x, pixel_size_y)\n\n        # Calculate curvature\n        curvature_data = calculate_curvature(small_elevation_data, pixel_size_x, pixel_size_y)\n        northness_data = np.abs(np.sin(np.radians(aspect_data)))\n        eastness_data = np.abs(np.cos(np.radians(aspect_data)))\n\n\n        data_row = {\n            'lat': row['Latitude'],\n            'lon': row['Longitude'],\n            'elevation': row['Elevation'],\n            'slope': slope_data[neighborhood_size // 2, neighborhood_size // 2],\n            'aspect': aspect_data[neighborhood_size // 2, neighborhood_size // 2],\n            'curvature': curvature_data[neighborhood_size // 2, neighborhood_size // 2],\n            'northness': northness_data[neighborhood_size // 2, neighborhood_size // 2],\n            'eastness': eastness_data[neighborhood_size // 2, neighborhood_size // 2]\n        }\n      \n      \n      # Append a row to the DataFrame\n      all_df = all_df.append(data_row, ignore_index=True)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n\n# Usage example:\nread_elevation_data_only(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n#final_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n",
  "history_output" : "  File \"/home/chetana/gw-workspace/wyAej3SXUywU/western_us_dem.py\", line 41\n    print(\"Error: Could not open the file.\")\n                                            ^\nIndentationError: unindent does not match any outer indentation level\n",
  "history_begin_time" : 1690257033217,
  "history_end_time" : 1690257033272,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "71H7z0mzsp1y",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n\ndef read_elevation_data_only(file_path):\n  \tdataset = gdal.Open(file_path)\n  \tif dataset is None:\n      print(\"Error: Could not open the file.\")\n      return None\n\t\n    result_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\n    result_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n    \n    print(f\"start to first convert geotiff to {result_dem_csv_path}\")\n    \n    band = dataset.GetRasterBand(1)\n    elevation_data = band.ReadAsArray()\n\n    # Get geotransform information\n    geotransform = dataset.GetGeoTransform()\n    min_lon, pixel_size_x, _, max_lat, _, pixel_size_y = geotransform\n\n    # Calculate raster size\n    raster_width = dataset.RasterXSize\n    raster_height = dataset.RasterYSize\n\n    # Generate latitude and longitude arrays\n    lats = np.arange(max_lat, max_lat - pixel_size_y * raster_height, -pixel_size_y)\n    lons = np.arange(min_lon, min_lon + pixel_size_x * raster_width, pixel_size_x)\n\n    # Create meshgrid of latitude and longitude\n    lon_grid, lat_grid = np.meshgrid(lons, lats)\n\n    # Flatten the data and the lat/lon grids\n    elevation_data_flat = elevation_data.flatten()\n    lat_grid_flat = lat_grid.flatten()\n    lon_grid_flat = lon_grid.flatten()\n\n    # Create a DataFrame to store the data\n    df = pd.DataFrame({\n      'Latitude': lat_grid_flat,\n      'Longitude': lon_grid_flat,\n      'Elevation': elevation_data_flat,\n    })\n    \n    df.to_csv(result_dem_csv_path)\n    print(f\"DEM geotif is saved to a csv file with only elevation {result_dem_csv_path}\")\n\n  \ndef read_elevation_data(file_path, neighborhood_size=6):\n    \n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    print(f\"neighborhood_size // 2 = {neighborhood_size // 2}\")\n    \n    for index, row in df.iterrows():\n      # Access individual row elements using row['column_name']\n      # Convert latitude and longitude to pixel indices\n      x, y = lat_lon_to_pixel(row['Latitude'], row['Longitude'], geotransform)\n      \n      if index %1000 == 0:\n        print(f\"processing {x} {y}\")\n\t  \n      if x < neighborhood_size // 2 or y < neighborhood_size // 2 or x > (raster_width - neighborhood_size // 2) or y > (raster_height - neighborhood_size // 2):\n      \tdata_row = {\n            'lat': row['Latitude'],\n            'lon': row['Longitude'],\n            'elevation': row['Elevation'],\n            'slope': -1,\n            'aspect': -1,\n            'curvature': -1,\n            'northness': -1,\n            'eastness': -1\n        }\n      else:\n        # Read a small neighborhood of elevation data around the selected point\n        small_elevation_data = band.ReadAsArray(x - neighborhood_size // 2, y - neighborhood_size // 2, neighborhood_size, neighborhood_size)\n\n        # Calculate slope and aspect\n        slope_data, aspect_data = calculate_slope_aspect(small_elevation_data, pixel_size_x, pixel_size_y)\n\n        # Calculate curvature\n        curvature_data = calculate_curvature(small_elevation_data, pixel_size_x, pixel_size_y)\n        northness_data = np.abs(np.sin(np.radians(aspect_data)))\n        eastness_data = np.abs(np.cos(np.radians(aspect_data)))\n\n\n        data_row = {\n            'lat': row['Latitude'],\n            'lon': row['Longitude'],\n            'elevation': row['Elevation'],\n            'slope': slope_data[neighborhood_size // 2, neighborhood_size // 2],\n            'aspect': aspect_data[neighborhood_size // 2, neighborhood_size // 2],\n            'curvature': curvature_data[neighborhood_size // 2, neighborhood_size // 2],\n            'northness': northness_data[neighborhood_size // 2, neighborhood_size // 2],\n            'eastness': eastness_data[neighborhood_size // 2, neighborhood_size // 2]\n        }\n      \n      \n      # Append a row to the DataFrame\n      all_df = all_df.append(data_row, ignore_index=True)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n\n# Usage example:\nread_elevation_data_only(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n#final_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n",
  "history_output" : "  File \"/home/chetana/gw-workspace/71H7z0mzsp1y/western_us_dem.py\", line 41\n    print(\"Error: Could not open the file.\")\n                                            ^\nIndentationError: unindent does not match any outer indentation level\n",
  "history_begin_time" : 1690256987836,
  "history_end_time" : 1690256987891,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "idhNlAu5xDrz",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n\ndef read_elevation_data_only(file_path):\n  \tdataset = gdal.Open(file_path)\n  \tif dataset is None:\n      print(\"Error: Could not open the file.\")\n      return None\n\t\n    result_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\n    result_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n    \n    print(f\"start to first convert geotiff to {result_dem_csv_path}\")\n    \n    band = dataset.GetRasterBand(1)\n    elevation_data = band.ReadAsArray()\n\n    # Get geotransform information\n    geotransform = dataset.GetGeoTransform()\n    min_lon, pixel_size_x, _, max_lat, _, pixel_size_y = geotransform\n\n    # Calculate raster size\n    raster_width = dataset.RasterXSize\n    raster_height = dataset.RasterYSize\n\n    # Generate latitude and longitude arrays\n    lats = np.arange(max_lat, max_lat - pixel_size_y * raster_height, -pixel_size_y)\n    lons = np.arange(min_lon, min_lon + pixel_size_x * raster_width, pixel_size_x)\n\n    # Create meshgrid of latitude and longitude\n    lon_grid, lat_grid = np.meshgrid(lons, lats)\n\n    # Flatten the data and the lat/lon grids\n    elevation_data_flat = elevation_data.flatten()\n    lat_grid_flat = lat_grid.flatten()\n    lon_grid_flat = lon_grid.flatten()\n\n    # Create a DataFrame to store the data\n    df = pd.DataFrame({\n      'Latitude': lat_grid_flat,\n      'Longitude': lon_grid_flat,\n      'Elevation': elevation_data_flat,\n    })\n    \n    df.to_csv(result_dem_csv_path)\n    print(f\"DEM geotif is saved to a csv file with only elevation {result_dem_csv_path}\")\n\n  \ndef read_elevation_data(file_path, neighborhood_size=6):\n    \n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    print(f\"neighborhood_size // 2 = {neighborhood_size // 2}\")\n    \n    for index, row in df.iterrows():\n      # Access individual row elements using row['column_name']\n      # Convert latitude and longitude to pixel indices\n      x, y = lat_lon_to_pixel(row['Latitude'], row['Longitude'], geotransform)\n      \n      if index %1000 == 0:\n        print(f\"processing {x} {y}\")\n\t  \n      if x < neighborhood_size // 2 or y < neighborhood_size // 2 or x > (raster_width - neighborhood_size // 2) or y > (raster_height - neighborhood_size // 2):\n      \tdata_row = {\n            'lat': row['Latitude'],\n            'lon': row['Longitude'],\n            'elevation': row['Elevation'],\n            'slope': -1,\n            'aspect': -1,\n            'curvature': -1,\n            'northness': -1,\n            'eastness': -1\n        }\n      else:\n        # Read a small neighborhood of elevation data around the selected point\n        small_elevation_data = band.ReadAsArray(x - neighborhood_size // 2, y - neighborhood_size // 2, neighborhood_size, neighborhood_size)\n\n        # Calculate slope and aspect\n        slope_data, aspect_data = calculate_slope_aspect(small_elevation_data, pixel_size_x, pixel_size_y)\n\n        # Calculate curvature\n        curvature_data = calculate_curvature(small_elevation_data, pixel_size_x, pixel_size_y)\n        northness_data = np.abs(np.sin(np.radians(aspect_data)))\n        eastness_data = np.abs(np.cos(np.radians(aspect_data)))\n\n\n        data_row = {\n            'lat': row['Latitude'],\n            'lon': row['Longitude'],\n            'elevation': row['Elevation'],\n            'slope': slope_data[neighborhood_size // 2, neighborhood_size // 2],\n            'aspect': aspect_data[neighborhood_size // 2, neighborhood_size // 2],\n            'curvature': curvature_data[neighborhood_size // 2, neighborhood_size // 2],\n            'northness': northness_data[neighborhood_size // 2, neighborhood_size // 2],\n            'eastness': eastness_data[neighborhood_size // 2, neighborhood_size // 2]\n        }\n      \n      \n      # Append a row to the DataFrame\n      all_df = all_df.append(data_row, ignore_index=True)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n\n# Usage example:\nread_elevation_data_only(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n#final_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n",
  "history_output" : "  File \"/home/chetana/gw-workspace/idhNlAu5xDrz/western_us_dem.py\", line 41\n    print(\"Error: Could not open the file.\")\n                                            ^\nIndentationError: unindent does not match any outer indentation level\n",
  "history_begin_time" : 1690256968370,
  "history_end_time" : 1690256968426,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "JObHVqJCHvFA",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n\ndef read_elevation_data_only(file_path):\n  \tdataset = gdal.Open(file_path)\n    if dataset is None:\n      print(\"Error: Could not open the file.\")\n      return None\n\t\n    result_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\n    result_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n    \n    print(f\"start to first convert geotiff to {result_dem_csv_path}\")\n    \n    band = dataset.GetRasterBand(1)\n    elevation_data = band.ReadAsArray()\n\n    # Get geotransform information\n    geotransform = dataset.GetGeoTransform()\n    min_lon, pixel_size_x, _, max_lat, _, pixel_size_y = geotransform\n\n    # Calculate raster size\n    raster_width = dataset.RasterXSize\n    raster_height = dataset.RasterYSize\n\n    # Generate latitude and longitude arrays\n    lats = np.arange(max_lat, max_lat - pixel_size_y * raster_height, -pixel_size_y)\n    lons = np.arange(min_lon, min_lon + pixel_size_x * raster_width, pixel_size_x)\n\n    # Create meshgrid of latitude and longitude\n    lon_grid, lat_grid = np.meshgrid(lons, lats)\n\n    # Flatten the data and the lat/lon grids\n    elevation_data_flat = elevation_data.flatten()\n    lat_grid_flat = lat_grid.flatten()\n    lon_grid_flat = lon_grid.flatten()\n\n    # Create a DataFrame to store the data\n    df = pd.DataFrame({\n      'Latitude': lat_grid_flat,\n      'Longitude': lon_grid_flat,\n      'Elevation': elevation_data_flat,\n    })\n    \n    df.to_csv(result_dem_csv_path)\n    print(f\"DEM geotif is saved to a csv file with only elevation {result_dem_csv_path}\")\n\n  \ndef read_elevation_data(file_path, neighborhood_size=6):\n    \n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    print(f\"neighborhood_size // 2 = {neighborhood_size // 2}\")\n    \n    for index, row in df.iterrows():\n      # Access individual row elements using row['column_name']\n      # Convert latitude and longitude to pixel indices\n      x, y = lat_lon_to_pixel(row['Latitude'], row['Longitude'], geotransform)\n      \n      if index %1000 == 0:\n        print(f\"processing {x} {y}\")\n\t  \n      if x < neighborhood_size // 2 or y < neighborhood_size // 2 or x > (raster_width - neighborhood_size // 2) or y > (raster_height - neighborhood_size // 2):\n      \tdata_row = {\n            'lat': row['Latitude'],\n            'lon': row['Longitude'],\n            'elevation': row['Elevation'],\n            'slope': -1,\n            'aspect': -1,\n            'curvature': -1,\n            'northness': -1,\n            'eastness': -1\n        }\n      else:\n        # Read a small neighborhood of elevation data around the selected point\n        small_elevation_data = band.ReadAsArray(x - neighborhood_size // 2, y - neighborhood_size // 2, neighborhood_size, neighborhood_size)\n\n        # Calculate slope and aspect\n        slope_data, aspect_data = calculate_slope_aspect(small_elevation_data, pixel_size_x, pixel_size_y)\n\n        # Calculate curvature\n        curvature_data = calculate_curvature(small_elevation_data, pixel_size_x, pixel_size_y)\n        northness_data = np.abs(np.sin(np.radians(aspect_data)))\n        eastness_data = np.abs(np.cos(np.radians(aspect_data)))\n\n\n        data_row = {\n            'lat': row['Latitude'],\n            'lon': row['Longitude'],\n            'elevation': row['Elevation'],\n            'slope': slope_data[neighborhood_size // 2, neighborhood_size // 2],\n            'aspect': aspect_data[neighborhood_size // 2, neighborhood_size // 2],\n            'curvature': curvature_data[neighborhood_size // 2, neighborhood_size // 2],\n            'northness': northness_data[neighborhood_size // 2, neighborhood_size // 2],\n            'eastness': eastness_data[neighborhood_size // 2, neighborhood_size // 2]\n        }\n      \n      \n      # Append a row to the DataFrame\n      all_df = all_df.append(data_row, ignore_index=True)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n\n# Usage example:\nread_elevation_data_only(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n#final_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n",
  "history_output" : "  File \"/home/chetana/gw-workspace/JObHVqJCHvFA/western_us_dem.py\", line 40\n    if dataset is None:\n                       ^\nIndentationError: unindent does not match any outer indentation level\n",
  "history_begin_time" : 1690256945810,
  "history_end_time" : 1690256945861,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "YrXxni6XK2b0",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n\ndef read_elevation_data_only(file_path):\n  \tdataset = gdal.Open(file_path)\n    if dataset is None:\n        print(\"Error: Could not open the file.\")\n        return None\n\t\n    result_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\n    result_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n    \n    print(f\"start to first convert geotiff to {result_dem_csv_path}\")\n    \n    band = dataset.GetRasterBand(1)\n    elevation_data = band.ReadAsArray()\n\n    # Get geotransform information\n    geotransform = dataset.GetGeoTransform()\n    min_lon, pixel_size_x, _, max_lat, _, pixel_size_y = geotransform\n\n    # Calculate raster size\n    raster_width = dataset.RasterXSize\n    raster_height = dataset.RasterYSize\n\n    # Generate latitude and longitude arrays\n    lats = np.arange(max_lat, max_lat - pixel_size_y * raster_height, -pixel_size_y)\n    lons = np.arange(min_lon, min_lon + pixel_size_x * raster_width, pixel_size_x)\n\n    # Create meshgrid of latitude and longitude\n    lon_grid, lat_grid = np.meshgrid(lons, lats)\n\n    # Flatten the data and the lat/lon grids\n    elevation_data_flat = elevation_data.flatten()\n    lat_grid_flat = lat_grid.flatten()\n    lon_grid_flat = lon_grid.flatten()\n\n    # Create a DataFrame to store the data\n    df = pd.DataFrame({\n        'Latitude': lat_grid_flat,\n        'Longitude': lon_grid_flat,\n        'Elevation': elevation_data_flat,\n    })\n    \n    df.to_csv(result_dem_csv_path)\n    print(f\"DEM geotif is saved to a csv file with only elevation {result_dem_csv_path}\")\n\n  \ndef read_elevation_data(file_path, neighborhood_size=6):\n    \n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    print(f\"neighborhood_size // 2 = {neighborhood_size // 2}\")\n    \n    for index, row in df.iterrows():\n      # Access individual row elements using row['column_name']\n      # Convert latitude and longitude to pixel indices\n      x, y = lat_lon_to_pixel(row['Latitude'], row['Longitude'], geotransform)\n      \n      if index %1000 == 0:\n        print(f\"processing {x} {y}\")\n\t  \n      if x < neighborhood_size // 2 or y < neighborhood_size // 2 or x > (raster_width - neighborhood_size // 2) or y > (raster_height - neighborhood_size // 2):\n      \tdata_row = {\n            'lat': row['Latitude'],\n            'lon': row['Longitude'],\n            'elevation': row['Elevation'],\n            'slope': -1,\n            'aspect': -1,\n            'curvature': -1,\n            'northness': -1,\n            'eastness': -1\n        }\n      else:\n        # Read a small neighborhood of elevation data around the selected point\n        small_elevation_data = band.ReadAsArray(x - neighborhood_size // 2, y - neighborhood_size // 2, neighborhood_size, neighborhood_size)\n\n        # Calculate slope and aspect\n        slope_data, aspect_data = calculate_slope_aspect(small_elevation_data, pixel_size_x, pixel_size_y)\n\n        # Calculate curvature\n        curvature_data = calculate_curvature(small_elevation_data, pixel_size_x, pixel_size_y)\n        northness_data = np.abs(np.sin(np.radians(aspect_data)))\n        eastness_data = np.abs(np.cos(np.radians(aspect_data)))\n\n\n        data_row = {\n            'lat': row['Latitude'],\n            'lon': row['Longitude'],\n            'elevation': row['Elevation'],\n            'slope': slope_data[neighborhood_size // 2, neighborhood_size // 2],\n            'aspect': aspect_data[neighborhood_size // 2, neighborhood_size // 2],\n            'curvature': curvature_data[neighborhood_size // 2, neighborhood_size // 2],\n            'northness': northness_data[neighborhood_size // 2, neighborhood_size // 2],\n            'eastness': eastness_data[neighborhood_size // 2, neighborhood_size // 2]\n        }\n      \n      \n      # Append a row to the DataFrame\n      all_df = all_df.append(data_row, ignore_index=True)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n\n# Usage example:\nread_elevation_data_only(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n#final_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n",
  "history_output" : "  File \"/home/chetana/gw-workspace/YrXxni6XK2b0/western_us_dem.py\", line 40\n    if dataset is None:\n                       ^\nIndentationError: unindent does not match any outer indentation level\n",
  "history_begin_time" : 1690256927051,
  "history_end_time" : 1690256927108,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "edIkFVqzyTUr",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n\ndef read_elevation_data_only(file_path):\n  \tdataset = gdal.Open(file_path)\n    if dataset is None:\n        print(\"Error: Could not open the file.\")\n        return None\n\t\n    result_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\n    result_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n    \n    print(f\"start to first convert geotiff to {result_dem_csv_path}\")\n    \n    band = dataset.GetRasterBand(1)\n    elevation_data = band.ReadAsArray()\n\n    # Get geotransform information\n    geotransform = dataset.GetGeoTransform()\n    min_lon, pixel_size_x, _, max_lat, _, pixel_size_y = geotransform\n\n    # Calculate raster size\n    raster_width = dataset.RasterXSize\n    raster_height = dataset.RasterYSize\n\n    # Generate latitude and longitude arrays\n    lats = np.arange(max_lat, max_lat - pixel_size_y * raster_height, -pixel_size_y)\n    lons = np.arange(min_lon, min_lon + pixel_size_x * raster_width, pixel_size_x)\n\n    # Create meshgrid of latitude and longitude\n    lon_grid, lat_grid = np.meshgrid(lons, lats)\n\n    # Flatten the data and the lat/lon grids\n    elevation_data_flat = elevation_data.flatten()\n    lat_grid_flat = lat_grid.flatten()\n    lon_grid_flat = lon_grid.flatten()\n\n    # Create a DataFrame to store the data\n    df = pd.DataFrame({\n        'Latitude': lat_grid_flat,\n        'Longitude': lon_grid_flat,\n        'Elevation': elevation_data_flat,\n    })\n    \n    df.to_csv(result_dem_csv_path)\n    print(f\"DEM geotif is saved to a csv file with only elevation {result_dem_csv_path}\")\n\n  \ndef read_elevation_data(file_path, neighborhood_size=6):\n    \n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    print(f\"neighborhood_size // 2 = {neighborhood_size // 2}\")\n    \n    for index, row in df.iterrows():\n      # Access individual row elements using row['column_name']\n      # Convert latitude and longitude to pixel indices\n      x, y = lat_lon_to_pixel(row['Latitude'], row['Longitude'], geotransform)\n      \n      if index %1000 == 0:\n        print(f\"processing {x} {y}\")\n\t  \n      if x < neighborhood_size // 2 or y < neighborhood_size // 2 or x > (raster_width - neighborhood_size // 2) or y > (raster_height - neighborhood_size // 2):\n      \tdata_row = {\n            'lat': row['Latitude'],\n            'lon': row['Longitude'],\n            'elevation': row['Elevation'],\n            'slope': -1,\n            'aspect': -1,\n            'curvature': -1,\n            'northness': -1,\n            'eastness': -1\n        }\n      else:\n        # Read a small neighborhood of elevation data around the selected point\n        small_elevation_data = band.ReadAsArray(x - neighborhood_size // 2, y - neighborhood_size // 2, neighborhood_size, neighborhood_size)\n\n        # Calculate slope and aspect\n        slope_data, aspect_data = calculate_slope_aspect(small_elevation_data, pixel_size_x, pixel_size_y)\n\n        # Calculate curvature\n        curvature_data = calculate_curvature(small_elevation_data, pixel_size_x, pixel_size_y)\n        northness_data = np.abs(np.sin(np.radians(aspect_data)))\n        eastness_data = np.abs(np.cos(np.radians(aspect_data)))\n\n\n        data_row = {\n            'lat': row['Latitude'],\n            'lon': row['Longitude'],\n            'elevation': row['Elevation'],\n            'slope': slope_data[neighborhood_size // 2, neighborhood_size // 2],\n            'aspect': aspect_data[neighborhood_size // 2, neighborhood_size // 2],\n            'curvature': curvature_data[neighborhood_size // 2, neighborhood_size // 2],\n            'northness': northness_data[neighborhood_size // 2, neighborhood_size // 2],\n            'eastness': eastness_data[neighborhood_size // 2, neighborhood_size // 2]\n        }\n      \n      \n      # Append a row to the DataFrame\n      all_df = all_df.append(data_row, ignore_index=True)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n\n# Usage example:\nread_elevation_data_only(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n#final_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n",
  "history_output" : "  File \"/home/chetana/gw-workspace/edIkFVqzyTUr/western_us_dem.py\", line 40\n    if dataset is None:\n                       ^\nIndentationError: unindent does not match any outer indentation level\n",
  "history_begin_time" : 1690256910025,
  "history_end_time" : 1690256910085,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "YQPIrn1Yt4Ly",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n\ndef read_elevation_data(file_path, neighborhood_size=6):\n    dataset = gdal.Open(file_path)\n    if dataset is None:\n        print(\"Error: Could not open the file.\")\n        return None\n\t\n    result_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\n    result_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n    \n    print(f\"start to first convert geotiff to {result_dem_csv_path}\")\n    \n    band = dataset.GetRasterBand(1)\n    elevation_data = band.ReadAsArray()\n\n    # Get geotransform information\n    geotransform = dataset.GetGeoTransform()\n    min_lon, pixel_size_x, _, max_lat, _, pixel_size_y = geotransform\n\n    # Calculate raster size\n    raster_width = dataset.RasterXSize\n    raster_height = dataset.RasterYSize\n\n    # Generate latitude and longitude arrays\n    lats = np.arange(max_lat, max_lat - pixel_size_y * raster_height, -pixel_size_y)\n    lons = np.arange(min_lon, min_lon + pixel_size_x * raster_width, pixel_size_x)\n\n    # Create meshgrid of latitude and longitude\n    lon_grid, lat_grid = np.meshgrid(lons, lats)\n\n    # Flatten the data and the lat/lon grids\n    elevation_data_flat = elevation_data.flatten()\n    lat_grid_flat = lat_grid.flatten()\n    lon_grid_flat = lon_grid.flatten()\n\n    # Create a DataFrame to store the data\n    df = pd.DataFrame({\n        'Latitude': lat_grid_flat,\n        'Longitude': lon_grid_flat,\n        'Elevation': elevation_data_flat,\n    })\n    \n    df.to_csv(result_dem_csv_path)\n    print(f\"DEM geotif is saved to a csv file with only elevation {result_dem_csv_path}\")\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    print(f\"neighborhood_size // 2 = {neighborhood_size // 2}\")\n    \n    for index, row in df.iterrows():\n      # Access individual row elements using row['column_name']\n      # Convert latitude and longitude to pixel indices\n      x, y = lat_lon_to_pixel(row['Latitude'], row['Longitude'], geotransform)\n      \n      if index %1000 == 0:\n        print(f\"processing {x} {y}\")\n\t  \n      if x < neighborhood_size // 2 or y < neighborhood_size // 2 or x > (raster_width - neighborhood_size // 2) or y > (raster_height - neighborhood_size // 2):\n      \tdata_row = {\n            'lat': row['Latitude'],\n            'lon': row['Longitude'],\n            'elevation': row['Elevation'],\n            'slope': -1,\n            'aspect': -1,\n            'curvature': -1,\n            'northness': -1,\n            'eastness': -1\n        }\n      else:\n        # Read a small neighborhood of elevation data around the selected point\n        small_elevation_data = band.ReadAsArray(x - neighborhood_size // 2, y - neighborhood_size // 2, neighborhood_size, neighborhood_size)\n\n        # Calculate slope and aspect\n        slope_data, aspect_data = calculate_slope_aspect(small_elevation_data, pixel_size_x, pixel_size_y)\n\n        # Calculate curvature\n        curvature_data = calculate_curvature(small_elevation_data, pixel_size_x, pixel_size_y)\n        northness_data = np.abs(np.sin(np.radians(aspect_data)))\n        eastness_data = np.abs(np.cos(np.radians(aspect_data)))\n\n\n        data_row = {\n            'lat': row['Latitude'],\n            'lon': row['Longitude'],\n            'elevation': row['Elevation'],\n            'slope': slope_data[neighborhood_size // 2, neighborhood_size // 2],\n            'aspect': aspect_data[neighborhood_size // 2, neighborhood_size // 2],\n            'curvature': curvature_data[neighborhood_size // 2, neighborhood_size // 2],\n            'northness': northness_data[neighborhood_size // 2, neighborhood_size // 2],\n            'eastness': eastness_data[neighborhood_size // 2, neighborhood_size // 2]\n        }\n      \n      \n      # Append a row to the DataFrame\n      all_df = all_df.append(data_row, ignore_index=True)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n\n# Usage example:\n\nfinal_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n",
  "history_output" : "",
  "history_begin_time" : 1690255541305,
  "history_end_time" : 1690256845395,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "tgVKU4KyJ8Gi",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n\ndef read_elevation_data(file_path, neighborhood_size=6):\n    dataset = gdal.Open(file_path)\n    if dataset is None:\n        print(\"Error: Could not open the file.\")\n        return None\n\t\n    result_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\n    result_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n    \n    band = dataset.GetRasterBand(1)\n    elevation_data = band.ReadAsArray()\n\n    # Get geotransform information\n    geotransform = dataset.GetGeoTransform()\n    min_lon, pixel_size_x, _, max_lat, _, pixel_size_y = geotransform\n\n    # Calculate raster size\n    raster_width = dataset.RasterXSize\n    raster_height = dataset.RasterYSize\n\n    # Generate latitude and longitude arrays\n    lats = np.arange(max_lat, max_lat - pixel_size_y * raster_height, -pixel_size_y)\n    lons = np.arange(min_lon, min_lon + pixel_size_x * raster_width, pixel_size_x)\n\n    # Create meshgrid of latitude and longitude\n    lon_grid, lat_grid = np.meshgrid(lons, lats)\n\n    # Flatten the data and the lat/lon grids\n    elevation_data_flat = elevation_data.flatten()\n    lat_grid_flat = lat_grid.flatten()\n    lon_grid_flat = lon_grid.flatten()\n\n    # Create a DataFrame to store the data\n    df = pd.DataFrame({\n      'Latitude': lat_grid_flat,\n      'Longitude': lon_grid_flat,\n      'Elevation': elevation_data_flat,\n    })\n    \n    df.to_csv(result_dem_csv_path)\n    print(f\"DEM geotif is saved to a csv file with only elevation {result_dem_csv_path}\")\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    print(f\"neighborhood_size // 2 = {neighborhood_size // 2}\")\n    \n    for index, row in df.iterrows():\n      # Access individual row elements using row['column_name']\n      # Convert latitude and longitude to pixel indices\n      x, y = lat_lon_to_pixel(row['Latitude'], row['Longitude'], geotransform)\n      \n      if index %1000 == 0:\n        print(f\"processing {x} {y}\")\n\t  \n      if x < neighborhood_size // 2 or y < neighborhood_size // 2 or x > (raster_width - neighborhood_size // 2) or y > (raster_height - neighborhood_size // 2):\n      \tdata_row = {\n            'lat': row['Latitude'],\n            'lon': row['Longitude'],\n            'elevation': row['Elevation'],\n            'slope': -1,\n            'aspect': -1,\n            'curvature': -1,\n            'northness': -1,\n            'eastness': -1\n        }\n      else:\n        # Read a small neighborhood of elevation data around the selected point\n        small_elevation_data = band.ReadAsArray(x - neighborhood_size // 2, y - neighborhood_size // 2, neighborhood_size, neighborhood_size)\n\n        # Calculate slope and aspect\n        slope_data, aspect_data = calculate_slope_aspect(small_elevation_data, pixel_size_x, pixel_size_y)\n\n        # Calculate curvature\n        curvature_data = calculate_curvature(small_elevation_data, pixel_size_x, pixel_size_y)\n        northness_data = np.abs(np.sin(np.radians(aspect_data)))\n        eastness_data = np.abs(np.cos(np.radians(aspect_data)))\n\n\n        data_row = {\n            'lat': row['Latitude'],\n            'lon': row['Longitude'],\n            'elevation': row['Elevation'],\n            'slope': slope_data[neighborhood_size // 2, neighborhood_size // 2],\n            'aspect': aspect_data[neighborhood_size // 2, neighborhood_size // 2],\n            'curvature': curvature_data[neighborhood_size // 2, neighborhood_size // 2],\n            'northness': northness_data[neighborhood_size // 2, neighborhood_size // 2],\n            'eastness': eastness_data[neighborhood_size // 2, neighborhood_size // 2]\n        }\n      \n      \n      # Append a row to the DataFrame\n      all_df = all_df.append(data_row, ignore_index=True)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n\n# Usage example:\n\nfinal_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n",
  "history_output" : "",
  "history_begin_time" : 1690255060659,
  "history_end_time" : 1690255430663,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "XyGXwHdtuoY1",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n\ndef read_elevation_data(file_path, neighborhood_size=6):\n    dataset = gdal.Open(file_path)\n    if dataset is None:\n        print(\"Error: Could not open the file.\")\n        return None\n\t\n    result_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\n    result_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n    \n    band = dataset.GetRasterBand(1)\n    elevation_data = band.ReadAsArray()\n\n    # Get geotransform information\n    geotransform = dataset.GetGeoTransform()\n    min_lon, pixel_size_x, _, max_lat, _, pixel_size_y = geotransform\n\n    # Calculate raster size\n    raster_width = dataset.RasterXSize\n    raster_height = dataset.RasterYSize\n\n    # Generate latitude and longitude arrays\n    lats = np.arange(max_lat, max_lat - pixel_size_y * raster_height, -pixel_size_y)\n    lons = np.arange(min_lon, min_lon + pixel_size_x * raster_width, pixel_size_x)\n\n    # Create meshgrid of latitude and longitude\n    lon_grid, lat_grid = np.meshgrid(lons, lats)\n\n    # Flatten the data and the lat/lon grids\n    elevation_data_flat = elevation_data.flatten()\n    lat_grid_flat = lat_grid.flatten()\n    lon_grid_flat = lon_grid.flatten()\n\n    # Create a DataFrame to store the data\n    df = pd.DataFrame({\n      'Latitude': lat_grid_flat,\n      'Longitude': lon_grid_flat,\n      'Elevation': elevation_data_flat,\n    })\n    \n    df.to_csv(result_dem_csv_path)\n    print(f\"DEM geotif is saved to a csv file with only elevation {result_dem_csv_path}\")\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    print(f\"neighborhood_size // 2 = {neighborhood_size // 2}\")\n    \n    for index, row in df.iterrows():\n      # Access individual row elements using row['column_name']\n      # Convert latitude and longitude to pixel indices\n      x, y = lat_lon_to_pixel(row['Latitude'], row['Longitude'], geotransform)\n\t  \n      if x < neighborhood_size // 2 or y < neighborhood_size // 2 or x > (raster_width - neighborhood_size // 2) or y > (raster_height - neighborhood_size // 2):\n      \tdata_row = {\n            'lat': row['Latitude'],\n            'lon': row['Longitude'],\n            'elevation': row['Elevation'],\n            'slope': -1,\n            'aspect': -1,\n            'curvature': -1,\n            'northness': -1,\n            'eastness': -1\n        }\n      else:\n        # Read a small neighborhood of elevation data around the selected point\n        small_elevation_data = band.ReadAsArray(x - neighborhood_size // 2, y - neighborhood_size // 2, neighborhood_size, neighborhood_size)\n\n        # Calculate slope and aspect\n        slope_data, aspect_data = calculate_slope_aspect(small_elevation_data, pixel_size_x, pixel_size_y)\n\n        # Calculate curvature\n        curvature_data = calculate_curvature(small_elevation_data, pixel_size_x, pixel_size_y)\n        northness_data = np.abs(np.sin(np.radians(aspect_data)))\n        eastness_data = np.abs(np.cos(np.radians(aspect_data)))\n\n\n        data_row = {\n            'lat': row['Latitude'],\n            'lon': row['Longitude'],\n            'elevation': row['Elevation'],\n            'slope': slope_data[neighborhood_size // 2, neighborhood_size // 2],\n            'aspect': aspect_data[neighborhood_size // 2, neighborhood_size // 2],\n            'curvature': curvature_data[neighborhood_size // 2, neighborhood_size // 2],\n            'northness': northness_data[neighborhood_size // 2, neighborhood_size // 2],\n            'eastness': eastness_data[neighborhood_size // 2, neighborhood_size // 2]\n        }\n      \n      \n      # Append a row to the DataFrame\n      all_df = all_df.append(data_row, ignore_index=True)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n\n# Usage example:\n\nfinal_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n",
  "history_output" : "",
  "history_begin_time" : 1690254789864,
  "history_end_time" : 1690255004215,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "eKxdshPGPkKx",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n\ndef read_elevation_data(file_path, neighborhood_size=6):\n    dataset = gdal.Open(file_path)\n    if dataset is None:\n        print(\"Error: Could not open the file.\")\n        return None\n\t\n    result_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\n    result_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n    \n    band = dataset.GetRasterBand(1)\n    elevation_data = band.ReadAsArray()\n\n    # Get geotransform information\n    geotransform = dataset.GetGeoTransform()\n    min_lon, pixel_size_x, _, max_lat, _, pixel_size_y = geotransform\n\n    # Calculate raster size\n    raster_width = dataset.RasterXSize\n    raster_height = dataset.RasterYSize\n\n    # Generate latitude and longitude arrays\n    lats = np.arange(max_lat, max_lat - pixel_size_y * raster_height, -pixel_size_y)\n    lons = np.arange(min_lon, min_lon + pixel_size_x * raster_width, pixel_size_x)\n\n    # Create meshgrid of latitude and longitude\n    lon_grid, lat_grid = np.meshgrid(lons, lats)\n\n    # Flatten the data and the lat/lon grids\n    elevation_data_flat = elevation_data.flatten()\n    lat_grid_flat = lat_grid.flatten()\n    lon_grid_flat = lon_grid.flatten()\n\n    # Create a DataFrame to store the data\n    df = pd.DataFrame({\n      'Latitude': lat_grid_flat,\n      'Longitude': lon_grid_flat,\n      'Elevation': elevation_data_flat,\n    })\n    \n    df.to_csv(result_dem_csv_path)\n    print(f\"DEM geotif is saved to a csv file with only elevation {result_dem_csv_path}\")\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    print(f\"neighborhood_size // 2 = {neighborhood_size // 2}\")\n    \n    for index, row in df.iterrows():\n      # Access individual row elements using row['column_name']\n      # Convert latitude and longitude to pixel indices\n      x, y = lat_lon_to_pixel(row['Latitude'], row['Longitude'], geotransform)\n\t  \n      if x < neighborhood_size // 2 or y < neighborhood_size // 2 or x > (raster_width - neighborhood_size // 2) or y > (raster_height - neighborhood_size // 2):\n      \tdata_row = {\n            'lat': row['Latitude'],\n            'lon': row['Longitude'],\n            'elevation': row['Elevation'],\n            'slope': -1,\n            'aspect': -1,\n            'curvature': -1,\n            'northness': -1,\n            'eastness': -1\n        }\n      else:\n        # Read a small neighborhood of elevation data around the selected point\n        small_elevation_data = band.ReadAsArray(x - neighborhood_size // 2, y - neighborhood_size // 2, neighborhood_size, neighborhood_size)\n\n        # Calculate slope and aspect\n        slope_data, aspect_data = calculate_slope_aspect(small_elevation_data, pixel_size_x, pixel_size_y)\n\n        # Calculate curvature\n        curvature_data = calculate_curvature(small_elevation_data, pixel_size_x, pixel_size_y)\n        northness_data = np.abs(np.sin(np.radians(aspect_data)))\n        eastness_data = np.abs(np.cos(np.radians(aspect_data)))\n\n\n        data_row = {\n            'lat': row['Latitude'],\n            'lon': row['Longitude'],\n            'elevation': row['Elevation'],\n            'slope': slope_data[neighborhood_size // 2, neighborhood_size // 2],\n            'aspect': aspect_data[neighborhood_size // 2, neighborhood_size // 2],\n            'curvature': curvature_data[neighborhood_size // 2, neighborhood_size // 2],\n            'northness': northness_data[neighborhood_size // 2, neighborhood_size // 2],\n            'eastness': eastness_data[neighborhood_size // 2, neighborhood_size // 2]\n        }\n      \n      \n      # Append a row to the DataFrame\n      all_df = all_df.append(data_row, ignore_index=True)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n\n# Usage example:\n\nfinal_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n\n#clim_data = pd.read_csv(result_dem_feature_csv_path)\n\n# Apply read_elevation_data function to calculate elevation, slope, aspect, and curvature\n#elevation_data = clim_data.apply(lambda row: read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\", row['lat'], row['lon']), axis=1, result_type='expand')\n\n# Merge elevation data with the original DataFrame\n#final_testing_df = pd.concat([clim_data, elevation_data], axis=1)\n\n# Save the updated DataFrame to a new CSV file\n#final_testing_df.to_csv('final_testing.csv', index=False)\n\n# if not os.path.exists(result_dem_csv_path):\n#     elevation_df = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n#     print(elevation_df)\n#     elevation_df.to_csv(result_dem_csv_path)\n#     data = {\n#         'Latitude': [],\n#         'Longitude': [],\n#         'Elevation': [],\n#         'Slope': [],\n#         'Aspect': [],\n#       \t'Curvature': [],\n#     }\n#     new_df = pd.DataFrame(data)\n#     for index, row in elevation_df.iterrows():\n#         latitude = row['Latitude']  # Replace 'Latitude' with the actual name of your latitude column\n#         longitude = row['Longitude']  # Replace 'Longitude' with the actual name of your longitude column\n#         elevation, slope, aspect, curvature = get_elevation_slope_aspect_curvature(elevation_df, latitude, longitude)\n#         new_row = {\n#             'Latitude': latitude,\n#             'Longitude': longitude,\n#             'Elevation': elevation,\n#             'Slope': slope,\n#             'Aspect': aspect,\n#             'Curvature': curvature,\n#         }\n\n#         new_df = new_df.append(new_row, ignore_index=True)\n        \n#     new_df.to_csv(result_dem_feature_csv_path)\n# else:\n# \tprint(\"dem_template.csv exists. Skipping...\")\n    \n\n\n# # Get elevation, slope, aspect, and curvature based on the given lat and lon\n# latitude_to_find = 34.5  # Replace with the desired latitude\n# longitude_to_find = -120.5  # Replace with the desired longitude\n\n# elevation, slope, aspect, curvature = get_elevation_slope_aspect_curvature(elevation_df, latitude_to_find,\n#                                                                            longitude_to_find)\n\n# print(\"Latitude:\", latitude_to_find)\n# print(\"Longitude:\", longitude_to_find)\n# print(\"Elevation:\", elevation)\n# print(\"Slope:\", slope)\n# print(\"Aspect:\", aspect)\n# print(\"Curvature:\", curvature)\n#convert_the_original_dem_to_template_spatial_extent()\n",
  "history_output" : "",
  "history_begin_time" : 1690254390980,
  "history_end_time" : 1690254772627,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "GdphUimvsRrb",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n\ndef read_elevation_data(file_path, neighborhood_size=6):\n    dataset = gdal.Open(file_path)\n    if dataset is None:\n        print(\"Error: Could not open the file.\")\n        return None\n\t\n    result_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\n    result_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n    \n    band = dataset.GetRasterBand(1)\n    elevation_data = band.ReadAsArray()\n\n    # Get geotransform information\n    geotransform = dataset.GetGeoTransform()\n    min_lon, pixel_size_x, _, max_lat, _, pixel_size_y = geotransform\n\n    # Calculate raster size\n    raster_width = dataset.RasterXSize\n    raster_height = dataset.RasterYSize\n\n    # Generate latitude and longitude arrays\n    lats = np.arange(max_lat, max_lat - pixel_size_y * raster_height, -pixel_size_y)\n    lons = np.arange(min_lon, min_lon + pixel_size_x * raster_width, pixel_size_x)\n\n    # Create meshgrid of latitude and longitude\n    lon_grid, lat_grid = np.meshgrid(lons, lats)\n\n    # Flatten the data and the lat/lon grids\n    elevation_data_flat = elevation_data.flatten()\n    lat_grid_flat = lat_grid.flatten()\n    lon_grid_flat = lon_grid.flatten()\n\n    # Create a DataFrame to store the data\n    df = pd.DataFrame({\n      'Latitude': lat_grid_flat,\n      'Longitude': lon_grid_flat,\n      'Elevation': elevation_data_flat,\n    })\n    \n    df.to_csv(result_dem_csv_path)\n    print(f\"DEM geotif is saved to a csv file with only elevation {result_dem_csv_path}\")\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    print(f\"neighborhood_size // 2 = {neighborhood_size // 2}\")\n    \n    for index, row in df.iterrows():\n      # Access individual row elements using row['column_name']\n      # Convert latitude and longitude to pixel indices\n      x, y = lat_lon_to_pixel(row['Latitude'], row['Longitude'], geotransform)\n\t  \n      if x < neighborhood_size // 2 or y < neighborhood_size // 2 or x > (raster_width - neighborhood_size // 2) or y > (raster_height - neighborhood_size // 2):\n      \n        # Read a small neighborhood of elevation data around the selected point\n        small_elevation_data = band.ReadAsArray(x - neighborhood_size // 2, y - neighborhood_size // 2, neighborhood_size, neighborhood_size)\n\n        # Calculate slope and aspect\n        slope_data, aspect_data = calculate_slope_aspect(small_elevation_data, pixel_size_x, pixel_size_y)\n\n        # Calculate curvature\n        curvature_data = calculate_curvature(small_elevation_data, pixel_size_x, pixel_size_y)\n        northness_data = np.abs(np.sin(np.radians(aspect_data)))\n        eastness_data = np.abs(np.cos(np.radians(aspect_data)))\n\n\n        data_row = {\n            'lat': row['Latitude'],\n            'lon': row['Longitude'],\n            'elevation': row['Elevation'],\n            'slope': slope_data[neighborhood_size // 2, neighborhood_size // 2],\n            'aspect': aspect_data[neighborhood_size // 2, neighborhood_size // 2],\n            'curvature': curvature_data[neighborhood_size // 2, neighborhood_size // 2],\n            'northness': northness_data[neighborhood_size // 2, neighborhood_size // 2],\n            'eastness': eastness_data[neighborhood_size // 2, neighborhood_size // 2]\n        }\n        \n      else:\n        data_row = {\n            'lat': row['Latitude'],\n            'lon': row['Longitude'],\n            'elevation': row['Elevation'],\n            'slope': -1,\n            'aspect': -1,\n            'curvature': -1,\n            'northness': -1,\n            'eastness': -1\n        }\n      \n      # Append a row to the DataFrame\n      all_df = all_df.append(data_row, ignore_index=True)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n\n# Usage example:\n\nfinal_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n\n#clim_data = pd.read_csv(result_dem_feature_csv_path)\n\n# Apply read_elevation_data function to calculate elevation, slope, aspect, and curvature\n#elevation_data = clim_data.apply(lambda row: read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\", row['lat'], row['lon']), axis=1, result_type='expand')\n\n# Merge elevation data with the original DataFrame\n#final_testing_df = pd.concat([clim_data, elevation_data], axis=1)\n\n# Save the updated DataFrame to a new CSV file\n#final_testing_df.to_csv('final_testing.csv', index=False)\n\n# if not os.path.exists(result_dem_csv_path):\n#     elevation_df = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n#     print(elevation_df)\n#     elevation_df.to_csv(result_dem_csv_path)\n#     data = {\n#         'Latitude': [],\n#         'Longitude': [],\n#         'Elevation': [],\n#         'Slope': [],\n#         'Aspect': [],\n#       \t'Curvature': [],\n#     }\n#     new_df = pd.DataFrame(data)\n#     for index, row in elevation_df.iterrows():\n#         latitude = row['Latitude']  # Replace 'Latitude' with the actual name of your latitude column\n#         longitude = row['Longitude']  # Replace 'Longitude' with the actual name of your longitude column\n#         elevation, slope, aspect, curvature = get_elevation_slope_aspect_curvature(elevation_df, latitude, longitude)\n#         new_row = {\n#             'Latitude': latitude,\n#             'Longitude': longitude,\n#             'Elevation': elevation,\n#             'Slope': slope,\n#             'Aspect': aspect,\n#             'Curvature': curvature,\n#         }\n\n#         new_df = new_df.append(new_row, ignore_index=True)\n        \n#     new_df.to_csv(result_dem_feature_csv_path)\n# else:\n# \tprint(\"dem_template.csv exists. Skipping...\")\n    \n\n\n# # Get elevation, slope, aspect, and curvature based on the given lat and lon\n# latitude_to_find = 34.5  # Replace with the desired latitude\n# longitude_to_find = -120.5  # Replace with the desired longitude\n\n# elevation, slope, aspect, curvature = get_elevation_slope_aspect_curvature(elevation_df, latitude_to_find,\n#                                                                            longitude_to_find)\n\n# print(\"Latitude:\", latitude_to_find)\n# print(\"Longitude:\", longitude_to_find)\n# print(\"Elevation:\", elevation)\n# print(\"Slope:\", slope)\n# print(\"Aspect:\", aspect)\n# print(\"Curvature:\", curvature)\n#convert_the_original_dem_to_template_spatial_extent()\n",
  "history_output" : "ERROR 5: /home/chetana/gridmet_test_run/output_4km_clipped.tif, band 1: Access window out of range in RasterIO().  Requested\n(-2,-2) of size 6x6 on raster of 694x666.\nDEM geotif is saved to a csv file with only elevation /home/chetana/gridmet_test_run/dem_template.csv\nneighborhood_size // 2 = 3\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/GdphUimvsRrb/western_us_dem.py\", line 139, in <module>\n    final_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n  File \"/home/chetana/gw-workspace/GdphUimvsRrb/western_us_dem.py\", line 97, in read_elevation_data\n    slope_data, aspect_data = calculate_slope_aspect(small_elevation_data, pixel_size_x, pixel_size_y)\n  File \"/home/chetana/gw-workspace/GdphUimvsRrb/western_us_dem.py\", line 17, in calculate_slope_aspect\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n  File \"<__array_function__ internals>\", line 5, in gradient\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/numpy/lib/function_base.py\", line 995, in gradient\n    axes = _nx.normalize_axis_tuple(axis, N)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/numpy/core/numeric.py\", line 1385, in normalize_axis_tuple\n    axis = tuple([normalize_axis_index(ax, ndim, argname) for ax in axis])\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/numpy/core/numeric.py\", line 1385, in <listcomp>\n    axis = tuple([normalize_axis_index(ax, ndim, argname) for ax in axis])\nnumpy.AxisError: axis 1 is out of bounds for array of dimension 0\n",
  "history_begin_time" : 1690254332584,
  "history_end_time" : 1690254335112,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "IxeeYlTn1RyU",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n\ndef read_elevation_data(file_path, neighborhood_size=6):\n    dataset = gdal.Open(file_path)\n    if dataset is None:\n        print(\"Error: Could not open the file.\")\n        return None\n\t\n    result_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\n    result_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n    \n    band = dataset.GetRasterBand(1)\n    elevation_data = band.ReadAsArray()\n\n    # Get geotransform information\n    geotransform = dataset.GetGeoTransform()\n    min_lon, pixel_size_x, _, max_lat, _, pixel_size_y = geotransform\n\n    # Calculate raster size\n    raster_width = dataset.RasterXSize\n    raster_height = dataset.RasterYSize\n\n    # Generate latitude and longitude arrays\n    lats = np.arange(max_lat, max_lat - pixel_size_y * raster_height, -pixel_size_y)\n    lons = np.arange(min_lon, min_lon + pixel_size_x * raster_width, pixel_size_x)\n\n    # Create meshgrid of latitude and longitude\n    lon_grid, lat_grid = np.meshgrid(lons, lats)\n\n    # Flatten the data and the lat/lon grids\n    elevation_data_flat = elevation_data.flatten()\n    lat_grid_flat = lat_grid.flatten()\n    lon_grid_flat = lon_grid.flatten()\n\n    # Create a DataFrame to store the data\n    df = pd.DataFrame({\n      'Latitude': lat_grid_flat,\n      'Longitude': lon_grid_flat,\n      'Elevation': elevation_data_flat,\n    })\n    \n    df.to_csv(result_dem_csv_path)\n    print(f\"DEM geotif is saved to a csv file with only elevation {result_dem_csv_path}\")\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n    \n    for index, row in df.iterrows():\n      # Access individual row elements using row['column_name']\n      # Convert latitude and longitude to pixel indices\n      x, y = lat_lon_to_pixel(row['Latitude'], row['Longitude'], geotransform)\n\t  \n      if x < neighborhood_size // 2 or y < neighborhood_size // 2 or x > (raster_width - neighborhood_size // 2) or y > (raster_height - neighborhood_size // 2):\n      \n        # Read a small neighborhood of elevation data around the selected point\n        small_elevation_data = band.ReadAsArray(x - neighborhood_size // 2, y - neighborhood_size // 2, neighborhood_size, neighborhood_size)\n\n        # Calculate slope and aspect\n        slope_data, aspect_data = calculate_slope_aspect(small_elevation_data, pixel_size_x, pixel_size_y)\n\n        # Calculate curvature\n        curvature_data = calculate_curvature(small_elevation_data, pixel_size_x, pixel_size_y)\n        northness_data = np.abs(np.sin(np.radians(aspect_data)))\n        eastness_data = np.abs(np.cos(np.radians(aspect_data)))\n\n\n        data_row = {\n            'lat': row['Latitude'],\n            'lon': row['Longitude'],\n            'elevation': row['Elevation'],\n            'slope': slope_data[neighborhood_size // 2, neighborhood_size // 2],\n            'aspect': aspect_data[neighborhood_size // 2, neighborhood_size // 2],\n            'curvature': curvature_data[neighborhood_size // 2, neighborhood_size // 2],\n            'northness': northness_data[neighborhood_size // 2, neighborhood_size // 2],\n            'eastness': eastness_data[neighborhood_size // 2, neighborhood_size // 2]\n        }\n        \n      else:\n        data_row = {\n            'lat': row['Latitude'],\n            'lon': row['Longitude'],\n            'elevation': row['Elevation'],\n            'slope': -1,\n            'aspect': -1,\n            'curvature': -1,\n            'northness': -1,\n            'eastness': -1\n        }\n      \n      # Append a row to the DataFrame\n      all_df = all_df.append(data_row, ignore_index=True)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n\n# Usage example:\n\nfinal_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n\n#clim_data = pd.read_csv(result_dem_feature_csv_path)\n\n# Apply read_elevation_data function to calculate elevation, slope, aspect, and curvature\n#elevation_data = clim_data.apply(lambda row: read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\", row['lat'], row['lon']), axis=1, result_type='expand')\n\n# Merge elevation data with the original DataFrame\n#final_testing_df = pd.concat([clim_data, elevation_data], axis=1)\n\n# Save the updated DataFrame to a new CSV file\n#final_testing_df.to_csv('final_testing.csv', index=False)\n\n# if not os.path.exists(result_dem_csv_path):\n#     elevation_df = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n#     print(elevation_df)\n#     elevation_df.to_csv(result_dem_csv_path)\n#     data = {\n#         'Latitude': [],\n#         'Longitude': [],\n#         'Elevation': [],\n#         'Slope': [],\n#         'Aspect': [],\n#       \t'Curvature': [],\n#     }\n#     new_df = pd.DataFrame(data)\n#     for index, row in elevation_df.iterrows():\n#         latitude = row['Latitude']  # Replace 'Latitude' with the actual name of your latitude column\n#         longitude = row['Longitude']  # Replace 'Longitude' with the actual name of your longitude column\n#         elevation, slope, aspect, curvature = get_elevation_slope_aspect_curvature(elevation_df, latitude, longitude)\n#         new_row = {\n#             'Latitude': latitude,\n#             'Longitude': longitude,\n#             'Elevation': elevation,\n#             'Slope': slope,\n#             'Aspect': aspect,\n#             'Curvature': curvature,\n#         }\n\n#         new_df = new_df.append(new_row, ignore_index=True)\n        \n#     new_df.to_csv(result_dem_feature_csv_path)\n# else:\n# \tprint(\"dem_template.csv exists. Skipping...\")\n    \n\n\n# # Get elevation, slope, aspect, and curvature based on the given lat and lon\n# latitude_to_find = 34.5  # Replace with the desired latitude\n# longitude_to_find = -120.5  # Replace with the desired longitude\n\n# elevation, slope, aspect, curvature = get_elevation_slope_aspect_curvature(elevation_df, latitude_to_find,\n#                                                                            longitude_to_find)\n\n# print(\"Latitude:\", latitude_to_find)\n# print(\"Longitude:\", longitude_to_find)\n# print(\"Elevation:\", elevation)\n# print(\"Slope:\", slope)\n# print(\"Aspect:\", aspect)\n# print(\"Curvature:\", curvature)\n#convert_the_original_dem_to_template_spatial_extent()\n",
  "history_output" : "ERROR 5: /home/chetana/gridmet_test_run/output_4km_clipped.tif, band 1: Access window out of range in RasterIO().  Requested\n(-2,-2) of size 6x6 on raster of 694x666.\nDEM geotif is saved to a csv file with only elevation /home/chetana/gridmet_test_run/dem_template.csv\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/IxeeYlTn1RyU/western_us_dem.py\", line 137, in <module>\n    final_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n  File \"/home/chetana/gw-workspace/IxeeYlTn1RyU/western_us_dem.py\", line 95, in read_elevation_data\n    slope_data, aspect_data = calculate_slope_aspect(small_elevation_data, pixel_size_x, pixel_size_y)\n  File \"/home/chetana/gw-workspace/IxeeYlTn1RyU/western_us_dem.py\", line 17, in calculate_slope_aspect\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n  File \"<__array_function__ internals>\", line 5, in gradient\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/numpy/lib/function_base.py\", line 995, in gradient\n    axes = _nx.normalize_axis_tuple(axis, N)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/numpy/core/numeric.py\", line 1385, in normalize_axis_tuple\n    axis = tuple([normalize_axis_index(ax, ndim, argname) for ax in axis])\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/numpy/core/numeric.py\", line 1385, in <listcomp>\n    axis = tuple([normalize_axis_index(ax, ndim, argname) for ax in axis])\nnumpy.AxisError: axis 1 is out of bounds for array of dimension 0\n",
  "history_begin_time" : 1690254222444,
  "history_end_time" : 1690254224913,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "wGFhrtxocGy7",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    print(elevation_data)\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n\ndef read_elevation_data(file_path, neighborhood_size=6):\n    dataset = gdal.Open(file_path)\n    if dataset is None:\n        print(\"Error: Could not open the file.\")\n        return None\n\t\n    result_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\n    result_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n    \n    band = dataset.GetRasterBand(1)\n    elevation_data = band.ReadAsArray()\n\n    # Get geotransform information\n    geotransform = dataset.GetGeoTransform()\n    min_lon, pixel_size_x, _, max_lat, _, pixel_size_y = geotransform\n\n    # Calculate raster size\n    raster_width = dataset.RasterXSize\n    raster_height = dataset.RasterYSize\n\n    # Generate latitude and longitude arrays\n    lats = np.arange(max_lat, max_lat - pixel_size_y * raster_height, -pixel_size_y)\n    lons = np.arange(min_lon, min_lon + pixel_size_x * raster_width, pixel_size_x)\n\n    # Create meshgrid of latitude and longitude\n    lon_grid, lat_grid = np.meshgrid(lons, lats)\n\n    # Flatten the data and the lat/lon grids\n    elevation_data_flat = elevation_data.flatten()\n    lat_grid_flat = lat_grid.flatten()\n    lon_grid_flat = lon_grid.flatten()\n\n    # Create a DataFrame to store the data\n    df = pd.DataFrame({\n      'Latitude': lat_grid_flat,\n      'Longitude': lon_grid_flat,\n      'Elevation': elevation_data_flat,\n    })\n    \n    df.to_csv(result_dem_csv_path)\n    print(f\"DEM geotif is saved to a csv file with only elevation {result_dem_csv_path}\")\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n\n    for index, row in df.iterrows():\n      # Access individual row elements using row['column_name']\n      # Convert latitude and longitude to pixel indices\n      x, y = lat_lon_to_pixel(row['Latitude'], row['Longitude'], geotransform)\n\n      # Read a small neighborhood of elevation data around the selected point\n      small_elevation_data = band.ReadAsArray(x - neighborhood_size // 2, y - neighborhood_size // 2, neighborhood_size, neighborhood_size)\n\n      # Calculate slope and aspect\n      slope_data, aspect_data = calculate_slope_aspect(small_elevation_data, pixel_size_x, pixel_size_y)\n\n      # Calculate curvature\n      curvature_data = calculate_curvature(small_elevation_data, pixel_size_x, pixel_size_y)\n      northness_data = np.abs(np.sin(np.radians(aspect_data)))\n      eastness_data = np.abs(np.cos(np.radians(aspect_data)))\n      \n\n      # Append a row to the DataFrame\n      data_row = {\n          'lat': row['Latitude'],\n          'lon': row['Longitude'],\n          'elevation': small_elevation_data[neighborhood_size // 2, neighborhood_size // 2],\n          'slope': slope_data[neighborhood_size // 2, neighborhood_size // 2],\n          'aspect': aspect_data[neighborhood_size // 2, neighborhood_size // 2],\n          'curvature': curvature_data[neighborhood_size // 2, neighborhood_size // 2],\n          'northness': northness_data[neighborhood_size // 2, neighborhood_size // 2],\n          'eastness': eastness_data[neighborhood_size // 2, neighborhood_size // 2]\n      }\n      all_df = all_df.append(data_row, ignore_index=True)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n\n# Usage example:\n\nfinal_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n\n#clim_data = pd.read_csv(result_dem_feature_csv_path)\n\n# Apply read_elevation_data function to calculate elevation, slope, aspect, and curvature\n#elevation_data = clim_data.apply(lambda row: read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\", row['lat'], row['lon']), axis=1, result_type='expand')\n\n# Merge elevation data with the original DataFrame\n#final_testing_df = pd.concat([clim_data, elevation_data], axis=1)\n\n# Save the updated DataFrame to a new CSV file\n#final_testing_df.to_csv('final_testing.csv', index=False)\n\n# if not os.path.exists(result_dem_csv_path):\n#     elevation_df = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n#     print(elevation_df)\n#     elevation_df.to_csv(result_dem_csv_path)\n#     data = {\n#         'Latitude': [],\n#         'Longitude': [],\n#         'Elevation': [],\n#         'Slope': [],\n#         'Aspect': [],\n#       \t'Curvature': [],\n#     }\n#     new_df = pd.DataFrame(data)\n#     for index, row in elevation_df.iterrows():\n#         latitude = row['Latitude']  # Replace 'Latitude' with the actual name of your latitude column\n#         longitude = row['Longitude']  # Replace 'Longitude' with the actual name of your longitude column\n#         elevation, slope, aspect, curvature = get_elevation_slope_aspect_curvature(elevation_df, latitude, longitude)\n#         new_row = {\n#             'Latitude': latitude,\n#             'Longitude': longitude,\n#             'Elevation': elevation,\n#             'Slope': slope,\n#             'Aspect': aspect,\n#             'Curvature': curvature,\n#         }\n\n#         new_df = new_df.append(new_row, ignore_index=True)\n        \n#     new_df.to_csv(result_dem_feature_csv_path)\n# else:\n# \tprint(\"dem_template.csv exists. Skipping...\")\n    \n\n\n# # Get elevation, slope, aspect, and curvature based on the given lat and lon\n# latitude_to_find = 34.5  # Replace with the desired latitude\n# longitude_to_find = -120.5  # Replace with the desired longitude\n\n# elevation, slope, aspect, curvature = get_elevation_slope_aspect_curvature(elevation_df, latitude_to_find,\n#                                                                            longitude_to_find)\n\n# print(\"Latitude:\", latitude_to_find)\n# print(\"Longitude:\", longitude_to_find)\n# print(\"Elevation:\", elevation)\n# print(\"Slope:\", slope)\n# print(\"Aspect:\", aspect)\n# print(\"Curvature:\", curvature)\n#convert_the_original_dem_to_template_spatial_extent()\n",
  "history_output" : "ERROR 5: /home/chetana/gridmet_test_run/output_4km_clipped.tif, band 1: Access window out of range in RasterIO().  Requested\n(-2,-2) of size 6x6 on raster of 694x666.\nDEM geotif is saved to a csv file with only elevation /home/chetana/gridmet_test_run/dem_template.csv\nNone\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/wGFhrtxocGy7/western_us_dem.py\", line 123, in <module>\n    final_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n  File \"/home/chetana/gw-workspace/wGFhrtxocGy7/western_us_dem.py\", line 94, in read_elevation_data\n    slope_data, aspect_data = calculate_slope_aspect(small_elevation_data, pixel_size_x, pixel_size_y)\n  File \"/home/chetana/gw-workspace/wGFhrtxocGy7/western_us_dem.py\", line 18, in calculate_slope_aspect\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n  File \"<__array_function__ internals>\", line 5, in gradient\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/numpy/lib/function_base.py\", line 995, in gradient\n    axes = _nx.normalize_axis_tuple(axis, N)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/numpy/core/numeric.py\", line 1385, in normalize_axis_tuple\n    axis = tuple([normalize_axis_index(ax, ndim, argname) for ax in axis])\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/numpy/core/numeric.py\", line 1385, in <listcomp>\n    axis = tuple([normalize_axis_index(ax, ndim, argname) for ax in axis])\nnumpy.AxisError: axis 1 is out of bounds for array of dimension 0\n",
  "history_begin_time" : 1690253734475,
  "history_end_time" : 1690253736976,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "oDqwivyF7etD",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n\ndef read_elevation_data(file_path, neighborhood_size=6):\n    dataset = gdal.Open(file_path)\n    if dataset is None:\n        print(\"Error: Could not open the file.\")\n        return None\n\t\n    result_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\n    result_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n    \n    band = dataset.GetRasterBand(1)\n    elevation_data = band.ReadAsArray()\n\n    # Get geotransform information\n    geotransform = dataset.GetGeoTransform()\n    min_lon, pixel_size_x, _, max_lat, _, pixel_size_y = geotransform\n\n    # Calculate raster size\n    raster_width = dataset.RasterXSize\n    raster_height = dataset.RasterYSize\n\n    # Generate latitude and longitude arrays\n    lats = np.arange(max_lat, max_lat - pixel_size_y * raster_height, -pixel_size_y)\n    lons = np.arange(min_lon, min_lon + pixel_size_x * raster_width, pixel_size_x)\n\n    # Create meshgrid of latitude and longitude\n    lon_grid, lat_grid = np.meshgrid(lons, lats)\n\n    # Flatten the data and the lat/lon grids\n    elevation_data_flat = elevation_data.flatten()\n    lat_grid_flat = lat_grid.flatten()\n    lon_grid_flat = lon_grid.flatten()\n\n    # Create a DataFrame to store the data\n    df = pd.DataFrame({\n      'Latitude': lat_grid_flat,\n      'Longitude': lon_grid_flat,\n      'Elevation': elevation_data_flat,\n    })\n    \n    df.to_csv(result_dem_csv_path)\n    print(f\"DEM geotif is saved to a csv file with only elevation {result_dem_csv_path}\")\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n\n    for index, row in df.iterrows():\n      # Access individual row elements using row['column_name']\n      # Convert latitude and longitude to pixel indices\n      x, y = lat_lon_to_pixel(row['Latitude'], row['Longitude'], geotransform)\n\n      # Read a small neighborhood of elevation data around the selected point\n      small_elevation_data = band.ReadAsArray(x - neighborhood_size // 2, y - neighborhood_size // 2, neighborhood_size, neighborhood_size)\n\n      # Calculate slope and aspect\n      slope_data, aspect_data = calculate_slope_aspect(small_elevation_data, pixel_size_x, pixel_size_y)\n\n      # Calculate curvature\n      curvature_data = calculate_curvature(small_elevation_data, pixel_size_x, pixel_size_y)\n      northness_data = np.abs(np.sin(np.radians(aspect_data)))\n      eastness_data = np.abs(np.cos(np.radians(aspect_data)))\n      \n\n      # Append a row to the DataFrame\n      data_row = {\n          'lat': row['Latitude'],\n          'lon': row['Longitude'],\n          'elevation': small_elevation_data[neighborhood_size // 2, neighborhood_size // 2],\n          'slope': slope_data[neighborhood_size // 2, neighborhood_size // 2],\n          'aspect': aspect_data[neighborhood_size // 2, neighborhood_size // 2],\n          'curvature': curvature_data[neighborhood_size // 2, neighborhood_size // 2],\n          'northness': northness_data[neighborhood_size // 2, neighborhood_size // 2],\n          'eastness': eastness_data[neighborhood_size // 2, neighborhood_size // 2]\n      }\n      all_df = all_df.append(data_row, ignore_index=True)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n\n# Usage example:\n\nfinal_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n\n#clim_data = pd.read_csv(result_dem_feature_csv_path)\n\n# Apply read_elevation_data function to calculate elevation, slope, aspect, and curvature\n#elevation_data = clim_data.apply(lambda row: read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\", row['lat'], row['lon']), axis=1, result_type='expand')\n\n# Merge elevation data with the original DataFrame\n#final_testing_df = pd.concat([clim_data, elevation_data], axis=1)\n\n# Save the updated DataFrame to a new CSV file\n#final_testing_df.to_csv('final_testing.csv', index=False)\n\n# if not os.path.exists(result_dem_csv_path):\n#     elevation_df = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n#     print(elevation_df)\n#     elevation_df.to_csv(result_dem_csv_path)\n#     data = {\n#         'Latitude': [],\n#         'Longitude': [],\n#         'Elevation': [],\n#         'Slope': [],\n#         'Aspect': [],\n#       \t'Curvature': [],\n#     }\n#     new_df = pd.DataFrame(data)\n#     for index, row in elevation_df.iterrows():\n#         latitude = row['Latitude']  # Replace 'Latitude' with the actual name of your latitude column\n#         longitude = row['Longitude']  # Replace 'Longitude' with the actual name of your longitude column\n#         elevation, slope, aspect, curvature = get_elevation_slope_aspect_curvature(elevation_df, latitude, longitude)\n#         new_row = {\n#             'Latitude': latitude,\n#             'Longitude': longitude,\n#             'Elevation': elevation,\n#             'Slope': slope,\n#             'Aspect': aspect,\n#             'Curvature': curvature,\n#         }\n\n#         new_df = new_df.append(new_row, ignore_index=True)\n        \n#     new_df.to_csv(result_dem_feature_csv_path)\n# else:\n# \tprint(\"dem_template.csv exists. Skipping...\")\n    \n\n\n# # Get elevation, slope, aspect, and curvature based on the given lat and lon\n# latitude_to_find = 34.5  # Replace with the desired latitude\n# longitude_to_find = -120.5  # Replace with the desired longitude\n\n# elevation, slope, aspect, curvature = get_elevation_slope_aspect_curvature(elevation_df, latitude_to_find,\n#                                                                            longitude_to_find)\n\n# print(\"Latitude:\", latitude_to_find)\n# print(\"Longitude:\", longitude_to_find)\n# print(\"Elevation:\", elevation)\n# print(\"Slope:\", slope)\n# print(\"Aspect:\", aspect)\n# print(\"Curvature:\", curvature)\n#convert_the_original_dem_to_template_spatial_extent()\n",
  "history_output" : "ERROR 5: /home/chetana/gridmet_test_run/output_4km_clipped.tif, band 1: Access window out of range in RasterIO().  Requested\n(-2,-2) of size 6x6 on raster of 694x666.\nDEM geotif is saved to a csv file with only elevation /home/chetana/gridmet_test_run/dem_template.csv\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/oDqwivyF7etD/western_us_dem.py\", line 122, in <module>\n    final_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n  File \"/home/chetana/gw-workspace/oDqwivyF7etD/western_us_dem.py\", line 93, in read_elevation_data\n    slope_data, aspect_data = calculate_slope_aspect(small_elevation_data, pixel_size_x, pixel_size_y)\n  File \"/home/chetana/gw-workspace/oDqwivyF7etD/western_us_dem.py\", line 17, in calculate_slope_aspect\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n  File \"<__array_function__ internals>\", line 5, in gradient\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/numpy/lib/function_base.py\", line 995, in gradient\n    axes = _nx.normalize_axis_tuple(axis, N)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/numpy/core/numeric.py\", line 1385, in normalize_axis_tuple\n    axis = tuple([normalize_axis_index(ax, ndim, argname) for ax in axis])\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/numpy/core/numeric.py\", line 1385, in <listcomp>\n    axis = tuple([normalize_axis_index(ax, ndim, argname) for ax in axis])\nnumpy.AxisError: axis 1 is out of bounds for array of dimension 0\n",
  "history_begin_time" : 1690253707509,
  "history_end_time" : 1690253710011,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "xdkpoiHuSpfi",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\n\n# Set the warning filter globally to ignore the FutureWarning\nwarnings.simplefilter(\"ignore\", FutureWarning)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n\ndef read_elevation_data(file_path, neighborhood_size=3):\n    dataset = gdal.Open(file_path)\n    if dataset is None:\n        print(\"Error: Could not open the file.\")\n        return None\n\t\n    result_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\n    result_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n    \n    band = dataset.GetRasterBand(1)\n    elevation_data = band.ReadAsArray()\n\n    # Get geotransform information\n    geotransform = dataset.GetGeoTransform()\n    min_lon, pixel_size_x, _, max_lat, _, pixel_size_y = geotransform\n\n    # Calculate raster size\n    raster_width = dataset.RasterXSize\n    raster_height = dataset.RasterYSize\n\n    # Generate latitude and longitude arrays\n    lats = np.arange(max_lat, max_lat - pixel_size_y * raster_height, -pixel_size_y)\n    lons = np.arange(min_lon, min_lon + pixel_size_x * raster_width, pixel_size_x)\n\n    # Create meshgrid of latitude and longitude\n    lon_grid, lat_grid = np.meshgrid(lons, lats)\n\n    # Flatten the data and the lat/lon grids\n    elevation_data_flat = elevation_data.flatten()\n    lat_grid_flat = lat_grid.flatten()\n    lon_grid_flat = lon_grid.flatten()\n\n    # Create a DataFrame to store the data\n    df = pd.DataFrame({\n      'Latitude': lat_grid_flat,\n      'Longitude': lon_grid_flat,\n      'Elevation': elevation_data_flat,\n    })\n    \n    df.to_csv(result_dem_csv_path)\n    print(f\"DEM geotif is saved to a csv file with only elevation {result_dem_csv_path}\")\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n\n    for index, row in df.iterrows():\n      # Access individual row elements using row['column_name']\n      # Convert latitude and longitude to pixel indices\n      x, y = lat_lon_to_pixel(row['Latitude'], row['Longitude'], geotransform)\n\n      # Read a small neighborhood of elevation data around the selected point\n      small_elevation_data = band.ReadAsArray(x - neighborhood_size // 2, y - neighborhood_size // 2, neighborhood_size, neighborhood_size)\n\n      # Calculate slope and aspect\n      slope_data, aspect_data = calculate_slope_aspect(small_elevation_data, pixel_size_x, pixel_size_y)\n\n      # Calculate curvature\n      curvature_data = calculate_curvature(small_elevation_data, pixel_size_x, pixel_size_y)\n      northness_data = np.abs(np.sin(np.radians(aspect_data)))\n      eastness_data = np.abs(np.cos(np.radians(aspect_data)))\n      \n\n      # Append a row to the DataFrame\n      data_row = {\n          'lat': row['Latitude'],\n          'lon': row['Longitude'],\n          'elevation': small_elevation_data[neighborhood_size // 2, neighborhood_size // 2],\n          'slope': slope_data[neighborhood_size // 2, neighborhood_size // 2],\n          'aspect': aspect_data[neighborhood_size // 2, neighborhood_size // 2],\n          'curvature': curvature_data[neighborhood_size // 2, neighborhood_size // 2],\n          'northness': northness_data[neighborhood_size // 2, neighborhood_size // 2],\n          'eastness': eastness_data[neighborhood_size // 2, neighborhood_size // 2]\n      }\n      all_df = all_df.append(data_row, ignore_index=True)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n\n# Usage example:\n\nfinal_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n\n#clim_data = pd.read_csv(result_dem_feature_csv_path)\n\n# Apply read_elevation_data function to calculate elevation, slope, aspect, and curvature\n#elevation_data = clim_data.apply(lambda row: read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\", row['lat'], row['lon']), axis=1, result_type='expand')\n\n# Merge elevation data with the original DataFrame\n#final_testing_df = pd.concat([clim_data, elevation_data], axis=1)\n\n# Save the updated DataFrame to a new CSV file\n#final_testing_df.to_csv('final_testing.csv', index=False)\n\n# if not os.path.exists(result_dem_csv_path):\n#     elevation_df = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n#     print(elevation_df)\n#     elevation_df.to_csv(result_dem_csv_path)\n#     data = {\n#         'Latitude': [],\n#         'Longitude': [],\n#         'Elevation': [],\n#         'Slope': [],\n#         'Aspect': [],\n#       \t'Curvature': [],\n#     }\n#     new_df = pd.DataFrame(data)\n#     for index, row in elevation_df.iterrows():\n#         latitude = row['Latitude']  # Replace 'Latitude' with the actual name of your latitude column\n#         longitude = row['Longitude']  # Replace 'Longitude' with the actual name of your longitude column\n#         elevation, slope, aspect, curvature = get_elevation_slope_aspect_curvature(elevation_df, latitude, longitude)\n#         new_row = {\n#             'Latitude': latitude,\n#             'Longitude': longitude,\n#             'Elevation': elevation,\n#             'Slope': slope,\n#             'Aspect': aspect,\n#             'Curvature': curvature,\n#         }\n\n#         new_df = new_df.append(new_row, ignore_index=True)\n        \n#     new_df.to_csv(result_dem_feature_csv_path)\n# else:\n# \tprint(\"dem_template.csv exists. Skipping...\")\n    \n\n\n# # Get elevation, slope, aspect, and curvature based on the given lat and lon\n# latitude_to_find = 34.5  # Replace with the desired latitude\n# longitude_to_find = -120.5  # Replace with the desired longitude\n\n# elevation, slope, aspect, curvature = get_elevation_slope_aspect_curvature(elevation_df, latitude_to_find,\n#                                                                            longitude_to_find)\n\n# print(\"Latitude:\", latitude_to_find)\n# print(\"Longitude:\", longitude_to_find)\n# print(\"Elevation:\", elevation)\n# print(\"Slope:\", slope)\n# print(\"Aspect:\", aspect)\n# print(\"Curvature:\", curvature)\n#convert_the_original_dem_to_template_spatial_extent()\n",
  "history_output" : "ERROR 5: /home/chetana/gridmet_test_run/output_4km_clipped.tif, band 1: Access window out of range in RasterIO().  Requested\n(692,0) of size 3x3 on raster of 694x666.\nDEM geotif is saved to a csv file with only elevation /home/chetana/gridmet_test_run/dem_template.csv\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/xdkpoiHuSpfi/western_us_dem.py\", line 122, in <module>\n    final_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n  File \"/home/chetana/gw-workspace/xdkpoiHuSpfi/western_us_dem.py\", line 93, in read_elevation_data\n    slope_data, aspect_data = calculate_slope_aspect(small_elevation_data, pixel_size_x, pixel_size_y)\n  File \"/home/chetana/gw-workspace/xdkpoiHuSpfi/western_us_dem.py\", line 17, in calculate_slope_aspect\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n  File \"<__array_function__ internals>\", line 5, in gradient\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/numpy/lib/function_base.py\", line 995, in gradient\n    axes = _nx.normalize_axis_tuple(axis, N)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/numpy/core/numeric.py\", line 1385, in normalize_axis_tuple\n    axis = tuple([normalize_axis_index(ax, ndim, argname) for ax in axis])\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/numpy/core/numeric.py\", line 1385, in <listcomp>\n    axis = tuple([normalize_axis_index(ax, ndim, argname) for ax in axis])\nnumpy.AxisError: axis 1 is out of bounds for array of dimension 0\n",
  "history_begin_time" : 1690253352652,
  "history_end_time" : 1690253355837,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "dUIViGLYzXag",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport warnings\n\n# Temporarily ignore the FutureWarning\nwith warnings.catch_warnings():\n    warnings.simplefilter(\"ignore\")\n    df = df.append(new_row, ignore_index=True)\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n\ndef read_elevation_data(file_path, neighborhood_size=3):\n    dataset = gdal.Open(file_path)\n    if dataset is None:\n        print(\"Error: Could not open the file.\")\n        return None\n\t\n    result_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\n    result_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n    \n    band = dataset.GetRasterBand(1)\n    elevation_data = band.ReadAsArray()\n\n    # Get geotransform information\n    geotransform = dataset.GetGeoTransform()\n    min_lon, pixel_size_x, _, max_lat, _, pixel_size_y = geotransform\n\n    # Calculate raster size\n    raster_width = dataset.RasterXSize\n    raster_height = dataset.RasterYSize\n\n    # Generate latitude and longitude arrays\n    lats = np.arange(max_lat, max_lat - pixel_size_y * raster_height, -pixel_size_y)\n    lons = np.arange(min_lon, min_lon + pixel_size_x * raster_width, pixel_size_x)\n\n    # Create meshgrid of latitude and longitude\n    lon_grid, lat_grid = np.meshgrid(lons, lats)\n\n    # Flatten the data and the lat/lon grids\n    elevation_data_flat = elevation_data.flatten()\n    lat_grid_flat = lat_grid.flatten()\n    lon_grid_flat = lon_grid.flatten()\n\n    # Create a DataFrame to store the data\n    df = pd.DataFrame({\n      'Latitude': lat_grid_flat,\n      'Longitude': lon_grid_flat,\n      'Elevation': elevation_data_flat,\n    })\n    \n    df.to_csv(result_dem_csv_path)\n    print(f\"DEM geotif is saved to a csv file with only elevation {result_dem_csv_path}\")\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n\n    for index, row in df.iterrows():\n      # Access individual row elements using row['column_name']\n      # Convert latitude and longitude to pixel indices\n      x, y = lat_lon_to_pixel(row['Latitude'], row['Longitude'], geotransform)\n\n      # Read a small neighborhood of elevation data around the selected point\n      small_elevation_data = band.ReadAsArray(x - neighborhood_size // 2, y - neighborhood_size // 2, neighborhood_size, neighborhood_size)\n\n      # Calculate slope and aspect\n      slope_data, aspect_data = calculate_slope_aspect(small_elevation_data, pixel_size_x, pixel_size_y)\n\n      # Calculate curvature\n      curvature_data = calculate_curvature(small_elevation_data, pixel_size_x, pixel_size_y)\n      northness_data = np.abs(np.sin(np.radians(aspect_data)))\n      eastness_data = np.abs(np.cos(np.radians(aspect_data)))\n      \n\n      # Append a row to the DataFrame\n      data_row = {\n          'lat': row['Latitude'],\n          'lon': row['Longitude'],\n          'elevation': small_elevation_data[neighborhood_size // 2, neighborhood_size // 2],\n          'slope': slope_data[neighborhood_size // 2, neighborhood_size // 2],\n          'aspect': aspect_data[neighborhood_size // 2, neighborhood_size // 2],\n          'curvature': curvature_data[neighborhood_size // 2, neighborhood_size // 2],\n          'northness': northness_data[neighborhood_size // 2, neighborhood_size // 2],\n          'eastness': eastness_data[neighborhood_size // 2, neighborhood_size // 2]\n      }\n      all_df = all_df.append(data_row, ignore_index=True)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    print(f\"DEM and other columns are saved to file {result_dem_feature_csv_path}\")\n    return all_df\n\n\n\n# Usage example:\n\nfinal_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n\n#clim_data = pd.read_csv(result_dem_feature_csv_path)\n\n# Apply read_elevation_data function to calculate elevation, slope, aspect, and curvature\n#elevation_data = clim_data.apply(lambda row: read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\", row['lat'], row['lon']), axis=1, result_type='expand')\n\n# Merge elevation data with the original DataFrame\n#final_testing_df = pd.concat([clim_data, elevation_data], axis=1)\n\n# Save the updated DataFrame to a new CSV file\n#final_testing_df.to_csv('final_testing.csv', index=False)\n\n# if not os.path.exists(result_dem_csv_path):\n#     elevation_df = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n#     print(elevation_df)\n#     elevation_df.to_csv(result_dem_csv_path)\n#     data = {\n#         'Latitude': [],\n#         'Longitude': [],\n#         'Elevation': [],\n#         'Slope': [],\n#         'Aspect': [],\n#       \t'Curvature': [],\n#     }\n#     new_df = pd.DataFrame(data)\n#     for index, row in elevation_df.iterrows():\n#         latitude = row['Latitude']  # Replace 'Latitude' with the actual name of your latitude column\n#         longitude = row['Longitude']  # Replace 'Longitude' with the actual name of your longitude column\n#         elevation, slope, aspect, curvature = get_elevation_slope_aspect_curvature(elevation_df, latitude, longitude)\n#         new_row = {\n#             'Latitude': latitude,\n#             'Longitude': longitude,\n#             'Elevation': elevation,\n#             'Slope': slope,\n#             'Aspect': aspect,\n#             'Curvature': curvature,\n#         }\n\n#         new_df = new_df.append(new_row, ignore_index=True)\n        \n#     new_df.to_csv(result_dem_feature_csv_path)\n# else:\n# \tprint(\"dem_template.csv exists. Skipping...\")\n    \n\n\n# # Get elevation, slope, aspect, and curvature based on the given lat and lon\n# latitude_to_find = 34.5  # Replace with the desired latitude\n# longitude_to_find = -120.5  # Replace with the desired longitude\n\n# elevation, slope, aspect, curvature = get_elevation_slope_aspect_curvature(elevation_df, latitude_to_find,\n#                                                                            longitude_to_find)\n\n# print(\"Latitude:\", latitude_to_find)\n# print(\"Longitude:\", longitude_to_find)\n# print(\"Elevation:\", elevation)\n# print(\"Slope:\", slope)\n# print(\"Aspect:\", aspect)\n# print(\"Curvature:\", curvature)\n#convert_the_original_dem_to_template_spatial_extent()\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/dUIViGLYzXag/western_us_dem.py\", line 9, in <module>\n    df = df.append(new_row, ignore_index=True)\nNameError: name 'df' is not defined\n",
  "history_begin_time" : 1690253268266,
  "history_end_time" : 1690253268809,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "OZsFWg1lstjS",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\n\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n\ndef read_elevation_data(file_path, neighborhood_size=3):\n    dataset = gdal.Open(file_path)\n    if dataset is None:\n        print(\"Error: Could not open the file.\")\n        return None\n\t\n    result_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\n    result_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n    \n    band = dataset.GetRasterBand(1)\n    elevation_data = band.ReadAsArray()\n\n    # Get geotransform information\n    geotransform = dataset.GetGeoTransform()\n    min_lon, pixel_size_x, _, max_lat, _, pixel_size_y = geotransform\n\n    # Calculate raster size\n    raster_width = dataset.RasterXSize\n    raster_height = dataset.RasterYSize\n\n    # Generate latitude and longitude arrays\n    lats = np.arange(max_lat, max_lat - pixel_size_y * raster_height, -pixel_size_y)\n    lons = np.arange(min_lon, min_lon + pixel_size_x * raster_width, pixel_size_x)\n\n    # Create meshgrid of latitude and longitude\n    lon_grid, lat_grid = np.meshgrid(lons, lats)\n\n    # Flatten the data and the lat/lon grids\n    elevation_data_flat = elevation_data.flatten()\n    lat_grid_flat = lat_grid.flatten()\n    lon_grid_flat = lon_grid.flatten()\n\n    # Create a DataFrame to store the data\n    df = pd.DataFrame({\n      'Latitude': lat_grid_flat,\n      'Longitude': lon_grid_flat,\n      'Elevation': elevation_data_flat,\n    })\n    \n    df.to_csv(result_dem_csv_path)\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n\n    for index, row in df.iterrows():\n      # Access individual row elements using row['column_name']\n      # Convert latitude and longitude to pixel indices\n      x, y = lat_lon_to_pixel(row['Latitude'], row['Longitude'], geotransform)\n\n      # Read a small neighborhood of elevation data around the selected point\n      small_elevation_data = band.ReadAsArray(x - neighborhood_size // 2, y - neighborhood_size // 2, neighborhood_size, neighborhood_size)\n\n      # Calculate slope and aspect\n      slope_data, aspect_data = calculate_slope_aspect(small_elevation_data, pixel_size_x, pixel_size_y)\n\n      # Calculate curvature\n      curvature_data = calculate_curvature(small_elevation_data, pixel_size_x, pixel_size_y)\n      northness_data = np.abs(np.sin(np.radians(aspect_data)))\n      eastness_data = np.abs(np.cos(np.radians(aspect_data)))\n      \n\n      # Append a row to the DataFrame\n      data_row = {\n          'lat': lat,\n          'lon': lon,\n          'elevation': small_elevation_data[neighborhood_size // 2, neighborhood_size // 2],\n          'slope': slope_data[neighborhood_size // 2, neighborhood_size // 2],\n          'aspect': aspect_data[neighborhood_size // 2, neighborhood_size // 2],\n          'curvature': curvature_data[neighborhood_size // 2, neighborhood_size // 2],\n          'northness': northness_data[neighborhood_size // 2, neighborhood_size // 2],\n          'eastness': eastness_data[neighborhood_size // 2, neighborhood_size // 2]\n      }\n      all_df = all_df.append(data_row, ignore_index=True)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    return all_df\n\n\n\n# Usage example:\n\nfinal_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n\n#clim_data = pd.read_csv(result_dem_feature_csv_path)\n\n# Apply read_elevation_data function to calculate elevation, slope, aspect, and curvature\n#elevation_data = clim_data.apply(lambda row: read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\", row['lat'], row['lon']), axis=1, result_type='expand')\n\n# Merge elevation data with the original DataFrame\n#final_testing_df = pd.concat([clim_data, elevation_data], axis=1)\n\n# Save the updated DataFrame to a new CSV file\n#final_testing_df.to_csv('final_testing.csv', index=False)\n\n# if not os.path.exists(result_dem_csv_path):\n#     elevation_df = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n#     print(elevation_df)\n#     elevation_df.to_csv(result_dem_csv_path)\n#     data = {\n#         'Latitude': [],\n#         'Longitude': [],\n#         'Elevation': [],\n#         'Slope': [],\n#         'Aspect': [],\n#       \t'Curvature': [],\n#     }\n#     new_df = pd.DataFrame(data)\n#     for index, row in elevation_df.iterrows():\n#         latitude = row['Latitude']  # Replace 'Latitude' with the actual name of your latitude column\n#         longitude = row['Longitude']  # Replace 'Longitude' with the actual name of your longitude column\n#         elevation, slope, aspect, curvature = get_elevation_slope_aspect_curvature(elevation_df, latitude, longitude)\n#         new_row = {\n#             'Latitude': latitude,\n#             'Longitude': longitude,\n#             'Elevation': elevation,\n#             'Slope': slope,\n#             'Aspect': aspect,\n#             'Curvature': curvature,\n#         }\n\n#         new_df = new_df.append(new_row, ignore_index=True)\n        \n#     new_df.to_csv(result_dem_feature_csv_path)\n# else:\n# \tprint(\"dem_template.csv exists. Skipping...\")\n    \n\n\n# # Get elevation, slope, aspect, and curvature based on the given lat and lon\n# latitude_to_find = 34.5  # Replace with the desired latitude\n# longitude_to_find = -120.5  # Replace with the desired longitude\n\n# elevation, slope, aspect, curvature = get_elevation_slope_aspect_curvature(elevation_df, latitude_to_find,\n#                                                                            longitude_to_find)\n\n# print(\"Latitude:\", latitude_to_find)\n# print(\"Longitude:\", longitude_to_find)\n# print(\"Elevation:\", elevation)\n# print(\"Slope:\", slope)\n# print(\"Aspect:\", aspect)\n# print(\"Curvature:\", curvature)\n#convert_the_original_dem_to_template_spatial_extent()\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/OZsFWg1lstjS/western_us_dem.py\", line 117, in <module>\n    final_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n  File \"/home/chetana/gw-workspace/OZsFWg1lstjS/western_us_dem.py\", line 99, in read_elevation_data\n    'lat': lat,\nNameError: name 'lat' is not defined\n",
  "history_begin_time" : 1690252860893,
  "history_end_time" : 1690252863451,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "6SGlgnmGCsB4",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\n\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n\ndef read_elevation_data(file_path, neighborhood_size=3):\n    dataset = gdal.Open(file_path)\n    if dataset is None:\n        print(\"Error: Could not open the file.\")\n        return None\n\t\n    result_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\n    result_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n    \n    band = dataset.GetRasterBand(1)\n    elevation_data = band.ReadAsArray()\n\n    # Get geotransform information\n    geotransform = dataset.GetGeoTransform()\n    min_lon, pixel_size_x, _, max_lat, _, pixel_size_y = geotransform\n\n    # Calculate raster size\n    raster_width = dataset.RasterXSize\n    raster_height = dataset.RasterYSize\n\n    # Generate latitude and longitude arrays\n    lats = np.arange(max_lat, max_lat - pixel_size_y * raster_height, -pixel_size_y)\n    lons = np.arange(min_lon, min_lon + pixel_size_x * raster_width, pixel_size_x)\n\n    # Create meshgrid of latitude and longitude\n    lon_grid, lat_grid = np.meshgrid(lons, lats)\n\n    # Flatten the data and the lat/lon grids\n    elevation_data_flat = elevation_data.flatten()\n    lat_grid_flat = lat_grid.flatten()\n    lon_grid_flat = lon_grid.flatten()\n\n    # Create a DataFrame to store the data\n    df = pd.DataFrame({\n      'Latitude': lat_grid_flat,\n      'Longitude': lon_grid_flat,\n      'Elevation': elevation_data_flat,\n    })\n    \n    df.to_csv(result_dem_csv_path)\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n\n    for index, row in iterrows(df):\n      # Access individual row elements using row['column_name']\n      # Convert latitude and longitude to pixel indices\n      x, y = lat_lon_to_pixel(row['Latitude'], row['Longitude'], geotransform)\n\n      # Read a small neighborhood of elevation data around the selected point\n      small_elevation_data = band.ReadAsArray(x - neighborhood_size // 2, y - neighborhood_size // 2, neighborhood_size, neighborhood_size)\n\n      # Calculate slope and aspect\n      slope_data, aspect_data = calculate_slope_aspect(small_elevation_data, pixel_size_x, pixel_size_y)\n\n      # Calculate curvature\n      curvature_data = calculate_curvature(small_elevation_data, pixel_size_x, pixel_size_y)\n      northness_data = np.abs(np.sin(np.radians(aspect_data)))\n      eastness_data = np.abs(np.cos(np.radians(aspect_data)))\n      \n\n      # Append a row to the DataFrame\n      data_row = {\n          'lat': lat,\n          'lon': lon,\n          'elevation': small_elevation_data[neighborhood_size // 2, neighborhood_size // 2],\n          'slope': slope_data[neighborhood_size // 2, neighborhood_size // 2],\n          'aspect': aspect_data[neighborhood_size // 2, neighborhood_size // 2],\n          'curvature': curvature_data[neighborhood_size // 2, neighborhood_size // 2],\n          'northness': northness_data[neighborhood_size // 2, neighborhood_size // 2],\n          'eastness': eastness_data[neighborhood_size // 2, neighborhood_size // 2]\n      }\n      all_df = all_df.append(data_row, ignore_index=True)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n    return all_df\n\n\n\n# Usage example:\n\nfinal_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n\n#clim_data = pd.read_csv(result_dem_feature_csv_path)\n\n# Apply read_elevation_data function to calculate elevation, slope, aspect, and curvature\n#elevation_data = clim_data.apply(lambda row: read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\", row['lat'], row['lon']), axis=1, result_type='expand')\n\n# Merge elevation data with the original DataFrame\n#final_testing_df = pd.concat([clim_data, elevation_data], axis=1)\n\n# Save the updated DataFrame to a new CSV file\n#final_testing_df.to_csv('final_testing.csv', index=False)\n\n# if not os.path.exists(result_dem_csv_path):\n#     elevation_df = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n#     print(elevation_df)\n#     elevation_df.to_csv(result_dem_csv_path)\n#     data = {\n#         'Latitude': [],\n#         'Longitude': [],\n#         'Elevation': [],\n#         'Slope': [],\n#         'Aspect': [],\n#       \t'Curvature': [],\n#     }\n#     new_df = pd.DataFrame(data)\n#     for index, row in elevation_df.iterrows():\n#         latitude = row['Latitude']  # Replace 'Latitude' with the actual name of your latitude column\n#         longitude = row['Longitude']  # Replace 'Longitude' with the actual name of your longitude column\n#         elevation, slope, aspect, curvature = get_elevation_slope_aspect_curvature(elevation_df, latitude, longitude)\n#         new_row = {\n#             'Latitude': latitude,\n#             'Longitude': longitude,\n#             'Elevation': elevation,\n#             'Slope': slope,\n#             'Aspect': aspect,\n#             'Curvature': curvature,\n#         }\n\n#         new_df = new_df.append(new_row, ignore_index=True)\n        \n#     new_df.to_csv(result_dem_feature_csv_path)\n# else:\n# \tprint(\"dem_template.csv exists. Skipping...\")\n    \n\n\n# # Get elevation, slope, aspect, and curvature based on the given lat and lon\n# latitude_to_find = 34.5  # Replace with the desired latitude\n# longitude_to_find = -120.5  # Replace with the desired longitude\n\n# elevation, slope, aspect, curvature = get_elevation_slope_aspect_curvature(elevation_df, latitude_to_find,\n#                                                                            longitude_to_find)\n\n# print(\"Latitude:\", latitude_to_find)\n# print(\"Longitude:\", longitude_to_find)\n# print(\"Elevation:\", elevation)\n# print(\"Slope:\", slope)\n# print(\"Aspect:\", aspect)\n# print(\"Curvature:\", curvature)\n#convert_the_original_dem_to_template_spatial_extent()\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/6SGlgnmGCsB4/western_us_dem.py\", line 117, in <module>\n    final_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n  File \"/home/chetana/gw-workspace/6SGlgnmGCsB4/western_us_dem.py\", line 80, in read_elevation_data\n    for index, row in iterrows(df):\nNameError: name 'iterrows' is not defined\n",
  "history_begin_time" : 1690252691933,
  "history_end_time" : 1690252697472,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "MOTdsXMYFCWm",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\n\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n\ndef read_elevation_data(file_path, neighborhood_size=3):\n    dataset = gdal.Open(file_path)\n    if dataset is None:\n        print(\"Error: Could not open the file.\")\n        return None\n\t\n    result_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\n    result_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n    \n    band = dataset.GetRasterBand(1)\n    elevation_data = band.ReadAsArray()\n\n    # Get geotransform information\n    geotransform = dataset.GetGeoTransform()\n    min_lon, pixel_size_x, _, max_lat, _, pixel_size_y = geotransform\n\n    # Calculate raster size\n    raster_width = dataset.RasterXSize\n    raster_height = dataset.RasterYSize\n\n    # Generate latitude and longitude arrays\n    lats = np.arange(max_lat, max_lat - pixel_size_y * raster_height, -pixel_size_y)\n    lons = np.arange(min_lon, min_lon + pixel_size_x * raster_width, pixel_size_x)\n\n    # Create meshgrid of latitude and longitude\n    lon_grid, lat_grid = np.meshgrid(lons, lats)\n\n    # Flatten the data and the lat/lon grids\n    elevation_data_flat = elevation_data.flatten()\n    lat_grid_flat = lat_grid.flatten()\n    lon_grid_flat = lon_grid.flatten()\n\n    # Create a DataFrame to store the data\n    df = pd.DataFrame({\n      'Latitude': lat_grid_flat,\n      'Longitude': lon_grid_flat,\n      'Elevation': elevation_data_flat,\n    })\n    \n    df.to_csv(result_dem_csv_path)\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n\n    for index, row in iterrows(df):\n      # Access individual row elements using row['column_name']\n      # Convert latitude and longitude to pixel indices\n      x, y = lat_lon_to_pixel(row['Latitude'], row['Longitude'], geotransform)\n\n      # Read a small neighborhood of elevation data around the selected point\n      small_elevation_data = band.ReadAsArray(x - neighborhood_size // 2, y - neighborhood_size // 2, neighborhood_size, neighborhood_size)\n\n      # Calculate slope and aspect\n      slope_data, aspect_data = calculate_slope_aspect(small_elevation_data, pixel_size_x, pixel_size_y)\n\n      # Calculate curvature\n      curvature_data = calculate_curvature(small_elevation_data, pixel_size_x, pixel_size_y)\n      northness_data = np.abs(np.sin(np.radians(aspect_data)))\n      eastness_data = np.abs(np.cos(np.radians(aspect_data)))\n      \n\n      # Append a row to the DataFrame\n      data_row = {\n          'lat': lat,\n          'lon': lon,\n          'elevation': small_elevation_data[neighborhood_size // 2, neighborhood_size // 2],\n          'slope': slope_data[neighborhood_size // 2, neighborhood_size // 2],\n          'aspect': aspect_data[neighborhood_size // 2, neighborhood_size // 2],\n          'curvature': curvature_data[neighborhood_size // 2, neighborhood_size // 2],\n          'northness': northness_data[neighborhood_size // 2, neighborhood_size // 2],\n          'eastness': eastness_data[neighborhood_size // 2, neighborhood_size // 2]\n      }\n      all_df = all_df.append(data_row, ignore_index=True)\n    \n    all_df.to_csv(result_dem_feature_csv_path)\n\treturn all_df\n\n\n\n# Usage example:\n\nfinal_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n\n#clim_data = pd.read_csv(result_dem_feature_csv_path)\n\n# Apply read_elevation_data function to calculate elevation, slope, aspect, and curvature\n#elevation_data = clim_data.apply(lambda row: read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\", row['lat'], row['lon']), axis=1, result_type='expand')\n\n# Merge elevation data with the original DataFrame\n#final_testing_df = pd.concat([clim_data, elevation_data], axis=1)\n\n# Save the updated DataFrame to a new CSV file\n#final_testing_df.to_csv('final_testing.csv', index=False)\n\n# if not os.path.exists(result_dem_csv_path):\n#     elevation_df = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n#     print(elevation_df)\n#     elevation_df.to_csv(result_dem_csv_path)\n#     data = {\n#         'Latitude': [],\n#         'Longitude': [],\n#         'Elevation': [],\n#         'Slope': [],\n#         'Aspect': [],\n#       \t'Curvature': [],\n#     }\n#     new_df = pd.DataFrame(data)\n#     for index, row in elevation_df.iterrows():\n#         latitude = row['Latitude']  # Replace 'Latitude' with the actual name of your latitude column\n#         longitude = row['Longitude']  # Replace 'Longitude' with the actual name of your longitude column\n#         elevation, slope, aspect, curvature = get_elevation_slope_aspect_curvature(elevation_df, latitude, longitude)\n#         new_row = {\n#             'Latitude': latitude,\n#             'Longitude': longitude,\n#             'Elevation': elevation,\n#             'Slope': slope,\n#             'Aspect': aspect,\n#             'Curvature': curvature,\n#         }\n\n#         new_df = new_df.append(new_row, ignore_index=True)\n        \n#     new_df.to_csv(result_dem_feature_csv_path)\n# else:\n# \tprint(\"dem_template.csv exists. Skipping...\")\n    \n\n\n# # Get elevation, slope, aspect, and curvature based on the given lat and lon\n# latitude_to_find = 34.5  # Replace with the desired latitude\n# longitude_to_find = -120.5  # Replace with the desired longitude\n\n# elevation, slope, aspect, curvature = get_elevation_slope_aspect_curvature(elevation_df, latitude_to_find,\n#                                                                            longitude_to_find)\n\n# print(\"Latitude:\", latitude_to_find)\n# print(\"Longitude:\", longitude_to_find)\n# print(\"Elevation:\", elevation)\n# print(\"Slope:\", slope)\n# print(\"Aspect:\", aspect)\n# print(\"Curvature:\", curvature)\n#convert_the_original_dem_to_template_spatial_extent()\n",
  "history_output" : "  File \"/home/chetana/gw-workspace/MOTdsXMYFCWm/western_us_dem.py\", line 111\n    return all_df\nTabError: inconsistent use of tabs and spaces in indentation\n",
  "history_begin_time" : 1690252656308,
  "history_end_time" : 1690252656365,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "tUqdeAUm3jbX",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\n\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n\ndef read_elevation_data(file_path, neighborhood_size=3):\n    dataset = gdal.Open(file_path)\n    if dataset is None:\n        print(\"Error: Could not open the file.\")\n        return None\n\t\n    result_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\n    result_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n    \n    band = dataset.GetRasterBand(1)\n    elevation_data = band.ReadAsArray()\n\n    # Get geotransform information\n    geotransform = dataset.GetGeoTransform()\n    min_lon, pixel_size_x, _, max_lat, _, pixel_size_y = geotransform\n\n    # Calculate raster size\n    raster_width = dataset.RasterXSize\n    raster_height = dataset.RasterYSize\n\n    # Generate latitude and longitude arrays\n    lats = np.arange(max_lat, max_lat - pixel_size_y * raster_height, -pixel_size_y)\n    lons = np.arange(min_lon, min_lon + pixel_size_x * raster_width, pixel_size_x)\n\n    # Create meshgrid of latitude and longitude\n    lon_grid, lat_grid = np.meshgrid(lons, lats)\n\n    # Flatten the data and the lat/lon grids\n    elevation_data_flat = elevation_data.flatten()\n    lat_grid_flat = lat_grid.flatten()\n    lon_grid_flat = lon_grid.flatten()\n\n    # Create a DataFrame to store the data\n    df = pd.DataFrame({\n      'Latitude': lat_grid_flat,\n      'Longitude': lon_grid_flat,\n      'Elevation': elevation_data_flat,\n    })\n    \n    df.to_csv(result_dem_csv_path)\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n\n    for index, row in iterrows(df):\n      # Access individual row elements using row['column_name']\n      # Convert latitude and longitude to pixel indices\n      x, y = lat_lon_to_pixel(row['Latitude'], row['Longitude'], geotransform)\n\n      # Read a small neighborhood of elevation data around the selected point\n      small_elevation_data = band.ReadAsArray(x - neighborhood_size // 2, y - neighborhood_size // 2, neighborhood_size, neighborhood_size)\n\n      # Calculate slope and aspect\n      slope_data, aspect_data = calculate_slope_aspect(small_elevation_data, pixel_size_x, pixel_size_y)\n\n      # Calculate curvature\n      curvature_data = calculate_curvature(small_elevation_data, pixel_size_x, pixel_size_y)\n      northness_data = np.abs(np.sin(np.radians(aspect_data)))\n      eastness_data = np.abs(np.cos(np.radians(aspect_data)))\n      \n\n      # Append a row to the DataFrame\n      data_row = {\n          'lat': lat,\n          'lon': lon,\n          'elevation': small_elevation_data[neighborhood_size // 2, neighborhood_size // 2],\n          'slope': slope_data[neighborhood_size // 2, neighborhood_size // 2],\n          'aspect': aspect_data[neighborhood_size // 2, neighborhood_size // 2],\n          'curvature': curvature_data[neighborhood_size // 2, neighborhood_size // 2],\n          'northness': northness_data[neighborhood_size // 2, neighborhood_size // 2],\n          'eastness': eastness_data[neighborhood_size // 2, neighborhood_size // 2]\n      }\n      all_df = all_df.append(data_row, ignore_index=True)\n\n\tall_df.to_csv(result_dem_feature_csv_path)\n\treturn all_df\n\n\n\n# Usage example:\n\nfinal_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n\n#clim_data = pd.read_csv(result_dem_feature_csv_path)\n\n# Apply read_elevation_data function to calculate elevation, slope, aspect, and curvature\n#elevation_data = clim_data.apply(lambda row: read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\", row['lat'], row['lon']), axis=1, result_type='expand')\n\n# Merge elevation data with the original DataFrame\n#final_testing_df = pd.concat([clim_data, elevation_data], axis=1)\n\n# Save the updated DataFrame to a new CSV file\n#final_testing_df.to_csv('final_testing.csv', index=False)\n\n# if not os.path.exists(result_dem_csv_path):\n#     elevation_df = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n#     print(elevation_df)\n#     elevation_df.to_csv(result_dem_csv_path)\n#     data = {\n#         'Latitude': [],\n#         'Longitude': [],\n#         'Elevation': [],\n#         'Slope': [],\n#         'Aspect': [],\n#       \t'Curvature': [],\n#     }\n#     new_df = pd.DataFrame(data)\n#     for index, row in elevation_df.iterrows():\n#         latitude = row['Latitude']  # Replace 'Latitude' with the actual name of your latitude column\n#         longitude = row['Longitude']  # Replace 'Longitude' with the actual name of your longitude column\n#         elevation, slope, aspect, curvature = get_elevation_slope_aspect_curvature(elevation_df, latitude, longitude)\n#         new_row = {\n#             'Latitude': latitude,\n#             'Longitude': longitude,\n#             'Elevation': elevation,\n#             'Slope': slope,\n#             'Aspect': aspect,\n#             'Curvature': curvature,\n#         }\n\n#         new_df = new_df.append(new_row, ignore_index=True)\n        \n#     new_df.to_csv(result_dem_feature_csv_path)\n# else:\n# \tprint(\"dem_template.csv exists. Skipping...\")\n    \n\n\n# # Get elevation, slope, aspect, and curvature based on the given lat and lon\n# latitude_to_find = 34.5  # Replace with the desired latitude\n# longitude_to_find = -120.5  # Replace with the desired longitude\n\n# elevation, slope, aspect, curvature = get_elevation_slope_aspect_curvature(elevation_df, latitude_to_find,\n#                                                                            longitude_to_find)\n\n# print(\"Latitude:\", latitude_to_find)\n# print(\"Longitude:\", longitude_to_find)\n# print(\"Elevation:\", elevation)\n# print(\"Slope:\", slope)\n# print(\"Aspect:\", aspect)\n# print(\"Curvature:\", curvature)\n#convert_the_original_dem_to_template_spatial_extent()\n",
  "history_output" : "  File \"/home/chetana/gw-workspace/tUqdeAUm3jbX/western_us_dem.py\", line 110\n    all_df.to_csv(result_dem_feature_csv_path)\nTabError: inconsistent use of tabs and spaces in indentation\n",
  "history_begin_time" : 1690252562033,
  "history_end_time" : 1690252562089,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "6TlJlkLRlWkO",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\n\n\ndef lat_lon_to_pixel(lat, lon, geotransform):\n    x = int((lon - geotransform[0]) / geotransform[1])\n    y = int((lat - geotransform[3]) / geotransform[5])\n    return x, y\n\n\ndef calculate_slope_aspect(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n\ndef read_elevation_data(file_path, neighborhood_size=3):\n    dataset = gdal.Open(file_path)\n    if dataset is None:\n        print(\"Error: Could not open the file.\")\n        return None\n\t\n    result_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\n\tresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\n    \n    band = dataset.GetRasterBand(1)\n    elevation_data = band.ReadAsArray()\n\n    # Get geotransform information\n    geotransform = dataset.GetGeoTransform()\n    min_lon, pixel_size_x, _, max_lat, _, pixel_size_y = geotransform\n\n    # Calculate raster size\n    raster_width = dataset.RasterXSize\n    raster_height = dataset.RasterYSize\n\n    # Generate latitude and longitude arrays\n    lats = np.arange(max_lat, max_lat - pixel_size_y * raster_height, -pixel_size_y)\n    lons = np.arange(min_lon, min_lon + pixel_size_x * raster_width, pixel_size_x)\n\n    # Create meshgrid of latitude and longitude\n    lon_grid, lat_grid = np.meshgrid(lons, lats)\n\n    # Flatten the data and the lat/lon grids\n    elevation_data_flat = elevation_data.flatten()\n    lat_grid_flat = lat_grid.flatten()\n    lon_grid_flat = lon_grid.flatten()\n\n    # Create a DataFrame to store the data\n    df = pd.DataFrame({\n        'Latitude': lat_grid_flat,\n        'Longitude': lon_grid_flat,\n        'Elevation': elevation_data_flat,\n    })\n    \n    df.to_csv(result_dem_csv_path)\n    \n    # Create an empty DataFrame with column names\n    columns = ['lat', 'lon', 'elevation', 'slope', 'aspect', 'curvature', 'northness', 'eastness']\n    all_df = pd.DataFrame(columns=columns)\n\n    for index, row in iterrows(df):\n      # Access individual row elements using row['column_name']\n      # Convert latitude and longitude to pixel indices\n      x, y = lat_lon_to_pixel(row['Latitude'], row['Longitude'], geotransform)\n\n      # Read a small neighborhood of elevation data around the selected point\n      small_elevation_data = band.ReadAsArray(x - neighborhood_size // 2, y - neighborhood_size // 2, neighborhood_size, neighborhood_size)\n\n      # Calculate slope and aspect\n      slope_data, aspect_data = calculate_slope_aspect(small_elevation_data, pixel_size_x, pixel_size_y)\n\n      # Calculate curvature\n      curvature_data = calculate_curvature(small_elevation_data, pixel_size_x, pixel_size_y)\n      northness_data = np.abs(np.sin(np.radians(aspect_data)))\n      eastness_data = np.abs(np.cos(np.radians(aspect_data)))\n      \n\n      # Append a row to the DataFrame\n      data_row = {\n          'lat': lat,\n          'lon': lon,\n          'elevation': small_elevation_data[neighborhood_size // 2, neighborhood_size // 2],\n          'slope': slope_data[neighborhood_size // 2, neighborhood_size // 2],\n          'aspect': aspect_data[neighborhood_size // 2, neighborhood_size // 2],\n          'curvature': curvature_data[neighborhood_size // 2, neighborhood_size // 2],\n          'northness': northness_data[neighborhood_size // 2, neighborhood_size // 2],\n          'eastness': eastness_data[neighborhood_size // 2, neighborhood_size // 2]\n      }\n      all_df = all_df.append(data_row, ignore_index=True)\n\n\tall_df.to_csv(result_dem_feature_csv_path)\n\treturn all_df\n\n\n\n# Usage example:\n\nfinal_dem_all_cols = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n\n#clim_data = pd.read_csv(result_dem_feature_csv_path)\n\n# Apply read_elevation_data function to calculate elevation, slope, aspect, and curvature\n#elevation_data = clim_data.apply(lambda row: read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\", row['lat'], row['lon']), axis=1, result_type='expand')\n\n# Merge elevation data with the original DataFrame\n#final_testing_df = pd.concat([clim_data, elevation_data], axis=1)\n\n# Save the updated DataFrame to a new CSV file\n#final_testing_df.to_csv('final_testing.csv', index=False)\n\n# if not os.path.exists(result_dem_csv_path):\n#     elevation_df = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n#     print(elevation_df)\n#     elevation_df.to_csv(result_dem_csv_path)\n#     data = {\n#         'Latitude': [],\n#         'Longitude': [],\n#         'Elevation': [],\n#         'Slope': [],\n#         'Aspect': [],\n#       \t'Curvature': [],\n#     }\n#     new_df = pd.DataFrame(data)\n#     for index, row in elevation_df.iterrows():\n#         latitude = row['Latitude']  # Replace 'Latitude' with the actual name of your latitude column\n#         longitude = row['Longitude']  # Replace 'Longitude' with the actual name of your longitude column\n#         elevation, slope, aspect, curvature = get_elevation_slope_aspect_curvature(elevation_df, latitude, longitude)\n#         new_row = {\n#             'Latitude': latitude,\n#             'Longitude': longitude,\n#             'Elevation': elevation,\n#             'Slope': slope,\n#             'Aspect': aspect,\n#             'Curvature': curvature,\n#         }\n\n#         new_df = new_df.append(new_row, ignore_index=True)\n        \n#     new_df.to_csv(result_dem_feature_csv_path)\n# else:\n# \tprint(\"dem_template.csv exists. Skipping...\")\n    \n\n\n# # Get elevation, slope, aspect, and curvature based on the given lat and lon\n# latitude_to_find = 34.5  # Replace with the desired latitude\n# longitude_to_find = -120.5  # Replace with the desired longitude\n\n# elevation, slope, aspect, curvature = get_elevation_slope_aspect_curvature(elevation_df, latitude_to_find,\n#                                                                            longitude_to_find)\n\n# print(\"Latitude:\", latitude_to_find)\n# print(\"Longitude:\", longitude_to_find)\n# print(\"Elevation:\", elevation)\n# print(\"Slope:\", slope)\n# print(\"Aspect:\", aspect)\n# print(\"Curvature:\", curvature)\n#convert_the_original_dem_to_template_spatial_extent()\n",
  "history_output" : "  File \"/home/chetana/gw-workspace/6TlJlkLRlWkO/western_us_dem.py\", line 42\n    result_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\nTabError: inconsistent use of tabs and spaces in indentation\n",
  "history_begin_time" : 1690251790877,
  "history_end_time" : 1690251791956,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "VREpTCbMapHh",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport os\nimport rasterio\nfrom rasterio.warp import calculate_default_transform, reproject, Resampling\n\nimport numpy as np\n\n\ndef calculate_slope_aspect(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n\ndef read_elevation_data(file_path):\n    dataset = gdal.Open(file_path)\n    if dataset is None:\n        print(\"Error: Could not open the file.\")\n        return None\n\n    band = dataset.GetRasterBand(1)\n    elevation_data = band.ReadAsArray()\n\n    # Get geotransform information\n    geotransform = dataset.GetGeoTransform()\n    min_lon, pixel_size_x, _, max_lat, _, pixel_size_y = geotransform\n\n    # Calculate raster size\n    raster_width = dataset.RasterXSize\n    raster_height = dataset.RasterYSize\n\n    # Generate latitude and longitude arrays\n    lats = np.arange(max_lat, max_lat - pixel_size_y * raster_height, -pixel_size_y)\n    lons = np.arange(min_lon, min_lon + pixel_size_x * raster_width, pixel_size_x)\n\n    # Create meshgrid of latitude and longitude\n    lon_grid, lat_grid = np.meshgrid(lons, lats)\n\n    # Flatten the data and the lat/lon grids\n    elevation_data_flat = elevation_data.flatten()\n    lat_grid_flat = lat_grid.flatten()\n    lon_grid_flat = lon_grid.flatten()\n\n    # Create a DataFrame to store the data\n    df = pd.DataFrame({\n        'Latitude': lat_grid_flat,\n        'Longitude': lon_grid_flat,\n        'Elevation': elevation_data_flat,\n    })\n\n    return df\n\n\ndef get_elevation_slope_aspect_curvature(df, lat, lon):\n    # Find the closest latitude and longitude in the DataFrame\n    lat_diff = np.abs(df['Latitude'] - lat)\n    lon_diff = np.abs(df['Longitude'] - lon)\n    closest_index = np.argmin(lat_diff + lon_diff)\n\n    # Extract the elevation, slope, aspect, and curvature at the closest location\n    elevation = df['Elevation'][closest_index]\n    slope = df['Slope'][closest_index]\n    aspect = df['Aspect'][closest_index]\n    curvature = df['Curvature'][closest_index]\n\n    return elevation, slope, aspect, curvature\n\n\n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\nif not os.path.exists(result_dem_csv_path):\n    elevation_df = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n    print(elevation_df)\n    elevation_df.to_csv(result_dem_csv_path)\n    data = {\n        'Latitude': [],\n        'Longitude': [],\n        'Elevation': [],\n        'Slope': [],\n        'Aspect': [],\n      \t'Curvature': [],\n    }\n    new_df = pd.DataFrame(data)\n    for index, row in elevation_df.iterrows():\n        latitude = row['Latitude']  # Replace 'Latitude' with the actual name of your latitude column\n        longitude = row['Longitude']  # Replace 'Longitude' with the actual name of your longitude column\n        elevation, slope, aspect, curvature = get_elevation_slope_aspect_curvature(elevation_df, latitude, longitude)\n        new_row = {\n            'Latitude': latitude,\n            'Longitude': longitude,\n            'Elevation': elevation,\n            'Slope': slope,\n            'Aspect': aspect,\n            'Curvature': curvature,\n        }\n\n        new_df = new_df.append(new_row, ignore_index=True)\n        \n    new_df.to_csv(result_dem_feature_csv_path)\nelse:\n\tprint(\"dem_template.csv exists. Skipping...\")\n    \n\n\n# # Get elevation, slope, aspect, and curvature based on the given lat and lon\n# latitude_to_find = 34.5  # Replace with the desired latitude\n# longitude_to_find = -120.5  # Replace with the desired longitude\n\n# elevation, slope, aspect, curvature = get_elevation_slope_aspect_curvature(elevation_df, latitude_to_find,\n#                                                                            longitude_to_find)\n\n# print(\"Latitude:\", latitude_to_find)\n# print(\"Longitude:\", longitude_to_find)\n# print(\"Elevation:\", elevation)\n# print(\"Slope:\", slope)\n# print(\"Aspect:\", aspect)\n# print(\"Curvature:\", curvature)\n#convert_the_original_dem_to_template_spatial_extent()\n",
  "history_output" : "Variable name: rmax\n\nStream closed",
  "history_begin_time" : 1690185888276,
  "history_end_time" : 1690186670286,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "2gGWi5SOAnsg",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport os\nimport rasterio\nfrom rasterio.warp import calculate_default_transform, reproject, Resampling\n\nimport numpy as np\n\n\ndef calculate_slope_aspect(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n\ndef read_elevation_data(file_path):\n    dataset = gdal.Open(file_path)\n    if dataset is None:\n        print(\"Error: Could not open the file.\")\n        return None\n\n    band = dataset.GetRasterBand(1)\n    elevation_data = band.ReadAsArray()\n\n    # Get geotransform information\n    geotransform = dataset.GetGeoTransform()\n    min_lon, pixel_size_x, _, max_lat, _, pixel_size_y = geotransform\n\n    # Calculate raster size\n    raster_width = dataset.RasterXSize\n    raster_height = dataset.RasterYSize\n\n    # Generate latitude and longitude arrays\n    lats = np.arange(max_lat, max_lat - pixel_size_y * raster_height, -pixel_size_y)\n    lons = np.arange(min_lon, min_lon + pixel_size_x * raster_width, pixel_size_x)\n\n    # Create meshgrid of latitude and longitude\n    lon_grid, lat_grid = np.meshgrid(lons, lats)\n\n    # Flatten the data and the lat/lon grids\n    elevation_data_flat = elevation_data.flatten()\n    lat_grid_flat = lat_grid.flatten()\n    lon_grid_flat = lon_grid.flatten()\n\n    # Create a DataFrame to store the data\n    df = pd.DataFrame({\n        'Latitude': lat_grid_flat,\n        'Longitude': lon_grid_flat,\n        'Elevation': elevation_data_flat,\n    })\n\n    return df\n\n\ndef get_elevation_slope_aspect_curvature(df, lat, lon):\n    # Find the closest latitude and longitude in the DataFrame\n    lat_diff = np.abs(df['Latitude'] - lat)\n    lon_diff = np.abs(df['Longitude'] - lon)\n    closest_index = np.argmin(lat_diff + lon_diff)\n\n    # Extract the elevation, slope, aspect, and curvature at the closest location\n    elevation = df['Elevation'][closest_index]\n    slope = df['Slope'][closest_index]\n    aspect = df['Aspect'][closest_index]\n    curvature = df['Curvature'][closest_index]\n\n    return elevation, slope, aspect, curvature\n\n\n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nresult_dem_feature_csv_path = \"/home/chetana/gridmet_test_run/dem_all.csv\"\nif not os.path.exists(result_dem_csv_path):\n    elevation_df = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n    print(elevation_df)\n    elevation_df.to_csv(result_dem_csv_path)\n    data = {\n        'Latitude': [],\n        'Longitude': [],\n        'Elevation': [],\n        'Slope': [],\n        'Aspect': [],\n      \t'Curvature': [],\n    }\n    new_df = pd.DataFrame(data)\n    for index, row in elevation_df.iterrows():\n        latitude = row['Latitude']  # Replace 'Latitude' with the actual name of your latitude column\n        longitude = row['Longitude']  # Replace 'Longitude' with the actual name of your longitude column\n\t\televation, slope, aspect, curvature = get_elevation_slope_aspect_curvature(elevation_df, latitude, longitude)\n        new_row = {\n            'Latitude': latitude,\n            'Longitude': longitude,\n            'Elevation': elevation,\n            'Slope': slope,\n            'Aspect': aspect,\n            'Curvature': curvature,\n        }\n\n        new_df = new_df.append(new_row, ignore_index=True)\n        \n    new_df.to_csv(result_dem_feature_csv_path)\nelse:\n\tprint(\"dem_template.csv exists. Skipping...\")\n    \n\n\n# # Get elevation, slope, aspect, and curvature based on the given lat and lon\n# latitude_to_find = 34.5  # Replace with the desired latitude\n# longitude_to_find = -120.5  # Replace with the desired longitude\n\n# elevation, slope, aspect, curvature = get_elevation_slope_aspect_curvature(elevation_df, latitude_to_find,\n#                                                                            longitude_to_find)\n\n# print(\"Latitude:\", latitude_to_find)\n# print(\"Longitude:\", longitude_to_find)\n# print(\"Elevation:\", elevation)\n# print(\"Slope:\", slope)\n# print(\"Aspect:\", aspect)\n# print(\"Curvature:\", curvature)\n#convert_the_original_dem_to_template_spatial_extent()\n",
  "history_output" : "  File \"/home/chetana/gw-workspace/2gGWi5SOAnsg/western_us_dem.py\", line 107\n    elevation, slope, aspect, curvature = get_elevation_slope_aspect_curvature(elevation_df, latitude, longitude)\nTabError: inconsistent use of tabs and spaces in indentation\n",
  "history_begin_time" : 1690185863453,
  "history_end_time" : 1690185864920,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "FPLX6u9Dguzp",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport os\nimport rasterio\nfrom rasterio.warp import calculate_default_transform, reproject, Resampling\n\nimport numpy as np\n\n\ndef calculate_slope_aspect(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n\ndef read_elevation_data(file_path):\n    dataset = gdal.Open(file_path)\n    if dataset is None:\n        print(\"Error: Could not open the file.\")\n        return None\n\n    band = dataset.GetRasterBand(1)\n    elevation_data = band.ReadAsArray()\n\n    # Get geotransform information\n    geotransform = dataset.GetGeoTransform()\n    min_lon, pixel_size_x, _, max_lat, _, pixel_size_y = geotransform\n\n    # Calculate raster size\n    raster_width = dataset.RasterXSize\n    raster_height = dataset.RasterYSize\n\n    # Generate latitude and longitude arrays\n    lats = np.arange(max_lat, max_lat - pixel_size_y * raster_height, -pixel_size_y)\n    lons = np.arange(min_lon, min_lon + pixel_size_x * raster_width, pixel_size_x)\n\n    # Create meshgrid of latitude and longitude\n    lon_grid, lat_grid = np.meshgrid(lons, lats)\n\n    # Flatten the data and the lat/lon grids\n    elevation_data_flat = elevation_data.flatten()\n    lat_grid_flat = lat_grid.flatten()\n    lon_grid_flat = lon_grid.flatten()\n\n    # Create a DataFrame to store the data\n    df = pd.DataFrame({\n        'Latitude': lat_grid_flat,\n        'Longitude': lon_grid_flat,\n        'Elevation': elevation_data_flat,\n    })\n\n    return df\n\n\ndef get_elevation_slope_aspect_curvature(df, lat, lon):\n    # Find the closest latitude and longitude in the DataFrame\n    lat_diff = np.abs(df['Latitude'] - lat)\n    lon_diff = np.abs(df['Longitude'] - lon)\n    closest_index = np.argmin(lat_diff + lon_diff)\n\n    # Extract the elevation, slope, aspect, and curvature at the closest location\n    elevation = df['Elevation'][closest_index]\n    slope = df['Slope'][closest_index]\n    aspect = df['Aspect'][closest_index]\n    curvature = df['Curvature'][closest_index]\n\n    return elevation, slope, aspect, curvature\n\n\n# Usage example:\nresult_dem_csv_path = \"/home/chetana/gridmet_test_run/dem_template.csv\"\nif not os.path.exists(result_dem_csv_path):\n    elevation_df = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n    print(elevation_df)\n    elevation_df.to_csv(result_dem_csv_path)\nelse:\n\tprint(\"dem_template.csv exists. Skipping...\")\n\n# # Get elevation, slope, aspect, and curvature based on the given lat and lon\n# latitude_to_find = 34.5  # Replace with the desired latitude\n# longitude_to_find = -120.5  # Replace with the desired longitude\n\n# elevation, slope, aspect, curvature = get_elevation_slope_aspect_curvature(elevation_df, latitude_to_find,\n#                                                                            longitude_to_find)\n\n# print(\"Latitude:\", latitude_to_find)\n# print(\"Longitude:\", longitude_to_find)\n# print(\"Elevation:\", elevation)\n# print(\"Slope:\", slope)\n# print(\"Aspect:\", aspect)\n# print(\"Curvature:\", curvature)\n#convert_the_original_dem_to_template_spatial_extent()\n",
  "history_output" : "dem_template.csv exists. Skipping...\n",
  "history_begin_time" : 1690171073196,
  "history_end_time" : 1690171073918,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "lUjM4NIxc5tv",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\nimport os\nimport rasterio\nfrom rasterio.warp import calculate_default_transform, reproject, Resampling\n\nimport numpy as np\n\n\ndef calculate_slope_aspect(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n\ndef read_elevation_data(file_path):\n    dataset = gdal.Open(file_path)\n    if dataset is None:\n        print(\"Error: Could not open the file.\")\n        return None\n\n    band = dataset.GetRasterBand(1)\n    elevation_data = band.ReadAsArray()\n\n    # Get geotransform information\n    geotransform = dataset.GetGeoTransform()\n    min_lon, pixel_size_x, _, max_lat, _, pixel_size_y = geotransform\n\n    # Calculate raster size\n    raster_width = dataset.RasterXSize\n    raster_height = dataset.RasterYSize\n\n    # Generate latitude and longitude arrays\n    lats = np.arange(max_lat, max_lat - pixel_size_y * raster_height, -pixel_size_y)\n    lons = np.arange(min_lon, min_lon + pixel_size_x * raster_width, pixel_size_x)\n\n    # Create meshgrid of latitude and longitude\n    lon_grid, lat_grid = np.meshgrid(lons, lats)\n\n    # Flatten the data and the lat/lon grids\n    elevation_data_flat = elevation_data.flatten()\n    lat_grid_flat = lat_grid.flatten()\n    lon_grid_flat = lon_grid.flatten()\n\n    # Create a DataFrame to store the data\n    df = pd.DataFrame({\n        'Latitude': lat_grid_flat,\n        'Longitude': lon_grid_flat,\n        'Elevation': elevation_data_flat,\n    })\n\n    return df\n\n\ndef get_elevation_slope_aspect_curvature(df, lat, lon):\n    # Find the closest latitude and longitude in the DataFrame\n    lat_diff = np.abs(df['Latitude'] - lat)\n    lon_diff = np.abs(df['Longitude'] - lon)\n    closest_index = np.argmin(lat_diff + lon_diff)\n\n    # Extract the elevation, slope, aspect, and curvature at the closest location\n    elevation = df['Elevation'][closest_index]\n    slope = df['Slope'][closest_index]\n    aspect = df['Aspect'][closest_index]\n    curvature = df['Curvature'][closest_index]\n\n    return elevation, slope, aspect, curvature\n\n\n# Usage example:\nif not os.path.exists(file_path):\n    elevation_df = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n    print(elevation_df)\n    elevation_df.to_csv(\"/home/chetana/gridmet_test_run/dem_template.csv\")\nelse:\n\tprint(\"dem_template.csv exists. Skipping...\")\n\n# # Get elevation, slope, aspect, and curvature based on the given lat and lon\n# latitude_to_find = 34.5  # Replace with the desired latitude\n# longitude_to_find = -120.5  # Replace with the desired longitude\n\n# elevation, slope, aspect, curvature = get_elevation_slope_aspect_curvature(elevation_df, latitude_to_find,\n#                                                                            longitude_to_find)\n\n# print(\"Latitude:\", latitude_to_find)\n# print(\"Longitude:\", longitude_to_find)\n# print(\"Elevation:\", elevation)\n# print(\"Slope:\", slope)\n# print(\"Aspect:\", aspect)\n# print(\"Curvature:\", curvature)\n#convert_the_original_dem_to_template_spatial_extent()\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/lUjM4NIxc5tv/western_us_dem.py\", line 89, in <module>\n    if not os.path.exists(file_path):\nNameError: name 'file_path' is not defined\n",
  "history_begin_time" : 1690171048665,
  "history_end_time" : 1690171049412,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "jCgI7AVuqVVg",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\n\nimport rasterio\nfrom rasterio.warp import calculate_default_transform, reproject, Resampling\n\nimport numpy as np\n\n\ndef calculate_slope_aspect(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n\ndef read_elevation_data(file_path):\n    dataset = gdal.Open(file_path)\n    if dataset is None:\n        print(\"Error: Could not open the file.\")\n        return None\n\n    band = dataset.GetRasterBand(1)\n    elevation_data = band.ReadAsArray()\n\n    # Get geotransform information\n    geotransform = dataset.GetGeoTransform()\n    min_lon, pixel_size_x, _, max_lat, _, pixel_size_y = geotransform\n\n    # Calculate raster size\n    raster_width = dataset.RasterXSize\n    raster_height = dataset.RasterYSize\n\n    # Generate latitude and longitude arrays\n    lats = np.arange(max_lat, max_lat - pixel_size_y * raster_height, -pixel_size_y)\n    lons = np.arange(min_lon, min_lon + pixel_size_x * raster_width, pixel_size_x)\n\n    # Create meshgrid of latitude and longitude\n    lon_grid, lat_grid = np.meshgrid(lons, lats)\n\n    # Flatten the data and the lat/lon grids\n    elevation_data_flat = elevation_data.flatten()\n    lat_grid_flat = lat_grid.flatten()\n    lon_grid_flat = lon_grid.flatten()\n\n    # Create a DataFrame to store the data\n    df = pd.DataFrame({\n        'Latitude': lat_grid_flat,\n        'Longitude': lon_grid_flat,\n        'Elevation': elevation_data_flat,\n    })\n\n    return df\n\n\ndef get_elevation_slope_aspect_curvature(df, lat, lon):\n    # Find the closest latitude and longitude in the DataFrame\n    lat_diff = np.abs(df['Latitude'] - lat)\n    lon_diff = np.abs(df['Longitude'] - lon)\n    closest_index = np.argmin(lat_diff + lon_diff)\n\n    # Extract the elevation, slope, aspect, and curvature at the closest location\n    elevation = df['Elevation'][closest_index]\n    slope = df['Slope'][closest_index]\n    aspect = df['Aspect'][closest_index]\n    curvature = df['Curvature'][closest_index]\n\n    return elevation, slope, aspect, curvature\n\n\n# Usage example:\nif not os.path.exists(file_path):\n    elevation_df = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n    print(elevation_df)\n    elevation_df.to_csv(\"/home/chetana/gridmet_test_run/dem_template.csv\")\nelse:\n\tprint(\"dem_template.csv exists. Skipping...\")\n\n# # Get elevation, slope, aspect, and curvature based on the given lat and lon\n# latitude_to_find = 34.5  # Replace with the desired latitude\n# longitude_to_find = -120.5  # Replace with the desired longitude\n\n# elevation, slope, aspect, curvature = get_elevation_slope_aspect_curvature(elevation_df, latitude_to_find,\n#                                                                            longitude_to_find)\n\n# print(\"Latitude:\", latitude_to_find)\n# print(\"Longitude:\", longitude_to_find)\n# print(\"Elevation:\", elevation)\n# print(\"Slope:\", slope)\n# print(\"Aspect:\", aspect)\n# print(\"Curvature:\", curvature)\n#convert_the_original_dem_to_template_spatial_extent()\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/jCgI7AVuqVVg/western_us_dem.py\", line 89, in <module>\n    if not os.path.exists(file_path):\nNameError: name 'os' is not defined\n",
  "history_begin_time" : 1690171039385,
  "history_end_time" : 1690171040117,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "ZoRngiEEpmN3",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\n\nimport rasterio\nfrom rasterio.warp import calculate_default_transform, reproject, Resampling\n\nimport numpy as np\n\n\ndef calculate_slope_aspect(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n\ndef read_elevation_data(file_path):\n    dataset = gdal.Open(file_path)\n    if dataset is None:\n        print(\"Error: Could not open the file.\")\n        return None\n\n    band = dataset.GetRasterBand(1)\n    elevation_data = band.ReadAsArray()\n\n    # Get geotransform information\n    geotransform = dataset.GetGeoTransform()\n    min_lon, pixel_size_x, _, max_lat, _, pixel_size_y = geotransform\n\n    # Calculate raster size\n    raster_width = dataset.RasterXSize\n    raster_height = dataset.RasterYSize\n\n    # Generate latitude and longitude arrays\n    lats = np.arange(max_lat, max_lat - pixel_size_y * raster_height, -pixel_size_y)\n    lons = np.arange(min_lon, min_lon + pixel_size_x * raster_width, pixel_size_x)\n\n    # Create meshgrid of latitude and longitude\n    lon_grid, lat_grid = np.meshgrid(lons, lats)\n\n    # Flatten the data and the lat/lon grids\n    elevation_data_flat = elevation_data.flatten()\n    lat_grid_flat = lat_grid.flatten()\n    lon_grid_flat = lon_grid.flatten()\n\n    # Create a DataFrame to store the data\n    df = pd.DataFrame({\n        'Latitude': lat_grid_flat,\n        'Longitude': lon_grid_flat,\n        'Elevation': elevation_data_flat,\n    })\n\n    return df\n\n\ndef get_elevation_slope_aspect_curvature(df, lat, lon):\n    # Find the closest latitude and longitude in the DataFrame\n    lat_diff = np.abs(df['Latitude'] - lat)\n    lon_diff = np.abs(df['Longitude'] - lon)\n    closest_index = np.argmin(lat_diff + lon_diff)\n\n    # Extract the elevation, slope, aspect, and curvature at the closest location\n    elevation = df['Elevation'][closest_index]\n    slope = df['Slope'][closest_index]\n    aspect = df['Aspect'][closest_index]\n    curvature = df['Curvature'][closest_index]\n\n    return elevation, slope, aspect, curvature\n\n\n# Usage example:\nelevation_df = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\nprint(elevation_df)\nelevation_df.to_csv(\"/home/chetana/gridmet_test_run/dem_template.csv\")\n\n# # Get elevation, slope, aspect, and curvature based on the given lat and lon\n# latitude_to_find = 34.5  # Replace with the desired latitude\n# longitude_to_find = -120.5  # Replace with the desired longitude\n\n# elevation, slope, aspect, curvature = get_elevation_slope_aspect_curvature(elevation_df, latitude_to_find,\n#                                                                            longitude_to_find)\n\n# print(\"Latitude:\", latitude_to_find)\n# print(\"Longitude:\", longitude_to_find)\n# print(\"Elevation:\", elevation)\n# print(\"Slope:\", slope)\n# print(\"Aspect:\", aspect)\n# print(\"Curvature:\", curvature)\n#convert_the_original_dem_to_template_spatial_extent()\n",
  "history_output" : "        Latitude  Longitude    Elevation\n0          49.00   -125.000    15.124211\n1          49.00   -124.964   136.762283\n2          49.00   -124.928   258.745087\n3          49.00   -124.892   387.150482\n4          49.00   -124.856   213.531708\n...          ...        ...          ...\n462199     72.94   -100.196  1687.865112\n462200     72.94   -100.160  1154.707764\n462201     72.94   -100.124   926.116699\n462202     72.94   -100.088  1275.832886\n462203     72.94   -100.052  1350.978394\n[462204 rows x 3 columns]\n",
  "history_begin_time" : 1690170556858,
  "history_end_time" : 1690170559478,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "QodDZ1b6pDZQ",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\n\nimport rasterio\nfrom rasterio.warp import calculate_default_transform, reproject, Resampling\n\nimport numpy as np\n\n\ndef calculate_slope_aspect(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n\ndef read_elevation_data(file_path):\n    dataset = gdal.Open(file_path)\n    if dataset is None:\n        print(\"Error: Could not open the file.\")\n        return None\n\n    band = dataset.GetRasterBand(1)\n    elevation_data = band.ReadAsArray()\n\n    # Get geotransform information\n    geotransform = dataset.GetGeoTransform()\n    min_lon, pixel_size_x, _, max_lat, _, pixel_size_y = geotransform\n\n    # Calculate raster size\n    raster_width = dataset.RasterXSize\n    raster_height = dataset.RasterYSize\n\n    # Generate latitude and longitude arrays\n    lats = np.arange(max_lat, max_lat - pixel_size_y * raster_height, -pixel_size_y)\n    lons = np.arange(min_lon, min_lon + pixel_size_x * raster_width, pixel_size_x)\n\n    # Create meshgrid of latitude and longitude\n    lon_grid, lat_grid = np.meshgrid(lons, lats)\n\n    # Flatten the data and the lat/lon grids\n    elevation_data_flat = elevation_data.flatten()\n    lat_grid_flat = lat_grid.flatten()\n    lon_grid_flat = lon_grid.flatten()\n\n    # Create a DataFrame to store the data\n    df = pd.DataFrame({\n        'Latitude': lat_grid_flat,\n        'Longitude': lon_grid_flat,\n        'Elevation': elevation_data_flat,\n    })\n\n    return df\n\n\ndef get_elevation_slope_aspect_curvature(df, lat, lon):\n    # Find the closest latitude and longitude in the DataFrame\n    lat_diff = np.abs(df['Latitude'] - lat)\n    lon_diff = np.abs(df['Longitude'] - lon)\n    closest_index = np.argmin(lat_diff + lon_diff)\n\n    # Extract the elevation, slope, aspect, and curvature at the closest location\n    elevation = df['Elevation'][closest_index]\n    slope = df['Slope'][closest_index]\n    aspect = df['Aspect'][closest_index]\n    curvature = df['Curvature'][closest_index]\n\n    return elevation, slope, aspect, curvature\n\n  \n# Usage example:\nelevation_df = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\nprint(elevation_df)\n\n# # Get elevation, slope, aspect, and curvature based on the given lat and lon\n# latitude_to_find = 34.5  # Replace with the desired latitude\n# longitude_to_find = -120.5  # Replace with the desired longitude\n\n# elevation, slope, aspect, curvature = get_elevation_slope_aspect_curvature(elevation_df, latitude_to_find,\n#                                                                            longitude_to_find)\n\n# print(\"Latitude:\", latitude_to_find)\n# print(\"Longitude:\", longitude_to_find)\n# print(\"Elevation:\", elevation)\n# print(\"Slope:\", slope)\n# print(\"Aspect:\", aspect)\n# print(\"Curvature:\", curvature)\n#convert_the_original_dem_to_template_spatial_extent()\n",
  "history_output" : "        Latitude  Longitude    Elevation\n0          49.00   -125.000    15.124211\n1          49.00   -124.964   136.762283\n2          49.00   -124.928   258.745087\n3          49.00   -124.892   387.150482\n4          49.00   -124.856   213.531708\n...          ...        ...          ...\n462199     72.94   -100.196  1687.865112\n462200     72.94   -100.160  1154.707764\n462201     72.94   -100.124   926.116699\n462202     72.94   -100.088  1275.832886\n462203     72.94   -100.052  1350.978394\n[462204 rows x 3 columns]\n",
  "history_begin_time" : 1690169075437,
  "history_end_time" : 1690169076221,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "ce1Ty77qBdAe",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\n\nimport rasterio\nfrom rasterio.warp import calculate_default_transform, reproject, Resampling\n\nimport numpy as np\n\n\ndef calculate_slope_aspect(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n\ndef read_elevation_data(file_path):\n    dataset = gdal.Open(file_path)\n    if dataset is None:\n        print(\"Error: Could not open the file.\")\n        return None\n\n    band = dataset.GetRasterBand(1)\n    elevation_data = band.ReadAsArray()\n\n    # Get geotransform information\n    geotransform = dataset.GetGeoTransform()\n    min_lon, pixel_size_x, _, max_lat, _, pixel_size_y = geotransform\n\n    # Calculate raster size\n    raster_width = dataset.RasterXSize\n    raster_height = dataset.RasterYSize\n\n    # Generate latitude and longitude arrays\n    lats = np.arange(max_lat, max_lat - pixel_size_y * raster_height, -pixel_size_y)\n    lons = np.arange(min_lon, min_lon + pixel_size_x * raster_width, pixel_size_x)\n\n    # Create meshgrid of latitude and longitude\n    lon_grid, lat_grid = np.meshgrid(lons, lats)\n\n    # Flatten the data and the lat/lon grids\n    elevation_data_flat = elevation_data.flatten()\n    lat_grid_flat = lat_grid.flatten()\n    lon_grid_flat = lon_grid.flatten()\n\n    # Create a DataFrame to store the data\n    df = pd.DataFrame({\n        'Latitude': lat_grid_flat,\n        'Longitude': lon_grid_flat,\n        'Elevation': elevation_data_flat,\n    })\n\n    return df\n\n\ndef get_elevation_slope_aspect_curvature(df, lat, lon):\n    # Find the closest latitude and longitude in the DataFrame\n    lat_diff = np.abs(df['Latitude'] - lat)\n    lon_diff = np.abs(df['Longitude'] - lon)\n    closest_index = np.argmin(lat_diff + lon_diff)\n\n    # Extract the elevation, slope, aspect, and curvature at the closest location\n    elevation = df['Elevation'][closest_index]\n    slope = df['Slope'][closest_index]\n    aspect = df['Aspect'][closest_index]\n    curvature = df['Curvature'][closest_index]\n\n    return elevation, slope, aspect, curvature\n\n  \n# Usage example:\nelevation_df = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km_clipped.tif\")\n\n# # Get elevation, slope, aspect, and curvature based on the given lat and lon\n# latitude_to_find = 34.5  # Replace with the desired latitude\n# longitude_to_find = -120.5  # Replace with the desired longitude\n\n# elevation, slope, aspect, curvature = get_elevation_slope_aspect_curvature(elevation_df, latitude_to_find,\n#                                                                            longitude_to_find)\n\n# print(\"Latitude:\", latitude_to_find)\n# print(\"Longitude:\", longitude_to_find)\n# print(\"Elevation:\", elevation)\n# print(\"Slope:\", slope)\n# print(\"Aspect:\", aspect)\n# print(\"Curvature:\", curvature)\n#convert_the_original_dem_to_template_spatial_extent()\n",
  "history_output" : "",
  "history_begin_time" : 1690169014497,
  "history_end_time" : 1690169016614,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "QDiDyVo8JZNh",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\n\nimport rasterio\nfrom rasterio.warp import calculate_default_transform, reproject, Resampling\n\nimport numpy as np\n\n\ndef calculate_slope_aspect(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n\ndef read_elevation_data(file_path):\n    dataset = gdal.Open(file_path)\n    if dataset is None:\n        print(\"Error: Could not open the file.\")\n        return None\n\n    band = dataset.GetRasterBand(1)\n    elevation_data = band.ReadAsArray()\n\n    # Get geotransform information\n    geotransform = dataset.GetGeoTransform()\n    min_lon, pixel_size_x, _, max_lat, _, pixel_size_y = geotransform\n\n    # Calculate raster size\n    raster_width = dataset.RasterXSize\n    raster_height = dataset.RasterYSize\n\n    # Generate latitude and longitude arrays\n    lats = np.arange(max_lat, max_lat - pixel_size_y * raster_height, -pixel_size_y)\n    lons = np.arange(min_lon, min_lon + pixel_size_x * raster_width, pixel_size_x)\n\n    # Create meshgrid of latitude and longitude\n    lon_grid, lat_grid = np.meshgrid(lons, lats)\n\n    # Flatten the data and the lat/lon grids\n    elevation_data_flat = elevation_data.flatten()\n    lat_grid_flat = lat_grid.flatten()\n    lon_grid_flat = lon_grid.flatten()\n\n    # Create a DataFrame to store the data\n    df = pd.DataFrame({\n        'Latitude': lat_grid_flat,\n        'Longitude': lon_grid_flat,\n        'Elevation': elevation_data_flat,\n    })\n\n    return df\n\n\ndef get_elevation_slope_aspect_curvature(df, lat, lon):\n    # Find the closest latitude and longitude in the DataFrame\n    lat_diff = np.abs(df['Latitude'] - lat)\n    lon_diff = np.abs(df['Longitude'] - lon)\n    closest_index = np.argmin(lat_diff + lon_diff)\n\n    # Extract the elevation, slope, aspect, and curvature at the closest location\n    elevation = df['Elevation'][closest_index]\n    slope = df['Slope'][closest_index]\n    aspect = df['Aspect'][closest_index]\n    curvature = df['Curvature'][closest_index]\n\n    return elevation, slope, aspect, curvature\n\n\ndef convert_the_original_dem_to_template_spatial_extent():\n    # Define the spatial extent of the western U.S. (minx, miny, maxx, maxy)\n    minx, miny, maxx, maxy = -125, 25, -100, 49\n\n    # Define the resolution in degrees (4km is approximately 0.036 degrees)\n    resolution = 0.036\n\n    # Define the filename of the original DEM image to be clipped and resampled\n    original_dem_filename = \"/home/chetana/gridmet_test_run/output_4km.tif\"\n\n    # Define the filename of the template DEM image\n    template_dem_filename = \"/home/chetana/western_us_geotiff_template.tif\"\n\n    # Open the original DEM image with rasterio\n    with rasterio.open(original_dem_filename) as src:\n        # Get the CRS of the original DEM\n        src_crs = src.crs\n\n        # Calculate the window for the portion of the original DEM image that overlaps with the template\n        window = src.window(minx, miny, maxx, maxy)\n\n        # Read the data in the window\n        data = src.read(1, window=window)\n\n        # Calculate the transformation parameters to align the original DEM with the template DEM\n        transform, width, height = calculate_default_transform(\n            src_crs, 'EPSG:4326', window.width, window.height, *src.bounds)\n\n        # Create a destination array to store the resampled data\n        destination = np.zeros((height, width), dtype=src.dtypes[0])\n\n        # Reproject and resample the original DEM image to match the template DEM\n        reproject(\n            source=data,\n            destination=destination,\n            src_transform=src.transform,\n            src_crs=src_crs,\n            dst_transform=transform,\n            dst_crs='EPSG:4326',\n            resampling=Resampling.nearest,\n        )\n\n        # Create the output GeoTIFF with the clipped and resampled data\n        with rasterio.open(\n            \"clipped_resampled_dem.tif\",\n            'w',\n            driver='GTiff',\n            height=height,\n            width=width,\n            count=1,\n            dtype=src.dtypes[0],\n            crs='EPSG:4326',\n            transform=transform,\n        ) as dst:\n            # Write the clipped and resampled data to the raster\n            dst.write(destination, 1)\n\n  \n# Usage example:\n# elevation_df = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km.tif\")\n\n# # Get elevation, slope, aspect, and curvature based on the given lat and lon\n# latitude_to_find = 34.5  # Replace with the desired latitude\n# longitude_to_find = -120.5  # Replace with the desired longitude\n\n# elevation, slope, aspect, curvature = get_elevation_slope_aspect_curvature(elevation_df, latitude_to_find,\n#                                                                            longitude_to_find)\n\n# print(\"Latitude:\", latitude_to_find)\n# print(\"Longitude:\", longitude_to_find)\n# print(\"Elevation:\", elevation)\n# print(\"Slope:\", slope)\n# print(\"Aspect:\", aspect)\n# print(\"Curvature:\", curvature)\nconvert_the_original_dem_to_template_spatial_extent()\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/QDiDyVo8JZNh/western_us_dem.py\", line 162, in <module>\n    convert_the_original_dem_to_template_spatial_extent()\n  File \"/home/chetana/gw-workspace/QDiDyVo8JZNh/western_us_dem.py\", line 120, in convert_the_original_dem_to_template_spatial_extent\n    reproject(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/rasterio/env.py\", line 398, in wrapper\n    return f(*args, **kwds)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/rasterio/warp.py\", line 344, in reproject\n    _reproject(\n  File \"rasterio/_warp.pyx\", line 400, in rasterio._warp._reproject\n  File \"rasterio/_warp.pyx\", line 362, in rasterio._warp._reproject\nrasterio.errors.CRSError: Missing src_crs.\n",
  "history_begin_time" : 1690160673243,
  "history_end_time" : 1690160680081,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "aqFJQeJA68FY",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\n\nimport rasterio\nfrom rasterio.warp import calculate_default_transform, reproject, Resampling\n\nimport numpy as np\n\n\ndef calculate_slope_aspect(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n\ndef read_elevation_data(file_path):\n    dataset = gdal.Open(file_path)\n    if dataset is None:\n        print(\"Error: Could not open the file.\")\n        return None\n\n    band = dataset.GetRasterBand(1)\n    elevation_data = band.ReadAsArray()\n\n    # Get geotransform information\n    geotransform = dataset.GetGeoTransform()\n    min_lon, pixel_size_x, _, max_lat, _, pixel_size_y = geotransform\n\n    # Calculate raster size\n    raster_width = dataset.RasterXSize\n    raster_height = dataset.RasterYSize\n\n    # Generate latitude and longitude arrays\n    lats = np.arange(max_lat, max_lat - pixel_size_y * raster_height, -pixel_size_y)\n    lons = np.arange(min_lon, min_lon + pixel_size_x * raster_width, pixel_size_x)\n\n    # Create meshgrid of latitude and longitude\n    lon_grid, lat_grid = np.meshgrid(lons, lats)\n\n    # Flatten the data and the lat/lon grids\n    elevation_data_flat = elevation_data.flatten()\n    lat_grid_flat = lat_grid.flatten()\n    lon_grid_flat = lon_grid.flatten()\n\n    # Create a DataFrame to store the data\n    df = pd.DataFrame({\n        'Latitude': lat_grid_flat,\n        'Longitude': lon_grid_flat,\n        'Elevation': elevation_data_flat,\n    })\n\n    return df\n\n\ndef get_elevation_slope_aspect_curvature(df, lat, lon):\n    # Find the closest latitude and longitude in the DataFrame\n    lat_diff = np.abs(df['Latitude'] - lat)\n    lon_diff = np.abs(df['Longitude'] - lon)\n    closest_index = np.argmin(lat_diff + lon_diff)\n\n    # Extract the elevation, slope, aspect, and curvature at the closest location\n    elevation = df['Elevation'][closest_index]\n    slope = df['Slope'][closest_index]\n    aspect = df['Aspect'][closest_index]\n    curvature = df['Curvature'][closest_index]\n\n    return elevation, slope, aspect, curvature\n\n\ndef convert_the_original_dem_to_template_spatial_extent():\n    # Define the spatial extent of the western U.S. (minx, miny, maxx, maxy)\n    minx, miny, maxx, maxy = -125, 25, -100, 49\n\n    # Define the resolution in degrees (4km is approximately 0.036 degrees)\n    resolution = 0.036\n\n    # Define the filename of the original DEM image to be clipped and resampled\n    original_dem_filename = \"/home/chetana/gridmet_test_run/output_4km.tif\"\n\n    # Define the filename of the template DEM image\n    template_dem_filename = \"/home/chetana/western_us_geotiff_template.tif\"\n\n    # Open the original DEM image with rasterio\n    with rasterio.open(original_dem_filename) as src:\n        # Calculate the window for the portion of the original DEM image that overlaps with the template\n        window = src.window(minx, miny, maxx, maxy)\n\n        # Read the data in the window\n        data = src.read(1, window=window)\n\n        # Calculate the transformation parameters to align the original DEM with the template DEM\n        transform, width, height = calculate_default_transform(\n            src.crs, 'EPSG:4326', window.width, window.height, *src.bounds)\n\n        # Create a destination array to store the resampled data\n        destination = np.zeros((height, width), dtype=src.dtypes[0])\n\n        # Reproject and resample the original DEM image to match the template DEM\n        reproject(\n            source=data,\n            destination=destination,\n            src_transform=src.transform,\n            src_crs=src.crs,\n            dst_transform=transform,\n            dst_crs='EPSG:4326',\n            resampling=Resampling.nearest,\n        )\n\n        # Create the output GeoTIFF with the clipped and resampled data\n        with rasterio.open(\n            \"clipped_resampled_dem.tif\",\n            'w',\n            driver='GTiff',\n            height=height,\n            width=width,\n            count=1,\n            dtype=src.dtypes[0],\n            crs='EPSG:4326',\n            transform=transform,\n        ) as dst:\n            # Write the clipped and resampled data to the raster\n            dst.write(destination, 1)\n\n  \n# Usage example:\n# elevation_df = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km.tif\")\n\n# # Get elevation, slope, aspect, and curvature based on the given lat and lon\n# latitude_to_find = 34.5  # Replace with the desired latitude\n# longitude_to_find = -120.5  # Replace with the desired longitude\n\n# elevation, slope, aspect, curvature = get_elevation_slope_aspect_curvature(elevation_df, latitude_to_find,\n#                                                                            longitude_to_find)\n\n# print(\"Latitude:\", latitude_to_find)\n# print(\"Longitude:\", longitude_to_find)\n# print(\"Elevation:\", elevation)\n# print(\"Slope:\", slope)\n# print(\"Aspect:\", aspect)\n# print(\"Curvature:\", curvature)\nconvert_the_original_dem_to_template_spatial_extent()\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/aqFJQeJA68FY/western_us_dem.py\", line 159, in <module>\n    convert_the_original_dem_to_template_spatial_extent()\n  File \"/home/chetana/gw-workspace/aqFJQeJA68FY/western_us_dem.py\", line 117, in convert_the_original_dem_to_template_spatial_extent\n    reproject(\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/rasterio/env.py\", line 398, in wrapper\n    return f(*args, **kwds)\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/rasterio/warp.py\", line 344, in reproject\n    _reproject(\n  File \"rasterio/_warp.pyx\", line 400, in rasterio._warp._reproject\n  File \"rasterio/_warp.pyx\", line 362, in rasterio._warp._reproject\nrasterio.errors.CRSError: Missing src_crs.\n",
  "history_begin_time" : 1690160621734,
  "history_end_time" : 1690160628169,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "8AkbFwTOLJlO",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\n\nimport rasterio\nfrom rasterio.warp import reproject, Resampling\nimport numpy as np\n\n\ndef calculate_slope_aspect(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n\ndef read_elevation_data(file_path):\n    dataset = gdal.Open(file_path)\n    if dataset is None:\n        print(\"Error: Could not open the file.\")\n        return None\n\n    band = dataset.GetRasterBand(1)\n    elevation_data = band.ReadAsArray()\n\n    # Get geotransform information\n    geotransform = dataset.GetGeoTransform()\n    min_lon, pixel_size_x, _, max_lat, _, pixel_size_y = geotransform\n\n    # Calculate raster size\n    raster_width = dataset.RasterXSize\n    raster_height = dataset.RasterYSize\n\n    # Generate latitude and longitude arrays\n    lats = np.arange(max_lat, max_lat - pixel_size_y * raster_height, -pixel_size_y)\n    lons = np.arange(min_lon, min_lon + pixel_size_x * raster_width, pixel_size_x)\n\n    # Create meshgrid of latitude and longitude\n    lon_grid, lat_grid = np.meshgrid(lons, lats)\n\n    # Flatten the data and the lat/lon grids\n    elevation_data_flat = elevation_data.flatten()\n    lat_grid_flat = lat_grid.flatten()\n    lon_grid_flat = lon_grid.flatten()\n\n    # Create a DataFrame to store the data\n    df = pd.DataFrame({\n        'Latitude': lat_grid_flat,\n        'Longitude': lon_grid_flat,\n        'Elevation': elevation_data_flat,\n    })\n\n    return df\n\n\ndef get_elevation_slope_aspect_curvature(df, lat, lon):\n    # Find the closest latitude and longitude in the DataFrame\n    lat_diff = np.abs(df['Latitude'] - lat)\n    lon_diff = np.abs(df['Longitude'] - lon)\n    closest_index = np.argmin(lat_diff + lon_diff)\n\n    # Extract the elevation, slope, aspect, and curvature at the closest location\n    elevation = df['Elevation'][closest_index]\n    slope = df['Slope'][closest_index]\n    aspect = df['Aspect'][closest_index]\n    curvature = df['Curvature'][closest_index]\n\n    return elevation, slope, aspect, curvature\n\n\ndef convert_the_original_dem_to_template_spatial_extent():\n    # Define the spatial extent of the western U.S. (minx, miny, maxx, maxy)\n    minx, miny, maxx, maxy = -125, 25, -100, 49\n\n    # Define the resolution in degrees (4km is approximately 0.036 degrees)\n    resolution = 0.036\n\n    # Define the filename of the original DEM image to be clipped and resampled\n    original_dem_filename = \"/home/chetana/gridmet_test_run/output_4km.tif\"\n\n    # Define the filename of the template DEM image\n    template_dem_filename = \"/home/chetana/western_us_geotiff_template.tif\"\n\n    # Open the original DEM image with rasterio\n    with rasterio.open(original_dem_filename) as src:\n        # Calculate the window for the portion of the original DEM image that overlaps with the template\n        window = src.window(minx, miny, maxx, maxy)\n\n        # Read the data in the window\n        data = src.read(1, window=window)\n\n        # Calculate the transformation parameters to align the original DEM with the template DEM\n        transform, width, height = calculate_default_transform(\n            src.crs, 'EPSG:4326', window.width, window.height, *src.bounds)\n\n        # Create a destination array to store the resampled data\n        destination = np.zeros((height, width), dtype=src.dtypes[0])\n\n        # Reproject and resample the original DEM image to match the template DEM\n        reproject(\n            source=data,\n            destination=destination,\n            src_transform=src.transform,\n            src_crs=src.crs,\n            dst_transform=transform,\n            dst_crs='EPSG:4326',\n            resampling=Resampling.nearest,\n        )\n\n        # Create the output GeoTIFF with the clipped and resampled data\n        with rasterio.open(\n            \"clipped_resampled_dem.tif\",\n            'w',\n            driver='GTiff',\n            height=height,\n            width=width,\n            count=1,\n            dtype=src.dtypes[0],\n            crs='EPSG:4326',\n            transform=transform,\n        ) as dst:\n            # Write the clipped and resampled data to the raster\n            dst.write(destination, 1)\n\n  \n# Usage example:\n# elevation_df = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km.tif\")\n\n# # Get elevation, slope, aspect, and curvature based on the given lat and lon\n# latitude_to_find = 34.5  # Replace with the desired latitude\n# longitude_to_find = -120.5  # Replace with the desired longitude\n\n# elevation, slope, aspect, curvature = get_elevation_slope_aspect_curvature(elevation_df, latitude_to_find,\n#                                                                            longitude_to_find)\n\n# print(\"Latitude:\", latitude_to_find)\n# print(\"Longitude:\", longitude_to_find)\n# print(\"Elevation:\", elevation)\n# print(\"Slope:\", slope)\n# print(\"Aspect:\", aspect)\n# print(\"Curvature:\", curvature)\nconvert_the_original_dem_to_template_spatial_extent()\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/8AkbFwTOLJlO/western_us_dem.py\", line 158, in <module>\n    convert_the_original_dem_to_template_spatial_extent()\n  File \"/home/chetana/gw-workspace/8AkbFwTOLJlO/western_us_dem.py\", line 109, in convert_the_original_dem_to_template_spatial_extent\n    transform, width, height = calculate_default_transform(\nNameError: name 'calculate_default_transform' is not defined\n",
  "history_begin_time" : 1690157843005,
  "history_end_time" : 1690157857271,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "O1scJsIW32NY",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\n\nimport rasterio\nfrom rasterio.warp import reproject, Resampling\nimport numpy as np\n\n\ndef calculate_slope_aspect(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n\ndef read_elevation_data(file_path):\n    dataset = gdal.Open(file_path)\n    if dataset is None:\n        print(\"Error: Could not open the file.\")\n        return None\n\n    band = dataset.GetRasterBand(1)\n    elevation_data = band.ReadAsArray()\n\n    # Get geotransform information\n    geotransform = dataset.GetGeoTransform()\n    min_lon, pixel_size_x, _, max_lat, _, pixel_size_y = geotransform\n\n    # Calculate raster size\n    raster_width = dataset.RasterXSize\n    raster_height = dataset.RasterYSize\n\n    # Generate latitude and longitude arrays\n    lats = np.arange(max_lat, max_lat - pixel_size_y * raster_height, -pixel_size_y)\n    lons = np.arange(min_lon, min_lon + pixel_size_x * raster_width, pixel_size_x)\n\n    # Create meshgrid of latitude and longitude\n    lon_grid, lat_grid = np.meshgrid(lons, lats)\n\n    # Flatten the data and the lat/lon grids\n    elevation_data_flat = elevation_data.flatten()\n    lat_grid_flat = lat_grid.flatten()\n    lon_grid_flat = lon_grid.flatten()\n\n    # Create a DataFrame to store the data\n    df = pd.DataFrame({\n        'Latitude': lat_grid_flat,\n        'Longitude': lon_grid_flat,\n        'Elevation': elevation_data_flat,\n    })\n\n    return df\n\n\ndef get_elevation_slope_aspect_curvature(df, lat, lon):\n    # Find the closest latitude and longitude in the DataFrame\n    lat_diff = np.abs(df['Latitude'] - lat)\n    lon_diff = np.abs(df['Longitude'] - lon)\n    closest_index = np.argmin(lat_diff + lon_diff)\n\n    # Extract the elevation, slope, aspect, and curvature at the closest location\n    elevation = df['Elevation'][closest_index]\n    slope = df['Slope'][closest_index]\n    aspect = df['Aspect'][closest_index]\n    curvature = df['Curvature'][closest_index]\n\n    return elevation, slope, aspect, curvature\n\n\ndef convert_the_original_dem_to_template_spatial_extent():\n    # Define the spatial extent of the western U.S. (minx, miny, maxx, maxy)\n    minx, miny, maxx, maxy = -125, 25, -100, 49\n\n    # Define the resolution in degrees (4km is approximately 0.036 degrees)\n    resolution = 0.036\n\n    # Define the filename of the original DEM image to be clipped and resampled\n    original_dem_filename = \"/home/chetana/gridmet_test_run/output_4km.tif\"\n\n    # Define the filename of the template DEM image\n    template_dem_filename = \"/home/chetana/western_us_geotiff_template.tif\"\n\n    # Open the original DEM image with rasterio\n    with rasterio.open(original_dem_filename) as src:\n        # Calculate the window for the portion of the original DEM image that overlaps with the template\n        window = src.window(minx, miny, maxx, maxy)\n\n        # Read the data in the window\n        data = src.read(1, window=window)\n\n        # Calculate the transformation parameters to align the original DEM with the template DEM\n        transform, width, height = rasterio.warp.calculate_default_transform(\n            src.crs, 'EPSG:4326', window.width, window.height, *window.bounds)\n\n        # Create a destination array to store the resampled data\n        destination = np.zeros((height, width), dtype=src.dtypes[0])\n\n        # Reproject and resample the original DEM image to match the template DEM\n        reproject(\n            source=data,\n            destination=destination,\n            src_transform=src.transform,\n            src_crs=src.crs,\n            dst_transform=transform,\n            dst_crs='EPSG:4326',\n            resampling=Resampling.nearest,\n        )\n\n        # Create the output GeoTIFF with the clipped and resampled data\n        with rasterio.open(\n            \"clipped_resampled_dem.tif\",\n            'w',\n            driver='GTiff',\n            height=height,\n            width=width,\n            count=1,\n            dtype=src.dtypes[0],\n            crs='EPSG:4326',\n            transform=transform,\n        ) as dst:\n            # Write the clipped and resampled data to the raster\n            dst.write(destination, 1)\n\n  \n# Usage example:\n# elevation_df = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km.tif\")\n\n# # Get elevation, slope, aspect, and curvature based on the given lat and lon\n# latitude_to_find = 34.5  # Replace with the desired latitude\n# longitude_to_find = -120.5  # Replace with the desired longitude\n\n# elevation, slope, aspect, curvature = get_elevation_slope_aspect_curvature(elevation_df, latitude_to_find,\n#                                                                            longitude_to_find)\n\n# print(\"Latitude:\", latitude_to_find)\n# print(\"Longitude:\", longitude_to_find)\n# print(\"Elevation:\", elevation)\n# print(\"Slope:\", slope)\n# print(\"Aspect:\", aspect)\n# print(\"Curvature:\", curvature)\nconvert_the_original_dem_to_template_spatial_extent()\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/O1scJsIW32NY/western_us_dem.py\", line 158, in <module>\n    convert_the_original_dem_to_template_spatial_extent()\n  File \"/home/chetana/gw-workspace/O1scJsIW32NY/western_us_dem.py\", line 110, in convert_the_original_dem_to_template_spatial_extent\n    src.crs, 'EPSG:4326', window.width, window.height, *window.bounds)\nAttributeError: 'Window' object has no attribute 'bounds'\n",
  "history_begin_time" : 1690157516604,
  "history_end_time" : 1690157535564,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "2TnCj0nfE3qa",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\n\n\ndef calculate_slope_aspect(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n\ndef read_elevation_data(file_path):\n    dataset = gdal.Open(file_path)\n    if dataset is None:\n        print(\"Error: Could not open the file.\")\n        return None\n\n    band = dataset.GetRasterBand(1)\n    elevation_data = band.ReadAsArray()\n\n    # Get geotransform information\n    geotransform = dataset.GetGeoTransform()\n    min_lon, pixel_size_x, _, max_lat, _, pixel_size_y = geotransform\n\n    # Calculate raster size\n    raster_width = dataset.RasterXSize\n    raster_height = dataset.RasterYSize\n\n    # Generate latitude and longitude arrays\n    lats = np.arange(max_lat, max_lat - pixel_size_y * raster_height, -pixel_size_y)\n    lons = np.arange(min_lon, min_lon + pixel_size_x * raster_width, pixel_size_x)\n\n    # Create meshgrid of latitude and longitude\n    lon_grid, lat_grid = np.meshgrid(lons, lats)\n\n    # Flatten the data and the lat/lon grids\n    elevation_data_flat = elevation_data.flatten()\n    lat_grid_flat = lat_grid.flatten()\n    lon_grid_flat = lon_grid.flatten()\n\n    # Create a DataFrame to store the data\n    df = pd.DataFrame({\n        'Latitude': lat_grid_flat,\n        'Longitude': lon_grid_flat,\n        'Elevation': elevation_data_flat,\n    })\n\n    return df\n\n\ndef get_elevation_slope_aspect_curvature(df, lat, lon):\n    # Find the closest latitude and longitude in the DataFrame\n    lat_diff = np.abs(df['Latitude'] - lat)\n    lon_diff = np.abs(df['Longitude'] - lon)\n    closest_index = np.argmin(lat_diff + lon_diff)\n\n    # Extract the elevation, slope, aspect, and curvature at the closest location\n    elevation = df['Elevation'][closest_index]\n    slope = df['Slope'][closest_index]\n    aspect = df['Aspect'][closest_index]\n    curvature = df['Curvature'][closest_index]\n\n    return elevation, slope, aspect, curvature\n\n\n# Usage example:\nelevation_df = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km.tif\")\n\n# Get elevation, slope, aspect, and curvature based on the given lat and lon\nlatitude_to_find = 34.5  # Replace with the desired latitude\nlongitude_to_find = -120.5  # Replace with the desired longitude\n\nelevation, slope, aspect, curvature = get_elevation_slope_aspect_curvature(elevation_df, latitude_to_find,\n                                                                           longitude_to_find)\n\nprint(\"Latitude:\", latitude_to_find)\nprint(\"Longitude:\", longitude_to_find)\nprint(\"Elevation:\", elevation)\nprint(\"Slope:\", slope)\nprint(\"Aspect:\", aspect)\nprint(\"Curvature:\", curvature)\n",
  "history_output" : "Traceback (most recent call last):\n  File \"western_us_dem.py\", line 2, in <module>\n    import pandas as pd\nImportError: No module named pandas\n",
  "history_begin_time" : 1690139482059,
  "history_end_time" : 1690139483928,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "5lDGIJ82ayGf",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\n\n\ndef calculate_slope_aspect(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\n\ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\n\ndef read_elevation_data(file_path):\n    dataset = gdal.Open(file_path)\n    if dataset is None:\n        print(\"Error: Could not open the file.\")\n        return None\n\n    band = dataset.GetRasterBand(1)\n    elevation_data = band.ReadAsArray()\n\n    # Get geotransform information\n    geotransform = dataset.GetGeoTransform()\n    min_lon, pixel_size_x, _, max_lat, _, pixel_size_y = geotransform\n\n    # Calculate raster size\n    raster_width = dataset.RasterXSize\n    raster_height = dataset.RasterYSize\n\n    # Generate latitude and longitude arrays\n    lats = np.arange(max_lat, max_lat - pixel_size_y * raster_height, -pixel_size_y)\n    lons = np.arange(min_lon, min_lon + pixel_size_x * raster_width, pixel_size_x)\n\n    # Create meshgrid of latitude and longitude\n    lon_grid, lat_grid = np.meshgrid(lons, lats)\n\n    # Flatten the data and the lat/lon grids\n    elevation_data_flat = elevation_data.flatten()\n    lat_grid_flat = lat_grid.flatten()\n    lon_grid_flat = lon_grid.flatten()\n\n    # Create a DataFrame to store the data\n    df = pd.DataFrame({\n        'Latitude': lat_grid_flat,\n        'Longitude': lon_grid_flat,\n        'Elevation': elevation_data_flat,\n    })\n\n    return df\n\n\ndef get_elevation_slope_aspect_curvature(df, lat, lon):\n    # Find the closest latitude and longitude in the DataFrame\n    lat_diff = np.abs(df['Latitude'] - lat)\n    lon_diff = np.abs(df['Longitude'] - lon)\n    closest_index = np.argmin(lat_diff + lon_diff)\n\n    # Extract the elevation, slope, aspect, and curvature at the closest location\n    elevation = df['Elevation'][closest_index]\n    slope = df['Slope'][closest_index]\n    aspect = df['Aspect'][closest_index]\n    curvature = df['Curvature'][closest_index]\n\n    return elevation, slope, aspect, curvature\n\n\n# Usage example:\nelevation_df = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km.tif\")\n\n# Get elevation, slope, aspect, and curvature based on the given lat and lon\nlatitude_to_find = 34.5  # Replace with the desired latitude\nlongitude_to_find = -120.5  # Replace with the desired longitude\n\nelevation, slope, aspect, curvature = get_elevation_slope_aspect_curvature(elevation_df, latitude_to_find,\n                                                                           longitude_to_find)\n\nprint(\"Latitude:\", latitude_to_find)\nprint(\"Longitude:\", longitude_to_find)\nprint(\"Elevation:\", elevation)\nprint(\"Slope:\", slope)\nprint(\"Aspect:\", aspect)\nprint(\"Curvature:\", curvature)\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/5lDGIJ82ayGf/western_us_dem.py\", line 3, in <module>\n    from osgeo import gdal\nModuleNotFoundError: No module named 'osgeo'\n",
  "history_begin_time" : 1690139463911,
  "history_end_time" : 1690139468138,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "y8PuXVGFm7Jg",
  "history_input" : "import numpy as np\nimport pandas as pd\nfrom osgeo import gdal\n\ndef calculate_slope_aspect(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate slope using the Sobel operator\n    slope_x = np.gradient(elevation_data, pixel_size_x, axis=1)\n    slope_y = np.gradient(elevation_data, pixel_size_y, axis=0)\n    slope_rad = np.arctan(np.sqrt(slope_x ** 2 + slope_y ** 2))\n    slope_deg = np.degrees(slope_rad)\n\n    # Calculate aspect (direction of the steepest descent)\n    aspect_rad = np.arctan2(slope_y, -slope_x)\n    aspect_deg = (np.degrees(aspect_rad) + 360) % 360\n\n    return slope_deg, aspect_deg\n\ndef calculate_curvature(elevation_data, pixel_size_x, pixel_size_y):\n    # Calculate curvature using the Laplacian operator\n    curvature_x = np.gradient(np.gradient(elevation_data, pixel_size_x, axis=1), pixel_size_x, axis=1)\n    curvature_y = np.gradient(np.gradient(elevation_data, pixel_size_y, axis=0), pixel_size_y, axis=0)\n    curvature = curvature_x + curvature_y\n\n    return curvature\n\ndef read_elevation_data(file_path):\n    dataset = gdal.Open(file_path)\n    if dataset is None:\n        print(\"Error: Could not open the file.\")\n        return None\n\n    band = dataset.GetRasterBand(1)\n    elevation_data = band.ReadAsArray()\n\n    # Get geotransform information\n    geotransform = dataset.GetGeoTransform()\n    min_lon, pixel_size_x, _, max_lat, _, pixel_size_y = geotransform\n\n    # Calculate raster size\n    raster_width = dataset.RasterXSize\n    raster_height = dataset.RasterYSize\n\n    # Generate latitude and longitude arrays\n    lats = np.arange(max_lat, max_lat - pixel_size_y * raster_height, -pixel_size_y)\n    lons = np.arange(min_lon, min_lon + pixel_size_x * raster_width, pixel_size_x)\n\n    # Calculate slope and aspect\n    slope_data, aspect_data = calculate_slope_aspect(elevation_data, pixel_size_x, pixel_size_y)\n\n    # Calculate curvature\n    curvature_data = calculate_curvature(elevation_data, pixel_size_x, pixel_size_y)\n\n    # Create meshgrid of latitude and longitude\n    lon_grid, lat_grid = np.meshgrid(lons, lats)\n\n    # Flatten the data and the lat/lon grids\n    elevation_data_flat = elevation_data.flatten()\n    slope_data_flat = slope_data.flatten()\n    aspect_data_flat = aspect_data.flatten()\n    curvature_data_flat = curvature_data.flatten()\n    lat_grid_flat = lat_grid.flatten()\n    lon_grid_flat = lon_grid.flatten()\n\n    # Create a DataFrame to store the data\n    df = pd.DataFrame({\n        'Latitude': lat_grid_flat,\n        'Longitude': lon_grid_flat,\n        'Elevation': elevation_data_flat,\n        'Slope': slope_data_flat,\n        'Aspect': aspect_data_flat,\n        'Curvature': curvature_data_flat\n    })\n\n    return df\n\n# Usage example:\nelevation_df = read_elevation_data(\"/home/chetana/gridmet_test_run/output_4km.tif\")\nelevation_df.to_csv('/home/chetana/gridmet_test_run/western_us_dem_testing.csv')",
  "history_output" : "Cannot run program \"/home/chetana/anaconda3/conda/bin/python\" (in directory \"/home/chetana/gw-workspace/y8PuXVGFm7Jg\"): error=2, No such file or directory",
  "history_begin_time" : 1690133122274,
  "history_end_time" : 1690133122278,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "POdXS31NUews",
  "history_input" : "import geopandas as gpd\nimport json\nimport geojson\nfrom pystac_client import Client\nimport planetary_computer\nimport xarray\nimport rioxarray\nimport xrspatial\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom pyproj import Proj, transform\nimport os\nimport sys, traceback\nimport requests\n\nhome_dir = os.path.expanduser('~')\nsnowcast_github_dir = f\"{home_dir}/Documents/GitHub/SnowCast/\"\n\n# Exit if this process is no longer needed\n# exit() \n\n# User-defined paths for data access\ndata_dir = f'{snowcast_github_dir}data/'\ngridcells_file = data_dir+'snowcast_provided/grid_cells_eval.geojson'\ngridcells_outfile = data_dir+'terrain/gridcells_terrainData_eval_new.csv'\n\n# Load metadata\ngridcellsGPD = gpd.read_file(gridcells_file)\ngridcells = geojson.load(open(gridcells_file))\n\n# Instantiate output pandas dataframe\ndf_gridcells = pd.DataFrame(columns=(\"Longitude [deg]\",\"Latitude [deg]\",\n                                     \"Elevation [m]\",\"Aspect [deg]\",\n                                     \"Curvature [ratio]\",\"Slope [deg]\",\n                                     \"Eastness [unitCirc.]\",\"Northness [unitCirc.]\"))\n\ndef prepareWesternUSTerrain():\n    # Calculate grid cell characteristics using Copernicus DEM data\n    print(\"Preparing Western US Terrain data\")\n    \n    # read the geotif image\n    \n    # traverse the grid cells\n    spatial_extent = (-103, -90, 20, 50)\n    \n    image_size = (500, 500)\n    \n    for x in image_size[0]:\n      for y in image_size[1]:\n        lat, lon  = convert_xy_to_latlon(x, y)\n        \n        # read the pixel value of location (lat, lon) from the downloaded DEM 90 meter geotif\n        # bounding box\n        lat_range = (lat-0.1, lat+0.1)\n        lon_range = (lon-0.1, lon+0.1)\n        \n        pixel_value_dataarray = read_geotif_values_by_lat_lon_range(lat_range, lon_range)\n        \n        \n    \tprint(\"Reprojecting data to EPSG:32612\")\n\n        # Calculate directional components\n        aspect = xrspatial.aspect(pixel_value_dataarray)\n        aspect_xcomp = np.nansum(np.cos(aspect.values * (np.pi / 180)))\n        aspect_ycomp = np.nansum(np.sin(aspect.values * (np.pi / 180)))\n        mean_aspect = np.arctan2(aspect_ycomp, aspect_xcomp) * (180 / np.pi)\n        if mean_aspect < 0:\n            mean_aspect = 360 + mean_aspect\n        print(\"Aspect:\", mean_aspect)\n        mean_eastness = np.cos(mean_aspect * (np.pi / 180))\n        mean_northness = np.sin(mean_aspect * (np.pi / 180))\n        print(\"Eastness:\", mean_eastness)\n        print(\"Northness:\", mean_northness)\n\n        # Positive curvature = upward convex\n        curvature = xrspatial.curvature(cropped_data)\n        mean_curvature = curvature.mean().values\n        print(\"Curvature:\", mean_curvature)\n\n        # Calculate mean slope\n        slope = xrspatial.slope(cropped_data)\n        mean_slope = slope.mean().values\n        print(\"Slope:\", mean_slope)\n\n        # Fill pandas dataframe\n        image_df.loc[idx] = [lat, lon,\n                                 mean_elev, mean_aspect,\n                                 mean_curvature, mean_slope,\n                                 mean_eastness, mean_northness]\n\n    # Save output data into CSV format\n    image_df.to_csv(image_outfile)\n    \n    \ntry:\n    prepareWesternUSTerrain()\nexcept:\n    traceback.print_exc(file=sys.stdout)\n",
  "history_output" : "Cannot run program \"/home/chetana/anaconda3/conda/bin/python\" (in directory \"/home/chetana/gw-workspace/POdXS31NUews\"): error=2, No such file or directory",
  "history_begin_time" : 1689633328420,
  "history_end_time" : 1689633328761,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "38YDrCVxqHsg",
  "history_input" : "import geopandas as gpd\nimport json\nimport geojson\nfrom pystac_client import Client\nimport planetary_computer\nimport xarray\nimport rioxarray\nimport xrspatial\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom pyproj import Proj, transform\nimport os\nimport sys, traceback\nimport requests\n\nhome_dir = os.path.expanduser('~')\nsnowcast_github_dir = f\"{home_dir}/Documents/GitHub/SnowCast/\"\n\n# Exit if this process is no longer needed\n# exit() \n\n# User-defined paths for data access\ndata_dir = f'{snowcast_github_dir}data/'\ngridcells_file = data_dir+'snowcast_provided/grid_cells_eval.geojson'\ngridcells_outfile = data_dir+'terrain/gridcells_terrainData_eval_new.csv'\n\n# Load metadata\ngridcellsGPD = gpd.read_file(gridcells_file)\ngridcells = geojson.load(open(gridcells_file))\n\n# Instantiate output pandas dataframe\ndf_gridcells = pd.DataFrame(columns=(\"Longitude [deg]\",\"Latitude [deg]\",\n                                     \"Elevation [m]\",\"Aspect [deg]\",\n                                     \"Curvature [ratio]\",\"Slope [deg]\",\n                                     \"Eastness [unitCirc.]\",\"Northness [unitCirc.]\"))\n\ndef prepareGridCellTerrain():\n    # Calculate grid cell characteristics using Copernicus DEM data\n    print(\"Preparing GridCell Terrain data\")\n    for idx, cell in enumerate(gridcells['features']):\n        print(\"Processing grid\", idx)\n        # Modify the search parameters to cover the entire western USA region\n        search = client.search(\n            collections=[\"cop-dem-glo-30\"],\n            bbox=[-125.0, 31.0, -102.0, 49.0]  # Western USA bounding box: [min_lon, min_lat, max_lon, max_lat]\n        )\n        items = list(search.get_items())\n        print(\"==> Searched items:\", len(items))\n\n        # Skip if no DEM items are found for the specified region\n        if len(items) == 0:\n            print(\"No DEM data found for the specified region.\")\n            continue\n\n        # Select the first DEM item\n        signed_asset = planetary_computer.sign(items[0].assets[\"data\"])\n        data = (\n            xarray.open_rasterio(signed_asset.href)\n            .squeeze()\n            .drop(\"band\")\n            .coarsen({\"y\": 1, \"x\": 1})\n            .mean()\n        )\n        cropped_data = data.rio.clip(cell['geometry'])\n\n        # Calculate lat/long of the center of the grid cell\n        longitude = np.mean(cell['geometry']['coordinates'][0][0])\n        latitude = np.mean(cell['geometry']['coordinates'][0][1])\n\n        print(\"Reprojecting data to EPSG:32612\")\n        # Reproject the cropped DEM data\n        cropped_data = cropped_data.rio.reproject(\"EPSG:32612\")\n\n        # Mean elevation of the grid cell\n        mean_elev = cropped_data.mean().values\n        print(\"Elevation:\", mean_elev)\n\n        # Calculate directional components\n        aspect = xrspatial.aspect(cropped_data)\n        aspect_xcomp = np.nansum(np.cos(aspect.values * (np.pi / 180)))\n        aspect_ycomp = np.nansum(np.sin(aspect.values * (np.pi / 180)))\n        mean_aspect = np.arctan2(aspect_ycomp, aspect_xcomp) * (180 / np.pi)\n        if mean_aspect < 0:\n            mean_aspect = 360 + mean_aspect\n        print(\"Aspect:\", mean_aspect)\n        mean_eastness = np.cos(mean_aspect * (np.pi / 180))\n        mean_northness = np.sin(mean_aspect * (np.pi / 180))\n        print(\"Eastness:\", mean_eastness)\n        print(\"Northness:\", mean_northness)\n\n        # Positive curvature = upward convex\n        curvature = xrspatial.curvature(cropped_data)\n        mean_curvature = curvature.mean().values\n        print(\"Curvature:\", mean_curvature)\n\n        # Calculate mean slope\n        slope = xrspatial.slope(cropped_data)\n        mean_slope = slope.mean().values\n        print(\"Slope:\", mean_slope)\n\n        # Fill pandas dataframe\n        df_gridcells.loc[idx] = [longitude, latitude,\n                                 mean_elev, mean_aspect,\n                                 mean_curvature, mean_slope,\n                                 mean_eastness, mean_northness]\n\n    # Save output data into CSV format\n    df_gridcells.set_index(gridcellsGPD['cell_id'][0:idx+1], inplace=True)\n    df_gridcells.to_csv(gridcells_outfile)\n\ntry:\n    prepareGridCellTerrain()\nexcept:\n    traceback.print_exc(file=sys.stdout)\n",
  "history_output" : "Preparing GridCell Terrain data\nProcessing grid 0\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/38YDrCVxqHsg/western_us_dem.py\", line 113, in <module>\n    prepareGridCellTerrain()\n  File \"/home/chetana/gw-workspace/38YDrCVxqHsg/western_us_dem.py\", line 44, in prepareGridCellTerrain\n    search = client.search(\nNameError: name 'client' is not defined\n",
  "history_begin_time" : 1689628171519,
  "history_end_time" : 1689628180117,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "uwLOtawhCLKC",
  "history_input" : "import geopandas as gpd\nimport geojson\nimport xarray\nimport xrspatial\nimport numpy as np\nimport pandas as pd\nimport os\nimport sys, traceback\nimport requests\n\nhome_dir = os.path.expanduser('~')\nsnowcast_github_dir = f\"{home_dir}/Documents/GitHub/SnowCast/\"\n\n# Exit if this process is no longer needed\n# exit() \n\n# User-defined paths for data access\ndata_dir = f'{snowcast_github_dir}data/'\ngridcells_file = data_dir+'snowcast_provided/grid_cells_eval.geojson'\ngridcells_outfile = data_dir+'terrain/gridcells_terrainData_eval_new.csv'\n\n# Load metadata\ngridcellsGPD = gpd.read_file(gridcells_file)\ngridcells = geojson.load(open(gridcells_file))\n\n# Instantiate output pandas dataframe\ndf_gridcells = pd.DataFrame(columns=(\"Longitude [deg]\",\"Latitude [deg]\",\n                                     \"Elevation [m]\",\"Aspect [deg]\",\n                                     \"Curvature [ratio]\",\"Slope [deg]\",\n                                     \"Eastness [unitCirc.]\",\"Northness [unitCirc.]\"))\n\ndef prepareGridCellTerrain():\n    # Calculate grid cell characteristics using Copernicus DEM data\n    print(\"Preparing GridCell Terrain data\")\n    for idx, cell in enumerate(gridcells['features']):\n        print(\"Processing grid\", idx)\n        # Modify the search parameters to cover the entire western USA region\n        search = client.search(\n            collections=[\"cop-dem-glo-30\"],\n            bbox=[-125.0, 31.0, -102.0, 49.0]  # Western USA bounding box: [min_lon, min_lat, max_lon, max_lat]\n        )\n        items = list(search.get_items())\n        print(\"==> Searched items:\", len(items))\n\n        # Skip if no DEM items are found for the specified region\n        if len(items) == 0:\n            print(\"No DEM data found for the specified region.\")\n            continue\n\n        # Select the first DEM item\n        signed_asset = planetary_computer.sign(items[0].assets[\"data\"])\n        data = (\n            xarray.open_rasterio(signed_asset.href)\n            .squeeze()\n            .drop(\"band\")\n            .coarsen({\"y\": 1, \"x\": 1})\n            .mean()\n        )\n        cropped_data = data.rio.clip(cell['geometry'])\n\n        # Calculate lat/long of the center of the grid cell\n        longitude = np.mean(cell['geometry']['coordinates'][0][0])\n        latitude = np.mean(cell['geometry']['coordinates'][0][1])\n\n        print(\"Reprojecting data to EPSG:32612\")\n        # Reproject the cropped DEM data\n        cropped_data = cropped_data.rio.reproject(\"EPSG:32612\")\n\n        # Mean elevation of the grid cell\n        mean_elev = cropped_data.mean().values\n        print(\"Elevation:\", mean_elev)\n\n        # Calculate directional components\n        aspect = xrspatial.aspect(cropped_data)\n        aspect_xcomp = np.nansum(np.cos(aspect.values * (np.pi / 180)))\n        aspect_ycomp = np.nansum(np.sin(aspect.values * (np.pi / 180)))\n        mean_aspect = np.arctan2(aspect_ycomp, aspect_xcomp) * (180 / np.pi)\n        if mean_aspect < 0:\n            mean_aspect = 360 + mean_aspect\n        print(\"Aspect:\", mean_aspect)\n        mean_eastness = np.cos(mean_aspect * (np.pi / 180))\n        mean_northness = np.sin(mean_aspect * (np.pi / 180))\n        print(\"Eastness:\", mean_eastness)\n        print(\"Northness:\", mean_northness)\n\n        # Positive curvature = upward convex\n        curvature = xrspatial.curvature(cropped_data)\n        mean_curvature = curvature.mean().values\n        print(\"Curvature:\", mean_curvature)\n\n        # Calculate mean slope\n        slope = xrspatial.slope(cropped_data)\n        mean_slope = slope.mean().values\n        print(\"Slope:\", mean_slope)\n\n        # Fill pandas dataframe\n        df_gridcells.loc[idx] = [longitude, latitude,\n                                 mean_elev, mean_aspect,\n                                 mean_curvature, mean_slope,\n                                 mean_eastness, mean_northness]\n\n    # Save output data into CSV format\n    df_gridcells.set_index(gridcellsGPD['cell_id'][0:idx+1], inplace=True)\n    df_gridcells.to_csv(gridcells_outfile)\n\ntry:\n    prepareGridCellTerrain()\nexcept:\n    traceback.print_exc(file=sys.stdout)\n",
  "history_output" : "Preparing GridCell Terrain data\nProcessing grid 0\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/uwLOtawhCLKC/western_us_dem.py\", line 107, in <module>\n    prepareGridCellTerrain()\n  File \"/home/chetana/gw-workspace/uwLOtawhCLKC/western_us_dem.py\", line 38, in prepareGridCellTerrain\n    search = client.search(\nNameError: name 'client' is not defined\n",
  "history_begin_time" : 1689627972306,
  "history_end_time" : 1689627986043,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "ivfi6w3rpql",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1691530622438,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "tq3z35",
  "indicator" : "Stopped"
},]
