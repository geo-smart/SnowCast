[{
  "history_id" : "mqbwhnu0tf8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1717473609391,
  "history_end_time" : 1717473609391,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "uci3vjwxn2f",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1717387236856,
  "history_end_time" : 1717387236856,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "grc2ew0yrtu",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1717300809802,
  "history_end_time" : 1717300809802,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "jvb6rcj1u7c",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1717214409933,
  "history_end_time" : 1717214409933,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "pqcrl6cnlta",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1717128009850,
  "history_end_time" : 1717128009850,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "wkfqe031lle",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1717041609586,
  "history_end_time" : 1717041609586,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "zd3e81a08nb",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1716955209597,
  "history_end_time" : 1716955209597,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "lorg3bbv6ob",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1716868810479,
  "history_end_time" : 1716868810479,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "9fba4dye8jv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1716817415285,
  "history_end_time" : 1716817415285,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "4yuxvubd6hf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1716797560533,
  "history_end_time" : 1716797560533,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ifq9sl9r8vu",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1716782410846,
  "history_end_time" : 1716782410846,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "1y2zatxenx2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1716777609588,
  "history_end_time" : 1716777609588,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "bd5yeclte8f",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1716774915267,
  "history_end_time" : 1716774915267,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "5dw1o9ryj7k",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1716754065133,
  "history_end_time" : 1716754065133,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "0gz5pteyhxl",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1716751217850,
  "history_end_time" : 1716751217850,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "d9qxyrze1vz",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1716750881011,
  "history_end_time" : 1716751199699,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "93ampv17w63",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1716746640527,
  "history_end_time" : 1716746640527,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "f625pb51a62",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1716696010342,
  "history_end_time" : 1716696010342,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "tihar2lr5s2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1716618218923,
  "history_end_time" : 1716618218923,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "rvvfv5v98r1",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1716609610744,
  "history_end_time" : 1716609610744,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "l9cxsl02ptr",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1716563756428,
  "history_end_time" : 1716563756428,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "v9kvjm75twg",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1716524704847,
  "history_end_time" : 1716524704847,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "03g2ip4si6o",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1716523210568,
  "history_end_time" : 1716523210568,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "4z1vd44bg9s",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1716521650081,
  "history_end_time" : 1716521650081,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "5c8fk4zfrov",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1716519590071,
  "history_end_time" : 1716519590071,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "2sajlu9vyhx",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1716513818254,
  "history_end_time" : 1716513818254,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "oc97d0jsj0f",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1716471261718,
  "history_end_time" : 1716471261718,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "4o834whso0z",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1716436810727,
  "history_end_time" : 1716799400425,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "dk5ydvhwv4v",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1716422697944,
  "history_end_time" : 1716422827807,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "qt6c2tf7qwv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1716422518419,
  "history_end_time" : 1716422518419,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "r8xoxoyuy3g",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1716418165975,
  "history_end_time" : 1716418165975,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "YuSNcZ5LR0Y0",
  "history_input" : "from datetime import date, datetime, timedelta\nimport json\nimport math\nimport numpy as np\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\n# -125, 25, -100, 49\nsouthwest_lon = -125.0\nsouthwest_lat = 25.0\nnortheast_lon = -100.0\nnortheast_lat = 49.0\n\n# the training period is three years from 2018 to 2021\ntrain_start_date = \"2018-01-03\"\ntrain_end_date = \"2021-12-31\"\n\ndef get_operation_day():\n  # Get the current date and time\n  current_date = datetime.now()\n\n  # Calculate three days ago\n  three_days_ago = current_date - timedelta(days=3)\n\n  # Format the date as a string\n  three_days_ago_string = three_days_ago.strftime(\"%Y-%m-%d\")\n\n  print(three_days_ago_string)\n  return three_days_ago_string\n\n#test_start_date = get_operation_day()\ntest_start_date = \"2024-05-16\" # use this for debugging and generating SWE map for specific day\n#test_end_date = \"2023-10-19\"\ntest_end_date = d1\nprint(\"test start date: \", test_start_date)\nprint(\"test end date: \", test_end_date)\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\nwork_dir = f\"{homedir}/gridmet_test_run\"\n\n# Define a function to convert the month to season\ndef month_to_season(month):\n    if 3 <= month <= 5:\n        return 1\n    elif 6 <= month <= 8:\n        return 2\n    elif 9 <= month <= 11:\n        return 3\n    else:\n        return 4\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate the distance (Euclidean) between two sets of coordinates (lat1, lon1) and (lat2, lon2).\n    \n    Parameters:\n    - lat1 (float): Latitude of the first point.\n    - lon1 (float): Longitude of the first point.\n    - lat2 (float): Latitude of the second point.\n    - lon2 (float): Longitude of the second point.\n    \n    Returns:\n    - float: The Euclidean distance between the two points.\n    \"\"\"\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1 - lat2) ** 2 + (lon1 - lon2) ** 2)\n\ndef read_json_file(file_path):\n    with open(file_path, 'r', encoding='utf-8-sig') as json_file:\n        data = json.load(json_file)\n        return data\n\ndef create_cell_location_csv():\n    \"\"\"\n    Create a CSV file containing cell locations from a GeoJSON file.\n    \"\"\"\n    # read grid cell\n    gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n    all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n    if os.path.exists(all_cell_coords_file):\n        os.remove(all_cell_coords_file)\n\n    grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n    print(grid_coords_df.head())\n    gridcells = geojson.load(open(gridcells_file))\n    for idx, cell in enumerate(gridcells['features']):\n        current_cell_id = cell['properties']['cell_id']\n        cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n        cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n        grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n\n    # grid_coords_np = grid_coords_df.to_numpy()\n    # print(grid_coords_np.shape)\n    grid_coords_df.to_csv(all_cell_coords_file, index=False)\n    # np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n    # print(grid_coords_np.shape)\n\ndef get_latest_date_from_an_array(arr, date_format):\n    \"\"\"\n    Get the latest date from an array of date strings.\n    \n    Parameters:\n    - arr (list): List of date strings.\n    - date_format (str): Date format for parsing the date strings.\n    \n    Returns:\n    - str: The latest date string.\n    \"\"\"\n    return max(arr, key=lambda x: datetime.strptime(x, date_format))\n\ndef findLastStopDate(target_testing_dir, data_format):\n    \"\"\"\n    Find the last stop date from CSV files in a directory.\n    \n    Parameters:\n    - target_testing_dir (str): Directory containing CSV files.\n    - data_format (str): Date format for parsing the date strings.\n    \n    Returns:\n    - str: The latest stop date.\n    \"\"\"\n    date_list = []\n    for filename in os.listdir(target_testing_dir):\n        f = os.path.join(target_testing_dir, filename)\n        # checking if it is a file\n        if os.path.isfile(f) and \".csv\" in f:\n            pdf = pd.read_csv(f, header=0, index_col=0)\n            date_list = np.concatenate((date_list, pdf.index.unique()))\n    latest_date = get_latest_date_from_an_array(date_list, data_format)\n    print(latest_date)\n    date_time_obj = datetime.strptime(latest_date, data_format)\n    return date_time_obj.strftime(\"%Y-%m-%d\")\n\ndef convert_date_from_1900(day_value):\n    \"\"\"\n    Convert a day value since 1900 to a date string in the format \"YYYY-MM-DD\".\n    \n    Parameters:\n    - day_value (int): Number of days since January 1, 1900.\n    \n    Returns:\n    - str: Date string in \"YYYY-MM-DD\" format.\n    \"\"\"\n    reference_date = datetime(1900, 1, 1)\n    result_date = reference_date + timedelta(days=day_value)\n    return result_date.strftime(\"%Y-%m-%d\")\n\ndef convert_date_to_1900(date_string):\n    \"\"\"\n    Convert a date string in the format \"YYYY-MM-DD\" to a day value since 1900.\n    \n    Parameters:\n    - date_string (str): Date string in \"YYYY-MM-DD\" format.\n    \n    Returns:\n    - int: Number of days since January 1, 1900.\n    \"\"\"\n    input_date = datetime.strptime(date_string, \"%Y-%m-%d\")\n    reference_date = datetime(1900, 1, 1)\n    delta = input_date - reference_date\n    day_value = delta.days\n    return day_value\n\ndef date_to_julian(date_str):\n    \"\"\"\n    Convert a date to Julian date.\n    \"\"\"\n    date_object = datetime.strptime(date_str, \"%Y-%m-%d\")\n    tt = date_object.timetuple()\n    \n\n    # Format the result as 'YYYYDDD'\n    julian_format = str('%d%03d' % (tt.tm_year, tt.tm_yday))\n\n    return julian_format\n  \n\nif __name__ == \"__main__\":\n    print(date_to_julian(test_start_date))\n    #day_index = convert_date_to_1900(test_start_date)\n    #create_cell_location_csv()\n    #findLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n    #findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n    #findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n",
  "history_output" : "today date = 2024-05-22\ntest start date:  2024-05-16\ntest end date:  2024-05-22\n/home/chetana\n2024137\n",
  "history_begin_time" : 1716394083646,
  "history_end_time" : 1716394092215,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "LxB4KwBWr7of",
  "history_input" : "from datetime import date, datetime, timedelta\nimport json\nimport math\nimport numpy as np\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\n# -125, 25, -100, 49\nsouthwest_lon = -125.0\nsouthwest_lat = 25.0\nnortheast_lon = -100.0\nnortheast_lat = 49.0\n\n# the training period is three years from 2018 to 2021\ntrain_start_date = \"2018-01-03\"\ntrain_end_date = \"2021-12-31\"\n\ndef get_operation_day():\n  # Get the current date and time\n  current_date = datetime.now()\n\n  # Calculate three days ago\n  three_days_ago = current_date - timedelta(days=3)\n\n  # Format the date as a string\n  three_days_ago_string = three_days_ago.strftime(\"%Y-%m-%d\")\n\n  print(three_days_ago_string)\n  return three_days_ago_string\n\n#test_start_date = get_operation_day()\ntest_start_date = \"2024-05-16\" # use this for debugging and generating SWE map for specific day\n#test_end_date = \"2023-10-19\"\ntest_end_date = d1\nprint(\"test start date: \", test_start_date)\nprint(\"test end date: \", test_end_date)\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\nwork_dir = f\"{homedir}/gridmet_test_run\"\n\n# Define a function to convert the month to season\ndef month_to_season(month):\n    if 3 <= month <= 5:\n        return 1\n    elif 6 <= month <= 8:\n        return 2\n    elif 9 <= month <= 11:\n        return 3\n    else:\n        return 4\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate the distance (Euclidean) between two sets of coordinates (lat1, lon1) and (lat2, lon2).\n    \n    Parameters:\n    - lat1 (float): Latitude of the first point.\n    - lon1 (float): Longitude of the first point.\n    - lat2 (float): Latitude of the second point.\n    - lon2 (float): Longitude of the second point.\n    \n    Returns:\n    - float: The Euclidean distance between the two points.\n    \"\"\"\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1 - lat2) ** 2 + (lon1 - lon2) ** 2)\n\ndef read_json_file(file_path):\n    with open(file_path, 'r', encoding='utf-8-sig') as json_file:\n        data = json.load(json_file)\n        return data\n\ndef create_cell_location_csv():\n    \"\"\"\n    Create a CSV file containing cell locations from a GeoJSON file.\n    \"\"\"\n    # read grid cell\n    gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n    all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n    if os.path.exists(all_cell_coords_file):\n        os.remove(all_cell_coords_file)\n\n    grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n    print(grid_coords_df.head())\n    gridcells = geojson.load(open(gridcells_file))\n    for idx, cell in enumerate(gridcells['features']):\n        current_cell_id = cell['properties']['cell_id']\n        cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n        cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n        grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n\n    # grid_coords_np = grid_coords_df.to_numpy()\n    # print(grid_coords_np.shape)\n    grid_coords_df.to_csv(all_cell_coords_file, index=False)\n    # np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n    # print(grid_coords_np.shape)\n\ndef get_latest_date_from_an_array(arr, date_format):\n    \"\"\"\n    Get the latest date from an array of date strings.\n    \n    Parameters:\n    - arr (list): List of date strings.\n    - date_format (str): Date format for parsing the date strings.\n    \n    Returns:\n    - str: The latest date string.\n    \"\"\"\n    return max(arr, key=lambda x: datetime.strptime(x, date_format))\n\ndef findLastStopDate(target_testing_dir, data_format):\n    \"\"\"\n    Find the last stop date from CSV files in a directory.\n    \n    Parameters:\n    - target_testing_dir (str): Directory containing CSV files.\n    - data_format (str): Date format for parsing the date strings.\n    \n    Returns:\n    - str: The latest stop date.\n    \"\"\"\n    date_list = []\n    for filename in os.listdir(target_testing_dir):\n        f = os.path.join(target_testing_dir, filename)\n        # checking if it is a file\n        if os.path.isfile(f) and \".csv\" in f:\n            pdf = pd.read_csv(f, header=0, index_col=0)\n            date_list = np.concatenate((date_list, pdf.index.unique()))\n    latest_date = get_latest_date_from_an_array(date_list, data_format)\n    print(latest_date)\n    date_time_obj = datetime.strptime(latest_date, data_format)\n    return date_time_obj.strftime(\"%Y-%m-%d\")\n\ndef convert_date_from_1900(day_value):\n    \"\"\"\n    Convert a day value since 1900 to a date string in the format \"YYYY-MM-DD\".\n    \n    Parameters:\n    - day_value (int): Number of days since January 1, 1900.\n    \n    Returns:\n    - str: Date string in \"YYYY-MM-DD\" format.\n    \"\"\"\n    reference_date = datetime(1900, 1, 1)\n    result_date = reference_date + timedelta(days=day_value)\n    return result_date.strftime(\"%Y-%m-%d\")\n\ndef convert_date_to_1900(date_string):\n    \"\"\"\n    Convert a date string in the format \"YYYY-MM-DD\" to a day value since 1900.\n    \n    Parameters:\n    - date_string (str): Date string in \"YYYY-MM-DD\" format.\n    \n    Returns:\n    - int: Number of days since January 1, 1900.\n    \"\"\"\n    input_date = datetime.strptime(date_string, \"%Y-%m-%d\")\n    reference_date = datetime(1900, 1, 1)\n    delta = input_date - reference_date\n    day_value = delta.days\n    return day_value\n\ndef date_to_julian(date_str):\n    \"\"\"\n    Convert a date to Julian date.\n    \"\"\"\n    date_object = datetime.strptime(date_str, \"%Y-%m-%d\")\n    tt = date_object.timetuple()\n    \n\n    # Format the result as 'YYYYDDD'\n    julian_format = str('%d%03d' % (tt.tm_year, tt.tm_yday))\n\n    return julian_format\n  \n\nif __name__ == \"__main__\":\n    print(date_to_julian(test_start_date))\n    #day_index = convert_date_to_1900(test_start_date)\n    #create_cell_location_csv()\n    #findLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n    #findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n    #findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n",
  "history_output" : "today date = 2024-05-22\ntest start date:  2024-05-16\ntest end date:  2024-05-22\n/home/chetana\n2024137\n",
  "history_begin_time" : 1716393382430,
  "history_end_time" : 1716393445696,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "bqb4m3hpiq2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1716350423149,
  "history_end_time" : 1716418192161,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "0qtc37j62gn",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1716264022488,
  "history_end_time" : 1716418191944,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "zj5spntry1t",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1716215991291,
  "history_end_time" : 1716220261574,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "n5kpse06kef",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1716184844609,
  "history_end_time" : 1716216036764,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "c1sp5sfi5k3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1716177613503,
  "history_end_time" : 1716418191074,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "jdfpnxaa4o2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1716091213713,
  "history_end_time" : 1716418190172,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "yx39bmq6jvd",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1716062447752,
  "history_end_time" : 1716124523777,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "68gpxilkhjh",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1716043609960,
  "history_end_time" : 1716057482673,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "yj7f6v4x968",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1716035693271,
  "history_end_time" : 1716036846648,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "fb3czqr1il7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1716004809573,
  "history_end_time" : 1716418193373,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "hjd99e62i0u",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1715982779417,
  "history_end_time" : 1716035691962,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "u7mzdkxmwtq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1715980750480,
  "history_end_time" : 1715982778735,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "8pnqod9ncwn",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1715972396901,
  "history_end_time" : 1715980749609,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "fafs30ovjdv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1715967265154,
  "history_end_time" : 1715972396069,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "jlkyz2o7mkf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1715960695169,
  "history_end_time" : 1715967264429,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "93squbg6cs8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1715957532859,
  "history_end_time" : 1715960694146,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "r04oxc29304",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1715952722342,
  "history_end_time" : 1715957517333,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "524nqnnuzmf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1715939821373,
  "history_end_time" : 1716418196125,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "v07p34ogdd9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1715937541714,
  "history_end_time" : 1715937541714,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "85hmwxwc3jz",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1715937326804,
  "history_end_time" : 1715937540102,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "rs19ocmj9h7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1715927549610,
  "history_end_time" : 1715927549610,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "zv4lhi3vygy",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1715918413061,
  "history_end_time" : 1716418197435,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "yf20hkei33c",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1715832028812,
  "history_end_time" : 1716418197454,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "sv8788li7nh",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1715799528228,
  "history_end_time" : 1716418198644,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "g3a4detb5ul",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1715798137917,
  "history_end_time" : 1715799518096,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "txvkogzjhw9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1715780310532,
  "history_end_time" : 1715780310532,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "yudrj6452kv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1715755079435,
  "history_end_time" : 1715780309790,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "4vriudbuvxk",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1715745613382,
  "history_end_time" : 1716418200090,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "njqgaqzj9lr",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1715670775257,
  "history_end_time" : 1715670775257,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "7bttthwudl5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1715668379736,
  "history_end_time" : 1715668379736,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "mes8u0rda70",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1715660606868,
  "history_end_time" : 1715660606868,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "aedhktysjbu",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1715659214188,
  "history_end_time" : 1716418200954,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "x7jetz2jj0r",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1715657268295,
  "history_end_time" : 1715657268295,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "qbonwdlov3g",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1715654494234,
  "history_end_time" : 1715654494234,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "hqolg1a8uln",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1715651069643,
  "history_end_time" : 1715654493184,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "eqcset0z6by",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1715635693980,
  "history_end_time" : 1715635693980,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "aiq48jvb2nk",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1715631991518,
  "history_end_time" : 1715631991518,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "0q8q3invm65",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1715593112662,
  "history_end_time" : 1715593112662,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "mwrw9j5029d",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1715588595885,
  "history_end_time" : 1715588595885,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "cbkwy3vizns",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1715580981191,
  "history_end_time" : 1715588592958,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "qrlyok74fo5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1715577232467,
  "history_end_time" : 1715577232467,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "qrnstgj5wf4",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1715572813673,
  "history_end_time" : 1716418203166,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "q0uwpuldh67",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1715569180211,
  "history_end_time" : 1715569180211,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "xpdkh4g6vrx",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1715566644880,
  "history_end_time" : 1715569179300,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "7hwcr1bwbmp",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1715564158840,
  "history_end_time" : 1715566643887,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "gdn5fr23qvg",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1715553269334,
  "history_end_time" : 1715553269334,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "b8utqqsqoxr",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1715551757368,
  "history_end_time" : 1716418204193,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "1r5swoo9ngd",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1715550036481,
  "history_end_time" : 1715551587877,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "erfduuo0hxf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1715548411043,
  "history_end_time" : 1715551556685,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "pue0mpj6g3u",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1715526734641,
  "history_end_time" : 1715548400445,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "rh70aamruts",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1715486409172,
  "history_end_time" : 1715486409172,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "n3rpe4g9n33",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1715400009721,
  "history_end_time" : 1715549424571,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "xh0jxzbfzjk",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1715313615592,
  "history_end_time" : 1715549422990,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "845tzl71com",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1715227214636,
  "history_end_time" : 1715549422460,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "a33kn0l01yj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1715140818988,
  "history_end_time" : 1715549421776,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "yjimpnwtk2r",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1715054413856,
  "history_end_time" : 1715549421291,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "qaym0e79uhg",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1715045815878,
  "history_end_time" : 1715045815878,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "7k9t1935d17",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1715045635627,
  "history_end_time" : 1715045800470,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "u19dwi94oyi",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714998835452,
  "history_end_time" : 1714998835452,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ovdie631yxb",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714977334920,
  "history_end_time" : 1714977334920,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "bxs26wkyc2k",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714968022068,
  "history_end_time" : 1715549419151,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "7x6izgbg6wc",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714956082175,
  "history_end_time" : 1714956340964,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "vbx6zc",
  "indicator" : "Stopped"
},{
  "history_id" : "znfq4n51ik8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714944527787,
  "history_end_time" : 1714944767094,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "vbx6zc",
  "indicator" : "Stopped"
},{
  "history_id" : "o201qio9f0w",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714943546190,
  "history_end_time" : 1715549417762,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "qz722gf8vbf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714897025133,
  "history_end_time" : 1714897025133,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "94wnxgus8fp",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714894044032,
  "history_end_time" : 1714895139360,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "m3rt1ve2235",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714881609485,
  "history_end_time" : 1715549416926,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "3en693hztqj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714409076755,
  "history_end_time" : 1714409076755,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "6ayocho7xdl",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714407283796,
  "history_end_time" : 1714407283796,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "08tmyqm8eni",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714404800007,
  "history_end_time" : 1714404800007,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "4r7uty83e1e",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714363209882,
  "history_end_time" : 1715549415890,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "1pkuz01ozde",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714362032552,
  "history_end_time" : 1714362032552,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "hqhd4lizgyk",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714355595208,
  "history_end_time" : 1714355595208,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "rcah8ulutrf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714351396803,
  "history_end_time" : 1714351396803,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "l2q9ykeg6vt",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714348539226,
  "history_end_time" : 1714348539226,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "lg1qme1j5pc",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714345973144,
  "history_end_time" : 1714345973144,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "zc49af5qmsr",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714343583772,
  "history_end_time" : 1714343583772,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "78023an52m8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714340841718,
  "history_end_time" : 1714340841718,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ys2empcywer",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714332797985,
  "history_end_time" : 1714332797985,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "5miu82jnd40",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714328816083,
  "history_end_time" : 1714328816083,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "q02biued3zn",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714323529051,
  "history_end_time" : 1714323529051,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ujlabvsdl8j",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714320354866,
  "history_end_time" : 1714320354866,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "h7gjueem07j",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714315863020,
  "history_end_time" : 1714315863020,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "08e0doxc3e8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714283543340,
  "history_end_time" : 1714315861960,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "svs5fxklya3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714281870744,
  "history_end_time" : 1714283515029,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "nbuwgxvmf3o",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714276838164,
  "history_end_time" : 1714315876837,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "v6qghula0gs",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714274662733,
  "history_end_time" : 1714281869538,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "qe9sbriid3i",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714272894618,
  "history_end_time" : 1714274352426,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "vbzme5eh0er",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714265253378,
  "history_end_time" : 1714272892765,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "2znr4pnwd30",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714265112547,
  "history_end_time" : 1714265250900,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "ecirnnm0gur",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714192735852,
  "history_end_time" : 1714265111641,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "z35go76re80",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714190417950,
  "history_end_time" : 1714274350935,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "pfdwhj4xehl",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714104009219,
  "history_end_time" : 1714274350435,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "ur4kje6sahl",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714017609537,
  "history_end_time" : 1714274349896,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "o947nglhicf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1713931209859,
  "history_end_time" : 1714274349304,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "ohsbfrptfix",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1713844809550,
  "history_end_time" : 1714274348765,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "925qeb8kshs",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1713758409165,
  "history_end_time" : 1714274347303,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "vxdrc5ouy1b",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1713672009621,
  "history_end_time" : 1714274346318,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "fo0qudfxkw1",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1713585609365,
  "history_end_time" : 1714274345799,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "l8u6a924ian",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1713499209573,
  "history_end_time" : 1714274345251,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "w94105not16",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1713412808806,
  "history_end_time" : 1714274344688,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "yop1f52k6sx",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1713326408921,
  "history_end_time" : 1714274343274,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "vvu1apa78rp",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1713283461221,
  "history_end_time" : 1713283461221,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "qeppne5l2ow",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1713240008932,
  "history_end_time" : 1714274342556,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "bh1a27dw1hf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1711771209420,
  "history_end_time" : 1711771209420,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "7itpj8ah84x",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1711684813530,
  "history_end_time" : 1714282475984,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "vt8jr3e0r88",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1711598414951,
  "history_end_time" : 1714282474543,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "tqj7uedchqz",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1711592280425,
  "history_end_time" : 1711592280425,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "tvm96ait5xw",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1711592081757,
  "history_end_time" : 1711592081757,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "wucb5wzkbfn",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1711512016138,
  "history_end_time" : 1711512016138,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "qog4oqemjp4",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1711425614047,
  "history_end_time" : 1714282483098,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "igjps9yqhi9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1711339212578,
  "history_end_time" : 1714282483756,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "92qlkxb7sib",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1711252813380,
  "history_end_time" : 1711252813380,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "60iz0ah9pwd",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1711166413875,
  "history_end_time" : 1711166413875,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "sjpuqui5qdd",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1711080008968,
  "history_end_time" : 1711080008968,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "6cxhbce381y",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710993609585,
  "history_end_time" : 1714282484621,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "uzh6lrs9ost",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710907209050,
  "history_end_time" : 1714282485244,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "amhcf5i3egn",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710820808695,
  "history_end_time" : 1714282486274,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "jqaggktq8rs",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710734409435,
  "history_end_time" : 1714282486938,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "gu7mefy5qsl",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710690214130,
  "history_end_time" : 1710690214130,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "rpst35hjsmm",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710648009118,
  "history_end_time" : 1714282488906,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "ocg27hj6tvv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710561608593,
  "history_end_time" : 1714282489524,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "6ur7vnswrto",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710475209184,
  "history_end_time" : 1714282490283,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "2jpkjf4f5r5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710388809077,
  "history_end_time" : 1714282490836,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "rxi0e92igd7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710302409324,
  "history_end_time" : 1714282491498,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "2w6mhsykpg3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710216009367,
  "history_end_time" : 1714282492096,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "qyeff4xs5vu",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710172046510,
  "history_end_time" : 1710172046510,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "bvdnjjojv72",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710129609031,
  "history_end_time" : 1714282493723,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "h5tcsyx2t9k",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710080234041,
  "history_end_time" : 1710080234041,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "m73svksp3v2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1710043208728,
  "history_end_time" : 1714282495060,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "rfmq286v6ce",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709998716229,
  "history_end_time" : 1709998716229,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "hbb140xgu2q",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709956808862,
  "history_end_time" : 1714282495724,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "bhsblzssjs8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709924987511,
  "history_end_time" : 1709924987511,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "n67qry890c1",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709870409881,
  "history_end_time" : 1714282496793,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "j5n6igu5ezh",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709845595294,
  "history_end_time" : 1709845595294,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "a4dxgxl0386",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709844621913,
  "history_end_time" : 1709844621913,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "d0mfjgfddov",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709842923330,
  "history_end_time" : 1709842923330,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "bp5ddyd1jwv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709827652587,
  "history_end_time" : 1709844621144,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "pe4cqo71q5l",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709826138649,
  "history_end_time" : 1709826138649,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "jfy28kyhf8f",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709797240780,
  "history_end_time" : 1709797240780,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "njg2f56tk8u",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709791537988,
  "history_end_time" : 1709791537988,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "m8xr1cp53gm",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709784009375,
  "history_end_time" : 1714282504658,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "obizavfchsx",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709778056637,
  "history_end_time" : 1709778056637,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "wcs6ccytedf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709774843557,
  "history_end_time" : 1709774843557,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "nf31fw7pjqy",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709765244619,
  "history_end_time" : 1709774842933,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "yzrnajxjo9u",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709763117599,
  "history_end_time" : 1709765243435,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "ck2i7t8rfhk",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709751527346,
  "history_end_time" : 1709751527346,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "5blqqrzgjhw",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709751443128,
  "history_end_time" : 1709751495321,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "yw5q69hbvcu",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709697609232,
  "history_end_time" : 1714282506638,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "upjnyacspbz",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709611208705,
  "history_end_time" : 1714282507150,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "ygy4g5zg8pl",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709524808782,
  "history_end_time" : 1714282507683,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "kn454r1c452",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709438408557,
  "history_end_time" : 1709438408557,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "e3y0x5bm135",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709352009003,
  "history_end_time" : 1709352009003,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "nuiubep5dor",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709265609341,
  "history_end_time" : 1709265609341,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "n36tmmehf4j",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709179209346,
  "history_end_time" : 1709179209346,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "p5g3fzkppr6",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709137312891,
  "history_end_time" : 1709137312891,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "t1z3v50y2kk",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709092808948,
  "history_end_time" : 1709092808948,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "kj6casbmo2l",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709085684155,
  "history_end_time" : 1709085684155,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "s5ips449r9p",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709078942124,
  "history_end_time" : 1709085672802,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "8drjlv",
  "indicator" : "Stopped"
},{
  "history_id" : "hwmkwq35i8t",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709038894839,
  "history_end_time" : 1709038894839,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "ysrpf5fumjx",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709038872960,
  "history_end_time" : 1709038879061,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "8drjlv",
  "indicator" : "Stopped"
},{
  "history_id" : "4agl7x53dky",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709006408429,
  "history_end_time" : 1709006408429,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "njg97mnos7y",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708971826162,
  "history_end_time" : 1708971826162,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "i9vhu9bm7ek",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708958410861,
  "history_end_time" : 1708958410861,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "9ur8hicjo14",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708954624189,
  "history_end_time" : 1708954624189,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "hac535porlj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708920009379,
  "history_end_time" : 1708920009379,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "wekvbmsmq3g",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708833609021,
  "history_end_time" : 1708833609021,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "8lui53ysy4k",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708747208737,
  "history_end_time" : 1708747208737,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "s76mhg8sors",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708660808973,
  "history_end_time" : 1708660808973,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "4wi3d0i9h95",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708574409598,
  "history_end_time" : 1708574409598,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "iizdleb5mny",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708488010010,
  "history_end_time" : 1708488010010,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "z86l4ig1y36",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708401608857,
  "history_end_time" : 1708401608857,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "s3x8dvxfc73",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708352215495,
  "history_end_time" : 1708352215495,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "l139h72cmo6",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708348193270,
  "history_end_time" : 1708352214866,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "8drjlv",
  "indicator" : "Stopped"
},{
  "history_id" : "ioqf28ewawd",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708315209010,
  "history_end_time" : 1708315209010,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "cdjmqlfm9dr",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708312689881,
  "history_end_time" : 1708312689881,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "799as3m6iz8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708305309900,
  "history_end_time" : 1708312689124,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "8drjlv",
  "indicator" : "Stopped"
},{
  "history_id" : "hn11zczlbqd",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708242679299,
  "history_end_time" : 1708242679299,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "yieq78ujna7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708240733511,
  "history_end_time" : 1708240733511,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "vo3tit5ae02",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708238769929,
  "history_end_time" : 1708238769929,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "515n168oakb",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708237144877,
  "history_end_time" : 1708237144877,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "z5giy6ckdel",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708235187227,
  "history_end_time" : 1708235187227,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "8vs2876tsl0",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708233874631,
  "history_end_time" : 1708233874631,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "60gt05avkwv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708228809100,
  "history_end_time" : 1708228809100,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "z5mqaplozdx",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708227613799,
  "history_end_time" : 1708227613799,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "089iax25cry",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708142409289,
  "history_end_time" : 1708142409289,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "wcq7tuseli1",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1708056009080,
  "history_end_time" : 1708056009080,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "fd14dors88a",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707969608993,
  "history_end_time" : 1707969608993,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "bmnt4opoxpb",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707883208805,
  "history_end_time" : 1707883208805,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "s4v1j6lfgew",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707796809240,
  "history_end_time" : 1707796809240,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "0t9symooqom",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707750669718,
  "history_end_time" : 1707750669718,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "ku9lehevbid",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707710409314,
  "history_end_time" : 1707710409314,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "g2e9skr9hmf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707624009321,
  "history_end_time" : 1707624009321,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "5uqxlkw7fw1",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707537608486,
  "history_end_time" : 1707537608486,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "1j5hb4im32k",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707491746689,
  "history_end_time" : 1707491746689,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "l7nuo6t4qrk",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707484657892,
  "history_end_time" : 1707484657892,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "ybf9toynedr",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707451209585,
  "history_end_time" : 1707451209585,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ybqyq2ij9bv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707434644170,
  "history_end_time" : 1707434644170,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "qkceepnucg7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707432571794,
  "history_end_time" : 1707432571794,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "8drjlv",
  "indicator" : "Skipped"
},{
  "history_id" : "reqv9foygf4",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707431129232,
  "history_end_time" : 1707432053948,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "8drjlv",
  "indicator" : "Stopped"
},{
  "history_id" : "8i87kh54pgq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707418188626,
  "history_end_time" : 1707418188626,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "mahjd7",
  "indicator" : "Skipped"
},{
  "history_id" : "x2czv3ynnnv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707413610268,
  "history_end_time" : 1707413610268,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "mahjd7",
  "indicator" : "Skipped"
},{
  "history_id" : "1lhmn3mlf33",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707364808579,
  "history_end_time" : 1707364808579,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "paux4mcsdmx",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707278408833,
  "history_end_time" : 1707278408833,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "r60fqbigw84",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707192718853,
  "history_end_time" : 1707192718853,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "xziz03g83we",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707192008953,
  "history_end_time" : 1707448888638,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "kk6dnbblbgd",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707189399011,
  "history_end_time" : 1707189399011,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "z24tnkpkgv3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707105609029,
  "history_end_time" : 1707750639181,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "8a1qv963pr4",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1707019209085,
  "history_end_time" : 1707750639653,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "rbnmktiwq2p",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706932808958,
  "history_end_time" : 1707750640196,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "0c4w21kuli6",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706846409428,
  "history_end_time" : 1707750640630,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "ao8zythfz6e",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706760009710,
  "history_end_time" : 1707750643269,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "8rae8s55sf6",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706673609224,
  "history_end_time" : 1707750643790,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "q25uines62c",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706587209157,
  "history_end_time" : 1707750644972,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "cop40bm0sia",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706500808764,
  "history_end_time" : 1707750645649,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "fgokzrho9j8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706414409092,
  "history_end_time" : 1707750646094,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "aj59un4hhem",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706366105881,
  "history_end_time" : 1706366105881,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "s0bnvka5tqv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706364888430,
  "history_end_time" : 1706364888430,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ag09bfel2ho",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706328009250,
  "history_end_time" : 1707750646892,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "znc65w42uy2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706280497908,
  "history_end_time" : 1706280497908,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "2j2337rl5nk",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706244881211,
  "history_end_time" : 1706244881211,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "mdg1evi45wv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706241609470,
  "history_end_time" : 1706244810643,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "swbd9qze5os",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706155209344,
  "history_end_time" : 1706244801307,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "d1775bwds5t",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1706068808800,
  "history_end_time" : 1706244800328,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "4q3v1pd0rm5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705982408764,
  "history_end_time" : 1706244799961,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "htn2racl4k8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705896758931,
  "history_end_time" : 1706244798998,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "n1lay485izm",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705896009525,
  "history_end_time" : 1706244798516,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "aqvvvkcezke",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705849063780,
  "history_end_time" : 1706244798005,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "i7dv3jr786f",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705809608685,
  "history_end_time" : 1705849649590,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "n9c36svhm34",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705793526821,
  "history_end_time" : 1705849647047,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "xm88sutuqvi",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705790835047,
  "history_end_time" : 1705790835047,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "xkdqqn1cdit",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705770627716,
  "history_end_time" : 1705849642236,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "wjubvxr13ru",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705762760572,
  "history_end_time" : 1705849640880,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "5qu6m71pud7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705723209208,
  "history_end_time" : 1705789738432,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "qmry0dlxjyz",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705636808593,
  "history_end_time" : 1705770636200,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "slz0zean92z",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705550409030,
  "history_end_time" : 1705770635525,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "gga2ctb9mcx",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705464008535,
  "history_end_time" : 1705770635029,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "pelenra73kp",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705422422459,
  "history_end_time" : 1705422422459,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "bgubfyjq00u",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705377609134,
  "history_end_time" : 1705770633020,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "532pmagm3dq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705291208739,
  "history_end_time" : 1705770632129,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "pisc2kbjhe3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705278850561,
  "history_end_time" : 1705278850561,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "apn5zkbwv18",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705270952735,
  "history_end_time" : 1705270952735,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "4h6dcm1konk",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705204809253,
  "history_end_time" : 1705789661990,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "mhp7a8eycen",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705169057182,
  "history_end_time" : 1705169057182,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "2cv8oud8f49",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705118409361,
  "history_end_time" : 1705789660755,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "cx90tdp0tb7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705072448065,
  "history_end_time" : 1705072448065,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "6y87e81koge",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1705032009166,
  "history_end_time" : 1705789659528,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "fspkp03y4db",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704979918290,
  "history_end_time" : 1704979918290,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "o9t4zihcqzq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704945609379,
  "history_end_time" : 1705789658792,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "1g6uj6vytxk",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704918977588,
  "history_end_time" : 1704918977588,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "sbr8dfkn0o7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704908919588,
  "history_end_time" : 1704908919588,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "96fgu9zknxw",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704859207418,
  "history_end_time" : 1705789668243,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "6yudosq2z9g",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704775840734,
  "history_end_time" : 1704775840734,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "k2rqie0m4kp",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704772806622,
  "history_end_time" : 1705789667272,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "j2o4bzw81w9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704726161234,
  "history_end_time" : 1704727049022,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "gzg1cu1m6ly",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704686408164,
  "history_end_time" : 1705789666634,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "jw4stsbs9ce",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704644803688,
  "history_end_time" : 1704644803688,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "xqt0e4rbng8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704600007976,
  "history_end_time" : 1705789665905,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "27aeeuc2k7m",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704566156608,
  "history_end_time" : 1704566156608,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "l1w556zuzxc",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704565587365,
  "history_end_time" : 1704565587365,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "h6uxf590yv4",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704564424146,
  "history_end_time" : 1704564424146,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "wtqdix6snbc",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704562992158,
  "history_end_time" : 1704562992158,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "dmccaibqnmn",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704561889780,
  "history_end_time" : 1704561889780,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "mgk4p197cr2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704561861150,
  "history_end_time" : 1704561887032,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "th2tdvzkda3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704555479189,
  "history_end_time" : 1704555479189,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "51x6yq1ki8y",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704555028180,
  "history_end_time" : 1704555028180,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "85o7fiajv7h",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704553241753,
  "history_end_time" : 1704553241753,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "d7wE4tQom0A3",
  "history_input" : "from datetime import date, datetime, timedelta\nimport json\nimport math\nimport numpy as np\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\n# -125, 25, -100, 49\nsouthwest_lon = -125.0\nsouthwest_lat = 25.0\nnortheast_lon = -100.0\nnortheast_lat = 49.0\n\ntrain_start_date = \"2018-01-01\"\ntrain_end_date = \"2021-12-31\"\n\ndef get_operation_day():\n  # Get the current date and time\n  current_date = datetime.now()\n\n  # Calculate three days ago\n  three_days_ago = current_date - timedelta(days=3)\n\n  # Format the date as a string\n  three_days_ago_string = three_days_ago.strftime(\"%Y-%m-%d\")\n\n  print(three_days_ago_string)\n  return three_days_ago_string\n\n#test_start_date = get_operation_day()\ntest_start_date = \"2024-01-01\" # use this for debugging\ntest_end_date = \"2023-10-11\"\n#test_end_date = d1\nprint(\"test start date: \", test_start_date)\nprint(\"test end date: \", test_end_date)\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\nwork_dir = f\"{homedir}/gridmet_test_run\"\n\n# Define a function to convert the month to season\ndef month_to_season(month):\n    if 3 <= month <= 5:\n        return 1\n    elif 6 <= month <= 8:\n        return 2\n    elif 9 <= month <= 11:\n        return 3\n    else:\n        return 4\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate the distance (Euclidean) between two sets of coordinates (lat1, lon1) and (lat2, lon2).\n    \n    Parameters:\n    - lat1 (float): Latitude of the first point.\n    - lon1 (float): Longitude of the first point.\n    - lat2 (float): Latitude of the second point.\n    - lon2 (float): Longitude of the second point.\n    \n    Returns:\n    - float: The Euclidean distance between the two points.\n    \"\"\"\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1 - lat2) ** 2 + (lon1 - lon2) ** 2)\n\ndef read_json_file(file_path):\n    with open(file_path, 'r', encoding='utf-8-sig') as json_file:\n        data = json.load(json_file)\n        return data\n\ndef create_cell_location_csv():\n    \"\"\"\n    Create a CSV file containing cell locations from a GeoJSON file.\n    \"\"\"\n    # read grid cell\n    gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n    all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n    if os.path.exists(all_cell_coords_file):\n        os.remove(all_cell_coords_file)\n\n    grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n    print(grid_coords_df.head())\n    gridcells = geojson.load(open(gridcells_file))\n    for idx, cell in enumerate(gridcells['features']):\n        current_cell_id = cell['properties']['cell_id']\n        cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n        cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n        grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n\n    # grid_coords_np = grid_coords_df.to_numpy()\n    # print(grid_coords_np.shape)\n    grid_coords_df.to_csv(all_cell_coords_file, index=False)\n    # np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n    # print(grid_coords_np.shape)\n\ndef get_latest_date_from_an_array(arr, date_format):\n    \"\"\"\n    Get the latest date from an array of date strings.\n    \n    Parameters:\n    - arr (list): List of date strings.\n    - date_format (str): Date format for parsing the date strings.\n    \n    Returns:\n    - str: The latest date string.\n    \"\"\"\n    return max(arr, key=lambda x: datetime.strptime(x, date_format))\n\ndef findLastStopDate(target_testing_dir, data_format):\n    \"\"\"\n    Find the last stop date from CSV files in a directory.\n    \n    Parameters:\n    - target_testing_dir (str): Directory containing CSV files.\n    - data_format (str): Date format for parsing the date strings.\n    \n    Returns:\n    - str: The latest stop date.\n    \"\"\"\n    date_list = []\n    for filename in os.listdir(target_testing_dir):\n        f = os.path.join(target_testing_dir, filename)\n        # checking if it is a file\n        if os.path.isfile(f) and \".csv\" in f:\n            pdf = pd.read_csv(f, header=0, index_col=0)\n            date_list = np.concatenate((date_list, pdf.index.unique()))\n    latest_date = get_latest_date_from_an_array(date_list, data_format)\n    print(latest_date)\n    date_time_obj = datetime.strptime(latest_date, data_format)\n    return date_time_obj.strftime(\"%Y-%m-%d\")\n\ndef convert_date_from_1900(day_value):\n    \"\"\"\n    Convert a day value since 1900 to a date string in the format \"YYYY-MM-DD\".\n    \n    Parameters:\n    - day_value (int): Number of days since January 1, 1900.\n    \n    Returns:\n    - str: Date string in \"YYYY-MM-DD\" format.\n    \"\"\"\n    reference_date = datetime(1900, 1, 1)\n    result_date = reference_date + timedelta(days=day_value)\n    return result_date.strftime(\"%Y-%m-%d\")\n\ndef convert_date_to_1900(date_string):\n    \"\"\"\n    Convert a date string in the format \"YYYY-MM-DD\" to a day value since 1900.\n    \n    Parameters:\n    - date_string (str): Date string in \"YYYY-MM-DD\" format.\n    \n    Returns:\n    - int: Number of days since January 1, 1900.\n    \"\"\"\n    input_date = datetime.strptime(date_string, \"%Y-%m-%d\")\n    reference_date = datetime(1900, 1, 1)\n    delta = input_date - reference_date\n    day_value = delta.days\n    return day_value\n\ndef date_to_julian(date_str):\n    \"\"\"\n    Convert a date to Julian date.\n    \"\"\"\n    date_object = datetime.strptime(date_str, \"%Y-%m-%d\")\n    tt = date_object.timetuple()\n    \n\n    # Format the result as 'YYYYDDD'\n    julian_format = str('%d%03d' % (tt.tm_year, tt.tm_yday))\n\n    return julian_format\n  \n\nif __name__ == \"__main__\":\n    print(date_to_julian(test_start_date))\n    #day_index = convert_date_to_1900(test_start_date)\n    #create_cell_location_csv()\n    #findLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n    #findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n    #findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n",
  "history_output" : "today date = 2024-01-06\ntest start date:  2024-01-01\ntest end date:  2023-10-11\n/home/chetana\n2024001\n",
  "history_begin_time" : 1704553235162,
  "history_end_time" : 1704553235889,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "p6o5udmsql6",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704552254596,
  "history_end_time" : 1704552254596,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "mtv615x6g0s",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704513607199,
  "history_end_time" : 1705789671084,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "godv82ny65r",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704427207315,
  "history_end_time" : 1705789671858,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "12rlgisywmy",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704340807374,
  "history_end_time" : 1705789673101,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "a3o5wsj4y26",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704330109276,
  "history_end_time" : 1704330109276,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ummvnp9a6ve",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704329364833,
  "history_end_time" : 1704329364833,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "5z02z8cznqw",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704254407312,
  "history_end_time" : 1705789675629,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "zm73e9px2ka",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704208947944,
  "history_end_time" : 1704208947944,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "5rlcd7464hg",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704207352004,
  "history_end_time" : 1704207352004,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "qy1g6z2j688",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704205859353,
  "history_end_time" : 1704205859353,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ukst7bj0xb3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704168007222,
  "history_end_time" : 1705789676813,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "x0oj8dqjqlm",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1704081607275,
  "history_end_time" : 1705789677600,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "jy6x2fxzkjl",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703995208081,
  "history_end_time" : 1705789678794,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "fk2oldm0osc",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703962871388,
  "history_end_time" : 1703962871388,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "h8pdvsqq5so",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703960265430,
  "history_end_time" : 1703960265430,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "0jhgk6c6zna",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703959737824,
  "history_end_time" : 1703959737824,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "3b3b0km86vi",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703958611571,
  "history_end_time" : 1703958611571,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "zuxe7oj9x4e",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703955838208,
  "history_end_time" : 1703955838208,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "516j3qpvxv7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703954150338,
  "history_end_time" : 1703954150338,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "2tepqvsyjyn",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703915768055,
  "history_end_time" : 1703915768055,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "fdfzdll4ppm",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703915283469,
  "history_end_time" : 1703915283469,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ok7w10d0cq1",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703914476623,
  "history_end_time" : 1703914476623,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "uo98n92lxaq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703912302155,
  "history_end_time" : 1703912302155,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "8557jhj2kd2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703908806903,
  "history_end_time" : 1705789681219,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "y1t7qduwf0h",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703906215361,
  "history_end_time" : 1703906215361,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "pbgfzbr331i",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703900919127,
  "history_end_time" : 1703900919127,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "m0fcojil552",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703899837749,
  "history_end_time" : 1703899837749,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "aruc8x6bnqv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703897422933,
  "history_end_time" : 1703897422933,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "8pdq7b8ds96",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703896125565,
  "history_end_time" : 1703896125565,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "t50ip6ygdxe",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703890275973,
  "history_end_time" : 1703890275973,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "beudy0zt4hm",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703886800792,
  "history_end_time" : 1703886800792,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "a11ds9epoz7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703885997748,
  "history_end_time" : 1703885997748,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "b84f4y0tu98",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703880194698,
  "history_end_time" : 1703880194698,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "tg46sjpeatj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703872753016,
  "history_end_time" : 1703872753016,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "22wdos5cheh",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703869828222,
  "history_end_time" : 1703869828222,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "aqfe7dju70c",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703868616912,
  "history_end_time" : 1703868616912,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "pldgqqpdxfc",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703867114030,
  "history_end_time" : 1703867114030,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "semtcjgbwlm",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703864885427,
  "history_end_time" : 1703864885427,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "wtjus4ichwl",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703862637330,
  "history_end_time" : 1703862637330,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "1noyd5465sn",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703827227305,
  "history_end_time" : 1703827227305,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ym9528tpuwv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703822411242,
  "history_end_time" : 1703822411242,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "72xpgij9og5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703786924620,
  "history_end_time" : 1703789718818,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "sp0nn6dwoi2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703786053473,
  "history_end_time" : 1703786917609,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "o1ku89mawtj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703778395376,
  "history_end_time" : 1703778395376,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "0yntzww6rv6",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703739034274,
  "history_end_time" : 1703739034274,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "77otm68wb90",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703738754319,
  "history_end_time" : 1703792459273,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "MThT4qfPP8jO",
  "history_input" : "from datetime import date, datetime, timedelta\nimport json\nimport math\nimport numpy as np\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\n# -125, 25, -100, 49\nsouthwest_lon = -125.0\nsouthwest_lat = 25.0\nnortheast_lon = -100.0\nnortheast_lat = 49.0\n\ntrain_start_date = \"2018-01-01\"\ntrain_end_date = \"2021-12-31\"\n\ndef get_operation_day():\n  # Get the current date and time\n  current_date = datetime.now()\n\n  # Calculate three days ago\n  three_days_ago = current_date - timedelta(days=3)\n\n  # Format the date as a string\n  three_days_ago_string = three_days_ago.strftime(\"%Y-%m-%d\")\n\n  print(three_days_ago_string)\n  return three_days_ago_string\n\ntest_start_date = get_operation_day()\n# test_start_date = \"2023-10-03\" # use this for debugging\ntest_end_date = \"2023-10-11\"\n#test_end_date = d1\nprint(\"test start date: \", test_start_date)\nprint(\"test end date: \", test_end_date)\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\nwork_dir = f\"{homedir}/gridmet_test_run\"\n\n# Define a function to convert the month to season\ndef month_to_season(month):\n    if 3 <= month <= 5:\n        return 1\n    elif 6 <= month <= 8:\n        return 2\n    elif 9 <= month <= 11:\n        return 3\n    else:\n        return 4\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate the distance (Euclidean) between two sets of coordinates (lat1, lon1) and (lat2, lon2).\n    \n    Parameters:\n    - lat1 (float): Latitude of the first point.\n    - lon1 (float): Longitude of the first point.\n    - lat2 (float): Latitude of the second point.\n    - lon2 (float): Longitude of the second point.\n    \n    Returns:\n    - float: The Euclidean distance between the two points.\n    \"\"\"\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1 - lat2) ** 2 + (lon1 - lon2) ** 2)\n\ndef read_json_file(file_path):\n    with open(file_path, 'r', encoding='utf-8-sig') as json_file:\n        data = json.load(json_file)\n        return data\n\ndef create_cell_location_csv():\n    \"\"\"\n    Create a CSV file containing cell locations from a GeoJSON file.\n    \"\"\"\n    # read grid cell\n    gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n    all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n    if os.path.exists(all_cell_coords_file):\n        os.remove(all_cell_coords_file)\n\n    grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n    print(grid_coords_df.head())\n    gridcells = geojson.load(open(gridcells_file))\n    for idx, cell in enumerate(gridcells['features']):\n        current_cell_id = cell['properties']['cell_id']\n        cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n        cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n        grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n\n    # grid_coords_np = grid_coords_df.to_numpy()\n    # print(grid_coords_np.shape)\n    grid_coords_df.to_csv(all_cell_coords_file, index=False)\n    # np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n    # print(grid_coords_np.shape)\n\ndef get_latest_date_from_an_array(arr, date_format):\n    \"\"\"\n    Get the latest date from an array of date strings.\n    \n    Parameters:\n    - arr (list): List of date strings.\n    - date_format (str): Date format for parsing the date strings.\n    \n    Returns:\n    - str: The latest date string.\n    \"\"\"\n    return max(arr, key=lambda x: datetime.strptime(x, date_format))\n\ndef findLastStopDate(target_testing_dir, data_format):\n    \"\"\"\n    Find the last stop date from CSV files in a directory.\n    \n    Parameters:\n    - target_testing_dir (str): Directory containing CSV files.\n    - data_format (str): Date format for parsing the date strings.\n    \n    Returns:\n    - str: The latest stop date.\n    \"\"\"\n    date_list = []\n    for filename in os.listdir(target_testing_dir):\n        f = os.path.join(target_testing_dir, filename)\n        # checking if it is a file\n        if os.path.isfile(f) and \".csv\" in f:\n            pdf = pd.read_csv(f, header=0, index_col=0)\n            date_list = np.concatenate((date_list, pdf.index.unique()))\n    latest_date = get_latest_date_from_an_array(date_list, data_format)\n    print(latest_date)\n    date_time_obj = datetime.strptime(latest_date, data_format)\n    return date_time_obj.strftime(\"%Y-%m-%d\")\n\ndef convert_date_from_1900(day_value):\n    \"\"\"\n    Convert a day value since 1900 to a date string in the format \"YYYY-MM-DD\".\n    \n    Parameters:\n    - day_value (int): Number of days since January 1, 1900.\n    \n    Returns:\n    - str: Date string in \"YYYY-MM-DD\" format.\n    \"\"\"\n    reference_date = datetime(1900, 1, 1)\n    result_date = reference_date + timedelta(days=day_value)\n    return result_date.strftime(\"%Y-%m-%d\")\n\ndef convert_date_to_1900(date_string):\n    \"\"\"\n    Convert a date string in the format \"YYYY-MM-DD\" to a day value since 1900.\n    \n    Parameters:\n    - date_string (str): Date string in \"YYYY-MM-DD\" format.\n    \n    Returns:\n    - int: Number of days since January 1, 1900.\n    \"\"\"\n    input_date = datetime.strptime(date_string, \"%Y-%m-%d\")\n    reference_date = datetime(1900, 1, 1)\n    delta = input_date - reference_date\n    day_value = delta.days\n    return day_value\n\ndef date_to_julian(date_str):\n    \"\"\"\n    Convert a date to Julian date.\n    \"\"\"\n    date_object = datetime.strptime(date_str, \"%Y-%m-%d\")\n    tt = date_object.timetuple()\n    \n\n    # Format the result as 'YYYYDDD'\n    julian_format = str('%d%03d' % (tt.tm_year, tt.tm_yday))\n\n    return julian_format\n  \n  \nprint(date_to_julian(\"2022-10-02\"))\n#day_index = convert_date_to_1900(test_start_date)\n#create_cell_location_csv()\n#findLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n",
  "history_output" : "today date = 2023-12-28\n2023-12-25\ntest start date:  2023-12-25\ntest end date:  2023-10-11\n/home/chetana\n2022275\n",
  "history_begin_time" : 1703736177277,
  "history_end_time" : 1703736177980,
  "history_notes" : "add operation day getter to run the workflow for three days ago. Can change later. ",
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "once6cu0j31",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703736166890,
  "history_end_time" : 1703737316874,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "8zs7ingjn7c",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703694763539,
  "history_end_time" : 1703694763539,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "uq2453mh4nh",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703659541189,
  "history_end_time" : 1703659541189,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "n7kq058ypgm",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703658144669,
  "history_end_time" : 1703658144669,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "uohxikf2xe0",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703650855758,
  "history_end_time" : 1703650855758,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "kfzei4ld1p9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703646751516,
  "history_end_time" : 1703650812431,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "omlndfc1mu9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703642120883,
  "history_end_time" : 1703646749619,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "gz7m2woj14z",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703641988911,
  "history_end_time" : 1703642074626,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "r9ayxm3xqf5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703629665493,
  "history_end_time" : 1703629665493,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "k6alzp639vy",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703626687966,
  "history_end_time" : 1703627783049,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "7kh48zpiiis",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703625782078,
  "history_end_time" : 1703625782078,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ywql1o1yijh",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1703624783801,
  "history_end_time" : 1703624783801,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "t9lf4q4rclz",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702875592806,
  "history_end_time" : 1702875592806,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "enhoeilggik",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702871264363,
  "history_end_time" : 1702871264363,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "8jg5dmar7tl",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702867996376,
  "history_end_time" : 1702867996376,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "yd1zdp7yghf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702866593373,
  "history_end_time" : 1702866593373,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "5n15z3g4ax7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702866137588,
  "history_end_time" : 1702866137588,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "wkdlt4gvboe",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702657305595,
  "history_end_time" : 1702657305595,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "mogss0jh0z7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702633223031,
  "history_end_time" : 1702633223031,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "tdwxsd6xdy1",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702633156895,
  "history_end_time" : 1702633163894,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "jzu1cmh252i",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702274520870,
  "history_end_time" : 1702274520870,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "lguk0lvklsb",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702257109186,
  "history_end_time" : 1702257109186,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "4f2udi4mrsf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702253506489,
  "history_end_time" : 1702253506489,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "nccdp41hnjc",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702047800880,
  "history_end_time" : 1702047800880,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "s4i56bfxc5f",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1702046671826,
  "history_end_time" : 1702047789479,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "5p1ih2n0h26",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701838623993,
  "history_end_time" : 1701838623993,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "yyftfdgj3i4",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701272631461,
  "history_end_time" : 1701272875104,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "xcqfe21bl4o",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701272152690,
  "history_end_time" : 1701272363346,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "yc5oyc3be9w",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701269761311,
  "history_end_time" : 1701269761311,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "jo73hxruzpt",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701245472002,
  "history_end_time" : 1701245472002,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "o3a264sit1t",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701234300605,
  "history_end_time" : 1701234300605,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "9fzabuewtit",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701232375260,
  "history_end_time" : 1701234158039,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "a0jm7xrg746",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701231048656,
  "history_end_time" : 1701231048656,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "RaNP1DC601Nu",
  "history_input" : "from datetime import date, datetime, timedelta\nimport json\nimport math\nimport numpy as np\nimport os\nimport pandas as pd\n# import ee\n#import seaborn as sns\nimport matplotlib.pyplot as plt\n#import geopandas as gpd\n#import geojson\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"2019-01-01\"\ntrain_end_date = \"2022-12-31\"\n\ntest_start_date = \"2022-11-17\"\ntest_end_date = \"2023-10-07\"\n#test_end_date = d1\nprint(\"test start date: \", test_start_date)\nprint(\"test end date: \", test_end_date)\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\nwork_dir = f\"{homedir}/gridmet_test_run\"\n\n# Define a function to convert the month to season\ndef month_to_season(month):\n    if 3 <= month <= 5:\n        return 1\n    elif 6 <= month <= 8:\n        return 2\n    elif 9 <= month <= 11:\n        return 3\n    else:\n        return 4\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate the distance (Euclidean) between two sets of coordinates (lat1, lon1) and (lat2, lon2).\n    \n    Parameters:\n    - lat1 (float): Latitude of the first point.\n    - lon1 (float): Longitude of the first point.\n    - lat2 (float): Latitude of the second point.\n    - lon2 (float): Longitude of the second point.\n    \n    Returns:\n    - float: The Euclidean distance between the two points.\n    \"\"\"\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1 - lat2) ** 2 + (lon1 - lon2) ** 2)\n\ndef create_cell_location_csv():\n    \"\"\"\n    Create a CSV file containing cell locations from a GeoJSON file.\n    \"\"\"\n    # read grid cell\n    gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n    all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n    if os.path.exists(all_cell_coords_file):\n        os.remove(all_cell_coords_file)\n\n    grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n    print(grid_coords_df.head())\n    gridcells = geojson.load(open(gridcells_file))\n    for idx, cell in enumerate(gridcells['features']):\n        current_cell_id = cell['properties']['cell_id']\n        cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n        cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n        grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n\n    # grid_coords_np = grid_coords_df.to_numpy()\n    # print(grid_coords_np.shape)\n    grid_coords_df.to_csv(all_cell_coords_file, index=False)\n    # np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n    # print(grid_coords_np.shape)\n\ndef get_latest_date_from_an_array(arr, date_format):\n    \"\"\"\n    Get the latest date from an array of date strings.\n    \n    Parameters:\n    - arr (list): List of date strings.\n    - date_format (str): Date format for parsing the date strings.\n    \n    Returns:\n    - str: The latest date string.\n    \"\"\"\n    return max(arr, key=lambda x: datetime.strptime(x, date_format))\n\ndef findLastStopDate(target_testing_dir, data_format):\n    \"\"\"\n    Find the last stop date from CSV files in a directory.\n    \n    Parameters:\n    - target_testing_dir (str): Directory containing CSV files.\n    - data_format (str): Date format for parsing the date strings.\n    \n    Returns:\n    - str: The latest stop date.\n    \"\"\"\n    date_list = []\n    for filename in os.listdir(target_testing_dir):\n        f = os.path.join(target_testing_dir, filename)\n        # checking if it is a file\n        if os.path.isfile(f) and \".csv\" in f:\n            pdf = pd.read_csv(f, header=0, index_col=0)\n            date_list = np.concatenate((date_list, pdf.index.unique()))\n    latest_date = get_latest_date_from_an_array(date_list, data_format)\n    print(latest_date)\n    date_time_obj = datetime.strptime(latest_date, data_format)\n    return date_time_obj.strftime(\"%Y-%m-%d\")\n\ndef convert_date_from_1900(day_value):\n    \"\"\"\n    Convert a day value since 1900 to a date string in the format \"YYYY-MM-DD\".\n    \n    Parameters:\n    - day_value (int): Number of days since January 1, 1900.\n    \n    Returns:\n    - str: Date string in \"YYYY-MM-DD\" format.\n    \"\"\"\n    reference_date = datetime(1900, 1, 1)\n    result_date = reference_date + timedelta(days=day_value)\n    return result_date.strftime(\"%Y-%m-%d\")\n\ndef convert_date_to_1900(date_string):\n    \"\"\"\n    Convert a date string in the format \"YYYY-MM-DD\" to a day value since 1900.\n    \n    Parameters:\n    - date_string (str): Date string in \"YYYY-MM-DD\" format.\n    \n    Returns:\n    - int: Number of days since January 1, 1900.\n    \"\"\"\n    input_date = datetime.strptime(date_string, \"%Y-%m-%d\")\n    reference_date = datetime(1900, 1, 1)\n    delta = input_date - reference_date\n    day_value = delta.days\n    return day_value\n\ndef date_to_julian(date_str):\n    \"\"\"\n    Convert a date to Julian date.\n    \"\"\"\n    date_object = datetime.strptime(date_str, \"%Y-%m-%d\")\n    tt = date_object.timetuple()\n    \n\n    # Format the result as 'YYYYDDD'\n    julian_format = str('%d%03d' % (tt.tm_year, tt.tm_yday))\n\n    return julian_format\n  \n  \nprint(date_to_julian(\"2022-10-02\"))\n#day_index = convert_date_to_1900(test_start_date)\n#create_cell_location_csv()\n#findLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n",
  "history_output" : "today date = 2023-11-29\ntest start date:  2022-11-17\ntest end date:  2023-10-07\n/home/chetana\n2022275\n",
  "history_begin_time" : 1701230952722,
  "history_end_time" : 1701230953496,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "5qj10ztzv1p",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701230933451,
  "history_end_time" : 1701230952341,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "velqc5pax7h",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701230796320,
  "history_end_time" : 1701230932248,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "u1gigkgb6kv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701230384871,
  "history_end_time" : 1701230384871,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "xf66yr6eony",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701229983496,
  "history_end_time" : 1701229983496,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "w2k0206jeqv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701228899359,
  "history_end_time" : 1701228899359,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ck8ohd3qpwg",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701228374790,
  "history_end_time" : 1701228374790,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "r3qh24j5rn1",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701228236330,
  "history_end_time" : 1701228236330,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "z4w7giu9idp",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701228118493,
  "history_end_time" : 1701228118493,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "1sluop2364w",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701228056515,
  "history_end_time" : 1701228056515,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "4yoqgf0gunx",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701227912495,
  "history_end_time" : 1701227912495,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "45c2c162hdr",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1701013937394,
  "history_end_time" : 1701015920035,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "fmd6f19vyr9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700974688681,
  "history_end_time" : 1700974688681,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "2rtr083kr5t",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700885116793,
  "history_end_time" : 1700885116793,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "l7os6l2Ycuee",
  "history_input" : "from datetime import date, datetime, timedelta\nimport json\nimport math\nimport numpy as np\nimport os\nimport pandas as pd\n# import ee\n#import seaborn as sns\nimport matplotlib.pyplot as plt\n#import geopandas as gpd\n#import geojson\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"2019-01-01\"\ntrain_end_date = \"2022-12-31\"\n\ntest_start_date = \"2022-10-05\"\ntest_end_date = \"2023-10-07\"\n#test_end_date = d1\nprint(\"test start date: \", test_start_date)\nprint(\"test end date: \", test_end_date)\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\nwork_dir = f\"{homedir}/gridmet_test_run\"\n\n# Define a function to convert the month to season\ndef month_to_season(month):\n    if 3 <= month <= 5:\n        return 1\n    elif 6 <= month <= 8:\n        return 2\n    elif 9 <= month <= 11:\n        return 3\n    else:\n        return 4\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate the distance (Euclidean) between two sets of coordinates (lat1, lon1) and (lat2, lon2).\n    \n    Parameters:\n    - lat1 (float): Latitude of the first point.\n    - lon1 (float): Longitude of the first point.\n    - lat2 (float): Latitude of the second point.\n    - lon2 (float): Longitude of the second point.\n    \n    Returns:\n    - float: The Euclidean distance between the two points.\n    \"\"\"\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1 - lat2) ** 2 + (lon1 - lon2) ** 2)\n\ndef create_cell_location_csv():\n    \"\"\"\n    Create a CSV file containing cell locations from a GeoJSON file.\n    \"\"\"\n    # read grid cell\n    gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n    all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n    if os.path.exists(all_cell_coords_file):\n        os.remove(all_cell_coords_file)\n\n    grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n    print(grid_coords_df.head())\n    gridcells = geojson.load(open(gridcells_file))\n    for idx, cell in enumerate(gridcells['features']):\n        current_cell_id = cell['properties']['cell_id']\n        cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n        cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n        grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n\n    # grid_coords_np = grid_coords_df.to_numpy()\n    # print(grid_coords_np.shape)\n    grid_coords_df.to_csv(all_cell_coords_file, index=False)\n    # np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n    # print(grid_coords_np.shape)\n\ndef get_latest_date_from_an_array(arr, date_format):\n    \"\"\"\n    Get the latest date from an array of date strings.\n    \n    Parameters:\n    - arr (list): List of date strings.\n    - date_format (str): Date format for parsing the date strings.\n    \n    Returns:\n    - str: The latest date string.\n    \"\"\"\n    return max(arr, key=lambda x: datetime.strptime(x, date_format))\n\ndef findLastStopDate(target_testing_dir, data_format):\n    \"\"\"\n    Find the last stop date from CSV files in a directory.\n    \n    Parameters:\n    - target_testing_dir (str): Directory containing CSV files.\n    - data_format (str): Date format for parsing the date strings.\n    \n    Returns:\n    - str: The latest stop date.\n    \"\"\"\n    date_list = []\n    for filename in os.listdir(target_testing_dir):\n        f = os.path.join(target_testing_dir, filename)\n        # checking if it is a file\n        if os.path.isfile(f) and \".csv\" in f:\n            pdf = pd.read_csv(f, header=0, index_col=0)\n            date_list = np.concatenate((date_list, pdf.index.unique()))\n    latest_date = get_latest_date_from_an_array(date_list, data_format)\n    print(latest_date)\n    date_time_obj = datetime.strptime(latest_date, data_format)\n    return date_time_obj.strftime(\"%Y-%m-%d\")\n\ndef convert_date_from_1900(day_value):\n    \"\"\"\n    Convert a day value since 1900 to a date string in the format \"YYYY-MM-DD\".\n    \n    Parameters:\n    - day_value (int): Number of days since January 1, 1900.\n    \n    Returns:\n    - str: Date string in \"YYYY-MM-DD\" format.\n    \"\"\"\n    reference_date = datetime(1900, 1, 1)\n    result_date = reference_date + timedelta(days=day_value)\n    return result_date.strftime(\"%Y-%m-%d\")\n\ndef convert_date_to_1900(date_string):\n    \"\"\"\n    Convert a date string in the format \"YYYY-MM-DD\" to a day value since 1900.\n    \n    Parameters:\n    - date_string (str): Date string in \"YYYY-MM-DD\" format.\n    \n    Returns:\n    - int: Number of days since January 1, 1900.\n    \"\"\"\n    input_date = datetime.strptime(date_string, \"%Y-%m-%d\")\n    reference_date = datetime(1900, 1, 1)\n    delta = input_date - reference_date\n    day_value = delta.days\n    return day_value\n\ndef date_to_julian(date_str):\n    \"\"\"\n    Convert a date to Julian date.\n    \"\"\"\n    date_object = datetime.strptime(date_str, \"%Y-%m-%d\")\n    tt = date_object.timetuple()\n    \n\n    # Format the result as 'YYYYDDD'\n    julian_format = str('%d%03d' % (tt.tm_year, tt.tm_yday))\n\n    return julian_format\n  \n  \nprint(date_to_julian(\"2022-10-02\"))\n#day_index = convert_date_to_1900(test_start_date)\n#create_cell_location_csv()\n#findLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n",
  "history_output" : "today date = 2023-11-24\ntest start date:  2022-10-05\ntest end date:  2023-10-07\n/home/chetana\n2022275\n",
  "history_begin_time" : 1700843780594,
  "history_end_time" : 1700843781384,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "mtf5ZZB7Rhfe",
  "history_input" : "from datetime import date, datetime, timedelta\nimport json\nimport math\nimport numpy as np\nimport os\nimport pandas as pd\n# import ee\n#import seaborn as sns\nimport matplotlib.pyplot as plt\n#import geopandas as gpd\n#import geojson\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"2019-01-01\"\ntrain_end_date = \"2022-12-31\"\n\ntest_start_date = \"2022-10-05\"\ntest_end_date = \"2023-10-07\"\n#test_end_date = d1\nprint(\"test start date: \", test_start_date)\nprint(\"test end date: \", test_end_date)\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\nwork_dir = f\"{homedir}/gridmet_test_run\"\n\n# Define a function to convert the month to season\ndef month_to_season(month):\n    if 3 <= month <= 5:\n        return 1\n    elif 6 <= month <= 8:\n        return 2\n    elif 9 <= month <= 11:\n        return 3\n    else:\n        return 4\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate the distance (Euclidean) between two sets of coordinates (lat1, lon1) and (lat2, lon2).\n    \n    Parameters:\n    - lat1 (float): Latitude of the first point.\n    - lon1 (float): Longitude of the first point.\n    - lat2 (float): Latitude of the second point.\n    - lon2 (float): Longitude of the second point.\n    \n    Returns:\n    - float: The Euclidean distance between the two points.\n    \"\"\"\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1 - lat2) ** 2 + (lon1 - lon2) ** 2)\n\ndef create_cell_location_csv():\n    \"\"\"\n    Create a CSV file containing cell locations from a GeoJSON file.\n    \"\"\"\n    # read grid cell\n    gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n    all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n    if os.path.exists(all_cell_coords_file):\n        os.remove(all_cell_coords_file)\n\n    grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n    print(grid_coords_df.head())\n    gridcells = geojson.load(open(gridcells_file))\n    for idx, cell in enumerate(gridcells['features']):\n        current_cell_id = cell['properties']['cell_id']\n        cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n        cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n        grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n\n    # grid_coords_np = grid_coords_df.to_numpy()\n    # print(grid_coords_np.shape)\n    grid_coords_df.to_csv(all_cell_coords_file, index=False)\n    # np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n    # print(grid_coords_np.shape)\n\ndef get_latest_date_from_an_array(arr, date_format):\n    \"\"\"\n    Get the latest date from an array of date strings.\n    \n    Parameters:\n    - arr (list): List of date strings.\n    - date_format (str): Date format for parsing the date strings.\n    \n    Returns:\n    - str: The latest date string.\n    \"\"\"\n    return max(arr, key=lambda x: datetime.strptime(x, date_format))\n\ndef findLastStopDate(target_testing_dir, data_format):\n    \"\"\"\n    Find the last stop date from CSV files in a directory.\n    \n    Parameters:\n    - target_testing_dir (str): Directory containing CSV files.\n    - data_format (str): Date format for parsing the date strings.\n    \n    Returns:\n    - str: The latest stop date.\n    \"\"\"\n    date_list = []\n    for filename in os.listdir(target_testing_dir):\n        f = os.path.join(target_testing_dir, filename)\n        # checking if it is a file\n        if os.path.isfile(f) and \".csv\" in f:\n            pdf = pd.read_csv(f, header=0, index_col=0)\n            date_list = np.concatenate((date_list, pdf.index.unique()))\n    latest_date = get_latest_date_from_an_array(date_list, data_format)\n    print(latest_date)\n    date_time_obj = datetime.strptime(latest_date, data_format)\n    return date_time_obj.strftime(\"%Y-%m-%d\")\n\ndef convert_date_from_1900(day_value):\n    \"\"\"\n    Convert a day value since 1900 to a date string in the format \"YYYY-MM-DD\".\n    \n    Parameters:\n    - day_value (int): Number of days since January 1, 1900.\n    \n    Returns:\n    - str: Date string in \"YYYY-MM-DD\" format.\n    \"\"\"\n    reference_date = datetime(1900, 1, 1)\n    result_date = reference_date + timedelta(days=day_value)\n    return result_date.strftime(\"%Y-%m-%d\")\n\ndef convert_date_to_1900(date_string):\n    \"\"\"\n    Convert a date string in the format \"YYYY-MM-DD\" to a day value since 1900.\n    \n    Parameters:\n    - date_string (str): Date string in \"YYYY-MM-DD\" format.\n    \n    Returns:\n    - int: Number of days since January 1, 1900.\n    \"\"\"\n    input_date = datetime.strptime(date_string, \"%Y-%m-%d\")\n    reference_date = datetime(1900, 1, 1)\n    delta = input_date - reference_date\n    day_value = delta.days\n    return day_value\n\ndef date_to_julian(date_str):\n    \"\"\"\n    Convert a date to Julian date.\n    \"\"\"\n    date_object = datetime.strptime(date_str, \"%Y-%m-%d\")\n    tt = date_object.timetuple()\n    \n\n    # Format the result as 'YYYYDDD'\n    julian_format = str('%d%03d' % (tt.tm_year, tt.tm_yday))\n\n    return julian_format\n  \n  \nprint(date_to_julian(\"2022-01-02\"))\n#day_index = convert_date_to_1900(test_start_date)\n#create_cell_location_csv()\n#findLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n",
  "history_output" : "today date = 2023-11-24\ntest start date:  2022-10-05\ntest end date:  2023-10-07\n/home/chetana\n2022002\n",
  "history_begin_time" : 1700843771321,
  "history_end_time" : 1700843772109,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "2k26DjVtcWcr",
  "history_input" : "from datetime import date, datetime, timedelta\nimport json\nimport math\nimport numpy as np\nimport os\nimport pandas as pd\n# import ee\n#import seaborn as sns\nimport matplotlib.pyplot as plt\n#import geopandas as gpd\n#import geojson\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"2019-01-01\"\ntrain_end_date = \"2022-12-31\"\n\ntest_start_date = \"2022-10-05\"\ntest_end_date = \"2023-10-07\"\n#test_end_date = d1\nprint(\"test start date: \", test_start_date)\nprint(\"test end date: \", test_end_date)\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\nwork_dir = f\"{homedir}/gridmet_test_run\"\n\n# Define a function to convert the month to season\ndef month_to_season(month):\n    if 3 <= month <= 5:\n        return 1\n    elif 6 <= month <= 8:\n        return 2\n    elif 9 <= month <= 11:\n        return 3\n    else:\n        return 4\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate the distance (Euclidean) between two sets of coordinates (lat1, lon1) and (lat2, lon2).\n    \n    Parameters:\n    - lat1 (float): Latitude of the first point.\n    - lon1 (float): Longitude of the first point.\n    - lat2 (float): Latitude of the second point.\n    - lon2 (float): Longitude of the second point.\n    \n    Returns:\n    - float: The Euclidean distance between the two points.\n    \"\"\"\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1 - lat2) ** 2 + (lon1 - lon2) ** 2)\n\ndef create_cell_location_csv():\n    \"\"\"\n    Create a CSV file containing cell locations from a GeoJSON file.\n    \"\"\"\n    # read grid cell\n    gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n    all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n    if os.path.exists(all_cell_coords_file):\n        os.remove(all_cell_coords_file)\n\n    grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n    print(grid_coords_df.head())\n    gridcells = geojson.load(open(gridcells_file))\n    for idx, cell in enumerate(gridcells['features']):\n        current_cell_id = cell['properties']['cell_id']\n        cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n        cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n        grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n\n    # grid_coords_np = grid_coords_df.to_numpy()\n    # print(grid_coords_np.shape)\n    grid_coords_df.to_csv(all_cell_coords_file, index=False)\n    # np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n    # print(grid_coords_np.shape)\n\ndef get_latest_date_from_an_array(arr, date_format):\n    \"\"\"\n    Get the latest date from an array of date strings.\n    \n    Parameters:\n    - arr (list): List of date strings.\n    - date_format (str): Date format for parsing the date strings.\n    \n    Returns:\n    - str: The latest date string.\n    \"\"\"\n    return max(arr, key=lambda x: datetime.strptime(x, date_format))\n\ndef findLastStopDate(target_testing_dir, data_format):\n    \"\"\"\n    Find the last stop date from CSV files in a directory.\n    \n    Parameters:\n    - target_testing_dir (str): Directory containing CSV files.\n    - data_format (str): Date format for parsing the date strings.\n    \n    Returns:\n    - str: The latest stop date.\n    \"\"\"\n    date_list = []\n    for filename in os.listdir(target_testing_dir):\n        f = os.path.join(target_testing_dir, filename)\n        # checking if it is a file\n        if os.path.isfile(f) and \".csv\" in f:\n            pdf = pd.read_csv(f, header=0, index_col=0)\n            date_list = np.concatenate((date_list, pdf.index.unique()))\n    latest_date = get_latest_date_from_an_array(date_list, data_format)\n    print(latest_date)\n    date_time_obj = datetime.strptime(latest_date, data_format)\n    return date_time_obj.strftime(\"%Y-%m-%d\")\n\ndef convert_date_from_1900(day_value):\n    \"\"\"\n    Convert a day value since 1900 to a date string in the format \"YYYY-MM-DD\".\n    \n    Parameters:\n    - day_value (int): Number of days since January 1, 1900.\n    \n    Returns:\n    - str: Date string in \"YYYY-MM-DD\" format.\n    \"\"\"\n    reference_date = datetime(1900, 1, 1)\n    result_date = reference_date + timedelta(days=day_value)\n    return result_date.strftime(\"%Y-%m-%d\")\n\ndef convert_date_to_1900(date_string):\n    \"\"\"\n    Convert a date string in the format \"YYYY-MM-DD\" to a day value since 1900.\n    \n    Parameters:\n    - date_string (str): Date string in \"YYYY-MM-DD\" format.\n    \n    Returns:\n    - int: Number of days since January 1, 1900.\n    \"\"\"\n    input_date = datetime.strptime(date_string, \"%Y-%m-%d\")\n    reference_date = datetime(1900, 1, 1)\n    delta = input_date - reference_date\n    day_value = delta.days\n    return day_value\n\ndef date_to_julian(date_str):\n    \"\"\"\n    Convert a date to Julian date.\n    \"\"\"\n    date_object = datetime.strptime(date_str, \"%Y-%m-%d\")\n    a = (14 - date_object.month) // 12\n    y = date_object.year + 4800 - a\n    m = date_object.month + 12 * a - 3\n\n    julian_day = date_object.day + ((153 * m + 2) // 5) + 365 * y + y // 4 - y // 100 + y // 400 - 32045\n    \n    # Extract the three-digit day number\n    day_number = f\"{julian_day:03d}\"\n\n    # Format the result as 'YYYYDDD'\n    julian_format = date_object.strftime(\"%Y\") + day_number[0:3]\n\n    return julian_format\n  \n  \nprint(date_to_julian(\"2022-01-02\"))\n#day_index = convert_date_to_1900(test_start_date)\n#create_cell_location_csv()\n#findLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n",
  "history_output" : "today date = 2023-11-24\ntest start date:  2022-10-05\ntest end date:  2023-10-07\n/home/chetana\n2022245\n",
  "history_begin_time" : 1700843665657,
  "history_end_time" : 1700843666512,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "QzetZOZYYBvj",
  "history_input" : "from datetime import date, datetime, timedelta\nimport json\nimport math\nimport numpy as np\nimport os\nimport pandas as pd\n# import ee\n#import seaborn as sns\nimport matplotlib.pyplot as plt\n#import geopandas as gpd\n#import geojson\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"2019-01-01\"\ntrain_end_date = \"2022-12-31\"\n\ntest_start_date = \"2022-10-05\"\ntest_end_date = \"2023-10-07\"\n#test_end_date = d1\nprint(\"test start date: \", test_start_date)\nprint(\"test end date: \", test_end_date)\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\nwork_dir = f\"{homedir}/gridmet_test_run\"\n\n# Define a function to convert the month to season\ndef month_to_season(month):\n    if 3 <= month <= 5:\n        return 1\n    elif 6 <= month <= 8:\n        return 2\n    elif 9 <= month <= 11:\n        return 3\n    else:\n        return 4\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate the distance (Euclidean) between two sets of coordinates (lat1, lon1) and (lat2, lon2).\n    \n    Parameters:\n    - lat1 (float): Latitude of the first point.\n    - lon1 (float): Longitude of the first point.\n    - lat2 (float): Latitude of the second point.\n    - lon2 (float): Longitude of the second point.\n    \n    Returns:\n    - float: The Euclidean distance between the two points.\n    \"\"\"\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1 - lat2) ** 2 + (lon1 - lon2) ** 2)\n\ndef create_cell_location_csv():\n    \"\"\"\n    Create a CSV file containing cell locations from a GeoJSON file.\n    \"\"\"\n    # read grid cell\n    gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n    all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n    if os.path.exists(all_cell_coords_file):\n        os.remove(all_cell_coords_file)\n\n    grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n    print(grid_coords_df.head())\n    gridcells = geojson.load(open(gridcells_file))\n    for idx, cell in enumerate(gridcells['features']):\n        current_cell_id = cell['properties']['cell_id']\n        cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n        cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n        grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n\n    # grid_coords_np = grid_coords_df.to_numpy()\n    # print(grid_coords_np.shape)\n    grid_coords_df.to_csv(all_cell_coords_file, index=False)\n    # np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n    # print(grid_coords_np.shape)\n\ndef get_latest_date_from_an_array(arr, date_format):\n    \"\"\"\n    Get the latest date from an array of date strings.\n    \n    Parameters:\n    - arr (list): List of date strings.\n    - date_format (str): Date format for parsing the date strings.\n    \n    Returns:\n    - str: The latest date string.\n    \"\"\"\n    return max(arr, key=lambda x: datetime.strptime(x, date_format))\n\ndef findLastStopDate(target_testing_dir, data_format):\n    \"\"\"\n    Find the last stop date from CSV files in a directory.\n    \n    Parameters:\n    - target_testing_dir (str): Directory containing CSV files.\n    - data_format (str): Date format for parsing the date strings.\n    \n    Returns:\n    - str: The latest stop date.\n    \"\"\"\n    date_list = []\n    for filename in os.listdir(target_testing_dir):\n        f = os.path.join(target_testing_dir, filename)\n        # checking if it is a file\n        if os.path.isfile(f) and \".csv\" in f:\n            pdf = pd.read_csv(f, header=0, index_col=0)\n            date_list = np.concatenate((date_list, pdf.index.unique()))\n    latest_date = get_latest_date_from_an_array(date_list, data_format)\n    print(latest_date)\n    date_time_obj = datetime.strptime(latest_date, data_format)\n    return date_time_obj.strftime(\"%Y-%m-%d\")\n\ndef convert_date_from_1900(day_value):\n    \"\"\"\n    Convert a day value since 1900 to a date string in the format \"YYYY-MM-DD\".\n    \n    Parameters:\n    - day_value (int): Number of days since January 1, 1900.\n    \n    Returns:\n    - str: Date string in \"YYYY-MM-DD\" format.\n    \"\"\"\n    reference_date = datetime(1900, 1, 1)\n    result_date = reference_date + timedelta(days=day_value)\n    return result_date.strftime(\"%Y-%m-%d\")\n\ndef convert_date_to_1900(date_string):\n    \"\"\"\n    Convert a date string in the format \"YYYY-MM-DD\" to a day value since 1900.\n    \n    Parameters:\n    - date_string (str): Date string in \"YYYY-MM-DD\" format.\n    \n    Returns:\n    - int: Number of days since January 1, 1900.\n    \"\"\"\n    input_date = datetime.strptime(date_string, \"%Y-%m-%d\")\n    reference_date = datetime(1900, 1, 1)\n    delta = input_date - reference_date\n    day_value = delta.days\n    return day_value\n\ndef date_to_julian(date_str):\n    \"\"\"\n    Convert a date to Julian date.\n    \"\"\"\n    date_object = datetime.strptime(date_str, \"%Y-%m-%d\")\n    a = (14 - date_object.month) // 12\n    y = date_object.year + 4800 - a\n    m = date_object.month + 12 * a - 3\n\n    julian_day = date_object.day + ((153 * m + 2) // 5) + 365 * y + y // 4 - y // 100 + y // 400 - 32045\n    \n    # Extract the three-digit day number\n    day_number = f\"{julian_day:03d}\"\n\n    # Format the result as 'YYYYDDD'\n    julian_format = date_object.strftime(\"%Y\") + day_number[0:3]\n\n    return julian_format\n  \n  \nprint(date_to_julian(\"2022-01-01\"))\n#day_index = convert_date_to_1900(test_start_date)\n#create_cell_location_csv()\n#findLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n",
  "history_output" : "today date = 2023-11-24\ntest start date:  2022-10-05\ntest end date:  2023-10-07\n/home/chetana\n2022245\n",
  "history_begin_time" : 1700843645214,
  "history_end_time" : 1700843646112,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "njTXXgsVJAkm",
  "history_input" : "from datetime import date, datetime, timedelta\nimport json\nimport math\nimport numpy as np\nimport os\nimport pandas as pd\n# import ee\n#import seaborn as sns\nimport matplotlib.pyplot as plt\n#import geopandas as gpd\n#import geojson\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"2019-01-01\"\ntrain_end_date = \"2022-12-31\"\n\ntest_start_date = \"2022-10-05\"\ntest_end_date = \"2023-10-07\"\n#test_end_date = d1\nprint(\"test start date: \", test_start_date)\nprint(\"test end date: \", test_end_date)\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\nwork_dir = f\"{homedir}/gridmet_test_run\"\n\n# Define a function to convert the month to season\ndef month_to_season(month):\n    if 3 <= month <= 5:\n        return 1\n    elif 6 <= month <= 8:\n        return 2\n    elif 9 <= month <= 11:\n        return 3\n    else:\n        return 4\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate the distance (Euclidean) between two sets of coordinates (lat1, lon1) and (lat2, lon2).\n    \n    Parameters:\n    - lat1 (float): Latitude of the first point.\n    - lon1 (float): Longitude of the first point.\n    - lat2 (float): Latitude of the second point.\n    - lon2 (float): Longitude of the second point.\n    \n    Returns:\n    - float: The Euclidean distance between the two points.\n    \"\"\"\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1 - lat2) ** 2 + (lon1 - lon2) ** 2)\n\ndef create_cell_location_csv():\n    \"\"\"\n    Create a CSV file containing cell locations from a GeoJSON file.\n    \"\"\"\n    # read grid cell\n    gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n    all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n    if os.path.exists(all_cell_coords_file):\n        os.remove(all_cell_coords_file)\n\n    grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n    print(grid_coords_df.head())\n    gridcells = geojson.load(open(gridcells_file))\n    for idx, cell in enumerate(gridcells['features']):\n        current_cell_id = cell['properties']['cell_id']\n        cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n        cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n        grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n\n    # grid_coords_np = grid_coords_df.to_numpy()\n    # print(grid_coords_np.shape)\n    grid_coords_df.to_csv(all_cell_coords_file, index=False)\n    # np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n    # print(grid_coords_np.shape)\n\ndef get_latest_date_from_an_array(arr, date_format):\n    \"\"\"\n    Get the latest date from an array of date strings.\n    \n    Parameters:\n    - arr (list): List of date strings.\n    - date_format (str): Date format for parsing the date strings.\n    \n    Returns:\n    - str: The latest date string.\n    \"\"\"\n    return max(arr, key=lambda x: datetime.strptime(x, date_format))\n\ndef findLastStopDate(target_testing_dir, data_format):\n    \"\"\"\n    Find the last stop date from CSV files in a directory.\n    \n    Parameters:\n    - target_testing_dir (str): Directory containing CSV files.\n    - data_format (str): Date format for parsing the date strings.\n    \n    Returns:\n    - str: The latest stop date.\n    \"\"\"\n    date_list = []\n    for filename in os.listdir(target_testing_dir):\n        f = os.path.join(target_testing_dir, filename)\n        # checking if it is a file\n        if os.path.isfile(f) and \".csv\" in f:\n            pdf = pd.read_csv(f, header=0, index_col=0)\n            date_list = np.concatenate((date_list, pdf.index.unique()))\n    latest_date = get_latest_date_from_an_array(date_list, data_format)\n    print(latest_date)\n    date_time_obj = datetime.strptime(latest_date, data_format)\n    return date_time_obj.strftime(\"%Y-%m-%d\")\n\ndef convert_date_from_1900(day_value):\n    \"\"\"\n    Convert a day value since 1900 to a date string in the format \"YYYY-MM-DD\".\n    \n    Parameters:\n    - day_value (int): Number of days since January 1, 1900.\n    \n    Returns:\n    - str: Date string in \"YYYY-MM-DD\" format.\n    \"\"\"\n    reference_date = datetime(1900, 1, 1)\n    result_date = reference_date + timedelta(days=day_value)\n    return result_date.strftime(\"%Y-%m-%d\")\n\ndef convert_date_to_1900(date_string):\n    \"\"\"\n    Convert a date string in the format \"YYYY-MM-DD\" to a day value since 1900.\n    \n    Parameters:\n    - date_string (str): Date string in \"YYYY-MM-DD\" format.\n    \n    Returns:\n    - int: Number of days since January 1, 1900.\n    \"\"\"\n    input_date = datetime.strptime(date_string, \"%Y-%m-%d\")\n    reference_date = datetime(1900, 1, 1)\n    delta = input_date - reference_date\n    day_value = delta.days\n    return day_value\n\ndef date_to_julian(date_str):\n    \"\"\"\n    Convert a date to Julian date.\n    \"\"\"\n    date_object = datetime.strptime(date_str, \"%Y-%m-%d\")\n    a = (14 - date_object.month) // 12\n    y = date_object.year + 4800 - a\n    m = date_object.month + 12 * a - 3\n\n    julian_day = date_object.day + ((153 * m + 2) // 5) + 365 * y + y // 4 - y // 100 + y // 400 - 32045\n    \n    # Extract the three-digit day number\n    day_number = f\"{julian_day:03d}\"\n\n    # Format the result as 'YYYYDDD'\n    julian_format = date_object.strftime(\"%Y\") + day_number[0:3]\n\n    return julian_format\n  \n  \nprint(date_to_julian(\"2022-10-01\"))\n#day_index = convert_date_to_1900(test_start_date)\n#create_cell_location_csv()\n#findLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n",
  "history_output" : "today date = 2023-11-24\ntest start date:  2022-10-05\ntest end date:  2023-10-07\n/home/chetana\n2022245\n",
  "history_begin_time" : 1700843634650,
  "history_end_time" : 1700843635489,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "lmLSIOU3I9Ys",
  "history_input" : "from datetime import date, datetime, timedelta\nimport json\nimport math\nimport numpy as np\nimport os\nimport pandas as pd\n# import ee\n#import seaborn as sns\nimport matplotlib.pyplot as plt\n#import geopandas as gpd\n#import geojson\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"2019-01-01\"\ntrain_end_date = \"2022-12-31\"\n\ntest_start_date = \"2022-10-05\"\ntest_end_date = \"2023-10-07\"\n#test_end_date = d1\nprint(\"test start date: \", test_start_date)\nprint(\"test end date: \", test_end_date)\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\nwork_dir = f\"{homedir}/gridmet_test_run\"\n\n# Define a function to convert the month to season\ndef month_to_season(month):\n    if 3 <= month <= 5:\n        return 1\n    elif 6 <= month <= 8:\n        return 2\n    elif 9 <= month <= 11:\n        return 3\n    else:\n        return 4\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate the distance (Euclidean) between two sets of coordinates (lat1, lon1) and (lat2, lon2).\n    \n    Parameters:\n    - lat1 (float): Latitude of the first point.\n    - lon1 (float): Longitude of the first point.\n    - lat2 (float): Latitude of the second point.\n    - lon2 (float): Longitude of the second point.\n    \n    Returns:\n    - float: The Euclidean distance between the two points.\n    \"\"\"\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1 - lat2) ** 2 + (lon1 - lon2) ** 2)\n\ndef create_cell_location_csv():\n    \"\"\"\n    Create a CSV file containing cell locations from a GeoJSON file.\n    \"\"\"\n    # read grid cell\n    gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n    all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n    if os.path.exists(all_cell_coords_file):\n        os.remove(all_cell_coords_file)\n\n    grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n    print(grid_coords_df.head())\n    gridcells = geojson.load(open(gridcells_file))\n    for idx, cell in enumerate(gridcells['features']):\n        current_cell_id = cell['properties']['cell_id']\n        cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n        cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n        grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n\n    # grid_coords_np = grid_coords_df.to_numpy()\n    # print(grid_coords_np.shape)\n    grid_coords_df.to_csv(all_cell_coords_file, index=False)\n    # np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n    # print(grid_coords_np.shape)\n\ndef get_latest_date_from_an_array(arr, date_format):\n    \"\"\"\n    Get the latest date from an array of date strings.\n    \n    Parameters:\n    - arr (list): List of date strings.\n    - date_format (str): Date format for parsing the date strings.\n    \n    Returns:\n    - str: The latest date string.\n    \"\"\"\n    return max(arr, key=lambda x: datetime.strptime(x, date_format))\n\ndef findLastStopDate(target_testing_dir, data_format):\n    \"\"\"\n    Find the last stop date from CSV files in a directory.\n    \n    Parameters:\n    - target_testing_dir (str): Directory containing CSV files.\n    - data_format (str): Date format for parsing the date strings.\n    \n    Returns:\n    - str: The latest stop date.\n    \"\"\"\n    date_list = []\n    for filename in os.listdir(target_testing_dir):\n        f = os.path.join(target_testing_dir, filename)\n        # checking if it is a file\n        if os.path.isfile(f) and \".csv\" in f:\n            pdf = pd.read_csv(f, header=0, index_col=0)\n            date_list = np.concatenate((date_list, pdf.index.unique()))\n    latest_date = get_latest_date_from_an_array(date_list, data_format)\n    print(latest_date)\n    date_time_obj = datetime.strptime(latest_date, data_format)\n    return date_time_obj.strftime(\"%Y-%m-%d\")\n\ndef convert_date_from_1900(day_value):\n    \"\"\"\n    Convert a day value since 1900 to a date string in the format \"YYYY-MM-DD\".\n    \n    Parameters:\n    - day_value (int): Number of days since January 1, 1900.\n    \n    Returns:\n    - str: Date string in \"YYYY-MM-DD\" format.\n    \"\"\"\n    reference_date = datetime(1900, 1, 1)\n    result_date = reference_date + timedelta(days=day_value)\n    return result_date.strftime(\"%Y-%m-%d\")\n\ndef convert_date_to_1900(date_string):\n    \"\"\"\n    Convert a date string in the format \"YYYY-MM-DD\" to a day value since 1900.\n    \n    Parameters:\n    - date_string (str): Date string in \"YYYY-MM-DD\" format.\n    \n    Returns:\n    - int: Number of days since January 1, 1900.\n    \"\"\"\n    input_date = datetime.strptime(date_string, \"%Y-%m-%d\")\n    reference_date = datetime(1900, 1, 1)\n    delta = input_date - reference_date\n    day_value = delta.days\n    return day_value\n\ndef date_to_julian(date_str):\n    \"\"\"\n    Convert a date to Julian date.\n    \"\"\"\n    date_object = datetime.strptime(date_str, \"%Y-%m-%d\")\n    a = (14 - date_object.month) // 12\n    y = date_object.year + 4800 - a\n    m = date_object.month + 12 * a - 3\n\n    julian_day = date_object.day + ((153 * m + 2) // 5) + 365 * y + y // 4 - y // 100 + y // 400 - 32045\n    \n    # Extract the three-digit day number\n    day_number = f\"{julian_day:03d}\"\n\n    # Format the result as 'YYYYDDD'\n    julian_format = date_object.strftime(\"%Y\") + day_number\n\n    return julian_format\n  \n  \nprint(date_to_julian(\"2022-10-01\"))\n#day_index = convert_date_to_1900(test_start_date)\n#create_cell_location_csv()\n#findLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n",
  "history_output" : "today date = 2023-11-24\ntest start date:  2022-10-05\ntest end date:  2023-10-07\n/home/chetana\n20222459854\n",
  "history_begin_time" : 1700843616500,
  "history_end_time" : 1700843617285,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "chZ4g7OCaaId",
  "history_input" : "from datetime import date, datetime, timedelta\nimport json\nimport math\nimport numpy as np\nimport os\nimport pandas as pd\n# import ee\n#import seaborn as sns\nimport matplotlib.pyplot as plt\n#import geopandas as gpd\n#import geojson\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"2019-01-01\"\ntrain_end_date = \"2022-12-31\"\n\ntest_start_date = \"2022-10-05\"\ntest_end_date = \"2023-10-07\"\n#test_end_date = d1\nprint(\"test start date: \", test_start_date)\nprint(\"test end date: \", test_end_date)\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\nwork_dir = f\"{homedir}/gridmet_test_run\"\n\n# Define a function to convert the month to season\ndef month_to_season(month):\n    if 3 <= month <= 5:\n        return 1\n    elif 6 <= month <= 8:\n        return 2\n    elif 9 <= month <= 11:\n        return 3\n    else:\n        return 4\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate the distance (Euclidean) between two sets of coordinates (lat1, lon1) and (lat2, lon2).\n    \n    Parameters:\n    - lat1 (float): Latitude of the first point.\n    - lon1 (float): Longitude of the first point.\n    - lat2 (float): Latitude of the second point.\n    - lon2 (float): Longitude of the second point.\n    \n    Returns:\n    - float: The Euclidean distance between the two points.\n    \"\"\"\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1 - lat2) ** 2 + (lon1 - lon2) ** 2)\n\ndef create_cell_location_csv():\n    \"\"\"\n    Create a CSV file containing cell locations from a GeoJSON file.\n    \"\"\"\n    # read grid cell\n    gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n    all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n    if os.path.exists(all_cell_coords_file):\n        os.remove(all_cell_coords_file)\n\n    grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n    print(grid_coords_df.head())\n    gridcells = geojson.load(open(gridcells_file))\n    for idx, cell in enumerate(gridcells['features']):\n        current_cell_id = cell['properties']['cell_id']\n        cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n        cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n        grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n\n    # grid_coords_np = grid_coords_df.to_numpy()\n    # print(grid_coords_np.shape)\n    grid_coords_df.to_csv(all_cell_coords_file, index=False)\n    # np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n    # print(grid_coords_np.shape)\n\ndef get_latest_date_from_an_array(arr, date_format):\n    \"\"\"\n    Get the latest date from an array of date strings.\n    \n    Parameters:\n    - arr (list): List of date strings.\n    - date_format (str): Date format for parsing the date strings.\n    \n    Returns:\n    - str: The latest date string.\n    \"\"\"\n    return max(arr, key=lambda x: datetime.strptime(x, date_format))\n\ndef findLastStopDate(target_testing_dir, data_format):\n    \"\"\"\n    Find the last stop date from CSV files in a directory.\n    \n    Parameters:\n    - target_testing_dir (str): Directory containing CSV files.\n    - data_format (str): Date format for parsing the date strings.\n    \n    Returns:\n    - str: The latest stop date.\n    \"\"\"\n    date_list = []\n    for filename in os.listdir(target_testing_dir):\n        f = os.path.join(target_testing_dir, filename)\n        # checking if it is a file\n        if os.path.isfile(f) and \".csv\" in f:\n            pdf = pd.read_csv(f, header=0, index_col=0)\n            date_list = np.concatenate((date_list, pdf.index.unique()))\n    latest_date = get_latest_date_from_an_array(date_list, data_format)\n    print(latest_date)\n    date_time_obj = datetime.strptime(latest_date, data_format)\n    return date_time_obj.strftime(\"%Y-%m-%d\")\n\ndef convert_date_from_1900(day_value):\n    \"\"\"\n    Convert a day value since 1900 to a date string in the format \"YYYY-MM-DD\".\n    \n    Parameters:\n    - day_value (int): Number of days since January 1, 1900.\n    \n    Returns:\n    - str: Date string in \"YYYY-MM-DD\" format.\n    \"\"\"\n    reference_date = datetime(1900, 1, 1)\n    result_date = reference_date + timedelta(days=day_value)\n    return result_date.strftime(\"%Y-%m-%d\")\n\ndef convert_date_to_1900(date_string):\n    \"\"\"\n    Convert a date string in the format \"YYYY-MM-DD\" to a day value since 1900.\n    \n    Parameters:\n    - date_string (str): Date string in \"YYYY-MM-DD\" format.\n    \n    Returns:\n    - int: Number of days since January 1, 1900.\n    \"\"\"\n    input_date = datetime.strptime(date_string, \"%Y-%m-%d\")\n    reference_date = datetime(1900, 1, 1)\n    delta = input_date - reference_date\n    day_value = delta.days\n    return day_value\n\ndef date_to_julian(date_str):\n    \"\"\"\n    Convert a date to Julian date.\n    \"\"\"\n    date_object = datetime.strptime(date_str, \"%Y-%m-%d\")\n    a = (14 - date_object.month) // 12\n    y = date_object.year + 4800 - a\n    m = date_object.month + 12 * a - 3\n\n    julian_day = date_object.day + ((153 * m + 2) // 5) + 365 * y + y // 4 - y // 100 + y // 400 - 32045\n\n    # Format the result as 'YYYYDDD'\n    julian_format = date_object.strftime(\"%Y\") + f\"{julian_day:03d}\"\n\n    return julian_format\n  \n  \nprint(date_to_julian(\"2022-10-01\"))\n#day_index = convert_date_to_1900(test_start_date)\n#create_cell_location_csv()\n#findLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n",
  "history_output" : "today date = 2023-11-24\ntest start date:  2022-10-05\ntest end date:  2023-10-07\n/home/chetana\n20222459854\n",
  "history_begin_time" : 1700843521585,
  "history_end_time" : 1700843522451,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "meiD441WLxtq",
  "history_input" : "from datetime import date, datetime, timedelta\nimport json\nimport math\nimport numpy as np\nimport os\nimport pandas as pd\n# import ee\n#import seaborn as sns\nimport matplotlib.pyplot as plt\n#import geopandas as gpd\n#import geojson\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"2019-01-01\"\ntrain_end_date = \"2022-12-31\"\n\ntest_start_date = \"2022-10-05\"\ntest_end_date = \"2023-10-07\"\n#test_end_date = d1\nprint(\"test start date: \", test_start_date)\nprint(\"test end date: \", test_end_date)\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\nwork_dir = f\"{homedir}/gridmet_test_run\"\n\n# Define a function to convert the month to season\ndef month_to_season(month):\n    if 3 <= month <= 5:\n        return 1\n    elif 6 <= month <= 8:\n        return 2\n    elif 9 <= month <= 11:\n        return 3\n    else:\n        return 4\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate the distance (Euclidean) between two sets of coordinates (lat1, lon1) and (lat2, lon2).\n    \n    Parameters:\n    - lat1 (float): Latitude of the first point.\n    - lon1 (float): Longitude of the first point.\n    - lat2 (float): Latitude of the second point.\n    - lon2 (float): Longitude of the second point.\n    \n    Returns:\n    - float: The Euclidean distance between the two points.\n    \"\"\"\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1 - lat2) ** 2 + (lon1 - lon2) ** 2)\n\ndef create_cell_location_csv():\n    \"\"\"\n    Create a CSV file containing cell locations from a GeoJSON file.\n    \"\"\"\n    # read grid cell\n    gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n    all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n    if os.path.exists(all_cell_coords_file):\n        os.remove(all_cell_coords_file)\n\n    grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n    print(grid_coords_df.head())\n    gridcells = geojson.load(open(gridcells_file))\n    for idx, cell in enumerate(gridcells['features']):\n        current_cell_id = cell['properties']['cell_id']\n        cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n        cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n        grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n\n    # grid_coords_np = grid_coords_df.to_numpy()\n    # print(grid_coords_np.shape)\n    grid_coords_df.to_csv(all_cell_coords_file, index=False)\n    # np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n    # print(grid_coords_np.shape)\n\ndef get_latest_date_from_an_array(arr, date_format):\n    \"\"\"\n    Get the latest date from an array of date strings.\n    \n    Parameters:\n    - arr (list): List of date strings.\n    - date_format (str): Date format for parsing the date strings.\n    \n    Returns:\n    - str: The latest date string.\n    \"\"\"\n    return max(arr, key=lambda x: datetime.strptime(x, date_format))\n\ndef findLastStopDate(target_testing_dir, data_format):\n    \"\"\"\n    Find the last stop date from CSV files in a directory.\n    \n    Parameters:\n    - target_testing_dir (str): Directory containing CSV files.\n    - data_format (str): Date format for parsing the date strings.\n    \n    Returns:\n    - str: The latest stop date.\n    \"\"\"\n    date_list = []\n    for filename in os.listdir(target_testing_dir):\n        f = os.path.join(target_testing_dir, filename)\n        # checking if it is a file\n        if os.path.isfile(f) and \".csv\" in f:\n            pdf = pd.read_csv(f, header=0, index_col=0)\n            date_list = np.concatenate((date_list, pdf.index.unique()))\n    latest_date = get_latest_date_from_an_array(date_list, data_format)\n    print(latest_date)\n    date_time_obj = datetime.strptime(latest_date, data_format)\n    return date_time_obj.strftime(\"%Y-%m-%d\")\n\ndef convert_date_from_1900(day_value):\n    \"\"\"\n    Convert a day value since 1900 to a date string in the format \"YYYY-MM-DD\".\n    \n    Parameters:\n    - day_value (int): Number of days since January 1, 1900.\n    \n    Returns:\n    - str: Date string in \"YYYY-MM-DD\" format.\n    \"\"\"\n    reference_date = datetime(1900, 1, 1)\n    result_date = reference_date + timedelta(days=day_value)\n    return result_date.strftime(\"%Y-%m-%d\")\n\ndef convert_date_to_1900(date_string):\n    \"\"\"\n    Convert a date string in the format \"YYYY-MM-DD\" to a day value since 1900.\n    \n    Parameters:\n    - date_string (str): Date string in \"YYYY-MM-DD\" format.\n    \n    Returns:\n    - int: Number of days since January 1, 1900.\n    \"\"\"\n    input_date = datetime.strptime(date_string, \"%Y-%m-%d\")\n    reference_date = datetime(1900, 1, 1)\n    delta = input_date - reference_date\n    day_value = delta.days\n    return day_value\n\nday_index = convert_date_to_1900(test_start_date)\n#create_cell_location_csv()\n#findLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n",
  "history_output" : "today date = 2023-11-24\ntest start date:  2022-10-05\ntest end date:  2023-10-07\n/home/chetana\n",
  "history_begin_time" : 1700811340709,
  "history_end_time" : 1700811341519,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "p2gihe0zz0c",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700471590171,
  "history_end_time" : 1700471590171,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "nz3cx2xrm7s",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700468936397,
  "history_end_time" : 1700468936397,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "0p7exdu2t7d",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700461922967,
  "history_end_time" : 1700462913671,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "4fz4vokjs4z",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700448500127,
  "history_end_time" : 1700448500127,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "8z66r75dnkc",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700447319834,
  "history_end_time" : 1700447319834,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "enj1vs1dxz3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700230067233,
  "history_end_time" : 1700230067233,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "yfmion1508s",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700229012357,
  "history_end_time" : 1700229012357,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "wy12bweyogh",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700210213800,
  "history_end_time" : 1700210213800,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "r3joncu8p7b",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700209780152,
  "history_end_time" : 1700209780152,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "mftrfqk2npm",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700209729237,
  "history_end_time" : 1700209729237,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "prvr15klzzb",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700203478637,
  "history_end_time" : 1700204245680,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "ikw089g2qnf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700201828253,
  "history_end_time" : 1700201828253,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "xkrccp7auqc",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700200332845,
  "history_end_time" : 1700200332845,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "4ahek892tf9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700145667862,
  "history_end_time" : 1700145667862,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "rmi7ha7i1ts",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700143295296,
  "history_end_time" : 1700143295296,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "xmnhpsxhyap",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700141615804,
  "history_end_time" : 1700141615804,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "3z84oppt6dz",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700134126828,
  "history_end_time" : 1700134126828,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "meuldgvmkmi",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1700133783694,
  "history_end_time" : 1700133783694,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "34swq6zq0vp",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1699992839749,
  "history_end_time" : 1699992839749,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "qmayelcfvw5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1699982145389,
  "history_end_time" : 1699982145389,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "xjso7rczpxn",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1699941614792,
  "history_end_time" : 1699941614792,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "1qe5em3ctrh",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1699939440535,
  "history_end_time" : 1699939440535,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ems7ruutx0c",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1699937910457,
  "history_end_time" : 1699937910457,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "x2uvps6ddgb",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1699805634599,
  "history_end_time" : 1699806085190,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "6w26x7p86x4",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1699684154050,
  "history_end_time" : 1705789690223,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "7sp7mtft65x",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1699681071324,
  "history_end_time" : 1699681071324,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "zkybzth1pfe",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698762678667,
  "history_end_time" : 1698762678667,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "pddwmqe3q4b",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698762637955,
  "history_end_time" : 1698762637955,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ab5r6ygskc6",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698276496949,
  "history_end_time" : 1698276496949,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "S7R9n99FVA2c",
  "history_input" : "from datetime import date, datetime, timedelta\nimport json\nimport math\nimport numpy as np\nimport os\nimport pandas as pd\n# import ee\n#import seaborn as sns\nimport matplotlib.pyplot as plt\n#import geopandas as gpd\n#import geojson\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"2019-01-01\"\ntrain_end_date = \"2022-12-31\"\n\ntest_start_date = \"2018-01-01\"\ntest_end_date = d1\nprint(\"test start date: \", test_start_date)\nprint(\"test end date: \", test_end_date)\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\nwork_dir = f\"{homedir}/gridmet_test_run\"\n\n# Define a function to convert the month to season\ndef month_to_season(month):\n    if 3 <= month <= 5:\n        return 1\n    elif 6 <= month <= 8:\n        return 2\n    elif 9 <= month <= 11:\n        return 3\n    else:\n        return 4\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate the distance (Euclidean) between two sets of coordinates (lat1, lon1) and (lat2, lon2).\n    \n    Parameters:\n    - lat1 (float): Latitude of the first point.\n    - lon1 (float): Longitude of the first point.\n    - lat2 (float): Latitude of the second point.\n    - lon2 (float): Longitude of the second point.\n    \n    Returns:\n    - float: The Euclidean distance between the two points.\n    \"\"\"\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1 - lat2) ** 2 + (lon1 - lon2) ** 2)\n\ndef create_cell_location_csv():\n    \"\"\"\n    Create a CSV file containing cell locations from a GeoJSON file.\n    \"\"\"\n    # read grid cell\n    gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n    all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n    if os.path.exists(all_cell_coords_file):\n        os.remove(all_cell_coords_file)\n\n    grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n    print(grid_coords_df.head())\n    gridcells = geojson.load(open(gridcells_file))\n    for idx, cell in enumerate(gridcells['features']):\n        current_cell_id = cell['properties']['cell_id']\n        cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n        cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n        grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n\n    # grid_coords_np = grid_coords_df.to_numpy()\n    # print(grid_coords_np.shape)\n    grid_coords_df.to_csv(all_cell_coords_file, index=False)\n    # np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n    # print(grid_coords_np.shape)\n\ndef get_latest_date_from_an_array(arr, date_format):\n    \"\"\"\n    Get the latest date from an array of date strings.\n    \n    Parameters:\n    - arr (list): List of date strings.\n    - date_format (str): Date format for parsing the date strings.\n    \n    Returns:\n    - str: The latest date string.\n    \"\"\"\n    return max(arr, key=lambda x: datetime.strptime(x, date_format))\n\ndef findLastStopDate(target_testing_dir, data_format):\n    \"\"\"\n    Find the last stop date from CSV files in a directory.\n    \n    Parameters:\n    - target_testing_dir (str): Directory containing CSV files.\n    - data_format (str): Date format for parsing the date strings.\n    \n    Returns:\n    - str: The latest stop date.\n    \"\"\"\n    date_list = []\n    for filename in os.listdir(target_testing_dir):\n        f = os.path.join(target_testing_dir, filename)\n        # checking if it is a file\n        if os.path.isfile(f) and \".csv\" in f:\n            pdf = pd.read_csv(f, header=0, index_col=0)\n            date_list = np.concatenate((date_list, pdf.index.unique()))\n    latest_date = get_latest_date_from_an_array(date_list, data_format)\n    print(latest_date)\n    date_time_obj = datetime.strptime(latest_date, data_format)\n    return date_time_obj.strftime(\"%Y-%m-%d\")\n\ndef convert_date_from_1900(day_value):\n    \"\"\"\n    Convert a day value since 1900 to a date string in the format \"YYYY-MM-DD\".\n    \n    Parameters:\n    - day_value (int): Number of days since January 1, 1900.\n    \n    Returns:\n    - str: Date string in \"YYYY-MM-DD\" format.\n    \"\"\"\n    reference_date = datetime(1900, 1, 1)\n    result_date = reference_date + timedelta(days=day_value)\n    return result_date.strftime(\"%Y-%m-%d\")\n\ndef convert_date_to_1900(date_string):\n    \"\"\"\n    Convert a date string in the format \"YYYY-MM-DD\" to a day value since 1900.\n    \n    Parameters:\n    - date_string (str): Date string in \"YYYY-MM-DD\" format.\n    \n    Returns:\n    - int: Number of days since January 1, 1900.\n    \"\"\"\n    input_date = datetime.strptime(date_string, \"%Y-%m-%d\")\n    reference_date = datetime(1900, 1, 1)\n    delta = input_date - reference_date\n    day_value = delta.days\n    return day_value\n\nday_index = convert_date_to_1900(test_start_date)\n#create_cell_location_csv()\n#findLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n",
  "history_output" : "today date = 2023-10-25\ntest start date:  2018-01-01\ntest end date:  2023-10-25\n/home/ubuntu\n",
  "history_begin_time" : 1698276478312,
  "history_end_time" : 1698276478816,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "xwds7lqdd30",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698252277355,
  "history_end_time" : 1698252277355,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "eo5s2rwch59",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698251392456,
  "history_end_time" : 1698251392456,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ftk0n5h5ov8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698228210932,
  "history_end_time" : 1698228210932,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "epu5kdt2esa",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698227897127,
  "history_end_time" : 1698227897127,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "lknbjlr2aoj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698163737281,
  "history_end_time" : 1698163737281,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "lZ2MYnUIo4nc",
  "history_input" : "from datetime import date, datetime, timedelta\nimport json\nimport math\nimport numpy as np\nimport os\nimport pandas as pd\n# import ee\n#import seaborn as sns\nimport matplotlib.pyplot as plt\n#import geopandas as gpd\n#import geojson\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"2019-01-01\"\ntrain_end_date = \"2022-12-31\"\n\ntest_start_date = \"2023-05-29\"\ntest_end_date = d1\nprint(\"test start date: \", test_start_date)\nprint(\"test end date: \", test_end_date)\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\nwork_dir = f\"{homedir}/gridmet_test_run\"\n\n# Define a function to convert the month to season\ndef month_to_season(month):\n    if 3 <= month <= 5:\n        return 1\n    elif 6 <= month <= 8:\n        return 2\n    elif 9 <= month <= 11:\n        return 3\n    else:\n        return 4\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate the distance (Euclidean) between two sets of coordinates (lat1, lon1) and (lat2, lon2).\n    \n    Parameters:\n    - lat1 (float): Latitude of the first point.\n    - lon1 (float): Longitude of the first point.\n    - lat2 (float): Latitude of the second point.\n    - lon2 (float): Longitude of the second point.\n    \n    Returns:\n    - float: The Euclidean distance between the two points.\n    \"\"\"\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1 - lat2) ** 2 + (lon1 - lon2) ** 2)\n\ndef create_cell_location_csv():\n    \"\"\"\n    Create a CSV file containing cell locations from a GeoJSON file.\n    \"\"\"\n    # read grid cell\n    gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n    all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n    if os.path.exists(all_cell_coords_file):\n        os.remove(all_cell_coords_file)\n\n    grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n    print(grid_coords_df.head())\n    gridcells = geojson.load(open(gridcells_file))\n    for idx, cell in enumerate(gridcells['features']):\n        current_cell_id = cell['properties']['cell_id']\n        cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n        cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n        grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n\n    # grid_coords_np = grid_coords_df.to_numpy()\n    # print(grid_coords_np.shape)\n    grid_coords_df.to_csv(all_cell_coords_file, index=False)\n    # np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n    # print(grid_coords_np.shape)\n\ndef get_latest_date_from_an_array(arr, date_format):\n    \"\"\"\n    Get the latest date from an array of date strings.\n    \n    Parameters:\n    - arr (list): List of date strings.\n    - date_format (str): Date format for parsing the date strings.\n    \n    Returns:\n    - str: The latest date string.\n    \"\"\"\n    return max(arr, key=lambda x: datetime.strptime(x, date_format))\n\ndef findLastStopDate(target_testing_dir, data_format):\n    \"\"\"\n    Find the last stop date from CSV files in a directory.\n    \n    Parameters:\n    - target_testing_dir (str): Directory containing CSV files.\n    - data_format (str): Date format for parsing the date strings.\n    \n    Returns:\n    - str: The latest stop date.\n    \"\"\"\n    date_list = []\n    for filename in os.listdir(target_testing_dir):\n        f = os.path.join(target_testing_dir, filename)\n        # checking if it is a file\n        if os.path.isfile(f) and \".csv\" in f:\n            pdf = pd.read_csv(f, header=0, index_col=0)\n            date_list = np.concatenate((date_list, pdf.index.unique()))\n    latest_date = get_latest_date_from_an_array(date_list, data_format)\n    print(latest_date)\n    date_time_obj = datetime.strptime(latest_date, data_format)\n    return date_time_obj.strftime(\"%Y-%m-%d\")\n\ndef convert_date_from_1900(day_value):\n    \"\"\"\n    Convert a day value since 1900 to a date string in the format \"YYYY-MM-DD\".\n    \n    Parameters:\n    - day_value (int): Number of days since January 1, 1900.\n    \n    Returns:\n    - str: Date string in \"YYYY-MM-DD\" format.\n    \"\"\"\n    reference_date = datetime(1900, 1, 1)\n    result_date = reference_date + timedelta(days=day_value)\n    return result_date.strftime(\"%Y-%m-%d\")\n\ndef convert_date_to_1900(date_string):\n    \"\"\"\n    Convert a date string in the format \"YYYY-MM-DD\" to a day value since 1900.\n    \n    Parameters:\n    - date_string (str): Date string in \"YYYY-MM-DD\" format.\n    \n    Returns:\n    - int: Number of days since January 1, 1900.\n    \"\"\"\n    input_date = datetime.strptime(date_string, \"%Y-%m-%d\")\n    reference_date = datetime(1900, 1, 1)\n    delta = input_date - reference_date\n    day_value = delta.days\n    return day_value\n\nday_index = convert_date_to_1900(test_start_date)\n#create_cell_location_csv()\n#findLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n",
  "history_output" : "today date = 2023-10-24\ntest start date:  2023-05-29\ntest end date:  2023-10-24\n/home/ubuntu\n",
  "history_begin_time" : 1698163732783,
  "history_end_time" : 1698163733274,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "fyohd60g9kl",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698163445816,
  "history_end_time" : 1698163445816,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "kmKsCcKIXSq2",
  "history_input" : "from datetime import date, datetime, timedelta\nimport json\nimport math\nimport numpy as np\nimport os\nimport pandas as pd\n# import ee\n#import seaborn as sns\nimport matplotlib.pyplot as plt\n#import geopandas as gpd\n#import geojson\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"2019-01-01\"\ntrain_end_date = \"2022-12-31\"\n\ntest_start_date = \"2023-05-27\"\ntest_end_date = d1\nprint(\"test start date: \", test_start_date)\nprint(\"test end date: \", test_end_date)\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\nwork_dir = f\"{homedir}/gridmet_test_run\"\n\n# Define a function to convert the month to season\ndef month_to_season(month):\n    if 3 <= month <= 5:\n        return 1\n    elif 6 <= month <= 8:\n        return 2\n    elif 9 <= month <= 11:\n        return 3\n    else:\n        return 4\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate the distance (Euclidean) between two sets of coordinates (lat1, lon1) and (lat2, lon2).\n    \n    Parameters:\n    - lat1 (float): Latitude of the first point.\n    - lon1 (float): Longitude of the first point.\n    - lat2 (float): Latitude of the second point.\n    - lon2 (float): Longitude of the second point.\n    \n    Returns:\n    - float: The Euclidean distance between the two points.\n    \"\"\"\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1 - lat2) ** 2 + (lon1 - lon2) ** 2)\n\ndef create_cell_location_csv():\n    \"\"\"\n    Create a CSV file containing cell locations from a GeoJSON file.\n    \"\"\"\n    # read grid cell\n    gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n    all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n    if os.path.exists(all_cell_coords_file):\n        os.remove(all_cell_coords_file)\n\n    grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n    print(grid_coords_df.head())\n    gridcells = geojson.load(open(gridcells_file))\n    for idx, cell in enumerate(gridcells['features']):\n        current_cell_id = cell['properties']['cell_id']\n        cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n        cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n        grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n\n    # grid_coords_np = grid_coords_df.to_numpy()\n    # print(grid_coords_np.shape)\n    grid_coords_df.to_csv(all_cell_coords_file, index=False)\n    # np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n    # print(grid_coords_np.shape)\n\ndef get_latest_date_from_an_array(arr, date_format):\n    \"\"\"\n    Get the latest date from an array of date strings.\n    \n    Parameters:\n    - arr (list): List of date strings.\n    - date_format (str): Date format for parsing the date strings.\n    \n    Returns:\n    - str: The latest date string.\n    \"\"\"\n    return max(arr, key=lambda x: datetime.strptime(x, date_format))\n\ndef findLastStopDate(target_testing_dir, data_format):\n    \"\"\"\n    Find the last stop date from CSV files in a directory.\n    \n    Parameters:\n    - target_testing_dir (str): Directory containing CSV files.\n    - data_format (str): Date format for parsing the date strings.\n    \n    Returns:\n    - str: The latest stop date.\n    \"\"\"\n    date_list = []\n    for filename in os.listdir(target_testing_dir):\n        f = os.path.join(target_testing_dir, filename)\n        # checking if it is a file\n        if os.path.isfile(f) and \".csv\" in f:\n            pdf = pd.read_csv(f, header=0, index_col=0)\n            date_list = np.concatenate((date_list, pdf.index.unique()))\n    latest_date = get_latest_date_from_an_array(date_list, data_format)\n    print(latest_date)\n    date_time_obj = datetime.strptime(latest_date, data_format)\n    return date_time_obj.strftime(\"%Y-%m-%d\")\n\ndef convert_date_from_1900(day_value):\n    \"\"\"\n    Convert a day value since 1900 to a date string in the format \"YYYY-MM-DD\".\n    \n    Parameters:\n    - day_value (int): Number of days since January 1, 1900.\n    \n    Returns:\n    - str: Date string in \"YYYY-MM-DD\" format.\n    \"\"\"\n    reference_date = datetime(1900, 1, 1)\n    result_date = reference_date + timedelta(days=day_value)\n    return result_date.strftime(\"%Y-%m-%d\")\n\ndef convert_date_to_1900(date_string):\n    \"\"\"\n    Convert a date string in the format \"YYYY-MM-DD\" to a day value since 1900.\n    \n    Parameters:\n    - date_string (str): Date string in \"YYYY-MM-DD\" format.\n    \n    Returns:\n    - int: Number of days since January 1, 1900.\n    \"\"\"\n    input_date = datetime.strptime(date_string, \"%Y-%m-%d\")\n    reference_date = datetime(1900, 1, 1)\n    delta = input_date - reference_date\n    day_value = delta.days\n    return day_value\n\nday_index = convert_date_to_1900(test_start_date)\n#create_cell_location_csv()\n#findLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n",
  "history_output" : "today date = 2023-10-24\ntest start date:  2023-05-27\ntest end date:  2023-10-24\n/home/ubuntu\n",
  "history_begin_time" : 1698163343459,
  "history_end_time" : 1698163343942,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "ihwwhiydu6v",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698163121529,
  "history_end_time" : 1698163121529,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "mcqbwxqw3pw",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698160809342,
  "history_end_time" : 1698160809342,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "t9xlfqpij9e",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698157805161,
  "history_end_time" : 1698157805161,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ya655qtvfva",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698152099726,
  "history_end_time" : 1698152099726,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "bjjkc3vfti1",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698095495710,
  "history_end_time" : 1698095495710,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "gzlgkfg5hsh",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1698075453547,
  "history_end_time" : 1698075453547,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "rz7nmvtw6ye",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1697349529987,
  "history_end_time" : 1697349529987,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "biugmquq2k5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1697348852245,
  "history_end_time" : 1697348852245,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "2f0ul8ke9qa",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1697189923536,
  "history_end_time" : 1697189923536,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "4bsf5os1kx2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1697188523278,
  "history_end_time" : 1697188523278,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "zn0khuo0ti5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1697187892241,
  "history_end_time" : 1697187892241,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "zfi3ymga9h0",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1697187367945,
  "history_end_time" : 1697187367945,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "t12qni6pq4a",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1696863953147,
  "history_end_time" : 1696863953147,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "w9o4im9v0vx",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1696862402909,
  "history_end_time" : 1696862402909,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "6x7qoh5gpma",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1696832263653,
  "history_end_time" : 1696832263653,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "0a9k0fojzt1",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1696831867309,
  "history_end_time" : 1696831867309,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "jaozmprjy6a",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1696830174274,
  "history_end_time" : 1696830174274,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "QQBk2tVytLZB",
  "history_input" : "from datetime import date, datetime, timedelta\nimport json\nimport math\nimport numpy as np\nimport os\nimport pandas as pd\n# import ee\n#import seaborn as sns\nimport matplotlib.pyplot as plt\n#import geopandas as gpd\n#import geojson\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"2019-01-01\"\ntrain_end_date = \"2022-12-31\"\n\ntest_start_date = \"2023-02-11\"\ntest_end_date = d1\nprint(\"test start date: \", test_start_date)\nprint(\"test end date: \", test_end_date)\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\nwork_dir = \"/home/chetana/gridmet_test_run\"\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate the distance (Euclidean) between two sets of coordinates (lat1, lon1) and (lat2, lon2).\n    \n    Parameters:\n    - lat1 (float): Latitude of the first point.\n    - lon1 (float): Longitude of the first point.\n    - lat2 (float): Latitude of the second point.\n    - lon2 (float): Longitude of the second point.\n    \n    Returns:\n    - float: The Euclidean distance between the two points.\n    \"\"\"\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1 - lat2) ** 2 + (lon1 - lon2) ** 2)\n\ndef create_cell_location_csv():\n    \"\"\"\n    Create a CSV file containing cell locations from a GeoJSON file.\n    \"\"\"\n    # read grid cell\n    gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n    all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n    if os.path.exists(all_cell_coords_file):\n        os.remove(all_cell_coords_file)\n\n    grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n    print(grid_coords_df.head())\n    gridcells = geojson.load(open(gridcells_file))\n    for idx, cell in enumerate(gridcells['features']):\n        current_cell_id = cell['properties']['cell_id']\n        cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n        cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n        grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n\n    # grid_coords_np = grid_coords_df.to_numpy()\n    # print(grid_coords_np.shape)\n    grid_coords_df.to_csv(all_cell_coords_file, index=False)\n    # np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n    # print(grid_coords_np.shape)\n\ndef get_latest_date_from_an_array(arr, date_format):\n    \"\"\"\n    Get the latest date from an array of date strings.\n    \n    Parameters:\n    - arr (list): List of date strings.\n    - date_format (str): Date format for parsing the date strings.\n    \n    Returns:\n    - str: The latest date string.\n    \"\"\"\n    return max(arr, key=lambda x: datetime.strptime(x, date_format))\n\ndef findLastStopDate(target_testing_dir, data_format):\n    \"\"\"\n    Find the last stop date from CSV files in a directory.\n    \n    Parameters:\n    - target_testing_dir (str): Directory containing CSV files.\n    - data_format (str): Date format for parsing the date strings.\n    \n    Returns:\n    - str: The latest stop date.\n    \"\"\"\n    date_list = []\n    for filename in os.listdir(target_testing_dir):\n        f = os.path.join(target_testing_dir, filename)\n        # checking if it is a file\n        if os.path.isfile(f) and \".csv\" in f:\n            pdf = pd.read_csv(f, header=0, index_col=0)\n            date_list = np.concatenate((date_list, pdf.index.unique()))\n    latest_date = get_latest_date_from_an_array(date_list, data_format)\n    print(latest_date)\n    date_time_obj = datetime.strptime(latest_date, data_format)\n    return date_time_obj.strftime(\"%Y-%m-%d\")\n\ndef convert_date_from_1900(day_value):\n    \"\"\"\n    Convert a day value since 1900 to a date string in the format \"YYYY-MM-DD\".\n    \n    Parameters:\n    - day_value (int): Number of days since January 1, 1900.\n    \n    Returns:\n    - str: Date string in \"YYYY-MM-DD\" format.\n    \"\"\"\n    reference_date = datetime(1900, 1, 1)\n    result_date = reference_date + timedelta(days=day_value)\n    return result_date.strftime(\"%Y-%m-%d\")\n\ndef convert_date_to_1900(date_string):\n    \"\"\"\n    Convert a date string in the format \"YYYY-MM-DD\" to a day value since 1900.\n    \n    Parameters:\n    - date_string (str): Date string in \"YYYY-MM-DD\" format.\n    \n    Returns:\n    - int: Number of days since January 1, 1900.\n    \"\"\"\n    input_date = datetime.strptime(date_string, \"%Y-%m-%d\")\n    reference_date = datetime(1900, 1, 1)\n    delta = input_date - reference_date\n    day_value = delta.days\n    return day_value\n\nday_index = convert_date_to_1900(test_start_date)\n#create_cell_location_csv()\n#findLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n",
  "history_output" : "today date = 2023-10-09\ntest start date:  2023-02-11\ntest end date:  2023-10-09\n/home/chetana\n",
  "history_begin_time" : 1696830168315,
  "history_end_time" : 1696830169098,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "kgu3jvmtylr",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1696787541865,
  "history_end_time" : 1696787541865,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "crhvmdj8qbo",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1696786838149,
  "history_end_time" : 1696786838149,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "im8kvx0ehtl",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1696771780807,
  "history_end_time" : 1696771780807,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "1ptwpelb8tq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1696602943921,
  "history_end_time" : 1696602943921,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "jtu5bfk04jk",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1696432484310,
  "history_end_time" : 1696432484310,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "bep80lo9rju",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1696432299741,
  "history_end_time" : 1696432482231,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "yqjjwki40i4",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695827991071,
  "history_end_time" : 1695827991071,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "c52yzvskpwl",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695827889165,
  "history_end_time" : 1695827964213,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "k09rlhyyowk",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695827855633,
  "history_end_time" : 1695827867003,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "shvi5mw7p80",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695696616105,
  "history_end_time" : 1695696616105,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "tvk15jpg3o3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695694257317,
  "history_end_time" : 1695694257317,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "8552o2byogw",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695693585736,
  "history_end_time" : 1695693585736,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "mo8zs9l94k9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695693149349,
  "history_end_time" : 1695693149349,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "hcf1drkyqrq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695580915833,
  "history_end_time" : 1695580915833,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "m8rwa56zx9n",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695576291642,
  "history_end_time" : 1695576291642,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "akm4hialqrk",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695575930995,
  "history_end_time" : 1695575930995,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "gcas4phdag2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695535769198,
  "history_end_time" : 1695535769198,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "x82zy93mkzj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695535478675,
  "history_end_time" : 1695535478675,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "dz83fulq0ay",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695535214014,
  "history_end_time" : 1695535214014,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "5rog6qzoagn",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695534943577,
  "history_end_time" : 1695534943577,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "bfbaehrtl31",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695534671815,
  "history_end_time" : 1695534671815,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "zvwr6l58bd5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695533024083,
  "history_end_time" : 1695533024083,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "bocxs99q14t",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695529187854,
  "history_end_time" : 1695529187854,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "3q42wlzqo1q",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695528505144,
  "history_end_time" : 1695528505144,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "qzywimdb859",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695515862377,
  "history_end_time" : 1695515862377,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "oc1yg988pfh",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695506423828,
  "history_end_time" : 1695506423828,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "euk6927a4cu",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695418741262,
  "history_end_time" : 1695418741262,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "engg7iy1c04",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695417619666,
  "history_end_time" : 1695417619666,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "qgv8zr9r5j9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695417171268,
  "history_end_time" : 1695417171268,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "vi0xygtk4pa",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695417052723,
  "history_end_time" : 1695417052723,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "of1ym0qonjf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695416915997,
  "history_end_time" : 1695416915997,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ih4v76ykc2p",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695106488965,
  "history_end_time" : 1695106488965,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "jzbey9l105q",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695106316182,
  "history_end_time" : 1695106316182,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "lzoqn6qe1yo",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695054045015,
  "history_end_time" : 1695054045015,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "u0k84xns0hi",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695054019748,
  "history_end_time" : 1695054032321,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "pym1s2wha6t",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695053979880,
  "history_end_time" : 1695054019271,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "ftq0nhdwpn1",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695053793375,
  "history_end_time" : 1695053793375,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "yj5taqgypyh",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1695053733366,
  "history_end_time" : 1695053733366,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "hot850l49uw",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1694971144777,
  "history_end_time" : 1694972839684,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "1h3wjsrw70t",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1694970707912,
  "history_end_time" : 1694970707912,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "marq9rrwaqf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1694970594750,
  "history_end_time" : 1694970594750,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "qj5byyvqf1z",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1694970131497,
  "history_end_time" : 1694970131497,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "tko6oms4ue5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1694969349988,
  "history_end_time" : 1694969349988,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "r7oc62m0kx2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1694905307648,
  "history_end_time" : 1694905307648,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "vdjmipdx5kc",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1694897887116,
  "history_end_time" : 1694897887116,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "1yxgr5n1jjo",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1691531335745,
  "history_end_time" : 1691531335745,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "tq3z35",
  "indicator" : "Skipped"
},{
  "history_id" : "d0ybqp3tq01",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1691531292631,
  "history_end_time" : 1691531292631,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "tq3z35",
  "indicator" : "Skipped"
},{
  "history_id" : "yurn632qin0",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1691531254508,
  "history_end_time" : 1691531284897,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "tq3z35",
  "indicator" : "Stopped"
},{
  "history_id" : "v46bq7q50k7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1691531163684,
  "history_end_time" : 1691531163684,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "tq3z35",
  "indicator" : "Skipped"
},{
  "history_id" : "bpsxdshasjz",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1691531120783,
  "history_end_time" : 1691531120783,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "tq3z35",
  "indicator" : "Skipped"
},{
  "history_id" : "tmbiwgpn0en",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1691531060777,
  "history_end_time" : 1691531060777,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "tq3z35",
  "indicator" : "Skipped"
},{
  "history_id" : "hoyzf97uobw",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1691530848263,
  "history_end_time" : 1691530848263,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "tq3z35",
  "indicator" : "Skipped"
},{
  "history_id" : "kv4j2vobm6i",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1691530717607,
  "history_end_time" : 1691530721102,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "tq3z35",
  "indicator" : "Stopped"
},{
  "history_id" : "srtmamwlmaw",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1691530690054,
  "history_end_time" : 1691530716746,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "tq3z35",
  "indicator" : "Stopped"
},{
  "history_id" : "hlj17zrx1b6",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1691530620948,
  "history_end_time" : 1691530622435,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "tq3z35",
  "indicator" : "Stopped"
},{
  "history_id" : "0gbam3guqga",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1691530617058,
  "history_end_time" : 1691530617058,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "tq3z35",
  "indicator" : "Skipped"
},{
  "history_id" : "35a5e8jej2z",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1691530599676,
  "history_end_time" : 1691530614281,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "tq3z35",
  "indicator" : "Stopped"
},{
  "history_id" : "xvpe69ac79g",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1689632033808,
  "history_end_time" : 1689632033808,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "iggnrjo5pg4",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1689631636444,
  "history_end_time" : 1689631636444,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "tq3z35",
  "indicator" : "Skipped"
},{
  "history_id" : "mk64yuc86nr",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1689135057875,
  "history_end_time" : 1689135057875,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "3pihgaax1vu",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1688416860236,
  "history_end_time" : 1688416907376,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "jf7wuu",
  "indicator" : "Stopped"
},{
  "history_id" : "vrsi9ew4c67",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1688416833715,
  "history_end_time" : 1688416848467,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "jf7wuu",
  "indicator" : "Stopped"
},{
  "history_id" : "jtkc7iznopm",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1688416668375,
  "history_end_time" : 1688416822956,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "jf7wuu",
  "indicator" : "Stopped"
},{
  "history_id" : "p2tg8cc9vfv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1688416628773,
  "history_end_time" : 1688416660673,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "jf7wuu",
  "indicator" : "Stopped"
},{
  "history_id" : "4x2lb3o6z5y",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1688416567310,
  "history_end_time" : 1688416575014,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "jf7wuu",
  "indicator" : "Stopped"
},{
  "history_id" : "vcvd4kap9fe",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1687546866695,
  "history_end_time" : 1687546866695,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "vmle02qg5og",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1687463685019,
  "history_end_time" : 1687463685019,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "73xhaojhvbv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1687463635413,
  "history_end_time" : 1687463635413,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "eug0k88m2v6",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1686236147013,
  "history_end_time" : 1686237909495,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "jf7wuu",
  "indicator" : "Stopped"
},{
  "history_id" : "efcc4hhh1zs",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1686235960971,
  "history_end_time" : 1686235985413,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "jf7wuu",
  "indicator" : "Stopped"
},{
  "history_id" : "6zrdxoi47jc",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1686235529616,
  "history_end_time" : 1686235529616,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "jf7wuu",
  "indicator" : "Skipped"
},{
  "history_id" : "jwo57mt45fy",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1686235448224,
  "history_end_time" : 1686235482629,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "jf7wuu",
  "indicator" : "Stopped"
},{
  "history_id" : "95idgmffi7b",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1686235402203,
  "history_end_time" : 1686235424782,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "jf7wuu",
  "indicator" : "Stopped"
},{
  "history_id" : "l3ljbnc6c53",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1686153654195,
  "history_end_time" : 1686153654195,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "jf7wuu",
  "indicator" : "Skipped"
},{
  "history_id" : "wh69xyi8zwy",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682984798063,
  "history_end_time" : 1682984800294,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "jf7wuu",
  "indicator" : "Stopped"
},{
  "history_id" : "068cjcg2npk",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1681516927631,
  "history_end_time" : 1681516927631,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "v4m1jy4pd8k",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1681039707709,
  "history_end_time" : 1681039707709,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "qewbwepy6v9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1681039689403,
  "history_end_time" : 1681039697766,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "cd50cpbafgs",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1681007820121,
  "history_end_time" : 1681007820121,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "dxm1qr46jpq",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  #print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    \n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        #print(pdf)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n        \n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  #print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"/home/chetana/Documents/GitHub/SnowCast/data/sim_training/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "  File \"snowcast_utils.py\", line 30\n    github_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n                                                      ^\n",
  "history_begin_time" : 1679442747960,
  "history_end_time" : 1679442750065,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "jf7wuu",
  "indicator" : "Failed"
},{
  "history_id" : "hjghumpvjz4",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1679332584774,
  "history_end_time" : 1679332584774,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "jf7wuu",
  "indicator" : "Skipped"
},{
  "history_id" : "6nmmcoi2kgt",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1679191258492,
  "history_end_time" : 1679191258492,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "2jifky",
  "indicator" : "Skipped"
},{
  "history_id" : "7weihag3o29",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1679091534971,
  "history_end_time" : 1679091744968,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "3ynec4menv7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1679091526760,
  "history_end_time" : 1679091533667,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "pbJFlf8iPDZG",
  "history_input" : "from datetime import date\nfrom datetime import datetime, timedelta\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nd1 = today - timedelta(days=3)\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2023-03-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  #print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    \n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        #print(pdf)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n        \n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  #print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"/home/chetana/Documents/GitHub/SnowCast/data/sim_training/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2023-03-14\n/home/chetana\n",
  "history_begin_time" : 1679090823474,
  "history_end_time" : 1679090849983,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "hELNcbYRWle0",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\nfrom datetime import datetime, timedelta\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nd1 = today - timedelta(days=3)\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2023-03-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  #print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    \n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        #print(pdf)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n        \n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  #print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"/home/chetana/Documents/GitHub/SnowCast/data/sim_training/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2023-03-14\n/home/chetana\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/hELNcbYRWle0/snowcast_utils.py\", line 85, in <module>\n    findLastStopDate(f\"/home/chetana/Documents/GitHub/SnowCast/data/sim_training/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n  File \"/home/chetana/gw-workspace/hELNcbYRWle0/snowcast_utils.py\", line 79, in findLastStopDate\n    latest_date = get_latest_date_from_an_array(date_list, data_format)\n  File \"/home/chetana/gw-workspace/hELNcbYRWle0/snowcast_utils.py\", line 65, in get_latest_date_from_an_array\n    return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  File \"/home/chetana/gw-workspace/hELNcbYRWle0/snowcast_utils.py\", line 65, in <lambda>\n    return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\nAttributeError: type object 'datetime.datetime' has no attribute 'datetime'\n",
  "history_begin_time" : 1679090573022,
  "history_end_time" : 1679090593670,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "9cQPaLONYTIk",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nd1 = today - timedelta(days=3)\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2023-03-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  #print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    \n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        #print(pdf)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n        \n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  #print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"/home/chetana/Documents/GitHub/SnowCast/data/sim_training/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/9cQPaLONYTIk/snowcast_utils.py\", line 19, in <module>\n    d1 = today - timedelta(days=3)\nNameError: name 'timedelta' is not defined\n",
  "history_begin_time" : 1679090539758,
  "history_end_time" : 1679090543088,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "3lcphyjrjdk",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678887964084,
  "history_end_time" : 1678888215696,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "0r68vqd7hmj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678887944935,
  "history_end_time" : 1678887946446,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "lfofnz7s6id",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678887287233,
  "history_end_time" : 1678887836230,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "sapy1b01gxm",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2023-03-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  #print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    \n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        #print(pdf)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n        \n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  #print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"/home/chetana/Documents/GitHub/SnowCast/data/sim_training/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2023-03-15\n/home/chetana\n",
  "history_begin_time" : 1678886695878,
  "history_end_time" : 1678887010627,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "3bk91pdkgi7",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-03-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  #print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    \n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        #print(pdf)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n        \n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  #print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"/home/chetana/Documents/GitHub/SnowCast/data/sim_training/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2023-03-15\n/home/chetana\n",
  "history_begin_time" : 1678884565015,
  "history_end_time" : 1678884986357,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "rn3od1lnsil",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-03-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  #print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    \n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        #print(pdf)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n        \n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  #print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"/home/chetana/Documents/GitHub/SnowCast/data/sim_training/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2023-03-15\n/home/chetana\n",
  "history_begin_time" : 1678884509096,
  "history_end_time" : 1678884535820,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Done"
},{
  "history_id" : "og5mzurjnxq",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-03-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  #print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    \n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        #print(pdf)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n        \n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  #print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"/home/chetana/Documents/GitHub/SnowCast/data/sim_training/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2023-03-15\n/home/chetana\n",
  "history_begin_time" : 1678884213986,
  "history_end_time" : 1678884438331,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "900bccdu3n9",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-03-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  #print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    \n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        #print(pdf)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n        \n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  #print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"/home/chetana/Documents/GitHub/SnowCast/data/sim_training/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2023-03-15\n/home/chetana\n",
  "history_begin_time" : 1678884130816,
  "history_end_time" : 1678884157660,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Done"
},{
  "history_id" : "xgu024zlzan",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  #print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    \n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        #print(pdf)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n        \n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  #print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"/home/chetana/Documents/GitHub/SnowCast/data/sim_training/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2023-03-15\n/home/chetana\n",
  "history_begin_time" : 1678883329093,
  "history_end_time" : 1678883775445,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "sln62h4b290",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  #print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    \n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        #print(pdf)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n        \n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  #print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"/home/chetana/Documents/GitHub/SnowCast/data/sim_training/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2023-03-14\n/home/chetana\n",
  "history_begin_time" : 1678756765988,
  "history_end_time" : 1678756811932,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Done"
},{
  "history_id" : "4xygbh50fsy",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678756683230,
  "history_end_time" : 1678756684789,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "019f4eulqrj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678749631694,
  "history_end_time" : 1678749936009,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "drhnfjsvity",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678748546797,
  "history_end_time" : 1678748546797,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "2opleweg4qa",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678747245270,
  "history_end_time" : 1678747245270,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "16748wr5zye",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678746481152,
  "history_end_time" : 1678746793043,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "jjo3x6pip77",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678743868487,
  "history_end_time" : 1678744167082,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "ijbq6a3loqq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678743629010,
  "history_end_time" : 1678743629010,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "ofyl2xt4py4",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678743144808,
  "history_end_time" : 1678743615533,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "qjh2vhv0862",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678742583270,
  "history_end_time" : 1678742583270,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "7a2p9w1vi3o",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678742209453,
  "history_end_time" : 1678742571509,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "98tk9rsrkl4",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-02-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  #print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    \n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        #print(pdf)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n        \n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  #print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"/home/chetana/Documents/GitHub/SnowCast/data/sim_training/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2023-03-13\n/home/chetana\n",
  "history_begin_time" : 1678738707387,
  "history_end_time" : 1678738746564,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Done"
},{
  "history_id" : "xy4vnrtocyt",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-02-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  #print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    \n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        #print(pdf)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n        \n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  #print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"/home/chetana/Documents/GitHub/SnowCast/data/sim_training/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2023-03-13\n/home/chetana\n",
  "history_begin_time" : 1678725424482,
  "history_end_time" : 1678725455047,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Done"
},{
  "history_id" : "46vg4cdq7xk",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-02-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  #print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    \n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        #print(pdf)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n        \n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  #print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"/home/chetana/Documents/GitHub/SnowCast/data/sim_training/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2023-03-13\n/home/chetana\n",
  "history_begin_time" : 1678723112469,
  "history_end_time" : 1678725408350,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "ihezi9qxw40",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-02-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  #print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    \n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        #print(pdf)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n        \n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  #print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"/home/chetana/Documents/GitHub/SnowCast/data/sim_training/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2023-03-12\n/home/chetana\n",
  "history_begin_time" : 1678649002489,
  "history_end_time" : 1678649014088,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Done"
},{
  "history_id" : "vc1i2vum8qu",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-02-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  #print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    \n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        #print(pdf)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n        \n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  #print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"/home/chetana/Documents/GitHub/SnowCast/data/sim_training/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2023-03-12\n/home/chetana\n",
  "history_begin_time" : 1678648367448,
  "history_end_time" : 1678648418579,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Done"
},{
  "history_id" : "8term9mkuiw",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-02-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  #print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    \n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        #print(pdf)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n        \n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  #print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"/home/chetana/Documents/GitHub/SnowCast/data/sim_training/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2023-03-12\n/home/chetana\n",
  "history_begin_time" : 1678648337697,
  "history_end_time" : 1678648418578,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Done"
},{
  "history_id" : "zap9iz8cb2q",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678564567721,
  "history_end_time" : 1678564567721,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "7h9f374or9i",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678564538598,
  "history_end_time" : 1678564538598,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "iq19mes9p90",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678557921937,
  "history_end_time" : 1678557923649,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "7zmm0shzj3c",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678557705768,
  "history_end_time" : 1678557898796,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "q1uuzzbtgyq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678497028145,
  "history_end_time" : 1678497028145,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "3rpkdf14k9y",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678330214199,
  "history_end_time" : 1678330214199,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "zp0zd1mur3t",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678326965083,
  "history_end_time" : 1694185584842,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "3j4zk7bynw1",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678312067623,
  "history_end_time" : 1678312067623,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "xppyzevwmjn",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678312030766,
  "history_end_time" : 1678312065073,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "kmbpe6simnx",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1678312001470,
  "history_end_time" : 1694185586275,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "yft7xm5rc8d",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  #print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    \n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        #print(pdf)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n        \n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  #print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"/home/chetana/Documents/GitHub/SnowCast/data/sim_training/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2023-03-08\n/home/chetana\n",
  "history_begin_time" : 1678283519520,
  "history_end_time" : 1678283570101,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Done"
},{
  "history_id" : "wtaohs86slx",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  #print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    \n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        #print(pdf)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n        \n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  #print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"/home/chetana/Documents/GitHub/SnowCast/data/sim_training/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2023-03-08\n/home/chetana\n",
  "history_begin_time" : 1678242453774,
  "history_end_time" : 1694185588050,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "mf9qcvo4832",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  #print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    \n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        #print(pdf)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n        \n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  #print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"/home/chetana/Documents/GitHub/SnowCast/data/sim_training/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2023-03-08\n/home/chetana\n",
  "history_begin_time" : 1678241841724,
  "history_end_time" : 1694185588558,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "i5uvbiw9g9j",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  #print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    \n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        #print(pdf)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n        \n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  #print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"/home/chetana/Documents/GitHub/SnowCast/data/sim_training/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "",
  "history_begin_time" : 1678206373968,
  "history_end_time" : 1678206378260,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "gpohd01xxyu",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  #print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    \n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        #print(pdf)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n        \n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  #print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"/home/chetana/Documents/GitHub/SnowCast/data/sim_training/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2023-03-07\n/home/chetana\n",
  "history_begin_time" : 1678201922848,
  "history_end_time" : 1678201952199,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Done"
},{
  "history_id" : "l2dx1b54nic",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  #print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    \n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        #print(pdf)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n        \n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  #print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"/home/chetana/Documents/GitHub/SnowCast/data/sim_training/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2023-03-07\n/home/chetana\n",
  "history_begin_time" : 1678201353686,
  "history_end_time" : 1678201516416,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "r59i0a94flz",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  #print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    \n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        #print(pdf)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n        \n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  #print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"/home/chetana/Documents/GitHub/SnowCast/data/sim_training/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2023-03-07\n/home/chetana\n",
  "history_begin_time" : 1678155191897,
  "history_end_time" : 1678155220663,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Done"
},{
  "history_id" : "orr7n3q7f2j",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  #print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    \n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        #print(pdf)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n        \n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  #print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"/home/chetana/Documents/GitHub/SnowCast/data/sim_training/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2023-03-06\n/home/chetana\n",
  "history_begin_time" : 1678144736522,
  "history_end_time" : 1678154846287,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "gnAzAnC78GCO",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  #print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    \n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        #print(pdf)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n        \n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  #print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"/home/chetana/Documents/GitHub/SnowCast/data/sim_training/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2023-03-04\n/home/chetana\n",
  "history_begin_time" : 1677958766926,
  "history_end_time" : 1677958792004,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "exuGC03Zwcs9",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  #print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    \n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        #print(pdf)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n        \n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  #print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"/home/chetana/Documents/GitHub/SnowCast/data/sim_training/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2023-03-04\n/home/chetana\n",
  "history_begin_time" : 1677958750219,
  "history_end_time" : 1677958766942,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "30raexcnsb0",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  #print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    \n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        #print(pdf)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n        \n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  #print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"/home/chetana/Documents/GitHub/SnowCast/data/sim_training/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2023-03-03\n/home/chetana\n",
  "history_begin_time" : 1677858957589,
  "history_end_time" : 1677867648647,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "jke9ztcvdyt",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  #print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    \n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        #print(pdf)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n        \n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  #print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"/home/chetana/Documents/GitHub/SnowCast/data/sim_training/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2023-03-03\n/home/chetana\n",
  "history_begin_time" : 1677858789811,
  "history_end_time" : 1694185596828,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "n7szrgnmgc0",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  #print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    \n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        #print(pdf)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n        \n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  #print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"/home/chetana/Documents/GitHub/SnowCast/data/sim_training/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2023-03-03\n/home/chetana\n",
  "history_begin_time" : 1677809685563,
  "history_end_time" : 1694185596403,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "p9l7r06r29c",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  #print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    \n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        #print(pdf)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n        \n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  #print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"/home/chetana/Documents/GitHub/SnowCast/data/sim_training/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2023-03-03\n/home/chetana\n",
  "history_begin_time" : 1677809410910,
  "history_end_time" : 1694185620804,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "6IunNRzQm7t3",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  #print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    \n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        #print(pdf)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n        \n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  #print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"/home/chetana/Documents/GitHub/SnowCast/data/sim_training/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2023-03-02\n/home/chetana\n",
  "history_begin_time" : 1677800005924,
  "history_end_time" : 1677800033432,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "q3uydsm8ao0",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    \n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        print(pdf)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n        \n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"/home/chetana/Documents/GitHub/SnowCast/data/sim_training/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "",
  "history_begin_time" : 1677786004500,
  "history_end_time" : 1677786042646,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "wmlztc2x9fw",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677784204258,
  "history_end_time" : 1677784272025,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "sh2754zpi9x",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677782901821,
  "history_end_time" : 1677782901821,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "h287j676yge",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677781745181,
  "history_end_time" : 1677781745181,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "tlfdd9eo804",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677719046601,
  "history_end_time" : 1677719046601,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "l2n3i52x1m2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677718179121,
  "history_end_time" : 1677718179121,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "J2QTY3ZnUhlS",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    \n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        print(pdf)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n        \n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"/home/chetana/Documents/GitHub/SnowCast/data/sim_training/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2023-03-02\n/home/chetana\nEmpty DataFrame\nColumns: [date, tmmn, cell_id, latitude, longitude]\nIndex: []\nEmpty DataFrame\nColumns: [date, rmin, cell_id, latitude, longitude]\nIndex: []\nEmpty DataFrame\nColumns: [date, vpd, cell_id, latitude, longitude]\nIndex: []\nEmpty DataFrame\nColumns: [date, eto, cell_id, latitude, longitude]\nIndex: []\nEmpty DataFrame\nColumns: [date, pr, cell_id, latitude, longitude]\nIndex: []\nEmpty DataFrame\nColumns: [date, tmmx, cell_id, latitude, longitude]\nIndex: []\nEmpty DataFrame\nColumns: [date, vs, cell_id, latitude, longitude]\nIndex: []\nEmpty DataFrame\nColumns: [date, rmax, cell_id, latitude, longitude]\nIndex: []\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/J2QTY3ZnUhlS/snowcast_utils.py\", line 84, in <module>\n    findLastStopDate(f\"/home/chetana/Documents/GitHub/SnowCast/data/sim_training/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n  File \"/home/chetana/gw-workspace/J2QTY3ZnUhlS/snowcast_utils.py\", line 78, in findLastStopDate\n    latest_date = get_latest_date_from_an_array(date_list, data_format)\n  File \"/home/chetana/gw-workspace/J2QTY3ZnUhlS/snowcast_utils.py\", line 64, in get_latest_date_from_an_array\n    return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\nValueError: max() arg is an empty sequence\n",
  "history_begin_time" : 1677717998264,
  "history_end_time" : 1677718002149,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "RhjdkUedhVbf",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    \n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n        print(date_list)\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"/home/chetana/Documents/GitHub/SnowCast/data/sim_training/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2023-03-02\n/home/chetana\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/RhjdkUedhVbf/snowcast_utils.py\", line 83, in <module>\n    findLastStopDate(f\"/home/chetana/Documents/GitHub/SnowCast/data/sim_training/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n  File \"/home/chetana/gw-workspace/RhjdkUedhVbf/snowcast_utils.py\", line 77, in findLastStopDate\n    latest_date = get_latest_date_from_an_array(date_list, data_format)\n  File \"/home/chetana/gw-workspace/RhjdkUedhVbf/snowcast_utils.py\", line 64, in get_latest_date_from_an_array\n    return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\nValueError: max() arg is an empty sequence\n",
  "history_begin_time" : 1677717972973,
  "history_end_time" : 1677717976652,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "j4z9ID7gZp2m",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    \n    f = os.path.join(target_testing_dir, filename)\n    print(f)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"/home/chetana/Documents/GitHub/SnowCast/data/sim_training/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2023-03-02\n/home/chetana\n/home/chetana/Documents/GitHub/SnowCast/data/sim_training/gridmet/tmmn.csv\n/home/chetana/Documents/GitHub/SnowCast/data/sim_training/gridmet/rmin.csv\n/home/chetana/Documents/GitHub/SnowCast/data/sim_training/gridmet/vpd.csv\n/home/chetana/Documents/GitHub/SnowCast/data/sim_training/gridmet/eto.csv\n/home/chetana/Documents/GitHub/SnowCast/data/sim_training/gridmet/pr.csv\n/home/chetana/Documents/GitHub/SnowCast/data/sim_training/gridmet/tmmx.csv\n/home/chetana/Documents/GitHub/SnowCast/data/sim_training/gridmet/vs.csv\n/home/chetana/Documents/GitHub/SnowCast/data/sim_training/gridmet/rmax.csv\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/j4z9ID7gZp2m/snowcast_utils.py\", line 83, in <module>\n    findLastStopDate(f\"/home/chetana/Documents/GitHub/SnowCast/data/sim_training/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n  File \"/home/chetana/gw-workspace/j4z9ID7gZp2m/snowcast_utils.py\", line 77, in findLastStopDate\n    latest_date = get_latest_date_from_an_array(date_list, data_format)\n  File \"/home/chetana/gw-workspace/j4z9ID7gZp2m/snowcast_utils.py\", line 64, in get_latest_date_from_an_array\n    return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\nValueError: max() arg is an empty sequence\n",
  "history_begin_time" : 1677717865675,
  "history_end_time" : 1677717869336,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "9L4DVqosEQqj",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    \n    f = os.path.join(target_testing_dir, filename)\n    print(f)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2023-03-02\n/home/chetana\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/9L4DVqosEQqj/snowcast_utils.py\", line 83, in <module>\n    findLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n  File \"/home/chetana/gw-workspace/9L4DVqosEQqj/snowcast_utils.py\", line 69, in findLastStopDate\n    for filename in os.listdir(target_testing_dir):\nFileNotFoundError: [Errno 2] No such file or directory: '/home/chetana/Documents/GitHub/SnowCast/data/sim_testing/gridmet/'\n",
  "history_begin_time" : 1677717826434,
  "history_end_time" : 1677717830013,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "FdG0PBPo9Hxz",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2023-03-02\n/home/chetana\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/FdG0PBPo9Hxz/snowcast_utils.py\", line 81, in <module>\n    findLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n  File \"/home/chetana/gw-workspace/FdG0PBPo9Hxz/snowcast_utils.py\", line 69, in findLastStopDate\n    for filename in os.listdir(target_testing_dir):\nFileNotFoundError: [Errno 2] No such file or directory: '/home/chetana/Documents/GitHub/SnowCast/data/sim_testing/gridmet/'\n",
  "history_begin_time" : 1677717740533,
  "history_end_time" : 1677717743996,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "qkf9ckwcvmi",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677679556271,
  "history_end_time" : 1677679556271,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "zlq1dl1vizg",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677679507382,
  "history_end_time" : 1677679549085,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "a06kz0s7wtz",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677636286882,
  "history_end_time" : 1677636286882,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "z9sfdd61lrm",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677636150384,
  "history_end_time" : 1677636150384,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "ehms99bx3db",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677636137247,
  "history_end_time" : 1677636142813,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "efrb1h0ibnj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677636063784,
  "history_end_time" : 1677636063784,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "fy53uw1a2wo",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677635881847,
  "history_end_time" : 1677635881847,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "yyihq2jnnf2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677617762812,
  "history_end_time" : 1677617762812,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "jui5dfi9q3r",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677606170907,
  "history_end_time" : 1677606170907,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "7hy7be54ple",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677606114227,
  "history_end_time" : 1677606114227,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "uut0kua6w1a",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677582848585,
  "history_end_time" : 1677582848585,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "45vto0w8saf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677525426569,
  "history_end_time" : 1677525426569,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "h5zg368wwhv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677462325781,
  "history_end_time" : 1694185608917,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "ulscco0x5zi",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677462312345,
  "history_end_time" : 1694185608698,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "knx07p89co2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677462311796,
  "history_end_time" : 1694185608628,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "2jzc6khqsth",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677428742756,
  "history_end_time" : 1677428742756,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "x2j6gp24zds",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677428687357,
  "history_end_time" : 1677428687357,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "h49n4jvue2r",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677426262967,
  "history_end_time" : 1677426262967,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "c6isimf6bgu",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677379889824,
  "history_end_time" : 1705789703791,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "a5rw0wbb7h2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677379837822,
  "history_end_time" : 1705789703169,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "ldry07yyddf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677352478018,
  "history_end_time" : 1677352478018,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "2m05xmksyoj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677352389927,
  "history_end_time" : 1677352389927,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "95mlkpjb0vu",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677352335879,
  "history_end_time" : 1677352335879,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "pbv5y2545z4",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677344119987,
  "history_end_time" : 1705789707063,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "v7bovgoy3rj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677282602925,
  "history_end_time" : 1677282602925,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "anryfqa80rc",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677273712236,
  "history_end_time" : 1677273712236,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "1rndxaxes7d",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677273698751,
  "history_end_time" : 1677273703950,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "cdygxup7dsu",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677273673917,
  "history_end_time" : 1677273679535,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "n3a8dq0w1ym",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677273657806,
  "history_end_time" : 1677273665453,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "ixswx927yx0",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677273536013,
  "history_end_time" : 1677273536013,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "7ojsw72r4g6",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677273519110,
  "history_end_time" : 1677273525488,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "ihkd14msn3r",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677273371306,
  "history_end_time" : 1677273371306,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "q7i8sdk122e",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677273340445,
  "history_end_time" : 1677273345443,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "ra4o7mjeepo",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677273323490,
  "history_end_time" : 1677273332233,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "boljtu36x26",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677273146664,
  "history_end_time" : 1677273146664,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "7smsw6djvmt",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677273100237,
  "history_end_time" : 1677273134491,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "m8d1rfbenwt",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677201275784,
  "history_end_time" : 1677201275784,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "5z582pq9kt5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677192311072,
  "history_end_time" : 1677192311072,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "qcdfv28mo6v",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677192268374,
  "history_end_time" : 1677192268374,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "i45ocxaxfy3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677191916741,
  "history_end_time" : 1677191916741,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "5khqsisi06k",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677184296699,
  "history_end_time" : 1677184296699,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "4pehv9sv7wt",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677184173555,
  "history_end_time" : 1677184173555,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "jmx2rh4re2r",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677113476466,
  "history_end_time" : 1677113476466,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "itj1c9uxyd6",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677108238630,
  "history_end_time" : 1677108238630,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "sqlquq2pg29",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677108212549,
  "history_end_time" : 1677108229734,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "ptfdiun45os",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677107869811,
  "history_end_time" : 1677107869811,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "girl2bg5pfi",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677107757959,
  "history_end_time" : 1677107757959,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "st0rywwnve5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677107718305,
  "history_end_time" : 1677107718305,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "tih4sl5z919",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677107637164,
  "history_end_time" : 1677107705676,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "ow4b5xwacma",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677107604031,
  "history_end_time" : 1677107608763,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "zs328lqpa1e",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677107556527,
  "history_end_time" : 1677107562721,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "kn98pu6lfpy",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677107524999,
  "history_end_time" : 1677107538162,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "0xep66z133c",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677107501094,
  "history_end_time" : 1677107501094,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "ju97pplpujh",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677107474163,
  "history_end_time" : 1677107474163,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "l4txvy1bft9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677106516109,
  "history_end_time" : 1677106516109,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "l7zdacovjoz",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677106477063,
  "history_end_time" : 1677106477063,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "i66d6hcwg3w",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677106431053,
  "history_end_time" : 1677106431053,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "e31jkw1m0nm",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677106134907,
  "history_end_time" : 1677106147563,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "w5jfnnde827",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677106011040,
  "history_end_time" : 1677106011040,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "ksa8v38wiq3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677030843646,
  "history_end_time" : 1677030843646,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "1rqmu2wr49z",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677030771162,
  "history_end_time" : 1677030771162,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "oczwwtcwhgl",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677030672652,
  "history_end_time" : 1677030672652,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "1ooqflmj638",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677030563476,
  "history_end_time" : 1677030563476,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "30t3zfscwu6",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677025528674,
  "history_end_time" : 1677025528674,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "avont91zogm",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677025467625,
  "history_end_time" : 1705789711441,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "i1gnfvb7xeo",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677017826422,
  "history_end_time" : 1677017826422,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "88gduvp4b7c",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677017218431,
  "history_end_time" : 1677017218431,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "311o1xyrayr",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677016681320,
  "history_end_time" : 1677016681320,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "t465h7e5puu",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677016143004,
  "history_end_time" : 1677016143004,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "wcbgk4al9je",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677016063963,
  "history_end_time" : 1677016063963,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "055c4foxkpe",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677015787650,
  "history_end_time" : 1677015787650,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "s4abzrdo82c",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677015739958,
  "history_end_time" : 1677015739958,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "g9vvmckyfc5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677014884974,
  "history_end_time" : 1705789712277,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "75ebwiou0fg",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677014795642,
  "history_end_time" : 1705789714750,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "iuv9s5jmg2d",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677014228093,
  "history_end_time" : 1705789715533,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "7ow071dxtw5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677013908444,
  "history_end_time" : 1705789716209,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "1il6fxse2vj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677013833056,
  "history_end_time" : 1677013833056,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "w9dezgfyyde",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677011873092,
  "history_end_time" : 1705789717077,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "iksausf3qsq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677008198595,
  "history_end_time" : 1677008198595,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "zy7y8vcmo51",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677008164071,
  "history_end_time" : 1677008164071,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Skipped"
},{
  "history_id" : "fluis3d558b",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677001999596,
  "history_end_time" : 1705789717925,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "uqxqnilgocw",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677001732255,
  "history_end_time" : 1677001732255,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "qg13849915f",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677001593879,
  "history_end_time" : 1677001593879,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "mv64b808bv2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1677000536810,
  "history_end_time" : 1677000536810,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ymaqwnmon61",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1676999722146,
  "history_end_time" : 1676999722146,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "yb51al",
  "indicator" : "Skipped"
},{
  "history_id" : "o2r2rpftkga",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1676999599158,
  "history_end_time" : 1676999599158,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "g10g72pjf1n",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1676862212392,
  "history_end_time" : 1676862212392,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "bu88rtn9lkl",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1676329536264,
  "history_end_time" : 1676329536264,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ev7ttf2opq5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1676329491791,
  "history_end_time" : 1676329491791,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "9z7vfkk2d0w",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1676063613419,
  "history_end_time" : 1676063613419,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "wxjl5sa3yh3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1675783782328,
  "history_end_time" : 1675783782328,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "gepndi9vime",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1672014982960,
  "history_end_time" : 1672014982960,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "9ntmkg7vy4h",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1671944382463,
  "history_end_time" : 1671944382463,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "74ag8lmxbty",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1670910617288,
  "history_end_time" : 1670910617288,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "fjwlnvikthb",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1670910501196,
  "history_end_time" : 1670910501196,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "zqt090j0t47",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1670910268474,
  "history_end_time" : 1670910268474,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "3udul87ddr5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1670019638910,
  "history_end_time" : 1670019638910,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "lda5p1pg8ya",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1667484654184,
  "history_end_time" : 1667484654184,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "y8ypti41j6f",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1667410736833,
  "history_end_time" : 1667410736833,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "508t44jh67q",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1667410652241,
  "history_end_time" : 1667410705878,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "5x4yfodzk90",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1667410544345,
  "history_end_time" : 1667410624028,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "axq9mdvdenx",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  date_time_obj = datetime.datetime.strptime(latest_date, data_format)\n  return date_time_obj.strftime(\"%Y-%m-%d\")\n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "\nprocess hasn't exited",
  "history_begin_time" : 1654519479884,
  "history_end_time" : 1654519480249,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "GjU6fOI3w1XI",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  return latest_date\n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n#findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-03\n/Users/joe\n2022-04-25 06:00:00\n",
  "history_begin_time" : 1651626668215,
  "history_end_time" : 1651626673326,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "irKx20R4PWKo",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  return latest_date\n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\nfindLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\nfindLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\n2022-04-25 06:00:00\n2022-04-27 14:23:23\n2022-04-24\n",
  "history_begin_time" : 1651419339840,
  "history_end_time" : 1651419351543,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "hpSatvBfotyE",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  return latest_date\n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\nfindLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n\nfindLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d %H:%M:%S\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\n2022-04-25 06:00:00\n2022-04-27 14:23:23\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/hpSatvBfotyE/snowcast_utils.py\", line 83, in <module>\n    findLastStopDate(f\"{github_dir}/data/sat_testing/modis/\", \"%Y-%m-%d %H:%M:%S\")\n  File \"/Users/joe/gw-workspace/hpSatvBfotyE/snowcast_utils.py\", line 75, in findLastStopDate\n    latest_date = get_latest_date_from_an_array(date_list, data_format)\n  File \"/Users/joe/gw-workspace/hpSatvBfotyE/snowcast_utils.py\", line 64, in get_latest_date_from_an_array\n    return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  File \"/Users/joe/gw-workspace/hpSatvBfotyE/snowcast_utils.py\", line 64, in <lambda>\n    return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/_strptime.py\", line 568, in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/_strptime.py\", line 349, in _strptime\n    raise ValueError(\"time data %r does not match format %r\" %\nValueError: time data '2022-02-28' does not match format '%Y-%m-%d %H:%M:%S'\n",
  "history_begin_time" : 1651419321119,
  "history_end_time" : 1651419333101,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "1hN6rchScBKY",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  return latest_date\n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\nfindLastStopDate(f\"{github_dir}/data/sat_testing/sentinel1/\", \"%Y-%m-%d %H:%M:%S\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\n2022-04-25 06:00:00\n2022-04-27 14:23:23\n",
  "history_begin_time" : 1651419291108,
  "history_end_time" : 1651419302255,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "JMhzM0uIidvE",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir, data_format):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list, data_format)\n  print(latest_date)\n  return latest_date\n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\n2022-04-25 06:00:00\n",
  "history_begin_time" : 1651418054504,
  "history_end_time" : 1651418064572,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "Wgkx7b8QS0ZZ",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr, date_format):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, date_format))\n  \n  \ndef findLastStopDate(target_testing_dir):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list)\n  print(latest_date)\n  return latest_date\n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/Wgkx7b8QS0ZZ/snowcast_utils.py\", line 80, in <module>\n    findLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\", \"%Y-%m-%d %H:%M:%S\")\nTypeError: findLastStopDate() takes 1 positional argument but 2 were given\n",
  "history_begin_time" : 1651418021348,
  "history_end_time" : 1651418023361,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "qDzlJVntxdOh",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, \"%Y-%m-%d\"))\n  \n  \ndef findLastStopDate(target_testing_dir):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list)\n  print(latest_date)\n  return latest_date\n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/qDzlJVntxdOh/snowcast_utils.py\", line 80, in <module>\n    findLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\")\n  File \"/Users/joe/gw-workspace/qDzlJVntxdOh/snowcast_utils.py\", line 75, in findLastStopDate\n    latest_date = get_latest_date_from_an_array(date_list)\n  File \"/Users/joe/gw-workspace/qDzlJVntxdOh/snowcast_utils.py\", line 64, in get_latest_date_from_an_array\n    return max(arr, key=lambda x: datetime.datetime.strptime(x, \"%Y-%m-%d\"))\n  File \"/Users/joe/gw-workspace/qDzlJVntxdOh/snowcast_utils.py\", line 64, in <lambda>\n    return max(arr, key=lambda x: datetime.datetime.strptime(x, \"%Y-%m-%d\"))\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/_strptime.py\", line 568, in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/_strptime.py\", line 352, in _strptime\n    raise ValueError(\"unconverted data remains: %s\" %\nValueError: unconverted data remains:  06:00:00\n",
  "history_begin_time" : 1651417927931,
  "history_end_time" : 1651417938757,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "O2NEe304o9wf",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, \"%Y-%m-%d\"))\n  \n  \ndef findLastStopDate(target_testing_dir):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list)\n  print(latest_date)\n  return latest_date\n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sim_testing/gridmet/\")\n\n\n\n      \n",
  "history_output" : "Running",
  "history_begin_time" : 1651417367226,
  "history_end_time" : 1651417425098,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "jUUoULdNaOzG",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef get_latest_date_from_an_array(arr):\n  return max(arr, key=lambda x: datetime.datetime.strptime(x, \"%Y-%m-%d\"))\n  \n  \ndef findLastStopDate(target_testing_dir):\n  date_list = []\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        date_list = np.concatenate((date_list, pdf.index.unique()))\n  latest_date = get_latest_date_from_an_array(date_list)\n  print(latest_date)\n  \n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sat_testing/modis\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\n2022-04-24\n",
  "history_begin_time" : 1651417197869,
  "history_end_time" : 1651417202467,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "ln8fEPL0legX",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef findLastStopDate(target_testing_dir):\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        latest_date = max(pdf.index.unique(), key=lambda x: datetime.datetime.strptime(x, \"%Y-%m-%d\"))\n        print(latest_date)\n  \n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sat_testing/modis\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\n2022-03-05\n2022-02-24\n2022-04-15\n2022-03-24\n2022-03-22\n2022-03-17\n2022-04-24\n2022-04-04\n2022-03-08\n2022-04-19\n",
  "history_begin_time" : 1651416713964,
  "history_end_time" : 1651416717862,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "M9ect8nly5uc",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\nimport datetime\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef findLastStopDate(target_testing_dir):\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        print(f)\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        print(pdf.columns)\n        print(pdf.index.unique())\n        latest_date = max(pdf.index.unique(), key=lambda x: datetime.datetime.strptime(x, \"%Y-%m-%d\"))\n        print(latest_date)\n  \n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sat_testing/modis\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-28_2022-03-06.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\nIndex(['2022-02-28', '2022-03-01', '2022-03-02', '2022-03-03', '2022-03-04',\n       '2022-03-05'],\n      dtype='object')\n2022-03-05\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-20_2022-02-27.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\nIndex(['2022-02-20', '2022-02-21', '2022-02-22', '2022-02-24', '2022-02-23'], dtype='object')\n2022-02-24\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-08_2022-04-17.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\nIndex(['2022-04-08', '2022-04-09', '2022-04-10', '2022-04-11', '2022-04-12',\n       '2022-04-13', '2022-04-14', '2022-04-15'],\n      dtype='object')\n2022-04-15\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-30.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\nIndex(['2022-01-01', '2022-01-02', '2022-01-03', '2022-01-04', '2022-01-05',\n       '2022-01-06', '2022-01-07', '2022-01-08', '2022-01-09', '2022-01-10',\n       '2022-01-11', '2022-01-12', '2022-01-13', '2022-01-14', '2022-01-15',\n       '2022-01-16', '2022-01-17', '2022-01-18', '2022-01-19', '2022-01-20',\n       '2022-01-21', '2022-01-22', '2022-01-23', '2022-01-24', '2022-01-25',\n       '2022-01-26', '2022-01-27', '2022-01-28', '2022-01-29', '2022-01-30',\n       '2022-01-31', '2022-02-01', '2022-02-02', '2022-02-03', '2022-02-04',\n       '2022-02-05', '2022-02-06', '2022-02-07', '2022-02-08', '2022-02-09',\n       '2022-02-10', '2022-02-11', '2022-02-12', '2022-02-13', '2022-02-14',\n       '2022-02-15', '2022-02-16', '2022-02-17', '2022-02-18', '2022-02-19',\n       '2022-02-20', '2022-02-21', '2022-02-22', '2022-02-24', '2022-02-25',\n       '2022-02-26', '2022-02-27', '2022-02-28', '2022-03-01', '2022-03-02',\n       '2022-03-03', '2022-03-04', '2022-03-05', '2022-03-06', '2022-03-07',\n       '2022-03-08', '2022-03-09', '2022-03-10', '2022-03-11', '2022-03-12',\n       '2022-03-13', '2022-03-14', '2022-03-15', '2022-03-16', '2022-03-17',\n       '2022-03-18', '2022-03-19', '2022-03-20', '2022-03-21', '2022-03-22',\n       '2022-03-23', '2022-03-24', '2022-02-23'],\n      dtype='object')\n2022-03-24\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-25.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\nIndex(['2022-01-01', '2022-01-02', '2022-01-03', '2022-01-04', '2022-01-05',\n       '2022-01-06', '2022-01-07', '2022-01-08', '2022-01-09', '2022-01-10',\n       '2022-01-11', '2022-01-12', '2022-01-13', '2022-01-14', '2022-01-15',\n       '2022-01-16', '2022-01-17', '2022-01-18', '2022-01-19', '2022-01-20',\n       '2022-01-21', '2022-01-22', '2022-01-23', '2022-01-24', '2022-01-25',\n       '2022-01-26', '2022-01-27', '2022-01-28', '2022-01-29', '2022-01-30',\n       '2022-01-31', '2022-02-01', '2022-02-02', '2022-02-03', '2022-02-04',\n       '2022-02-05', '2022-02-06', '2022-02-07', '2022-02-08', '2022-02-09',\n       '2022-02-10', '2022-02-11', '2022-02-12', '2022-02-13', '2022-02-14',\n       '2022-02-15', '2022-02-16', '2022-02-17', '2022-02-18', '2022-02-19',\n       '2022-02-20', '2022-02-21', '2022-02-22', '2022-02-24', '2022-02-25',\n       '2022-02-26', '2022-02-27', '2022-02-28', '2022-03-01', '2022-03-02',\n       '2022-03-03', '2022-03-04', '2022-03-05', '2022-03-06', '2022-03-07',\n       '2022-03-08', '2022-03-09', '2022-03-10', '2022-03-11', '2022-03-12',\n       '2022-03-13', '2022-03-14', '2022-03-15', '2022-03-16', '2022-03-17',\n       '2022-03-18', '2022-03-19', '2022-03-20', '2022-03-21', '2022-03-22',\n       '2022-02-23'],\n      dtype='object')\n2022-03-22\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-20.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\nIndex(['2022-01-01', '2022-01-02', '2022-01-03', '2022-01-04', '2022-01-05',\n       '2022-01-06', '2022-01-07', '2022-01-08', '2022-01-09', '2022-01-10',\n       '2022-01-11', '2022-01-12', '2022-01-13', '2022-01-14', '2022-01-15',\n       '2022-01-16', '2022-01-17', '2022-01-18', '2022-01-19', '2022-01-20',\n       '2022-01-21', '2022-01-22', '2022-01-23', '2022-01-24', '2022-01-25',\n       '2022-01-26', '2022-01-27', '2022-01-28', '2022-01-29', '2022-01-30',\n       '2022-01-31', '2022-02-01', '2022-02-02', '2022-02-03', '2022-02-04',\n       '2022-02-05', '2022-02-06', '2022-02-07', '2022-02-08', '2022-02-09',\n       '2022-02-10', '2022-02-11', '2022-02-12', '2022-02-13', '2022-02-14',\n       '2022-02-15', '2022-02-16', '2022-02-17', '2022-02-18', '2022-02-19',\n       '2022-02-20', '2022-02-21', '2022-02-22', '2022-02-24', '2022-02-25',\n       '2022-02-26', '2022-02-27', '2022-02-28', '2022-03-01', '2022-03-02',\n       '2022-03-03', '2022-03-04', '2022-03-05', '2022-03-06', '2022-03-07',\n       '2022-03-08', '2022-03-09', '2022-03-10', '2022-03-11', '2022-03-12',\n       '2022-03-13', '2022-03-14', '2022-03-15', '2022-03-16', '2022-03-17',\n       '2022-02-23'],\n      dtype='object')\n2022-03-17\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-20_2022-04-28.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\nIndex(['2022-04-20', '2022-04-21', '2022-04-22', '2022-04-23', '2022-04-24'], dtype='object')\n2022-04-24\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-04-08.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\nIndex(['2022-01-01', '2022-01-02', '2022-01-03', '2022-01-04', '2022-01-05',\n       '2022-01-06', '2022-01-07', '2022-01-08', '2022-01-09', '2022-01-10',\n       '2022-01-11', '2022-01-12', '2022-01-13', '2022-01-14', '2022-01-15',\n       '2022-01-16', '2022-01-17', '2022-01-18', '2022-01-19', '2022-01-20',\n       '2022-01-21', '2022-01-22', '2022-01-23', '2022-01-24', '2022-01-25',\n       '2022-01-26', '2022-01-27', '2022-01-28', '2022-01-29', '2022-01-30',\n       '2022-01-31', '2022-02-01', '2022-02-02', '2022-02-03', '2022-02-04',\n       '2022-02-05', '2022-02-06', '2022-02-07', '2022-02-08', '2022-02-09',\n       '2022-02-10', '2022-02-11', '2022-02-12', '2022-02-13', '2022-02-14',\n       '2022-02-15', '2022-02-16', '2022-02-17', '2022-02-18', '2022-02-19',\n       '2022-02-20', '2022-02-21', '2022-02-22', '2022-02-24', '2022-02-25',\n       '2022-02-26', '2022-02-27', '2022-02-28', '2022-03-01', '2022-03-02',\n       '2022-03-03', '2022-03-04', '2022-03-05', '2022-03-06', '2022-03-07',\n       '2022-03-08', '2022-03-09', '2022-03-10', '2022-03-11', '2022-03-12',\n       '2022-03-13', '2022-03-14', '2022-03-15', '2022-03-16', '2022-03-17',\n       '2022-03-18', '2022-03-19', '2022-03-20', '2022-03-21', '2022-03-22',\n       '2022-03-23', '2022-03-24', '2022-03-25', '2022-03-26', '2022-03-27',\n       '2022-03-28', '2022-03-29', '2022-03-30', '2022-03-31', '2022-04-01',\n       '2022-04-02', '2022-04-03', '2022-04-04', '2022-02-23'],\n      dtype='object')\n2022-04-04\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-03-07_2022-03-13.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\nIndex(['2022-03-07', '2022-03-08'], dtype='object')\n2022-03-08\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-18_2022-04-22.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\nIndex(['2022-04-18', '2022-04-19'], dtype='object')\n2022-04-19\n",
  "history_begin_time" : 1651416694659,
  "history_end_time" : 1651416699537,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "EW2X10IWkuaQ",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef findLastStopDate(target_testing_dir):\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        print(f)\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        print(pdf.columns)\n        print(pdf.index.unique())\n        latest_date = max(pdf.index.unique(), key=lambda x: datetime.datetime.strptime(x, \"%Y-%m-%d\"))\n        print(latest_date)\n  \n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sat_testing/modis\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-28_2022-03-06.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\nIndex(['2022-02-28', '2022-03-01', '2022-03-02', '2022-03-03', '2022-03-04',\n       '2022-03-05'],\n      dtype='object')\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/EW2X10IWkuaQ/snowcast_utils.py\", line 76, in <module>\n    findLastStopDate(f\"{github_dir}/data/sat_testing/modis\")\n  File \"/Users/joe/gw-workspace/EW2X10IWkuaQ/snowcast_utils.py\", line 71, in findLastStopDate\n    latest_date = max(pdf.index.unique(), key=lambda x: datetime.datetime.strptime(x, \"%Y-%m-%d\"))\n  File \"/Users/joe/gw-workspace/EW2X10IWkuaQ/snowcast_utils.py\", line 71, in <lambda>\n    latest_date = max(pdf.index.unique(), key=lambda x: datetime.datetime.strptime(x, \"%Y-%m-%d\"))\nNameError: name 'datetime' is not defined\n",
  "history_begin_time" : 1651416673196,
  "history_end_time" : 1651416675334,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "Ojm5L5juQpRT",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef findLastStopDate(target_testing_dir):\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        print(f)\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        print(pdf.columns)\n        print(pdf.index.unique())\n  \n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sat_testing/modis\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-28_2022-03-06.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\nIndex(['2022-02-28', '2022-03-01', '2022-03-02', '2022-03-03', '2022-03-04',\n       '2022-03-05'],\n      dtype='object')\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-20_2022-02-27.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\nIndex(['2022-02-20', '2022-02-21', '2022-02-22', '2022-02-24', '2022-02-23'], dtype='object')\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-08_2022-04-17.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\nIndex(['2022-04-08', '2022-04-09', '2022-04-10', '2022-04-11', '2022-04-12',\n       '2022-04-13', '2022-04-14', '2022-04-15'],\n      dtype='object')\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-30.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\nIndex(['2022-01-01', '2022-01-02', '2022-01-03', '2022-01-04', '2022-01-05',\n       '2022-01-06', '2022-01-07', '2022-01-08', '2022-01-09', '2022-01-10',\n       '2022-01-11', '2022-01-12', '2022-01-13', '2022-01-14', '2022-01-15',\n       '2022-01-16', '2022-01-17', '2022-01-18', '2022-01-19', '2022-01-20',\n       '2022-01-21', '2022-01-22', '2022-01-23', '2022-01-24', '2022-01-25',\n       '2022-01-26', '2022-01-27', '2022-01-28', '2022-01-29', '2022-01-30',\n       '2022-01-31', '2022-02-01', '2022-02-02', '2022-02-03', '2022-02-04',\n       '2022-02-05', '2022-02-06', '2022-02-07', '2022-02-08', '2022-02-09',\n       '2022-02-10', '2022-02-11', '2022-02-12', '2022-02-13', '2022-02-14',\n       '2022-02-15', '2022-02-16', '2022-02-17', '2022-02-18', '2022-02-19',\n       '2022-02-20', '2022-02-21', '2022-02-22', '2022-02-24', '2022-02-25',\n       '2022-02-26', '2022-02-27', '2022-02-28', '2022-03-01', '2022-03-02',\n       '2022-03-03', '2022-03-04', '2022-03-05', '2022-03-06', '2022-03-07',\n       '2022-03-08', '2022-03-09', '2022-03-10', '2022-03-11', '2022-03-12',\n       '2022-03-13', '2022-03-14', '2022-03-15', '2022-03-16', '2022-03-17',\n       '2022-03-18', '2022-03-19', '2022-03-20', '2022-03-21', '2022-03-22',\n       '2022-03-23', '2022-03-24', '2022-02-23'],\n      dtype='object')\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-25.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\nIndex(['2022-01-01', '2022-01-02', '2022-01-03', '2022-01-04', '2022-01-05',\n       '2022-01-06', '2022-01-07', '2022-01-08', '2022-01-09', '2022-01-10',\n       '2022-01-11', '2022-01-12', '2022-01-13', '2022-01-14', '2022-01-15',\n       '2022-01-16', '2022-01-17', '2022-01-18', '2022-01-19', '2022-01-20',\n       '2022-01-21', '2022-01-22', '2022-01-23', '2022-01-24', '2022-01-25',\n       '2022-01-26', '2022-01-27', '2022-01-28', '2022-01-29', '2022-01-30',\n       '2022-01-31', '2022-02-01', '2022-02-02', '2022-02-03', '2022-02-04',\n       '2022-02-05', '2022-02-06', '2022-02-07', '2022-02-08', '2022-02-09',\n       '2022-02-10', '2022-02-11', '2022-02-12', '2022-02-13', '2022-02-14',\n       '2022-02-15', '2022-02-16', '2022-02-17', '2022-02-18', '2022-02-19',\n       '2022-02-20', '2022-02-21', '2022-02-22', '2022-02-24', '2022-02-25',\n       '2022-02-26', '2022-02-27', '2022-02-28', '2022-03-01', '2022-03-02',\n       '2022-03-03', '2022-03-04', '2022-03-05', '2022-03-06', '2022-03-07',\n       '2022-03-08', '2022-03-09', '2022-03-10', '2022-03-11', '2022-03-12',\n       '2022-03-13', '2022-03-14', '2022-03-15', '2022-03-16', '2022-03-17',\n       '2022-03-18', '2022-03-19', '2022-03-20', '2022-03-21', '2022-03-22',\n       '2022-02-23'],\n      dtype='object')\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-20.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\nIndex(['2022-01-01', '2022-01-02', '2022-01-03', '2022-01-04', '2022-01-05',\n       '2022-01-06', '2022-01-07', '2022-01-08', '2022-01-09', '2022-01-10',\n       '2022-01-11', '2022-01-12', '2022-01-13', '2022-01-14', '2022-01-15',\n       '2022-01-16', '2022-01-17', '2022-01-18', '2022-01-19', '2022-01-20',\n       '2022-01-21', '2022-01-22', '2022-01-23', '2022-01-24', '2022-01-25',\n       '2022-01-26', '2022-01-27', '2022-01-28', '2022-01-29', '2022-01-30',\n       '2022-01-31', '2022-02-01', '2022-02-02', '2022-02-03', '2022-02-04',\n       '2022-02-05', '2022-02-06', '2022-02-07', '2022-02-08', '2022-02-09',\n       '2022-02-10', '2022-02-11', '2022-02-12', '2022-02-13', '2022-02-14',\n       '2022-02-15', '2022-02-16', '2022-02-17', '2022-02-18', '2022-02-19',\n       '2022-02-20', '2022-02-21', '2022-02-22', '2022-02-24', '2022-02-25',\n       '2022-02-26', '2022-02-27', '2022-02-28', '2022-03-01', '2022-03-02',\n       '2022-03-03', '2022-03-04', '2022-03-05', '2022-03-06', '2022-03-07',\n       '2022-03-08', '2022-03-09', '2022-03-10', '2022-03-11', '2022-03-12',\n       '2022-03-13', '2022-03-14', '2022-03-15', '2022-03-16', '2022-03-17',\n       '2022-02-23'],\n      dtype='object')\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-20_2022-04-28.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\nIndex(['2022-04-20', '2022-04-21', '2022-04-22', '2022-04-23', '2022-04-24'], dtype='object')\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-04-08.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\nIndex(['2022-01-01', '2022-01-02', '2022-01-03', '2022-01-04', '2022-01-05',\n       '2022-01-06', '2022-01-07', '2022-01-08', '2022-01-09', '2022-01-10',\n       '2022-01-11', '2022-01-12', '2022-01-13', '2022-01-14', '2022-01-15',\n       '2022-01-16', '2022-01-17', '2022-01-18', '2022-01-19', '2022-01-20',\n       '2022-01-21', '2022-01-22', '2022-01-23', '2022-01-24', '2022-01-25',\n       '2022-01-26', '2022-01-27', '2022-01-28', '2022-01-29', '2022-01-30',\n       '2022-01-31', '2022-02-01', '2022-02-02', '2022-02-03', '2022-02-04',\n       '2022-02-05', '2022-02-06', '2022-02-07', '2022-02-08', '2022-02-09',\n       '2022-02-10', '2022-02-11', '2022-02-12', '2022-02-13', '2022-02-14',\n       '2022-02-15', '2022-02-16', '2022-02-17', '2022-02-18', '2022-02-19',\n       '2022-02-20', '2022-02-21', '2022-02-22', '2022-02-24', '2022-02-25',\n       '2022-02-26', '2022-02-27', '2022-02-28', '2022-03-01', '2022-03-02',\n       '2022-03-03', '2022-03-04', '2022-03-05', '2022-03-06', '2022-03-07',\n       '2022-03-08', '2022-03-09', '2022-03-10', '2022-03-11', '2022-03-12',\n       '2022-03-13', '2022-03-14', '2022-03-15', '2022-03-16', '2022-03-17',\n       '2022-03-18', '2022-03-19', '2022-03-20', '2022-03-21', '2022-03-22',\n       '2022-03-23', '2022-03-24', '2022-03-25', '2022-03-26', '2022-03-27',\n       '2022-03-28', '2022-03-29', '2022-03-30', '2022-03-31', '2022-04-01',\n       '2022-04-02', '2022-04-03', '2022-04-04', '2022-02-23'],\n      dtype='object')\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-03-07_2022-03-13.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\nIndex(['2022-03-07', '2022-03-08'], dtype='object')\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-18_2022-04-22.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\nIndex(['2022-04-18', '2022-04-19'], dtype='object')\n",
  "history_begin_time" : 1651416570185,
  "history_end_time" : 1651416575059,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "EiuXQzQZEt4F",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef findLastStopDate(target_testing_dir):\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        print(f)\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        print(pdf.columns)\n        print(pdf.Index.unique)\n  \n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sat_testing/modis\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-28_2022-03-06.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/EiuXQzQZEt4F/snowcast_utils.py\", line 74, in <module>\n    findLastStopDate(f\"{github_dir}/data/sat_testing/modis\")\n  File \"/Users/joe/gw-workspace/EiuXQzQZEt4F/snowcast_utils.py\", line 70, in findLastStopDate\n    print(pdf.Index.unique)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/generic.py\", line 5487, in __getattr__\n    return object.__getattribute__(self, name)\nAttributeError: 'DataFrame' object has no attribute 'Index'\n",
  "history_begin_time" : 1651416502176,
  "history_end_time" : 1651416504597,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "14HXr93UV6yE",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef findLastStopDate(target_testing_dir):\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        print(f)\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        print(pdf.columns)\n        print(pdf[\"date\"])\n  \n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sat_testing/modis\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-28_2022-03-06.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\n2022-02-28   NaN\n2022-03-01   NaN\n2022-03-02   NaN\n2022-03-03   NaN\n2022-03-04   NaN\n              ..\n2022-03-01   NaN\n2022-03-02   NaN\n2022-03-03   NaN\n2022-03-04   NaN\n2022-03-05   NaN\nName: date, Length: 4200, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-20_2022-02-27.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\n2022-02-20   NaN\n2022-02-21   NaN\n2022-02-22   NaN\n2022-02-24   NaN\n2022-02-20   NaN\n              ..\n2022-02-20   NaN\n2022-02-21   NaN\n2022-02-22   NaN\n2022-02-23   NaN\n2022-02-24   NaN\nName: date, Length: 2808, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-08_2022-04-17.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\n2022-04-08   NaN\n2022-04-09   NaN\n2022-04-10   NaN\n2022-04-11   NaN\n2022-04-12   NaN\n              ..\n2022-04-11   NaN\n2022-04-12   NaN\n2022-04-13   NaN\n2022-04-14   NaN\n2022-04-15   NaN\nName: date, Length: 155671, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-30.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\n2022-01-01   NaN\n2022-01-02   NaN\n2022-01-03   NaN\n2022-01-04   NaN\n2022-01-05   NaN\n              ..\n2022-03-20   NaN\n2022-03-21   NaN\n2022-03-22   NaN\n2022-03-23   NaN\n2022-03-24   NaN\nName: date, Length: 276984, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-25.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\n2022-01-01   NaN\n2022-01-02   NaN\n2022-01-03   NaN\n2022-01-04   NaN\n2022-01-05   NaN\n              ..\n2022-03-18   NaN\n2022-03-19   NaN\n2022-03-20   NaN\n2022-03-21   NaN\n2022-03-22   NaN\nName: date, Length: 725251, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-20.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\n2022-01-01   NaN\n2022-01-02   NaN\n2022-01-03   NaN\n2022-01-04   NaN\n2022-01-05   NaN\n              ..\n2022-03-13   NaN\n2022-03-14   NaN\n2022-03-15   NaN\n2022-03-16   NaN\n2022-03-17   NaN\nName: date, Length: 52499, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-20_2022-04-28.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\n2022-04-20   NaN\n2022-04-21   NaN\n2022-04-22   NaN\n2022-04-23   NaN\n2022-04-24   NaN\n              ..\n2022-04-20   NaN\n2022-04-21   NaN\n2022-04-22   NaN\n2022-04-23   NaN\n2022-04-24   NaN\nName: date, Length: 103783, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-04-08.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\n2022-01-01   NaN\n2022-01-02   NaN\n2022-01-03   NaN\n2022-01-04   NaN\n2022-01-05   NaN\n              ..\n2022-03-31   NaN\n2022-04-01   NaN\n2022-04-02   NaN\n2022-04-03   NaN\n2022-04-04   NaN\nName: date, Length: 1930451, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-03-07_2022-03-13.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\n2022-03-07   NaN\n2022-03-08   NaN\n2022-03-07   NaN\n2022-03-08   NaN\n2022-03-07   NaN\n              ..\n2022-03-08   NaN\n2022-03-07   NaN\n2022-03-08   NaN\n2022-03-07   NaN\n2022-03-08   NaN\nName: date, Length: 1400, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-18_2022-04-22.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\n2022-04-18   NaN\n2022-04-19   NaN\n2022-04-18   NaN\n2022-04-19   NaN\n2022-04-18   NaN\n              ..\n2022-04-19   NaN\n2022-04-18   NaN\n2022-04-19   NaN\n2022-04-18   NaN\n2022-04-19   NaN\nName: date, Length: 41514, dtype: float64\n",
  "history_begin_time" : 1651416362522,
  "history_end_time" : 1651416366278,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "dvziPT5uyLYr",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef findLastStopDate(target_testing_dir):\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        print(f)\n        pdf = pd.read_csv(f,header=0, index_col=0)\n        print(pdf.columns)\n        print(pdf[\"Unnamed: 0\"])\n  \n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sat_testing/modis\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-28_2022-03-06.csv\nIndex(['date', 'mod10a1_ndsi', 'cell_id', 'latitude', 'longitude'], dtype='object')\nTraceback (most recent call last):\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3361, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 76, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 108, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Unnamed: 0'\nThe above exception was the direct cause of the following exception:\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/dvziPT5uyLYr/snowcast_utils.py\", line 74, in <module>\n    findLastStopDate(f\"{github_dir}/data/sat_testing/modis\")\n  File \"/Users/joe/gw-workspace/dvziPT5uyLYr/snowcast_utils.py\", line 70, in findLastStopDate\n    print(pdf[\"Unnamed: 0\"])\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/frame.py\", line 3458, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3363, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Unnamed: 0'\n",
  "history_begin_time" : 1651416353389,
  "history_end_time" : 1651416355114,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "urhfjBG2lRV5",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef findLastStopDate(target_testing_dir):\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        print(f)\n        pdf = pd.read_csv(f, index=0)\n        print(pdf.columns)\n        print(pdf[\"Unnamed: 0\"])\n  \n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sat_testing/modis\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-28_2022-03-06.csv\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/urhfjBG2lRV5/snowcast_utils.py\", line 74, in <module>\n    findLastStopDate(f\"{github_dir}/data/sat_testing/modis\")\n  File \"/Users/joe/gw-workspace/urhfjBG2lRV5/snowcast_utils.py\", line 68, in findLastStopDate\n    pdf = pd.read_csv(f, index=0)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/util/_decorators.py\", line 311, in wrapper\n    return func(*args, **kwargs)\nTypeError: read_csv() got an unexpected keyword argument 'index'\n",
  "history_begin_time" : 1651416274573,
  "history_end_time" : 1651416276346,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "NdP76rvFitxZ",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef findLastStopDate(target_testing_dir):\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        print(f)\n        pdf = pd.read_csv(f)\n        print(pdf.columns)\n        print(pdf[\"Unnamed: 0\"])\n  \n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sat_testing/modis\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-28_2022-03-06.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0       2022-02-28\n1       2022-03-01\n2       2022-03-02\n3       2022-03-03\n4       2022-03-04\n           ...    \n4195    2022-03-01\n4196    2022-03-02\n4197    2022-03-03\n4198    2022-03-04\n4199    2022-03-05\nName: Unnamed: 0, Length: 4200, dtype: object\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-20_2022-02-27.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0       2022-02-20\n1       2022-02-21\n2       2022-02-22\n3       2022-02-24\n4       2022-02-20\n           ...    \n2803    2022-02-20\n2804    2022-02-21\n2805    2022-02-22\n2806    2022-02-23\n2807    2022-02-24\nName: Unnamed: 0, Length: 2808, dtype: object\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-08_2022-04-17.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0         2022-04-08\n1         2022-04-09\n2         2022-04-10\n3         2022-04-11\n4         2022-04-12\n             ...    \n155666    2022-04-11\n155667    2022-04-12\n155668    2022-04-13\n155669    2022-04-14\n155670    2022-04-15\nName: Unnamed: 0, Length: 155671, dtype: object\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-30.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0         2022-01-01\n1         2022-01-02\n2         2022-01-03\n3         2022-01-04\n4         2022-01-05\n             ...    \n276979    2022-03-20\n276980    2022-03-21\n276981    2022-03-22\n276982    2022-03-23\n276983    2022-03-24\nName: Unnamed: 0, Length: 276984, dtype: object\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-25.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0         2022-01-01\n1         2022-01-02\n2         2022-01-03\n3         2022-01-04\n4         2022-01-05\n             ...    \n725246    2022-03-18\n725247    2022-03-19\n725248    2022-03-20\n725249    2022-03-21\n725250    2022-03-22\nName: Unnamed: 0, Length: 725251, dtype: object\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-20.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0        2022-01-01\n1        2022-01-02\n2        2022-01-03\n3        2022-01-04\n4        2022-01-05\n            ...    \n52494    2022-03-13\n52495    2022-03-14\n52496    2022-03-15\n52497    2022-03-16\n52498    2022-03-17\nName: Unnamed: 0, Length: 52499, dtype: object\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-20_2022-04-28.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0         2022-04-20\n1         2022-04-21\n2         2022-04-22\n3         2022-04-23\n4         2022-04-24\n             ...    \n103778    2022-04-20\n103779    2022-04-21\n103780    2022-04-22\n103781    2022-04-23\n103782    2022-04-24\nName: Unnamed: 0, Length: 103783, dtype: object\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-04-08.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0          2022-01-01\n1          2022-01-02\n2          2022-01-03\n3          2022-01-04\n4          2022-01-05\n              ...    \n1930446    2022-03-31\n1930447    2022-04-01\n1930448    2022-04-02\n1930449    2022-04-03\n1930450    2022-04-04\nName: Unnamed: 0, Length: 1930451, dtype: object\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-03-07_2022-03-13.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0       2022-03-07\n1       2022-03-08\n2       2022-03-07\n3       2022-03-08\n4       2022-03-07\n           ...    \n1395    2022-03-08\n1396    2022-03-07\n1397    2022-03-08\n1398    2022-03-07\n1399    2022-03-08\nName: Unnamed: 0, Length: 1400, dtype: object\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-18_2022-04-22.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0        2022-04-18\n1        2022-04-19\n2        2022-04-18\n3        2022-04-19\n4        2022-04-18\n            ...    \n41509    2022-04-19\n41510    2022-04-18\n41511    2022-04-19\n41512    2022-04-18\n41513    2022-04-19\nName: Unnamed: 0, Length: 41514, dtype: object\n",
  "history_begin_time" : 1651416252722,
  "history_end_time" : 1651416256161,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "3Ef9C4ozYWZp",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef findLastStopDate(target_testing_dir):\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        print(f)\n        pdf = pd.read_csv(f)\n        print(pdf.columns)\n        print(pdf.date)\n  \n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sat_testing/modis\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-28_2022-03-06.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0      NaN\n1      NaN\n2      NaN\n3      NaN\n4      NaN\n        ..\n4195   NaN\n4196   NaN\n4197   NaN\n4198   NaN\n4199   NaN\nName: date, Length: 4200, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-20_2022-02-27.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0      NaN\n1      NaN\n2      NaN\n3      NaN\n4      NaN\n        ..\n2803   NaN\n2804   NaN\n2805   NaN\n2806   NaN\n2807   NaN\nName: date, Length: 2808, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-08_2022-04-17.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0        NaN\n1        NaN\n2        NaN\n3        NaN\n4        NaN\n          ..\n155666   NaN\n155667   NaN\n155668   NaN\n155669   NaN\n155670   NaN\nName: date, Length: 155671, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-30.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0        NaN\n1        NaN\n2        NaN\n3        NaN\n4        NaN\n          ..\n276979   NaN\n276980   NaN\n276981   NaN\n276982   NaN\n276983   NaN\nName: date, Length: 276984, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-25.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0        NaN\n1        NaN\n2        NaN\n3        NaN\n4        NaN\n          ..\n725246   NaN\n725247   NaN\n725248   NaN\n725249   NaN\n725250   NaN\nName: date, Length: 725251, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-20.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0       NaN\n1       NaN\n2       NaN\n3       NaN\n4       NaN\n         ..\n52494   NaN\n52495   NaN\n52496   NaN\n52497   NaN\n52498   NaN\nName: date, Length: 52499, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-20_2022-04-28.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0        NaN\n1        NaN\n2        NaN\n3        NaN\n4        NaN\n          ..\n103778   NaN\n103779   NaN\n103780   NaN\n103781   NaN\n103782   NaN\nName: date, Length: 103783, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-04-08.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0         NaN\n1         NaN\n2         NaN\n3         NaN\n4         NaN\n           ..\n1930446   NaN\n1930447   NaN\n1930448   NaN\n1930449   NaN\n1930450   NaN\nName: date, Length: 1930451, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-03-07_2022-03-13.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0      NaN\n1      NaN\n2      NaN\n3      NaN\n4      NaN\n        ..\n1395   NaN\n1396   NaN\n1397   NaN\n1398   NaN\n1399   NaN\nName: date, Length: 1400, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-18_2022-04-22.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0       NaN\n1       NaN\n2       NaN\n3       NaN\n4       NaN\n         ..\n41509   NaN\n41510   NaN\n41511   NaN\n41512   NaN\n41513   NaN\nName: date, Length: 41514, dtype: float64\n",
  "history_begin_time" : 1651416226689,
  "history_end_time" : 1651416230137,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "XKsh7PHbZL79",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef findLastStopDate(target_testing_dir):\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        print(f)\n        pdf = pd.read_csv(f)\n        print(pdf.columns)\n        print(pdf[\"date\"])\n  \n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sat_testing/modis\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-28_2022-03-06.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0      NaN\n1      NaN\n2      NaN\n3      NaN\n4      NaN\n        ..\n4195   NaN\n4196   NaN\n4197   NaN\n4198   NaN\n4199   NaN\nName: date, Length: 4200, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-20_2022-02-27.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0      NaN\n1      NaN\n2      NaN\n3      NaN\n4      NaN\n        ..\n2803   NaN\n2804   NaN\n2805   NaN\n2806   NaN\n2807   NaN\nName: date, Length: 2808, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-08_2022-04-17.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0        NaN\n1        NaN\n2        NaN\n3        NaN\n4        NaN\n          ..\n155666   NaN\n155667   NaN\n155668   NaN\n155669   NaN\n155670   NaN\nName: date, Length: 155671, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-30.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0        NaN\n1        NaN\n2        NaN\n3        NaN\n4        NaN\n          ..\n276979   NaN\n276980   NaN\n276981   NaN\n276982   NaN\n276983   NaN\nName: date, Length: 276984, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-25.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0        NaN\n1        NaN\n2        NaN\n3        NaN\n4        NaN\n          ..\n725246   NaN\n725247   NaN\n725248   NaN\n725249   NaN\n725250   NaN\nName: date, Length: 725251, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-20.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0       NaN\n1       NaN\n2       NaN\n3       NaN\n4       NaN\n         ..\n52494   NaN\n52495   NaN\n52496   NaN\n52497   NaN\n52498   NaN\nName: date, Length: 52499, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-20_2022-04-28.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0        NaN\n1        NaN\n2        NaN\n3        NaN\n4        NaN\n          ..\n103778   NaN\n103779   NaN\n103780   NaN\n103781   NaN\n103782   NaN\nName: date, Length: 103783, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-04-08.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0         NaN\n1         NaN\n2         NaN\n3         NaN\n4         NaN\n           ..\n1930446   NaN\n1930447   NaN\n1930448   NaN\n1930449   NaN\n1930450   NaN\nName: date, Length: 1930451, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-03-07_2022-03-13.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0      NaN\n1      NaN\n2      NaN\n3      NaN\n4      NaN\n        ..\n1395   NaN\n1396   NaN\n1397   NaN\n1398   NaN\n1399   NaN\nName: date, Length: 1400, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-18_2022-04-22.csv\nIndex(['Unnamed: 0', 'date', 'mod10a1_ndsi', 'cell_id', 'latitude',\n       'longitude'],\n      dtype='object')\n0       NaN\n1       NaN\n2       NaN\n3       NaN\n4       NaN\n         ..\n41509   NaN\n41510   NaN\n41511   NaN\n41512   NaN\n41513   NaN\nName: date, Length: 41514, dtype: float64\n",
  "history_begin_time" : 1651416196699,
  "history_end_time" : 1651416200579,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "csRbfuz0ABAw",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef findLastStopDate(target_testing_dir):\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        print(f)\n        pdf = pd.read_csv(f)\n        print(pdf.columns())\n        print(pdf[\"date\"])\n  \n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sat_testing/modis\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-28_2022-03-06.csv\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/csRbfuz0ABAw/snowcast_utils.py\", line 74, in <module>\n    findLastStopDate(f\"{github_dir}/data/sat_testing/modis\")\n  File \"/Users/joe/gw-workspace/csRbfuz0ABAw/snowcast_utils.py\", line 69, in findLastStopDate\n    print(pdf.columns())\nTypeError: 'Index' object is not callable\n",
  "history_begin_time" : 1651416177246,
  "history_end_time" : 1651416178964,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "TFJwfjBKkJJ8",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef findLastStopDate(target_testing_dir):\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        print(f)\n        pdf = pd.read_csv(f)\n        print(pdf.head())\n        print(pdf[\"date\"])\n  \n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sat_testing/modis\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-28_2022-03-06.csv\n   Unnamed: 0  date  ...   latitude   longitude\n0  2022-02-28   NaN  ...  41.993149 -120.178715\n1  2022-03-01   NaN  ...  41.993149 -120.178715\n2  2022-03-02   NaN  ...  41.993149 -120.178715\n3  2022-03-03   NaN  ...  41.993149 -120.178715\n4  2022-03-04   NaN  ...  41.993149 -120.178715\n[5 rows x 6 columns]\n0      NaN\n1      NaN\n2      NaN\n3      NaN\n4      NaN\n        ..\n4195   NaN\n4196   NaN\n4197   NaN\n4198   NaN\n4199   NaN\nName: date, Length: 4200, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-20_2022-02-27.csv\n   Unnamed: 0  date  ...   latitude   longitude\n0  2022-02-20   NaN  ...  41.993149 -120.178715\n1  2022-02-21   NaN  ...  41.993149 -120.178715\n2  2022-02-22   NaN  ...  41.993149 -120.178715\n3  2022-02-24   NaN  ...  41.993149 -120.178715\n4  2022-02-20   NaN  ...  37.727154 -119.136669\n[5 rows x 6 columns]\n0      NaN\n1      NaN\n2      NaN\n3      NaN\n4      NaN\n        ..\n2803   NaN\n2804   NaN\n2805   NaN\n2806   NaN\n2807   NaN\nName: date, Length: 2808, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-08_2022-04-17.csv\n   Unnamed: 0  date  ...  latitude   longitude\n0  2022-04-08   NaN  ...  43.51019 -109.318084\n1  2022-04-09   NaN  ...  43.51019 -109.318084\n2  2022-04-10   NaN  ...  43.51019 -109.318084\n3  2022-04-11   NaN  ...  43.51019 -109.318084\n4  2022-04-12   NaN  ...  43.51019 -109.318084\n[5 rows x 6 columns]\n0        NaN\n1        NaN\n2        NaN\n3        NaN\n4        NaN\n          ..\n155666   NaN\n155667   NaN\n155668   NaN\n155669   NaN\n155670   NaN\nName: date, Length: 155671, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-30.csv\n   Unnamed: 0  date  ...   latitude   longitude\n0  2022-01-01   NaN  ...  37.435274 -119.325316\n1  2022-01-02   NaN  ...  37.435274 -119.325316\n2  2022-01-03   NaN  ...  37.435274 -119.325316\n3  2022-01-04   NaN  ...  37.435274 -119.325316\n4  2022-01-05   NaN  ...  37.435274 -119.325316\n[5 rows x 6 columns]\n0        NaN\n1        NaN\n2        NaN\n3        NaN\n4        NaN\n          ..\n276979   NaN\n276980   NaN\n276981   NaN\n276982   NaN\n276983   NaN\nName: date, Length: 276984, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-25.csv\n   Unnamed: 0  date  ...   latitude   longitude\n0  2022-01-01   NaN  ...  37.027591 -119.406165\n1  2022-01-02   NaN  ...  37.027591 -119.406165\n2  2022-01-03   NaN  ...  37.027591 -119.406165\n3  2022-01-04   NaN  ...  37.027591 -119.406165\n4  2022-01-05   NaN  ...  37.027591 -119.406165\n[5 rows x 6 columns]\n0        NaN\n1        NaN\n2        NaN\n3        NaN\n4        NaN\n          ..\n725246   NaN\n725247   NaN\n725248   NaN\n725249   NaN\n725250   NaN\nName: date, Length: 725251, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-20.csv\n   Unnamed: 0  date  ...   latitude   longitude\n0  2022-01-01   NaN  ...  41.993149 -120.178715\n1  2022-01-02   NaN  ...  41.993149 -120.178715\n2  2022-01-03   NaN  ...  41.993149 -120.178715\n3  2022-01-04   NaN  ...  41.993149 -120.178715\n4  2022-01-05   NaN  ...  41.993149 -120.178715\n[5 rows x 6 columns]\n0       NaN\n1       NaN\n2       NaN\n3       NaN\n4       NaN\n         ..\n52494   NaN\n52495   NaN\n52496   NaN\n52497   NaN\n52498   NaN\nName: date, Length: 52499, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-20_2022-04-28.csv\n   Unnamed: 0  date  ...  latitude   longitude\n0  2022-04-20   NaN  ...  43.51019 -109.318084\n1  2022-04-21   NaN  ...  43.51019 -109.318084\n2  2022-04-22   NaN  ...  43.51019 -109.318084\n3  2022-04-23   NaN  ...  43.51019 -109.318084\n4  2022-04-24   NaN  ...  43.51019 -109.318084\n[5 rows x 6 columns]\n0        NaN\n1        NaN\n2        NaN\n3        NaN\n4        NaN\n          ..\n103778   NaN\n103779   NaN\n103780   NaN\n103781   NaN\n103782   NaN\nName: date, Length: 103783, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-04-08.csv\n   Unnamed: 0  date  ...  latitude   longitude\n0  2022-01-01   NaN  ...  43.51019 -109.318084\n1  2022-01-02   NaN  ...  43.51019 -109.318084\n2  2022-01-03   NaN  ...  43.51019 -109.318084\n3  2022-01-04   NaN  ...  43.51019 -109.318084\n4  2022-01-05   NaN  ...  43.51019 -109.318084\n[5 rows x 6 columns]\n0         NaN\n1         NaN\n2         NaN\n3         NaN\n4         NaN\n           ..\n1930446   NaN\n1930447   NaN\n1930448   NaN\n1930449   NaN\n1930450   NaN\nName: date, Length: 1930451, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-03-07_2022-03-13.csv\n   Unnamed: 0  date  ...   latitude   longitude\n0  2022-03-07   NaN  ...  41.993149 -120.178715\n1  2022-03-08   NaN  ...  41.993149 -120.178715\n2  2022-03-07   NaN  ...  37.727154 -119.136669\n3  2022-03-08   NaN  ...  37.727154 -119.136669\n4  2022-03-07   NaN  ...  38.918144 -120.205665\n[5 rows x 6 columns]\n0      NaN\n1      NaN\n2      NaN\n3      NaN\n4      NaN\n        ..\n1395   NaN\n1396   NaN\n1397   NaN\n1398   NaN\n1399   NaN\nName: date, Length: 1400, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-18_2022-04-22.csv\n   Unnamed: 0  date  ...   latitude   longitude\n0  2022-04-18   NaN  ...  43.510190 -109.318084\n1  2022-04-19   NaN  ...  43.510190 -109.318084\n2  2022-04-18   NaN  ...  40.329588 -105.949401\n3  2022-04-19   NaN  ...  40.329588 -105.949401\n4  2022-04-18   NaN  ...  37.734259 -119.738541\n[5 rows x 6 columns]\n0       NaN\n1       NaN\n2       NaN\n3       NaN\n4       NaN\n         ..\n41509   NaN\n41510   NaN\n41511   NaN\n41512   NaN\n41513   NaN\nName: date, Length: 41514, dtype: float64\n",
  "history_begin_time" : 1651416159688,
  "history_end_time" : 1651416163132,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "7MbxKQStEhIY",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef findLastStopDate(target_testing_dir):\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        print(f)\n        pdf = pd.read_csv(f)\n        print(pdf[\"date\"])\n  \n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sat_testing/modis\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-28_2022-03-06.csv\n0      NaN\n1      NaN\n2      NaN\n3      NaN\n4      NaN\n        ..\n4195   NaN\n4196   NaN\n4197   NaN\n4198   NaN\n4199   NaN\nName: date, Length: 4200, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-20_2022-02-27.csv\n0      NaN\n1      NaN\n2      NaN\n3      NaN\n4      NaN\n        ..\n2803   NaN\n2804   NaN\n2805   NaN\n2806   NaN\n2807   NaN\nName: date, Length: 2808, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-08_2022-04-17.csv\n0        NaN\n1        NaN\n2        NaN\n3        NaN\n4        NaN\n          ..\n155666   NaN\n155667   NaN\n155668   NaN\n155669   NaN\n155670   NaN\nName: date, Length: 155671, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-30.csv\n0        NaN\n1        NaN\n2        NaN\n3        NaN\n4        NaN\n          ..\n276979   NaN\n276980   NaN\n276981   NaN\n276982   NaN\n276983   NaN\nName: date, Length: 276984, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-25.csv\n0        NaN\n1        NaN\n2        NaN\n3        NaN\n4        NaN\n          ..\n725246   NaN\n725247   NaN\n725248   NaN\n725249   NaN\n725250   NaN\nName: date, Length: 725251, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-20.csv\n0       NaN\n1       NaN\n2       NaN\n3       NaN\n4       NaN\n         ..\n52494   NaN\n52495   NaN\n52496   NaN\n52497   NaN\n52498   NaN\nName: date, Length: 52499, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-20_2022-04-28.csv\n0        NaN\n1        NaN\n2        NaN\n3        NaN\n4        NaN\n          ..\n103778   NaN\n103779   NaN\n103780   NaN\n103781   NaN\n103782   NaN\nName: date, Length: 103783, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-04-08.csv\n0         NaN\n1         NaN\n2         NaN\n3         NaN\n4         NaN\n           ..\n1930446   NaN\n1930447   NaN\n1930448   NaN\n1930449   NaN\n1930450   NaN\nName: date, Length: 1930451, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-03-07_2022-03-13.csv\n0      NaN\n1      NaN\n2      NaN\n3      NaN\n4      NaN\n        ..\n1395   NaN\n1396   NaN\n1397   NaN\n1398   NaN\n1399   NaN\nName: date, Length: 1400, dtype: float64\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-18_2022-04-22.csv\n0       NaN\n1       NaN\n2       NaN\n3       NaN\n4       NaN\n         ..\n41509   NaN\n41510   NaN\n41511   NaN\n41512   NaN\n41513   NaN\nName: date, Length: 41514, dtype: float64\n",
  "history_begin_time" : 1651416143939,
  "history_end_time" : 1651416147900,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "DxxnG1dt3Amk",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef findLastStopDate(target_testing_dir):\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        print(f)\n        pdf = pd.read_csv(f)\n        print(pdf[\"date\"].unique())\n  \n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sat_testing/modis\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-28_2022-03-06.csv\n[nan]\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-20_2022-02-27.csv\n[nan]\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-08_2022-04-17.csv\n[nan]\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-30.csv\n[nan]\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-25.csv\n[nan]\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-20.csv\n[nan]\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-20_2022-04-28.csv\n[nan]\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-04-08.csv\n[nan]\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-03-07_2022-03-13.csv\n[nan]\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-18_2022-04-22.csv\n[nan]\n",
  "history_begin_time" : 1651416064245,
  "history_end_time" : 1651416067651,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "tQj12VZ6rPET",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef findLastStopDate(target_testing_dir):\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        print(f)\n        pdf = pd.read_csv(f)\n        print(pdf.head())\n  \n\n#create_cell_location_csv()\nfindLastStopDate(f\"{github_dir}/data/sat_testing/modis\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-28_2022-03-06.csv\n   Unnamed: 0  date  ...   latitude   longitude\n0  2022-02-28   NaN  ...  41.993149 -120.178715\n1  2022-03-01   NaN  ...  41.993149 -120.178715\n2  2022-03-02   NaN  ...  41.993149 -120.178715\n3  2022-03-03   NaN  ...  41.993149 -120.178715\n4  2022-03-04   NaN  ...  41.993149 -120.178715\n[5 rows x 6 columns]\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-20_2022-02-27.csv\n   Unnamed: 0  date  ...   latitude   longitude\n0  2022-02-20   NaN  ...  41.993149 -120.178715\n1  2022-02-21   NaN  ...  41.993149 -120.178715\n2  2022-02-22   NaN  ...  41.993149 -120.178715\n3  2022-02-24   NaN  ...  41.993149 -120.178715\n4  2022-02-20   NaN  ...  37.727154 -119.136669\n[5 rows x 6 columns]\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-08_2022-04-17.csv\n   Unnamed: 0  date  ...  latitude   longitude\n0  2022-04-08   NaN  ...  43.51019 -109.318084\n1  2022-04-09   NaN  ...  43.51019 -109.318084\n2  2022-04-10   NaN  ...  43.51019 -109.318084\n3  2022-04-11   NaN  ...  43.51019 -109.318084\n4  2022-04-12   NaN  ...  43.51019 -109.318084\n[5 rows x 6 columns]\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-30.csv\n   Unnamed: 0  date  ...   latitude   longitude\n0  2022-01-01   NaN  ...  37.435274 -119.325316\n1  2022-01-02   NaN  ...  37.435274 -119.325316\n2  2022-01-03   NaN  ...  37.435274 -119.325316\n3  2022-01-04   NaN  ...  37.435274 -119.325316\n4  2022-01-05   NaN  ...  37.435274 -119.325316\n[5 rows x 6 columns]\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-25.csv\n   Unnamed: 0  date  ...   latitude   longitude\n0  2022-01-01   NaN  ...  37.027591 -119.406165\n1  2022-01-02   NaN  ...  37.027591 -119.406165\n2  2022-01-03   NaN  ...  37.027591 -119.406165\n3  2022-01-04   NaN  ...  37.027591 -119.406165\n4  2022-01-05   NaN  ...  37.027591 -119.406165\n[5 rows x 6 columns]\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-20.csv\n   Unnamed: 0  date  ...   latitude   longitude\n0  2022-01-01   NaN  ...  41.993149 -120.178715\n1  2022-01-02   NaN  ...  41.993149 -120.178715\n2  2022-01-03   NaN  ...  41.993149 -120.178715\n3  2022-01-04   NaN  ...  41.993149 -120.178715\n4  2022-01-05   NaN  ...  41.993149 -120.178715\n[5 rows x 6 columns]\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-20_2022-04-28.csv\n   Unnamed: 0  date  ...  latitude   longitude\n0  2022-04-20   NaN  ...  43.51019 -109.318084\n1  2022-04-21   NaN  ...  43.51019 -109.318084\n2  2022-04-22   NaN  ...  43.51019 -109.318084\n3  2022-04-23   NaN  ...  43.51019 -109.318084\n4  2022-04-24   NaN  ...  43.51019 -109.318084\n[5 rows x 6 columns]\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-04-08.csv\n   Unnamed: 0  date  ...  latitude   longitude\n0  2022-01-01   NaN  ...  43.51019 -109.318084\n1  2022-01-02   NaN  ...  43.51019 -109.318084\n2  2022-01-03   NaN  ...  43.51019 -109.318084\n3  2022-01-04   NaN  ...  43.51019 -109.318084\n4  2022-01-05   NaN  ...  43.51019 -109.318084\n[5 rows x 6 columns]\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-03-07_2022-03-13.csv\n   Unnamed: 0  date  ...   latitude   longitude\n0  2022-03-07   NaN  ...  41.993149 -120.178715\n1  2022-03-08   NaN  ...  41.993149 -120.178715\n2  2022-03-07   NaN  ...  37.727154 -119.136669\n3  2022-03-08   NaN  ...  37.727154 -119.136669\n4  2022-03-07   NaN  ...  38.918144 -120.205665\n[5 rows x 6 columns]\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-18_2022-04-22.csv\n   Unnamed: 0  date  ...   latitude   longitude\n0  2022-04-18   NaN  ...  43.510190 -109.318084\n1  2022-04-19   NaN  ...  43.510190 -109.318084\n2  2022-04-18   NaN  ...  40.329588 -105.949401\n3  2022-04-19   NaN  ...  40.329588 -105.949401\n4  2022-04-18   NaN  ...  37.734259 -119.738541\n[5 rows x 6 columns]\n",
  "history_begin_time" : 1651416020092,
  "history_end_time" : 1651416023952,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "MuCZMR5NcJph",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef findLatestDate(target_testing_dir):\n  for filename in os.listdir(target_testing_dir):\n    f = os.path.join(target_testing_dir, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        print(f)\n  \n\n#create_cell_location_csv()\nfindLatestDate(f\"{github_dir}/data/sat_testing/modis\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-28_2022-03-06.csv\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-02-20_2022-02-27.csv\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-08_2022-04-17.csv\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-30.csv\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-25.csv\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-03-20.csv\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-20_2022-04-28.csv\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-01-01_2022-04-08.csv\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-03-07_2022-03-13.csv\n/Users/joe/Documents/GitHub/SnowCast/data/sat_testing/modis/mod10a1_ndsi_2022-04-18_2022-04-22.csv\n",
  "history_begin_time" : 1651415521105,
  "history_end_time" : 1651415522973,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "uxbEvo2WF7AB",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n  \ndef findLatestDate(target_testing_dir):\n  for filename in os.listdir(directory):\n    f = os.path.join(directory, filename)\n    # checking if it is a file\n    if os.path.isfile(f) and \".csv\" in f:\n        print(f)\n  \n\n#create_cell_location_csv()\nfindLatestDate(f\"{github_dir}/data/sat_testing/modis\")\n\n\n\n      \n",
  "history_output" : "today date = 2022-05-01\n/Users/joe\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/uxbEvo2WF7AB/snowcast_utils.py\", line 71, in <module>\n    findLatestDate(f\"{github_dir}/data/sat_testing/modis\")\n  File \"/Users/joe/gw-workspace/uxbEvo2WF7AB/snowcast_utils.py\", line 63, in findLatestDate\n    for filename in os.listdir(directory):\nNameError: name 'directory' is not defined\n",
  "history_begin_time" : 1651415509322,
  "history_end_time" : 1651415512651,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "zBU7qz4AHcfT",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells_eval.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n    \n\ncreate_cell_location_csv()\n      \n",
  "history_output" : "today date = 2022-04-08\n/Users/joe\nEmpty DataFrame\nColumns: [cell_id, lat, lon]\nIndex: []\n",
  "history_begin_time" : 1649393823982,
  "history_end_time" : 1649393850505,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "6BXc6mLb054T",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file, index=False)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n    \n\ncreate_cell_location_csv()\n      \n",
  "history_output" : "today date = 2022-03-25\n/Users/joe\nEmpty DataFrame\nColumns: [cell_id, lat, lon]\nIndex: []\n",
  "history_begin_time" : 1648182532492,
  "history_end_time" : 1648182555046,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "83tQbqPnMArQ",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  #grid_coords_np = grid_coords_df.to_numpy()\n  #print(grid_coords_np.shape)\n  grid_coords_df.to_csv(all_cell_coords_file)\n  #np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  #print(grid_coords_np.shape)\n    \n\ncreate_cell_location_csv()\n      \n",
  "history_output" : "today date = 2022-03-25\n/Users/joe\nEmpty DataFrame\nColumns: [cell_id, lat, lon]\nIndex: []\n",
  "history_begin_time" : 1648182500877,
  "history_end_time" : 1648182526430,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "yYiqGSLYmzeF",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  grid_coords_np = grid_coords_df.to_numpy()\n  print(grid_coords_np.shape)\n  #grid_coords_df.to_csv(all_cell_coords_file)\n  np.savetxt(all_cell_coords_file, grid_coords_np[:, 1:], delimiter=\",\")\n  print(grid_coords_np.shape)\n    \n\ncreate_cell_location_csv()\n      \n",
  "history_output" : "today date = 2022-03-25\n/Users/joe\nEmpty DataFrame\nColumns: [cell_id, lat, lon]\nIndex: []\n(18130, 3)\n(18130, 3)\n",
  "history_begin_time" : 1648182445766,
  "history_end_time" : 1648182468440,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "CsS7MlOL6D0V",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    \n  \n  print(grid_coords_df.shape)\n  grid_coords_df.to_csv(all_cell_coords_file)\n    \n\ncreate_cell_location_csv()\n      \n",
  "history_output" : "today date = 2022-03-25\n/Users/joe\nEmpty DataFrame\nColumns: [cell_id, lat, lon]\nIndex: []\n(18130, 3)\n",
  "history_begin_time" : 1648182212426,
  "history_end_time" : 1648182235238,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "Ey10AON9drua",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"], index=0)\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    #grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    grid_coords_df.loc[current_cell_id] = [cell_lat, cell_lon]\n  \n  print(grid_coords_df.shape)\n  grid_coords_df.to_csv(all_cell_coords_file)\n    \n\ncreate_cell_location_csv()\n      \n",
  "history_output" : "today date = 2022-03-25\n/Users/joe\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/Ey10AON9drua/snowcast_utils.py\", line 61, in <module>\n    create_cell_location_csv()\n  File \"/Users/joe/gw-workspace/Ey10AON9drua/snowcast_utils.py\", line 46, in create_cell_location_csv\n    grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"], index=0)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/frame.py\", line 614, in __init__\n    mgr = dict_to_mgr(data, index, columns, dtype=dtype, copy=copy, typ=manager)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/internals/construction.py\", line 424, in dict_to_mgr\n    index = ensure_index(index)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 6336, in ensure_index\n    return Index(index_like, copy=copy)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 474, in __new__\n    raise cls._scalar_data_error(data)\nTypeError: Index(...) must be called with a collection of some kind, 0 was passed\n",
  "history_begin_time" : 1648182053774,
  "history_end_time" : 1648182055632,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "p65mipoFC3In",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"], index=\"cell_id\")\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    #grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    grid_coords_df.loc[current_cell_id] = [cell_lat, cell_lon]\n  \n  print(grid_coords_df.shape)\n  grid_coords_df.to_csv(all_cell_coords_file)\n    \n\ncreate_cell_location_csv()\n      \n",
  "history_output" : "today date = 2022-03-25\n/Users/joe\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/p65mipoFC3In/snowcast_utils.py\", line 61, in <module>\n    create_cell_location_csv()\n  File \"/Users/joe/gw-workspace/p65mipoFC3In/snowcast_utils.py\", line 46, in create_cell_location_csv\n    grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"], index=\"cell_id\")\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/frame.py\", line 614, in __init__\n    mgr = dict_to_mgr(data, index, columns, dtype=dtype, copy=copy, typ=manager)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/internals/construction.py\", line 424, in dict_to_mgr\n    index = ensure_index(index)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 6336, in ensure_index\n    return Index(index_like, copy=copy)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 474, in __new__\n    raise cls._scalar_data_error(data)\nTypeError: Index(...) must be called with a collection of some kind, 'cell_id' was passed\n",
  "history_begin_time" : 1648182046047,
  "history_end_time" : 1648182048332,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "AW5I1GxfbE04",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    #grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    grid_coords_df.loc[current_cell_id] = [cell_lat, cell_lon]\n  \n  print(grid_coords_df.shape)\n  grid_coords_df.to_csv(all_cell_coords_file)\n    \n\ncreate_cell_location_csv()\n      \n",
  "history_output" : "today date = 2022-03-25\n/Users/joe\nEmpty DataFrame\nColumns: [cell_id, lat, lon]\nIndex: []\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/AW5I1GxfbE04/snowcast_utils.py\", line 61, in <module>\n    create_cell_location_csv()\n  File \"/Users/joe/gw-workspace/AW5I1GxfbE04/snowcast_utils.py\", line 55, in create_cell_location_csv\n    grid_coords_df.loc[current_cell_id] = [cell_lat, cell_lon]\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/indexing.py\", line 723, in __setitem__\n    iloc._setitem_with_indexer(indexer, value, self.name)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/indexing.py\", line 1724, in _setitem_with_indexer\n    self._setitem_with_indexer_missing(indexer, value)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/indexing.py\", line 2027, in _setitem_with_indexer_missing\n    raise ValueError(\"cannot set a row with mismatched columns\")\nValueError: cannot set a row with mismatched columns\n",
  "history_begin_time" : 1648182029170,
  "history_end_time" : 1648182031756,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "6lVpHMwBexFx",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"], index=0)\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    #grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    grid_coords_df.loc[current_cell_id] = [cell_lat, cell_lon]\n  \n  print(grid_coords_df.shape)\n  grid_coords_df.to_csv(all_cell_coords_file)\n    \n\ncreate_cell_location_csv()\n      \n",
  "history_output" : "today date = 2022-03-25\n/Users/joe\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/6lVpHMwBexFx/snowcast_utils.py\", line 61, in <module>\n    create_cell_location_csv()\n  File \"/Users/joe/gw-workspace/6lVpHMwBexFx/snowcast_utils.py\", line 46, in create_cell_location_csv\n    grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"], index=0)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/frame.py\", line 614, in __init__\n    mgr = dict_to_mgr(data, index, columns, dtype=dtype, copy=copy, typ=manager)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/internals/construction.py\", line 424, in dict_to_mgr\n    index = ensure_index(index)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 6336, in ensure_index\n    return Index(index_like, copy=copy)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 474, in __new__\n    raise cls._scalar_data_error(data)\nTypeError: Index(...) must be called with a collection of some kind, 0 was passed\n",
  "history_begin_time" : 1648182018101,
  "history_end_time" : 1648182020531,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "VJSCmSsbVrH6",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"], index=[\"cell_id\"])\n  print(grid_coords_df.head())\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    #grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    grid_coords_df.loc[current_cell_id] = [cell_lat, cell_lon]\n  \n  print(grid_coords_df.shape)\n  grid_coords_df.to_csv(all_cell_coords_file)\n    \n\ncreate_cell_location_csv()\n      \n",
  "history_output" : "today date = 2022-03-25\n/Users/joe\n        cell_id  lat  lon\ncell_id     NaN  NaN  NaN\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/VJSCmSsbVrH6/snowcast_utils.py\", line 61, in <module>\n    create_cell_location_csv()\n  File \"/Users/joe/gw-workspace/VJSCmSsbVrH6/snowcast_utils.py\", line 55, in create_cell_location_csv\n    grid_coords_df.loc[current_cell_id] = [cell_lat, cell_lon]\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/indexing.py\", line 723, in __setitem__\n    iloc._setitem_with_indexer(indexer, value, self.name)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/indexing.py\", line 1724, in _setitem_with_indexer\n    self._setitem_with_indexer_missing(indexer, value)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/indexing.py\", line 2027, in _setitem_with_indexer_missing\n    raise ValueError(\"cannot set a row with mismatched columns\")\nValueError: cannot set a row with mismatched columns\n",
  "history_begin_time" : 1648181986656,
  "history_end_time" : 1648181989574,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "KRa5iDvytPvZ",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"], index=[\"cell_id\"])\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    #grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    grid_coords_df.loc[current_cell_id] = [cell_lat, cell_lon]\n  \n  print(grid_coords_df.shape)\n  grid_coords_df.to_csv(all_cell_coords_file)\n    \n\ncreate_cell_location_csv()\n      \n",
  "history_output" : "today date = 2022-03-25\n/Users/joe\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/KRa5iDvytPvZ/snowcast_utils.py\", line 60, in <module>\n    create_cell_location_csv()\n  File \"/Users/joe/gw-workspace/KRa5iDvytPvZ/snowcast_utils.py\", line 54, in create_cell_location_csv\n    grid_coords_df.loc[current_cell_id] = [cell_lat, cell_lon]\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/indexing.py\", line 723, in __setitem__\n    iloc._setitem_with_indexer(indexer, value, self.name)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/indexing.py\", line 1724, in _setitem_with_indexer\n    self._setitem_with_indexer_missing(indexer, value)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/indexing.py\", line 2027, in _setitem_with_indexer_missing\n    raise ValueError(\"cannot set a row with mismatched columns\")\nValueError: cannot set a row with mismatched columns\n",
  "history_begin_time" : 1648181919842,
  "history_end_time" : 1648181922600,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "YRloIEzZ5hTP",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    os.remove(all_cell_coords_file)\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"], index=0)\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    #grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n    grid_coords_df.loc[current_cell_id] = [cell_lat, cell_lon]\n  \n  print(grid_coords_df.shape)\n  grid_coords_df.to_csv(all_cell_coords_file)\n    \n\ncreate_cell_location_csv()\n      \n",
  "history_output" : "today date = 2022-03-25\n/Users/joe\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/YRloIEzZ5hTP/snowcast_utils.py\", line 60, in <module>\n    create_cell_location_csv()\n  File \"/Users/joe/gw-workspace/YRloIEzZ5hTP/snowcast_utils.py\", line 46, in create_cell_location_csv\n    grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"], index=0)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/frame.py\", line 614, in __init__\n    mgr = dict_to_mgr(data, index, columns, dtype=dtype, copy=copy, typ=manager)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/internals/construction.py\", line 424, in dict_to_mgr\n    index = ensure_index(index)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 6336, in ensure_index\n    return Index(index_like, copy=copy)\n  File \"/Users/l21-n02609-comm/opt/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 474, in __new__\n    raise cls._scalar_data_error(data)\nTypeError: Index(...) must be called with a collection of some kind, 0 was passed\n",
  "history_begin_time" : 1648181893436,
  "history_end_time" : 1648181895973,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "brjhpuiR7ESK",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    exit()\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n  \n  print(grid_coords_df.shape)\n  grid_coords_df.to_csv(all_cell_coords_file)\n    \n\ncreate_cell_location_csv()\n      \n",
  "history_output" : "today date = 2022-03-25\n/Users/joe\n(18130, 3)\n",
  "history_begin_time" : 1648181666286,
  "history_end_time" : 1648181689157,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "nGIkDypxzacA",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/snowcast_provided/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    exit()\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n  \n  print(grid_coords_df.shape())\n  grid_coords_df.to_csv(all_cell_coords_file)\n    \n\ncreate_cell_location_csv()\n      \n",
  "history_output" : "today date = 2022-03-25\n/Users/joe\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/nGIkDypxzacA/snowcast_utils.py\", line 59, in <module>\n    create_cell_location_csv()\n  File \"/Users/joe/gw-workspace/nGIkDypxzacA/snowcast_utils.py\", line 55, in create_cell_location_csv\n    print(grid_coords_df.shape())\nTypeError: 'tuple' object is not callable\n",
  "history_begin_time" : 1648181466700,
  "history_end_time" : 1648181488966,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "awzS76BDLd7U",
  "history_input" : "from datetime import date\nimport json\nimport pandas as pd\nimport ee\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport geojson\nimport numpy as np\nimport os.path\nimport math\n\ntoday = date.today()\n\n# dd/mm/YY\nd1 = today.strftime(\"%Y-%m-%d\")\nprint(\"today date =\", d1)\n\ntrain_start_date = \"\"\ntrain_end_date = \"\"\n\ntest_start_date = \"2022-01-01\"\ntest_end_date = d1\n\n# read the grid geometry file\nhomedir = os.path.expanduser('~')\nprint(homedir)\ngithub_dir = f\"{homedir}/Documents/GitHub/SnowCast\"\n\n\ndef calculateDistance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return math.sqrt((lat1-lat2)**2 + (lon1-lon2)**2)\n\ndef create_cell_location_csv():\n  # read grid cell\n  gridcells_file = f\"{github_dir}/data/snowcast_provided/grid_cells.geojson\"\n  all_cell_coords_file = f\"{github_dir}/data/all_cell_coords_file.csv\"\n  if os.path.exists(all_cell_coords_file):\n    exit()\n\n  grid_coords_df = pd.DataFrame(columns=[\"cell_id\", \"lat\", \"lon\"])\n  gridcells = geojson.load(open(gridcells_file))\n  for idx,cell in enumerate(gridcells['features']):\n    \n    current_cell_id = cell['properties']['cell_id']\n    cell_lon = np.unique(np.ravel(cell['geometry']['coordinates'])[0::2]).mean()\n    cell_lat = np.unique(np.ravel(cell['geometry']['coordinates'])[1::2]).mean()\n    grid_coords_df.loc[len(grid_coords_df.index)] = [current_cell_id, cell_lat, cell_lon]\n  \n  print(grid_coords_df.shape())\n  grid_coords_df.to_csv(all_cell_coords_file)\n    \n\ncreate_cell_location_csv\n      \n",
  "history_output" : "today date = 2022-03-25\n/Users/joe\n",
  "history_begin_time" : 1648181426137,
  "history_end_time" : 1648181428661,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "yjj48zl17ob",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677809171457,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "ebwrpczotbu",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1678201703973,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "vw05wp3oe8u",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1694185611219,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "mwo41if51k5",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677785529430,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "nqn37mghfuv",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677797113225,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "le7zixeloy6",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677785383330,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "i8z0dqljw4r",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677796528249,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "k4gzuzzb0ui",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677809306584,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "h3a3mz0c5xj",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677809554686,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "lrkj18d1e7c",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677809573431,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "s7hex83a3yq",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677809840749,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "5yjmfmmv63c",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677958291201,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "ql412351wlt",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677958754123,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "enk38hoiwr3",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677958849885,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "77ayv27cc3g",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677958952863,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "kf4x0wa9ako",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677959583139,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "3qt5ed9bt31",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1677959722636,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "0yugqwjue76",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1678201687057,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "1onb4yxwstk",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1678206143111,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},{
  "history_id" : "j3as7fgcei5",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1678884042279,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "45wlwr",
  "indicator" : "Stopped"
},]
