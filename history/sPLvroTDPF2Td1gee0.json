[{
  "history_id" : "qx2j6bc6b8j",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097257,
  "history_end_time" : 1737328097257,
  "history_notes" : null,
  "history_process" : "78vedq",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "p64qfv0p8ns",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097258,
  "history_end_time" : 1737328097258,
  "history_notes" : null,
  "history_process" : "mxpyqt",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "nxiaahakmv0",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097259,
  "history_end_time" : 1737328097259,
  "history_notes" : null,
  "history_process" : "rauqsh",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "4ln7jljf6i7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097261,
  "history_end_time" : 1737328097261,
  "history_notes" : null,
  "history_process" : "u7xh2p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "hzvp6emzz4k",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097262,
  "history_end_time" : 1737328097262,
  "history_notes" : null,
  "history_process" : "e8k4wq",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "qv93w2ujq8q",
  "history_input" : "import joblib\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler\nimport numpy as np\nfrom snowcast_utils import homedir, work_dir, model_dir, plot_dir, output_dir, month_to_season, test_start_date, test_end_date, process_dates_in_range\nimport os\nimport random\nimport string\nimport shutil\nfrom model_creation_et import selected_columns\nfrom datetime import datetime, timedelta\n# from interpret_model_results import explain_predictions\n\nimport shap\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport traceback\n\nCOLUMN_NAME_MAPPER = {'Latitude': 'lat', \n                         'Longitude': 'lon',\n                         'vpd': 'mean_vapor_pressure_deficit',\n                         'vs': 'wind_speed', \n                         'pr': 'precipitation_amount', \n                         'etr': 'potential_evapotranspiration',\n                         'tmmn': 'air_temperature_tmmn',\n                         'tmmx': 'air_temperature_tmmx',\n                         'rmin': 'relative_humidity_rmin',\n                         'rmax': 'relative_humidity_rmax',\n#                          'Elevation': 'elevation',\n#                          'Slope': 'Slope',\n#                          'Aspect': 'Aspect',\n#                          'Curvature': 'Curvature',\n#                          'Northness': 'Northness',\n#                          'Eastness': 'Eastness',\n                         'cumulative_AMSR_SWE': 'cumulative_SWE',\n                         'cumulative_AMSR_Flag': 'cumulative_Flag',\n                         'cumulative_tmmn':'cumulative_air_temperature_tmmn',\n                         'cumulative_etr': 'cumulative_potential_evapotranspiration',\n                         'cumulative_vpd': 'cumulative_mean_vapor_pressure_deficit',\n                         'cumulative_rmax': 'cumulative_relative_humidity_rmax', \n                         'cumulative_rmin': 'cumulative_relative_humidity_rmin',\n                         'cumulative_pr': 'cumulative_precipitation_amount',\n                         'cumulative_tmmx': 'cumulative_air_temperature_tmmx',\n                         'cumulative_vs': 'cumulative_wind_speed',\n                         'AMSR_SWE': 'SWE',\n                         'AMSR_Flag': 'Flag',\n#                          'relative_humidity_rmin': '',\n#                          'cumulative_rmin',\n#                          'mean_vapor_pressure_deficit', \n#                          'cumulative_vpd', \n#                          'wind_speed',\n#                          'cumulative_vs', \n#                          'relative_humidity_rmax', 'cumulative_rmax',\n\n# 'precipitation_amount', 'cumulative_pr', 'air_temperature_tmmx',\n\n# 'cumulative_tmmx', 'potential_evapotranspiration', 'cumulative_etr',\n\n# 'air_temperature_tmmn', 'cumulative_tmmn', 'x', 'y', 'elevation',\n\n# 'slope', 'aspect', 'curvature', 'northness', 'eastness', 'AMSR_SWE',\n\n# 'cumulative_AMSR_SWE', 'AMSR_Flag', 'cumulative_AMSR_Flag',\n}\n\nCOLUMN_LOOK_BACK = [\n    'mean_vapor_pressure_deficit',\n    'wind_speed', \n    'precipitation_amount', \n    'potential_evapotranspiration',\n    'air_temperature_tmmn',\n    'air_temperature_tmmx',\n    'relative_humidity_rmin',\n    'relative_humidity_rmax',\n    'SWE',\n    'fsca',\n]\n\nCOLUMN_UNCHANGED = [\n    'Aspect', \n    'Elevation', \n    'Curvature', \n    'Northness', \n    'Flag', \n    'x', \n    'Eastness', \n    'water_year', \n    'Slope', \n    'lc_prop3', \n    'y'\n]\n\ndef generate_random_string(length):\n    # Define the characters that can be used in the random string\n    characters = string.ascii_letters + string.digits  # You can customize this to include other characters if needed\n\n    # Generate a random string of the specified length\n    random_string = ''.join(random.choice(characters) for _ in range(length))\n\n    return random_string\n  \n\ndef load_model(model_path):\n    \"\"\"\n    Load a machine learning model from a file.\n\n    Args:\n        model_path (str): Path to the saved model file.\n\n    Returns:\n        model: The loaded machine learning model.\n    \"\"\"\n    return joblib.load(model_path)\n\ndef load_data(file_path):\n    \"\"\"\n    Load data from a CSV file.\n\n    Args:\n        file_path (str): Path to the CSV file containing the data.\n\n    Returns:\n        pd.DataFrame: A pandas DataFrame containing the loaded data.\n    \"\"\"\n    return pd.read_csv(file_path)\n\n\n# 'SWE', 'relative_humidity_rmin', 'potential_evapotranspiration',\n#     'air_temperature_tmmx', 'relative_humidity_rmax',\n#     'mean_vapor_pressure_deficit', 'air_temperature_tmmn', 'wind_speed',\n#     'Elevation', 'Aspect', 'Curvature', 'Northness', 'Eastness', 'fsca',\n#     'Slope', 'SWE_1', 'air_temperature_tmmn_1',\n#     'potential_evapotranspiration_1', 'mean_vapor_pressure_deficit_1',\n#     'relative_humidity_rmax_1', 'relative_humidity_rmin_1',\n#     'air_temperature_tmmx_1', 'wind_speed_1', 'fsca_1', 'SWE_2',\n#     'air_temperature_tmmn_2', 'potential_evapotranspiration_2',\n#     'mean_vapor_pressure_deficit_2', 'relative_humidity_rmax_2',\n#     'relative_humidity_rmin_2', 'air_temperature_tmmx_2', 'wind_speed_2',\n#     'fsca_2', 'SWE_3', 'air_temperature_tmmn_3',\n#     'potential_evapotranspiration_3', 'mean_vapor_pressure_deficit_3',\n#     'relative_humidity_rmax_3', 'relative_humidity_rmin_3',\n#     'air_temperature_tmmx_3', 'wind_speed_3', 'fsca_3', 'SWE_4',\n#     'air_temperature_tmmn_4', 'potential_evapotranspiration_4',\n#     'mean_vapor_pressure_deficit_4', 'relative_humidity_rmax_4',\n#     'relative_humidity_rmin_4', 'air_temperature_tmmx_4', 'wind_speed_4',\n#     'fsca_4', 'SWE_5', 'air_temperature_tmmn_5',\n#     'potential_evapotranspiration_5', 'mean_vapor_pressure_deficit_5',\n#     'relative_humidity_rmax_5', 'relative_humidity_rmin_5',\n#     'air_temperature_tmmx_5', 'wind_speed_5', 'fsca_5', 'SWE_6',\n#     'air_temperature_tmmn_6', 'potential_evapotranspiration_6',\n#     'mean_vapor_pressure_deficit_6', 'relative_humidity_rmax_6',\n#     'relative_humidity_rmin_6', 'air_temperature_tmmx_6', 'wind_speed_6',\n#     'fsca_6', 'SWE_7', 'air_temperature_tmmn_7',\n#     'potential_evapotranspiration_7', 'mean_vapor_pressure_deficit_7',\n#     'relative_humidity_rmax_7', 'relative_humidity_rmin_7',\n#     'air_temperature_tmmx_7', 'wind_speed_7', 'fsca_7', 'water_year'\n\ndef preprocess_data_with_history():\n    pass\n\ndef preprocess_chunk(chunk, day_offset):\n    \"\"\"\n    Load, clean, and rename columns for a specific day.\n\n    Args:\n        file_path (str): Path to the CSV file.\n        day_offset (int): Day offset (0 for current day, 1 for one day ago, etc.).\n\n    Returns:\n        pd.DataFrame: Processed DataFrame for the specific day.\n    \"\"\"\n    if \"date.1\" in chunk.columns:\n        chunk = chunk.drop([\"date.1\"], axis=1)\n    chunk.replace('--', pd.NA, inplace=True)\n    chunk.rename(columns=COLUMN_NAME_MAPPER, inplace=True)\n    chunk['date'] = pd.to_datetime(chunk['date'])\n\n    # print(\"Before drop: \", chunk.columns)\n    if day_offset != 0:\n        chunk.drop(COLUMN_UNCHANGED+[\"date\"], axis=1, inplace=True)\n        for col in COLUMN_LOOK_BACK:\n            chunk.rename(\n                columns={col: f\"{col}_{day_offset}\"}, inplace=True\n            )\n\n    # print(\"After drop: \", chunk.columns)\n    return chunk\n\ndef preprocess_data(target_date, is_model_input: bool = True):\n    \"\"\"\n    Preprocess the input data for model prediction.\n\n    Args:\n        target_date (str): Target date in the format 'YYYY-MM-DD'.\n        is_model_input (bool): Flag to specify if the data is for model input.\n\n    Returns:\n        pd.DataFrame: Preprocessed data ready for prediction.\n    \"\"\"\n    \n    # Initialize a list to store all data including past 7 days\n    all_data = []\n\n    # Process the current day\n    # current_day_path = f'{work_dir}/testing_all_ready_{target_date}.csv'\n    # current_day_data = process_day_data(current_day_path, 0)\n    # all_data.append(current_day_data)\n\n    # Process the past 7 days\n    target_date_dt = pd.to_datetime(target_date)\n    for i in range(0, 7):\n        past_date = (target_date_dt - pd.Timedelta(days=i)).strftime('%Y-%m-%d')\n        past_data_path = f'{work_dir}/testing_all_ready_{past_date}.csv'\n        past_day_data = process_day_data(past_data_path, i)\n        all_data.append(past_day_data)\n\n    # Merge all data on 'date', 'lat', and 'lon'\n    merged_data = all_data[0]\n    for additional_data in all_data[1:]:\n        merged_data = merged_data.merge(additional_data, on=['date', 'lat', 'lon'], how='outer')\n\n    if is_model_input:\n        if \"swe_value\" in selected_columns:\n            selected_columns.remove(\"swe_value\")\n        desired_order = selected_columns + ['lat', 'lon']\n\n        merged_data = merged_data[desired_order]\n        merged_data = merged_data.reindex(columns=desired_order)\n\n        # print(\"Reorganized columns: \", merged_data.columns)\n\n    # print(merged_data.head())\n\n    return merged_data\n\ndef predict_swe(model, data):\n    \"\"\"\n    Predict Snow Water Equivalent (SWE) values using a pre-trained model.\n\n    This function takes in a machine learning model and a DataFrame containing \n    meteorological and geospatial data, preprocesses the data by handling missing \n    values and dropping unnecessary columns, and applies the model to predict SWE values. \n    The predicted SWE values are then added to the original DataFrame as a new column \n    called 'predicted_swe'.\n\n    Args:\n        model (object): A pre-trained machine learning model with a `predict` method.\n        data (pd.DataFrame): A pandas DataFrame containing input data for prediction.\n            It is expected to have columns including 'lat', 'lon', and other relevant \n            features for the model.\n\n    Returns:\n        pd.DataFrame: The original DataFrame with an additional column 'predicted_swe' \n        containing the predicted SWE values.\n    \"\"\"\n    data = data.fillna(-1)\n    input_data = data\n    input_data = data.drop([\"lat\", \"lon\"], axis=1)\n\n    print(\"Assign -1 to fsca column..\")\n    # original_input_data = input_data.copy()\n    # input_data.loc[input_data['fsca'] > 100, 'fsca'] = -1 \n    for column in input_data.columns:\n        if 'fsca' in column.lower() or 'swe' in column.lower():  # Adjust to case-insensitive match\n            input_data.loc[input_data[column] > 100, column] = -1\n\n    #input_data = data.drop(['date', 'SWE', 'Flag', 'mean_vapor_pressure_deficit', 'potential_evapotranspiration', 'air_temperature_tmmx', 'relative_humidity_rmax', 'relative_humidity_rmin',], axis=1)\n    #scaler = StandardScaler()\n\n    # Fit the scaler on the training data and transform both training and testing data\n    #input_data_scaled = scaler.fit_transform(input_data)\n    print(\"Start to predict\", input_data.shape)\n    predictions = model.predict(input_data)\n    input_data['predicted_swe'] = predictions\n    input_data['lat'] = data['lat']\n    input_data['lon'] = data['lon']\n\n    # print(\"Explain the prediction: \")\n    # explain_predictions(model, input_data, input_data.columns, f\"{output_dir}/explain_ai.csv\", f\"{plot_dir}\")\n    return input_data\n\ndef merge_data(original_data, predicted_data):\n    \"\"\"\n    Merge predicted SWE data with the original data.\n\n    Args:\n        original_data (pd.DataFrame): Original input data.\n        predicted_data (pd.DataFrame): Dataframe with predicted SWE values.\n\n    Returns:\n        pd.DataFrame: Merged dataframe.\n    \"\"\"\n    #new_data_extracted = predicted_data[[\"date\", \"lat\", \"lon\", \"predicted_swe\"]]\n    if \"date\" not in predicted_data:\n    \tpredicted_data[\"date\"] = test_start_date\n    # new_data_extracted = predicted_data[[\"date\", \"lat\", \"lon\", \"predicted_swe\"]]\n    # print(\"original_data.columns: \", original_data.columns)\n    # print(\"predicted_data.columns: \", predicted_data.columns)\n    # print(\"new prediction statistics: \", predicted_data[\"predicted_swe\"].describe())\n    #merged_df = original_data.merge(new_data_extracted, on=[\"date\", 'lat', 'lon'], how='left')\n    merged_df = original_data.merge(predicted_data, on=['lat', 'lon'], how='left')\n    # print(\"first merged df: \", merged_df.columns)\n\n    merged_df.loc[merged_df['fsca'] == -1, 'predicted_swe'] = 0\n    # merged_df.loc[merged_df['fsca'] == 239, 'predicted_swe'] = 0\n    # merged_df.loc[merged_df['fsca'] == 225, 'predicted_swe'] = 0\n    #merged_df.loc[merged_df['cumulative_fsca'] == 0, 'predicted_swe'] = 0\n    merged_df.loc[merged_df['fsca'] == 0, 'predicted_swe'] = 0\n\n    # if predicted value is minus, assign 0\n    merged_df.loc[merged_df['predicted_swe'] < 0, 'predicted_swe'] = 0\n    \n    merged_df.loc[merged_df['air_temperature_tmmx'].isnull(), \n                  'predicted_swe'] = 0\n\n    merged_df.loc[merged_df['lc_prop3'] == 3, 'predicted_swe'] = 0\n    merged_df.loc[merged_df['lc_prop3'] == 255, 'predicted_swe'] = 0\n    merged_df.loc[merged_df['lc_prop3'] == 27, 'predicted_swe'] = 0\n\n    return merged_df\n\n\ndef predict_in_batches(\n    target_date: str, \n    output_path: str = None, \n    batch_size: int = 100000\n):\n    \"\"\"\n    Predict snow water equivalent (SWE) in batches by processing 7 days' data chunk by chunk.\n\n    Args:\n        target_date (str): Target date in the format 'YYYY-MM-DD'.\n        output_path (str): Path to save the prediction results.\n        batch_size (int): Size of each chunk to process.\n\n    Returns:\n        None\n    \"\"\"\n    # height = 666\n    # width = 694\n    model_path = f'{model_dir}/wormhole_ETHole_latest.joblib'\n    print(f\"Using model: {model_path}\")\n\n    if output_path is None:\n        output_path = f'{output_dir}/test_data_predicted_latest_{target_date}.csv'\n\n    if os.path.exists(output_path):\n        os.remove(output_path)\n        print(f\"File '{output_path}' has been removed.\")\n\n    # Load the model\n    model = load_model(model_path)\n\n    # Initialize file readers for each of the 7 days\n    target_date_dt = pd.to_datetime(target_date)\n    day_file_iters = []\n\n    for day_offset in range(8):\n        day_date = (target_date_dt - pd.Timedelta(days=day_offset)).strftime('%Y-%m-%d')\n        day_file_path = f'{work_dir}/testing_all_ready_{day_date}.csv'\n\n        try:\n            print(\"Loading batches from \", day_file_path)\n            day_file_iters.append(pd.read_csv(day_file_path, chunksize=batch_size))\n        except FileNotFoundError:\n            print(f\"File not found: {day_file_path}. Skipping this day.\")\n            day_file_iters.append(None)\n\n    # Process chunks\n    chunk_idx = 0\n    while True:\n        chunk_list = []\n        for day_idx, file_iter in enumerate(day_file_iters):\n            if file_iter is None:\n                continue\n            try:\n                chunk = next(file_iter)\n                print(f\"Read chunk {chunk_idx + 1} from day {day_idx + 1}\")\n                preprocessed_chunk = preprocess_chunk(chunk, day_offset=day_idx)\n                chunk_list.append(preprocessed_chunk)\n            except StopIteration:\n                print(f\"No more chunks for day {day_idx + 1}\")\n                continue\n\n        # If no more chunks for all days, break\n        if not chunk_list:\n            print(\"All chunks are processed\")\n            break\n\n        # Merge all chunks on 'date', 'lat', and 'lon'\n        merged_input = chunk_list[0]\n        for additional_chunk in chunk_list[1:]:\n            merged_input = merged_input.merge(additional_chunk, on=['lat', 'lon'], how='outer')\n\n        if len(merged_input) != len(chunk_list[0]):\n            raise ValueError(\n                f\"Row number mismatch: merged_input has {len(merged_input)} rows, \"\n                f\"but chunk_list[0] has {len(chunk_list[0])} rows. Ensure data alignment.\"\n            )\n\n        print(\"merged_input.columns = \", merged_input.columns)\n\n        # Reorganize columns for model input\n        if \"swe_value\" in selected_columns:\n            selected_columns.remove(\"swe_value\")\n        desired_order = selected_columns + ['lat', 'lon']\n        used_input = merged_input[desired_order].reindex(columns=desired_order)\n        unused_input = merged_input[[\"lc_prop3\", \"lat\", \"lon\", \"date\"]]\n\n        # Predict on the merged input\n        predictions = predict_swe(model, used_input)\n        print(f\"Predicted {len(predictions)} rows for chunk {chunk_idx + 1}\")\n\n        # Merge predictions with input\n        predictions_merged = merge_data(unused_input, predictions)\n\n        # Save predictions to output file incrementally\n        if chunk_idx == 0:\n            predictions_merged.to_csv(output_path, index=False, mode='w')\n        else:\n            predictions_merged.to_csv(output_path, index=False, mode='a', header=False)\n\n        chunk_idx += 1\n\n    print(f\"Prediction completed. Results saved to {output_path}\")\n\ndef predict_for_date(current_date, force: bool = False):\n    \"\"\"\n    Example callback function to predict SWE for a specific date.\n\n    Args:\n        current_date (datetime): The date to process.\n        force (bool): Whether to force processing even if conditions aren't met.\n    \"\"\"\n    current_date_str = current_date.strftime(\"%Y-%m-%d\")\n    print(f\">>>>>\\nPredicting SWE for day {current_date_str}\")\n    # Replace this with actual prediction logic\n    predict_in_batches(target_date=current_date_str,)\n\nif __name__ == \"__main__\":\n\tprocess_dates_in_range(\n        start_date=test_start_date,\n        end_date=test_end_date,\n        # start_date=\"2025-01-14\",\n        # end_date=\"2025-01-14\",\n        callback=predict_for_date,\n        force = True\n    )\n",
  "history_output" : "/home/chetana\ntoday date = 2025-01-19\nStart day: 2025-01-12, End day: 2025-01-16\ntest start date:  2025-01-12\ntest end date:  2025-01-16\nProcessing date: 2025-01-12\n>>>>>\nPredicting SWE for day 2025-01-12\nUsing model: /home/chetana/models//wormhole_ETHole_latest.joblib\nFile '/home/chetana/data/output/test_data_predicted_latest_2025-01-12.csv' has been removed.\nLoading batches from  /home/chetana/data/gridmet_test_run/testing_all_ready_2025-01-12.csv\nLoading batches from  /home/chetana/data/gridmet_test_run/testing_all_ready_2025-01-11.csv\nLoading batches from  /home/chetana/data/gridmet_test_run/testing_all_ready_2025-01-10.csv\nLoading batches from  /home/chetana/data/gridmet_test_run/testing_all_ready_2025-01-09.csv\nLoading batches from  /home/chetana/data/gridmet_test_run/testing_all_ready_2025-01-08.csv\nLoading batches from  /home/chetana/data/gridmet_test_run/testing_all_ready_2025-01-07.csv\nLoading batches from  /home/chetana/data/gridmet_test_run/testing_all_ready_2025-01-06.csv\nLoading batches from  /home/chetana/data/gridmet_test_run/testing_all_ready_2025-01-05.csv\nRead chunk 1 from day 1\nRead chunk 1 from day 2\nRead chunk 1 from day 3\nRead chunk 1 from day 4\nRead chunk 1 from day 5\nRead chunk 1 from day 6\nRead chunk 1 from day 7\nRead chunk 1 from day 8\nmerged_input.columns =  Index(['lat', 'lon', 'wind_speed', 'air_temperature_tmmn',\n       'potential_evapotranspiration', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'mean_vapor_pressure_deficit',\n       'air_temperature_tmmx', 'precipitation_amount', 'x', 'y', 'Elevation',\n       'Slope', 'Aspect', 'Curvature', 'Northness', 'Eastness', 'SWE', 'Flag',\n       'date', 'fsca', 'lc_prop3', 'water_year', 'relative_humidity_rmax_1',\n       'precipitation_amount_1', 'relative_humidity_rmin_1',\n       'mean_vapor_pressure_deficit_1', 'potential_evapotranspiration_1',\n       'wind_speed_1', 'air_temperature_tmmn_1', 'air_temperature_tmmx_1',\n       'SWE_1', 'fsca_1', 'air_temperature_tmmx_2', 'relative_humidity_rmax_2',\n       'precipitation_amount_2', 'wind_speed_2',\n       'mean_vapor_pressure_deficit_2', 'relative_humidity_rmin_2',\n       'air_temperature_tmmn_2', 'potential_evapotranspiration_2', 'SWE_2',\n       'fsca_2', 'air_temperature_tmmx_3', 'relative_humidity_rmin_3',\n       'mean_vapor_pressure_deficit_3', 'air_temperature_tmmn_3',\n       'wind_speed_3', 'potential_evapotranspiration_3',\n       'relative_humidity_rmax_3', 'precipitation_amount_3', 'SWE_3', 'fsca_3',\n       'air_temperature_tmmx_4', 'relative_humidity_rmin_4',\n       'air_temperature_tmmn_4', 'mean_vapor_pressure_deficit_4',\n       'wind_speed_4', 'precipitation_amount_4',\n       'potential_evapotranspiration_4', 'relative_humidity_rmax_4', 'SWE_4',\n       'fsca_4', 'wind_speed_5', 'precipitation_amount_5',\n       'air_temperature_tmmx_5', 'air_temperature_tmmn_5',\n       'potential_evapotranspiration_5', 'relative_humidity_rmax_5',\n       'relative_humidity_rmin_5', 'mean_vapor_pressure_deficit_5', 'SWE_5',\n       'fsca_5', 'precipitation_amount_6', 'relative_humidity_rmax_6',\n       'wind_speed_6', 'air_temperature_tmmn_6', 'relative_humidity_rmin_6',\n       'air_temperature_tmmx_6', 'mean_vapor_pressure_deficit_6',\n       'potential_evapotranspiration_6', 'SWE_6', 'fsca_6',\n       'precipitation_amount_7', 'relative_humidity_rmax_7',\n       'potential_evapotranspiration_7', 'wind_speed_7',\n       'relative_humidity_rmin_7', 'air_temperature_tmmx_7',\n       'air_temperature_tmmn_7', 'mean_vapor_pressure_deficit_7', 'SWE_7',\n       'fsca_7'],\n      dtype='object')\nAssign -1 to fsca column..\nStart to predict (100000, 79)\nPredicted 100000 rows for chunk 1\nRead chunk 2 from day 1\nRead chunk 2 from day 2\nRead chunk 2 from day 3\nRead chunk 2 from day 4\nRead chunk 2 from day 5\nRead chunk 2 from day 6\nRead chunk 2 from day 7\nRead chunk 2 from day 8\nmerged_input.columns =  Index(['lat', 'lon', 'wind_speed', 'air_temperature_tmmn',\n       'potential_evapotranspiration', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'mean_vapor_pressure_deficit',\n       'air_temperature_tmmx', 'precipitation_amount', 'x', 'y', 'Elevation',\n       'Slope', 'Aspect', 'Curvature', 'Northness', 'Eastness', 'SWE', 'Flag',\n       'date', 'fsca', 'lc_prop3', 'water_year', 'relative_humidity_rmax_1',\n       'precipitation_amount_1', 'relative_humidity_rmin_1',\n       'mean_vapor_pressure_deficit_1', 'potential_evapotranspiration_1',\n       'wind_speed_1', 'air_temperature_tmmn_1', 'air_temperature_tmmx_1',\n       'SWE_1', 'fsca_1', 'air_temperature_tmmx_2', 'relative_humidity_rmax_2',\n       'precipitation_amount_2', 'wind_speed_2',\n       'mean_vapor_pressure_deficit_2', 'relative_humidity_rmin_2',\n       'air_temperature_tmmn_2', 'potential_evapotranspiration_2', 'SWE_2',\n       'fsca_2', 'air_temperature_tmmx_3', 'relative_humidity_rmin_3',\n       'mean_vapor_pressure_deficit_3', 'air_temperature_tmmn_3',\n       'wind_speed_3', 'potential_evapotranspiration_3',\n       'relative_humidity_rmax_3', 'precipitation_amount_3', 'SWE_3', 'fsca_3',\n       'air_temperature_tmmx_4', 'relative_humidity_rmin_4',\n       'air_temperature_tmmn_4', 'mean_vapor_pressure_deficit_4',\n       'wind_speed_4', 'precipitation_amount_4',\n       'potential_evapotranspiration_4', 'relative_humidity_rmax_4', 'SWE_4',\n       'fsca_4', 'wind_speed_5', 'precipitation_amount_5',\n       'air_temperature_tmmx_5', 'air_temperature_tmmn_5',\n       'potential_evapotranspiration_5', 'relative_humidity_rmax_5',\n       'relative_humidity_rmin_5', 'mean_vapor_pressure_deficit_5', 'SWE_5',\n       'fsca_5', 'precipitation_amount_6', 'relative_humidity_rmax_6',\n       'wind_speed_6', 'air_temperature_tmmn_6', 'relative_humidity_rmin_6',\n       'air_temperature_tmmx_6', 'mean_vapor_pressure_deficit_6',\n       'potential_evapotranspiration_6', 'SWE_6', 'fsca_6',\n       'precipitation_amount_7', 'relative_humidity_rmax_7',\n       'potential_evapotranspiration_7', 'wind_speed_7',\n       'relative_humidity_rmin_7', 'air_temperature_tmmx_7',\n       'air_temperature_tmmn_7', 'mean_vapor_pressure_deficit_7', 'SWE_7',\n       'fsca_7'],\n      dtype='object')\nAssign -1 to fsca column..\nStart to predict (100000, 79)\nPredicted 100000 rows for chunk 2\nRead chunk 3 from day 1\nRead chunk 3 from day 2\nRead chunk 3 from day 3\nRead chunk 3 from day 4\nRead chunk 3 from day 5\nRead chunk 3 from day 6\nRead chunk 3 from day 7\nRead chunk 3 from day 8\nmerged_input.columns =  Index(['lat', 'lon', 'wind_speed', 'air_temperature_tmmn',\n       'potential_evapotranspiration', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'mean_vapor_pressure_deficit',\n       'air_temperature_tmmx', 'precipitation_amount', 'x', 'y', 'Elevation',\n       'Slope', 'Aspect', 'Curvature', 'Northness', 'Eastness', 'SWE', 'Flag',\n       'date', 'fsca', 'lc_prop3', 'water_year', 'relative_humidity_rmax_1',\n       'precipitation_amount_1', 'relative_humidity_rmin_1',\n       'mean_vapor_pressure_deficit_1', 'potential_evapotranspiration_1',\n       'wind_speed_1', 'air_temperature_tmmn_1', 'air_temperature_tmmx_1',\n       'SWE_1', 'fsca_1', 'air_temperature_tmmx_2', 'relative_humidity_rmax_2',\n       'precipitation_amount_2', 'wind_speed_2',\n       'mean_vapor_pressure_deficit_2', 'relative_humidity_rmin_2',\n       'air_temperature_tmmn_2', 'potential_evapotranspiration_2', 'SWE_2',\n       'fsca_2', 'air_temperature_tmmx_3', 'relative_humidity_rmin_3',\n       'mean_vapor_pressure_deficit_3', 'air_temperature_tmmn_3',\n       'wind_speed_3', 'potential_evapotranspiration_3',\n       'relative_humidity_rmax_3', 'precipitation_amount_3', 'SWE_3', 'fsca_3',\n       'air_temperature_tmmx_4', 'relative_humidity_rmin_4',\n       'air_temperature_tmmn_4', 'mean_vapor_pressure_deficit_4',\n       'wind_speed_4', 'precipitation_amount_4',\n       'potential_evapotranspiration_4', 'relative_humidity_rmax_4', 'SWE_4',\n       'fsca_4', 'wind_speed_5', 'precipitation_amount_5',\n       'air_temperature_tmmx_5', 'air_temperature_tmmn_5',\n       'potential_evapotranspiration_5', 'relative_humidity_rmax_5',\n       'relative_humidity_rmin_5', 'mean_vapor_pressure_deficit_5', 'SWE_5',\n       'fsca_5', 'precipitation_amount_6', 'relative_humidity_rmax_6',\n       'wind_speed_6', 'air_temperature_tmmn_6', 'relative_humidity_rmin_6',\n       'air_temperature_tmmx_6', 'mean_vapor_pressure_deficit_6',\n       'potential_evapotranspiration_6', 'SWE_6', 'fsca_6',\n       'precipitation_amount_7', 'relative_humidity_rmax_7',\n       'potential_evapotranspiration_7', 'wind_speed_7',\n       'relative_humidity_rmin_7', 'air_temperature_tmmx_7',\n       'air_temperature_tmmn_7', 'mean_vapor_pressure_deficit_7', 'SWE_7',\n       'fsca_7'],\n      dtype='object')\nAssign -1 to fsca column..\nStart to predict (100000, 79)\nPredicted 100000 rows for chunk 3\nRead chunk 4 from day 1\nRead chunk 4 from day 2\nRead chunk 4 from day 3\nRead chunk 4 from day 4\nRead chunk 4 from day 5\nRead chunk 4 from day 6\nRead chunk 4 from day 7\nRead chunk 4 from day 8\nmerged_input.columns =  Index(['lat', 'lon', 'wind_speed', 'air_temperature_tmmn',\n       'potential_evapotranspiration', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'mean_vapor_pressure_deficit',\n       'air_temperature_tmmx', 'precipitation_amount', 'x', 'y', 'Elevation',\n       'Slope', 'Aspect', 'Curvature', 'Northness', 'Eastness', 'SWE', 'Flag',\n       'date', 'fsca', 'lc_prop3', 'water_year', 'relative_humidity_rmax_1',\n       'precipitation_amount_1', 'relative_humidity_rmin_1',\n       'mean_vapor_pressure_deficit_1', 'potential_evapotranspiration_1',\n       'wind_speed_1', 'air_temperature_tmmn_1', 'air_temperature_tmmx_1',\n       'SWE_1', 'fsca_1', 'air_temperature_tmmx_2', 'relative_humidity_rmax_2',\n       'precipitation_amount_2', 'wind_speed_2',\n       'mean_vapor_pressure_deficit_2', 'relative_humidity_rmin_2',\n       'air_temperature_tmmn_2', 'potential_evapotranspiration_2', 'SWE_2',\n       'fsca_2', 'air_temperature_tmmx_3', 'relative_humidity_rmin_3',\n       'mean_vapor_pressure_deficit_3', 'air_temperature_tmmn_3',\n       'wind_speed_3', 'potential_evapotranspiration_3',\n       'relative_humidity_rmax_3', 'precipitation_amount_3', 'SWE_3', 'fsca_3',\n       'air_temperature_tmmx_4', 'relative_humidity_rmin_4',\n       'air_temperature_tmmn_4', 'mean_vapor_pressure_deficit_4',\n       'wind_speed_4', 'precipitation_amount_4',\n       'potential_evapotranspiration_4', 'relative_humidity_rmax_4', 'SWE_4',\n       'fsca_4', 'wind_speed_5', 'precipitation_amount_5',\n       'air_temperature_tmmx_5', 'air_temperature_tmmn_5',\n       'potential_evapotranspiration_5', 'relative_humidity_rmax_5',\n       'relative_humidity_rmin_5', 'mean_vapor_pressure_deficit_5', 'SWE_5',\n       'fsca_5', 'precipitation_amount_6', 'relative_humidity_rmax_6',\n       'wind_speed_6', 'air_temperature_tmmn_6', 'relative_humidity_rmin_6',\n       'air_temperature_tmmx_6', 'mean_vapor_pressure_deficit_6',\n       'potential_evapotranspiration_6', 'SWE_6', 'fsca_6',\n       'precipitation_amount_7', 'relative_humidity_rmax_7',\n       'potential_evapotranspiration_7', 'wind_speed_7',\n       'relative_humidity_rmin_7', 'air_temperature_tmmx_7',\n       'air_temperature_tmmn_7', 'mean_vapor_pressure_deficit_7', 'SWE_7',\n       'fsca_7'],\n      dtype='object')\nAssign -1 to fsca column..\nStart to predict (100000, 79)\nPredicted 100000 rows for chunk 4\nRead chunk 5 from day 1\nRead chunk 5 from day 2\nRead chunk 5 from day 3\nRead chunk 5 from day 4\nRead chunk 5 from day 5\nRead chunk 5 from day 6\nRead chunk 5 from day 7\nRead chunk 5 from day 8\nmerged_input.columns =  Index(['lat', 'lon', 'wind_speed', 'air_temperature_tmmn',\n       'potential_evapotranspiration', 'relative_humidity_rmax',\n       'relative_humidity_rmin', 'mean_vapor_pressure_deficit',\n       'air_temperature_tmmx', 'precipitation_amount', 'x', 'y', 'Elevation',\n       'Slope', 'Aspect', 'Curvature', 'Northness', 'Eastness', 'SWE', 'Flag',\n       'date', 'fsca', 'lc_prop3', 'water_year', 'relative_humidity_rmax_1',\n       'precipitation_amount_1', 'relative_humidity_rmin_1',\n       'mean_vapor_pressure_deficit_1', 'potential_evapotranspiration_1',\n       'wind_speed_1', 'air_temperature_tmmn_1', 'air_temperature_tmmx_1',\n       'SWE_1', 'fsca_1', 'air_temperature_tmmx_2', 'relative_humidity_rmax_2',\n       'precipitation_amount_2', 'wind_speed_2',\n       'mean_vapor_pressure_deficit_2', 'relative_humidity_rmin_2',\n       'air_temperature_tmmn_2', 'potential_evapotranspiration_2', 'SWE_2',\n       'fsca_2', 'air_temperature_tmmx_3', 'relative_humidity_rmin_3',\n       'mean_vapor_pressure_deficit_3', 'air_temperature_tmmn_3',\n       'wind_speed_3', 'potential_evapotranspiration_3',\n       'relative_humidity_rmax_3', 'precipitation_amount_3', 'SWE_3', 'fsca_3',\n       'air_temperature_tmmx_4', 'relative_humidity_rmin_4',\n       'air_temperature_tmmn_4', 'mean_vapor_pressure_deficit_4',\n       'wind_speed_4', 'precipitation_amount_4',\n       'potential_evapotranspiration_4', 'relative_humidity_rmax_4', 'SWE_4',\n       'fsca_4', 'wind_speed_5', 'precipitation_amount_5',\n       'air_temperature_tmmx_5', 'air_temperature_tmmn_5',\n       'potential_evapotranspiration_5', 'relative_humidity_rmax_5',\n       'relative_humidity_rmin_5', 'mean_vapor_pressure_deficit_5', 'SWE_5',\n       'fsca_5', 'precipitation_amount_6', 'relative_humidity_rmax_6',\n       'wind_speed_6', 'air_temperature_tmmn_6', 'relative_humidity_rmin_6',\n       'air_temperature_tmmx_6', 'mean_vapor_pressure_deficit_6',\n       'potential_evapotranspiration_6', 'SWE_6', 'fsca_6',\n       'precipitation_amount_7', 'relative_humidity_rmax_7',\n       'potential_evapotranspiration_7', 'wind_speed_7',\n       'relative_humidity_rmin_7', 'air_temperature_tmmx_7',\n       'air_temperature_tmmn_7', 'mean_vapor_pressure_deficit_7', 'SWE_7',\n       'fsca_7'],\n      dtype='object')\nAssign -1 to fsca column..\nStart to predict (62204, 79)\nPredicted 62204 rows for chunk 5\nNo more chunks for day 1\nNo more chunks for day 2\nNo more chunks for day 3\nNo more chunks for day 4\nNo more chunks for day 5\nNo more chunks for day 6\nNo more chunks for day 7\nNo more chunks for day 8\nAll chunks are processed\nPrediction completed. Results saved to /home/chetana/data/output/test_data_predicted_latest_2025-01-12.csv\nProcessing date: 2025-01-13\n>>>>>\nPredicting SWE for day 2025-01-13\nUsing model: /home/chetana/models//wormhole_ETHole_latest.joblib\nFile '/home/chetana/data/output/test_data_predicted_latest_2025-01-13.csv' has been removed.\nLoading batches from  /home/chetana/data/gridmet_test_run/testing_all_ready_2025-01-13.csv\nLoading batches from  /home/chetana/data/gridmet_test_run/testing_all_ready_2025-01-12.csv\nLoading batches from  /home/chetana/data/gridmet_test_run/testing_all_ready_2025-01-11.csv\nLoading batches from  /home/chetana/data/gridmet_test_run/testing_all_ready_2025-01-10.csv\nLoading batches from  /home/chetana/data/gridmet_test_run/testing_all_ready_2025-01-09.csv\nLoading batches from  /home/chetana/data/gridmet_test_run/testing_all_ready_2025-01-08.csv\nLoading batches from  /home/chetana/data/gridmet_test_run/testing_all_ready_2025-01-07.csv\nLoading batches from  /home/chetana/data/gridmet_test_run/testing_all_ready_2025-01-06.csv\nRead chunk 1 from day 1\nRead chunk 1 from day 2\nRead chunk 1 from day 3\nRead chunk 1 from day 4\nRead chunk 1 from day 5\nRead chunk 1 from day 6\nRead chunk 1 from day 7\nRead chunk 1 from day 8\nmerged_input.columns =  Index(['lat', 'lon', 'relative_humidity_rmax', 'relative_humidity_rmin',\n       'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n       'precipitation_amount', 'wind_speed', 'air_temperature_tmmx',\n       'air_temperature_tmmn', 'x', 'y', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'SWE', 'Flag', 'date', 'fsca',\n       'lc_prop3', 'water_year', 'wind_speed_1', 'air_temperature_tmmn_1',\n       'potential_evapotranspiration_1', 'relative_humidity_rmax_1',\n       'relative_humidity_rmin_1', 'mean_vapor_pressure_deficit_1',\n       'air_temperature_tmmx_1', 'precipitation_amount_1', 'SWE_1', 'fsca_1',\n       'relative_humidity_rmax_2', 'precipitation_amount_2',\n       'relative_humidity_rmin_2', 'mean_vapor_pressure_deficit_2',\n       'potential_evapotranspiration_2', 'wind_speed_2',\n       'air_temperature_tmmn_2', 'air_temperature_tmmx_2', 'SWE_2', 'fsca_2',\n       'air_temperature_tmmx_3', 'relative_humidity_rmax_3',\n       'precipitation_amount_3', 'wind_speed_3',\n       'mean_vapor_pressure_deficit_3', 'relative_humidity_rmin_3',\n       'air_temperature_tmmn_3', 'potential_evapotranspiration_3', 'SWE_3',\n       'fsca_3', 'air_temperature_tmmx_4', 'relative_humidity_rmin_4',\n       'mean_vapor_pressure_deficit_4', 'air_temperature_tmmn_4',\n       'wind_speed_4', 'potential_evapotranspiration_4',\n       'relative_humidity_rmax_4', 'precipitation_amount_4', 'SWE_4', 'fsca_4',\n       'air_temperature_tmmx_5', 'relative_humidity_rmin_5',\n       'air_temperature_tmmn_5', 'mean_vapor_pressure_deficit_5',\n       'wind_speed_5', 'precipitation_amount_5',\n       'potential_evapotranspiration_5', 'relative_humidity_rmax_5', 'SWE_5',\n       'fsca_5', 'wind_speed_6', 'precipitation_amount_6',\n       'air_temperature_tmmx_6', 'air_temperature_tmmn_6',\n       'potential_evapotranspiration_6', 'relative_humidity_rmax_6',\n       'relative_humidity_rmin_6', 'mean_vapor_pressure_deficit_6', 'SWE_6',\n       'fsca_6', 'precipitation_amount_7', 'relative_humidity_rmax_7',\n       'wind_speed_7', 'air_temperature_tmmn_7', 'relative_humidity_rmin_7',\n       'air_temperature_tmmx_7', 'mean_vapor_pressure_deficit_7',\n       'potential_evapotranspiration_7', 'SWE_7', 'fsca_7'],\n      dtype='object')\nAssign -1 to fsca column..\nStart to predict (100000, 79)\nPredicted 100000 rows for chunk 1\nRead chunk 2 from day 1\nRead chunk 2 from day 2\nRead chunk 2 from day 3\nRead chunk 2 from day 4\nRead chunk 2 from day 5\nRead chunk 2 from day 6\nRead chunk 2 from day 7\nRead chunk 2 from day 8\nmerged_input.columns =  Index(['lat', 'lon', 'relative_humidity_rmax', 'relative_humidity_rmin',\n       'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n       'precipitation_amount', 'wind_speed', 'air_temperature_tmmx',\n       'air_temperature_tmmn', 'x', 'y', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'SWE', 'Flag', 'date', 'fsca',\n       'lc_prop3', 'water_year', 'wind_speed_1', 'air_temperature_tmmn_1',\n       'potential_evapotranspiration_1', 'relative_humidity_rmax_1',\n       'relative_humidity_rmin_1', 'mean_vapor_pressure_deficit_1',\n       'air_temperature_tmmx_1', 'precipitation_amount_1', 'SWE_1', 'fsca_1',\n       'relative_humidity_rmax_2', 'precipitation_amount_2',\n       'relative_humidity_rmin_2', 'mean_vapor_pressure_deficit_2',\n       'potential_evapotranspiration_2', 'wind_speed_2',\n       'air_temperature_tmmn_2', 'air_temperature_tmmx_2', 'SWE_2', 'fsca_2',\n       'air_temperature_tmmx_3', 'relative_humidity_rmax_3',\n       'precipitation_amount_3', 'wind_speed_3',\n       'mean_vapor_pressure_deficit_3', 'relative_humidity_rmin_3',\n       'air_temperature_tmmn_3', 'potential_evapotranspiration_3', 'SWE_3',\n       'fsca_3', 'air_temperature_tmmx_4', 'relative_humidity_rmin_4',\n       'mean_vapor_pressure_deficit_4', 'air_temperature_tmmn_4',\n       'wind_speed_4', 'potential_evapotranspiration_4',\n       'relative_humidity_rmax_4', 'precipitation_amount_4', 'SWE_4', 'fsca_4',\n       'air_temperature_tmmx_5', 'relative_humidity_rmin_5',\n       'air_temperature_tmmn_5', 'mean_vapor_pressure_deficit_5',\n       'wind_speed_5', 'precipitation_amount_5',\n       'potential_evapotranspiration_5', 'relative_humidity_rmax_5', 'SWE_5',\n       'fsca_5', 'wind_speed_6', 'precipitation_amount_6',\n       'air_temperature_tmmx_6', 'air_temperature_tmmn_6',\n       'potential_evapotranspiration_6', 'relative_humidity_rmax_6',\n       'relative_humidity_rmin_6', 'mean_vapor_pressure_deficit_6', 'SWE_6',\n       'fsca_6', 'precipitation_amount_7', 'relative_humidity_rmax_7',\n       'wind_speed_7', 'air_temperature_tmmn_7', 'relative_humidity_rmin_7',\n       'air_temperature_tmmx_7', 'mean_vapor_pressure_deficit_7',\n       'potential_evapotranspiration_7', 'SWE_7', 'fsca_7'],\n      dtype='object')\nAssign -1 to fsca column..\nStart to predict (100000, 79)\nPredicted 100000 rows for chunk 2\nRead chunk 3 from day 1\nRead chunk 3 from day 2\nRead chunk 3 from day 3\nRead chunk 3 from day 4\nRead chunk 3 from day 5\nRead chunk 3 from day 6\nRead chunk 3 from day 7\nRead chunk 3 from day 8\nmerged_input.columns =  Index(['lat', 'lon', 'relative_humidity_rmax', 'relative_humidity_rmin',\n       'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n       'precipitation_amount', 'wind_speed', 'air_temperature_tmmx',\n       'air_temperature_tmmn', 'x', 'y', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'SWE', 'Flag', 'date', 'fsca',\n       'lc_prop3', 'water_year', 'wind_speed_1', 'air_temperature_tmmn_1',\n       'potential_evapotranspiration_1', 'relative_humidity_rmax_1',\n       'relative_humidity_rmin_1', 'mean_vapor_pressure_deficit_1',\n       'air_temperature_tmmx_1', 'precipitation_amount_1', 'SWE_1', 'fsca_1',\n       'relative_humidity_rmax_2', 'precipitation_amount_2',\n       'relative_humidity_rmin_2', 'mean_vapor_pressure_deficit_2',\n       'potential_evapotranspiration_2', 'wind_speed_2',\n       'air_temperature_tmmn_2', 'air_temperature_tmmx_2', 'SWE_2', 'fsca_2',\n       'air_temperature_tmmx_3', 'relative_humidity_rmax_3',\n       'precipitation_amount_3', 'wind_speed_3',\n       'mean_vapor_pressure_deficit_3', 'relative_humidity_rmin_3',\n       'air_temperature_tmmn_3', 'potential_evapotranspiration_3', 'SWE_3',\n       'fsca_3', 'air_temperature_tmmx_4', 'relative_humidity_rmin_4',\n       'mean_vapor_pressure_deficit_4', 'air_temperature_tmmn_4',\n       'wind_speed_4', 'potential_evapotranspiration_4',\n       'relative_humidity_rmax_4', 'precipitation_amount_4', 'SWE_4', 'fsca_4',\n       'air_temperature_tmmx_5', 'relative_humidity_rmin_5',\n       'air_temperature_tmmn_5', 'mean_vapor_pressure_deficit_5',\n       'wind_speed_5', 'precipitation_amount_5',\n       'potential_evapotranspiration_5', 'relative_humidity_rmax_5', 'SWE_5',\n       'fsca_5', 'wind_speed_6', 'precipitation_amount_6',\n       'air_temperature_tmmx_6', 'air_temperature_tmmn_6',\n       'potential_evapotranspiration_6', 'relative_humidity_rmax_6',\n       'relative_humidity_rmin_6', 'mean_vapor_pressure_deficit_6', 'SWE_6',\n       'fsca_6', 'precipitation_amount_7', 'relative_humidity_rmax_7',\n       'wind_speed_7', 'air_temperature_tmmn_7', 'relative_humidity_rmin_7',\n       'air_temperature_tmmx_7', 'mean_vapor_pressure_deficit_7',\n       'potential_evapotranspiration_7', 'SWE_7', 'fsca_7'],\n      dtype='object')\nAssign -1 to fsca column..\nStart to predict (100000, 79)\nPredicted 100000 rows for chunk 3\nRead chunk 4 from day 1\nRead chunk 4 from day 2\nRead chunk 4 from day 3\nRead chunk 4 from day 4\nRead chunk 4 from day 5\nRead chunk 4 from day 6\nRead chunk 4 from day 7\nRead chunk 4 from day 8\nmerged_input.columns =  Index(['lat', 'lon', 'relative_humidity_rmax', 'relative_humidity_rmin',\n       'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n       'precipitation_amount', 'wind_speed', 'air_temperature_tmmx',\n       'air_temperature_tmmn', 'x', 'y', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'SWE', 'Flag', 'date', 'fsca',\n       'lc_prop3', 'water_year', 'wind_speed_1', 'air_temperature_tmmn_1',\n       'potential_evapotranspiration_1', 'relative_humidity_rmax_1',\n       'relative_humidity_rmin_1', 'mean_vapor_pressure_deficit_1',\n       'air_temperature_tmmx_1', 'precipitation_amount_1', 'SWE_1', 'fsca_1',\n       'relative_humidity_rmax_2', 'precipitation_amount_2',\n       'relative_humidity_rmin_2', 'mean_vapor_pressure_deficit_2',\n       'potential_evapotranspiration_2', 'wind_speed_2',\n       'air_temperature_tmmn_2', 'air_temperature_tmmx_2', 'SWE_2', 'fsca_2',\n       'air_temperature_tmmx_3', 'relative_humidity_rmax_3',\n       'precipitation_amount_3', 'wind_speed_3',\n       'mean_vapor_pressure_deficit_3', 'relative_humidity_rmin_3',\n       'air_temperature_tmmn_3', 'potential_evapotranspiration_3', 'SWE_3',\n       'fsca_3', 'air_temperature_tmmx_4', 'relative_humidity_rmin_4',\n       'mean_vapor_pressure_deficit_4', 'air_temperature_tmmn_4',\n       'wind_speed_4', 'potential_evapotranspiration_4',\n       'relative_humidity_rmax_4', 'precipitation_amount_4', 'SWE_4', 'fsca_4',\n       'air_temperature_tmmx_5', 'relative_humidity_rmin_5',\n       'air_temperature_tmmn_5', 'mean_vapor_pressure_deficit_5',\n       'wind_speed_5', 'precipitation_amount_5',\n       'potential_evapotranspiration_5', 'relative_humidity_rmax_5', 'SWE_5',\n       'fsca_5', 'wind_speed_6', 'precipitation_amount_6',\n       'air_temperature_tmmx_6', 'air_temperature_tmmn_6',\n       'potential_evapotranspiration_6', 'relative_humidity_rmax_6',\n       'relative_humidity_rmin_6', 'mean_vapor_pressure_deficit_6', 'SWE_6',\n       'fsca_6', 'precipitation_amount_7', 'relative_humidity_rmax_7',\n       'wind_speed_7', 'air_temperature_tmmn_7', 'relative_humidity_rmin_7',\n       'air_temperature_tmmx_7', 'mean_vapor_pressure_deficit_7',\n       'potential_evapotranspiration_7', 'SWE_7', 'fsca_7'],\n      dtype='object')\nAssign -1 to fsca column..\nStart to predict (100000, 79)\nPredicted 100000 rows for chunk 4\nRead chunk 5 from day 1\nRead chunk 5 from day 2\nRead chunk 5 from day 3\nRead chunk 5 from day 4\nRead chunk 5 from day 5\nRead chunk 5 from day 6\nRead chunk 5 from day 7\nRead chunk 5 from day 8\nmerged_input.columns =  Index(['lat', 'lon', 'relative_humidity_rmax', 'relative_humidity_rmin',\n       'potential_evapotranspiration', 'mean_vapor_pressure_deficit',\n       'precipitation_amount', 'wind_speed', 'air_temperature_tmmx',\n       'air_temperature_tmmn', 'x', 'y', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'SWE', 'Flag', 'date', 'fsca',\n       'lc_prop3', 'water_year', 'wind_speed_1', 'air_temperature_tmmn_1',\n       'potential_evapotranspiration_1', 'relative_humidity_rmax_1',\n       'relative_humidity_rmin_1', 'mean_vapor_pressure_deficit_1',\n       'air_temperature_tmmx_1', 'precipitation_amount_1', 'SWE_1', 'fsca_1',\n       'relative_humidity_rmax_2', 'precipitation_amount_2',\n       'relative_humidity_rmin_2', 'mean_vapor_pressure_deficit_2',\n       'potential_evapotranspiration_2', 'wind_speed_2',\n       'air_temperature_tmmn_2', 'air_temperature_tmmx_2', 'SWE_2', 'fsca_2',\n       'air_temperature_tmmx_3', 'relative_humidity_rmax_3',\n       'precipitation_amount_3', 'wind_speed_3',\n       'mean_vapor_pressure_deficit_3', 'relative_humidity_rmin_3',\n       'air_temperature_tmmn_3', 'potential_evapotranspiration_3', 'SWE_3',\n       'fsca_3', 'air_temperature_tmmx_4', 'relative_humidity_rmin_4',\n       'mean_vapor_pressure_deficit_4', 'air_temperature_tmmn_4',\n       'wind_speed_4', 'potential_evapotranspiration_4',\n       'relative_humidity_rmax_4', 'precipitation_amount_4', 'SWE_4', 'fsca_4',\n       'air_temperature_tmmx_5', 'relative_humidity_rmin_5',\n       'air_temperature_tmmn_5', 'mean_vapor_pressure_deficit_5',\n       'wind_speed_5', 'precipitation_amount_5',\n       'potential_evapotranspiration_5', 'relative_humidity_rmax_5', 'SWE_5',\n       'fsca_5', 'wind_speed_6', 'precipitation_amount_6',\n       'air_temperature_tmmx_6', 'air_temperature_tmmn_6',\n       'potential_evapotranspiration_6', 'relative_humidity_rmax_6',\n       'relative_humidity_rmin_6', 'mean_vapor_pressure_deficit_6', 'SWE_6',\n       'fsca_6', 'precipitation_amount_7', 'relative_humidity_rmax_7',\n       'wind_speed_7', 'air_temperature_tmmn_7', 'relative_humidity_rmin_7',\n       'air_temperature_tmmx_7', 'mean_vapor_pressure_deficit_7',\n       'potential_evapotranspiration_7', 'SWE_7', 'fsca_7'],\n      dtype='object')\nAssign -1 to fsca column..\nStart to predict (62204, 79)\nPredicted 62204 rows for chunk 5\nNo more chunks for day 1\nNo more chunks for day 2\nNo more chunks for day 3\nNo more chunks for day 4\nNo more chunks for day 5\nNo more chunks for day 6\nNo more chunks for day 7\nNo more chunks for day 8\nAll chunks are processed\nPrediction completed. Results saved to /home/chetana/data/output/test_data_predicted_latest_2025-01-13.csv\nProcessing date: 2025-01-14\n>>>>>\nPredicting SWE for day 2025-01-14\nUsing model: /home/chetana/models//wormhole_ETHole_latest.joblib\nFile '/home/chetana/data/output/test_data_predicted_latest_2025-01-14.csv' has been removed.\nLoading batches from  /home/chetana/data/gridmet_test_run/testing_all_ready_2025-01-14.csv\nLoading batches from  /home/chetana/data/gridmet_test_run/testing_all_ready_2025-01-13.csv\nLoading batches from  /home/chetana/data/gridmet_test_run/testing_all_ready_2025-01-12.csv\nLoading batches from  /home/chetana/data/gridmet_test_run/testing_all_ready_2025-01-11.csv\nLoading batches from  /home/chetana/data/gridmet_test_run/testing_all_ready_2025-01-10.csv\nLoading batches from  /home/chetana/data/gridmet_test_run/testing_all_ready_2025-01-09.csv\nLoading batches from  /home/chetana/data/gridmet_test_run/testing_all_ready_2025-01-08.csv\nLoading batches from  /home/chetana/data/gridmet_test_run/testing_all_ready_2025-01-07.csv\nRead chunk 1 from day 1\nRead chunk 1 from day 2\nRead chunk 1 from day 3\nRead chunk 1 from day 4\nRead chunk 1 from day 5\nRead chunk 1 from day 6\nRead chunk 1 from day 7\nRead chunk 1 from day 8\nmerged_input.columns =  Index(['lat', 'lon', 'air_temperature_tmmn', 'mean_vapor_pressure_deficit',\n       'wind_speed', 'precipitation_amount', 'relative_humidity_rmax',\n       'potential_evapotranspiration', 'relative_humidity_rmin',\n       'air_temperature_tmmx', 'x', 'y', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'SWE', 'Flag', 'date', 'fsca',\n       'lc_prop3', 'water_year', 'relative_humidity_rmax_1',\n       'relative_humidity_rmin_1', 'potential_evapotranspiration_1',\n       'mean_vapor_pressure_deficit_1', 'precipitation_amount_1',\n       'wind_speed_1', 'air_temperature_tmmx_1', 'air_temperature_tmmn_1',\n       'SWE_1', 'fsca_1', 'wind_speed_2', 'air_temperature_tmmn_2',\n       'potential_evapotranspiration_2', 'relative_humidity_rmax_2',\n       'relative_humidity_rmin_2', 'mean_vapor_pressure_deficit_2',\n       'air_temperature_tmmx_2', 'precipitation_amount_2', 'SWE_2', 'fsca_2',\n       'relative_humidity_rmax_3', 'precipitation_amount_3',\n       'relative_humidity_rmin_3', 'mean_vapor_pressure_deficit_3',\n       'potential_evapotranspiration_3', 'wind_speed_3',\n       'air_temperature_tmmn_3', 'air_temperature_tmmx_3', 'SWE_3', 'fsca_3',\n       'air_temperature_tmmx_4', 'relative_humidity_rmax_4',\n       'precipitation_amount_4', 'wind_speed_4',\n       'mean_vapor_pressure_deficit_4', 'relative_humidity_rmin_4',\n       'air_temperature_tmmn_4', 'potential_evapotranspiration_4', 'SWE_4',\n       'fsca_4', 'air_temperature_tmmx_5', 'relative_humidity_rmin_5',\n       'mean_vapor_pressure_deficit_5', 'air_temperature_tmmn_5',\n       'wind_speed_5', 'potential_evapotranspiration_5',\n       'relative_humidity_rmax_5', 'precipitation_amount_5', 'SWE_5', 'fsca_5',\n       'air_temperature_tmmx_6', 'relative_humidity_rmin_6',\n       'air_temperature_tmmn_6', 'mean_vapor_pressure_deficit_6',\n       'wind_speed_6', 'precipitation_amount_6',\n       'potential_evapotranspiration_6', 'relative_humidity_rmax_6', 'SWE_6',\n       'fsca_6', 'wind_speed_7', 'precipitation_amount_7',\n       'air_temperature_tmmx_7', 'air_temperature_tmmn_7',\n       'potential_evapotranspiration_7', 'relative_humidity_rmax_7',\n       'relative_humidity_rmin_7', 'mean_vapor_pressure_deficit_7', 'SWE_7',\n       'fsca_7'],\n      dtype='object')\nAssign -1 to fsca column..\nStart to predict (100000, 79)\nPredicted 100000 rows for chunk 1\nRead chunk 2 from day 1\nRead chunk 2 from day 2\nRead chunk 2 from day 3\nRead chunk 2 from day 4\nRead chunk 2 from day 5\nRead chunk 2 from day 6\nRead chunk 2 from day 7\nRead chunk 2 from day 8\nmerged_input.columns =  Index(['lat', 'lon', 'air_temperature_tmmn', 'mean_vapor_pressure_deficit',\n       'wind_speed', 'precipitation_amount', 'relative_humidity_rmax',\n       'potential_evapotranspiration', 'relative_humidity_rmin',\n       'air_temperature_tmmx', 'x', 'y', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'SWE', 'Flag', 'date', 'fsca',\n       'lc_prop3', 'water_year', 'relative_humidity_rmax_1',\n       'relative_humidity_rmin_1', 'potential_evapotranspiration_1',\n       'mean_vapor_pressure_deficit_1', 'precipitation_amount_1',\n       'wind_speed_1', 'air_temperature_tmmx_1', 'air_temperature_tmmn_1',\n       'SWE_1', 'fsca_1', 'wind_speed_2', 'air_temperature_tmmn_2',\n       'potential_evapotranspiration_2', 'relative_humidity_rmax_2',\n       'relative_humidity_rmin_2', 'mean_vapor_pressure_deficit_2',\n       'air_temperature_tmmx_2', 'precipitation_amount_2', 'SWE_2', 'fsca_2',\n       'relative_humidity_rmax_3', 'precipitation_amount_3',\n       'relative_humidity_rmin_3', 'mean_vapor_pressure_deficit_3',\n       'potential_evapotranspiration_3', 'wind_speed_3',\n       'air_temperature_tmmn_3', 'air_temperature_tmmx_3', 'SWE_3', 'fsca_3',\n       'air_temperature_tmmx_4', 'relative_humidity_rmax_4',\n       'precipitation_amount_4', 'wind_speed_4',\n       'mean_vapor_pressure_deficit_4', 'relative_humidity_rmin_4',\n       'air_temperature_tmmn_4', 'potential_evapotranspiration_4', 'SWE_4',\n       'fsca_4', 'air_temperature_tmmx_5', 'relative_humidity_rmin_5',\n       'mean_vapor_pressure_deficit_5', 'air_temperature_tmmn_5',\n       'wind_speed_5', 'potential_evapotranspiration_5',\n       'relative_humidity_rmax_5', 'precipitation_amount_5', 'SWE_5', 'fsca_5',\n       'air_temperature_tmmx_6', 'relative_humidity_rmin_6',\n       'air_temperature_tmmn_6', 'mean_vapor_pressure_deficit_6',\n       'wind_speed_6', 'precipitation_amount_6',\n       'potential_evapotranspiration_6', 'relative_humidity_rmax_6', 'SWE_6',\n       'fsca_6', 'wind_speed_7', 'precipitation_amount_7',\n       'air_temperature_tmmx_7', 'air_temperature_tmmn_7',\n       'potential_evapotranspiration_7', 'relative_humidity_rmax_7',\n       'relative_humidity_rmin_7', 'mean_vapor_pressure_deficit_7', 'SWE_7',\n       'fsca_7'],\n      dtype='object')\nAssign -1 to fsca column..\nStart to predict (100000, 79)\nPredicted 100000 rows for chunk 2\nRead chunk 3 from day 1\nRead chunk 3 from day 2\nRead chunk 3 from day 3\nRead chunk 3 from day 4\nRead chunk 3 from day 5\nRead chunk 3 from day 6\nRead chunk 3 from day 7\nRead chunk 3 from day 8\nmerged_input.columns =  Index(['lat', 'lon', 'air_temperature_tmmn', 'mean_vapor_pressure_deficit',\n       'wind_speed', 'precipitation_amount', 'relative_humidity_rmax',\n       'potential_evapotranspiration', 'relative_humidity_rmin',\n       'air_temperature_tmmx', 'x', 'y', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'SWE', 'Flag', 'date', 'fsca',\n       'lc_prop3', 'water_year', 'relative_humidity_rmax_1',\n       'relative_humidity_rmin_1', 'potential_evapotranspiration_1',\n       'mean_vapor_pressure_deficit_1', 'precipitation_amount_1',\n       'wind_speed_1', 'air_temperature_tmmx_1', 'air_temperature_tmmn_1',\n       'SWE_1', 'fsca_1', 'wind_speed_2', 'air_temperature_tmmn_2',\n       'potential_evapotranspiration_2', 'relative_humidity_rmax_2',\n       'relative_humidity_rmin_2', 'mean_vapor_pressure_deficit_2',\n       'air_temperature_tmmx_2', 'precipitation_amount_2', 'SWE_2', 'fsca_2',\n       'relative_humidity_rmax_3', 'precipitation_amount_3',\n       'relative_humidity_rmin_3', 'mean_vapor_pressure_deficit_3',\n       'potential_evapotranspiration_3', 'wind_speed_3',\n       'air_temperature_tmmn_3', 'air_temperature_tmmx_3', 'SWE_3', 'fsca_3',\n       'air_temperature_tmmx_4', 'relative_humidity_rmax_4',\n       'precipitation_amount_4', 'wind_speed_4',\n       'mean_vapor_pressure_deficit_4', 'relative_humidity_rmin_4',\n       'air_temperature_tmmn_4', 'potential_evapotranspiration_4', 'SWE_4',\n       'fsca_4', 'air_temperature_tmmx_5', 'relative_humidity_rmin_5',\n       'mean_vapor_pressure_deficit_5', 'air_temperature_tmmn_5',\n       'wind_speed_5', 'potential_evapotranspiration_5',\n       'relative_humidity_rmax_5', 'precipitation_amount_5', 'SWE_5', 'fsca_5',\n       'air_temperature_tmmx_6', 'relative_humidity_rmin_6',\n       'air_temperature_tmmn_6', 'mean_vapor_pressure_deficit_6',\n       'wind_speed_6', 'precipitation_amount_6',\n       'potential_evapotranspiration_6', 'relative_humidity_rmax_6', 'SWE_6',\n       'fsca_6', 'wind_speed_7', 'precipitation_amount_7',\n       'air_temperature_tmmx_7', 'air_temperature_tmmn_7',\n       'potential_evapotranspiration_7', 'relative_humidity_rmax_7',\n       'relative_humidity_rmin_7', 'mean_vapor_pressure_deficit_7', 'SWE_7',\n       'fsca_7'],\n      dtype='object')\nAssign -1 to fsca column..\nStart to predict (100000, 79)\nPredicted 100000 rows for chunk 3\nRead chunk 4 from day 1\nRead chunk 4 from day 2\nRead chunk 4 from day 3\nRead chunk 4 from day 4\nRead chunk 4 from day 5\nRead chunk 4 from day 6\nRead chunk 4 from day 7\nRead chunk 4 from day 8\nmerged_input.columns =  Index(['lat', 'lon', 'air_temperature_tmmn', 'mean_vapor_pressure_deficit',\n       'wind_speed', 'precipitation_amount', 'relative_humidity_rmax',\n       'potential_evapotranspiration', 'relative_humidity_rmin',\n       'air_temperature_tmmx', 'x', 'y', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'SWE', 'Flag', 'date', 'fsca',\n       'lc_prop3', 'water_year', 'relative_humidity_rmax_1',\n       'relative_humidity_rmin_1', 'potential_evapotranspiration_1',\n       'mean_vapor_pressure_deficit_1', 'precipitation_amount_1',\n       'wind_speed_1', 'air_temperature_tmmx_1', 'air_temperature_tmmn_1',\n       'SWE_1', 'fsca_1', 'wind_speed_2', 'air_temperature_tmmn_2',\n       'potential_evapotranspiration_2', 'relative_humidity_rmax_2',\n       'relative_humidity_rmin_2', 'mean_vapor_pressure_deficit_2',\n       'air_temperature_tmmx_2', 'precipitation_amount_2', 'SWE_2', 'fsca_2',\n       'relative_humidity_rmax_3', 'precipitation_amount_3',\n       'relative_humidity_rmin_3', 'mean_vapor_pressure_deficit_3',\n       'potential_evapotranspiration_3', 'wind_speed_3',\n       'air_temperature_tmmn_3', 'air_temperature_tmmx_3', 'SWE_3', 'fsca_3',\n       'air_temperature_tmmx_4', 'relative_humidity_rmax_4',\n       'precipitation_amount_4', 'wind_speed_4',\n       'mean_vapor_pressure_deficit_4', 'relative_humidity_rmin_4',\n       'air_temperature_tmmn_4', 'potential_evapotranspiration_4', 'SWE_4',\n       'fsca_4', 'air_temperature_tmmx_5', 'relative_humidity_rmin_5',\n       'mean_vapor_pressure_deficit_5', 'air_temperature_tmmn_5',\n       'wind_speed_5', 'potential_evapotranspiration_5',\n       'relative_humidity_rmax_5', 'precipitation_amount_5', 'SWE_5', 'fsca_5',\n       'air_temperature_tmmx_6', 'relative_humidity_rmin_6',\n       'air_temperature_tmmn_6', 'mean_vapor_pressure_deficit_6',\n       'wind_speed_6', 'precipitation_amount_6',\n       'potential_evapotranspiration_6', 'relative_humidity_rmax_6', 'SWE_6',\n       'fsca_6', 'wind_speed_7', 'precipitation_amount_7',\n       'air_temperature_tmmx_7', 'air_temperature_tmmn_7',\n       'potential_evapotranspiration_7', 'relative_humidity_rmax_7',\n       'relative_humidity_rmin_7', 'mean_vapor_pressure_deficit_7', 'SWE_7',\n       'fsca_7'],\n      dtype='object')\nAssign -1 to fsca column..\nStart to predict (100000, 79)\nPredicted 100000 rows for chunk 4\nRead chunk 5 from day 1\nRead chunk 5 from day 2\nRead chunk 5 from day 3\nRead chunk 5 from day 4\nRead chunk 5 from day 5\nRead chunk 5 from day 6\nRead chunk 5 from day 7\nRead chunk 5 from day 8\nmerged_input.columns =  Index(['lat', 'lon', 'air_temperature_tmmn', 'mean_vapor_pressure_deficit',\n       'wind_speed', 'precipitation_amount', 'relative_humidity_rmax',\n       'potential_evapotranspiration', 'relative_humidity_rmin',\n       'air_temperature_tmmx', 'x', 'y', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'SWE', 'Flag', 'date', 'fsca',\n       'lc_prop3', 'water_year', 'relative_humidity_rmax_1',\n       'relative_humidity_rmin_1', 'potential_evapotranspiration_1',\n       'mean_vapor_pressure_deficit_1', 'precipitation_amount_1',\n       'wind_speed_1', 'air_temperature_tmmx_1', 'air_temperature_tmmn_1',\n       'SWE_1', 'fsca_1', 'wind_speed_2', 'air_temperature_tmmn_2',\n       'potential_evapotranspiration_2', 'relative_humidity_rmax_2',\n       'relative_humidity_rmin_2', 'mean_vapor_pressure_deficit_2',\n       'air_temperature_tmmx_2', 'precipitation_amount_2', 'SWE_2', 'fsca_2',\n       'relative_humidity_rmax_3', 'precipitation_amount_3',\n       'relative_humidity_rmin_3', 'mean_vapor_pressure_deficit_3',\n       'potential_evapotranspiration_3', 'wind_speed_3',\n       'air_temperature_tmmn_3', 'air_temperature_tmmx_3', 'SWE_3', 'fsca_3',\n       'air_temperature_tmmx_4', 'relative_humidity_rmax_4',\n       'precipitation_amount_4', 'wind_speed_4',\n       'mean_vapor_pressure_deficit_4', 'relative_humidity_rmin_4',\n       'air_temperature_tmmn_4', 'potential_evapotranspiration_4', 'SWE_4',\n       'fsca_4', 'air_temperature_tmmx_5', 'relative_humidity_rmin_5',\n       'mean_vapor_pressure_deficit_5', 'air_temperature_tmmn_5',\n       'wind_speed_5', 'potential_evapotranspiration_5',\n       'relative_humidity_rmax_5', 'precipitation_amount_5', 'SWE_5', 'fsca_5',\n       'air_temperature_tmmx_6', 'relative_humidity_rmin_6',\n       'air_temperature_tmmn_6', 'mean_vapor_pressure_deficit_6',\n       'wind_speed_6', 'precipitation_amount_6',\n       'potential_evapotranspiration_6', 'relative_humidity_rmax_6', 'SWE_6',\n       'fsca_6', 'wind_speed_7', 'precipitation_amount_7',\n       'air_temperature_tmmx_7', 'air_temperature_tmmn_7',\n       'potential_evapotranspiration_7', 'relative_humidity_rmax_7',\n       'relative_humidity_rmin_7', 'mean_vapor_pressure_deficit_7', 'SWE_7',\n       'fsca_7'],\n      dtype='object')\nAssign -1 to fsca column..\nStart to predict (62204, 79)\nPredicted 62204 rows for chunk 5\nNo more chunks for day 1\nNo more chunks for day 2\nNo more chunks for day 3\nNo more chunks for day 4\nNo more chunks for day 5\nNo more chunks for day 6\nNo more chunks for day 7\nNo more chunks for day 8\nAll chunks are processed\nPrediction completed. Results saved to /home/chetana/data/output/test_data_predicted_latest_2025-01-14.csv\nProcessing date: 2025-01-15\n>>>>>\nPredicting SWE for day 2025-01-15\nUsing model: /home/chetana/models//wormhole_ETHole_latest.joblib\nFile '/home/chetana/data/output/test_data_predicted_latest_2025-01-15.csv' has been removed.\nLoading batches from  /home/chetana/data/gridmet_test_run/testing_all_ready_2025-01-15.csv\nLoading batches from  /home/chetana/data/gridmet_test_run/testing_all_ready_2025-01-14.csv\nLoading batches from  /home/chetana/data/gridmet_test_run/testing_all_ready_2025-01-13.csv\nLoading batches from  /home/chetana/data/gridmet_test_run/testing_all_ready_2025-01-12.csv\nLoading batches from  /home/chetana/data/gridmet_test_run/testing_all_ready_2025-01-11.csv\nLoading batches from  /home/chetana/data/gridmet_test_run/testing_all_ready_2025-01-10.csv\nLoading batches from  /home/chetana/data/gridmet_test_run/testing_all_ready_2025-01-09.csv\nLoading batches from  /home/chetana/data/gridmet_test_run/testing_all_ready_2025-01-08.csv\nRead chunk 1 from day 1\nRead chunk 1 from day 2\nRead chunk 1 from day 3\nRead chunk 1 from day 4\nRead chunk 1 from day 5\nRead chunk 1 from day 6\nRead chunk 1 from day 7\nRead chunk 1 from day 8\nmerged_input.columns =  Index(['lat', 'lon', 'air_temperature_tmmx', 'potential_evapotranspiration',\n       'relative_humidity_rmax', 'air_temperature_tmmn',\n       'precipitation_amount', 'relative_humidity_rmin',\n       'mean_vapor_pressure_deficit', 'wind_speed', 'x', 'y', 'Elevation',\n       'Slope', 'Aspect', 'Curvature', 'Northness', 'Eastness', 'SWE', 'Flag',\n       'date', 'fsca', 'lc_prop3', 'water_year', 'air_temperature_tmmn_1',\n       'mean_vapor_pressure_deficit_1', 'wind_speed_1',\n       'precipitation_amount_1', 'relative_humidity_rmax_1',\n       'potential_evapotranspiration_1', 'relative_humidity_rmin_1',\n       'air_temperature_tmmx_1', 'SWE_1', 'fsca_1', 'relative_humidity_rmax_2',\n       'relative_humidity_rmin_2', 'potential_evapotranspiration_2',\n       'mean_vapor_pressure_deficit_2', 'precipitation_amount_2',\n       'wind_speed_2', 'air_temperature_tmmx_2', 'air_temperature_tmmn_2',\n       'SWE_2', 'fsca_2', 'wind_speed_3', 'air_temperature_tmmn_3',\n       'potential_evapotranspiration_3', 'relative_humidity_rmax_3',\n       'relative_humidity_rmin_3', 'mean_vapor_pressure_deficit_3',\n       'air_temperature_tmmx_3', 'precipitation_amount_3', 'SWE_3', 'fsca_3',\n       'relative_humidity_rmax_4', 'precipitation_amount_4',\n       'relative_humidity_rmin_4', 'mean_vapor_pressure_deficit_4',\n       'potential_evapotranspiration_4', 'wind_speed_4',\n       'air_temperature_tmmn_4', 'air_temperature_tmmx_4', 'SWE_4', 'fsca_4',\n       'air_temperature_tmmx_5', 'relative_humidity_rmax_5',\n       'precipitation_amount_5', 'wind_speed_5',\n       'mean_vapor_pressure_deficit_5', 'relative_humidity_rmin_5',\n       'air_temperature_tmmn_5', 'potential_evapotranspiration_5', 'SWE_5',\n       'fsca_5', 'air_temperature_tmmx_6', 'relative_humidity_rmin_6',\n       'mean_vapor_pressure_deficit_6', 'air_temperature_tmmn_6',\n       'wind_speed_6', 'potential_evapotranspiration_6',\n       'relative_humidity_rmax_6', 'precipitation_amount_6', 'SWE_6', 'fsca_6',\n       'air_temperature_tmmx_7', 'relative_humidity_rmin_7',\n       'air_temperature_tmmn_7', 'mean_vapor_pressure_deficit_7',\n       'wind_speed_7', 'precipitation_amount_7',\n       'potential_evapotranspiration_7', 'relative_humidity_rmax_7', 'SWE_7',\n       'fsca_7'],\n      dtype='object')\nAssign -1 to fsca column..\nStart to predict (100000, 79)\nPredicted 100000 rows for chunk 1\nRead chunk 2 from day 1\nRead chunk 2 from day 2\nRead chunk 2 from day 3\nRead chunk 2 from day 4\nRead chunk 2 from day 5\nRead chunk 2 from day 6\nRead chunk 2 from day 7\nRead chunk 2 from day 8\nmerged_input.columns =  Index(['lat', 'lon', 'air_temperature_tmmx', 'potential_evapotranspiration',\n       'relative_humidity_rmax', 'air_temperature_tmmn',\n       'precipitation_amount', 'relative_humidity_rmin',\n       'mean_vapor_pressure_deficit', 'wind_speed', 'x', 'y', 'Elevation',\n       'Slope', 'Aspect', 'Curvature', 'Northness', 'Eastness', 'SWE', 'Flag',\n       'date', 'fsca', 'lc_prop3', 'water_year', 'air_temperature_tmmn_1',\n       'mean_vapor_pressure_deficit_1', 'wind_speed_1',\n       'precipitation_amount_1', 'relative_humidity_rmax_1',\n       'potential_evapotranspiration_1', 'relative_humidity_rmin_1',\n       'air_temperature_tmmx_1', 'SWE_1', 'fsca_1', 'relative_humidity_rmax_2',\n       'relative_humidity_rmin_2', 'potential_evapotranspiration_2',\n       'mean_vapor_pressure_deficit_2', 'precipitation_amount_2',\n       'wind_speed_2', 'air_temperature_tmmx_2', 'air_temperature_tmmn_2',\n       'SWE_2', 'fsca_2', 'wind_speed_3', 'air_temperature_tmmn_3',\n       'potential_evapotranspiration_3', 'relative_humidity_rmax_3',\n       'relative_humidity_rmin_3', 'mean_vapor_pressure_deficit_3',\n       'air_temperature_tmmx_3', 'precipitation_amount_3', 'SWE_3', 'fsca_3',\n       'relative_humidity_rmax_4', 'precipitation_amount_4',\n       'relative_humidity_rmin_4', 'mean_vapor_pressure_deficit_4',\n       'potential_evapotranspiration_4', 'wind_speed_4',\n       'air_temperature_tmmn_4', 'air_temperature_tmmx_4', 'SWE_4', 'fsca_4',\n       'air_temperature_tmmx_5', 'relative_humidity_rmax_5',\n       'precipitation_amount_5', 'wind_speed_5',\n       'mean_vapor_pressure_deficit_5', 'relative_humidity_rmin_5',\n       'air_temperature_tmmn_5', 'potential_evapotranspiration_5', 'SWE_5',\n       'fsca_5', 'air_temperature_tmmx_6', 'relative_humidity_rmin_6',\n       'mean_vapor_pressure_deficit_6', 'air_temperature_tmmn_6',\n       'wind_speed_6', 'potential_evapotranspiration_6',\n       'relative_humidity_rmax_6', 'precipitation_amount_6', 'SWE_6', 'fsca_6',\n       'air_temperature_tmmx_7', 'relative_humidity_rmin_7',\n       'air_temperature_tmmn_7', 'mean_vapor_pressure_deficit_7',\n       'wind_speed_7', 'precipitation_amount_7',\n       'potential_evapotranspiration_7', 'relative_humidity_rmax_7', 'SWE_7',\n       'fsca_7'],\n      dtype='object')\nAssign -1 to fsca column..\nStart to predict (100000, 79)\nPredicted 100000 rows for chunk 2\nRead chunk 3 from day 1\nRead chunk 3 from day 2\nRead chunk 3 from day 3\nRead chunk 3 from day 4\nRead chunk 3 from day 5\nRead chunk 3 from day 6\nRead chunk 3 from day 7\nRead chunk 3 from day 8\nmerged_input.columns =  Index(['lat', 'lon', 'air_temperature_tmmx', 'potential_evapotranspiration',\n       'relative_humidity_rmax', 'air_temperature_tmmn',\n       'precipitation_amount', 'relative_humidity_rmin',\n       'mean_vapor_pressure_deficit', 'wind_speed', 'x', 'y', 'Elevation',\n       'Slope', 'Aspect', 'Curvature', 'Northness', 'Eastness', 'SWE', 'Flag',\n       'date', 'fsca', 'lc_prop3', 'water_year', 'air_temperature_tmmn_1',\n       'mean_vapor_pressure_deficit_1', 'wind_speed_1',\n       'precipitation_amount_1', 'relative_humidity_rmax_1',\n       'potential_evapotranspiration_1', 'relative_humidity_rmin_1',\n       'air_temperature_tmmx_1', 'SWE_1', 'fsca_1', 'relative_humidity_rmax_2',\n       'relative_humidity_rmin_2', 'potential_evapotranspiration_2',\n       'mean_vapor_pressure_deficit_2', 'precipitation_amount_2',\n       'wind_speed_2', 'air_temperature_tmmx_2', 'air_temperature_tmmn_2',\n       'SWE_2', 'fsca_2', 'wind_speed_3', 'air_temperature_tmmn_3',\n       'potential_evapotranspiration_3', 'relative_humidity_rmax_3',\n       'relative_humidity_rmin_3', 'mean_vapor_pressure_deficit_3',\n       'air_temperature_tmmx_3', 'precipitation_amount_3', 'SWE_3', 'fsca_3',\n       'relative_humidity_rmax_4', 'precipitation_amount_4',\n       'relative_humidity_rmin_4', 'mean_vapor_pressure_deficit_4',\n       'potential_evapotranspiration_4', 'wind_speed_4',\n       'air_temperature_tmmn_4', 'air_temperature_tmmx_4', 'SWE_4', 'fsca_4',\n       'air_temperature_tmmx_5', 'relative_humidity_rmax_5',\n       'precipitation_amount_5', 'wind_speed_5',\n       'mean_vapor_pressure_deficit_5', 'relative_humidity_rmin_5',\n       'air_temperature_tmmn_5', 'potential_evapotranspiration_5', 'SWE_5',\n       'fsca_5', 'air_temperature_tmmx_6', 'relative_humidity_rmin_6',\n       'mean_vapor_pressure_deficit_6', 'air_temperature_tmmn_6',\n       'wind_speed_6', 'potential_evapotranspiration_6',\n       'relative_humidity_rmax_6', 'precipitation_amount_6', 'SWE_6', 'fsca_6',\n       'air_temperature_tmmx_7', 'relative_humidity_rmin_7',\n       'air_temperature_tmmn_7', 'mean_vapor_pressure_deficit_7',\n       'wind_speed_7', 'precipitation_amount_7',\n       'potential_evapotranspiration_7', 'relative_humidity_rmax_7', 'SWE_7',\n       'fsca_7'],\n      dtype='object')\nAssign -1 to fsca column..\nStart to predict (100000, 79)\nPredicted 100000 rows for chunk 3\nRead chunk 4 from day 1\nRead chunk 4 from day 2\nRead chunk 4 from day 3\nRead chunk 4 from day 4\nRead chunk 4 from day 5\nRead chunk 4 from day 6\nRead chunk 4 from day 7\nRead chunk 4 from day 8\nmerged_input.columns =  Index(['lat', 'lon', 'air_temperature_tmmx', 'potential_evapotranspiration',\n       'relative_humidity_rmax', 'air_temperature_tmmn',\n       'precipitation_amount', 'relative_humidity_rmin',\n       'mean_vapor_pressure_deficit', 'wind_speed', 'x', 'y', 'Elevation',\n       'Slope', 'Aspect', 'Curvature', 'Northness', 'Eastness', 'SWE', 'Flag',\n       'date', 'fsca', 'lc_prop3', 'water_year', 'air_temperature_tmmn_1',\n       'mean_vapor_pressure_deficit_1', 'wind_speed_1',\n       'precipitation_amount_1', 'relative_humidity_rmax_1',\n       'potential_evapotranspiration_1', 'relative_humidity_rmin_1',\n       'air_temperature_tmmx_1', 'SWE_1', 'fsca_1', 'relative_humidity_rmax_2',\n       'relative_humidity_rmin_2', 'potential_evapotranspiration_2',\n       'mean_vapor_pressure_deficit_2', 'precipitation_amount_2',\n       'wind_speed_2', 'air_temperature_tmmx_2', 'air_temperature_tmmn_2',\n       'SWE_2', 'fsca_2', 'wind_speed_3', 'air_temperature_tmmn_3',\n       'potential_evapotranspiration_3', 'relative_humidity_rmax_3',\n       'relative_humidity_rmin_3', 'mean_vapor_pressure_deficit_3',\n       'air_temperature_tmmx_3', 'precipitation_amount_3', 'SWE_3', 'fsca_3',\n       'relative_humidity_rmax_4', 'precipitation_amount_4',\n       'relative_humidity_rmin_4', 'mean_vapor_pressure_deficit_4',\n       'potential_evapotranspiration_4', 'wind_speed_4',\n       'air_temperature_tmmn_4', 'air_temperature_tmmx_4', 'SWE_4', 'fsca_4',\n       'air_temperature_tmmx_5', 'relative_humidity_rmax_5',\n       'precipitation_amount_5', 'wind_speed_5',\n       'mean_vapor_pressure_deficit_5', 'relative_humidity_rmin_5',\n       'air_temperature_tmmn_5', 'potential_evapotranspiration_5', 'SWE_5',\n       'fsca_5', 'air_temperature_tmmx_6', 'relative_humidity_rmin_6',\n       'mean_vapor_pressure_deficit_6', 'air_temperature_tmmn_6',\n       'wind_speed_6', 'potential_evapotranspiration_6',\n       'relative_humidity_rmax_6', 'precipitation_amount_6', 'SWE_6', 'fsca_6',\n       'air_temperature_tmmx_7', 'relative_humidity_rmin_7',\n       'air_temperature_tmmn_7', 'mean_vapor_pressure_deficit_7',\n       'wind_speed_7', 'precipitation_amount_7',\n       'potential_evapotranspiration_7', 'relative_humidity_rmax_7', 'SWE_7',\n       'fsca_7'],\n      dtype='object')\nAssign -1 to fsca column..\nStart to predict (100000, 79)\nPredicted 100000 rows for chunk 4\nRead chunk 5 from day 1\nRead chunk 5 from day 2\nRead chunk 5 from day 3\nRead chunk 5 from day 4\nRead chunk 5 from day 5\nRead chunk 5 from day 6\nRead chunk 5 from day 7\nRead chunk 5 from day 8\nmerged_input.columns =  Index(['lat', 'lon', 'air_temperature_tmmx', 'potential_evapotranspiration',\n       'relative_humidity_rmax', 'air_temperature_tmmn',\n       'precipitation_amount', 'relative_humidity_rmin',\n       'mean_vapor_pressure_deficit', 'wind_speed', 'x', 'y', 'Elevation',\n       'Slope', 'Aspect', 'Curvature', 'Northness', 'Eastness', 'SWE', 'Flag',\n       'date', 'fsca', 'lc_prop3', 'water_year', 'air_temperature_tmmn_1',\n       'mean_vapor_pressure_deficit_1', 'wind_speed_1',\n       'precipitation_amount_1', 'relative_humidity_rmax_1',\n       'potential_evapotranspiration_1', 'relative_humidity_rmin_1',\n       'air_temperature_tmmx_1', 'SWE_1', 'fsca_1', 'relative_humidity_rmax_2',\n       'relative_humidity_rmin_2', 'potential_evapotranspiration_2',\n       'mean_vapor_pressure_deficit_2', 'precipitation_amount_2',\n       'wind_speed_2', 'air_temperature_tmmx_2', 'air_temperature_tmmn_2',\n       'SWE_2', 'fsca_2', 'wind_speed_3', 'air_temperature_tmmn_3',\n       'potential_evapotranspiration_3', 'relative_humidity_rmax_3',\n       'relative_humidity_rmin_3', 'mean_vapor_pressure_deficit_3',\n       'air_temperature_tmmx_3', 'precipitation_amount_3', 'SWE_3', 'fsca_3',\n       'relative_humidity_rmax_4', 'precipitation_amount_4',\n       'relative_humidity_rmin_4', 'mean_vapor_pressure_deficit_4',\n       'potential_evapotranspiration_4', 'wind_speed_4',\n       'air_temperature_tmmn_4', 'air_temperature_tmmx_4', 'SWE_4', 'fsca_4',\n       'air_temperature_tmmx_5', 'relative_humidity_rmax_5',\n       'precipitation_amount_5', 'wind_speed_5',\n       'mean_vapor_pressure_deficit_5', 'relative_humidity_rmin_5',\n       'air_temperature_tmmn_5', 'potential_evapotranspiration_5', 'SWE_5',\n       'fsca_5', 'air_temperature_tmmx_6', 'relative_humidity_rmin_6',\n       'mean_vapor_pressure_deficit_6', 'air_temperature_tmmn_6',\n       'wind_speed_6', 'potential_evapotranspiration_6',\n       'relative_humidity_rmax_6', 'precipitation_amount_6', 'SWE_6', 'fsca_6',\n       'air_temperature_tmmx_7', 'relative_humidity_rmin_7',\n       'air_temperature_tmmn_7', 'mean_vapor_pressure_deficit_7',\n       'wind_speed_7', 'precipitation_amount_7',\n       'potential_evapotranspiration_7', 'relative_humidity_rmax_7', 'SWE_7',\n       'fsca_7'],\n      dtype='object')\nAssign -1 to fsca column..\nStart to predict (62204, 79)\nPredicted 62204 rows for chunk 5\nNo more chunks for day 1\nNo more chunks for day 2\nNo more chunks for day 3\nNo more chunks for day 4\nNo more chunks for day 5\nNo more chunks for day 6\nNo more chunks for day 7\nNo more chunks for day 8\nAll chunks are processed\nPrediction completed. Results saved to /home/chetana/data/output/test_data_predicted_latest_2025-01-15.csv\nProcessing date: 2025-01-16\n>>>>>\nPredicting SWE for day 2025-01-16\nUsing model: /home/chetana/models//wormhole_ETHole_latest.joblib\nFile '/home/chetana/data/output/test_data_predicted_latest_2025-01-16.csv' has been removed.\nLoading batches from  /home/chetana/data/gridmet_test_run/testing_all_ready_2025-01-16.csv\nLoading batches from  /home/chetana/data/gridmet_test_run/testing_all_ready_2025-01-15.csv\nLoading batches from  /home/chetana/data/gridmet_test_run/testing_all_ready_2025-01-14.csv\nLoading batches from  /home/chetana/data/gridmet_test_run/testing_all_ready_2025-01-13.csv\nLoading batches from  /home/chetana/data/gridmet_test_run/testing_all_ready_2025-01-12.csv\nLoading batches from  /home/chetana/data/gridmet_test_run/testing_all_ready_2025-01-11.csv\nLoading batches from  /home/chetana/data/gridmet_test_run/testing_all_ready_2025-01-10.csv\nLoading batches from  /home/chetana/data/gridmet_test_run/testing_all_ready_2025-01-09.csv\nRead chunk 1 from day 1\nRead chunk 1 from day 2\nRead chunk 1 from day 3\nRead chunk 1 from day 4\nRead chunk 1 from day 5\nRead chunk 1 from day 6\nRead chunk 1 from day 7\nRead chunk 1 from day 8\nmerged_input.columns =  Index(['lat', 'lon', 'precipitation_amount', 'mean_vapor_pressure_deficit',\n       'relative_humidity_rmax', 'wind_speed', 'air_temperature_tmmn',\n       'air_temperature_tmmx', 'potential_evapotranspiration',\n       'relative_humidity_rmin', 'x', 'y', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'SWE', 'Flag', 'date', 'fsca',\n       'lc_prop3', 'water_year', 'air_temperature_tmmx_1',\n       'potential_evapotranspiration_1', 'relative_humidity_rmax_1',\n       'air_temperature_tmmn_1', 'precipitation_amount_1',\n       'relative_humidity_rmin_1', 'mean_vapor_pressure_deficit_1',\n       'wind_speed_1', 'SWE_1', 'fsca_1', 'air_temperature_tmmn_2',\n       'mean_vapor_pressure_deficit_2', 'wind_speed_2',\n       'precipitation_amount_2', 'relative_humidity_rmax_2',\n       'potential_evapotranspiration_2', 'relative_humidity_rmin_2',\n       'air_temperature_tmmx_2', 'SWE_2', 'fsca_2', 'relative_humidity_rmax_3',\n       'relative_humidity_rmin_3', 'potential_evapotranspiration_3',\n       'mean_vapor_pressure_deficit_3', 'precipitation_amount_3',\n       'wind_speed_3', 'air_temperature_tmmx_3', 'air_temperature_tmmn_3',\n       'SWE_3', 'fsca_3', 'wind_speed_4', 'air_temperature_tmmn_4',\n       'potential_evapotranspiration_4', 'relative_humidity_rmax_4',\n       'relative_humidity_rmin_4', 'mean_vapor_pressure_deficit_4',\n       'air_temperature_tmmx_4', 'precipitation_amount_4', 'SWE_4', 'fsca_4',\n       'relative_humidity_rmax_5', 'precipitation_amount_5',\n       'relative_humidity_rmin_5', 'mean_vapor_pressure_deficit_5',\n       'potential_evapotranspiration_5', 'wind_speed_5',\n       'air_temperature_tmmn_5', 'air_temperature_tmmx_5', 'SWE_5', 'fsca_5',\n       'air_temperature_tmmx_6', 'relative_humidity_rmax_6',\n       'precipitation_amount_6', 'wind_speed_6',\n       'mean_vapor_pressure_deficit_6', 'relative_humidity_rmin_6',\n       'air_temperature_tmmn_6', 'potential_evapotranspiration_6', 'SWE_6',\n       'fsca_6', 'air_temperature_tmmx_7', 'relative_humidity_rmin_7',\n       'mean_vapor_pressure_deficit_7', 'air_temperature_tmmn_7',\n       'wind_speed_7', 'potential_evapotranspiration_7',\n       'relative_humidity_rmax_7', 'precipitation_amount_7', 'SWE_7',\n       'fsca_7'],\n      dtype='object')\nAssign -1 to fsca column..\nStart to predict (100000, 79)\nPredicted 100000 rows for chunk 1\nRead chunk 2 from day 1\nRead chunk 2 from day 2\nRead chunk 2 from day 3\nRead chunk 2 from day 4\nRead chunk 2 from day 5\nRead chunk 2 from day 6\nRead chunk 2 from day 7\nRead chunk 2 from day 8\nmerged_input.columns =  Index(['lat', 'lon', 'precipitation_amount', 'mean_vapor_pressure_deficit',\n       'relative_humidity_rmax', 'wind_speed', 'air_temperature_tmmn',\n       'air_temperature_tmmx', 'potential_evapotranspiration',\n       'relative_humidity_rmin', 'x', 'y', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'SWE', 'Flag', 'date', 'fsca',\n       'lc_prop3', 'water_year', 'air_temperature_tmmx_1',\n       'potential_evapotranspiration_1', 'relative_humidity_rmax_1',\n       'air_temperature_tmmn_1', 'precipitation_amount_1',\n       'relative_humidity_rmin_1', 'mean_vapor_pressure_deficit_1',\n       'wind_speed_1', 'SWE_1', 'fsca_1', 'air_temperature_tmmn_2',\n       'mean_vapor_pressure_deficit_2', 'wind_speed_2',\n       'precipitation_amount_2', 'relative_humidity_rmax_2',\n       'potential_evapotranspiration_2', 'relative_humidity_rmin_2',\n       'air_temperature_tmmx_2', 'SWE_2', 'fsca_2', 'relative_humidity_rmax_3',\n       'relative_humidity_rmin_3', 'potential_evapotranspiration_3',\n       'mean_vapor_pressure_deficit_3', 'precipitation_amount_3',\n       'wind_speed_3', 'air_temperature_tmmx_3', 'air_temperature_tmmn_3',\n       'SWE_3', 'fsca_3', 'wind_speed_4', 'air_temperature_tmmn_4',\n       'potential_evapotranspiration_4', 'relative_humidity_rmax_4',\n       'relative_humidity_rmin_4', 'mean_vapor_pressure_deficit_4',\n       'air_temperature_tmmx_4', 'precipitation_amount_4', 'SWE_4', 'fsca_4',\n       'relative_humidity_rmax_5', 'precipitation_amount_5',\n       'relative_humidity_rmin_5', 'mean_vapor_pressure_deficit_5',\n       'potential_evapotranspiration_5', 'wind_speed_5',\n       'air_temperature_tmmn_5', 'air_temperature_tmmx_5', 'SWE_5', 'fsca_5',\n       'air_temperature_tmmx_6', 'relative_humidity_rmax_6',\n       'precipitation_amount_6', 'wind_speed_6',\n       'mean_vapor_pressure_deficit_6', 'relative_humidity_rmin_6',\n       'air_temperature_tmmn_6', 'potential_evapotranspiration_6', 'SWE_6',\n       'fsca_6', 'air_temperature_tmmx_7', 'relative_humidity_rmin_7',\n       'mean_vapor_pressure_deficit_7', 'air_temperature_tmmn_7',\n       'wind_speed_7', 'potential_evapotranspiration_7',\n       'relative_humidity_rmax_7', 'precipitation_amount_7', 'SWE_7',\n       'fsca_7'],\n      dtype='object')\nAssign -1 to fsca column..\nStart to predict (100000, 79)\nPredicted 100000 rows for chunk 2\nRead chunk 3 from day 1\nRead chunk 3 from day 2\nRead chunk 3 from day 3\nRead chunk 3 from day 4\nRead chunk 3 from day 5\nRead chunk 3 from day 6\nRead chunk 3 from day 7\nRead chunk 3 from day 8\nmerged_input.columns =  Index(['lat', 'lon', 'precipitation_amount', 'mean_vapor_pressure_deficit',\n       'relative_humidity_rmax', 'wind_speed', 'air_temperature_tmmn',\n       'air_temperature_tmmx', 'potential_evapotranspiration',\n       'relative_humidity_rmin', 'x', 'y', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'SWE', 'Flag', 'date', 'fsca',\n       'lc_prop3', 'water_year', 'air_temperature_tmmx_1',\n       'potential_evapotranspiration_1', 'relative_humidity_rmax_1',\n       'air_temperature_tmmn_1', 'precipitation_amount_1',\n       'relative_humidity_rmin_1', 'mean_vapor_pressure_deficit_1',\n       'wind_speed_1', 'SWE_1', 'fsca_1', 'air_temperature_tmmn_2',\n       'mean_vapor_pressure_deficit_2', 'wind_speed_2',\n       'precipitation_amount_2', 'relative_humidity_rmax_2',\n       'potential_evapotranspiration_2', 'relative_humidity_rmin_2',\n       'air_temperature_tmmx_2', 'SWE_2', 'fsca_2', 'relative_humidity_rmax_3',\n       'relative_humidity_rmin_3', 'potential_evapotranspiration_3',\n       'mean_vapor_pressure_deficit_3', 'precipitation_amount_3',\n       'wind_speed_3', 'air_temperature_tmmx_3', 'air_temperature_tmmn_3',\n       'SWE_3', 'fsca_3', 'wind_speed_4', 'air_temperature_tmmn_4',\n       'potential_evapotranspiration_4', 'relative_humidity_rmax_4',\n       'relative_humidity_rmin_4', 'mean_vapor_pressure_deficit_4',\n       'air_temperature_tmmx_4', 'precipitation_amount_4', 'SWE_4', 'fsca_4',\n       'relative_humidity_rmax_5', 'precipitation_amount_5',\n       'relative_humidity_rmin_5', 'mean_vapor_pressure_deficit_5',\n       'potential_evapotranspiration_5', 'wind_speed_5',\n       'air_temperature_tmmn_5', 'air_temperature_tmmx_5', 'SWE_5', 'fsca_5',\n       'air_temperature_tmmx_6', 'relative_humidity_rmax_6',\n       'precipitation_amount_6', 'wind_speed_6',\n       'mean_vapor_pressure_deficit_6', 'relative_humidity_rmin_6',\n       'air_temperature_tmmn_6', 'potential_evapotranspiration_6', 'SWE_6',\n       'fsca_6', 'air_temperature_tmmx_7', 'relative_humidity_rmin_7',\n       'mean_vapor_pressure_deficit_7', 'air_temperature_tmmn_7',\n       'wind_speed_7', 'potential_evapotranspiration_7',\n       'relative_humidity_rmax_7', 'precipitation_amount_7', 'SWE_7',\n       'fsca_7'],\n      dtype='object')\nAssign -1 to fsca column..\nStart to predict (100000, 79)\nPredicted 100000 rows for chunk 3\nRead chunk 4 from day 1\nRead chunk 4 from day 2\nRead chunk 4 from day 3\nRead chunk 4 from day 4\nRead chunk 4 from day 5\nRead chunk 4 from day 6\nRead chunk 4 from day 7\nRead chunk 4 from day 8\nmerged_input.columns =  Index(['lat', 'lon', 'precipitation_amount', 'mean_vapor_pressure_deficit',\n       'relative_humidity_rmax', 'wind_speed', 'air_temperature_tmmn',\n       'air_temperature_tmmx', 'potential_evapotranspiration',\n       'relative_humidity_rmin', 'x', 'y', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'SWE', 'Flag', 'date', 'fsca',\n       'lc_prop3', 'water_year', 'air_temperature_tmmx_1',\n       'potential_evapotranspiration_1', 'relative_humidity_rmax_1',\n       'air_temperature_tmmn_1', 'precipitation_amount_1',\n       'relative_humidity_rmin_1', 'mean_vapor_pressure_deficit_1',\n       'wind_speed_1', 'SWE_1', 'fsca_1', 'air_temperature_tmmn_2',\n       'mean_vapor_pressure_deficit_2', 'wind_speed_2',\n       'precipitation_amount_2', 'relative_humidity_rmax_2',\n       'potential_evapotranspiration_2', 'relative_humidity_rmin_2',\n       'air_temperature_tmmx_2', 'SWE_2', 'fsca_2', 'relative_humidity_rmax_3',\n       'relative_humidity_rmin_3', 'potential_evapotranspiration_3',\n       'mean_vapor_pressure_deficit_3', 'precipitation_amount_3',\n       'wind_speed_3', 'air_temperature_tmmx_3', 'air_temperature_tmmn_3',\n       'SWE_3', 'fsca_3', 'wind_speed_4', 'air_temperature_tmmn_4',\n       'potential_evapotranspiration_4', 'relative_humidity_rmax_4',\n       'relative_humidity_rmin_4', 'mean_vapor_pressure_deficit_4',\n       'air_temperature_tmmx_4', 'precipitation_amount_4', 'SWE_4', 'fsca_4',\n       'relative_humidity_rmax_5', 'precipitation_amount_5',\n       'relative_humidity_rmin_5', 'mean_vapor_pressure_deficit_5',\n       'potential_evapotranspiration_5', 'wind_speed_5',\n       'air_temperature_tmmn_5', 'air_temperature_tmmx_5', 'SWE_5', 'fsca_5',\n       'air_temperature_tmmx_6', 'relative_humidity_rmax_6',\n       'precipitation_amount_6', 'wind_speed_6',\n       'mean_vapor_pressure_deficit_6', 'relative_humidity_rmin_6',\n       'air_temperature_tmmn_6', 'potential_evapotranspiration_6', 'SWE_6',\n       'fsca_6', 'air_temperature_tmmx_7', 'relative_humidity_rmin_7',\n       'mean_vapor_pressure_deficit_7', 'air_temperature_tmmn_7',\n       'wind_speed_7', 'potential_evapotranspiration_7',\n       'relative_humidity_rmax_7', 'precipitation_amount_7', 'SWE_7',\n       'fsca_7'],\n      dtype='object')\nAssign -1 to fsca column..\nStart to predict (100000, 79)\nPredicted 100000 rows for chunk 4\nRead chunk 5 from day 1\nRead chunk 5 from day 2\nRead chunk 5 from day 3\nRead chunk 5 from day 4\nRead chunk 5 from day 5\nRead chunk 5 from day 6\nRead chunk 5 from day 7\nRead chunk 5 from day 8\nmerged_input.columns =  Index(['lat', 'lon', 'precipitation_amount', 'mean_vapor_pressure_deficit',\n       'relative_humidity_rmax', 'wind_speed', 'air_temperature_tmmn',\n       'air_temperature_tmmx', 'potential_evapotranspiration',\n       'relative_humidity_rmin', 'x', 'y', 'Elevation', 'Slope', 'Aspect',\n       'Curvature', 'Northness', 'Eastness', 'SWE', 'Flag', 'date', 'fsca',\n       'lc_prop3', 'water_year', 'air_temperature_tmmx_1',\n       'potential_evapotranspiration_1', 'relative_humidity_rmax_1',\n       'air_temperature_tmmn_1', 'precipitation_amount_1',\n       'relative_humidity_rmin_1', 'mean_vapor_pressure_deficit_1',\n       'wind_speed_1', 'SWE_1', 'fsca_1', 'air_temperature_tmmn_2',\n       'mean_vapor_pressure_deficit_2', 'wind_speed_2',\n       'precipitation_amount_2', 'relative_humidity_rmax_2',\n       'potential_evapotranspiration_2', 'relative_humidity_rmin_2',\n       'air_temperature_tmmx_2', 'SWE_2', 'fsca_2', 'relative_humidity_rmax_3',\n       'relative_humidity_rmin_3', 'potential_evapotranspiration_3',\n       'mean_vapor_pressure_deficit_3', 'precipitation_amount_3',\n       'wind_speed_3', 'air_temperature_tmmx_3', 'air_temperature_tmmn_3',\n       'SWE_3', 'fsca_3', 'wind_speed_4', 'air_temperature_tmmn_4',\n       'potential_evapotranspiration_4', 'relative_humidity_rmax_4',\n       'relative_humidity_rmin_4', 'mean_vapor_pressure_deficit_4',\n       'air_temperature_tmmx_4', 'precipitation_amount_4', 'SWE_4', 'fsca_4',\n       'relative_humidity_rmax_5', 'precipitation_amount_5',\n       'relative_humidity_rmin_5', 'mean_vapor_pressure_deficit_5',\n       'potential_evapotranspiration_5', 'wind_speed_5',\n       'air_temperature_tmmn_5', 'air_temperature_tmmx_5', 'SWE_5', 'fsca_5',\n       'air_temperature_tmmx_6', 'relative_humidity_rmax_6',\n       'precipitation_amount_6', 'wind_speed_6',\n       'mean_vapor_pressure_deficit_6', 'relative_humidity_rmin_6',\n       'air_temperature_tmmn_6', 'potential_evapotranspiration_6', 'SWE_6',\n       'fsca_6', 'air_temperature_tmmx_7', 'relative_humidity_rmin_7',\n       'mean_vapor_pressure_deficit_7', 'air_temperature_tmmn_7',\n       'wind_speed_7', 'potential_evapotranspiration_7',\n       'relative_humidity_rmax_7', 'precipitation_amount_7', 'SWE_7',\n       'fsca_7'],\n      dtype='object')\nAssign -1 to fsca column..\nStart to predict (62204, 79)\nPredicted 62204 rows for chunk 5\nNo more chunks for day 1\nNo more chunks for day 2\nNo more chunks for day 3\nNo more chunks for day 4\nNo more chunks for day 5\nNo more chunks for day 6\nNo more chunks for day 7\nNo more chunks for day 8\nAll chunks are processed\nPrediction completed. Results saved to /home/chetana/data/output/test_data_predicted_latest_2025-01-16.csv\n",
  "history_begin_time" : 1737328098701,
  "history_end_time" : 1737328549811,
  "history_notes" : null,
  "history_process" : "h1qp9v",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "s73nrh36urv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097317,
  "history_end_time" : 1737328097317,
  "history_notes" : null,
  "history_process" : "urd0nk",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "503ifrnuliy",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097319,
  "history_end_time" : 1737328097319,
  "history_notes" : null,
  "history_process" : "525l8q",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "hkyxu4gyakl",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097321,
  "history_end_time" : 1737328097321,
  "history_notes" : null,
  "history_process" : "7temiv",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "8yt394e6hgn",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097323,
  "history_end_time" : 1737328097323,
  "history_notes" : null,
  "history_process" : "rmxece",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "1yxpqq322p7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097325,
  "history_end_time" : 1737328097325,
  "history_notes" : null,
  "history_process" : "illwc1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "1qjbxf2tfzd",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097327,
  "history_end_time" : 1737328097327,
  "history_notes" : null,
  "history_process" : "sjs5by",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "j44kllbohzi",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097328,
  "history_end_time" : 1737328097328,
  "history_notes" : null,
  "history_process" : "y7nb46",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "l5wc16khvy9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097329,
  "history_end_time" : 1737328097329,
  "history_notes" : null,
  "history_process" : "a8p3n7",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ebwyg0bl9b0",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097331,
  "history_end_time" : 1737328097331,
  "history_notes" : null,
  "history_process" : "smsdr0",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "zrhkw789luh",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097332,
  "history_end_time" : 1737328097332,
  "history_notes" : null,
  "history_process" : "4i0sop",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "qv0kumdq3wh",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097333,
  "history_end_time" : 1737328097333,
  "history_notes" : null,
  "history_process" : "b63prf",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "i59jey4eyqk",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097335,
  "history_end_time" : 1737328097335,
  "history_notes" : null,
  "history_process" : "zh38b6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "q12b1rcxecw",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097336,
  "history_end_time" : 1737328097336,
  "history_notes" : null,
  "history_process" : "wdh394",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "oul33h0ew3f",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097338,
  "history_end_time" : 1737328097338,
  "history_notes" : null,
  "history_process" : "p87wh1",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "pz8jya88xtf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097339,
  "history_end_time" : 1737328097339,
  "history_notes" : null,
  "history_process" : "ilbqzg",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "kujhhgduv06",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097340,
  "history_end_time" : 1737328097340,
  "history_notes" : null,
  "history_process" : "do86ae",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "w8bxbxk13n0",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097342,
  "history_end_time" : 1737328097342,
  "history_notes" : null,
  "history_process" : "gkhtc0",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "q1mtt5qrhf3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097343,
  "history_end_time" : 1737328097343,
  "history_notes" : null,
  "history_process" : "lbd6cp",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "6gcst0drsdu",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097345,
  "history_end_time" : 1737328097345,
  "history_notes" : null,
  "history_process" : "br9etb",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "nv0x5mm7x5n",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097347,
  "history_end_time" : 1737328097347,
  "history_notes" : null,
  "history_process" : "c2xkhz",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "6hjg3pkqq9w",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097348,
  "history_end_time" : 1737328097348,
  "history_notes" : null,
  "history_process" : "doinnd",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "3ewz6c0q3j5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097349,
  "history_end_time" : 1737328097349,
  "history_notes" : null,
  "history_process" : "b7a4fu",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "n7v4a08sjax",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097351,
  "history_end_time" : 1737328097351,
  "history_notes" : null,
  "history_process" : "gnpbdq",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "3cwlj3wpuy0",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097352,
  "history_end_time" : 1737328097352,
  "history_notes" : null,
  "history_process" : "oon4sb",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "hxsml4rmyv1",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097353,
  "history_end_time" : 1737328097353,
  "history_notes" : null,
  "history_process" : "fa7e4u",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "96lojn4u439",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097355,
  "history_end_time" : 1737328097355,
  "history_notes" : null,
  "history_process" : "drwmbo",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "bloc8yocmhy",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097356,
  "history_end_time" : 1737328097356,
  "history_notes" : null,
  "history_process" : "2n7b06",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "exwt67jrz2f",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097357,
  "history_end_time" : 1737328097357,
  "history_notes" : null,
  "history_process" : "bwdy3s",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "igcz21cr9uh",
  "history_input" : "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom datetime import timedelta, datetime\nimport numpy as np\nimport uuid\nimport matplotlib.colors as mcolors\nimport geopandas as gpd\nimport rasterio\nfrom rasterio.transform import from_origin\nfrom rasterio.enums import Resampling\nfrom rasterio import warp\nfrom shapely.geometry import Point\nfrom rasterio.crs import CRS\nimport rasterio.features\nfrom rasterio.features import rasterize\nimport os\nimport math\nfrom datetime import datetime, timedelta\n\nfrom scipy.interpolate import griddata\n\n# Import utility functions and variables from 'snowcast_utils'\nfrom snowcast_utils import data_dir, work_dir, plot_dir, output_dir, test_start_date, test_end_date,process_dates_in_range\n\n# Define a custom colormap with specified colors and ranges\ncolors = [\n    (0.8627, 0.8627, 0.8627),  # #DCDCDC - 0 - 1\n    (0.8627, 1.0000, 1.0000),  # #DCFFFF - 1 - 2\n    (0.6000, 1.0000, 1.0000),  # #99FFFF - 2 - 4\n    (0.5569, 0.8235, 1.0000),  # #8ED2FF - 4 - 6\n    (0.4509, 0.6196, 0.8745),  # #739EDF - 6 - 8\n    (0.4157, 0.4706, 1.0000),  # #6A78FF - 8 - 10\n    (0.4235, 0.2784, 1.0000),  # #6C47FF - 10 - 12\n    (0.5529, 0.0980, 1.0000),  # #8D19FF - 12 - 14\n    (0.7333, 0.0000, 0.9176),  # #BB00EA - 14 - 16\n    (0.8392, 0.0000, 0.7490),  # #D600BF - 16 - 18\n    (0.7569, 0.0039, 0.4549),  # #C10074 - 18 - 20\n    (0.6784, 0.0000, 0.1961),  # #AD0032 - 20 - 30\n    (0.5020, 0.0000, 0.0000)   # #800000 - > 30\n]\n\ncmap_name = 'custom_snow_colormap'\ncustom_cmap = mcolors.ListedColormap(colors)\n\nlon_min, lon_max = -125, -100\nlat_min, lat_max = 25, 49.5\n\n# Define value ranges for color mapping\nfixed_value_ranges = [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 30]\n\nimport os\nimport requests\nimport zipfile\n\ndef download_and_unzip_shapefile(url, output_dir):\n    \"\"\"\n    Download and unzip a shapefile from the given URL.\n\n    Args:\n        url (str): URL of the zip file containing the shapefile.\n        output_dir (str): Directory to save the downloaded file and its contents.\n\n    Returns:\n        str: Path to the extracted shapefile directory.\n    \"\"\"\n    # Ensure the output directory exists\n    os.makedirs(output_dir, exist_ok=True)\n\n    # Define the file paths\n    zip_file_path = os.path.join(output_dir, \"tl_2023_us_state.zip\")\n\n    print(f\"Step 1: Downloading shapefile from {url}...\")\n    # Download the zip file\n    response = requests.get(url, stream=True)\n    response.raise_for_status()  # Raise an error if the download fails\n    with open(zip_file_path, \"wb\") as file:\n        for chunk in response.iter_content(chunk_size=8192):\n            file.write(chunk)\n\n    print(f\"Step 2: Download complete. Saved to {zip_file_path}\")\n\n    # Extract the zip file\n    print(f\"Step 3: Extracting files to {output_dir}...\")\n    with zipfile.ZipFile(zip_file_path, \"r\") as zip_ref:\n        zip_ref.extractall(output_dir)\n\n    print(\"Step 4: Extraction complete.\")\n    return output_dir\n\ndef retrieve_state_boundary():\n    \"\"\"\n    Retrieve the state boundary shapefile.\n    Downloads and extracts the file only if it doesn't already exist.\n\n    Returns:\n        str: Absolute path to the main shapefile.\n    \"\"\"\n    # URL of the shapefile zip\n    shapefile_url = \"https://www2.census.gov/geo/tiger/TIGER2023/STATE/tl_2023_us_state.zip\"\n\n    # Output directory for the downloaded and extracted files\n    output_directory = os.path.join(data_dir, \"shapefiles\", \"tl_2023_us_state\")\n    os.makedirs(output_directory, exist_ok=True)\n\n    # Path to the main shapefile\n    shapefile_path = os.path.join(output_directory, \"tl_2023_us_state.shp\")\n\n    # Check if the shapefile already exists\n    if os.path.exists(shapefile_path):\n        print(f\"Shapefile already exists at: {shapefile_path}. Skipping download.\")\n    else:\n        print(\"Shapefile not found. Downloading...\")\n        # Download and unzip the shapefile\n        extracted_dir = download_and_unzip_shapefile(shapefile_url, output_directory)\n        print(f\"Shapefile extracted to: {extracted_dir}\")\n    \n    return os.path.abspath(shapefile_path)\n\n# Define the lat_lon_to_map_coordinates function\ndef lat_lon_to_map_coordinates(lon, lat, m):\n    \"\"\"\n    Convert latitude and longitude coordinates to map coordinates.\n\n    Args:\n        lon (float or array-like): Longitude coordinate(s).\n        lat (float or array-like): Latitude coordinate(s).\n        m (Basemap): Basemap object representing the map projection.\n\n    Returns:\n        tuple: Tuple containing the converted map coordinates (x, y).\n    \"\"\"\n    x, y = m(lon, lat)\n    return x, y\n\n\n\ndef create_color_maps_with_value_range(df_col, value_ranges=None):\n    \"\"\"\n    Create a colormap for value ranges and map data values to colors.\n\n    Args:\n        df_col (pd.Series): A Pandas Series containing data values.\n        value_ranges (list, optional): A list of value ranges for color mapping.\n            If not provided, the ranges will be determined automatically.\n\n    Returns:\n        tuple: Tuple containing the color mapping and the updated value ranges.\n    \"\"\"\n    new_value_ranges = value_ranges\n    if value_ranges is None:\n        max_value = df_col.max()\n        min_value = df_col.min()\n        if min_value < 0:\n            min_value = 0\n        step_size = (max_value - min_value) / 12\n\n        # Create 10 periods\n        new_value_ranges = [min_value + i * step_size for i in range(12)]\n    \n    #print(\"new_value_ranges: \", new_value_ranges)\n  \n    # Define a custom function to map data values to colors\n    def map_value_to_color(value):\n        # Iterate through the value ranges to find the appropriate color index\n        for i, range_max in enumerate(new_value_ranges):\n            if value <= range_max:\n                return colors[i]\n\n        # If the value is greater than the largest range, return the last color\n        return colors[-1]\n\n    # Map predicted_swe values to colors using the custom function\n    color_mapping = [map_value_to_color(value) for value in df_col.values]\n    return color_mapping, new_value_ranges\n\ndef convert_csvs_to_images(input_csv: str = None, new_plot_path: str = None):\n    \"\"\"\n    Convert CSV data to images with color-coded SWE predictions.\n\n    Returns:\n        None\n    \"\"\"\n    global fixed_value_ranges\n    if input_csv is None:\n        input_csv = f\"{work_dir}/test_data_predicted_n97KJ.csv\"\n    \n    data = pd.read_csv(input_csv)\n    print(\"statistic of predicted_swe: \", data['predicted_swe'].describe())\n    data['predicted_swe'].fillna(0, inplace=True)\n    \n    for column in data.columns:\n        column_data = data[column]\n        print(column_data.describe())\n    \n    # Create a figure with a white background\n    fig = plt.figure(facecolor='white')\n\n    \n\n    m = Basemap(llcrnrlon=lon_min, llcrnrlat=lat_min, urcrnrlon=lon_max, urcrnrlat=lat_max,\n                projection='merc', resolution='i')\n\n    if \"Latitude\" in data.columns and \"Longitude\" in data.columns:\n        data.rename(columns={\"Latitude\": \"lat\", \"Longitude\": \"lon\"}, inplace=True)\n\n    x, y = m(data['lon'].values, data['lat'].values)\n    print(data.columns)\n\n    color_mapping, value_ranges = create_color_maps_with_value_range(data[\"predicted_swe\"], fixed_value_ranges)\n    \n    # Plot the data using the custom colormap\n    plt.scatter(x, y, c=color_mapping, cmap=custom_cmap, s=30, edgecolors='none', alpha=0.7)\n    \n    # Draw coastlines and other map features\n    m.drawcoastlines()\n    m.drawcountries()\n    m.drawstates()\n\n    reference_date = datetime(1900, 1, 1)\n    day_value = day_index\n    \n    result_date = reference_date + timedelta(days=day_value)\n    today = result_date.strftime(\"%Y-%m-%d\")\n    timestamp_string = result_date.strftime(\"%Y-%m-%d\")\n    \n    # Add a title\n    plt.title(f'Predicted SWE in the Western US - {today}', pad=20)\n\n    # Add labels for latitude and longitude on x and y axes with smaller font size\n    plt.xlabel('Longitude', fontsize=6)\n    plt.ylabel('Latitude', fontsize=6)\n\n    # Add longitude values to the x-axis and adjust font size\n    x_ticks_labels = np.arange(lon_min, lon_max + 5, 5)\n    x_tick_labels_str = [f\"{lon:.1f}??W\" if lon < 0 else f\"{lon:.1f}??E\" for lon in x_ticks_labels]\n    plt.xticks(*m(x_ticks_labels, [lat_min] * len(x_ticks_labels)), fontsize=6)\n    plt.gca().set_xticklabels(x_tick_labels_str)\n\n    # Add latitude values to the y-axis and adjust font size\n    y_ticks_labels = np.arange(lat_min, lat_max + 5, 5)\n    y_tick_labels_str = [f\"{lat:.1f}??N\" if lat >= 0 else f\"{abs(lat):.1f}??S\" for lat in y_ticks_labels]\n    plt.yticks(*m([lon_min] * len(y_ticks_labels), y_ticks_labels), fontsize=6)\n    plt.gca().set_yticklabels(y_tick_labels_str)\n\n    # Convert map coordinates to latitude and longitude for y-axis labels\n    y_tick_positions = np.linspace(lat_min, lat_max, len(y_ticks_labels))\n    y_tick_positions_map_x, y_tick_positions_map_y = lat_lon_to_map_coordinates([lon_min] * len(y_ticks_labels), y_tick_positions, m)\n    y_tick_positions_lat, _ = m(y_tick_positions_map_x, y_tick_positions_map_y, inverse=True)\n    y_tick_positions_lat_str = [f\"{lat:.1f}??N\" if lat >= 0 else f\"{abs(lat):.1f}??S\" for lat in y_tick_positions_lat]\n    plt.yticks(y_tick_positions_map_y, y_tick_positions_lat_str, fontsize=6)\n\n    # Create custom legend elements using the same colormap\n    legend_elements = [Patch(color=colors[i], label=f\"{value_ranges[i]} - {value_ranges[i+1]-1}\" if i < len(value_ranges) - 1 else f\"> {value_ranges[-1]}\") for i in range(len(value_ranges))]\n\n    # Create the legend outside the map\n    legend = plt.legend(handles=legend_elements, loc='upper left', title='Legend', fontsize=8)\n    legend.set_bbox_to_anchor((1.01, 1)) \n\n    # Remove the color bar\n    #plt.colorbar().remove()\n\n    plt.text(0.98, 0.02, 'Copyright ?? SWE Wormhole Team',\n             horizontalalignment='right', verticalalignment='bottom',\n             transform=plt.gcf().transFigure, fontsize=6, color='black')\n\n    # Set the aspect ratio to 'equal' to keep the plot at the center\n    plt.gca().set_aspect('equal', adjustable='box')\n\n    # Adjust the bottom and top margins to create more white space between the title and the plot\n    plt.subplots_adjust(bottom=0.15, right=0.80)  # Adjust right margin to accommodate the legend\n    # Show the plot or save it to a file\n    if new_plot_path is None:\n        new_plot_path = f'{work_dir}/predicted_swe-{test_start_date}.png'\n    \n    print(f\"The new plot is saved to {new_plot_path}\")\n    plt.savefig(new_plot_path)\n    # plt.show()  # Uncomment this line if you want to display the plot directly instead of saving it to a file\n\ndef plot_all_variables_in_one_csv(csv_path, res_png_path, target_date = test_start_date):\n    result_var_df = pd.read_csv(csv_path)\n    # Convert the 'date' column to datetime\n    result_var_df['date'] = pd.to_datetime(result_var_df['date'])\n    result_var_df.rename(\n      columns={\n        'Latitude': 'lat', \n        'Longitude': 'lon',\n        'gridmet_lat': 'lat',\n        'gridmet_lon': 'lon',\n      }, \n      inplace=True)\n    \n  \t# Create subplots with a number of rows based on the number of columns in the DataFrame\n    \n    us_boundary = gpd.read_file(retrieve_state_boundary())\n    us_boundary_clipped = us_boundary.cx[lon_min:lon_max, lat_min:lat_max]\n\t\n    lat_col = result_var_df[[\"lat\"]]\n    lon_col = result_var_df[[\"lon\"]]\n    print(\"lat_col.values = \", lat_col[\"lat\"].values)\n#     if \"lat\" == column_name or \"lon\" == column_name or \"date\" == column_name:\n    columns_to_remove = [ \"date\", \"Latitude\", \"Longitude\", \"gridmet_lat\", \"gridmet_lon\", \"lat\", \"lon\"]\n\n    # Check if each column exists before removing it\n    for col in columns_to_remove:\n        if col in result_var_df.columns:\n            result_var_df = result_var_df.drop(columns=col)\n        else:\n            print(f\"Column '{col}' not found in DataFrame.\")\n    \n    print(\"result_var_df.shape: \", result_var_df.shape)\n    print(\"result_var_df.head: \", result_var_df.head())\n    \n    \n    num_columns = len(result_var_df.columns)  # don't plot lat and lon\n    fig_width = 7 * num_columns  # You can adjust this multiplier based on your preference\n    num_variables = len(result_var_df.columns)\n    num_cols = int(math.sqrt(num_variables))\n    num_rows = math.ceil(num_variables / num_cols)\n    fig, axes = plt.subplots(nrows=num_rows, ncols=num_cols, figsize=(num_cols*7, num_rows*6))\n    \n    \n    # Flatten the axes array to simplify indexing\n    axes = axes.flatten()\n    \n  \t# Plot each variable in a separate subplot\n    for i, column_name in enumerate(result_var_df.columns):\n  \t    print(f\"Plot {column_name}\")\n  \t    if column_name in [\"lat\", \"lon\"]:\n  \t        continue\n        \n        # Filter the DataFrame based on the target date\n  \t    result_var_df[column_name] = pd.to_numeric(result_var_df[column_name], errors='coerce')\n  \t    \n  \t    colormaplist, value_ranges = create_color_maps_with_value_range(result_var_df[column_name], fixed_value_ranges)\n  \t    scatter_plot = axes[i].scatter(\n            lon_col[\"lon\"].values, \n  \t        lat_col[\"lat\"].values, \n            label=column_name, \n            c=result_var_df[column_name], \n            cmap='viridis', \n              #s=200, \n            s=10, \n            marker='s',\n            edgecolor='none',\n        )\n        \n        # Add a colorbar\n  \t    cbar = plt.colorbar(scatter_plot, ax=axes[i])\n  \t    cbar.set_label(column_name)  # Label for the colorbar\n        \n        # Add boundary over the figure\n  \t    us_boundary_clipped.plot(ax=axes[i], color='none', edgecolor='black', linewidth=1)\n\n        # Add labels and a legend\n  \t    axes[i].set_xlabel('Longitude')\n  \t    axes[i].set_ylabel('Latitude')\n  \t    axes[i].set_title(column_name+\" - \"+target_date)  # You can include target_date if needed\n  \t    axes[i].legend(loc='lower left')\n    \n    # Remove any empty subplots\n    for i in range(num_variables, len(axes)):\n        fig.delaxes(axes[i])\n    \n    plt.tight_layout()\n    plt.savefig(res_png_path)\n    print(f\"test image is saved at {res_png_path}\")\n    plt.close()\n    \n    \ndef plot_all_variables_in_one_figure_for_date(target_date=test_start_date):\n  \tselected_date = datetime.strptime(target_date, \"%Y-%m-%d\")\n  \ttest_csv = f\"{output_dir}/test_data_predicted_latest.csv\"\n  \tres_png_path = f\"{plot_dir}/{str(selected_date.year)}_all_variables_{target_date}.png\"\n  \tplot_all_variables_in_one_csv(test_csv, res_png_path, target_date)\n    \ndef convert_csvs_to_images_simple(\n    target_date=test_start_date, \n    column_name = \"predicted_swe\", \n    test_csv: str = None,\n    res_png_path: str = None,\n):\n    \"\"\"\n    Convert CSV data to simple scatter plot images for predicted SWE.\n\n    Returns:\n        None\n    \"\"\"\n    \n    selected_date = datetime.strptime(target_date, \"%Y-%m-%d\")\n    var_name = column_name\n    if test_csv is None:\n        test_csv = f\"{output_dir}/test_data_predicted_latest_{target_date}.csv\"\n\n    # Extract the directory from the target path\n    target_plot_dir = os.path.dirname(test_csv)\n\n    # Create all layers of directories if they don't exist\n    os.makedirs(target_plot_dir, exist_ok=True)\n\n    if res_png_path is None:\n        res_png_path = f\"{plot_dir}/{str(selected_date.year)}_{var_name}_{target_date}.png\"\n    \n    result_var_df = pd.read_csv(test_csv)\n    # Convert the 'date' column to datetime\n    if 'date_x' in result_var_df.columns and 'date_y' in result_var_df.columns:\n        # Drop one of the date columns (let's drop 'date_y')\n        result_var_df.drop(columns=['date_y'], inplace=True)\n        \n        # Rename 'date_x' to 'date'\n        result_var_df.rename(columns={'date_x': 'date'}, inplace=True)\n    \n    if 'date' in result_var_df.columns:\n        result_var_df['date'] = pd.to_datetime(result_var_df['date'])\n\n    # Filter the DataFrame based on the target date\n    result_var_df[var_name] = pd.to_numeric(result_var_df[var_name], errors='coerce')\n    \n    colormaplist, value_ranges = create_color_maps_with_value_range(result_var_df[var_name], fixed_value_ranges)\n\n    if \"Latitude\" in result_var_df.columns and \"Longitude\" in result_var_df.columns:\n        result_var_df.rename(columns={\"Latitude\": \"lat\", \"Longitude\": \"lon\"}, inplace=True)\n\n    # Create a scatter plot\n    plt.scatter(result_var_df[\"lon\"].values, \n                result_var_df[\"lat\"].values, \n                label=column_name, \n                c=result_var_df[column_name], \n                cmap='viridis', \n                #s=200, \n                s=10, \n                marker='s',\n                edgecolor='none',\n               )\n\n    # Add a colorbar\n    cbar = plt.colorbar()\n    cbar.set_label(column_name)  # Label for the colorbar\n    \n    # Add labels and a legend\n    plt.xlabel('Longitude')\n    plt.ylabel('Latitude')\n    plt.title(f'{column_name} - {target_date}')\n    plt.legend(loc='lower left')\n    \n    us_boundary = gpd.read_file(retrieve_state_boundary())\n    us_boundary_clipped = us_boundary.cx[lon_min:lon_max, lat_min:lat_max]\n\n    us_boundary_clipped.plot(ax=plt.gca(), color='none', edgecolor='black', linewidth=1)\n\n    \n    plt.savefig(res_png_path)\n    print(f\"test image is saved at {res_png_path}\")\n    plt.close()\n\n\n# def convert_csv_to_geotiff(\n#     target_date = test_start_date, \n#     test_csv: str = None, \n#     target_geotiff_file: str = None\n# ):\n#     # Load your CSV file\n#     if test_csv is None:\n#         test_csv = f\"{output_dir}/test_data_predicted_latest_{target_date}.csv\"\n    \n#     result_var_df = pd.read_csv(test_csv)\n#     result_var_df.rename(\n#       columns={\n#         'Latitude': 'lat', \n#         'Longitude': 'lon',\n#         'gridmet_lat': 'lat',\n#         'gridmet_lon': 'lon',\n#       }, \n#       inplace=True)\n\n#     # Specify the output GeoTIFF file\n#     if target_geotiff_file is None:\n#         target_geotiff_file = f\"{output_dir}/swe_predicted_{target_date}.tif\"\n\n#     target_plot_dir = os.path.dirname(target_geotiff_file)\n\n#     # Create all layers of directories if they don't exist\n#     os.makedirs(target_plot_dir, exist_ok=True)\n\n#     df = result_var_df[[\"lat\", \"lon\", \"predicted_swe\"]]\n    \n#     # Extract latitude, longitude, and snow columns\n#     latitude = df['lat'].values\n#     longitude = df['lon'].values\n    \n#     swe = df['predicted_swe'].values\n    \n#     dem_file = f\"{data_dir}/srtm/dem_file.tif\"\n#     with rasterio.open(dem_file) as dataset:\n#         # Read the DEM data as a numpy array\n#         dem_data = dataset.read(1)\n#         # Print the shape of the raster data\n#         print(\"Shape of the raster data:\", dem_data.shape)\n\n#         # Print information about the raster dataset\n#         print(\"Raster Dataset Information:\")\n#         print(\"Driver:\", dataset.driver)\n#         print(\"CRS (Coordinate Reference System):\", dataset.crs)\n#         print(\"Transform (Affine Matrix):\", dataset.transform)\n#         print(\"Number of Bands:\", dataset.count)\n#         print(\"Data Type:\", dataset.dtypes[0])  # Assuming a single band, use [0]\n#         print(\"Nodata Value:\", dataset.nodatavals[0])  # Assuming a single band, use [0]\n#         # Read metadata from the original file\n#         meta = dataset.meta\n\n#         # Update metadata for the new data\n#         meta.update(dtype='float32', count=1)\n#         new_data = swe.reshape((666, 694))\n\n#         # Create a new GeoTIFF file for writing\n#         with rasterio.open(target_geotiff_file, 'w', **meta) as dst:\n#             # Write the new 2D array to the new GeoTIFF file\n#             dst.write(new_data, 1)\n        \n#     print(\"df['predicted_swe'].shape: \", df.shape)\n#     print(f\"GeoTIFF file '{target_geotiff_file}' created successfully.\")\n\ndef convert_csv_to_geotiff(\n    target_date,\n    test_csv: str = None,\n    target_geotiff_file: str = None,\n    output_dir: str = \".\",\n    resolution: float = 0.01,  # Define the grid resolution\n):\n    # Load your CSV file\n    if test_csv is None:\n        test_csv = f\"{output_dir}/test_data_predicted_latest_{target_date}.csv\"\n    \n    result_var_df = pd.read_csv(test_csv)\n    result_var_df.rename(\n        columns={\n            'Latitude': 'lat',\n            'Longitude': 'lon',\n            'gridmet_lat': 'lat',\n            'gridmet_lon': 'lon',\n        },\n        inplace=True\n    )\n\n    # Specify the output GeoTIFF file\n    if target_geotiff_file is None:\n        target_geotiff_file = f\"{output_dir}/swe_predicted_{target_date}.tif\"\n\n    target_plot_dir = os.path.dirname(target_geotiff_file)\n    os.makedirs(target_plot_dir, exist_ok=True)\n\n    # Extract latitude, longitude, and variable of interest\n    df = result_var_df[[\"lat\", \"lon\", \"predicted_swe\"]]\n    latitude = df['lat'].values\n    longitude = df['lon'].values\n    swe = df['predicted_swe'].values\n\n    # Define raster grid bounds and resolution\n    lat_min, lat_max = latitude.min(), latitude.max()\n    lon_min, lon_max = longitude.min(), longitude.max()\n\n    # Create the raster grid\n    lon_grid, lat_grid = np.meshgrid(\n        np.arange(lon_min, lon_max, resolution),\n        np.arange(lat_min, lat_max, resolution)\n    )\n\n    # Interpolate data to the grid\n    grid_swe = griddata(\n        (longitude, latitude),  # Input coordinates\n        swe,                   # Input values\n        (lon_grid, lat_grid),  # Grid coordinates\n        method='linear'        # Interpolation method: 'linear', 'nearest', 'cubic'\n    )\n\n    # Flip the grid vertically to align with raster conventions\n    grid_swe = np.flipud(grid_swe)\n\n    # Define transform for the raster\n    transform = from_origin(\n        lon_min, lat_max,  # Upper-left corner\n        resolution, resolution  # Pixel size\n    )\n\n    # Save the GeoTIFF\n    with rasterio.open(\n        target_geotiff_file,\n        'w',\n        driver='GTiff',\n        height=grid_swe.shape[0],\n        width=grid_swe.shape[1],\n        count=1,  # Number of bands\n        dtype=grid_swe.dtype,\n        crs=\"EPSG:4326\",  # WGS84 Latitude/Longitude\n        transform=transform\n    ) as dst:\n        dst.write(grid_swe, 1)  # Write the raster data to the first band\n\n    print(f\"GeoTIFF saved to {target_geotiff_file}\")\n\ndef process_swe_prediction(current_date):\n    \"\"\"\n    Example callback function to process SWE prediction for a specific date.\n\n    Args:\n        current_date (datetime): The date to process.\n        output_dir (str): Directory for output files.\n        plot_dir (str): Directory for plot files.\n    \"\"\"\n    current_date_str = current_date.strftime(\"%Y-%m-%d\")\n    test_csv = f\"{output_dir}/test_data_predicted_latest_{current_date_str}.csv\"\n\n    if not os.path.exists(test_csv):\n        print(f\"Warning: CSV for {current_date_str} is missing. Skipping this day.\")\n        return\n\n    # Example processing steps\n    convert_csvs_to_images_simple(current_date_str, test_csv=test_csv)\n    convert_csv_to_geotiff(\n        current_date_str,\n        test_csv=test_csv,\n        target_geotiff_file=f\"{output_dir}/swe_predicted_{current_date_str}.tif\",\n    )\n\n\nif __name__ == \"__main__\":\n    # Uncomment the function call you want to use:\n    #convert_csvs_to_images()\n    \n    #test_start_date = \"2022-10-09\"\n    process_dates_in_range(\n        # start_date=\"2025-01-14\",\n        # end_date=\"2025-01-14\",\n        start_date=test_start_date,\n        end_date=test_end_date,\n        callback=process_swe_prediction,\n    )\n\n",
  "history_output" : "/home/chetana\ntoday date = 2025-01-19\nStart day: 2025-01-12, End day: 2025-01-16\ntest start date:  2025-01-12\ntest end date:  2025-01-16\nProcessing date: 2025-01-12\nShapefile already exists at: /home/chetana/data/shapefiles/tl_2023_us_state/tl_2023_us_state.shp. Skipping download.\ntest image is saved at /home/chetana/plots//2025_predicted_swe_2025-01-12.png\nGeoTIFF saved to /home/chetana/data/output/swe_predicted_2025-01-12.tif\nProcessing date: 2025-01-13\nShapefile already exists at: /home/chetana/data/shapefiles/tl_2023_us_state/tl_2023_us_state.shp. Skipping download.\ntest image is saved at /home/chetana/plots//2025_predicted_swe_2025-01-13.png\nGeoTIFF saved to /home/chetana/data/output/swe_predicted_2025-01-13.tif\nProcessing date: 2025-01-14\nShapefile already exists at: /home/chetana/data/shapefiles/tl_2023_us_state/tl_2023_us_state.shp. Skipping download.\ntest image is saved at /home/chetana/plots//2025_predicted_swe_2025-01-14.png\nGeoTIFF saved to /home/chetana/data/output/swe_predicted_2025-01-14.tif\nProcessing date: 2025-01-15\nShapefile already exists at: /home/chetana/data/shapefiles/tl_2023_us_state/tl_2023_us_state.shp. Skipping download.\ntest image is saved at /home/chetana/plots//2025_predicted_swe_2025-01-15.png\nGeoTIFF saved to /home/chetana/data/output/swe_predicted_2025-01-15.tif\nProcessing date: 2025-01-16\nShapefile already exists at: /home/chetana/data/shapefiles/tl_2023_us_state/tl_2023_us_state.shp. Skipping download.\ntest image is saved at /home/chetana/plots//2025_predicted_swe_2025-01-16.png\nGeoTIFF saved to /home/chetana/data/output/swe_predicted_2025-01-16.tif\n",
  "history_begin_time" : 1737328550526,
  "history_end_time" : 1737328762743,
  "history_notes" : null,
  "history_process" : "2wkl6e",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "3n5j7cbdi4a",
  "history_input" : "import distutils.dir_util\nfrom snowcast_utils import work_dir, output_dir, plot_dir\nimport os\nimport shutil\nimport re\nimport pandas as pd\nfrom datetime import datetime\nimport time\n\n\nprint(\"move the plots and the results into the http folder\")\n\ndef copy_if_modified(source_file, destination_file):\n    if os.path.exists(destination_file):\n        source_modified_time = os.path.getmtime(source_file)\n        dest_modified_time = os.path.getmtime(destination_file)\n        \n        # If the source file is modified after the destination file\n        if source_modified_time > dest_modified_time:\n            shutil.copy(source_file, destination_file)\n            print(f'Copied: {source_file}')\n    else:\n        shutil.copy(source_file, destination_file)\n        print(f'Copied: {source_file}')\n\ndef create_mapserver_map_config(target_geotiff_file_path, force=False):\n  geotiff_file_name = os.path.basename(target_geotiff_file_path)\n  geotiff_mapserver_file_path = f\"/var/www/html/swe_forecasting/map/{geotiff_file_name}.map\"\n  \n  if os.path.exists(geotiff_mapserver_file_path) and not force:\n    print(f\"{geotiff_mapserver_file_path} already exists\")\n    return geotiff_mapserver_file_path\n  \n  # Define a regular expression pattern to match the date in the filename\n  pattern = r\"\\d{4}-\\d{2}-\\d{2}\"\n\n  # Use re.search to find the match\n  match = re.search(pattern, geotiff_file_name)\n\n  # Check if a match is found\n  if match:\n      date_string = match.group()\n      print(\"Date:\", date_string)\n  else:\n      print(\"No date found in the filename.\")\n      return f\"The file's name {target_geotiff_file} is wrong\"\n  \n  mapserver_config_content = f\"\"\"\nMAP\n  NAME \"swemap\"\n  STATUS ON\n  EXTENT -125 25 -100 49\n  SIZE 800 400\n  UNITS DD\n  SHAPEPATH \"/var/www/html/swe_forecasting/output/\"\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    IMAGEPATH \"/temp/\"\n    IMAGEURL \"/temp/\"\n    METADATA\n      \"wms_title\" \"SWE MapServer WMS\"\n      \"wms_onlineresource\" \"http://geobrain.csiss.gmu.edu/cgi-bin/mapserv?map=/var/www/html/swe_forecasting/output/swe.map&\"\n      WMS_ENABLE_REQUEST      \"*\"\n      WCS_ENABLE_REQUEST      \"*\"\n      \"wms_srs\" \"epsg:5070 epsg:4326 epsg:3857\"\n    END\n  END\n\n\n  LAYER\n    NAME \"predicted_swe_{date_string}\"\n    TYPE RASTER\n    STATUS DEFAULT\n    DATA \"{target_geotiff_file_path}\"\n\n    PROJECTION\n      \"init=epsg:4326\"\n    END\n\n    METADATA\n      \"wms_include_items\" \"all\"\n    END\n    PROCESSING \"NODATA=0\"\n    STATUS ON\n    DUMP TRUE\n    TYPE RASTER\n    OFFSITE 0 0 0\n    CLASSITEM \"[pixel]\"\n    TEMPLATE \"template.html\"\n    INCLUDE \"legend_swe.map\"\n  END\nEND\n\"\"\"\n  \n  with open(geotiff_mapserver_file_path, \"w\") as file:\n    file.write(mapserver_config_content)\n    \n  print(f\"Mapserver config is created at {geotiff_mapserver_file_path}\")\n  return geotiff_mapserver_file_path\n\ndef refresh_available_date_list():\n  \n  # Define columns for the DataFrame\n  columns = [\"date\", \"predicted_swe_url_prefix\"]\n\n  # Create an empty DataFrame with columns\n  df = pd.DataFrame(columns=columns)\n  \n  for filename in os.listdir(geotiff_destination_folder):\n    target_geotiff_file = os.path.join(geotiff_destination_folder, filename)\n    \n    date_str = re.search(r\"\\d{4}-\\d{2}-\\d{2}\", filename).group()\n    date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    \n    # # Append a new row to the DataFrame\n    # df = df.append({\n    #   \"date\": date, \n    #   \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    # }, ignore_index=True)\n    # Create a new DataFrame with the new row data\n    new_row = pd.DataFrame([{\n        \"date\": date, \n        \"predicted_swe_url_prefix\": f\"../swe_forecasting/output/{filename}\"\n    }])\n\n    # Use pd.concat to append the new row\n    df = pd.concat([df, new_row], ignore_index=True)\n  \n  # Save DataFrame to a CSV file\n  df.to_csv(\"/var/www/html/swe_forecasting/date_list.csv\", index=False)\n  print(\"directly write into the server file which might be used at the time might not be a good idea. \")\n\n  # Display the final DataFrame\n  print(df)\n  \n\n               \ndef copy_files_to_right_folder():\n  \n  # copy the variable comparison folder\n  source_folder = f\"{work_dir}/var_comparison/\"\n  figure_destination_folder = f\"/var/www/html/swe_forecasting/plots/\"\n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n\n  # Copy the folder with overwriting existing files/folders\n  distutils.dir_util.copy_tree(source_folder, figure_destination_folder, update=1)\n\n  print(f\"Folder '{source_folder}' copied to '{figure_destination_folder}' with overwriting.\")\n\n\n  # copy the png from testing_output to plots\n  source_folder = f\"{output_dir}/\"\n\n  # Ensure the destination folder exists, create it if necessary\n  if not os.path.exists(figure_destination_folder):\n    os.makedirs(figure_destination_folder)\n    \n  if not os.path.exists(geotiff_destination_folder):\n    os.makedirs(geotiff_destination_folder)\n\n  # Loop through the files in the source folder\n  for filename in os.listdir(source_folder):\n    # Check if the file is a PNG file\n    if filename.endswith('.png') or filename.endswith('.tif'):\n      # Build the source and destination file paths\n      source_file = os.path.join(source_folder, filename)\n      destination_file = os.path.join(figure_destination_folder, filename)\n\n      # Copy the file from the source to the destination\n      copy_if_modified(source_file, destination_file)\n      \n      # Copy the file to the output folder if it is geotif\n      if filename.endswith('.tif'):\n        output_dest_file = os.path.join(geotiff_destination_folder, filename)\n        copy_if_modified(source_file, output_dest_file)\n\n\nif __name__ == \"__main__\":\n  \n  geotiff_destination_folder = f\"/var/www/html/swe_forecasting/output/\"\n  copy_files_to_right_folder()\n  \n  # create mapserver config for all geotiff files in output folder\n  for filename in os.listdir(geotiff_destination_folder):\n    destination_file = os.path.join(geotiff_destination_folder, filename)\n    create_mapserver_map_config(destination_file, force=True)\n  print(\"Finished creation of all mapserver files.\")\n    \n  # refresh the output file list for the website to refresh its calendar\n  refresh_available_date_list()\n  print(\"All done\")\n  time.sleep(10)\n",
  "history_output" : "/home/chetana\ntoday date = 2025-01-19\nStart day: 2025-01-12, End day: 2025-01-16\ntest start date:  2025-01-12\ntest end date:  2025-01-16\nmove the plots and the results into the http folder\nFolder '/home/chetana/data/gridmet_test_run/var_comparison/' copied to '/var/www/html/swe_forecasting/plots/' with overwriting.\nCopied: /home/chetana/data/output/swe_predicted_2025-01-14.tif\nCopied: /home/chetana/data/output/swe_predicted_2025-01-14.tif\nCopied: /home/chetana/data/output/swe_predicted_2025-01-13.tif\nCopied: /home/chetana/data/output/swe_predicted_2025-01-13.tif\nCopied: /home/chetana/data/output/swe_predicted_2025-01-15.tif\nCopied: /home/chetana/data/output/swe_predicted_2025-01-15.tif\nCopied: /home/chetana/data/output/swe_predicted_2025-01-16.tif\nCopied: /home/chetana/data/output/swe_predicted_2025-01-16.tif\nCopied: /home/chetana/data/output/swe_predicted_2025-01-12.tif\nCopied: /home/chetana/data/output/swe_predicted_2025-01-12.tif\nDate: 2024-09-12\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-12.tif.map\nDate: 2024-06-15\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-15.tif.map\nDate: 2024-11-02\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-02.tif.map\nDate: 2023-11-15\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-15.tif.map\nDate: 2024-09-29\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-29.tif.map\nDate: 2024-06-19\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-19.tif.map\nDate: 2024-04-22\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-22.tif.map\nDate: 2025-01-09\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2025-01-09.tif.map\nDate: 2024-04-03\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-03.tif.map\nDate: 2024-05-15\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-15.tif.map\nDate: 2024-04-18\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-18.tif.map\nDate: 2024-02-10\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-10.tif.map\nDate: 2024-05-16\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-16.tif.map\nDate: 2024-06-07\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-07.tif.map\nDate: 2024-06-25\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-25.tif.map\nDate: 2024-07-17\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-17.tif.map\nDate: 2024-08-19\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-19.tif.map\nDate: 2024-11-17\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-17.tif.map\nDate: 2024-10-21\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-21.tif.map\nDate: 2024-04-13\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-13.tif.map\nDate: 2023-12-21\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-21.tif.map\nDate: 2023-10-06\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-06.tif.map\nDate: 2024-01-16\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-16.tif.map\nDate: 2023-12-11\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-11.tif.map\nDate: 2024-02-06\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-06.tif.map\nDate: 2024-05-01\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-01.tif.map\nDate: 2022-10-11\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2022-10-11.tif.map\nDate: 2024-03-08\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-08.tif.map\nDate: 2024-09-10\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-10.tif.map\nDate: 2024-08-22\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-22.tif.map\nDate: 2024-04-28\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-28.tif.map\nDate: 2024-06-13\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-13.tif.map\nDate: 2024-02-15\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-15.tif.map\nDate: 2023-11-09\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-09.tif.map\nDate: 2024-04-26\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-26.tif.map\nDate: 2024-03-14\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-14.tif.map\nDate: 2024-05-04\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-04.tif.map\nDate: 2024-08-06\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-06.tif.map\nDate: 2024-02-24\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-24.tif.map\nDate: 2024-07-24\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-24.tif.map\nDate: 2024-11-07\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-07.tif.map\nDate: 2024-02-02\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-02.tif.map\nDate: 2024-11-20\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-20.tif.map\nDate: 2024-11-08\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-08.tif.map\nDate: 2024-11-01\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-01.tif.map\nDate: 2024-11-16\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-16.tif.map\nDate: 2024-05-21\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-21.tif.map\nDate: 2024-09-08\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-08.tif.map\nDate: 2024-07-02\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-02.tif.map\nDate: 2023-12-27\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-27.tif.map\nDate: 2023-10-30\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-30.tif.map\nDate: 2023-11-06\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-06.tif.map\nDate: 2024-10-03\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-03.tif.map\nDate: 2024-09-02\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-02.tif.map\nDate: 2024-10-27\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-27.tif.map\nDate: 2024-11-27\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-27.tif.map\nDate: 2024-02-05\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-05.tif.map\nDate: 2024-07-10\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-10.tif.map\nDate: 2023-10-26\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-26.tif.map\nDate: 2023-12-24\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-24.tif.map\nDate: 2024-08-10\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-10.tif.map\nDate: 2024-06-30\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-30.tif.map\nDate: 2023-11-23\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-23.tif.map\nDate: 2023-12-13\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-13.tif.map\nDate: 2024-01-14\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-14.tif.map\nDate: 2024-04-21\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-21.tif.map\nDate: 2024-10-15\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-15.tif.map\nDate: 2024-04-27\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-27.tif.map\nDate: 2024-07-25\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-25.tif.map\nDate: 2024-12-24\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-12-24.tif.map\nDate: 2024-11-19\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-19.tif.map\nDate: 2025-01-14\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2025-01-14.tif.map\nDate: 2024-07-26\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-26.tif.map\nDate: 2024-01-11\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-11.tif.map\nDate: 2024-07-29\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-29.tif.map\nDate: 2024-08-25\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-25.tif.map\nDate: 2024-01-13\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-13.tif.map\nDate: 2024-07-14\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-14.tif.map\nDate: 2024-01-05\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-05.tif.map\nDate: 2023-12-31\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-31.tif.map\nDate: 2024-06-01\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-01.tif.map\nDate: 2023-11-12\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-12.tif.map\nDate: 2023-11-19\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-19.tif.map\nDate: 2023-10-05\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-05.tif.map\nDate: 2023-12-18\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-18.tif.map\nDate: 2024-12-20\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-12-20.tif.map\nDate: 2023-11-16\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-16.tif.map\nDate: 2024-09-05\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-05.tif.map\nDate: 2024-10-26\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-26.tif.map\nDate: 2023-12-17\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-17.tif.map\nDate: 2024-05-27\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-27.tif.map\nDate: 2024-12-18\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-12-18.tif.map\nDate: 2024-10-30\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-30.tif.map\nDate: 2024-06-28\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-28.tif.map\nDate: 2023-11-25\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-25.tif.map\nDate: 2024-06-06\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-06.tif.map\nDate: 2024-04-19\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-19.tif.map\nDate: 2024-10-29\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-29.tif.map\nDate: 2024-10-28\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-28.tif.map\nDate: 2023-10-01\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-01.tif.map\nDate: 2024-11-03\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-03.tif.map\nDate: 2024-10-24\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-24.tif.map\nDate: 2024-03-20\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-20.tif.map\nDate: 2024-12-15\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-12-15.tif.map\nDate: 2025-01-08\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2025-01-08.tif.map\nDate: 2024-09-16\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-16.tif.map\nDate: 2024-01-25\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-25.tif.map\nDate: 2024-07-27\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-27.tif.map\nDate: 2024-09-18\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-18.tif.map\nDate: 2024-01-30\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-30.tif.map\nDate: 2023-10-13\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-13.tif.map\nDate: 2024-03-12\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-12.tif.map\nDate: 2023-11-29\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-29.tif.map\nDate: 2024-03-24\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-24.tif.map\nDate: 2023-10-17\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-17.tif.map\nDate: 2024-08-26\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-26.tif.map\nDate: 2024-09-03\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-03.tif.map\nDate: 2024-02-13\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-13.tif.map\nDate: 2024-12-03\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-12-03.tif.map\nDate: 2024-07-11\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-11.tif.map\nDate: 2024-11-23\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-23.tif.map\nDate: 2023-10-10\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-10.tif.map\nDate: 2024-08-01\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-01.tif.map\nDate: 2024-07-31\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-31.tif.map\nDate: 2024-06-17\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-17.tif.map\nDate: 2024-09-13\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-13.tif.map\nDate: 2024-08-27\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-27.tif.map\nDate: 2024-08-04\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-04.tif.map\nDate: 2024-08-03\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-03.tif.map\nDate: 2024-10-05\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-05.tif.map\nDate: 2024-10-20\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-20.tif.map\nDate: 2024-03-11\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-11.tif.map\nDate: 2024-05-26\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-26.tif.map\nDate: 2024-06-08\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-08.tif.map\nDate: 2024-09-23\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-23.tif.map\nDate: 2024-03-02\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-02.tif.map\nDate: 2023-10-11\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-11.tif.map\nDate: 2022-12-07\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2022-12-07.tif.map\nDate: 2024-07-18\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-18.tif.map\nDate: 2024-08-17\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-17.tif.map\nDate: 2024-09-28\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-28.tif.map\nDate: 2024-07-16\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-16.tif.map\nDate: 2024-06-24\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-24.tif.map\nDate: 2024-04-14\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-14.tif.map\nDate: 2020-07-01\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2020-07-01.tif.map\nDate: 2023-11-22\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-22.tif.map\nDate: 2024-01-17\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-17.tif.map\nDate: 2024-06-18\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-18.tif.map\nDate: 2024-05-03\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-03.tif.map\nDate: 2024-09-15\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-15.tif.map\nDate: 2024-04-29\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-29.tif.map\nDate: 2024-04-15\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-15.tif.map\nDate: 2024-09-07\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-07.tif.map\nDate: 2024-02-04\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-04.tif.map\nDate: 2024-08-07\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-07.tif.map\nDate: 2024-05-25\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-25.tif.map\nDate: 2023-10-25\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-25.tif.map\nDate: 2024-01-20\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-20.tif.map\nDate: 2024-01-15\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-15.tif.map\nDate: 2024-06-09\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-09.tif.map\nDate: 2023-10-09\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-09.tif.map\nDate: 2024-05-08\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-08.tif.map\nDate: 2024-11-05\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-05.tif.map\nDate: 2023-10-31\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-31.tif.map\nDate: 2024-06-22\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-22.tif.map\nDate: 2024-07-30\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-30.tif.map\nDate: 2024-04-01\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-01.tif.map\nDate: 2023-10-19\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-19.tif.map\nDate: 2024-10-09\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-09.tif.map\nDate: 2023-11-01\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-01.tif.map\nDate: 2023-10-28\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-28.tif.map\nDate: 2024-02-23\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-23.tif.map\nDate: 2024-09-26\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-26.tif.map\nDate: 2024-07-07\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-07.tif.map\nDate: 2024-06-20\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-20.tif.map\nDate: 2024-04-10\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-10.tif.map\nDate: 2024-05-18\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-18.tif.map\nDate: 2024-12-05\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-12-05.tif.map\nDate: 2024-01-19\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-19.tif.map\nDate: 2023-12-20\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-20.tif.map\nDate: 2024-11-14\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-14.tif.map\nDate: 2025-01-05\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2025-01-05.tif.map\nDate: 2023-10-23\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-23.tif.map\nDate: 2023-10-29\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-29.tif.map\nDate: 2024-02-19\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-19.tif.map\nDate: 2024-11-06\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-06.tif.map\nDate: 2024-12-14\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-12-14.tif.map\nDate: 2024-03-27\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-27.tif.map\nDate: 2023-11-13\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-13.tif.map\nDate: 2024-10-10\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-10.tif.map\nDate: 2024-01-09\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-09.tif.map\nDate: 2024-02-07\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-07.tif.map\nDate: 2024-01-12\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-12.tif.map\nDate: 2024-11-30\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-30.tif.map\nDate: 2024-12-06\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-12-06.tif.map\nDate: 2022-12-23\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2022-12-23.tif.map\nDate: 2024-12-01\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-12-01.tif.map\nDate: 2024-02-11\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-11.tif.map\nDate: 2023-10-16\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-16.tif.map\nDate: 2024-06-16\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-16.tif.map\nDate: 2024-05-13\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-13.tif.map\nDate: 2024-08-29\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-29.tif.map\nDate: 2023-12-08\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-08.tif.map\nDate: 2023-10-07\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-07.tif.map\nDate: 2023-10-22\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-22.tif.map\nDate: 2023-11-04\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-04.tif.map\nDate: 2024-06-11\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-11.tif.map\nDate: 2023-10-27\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-27.tif.map\nDate: 2024-05-05\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-05.tif.map\nDate: 2025-01-06\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2025-01-06.tif.map\nDate: 2024-01-31\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-31.tif.map\nDate: 2023-12-12\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-12.tif.map\nDate: 2024-02-21\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-21.tif.map\nDate: 2023-12-26\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-26.tif.map\nDate: 2024-01-18\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-18.tif.map\nDate: 2024-01-23\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-23.tif.map\nDate: 2024-04-09\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-09.tif.map\nDate: 2024-10-25\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-25.tif.map\nDate: 2024-10-16\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-16.tif.map\nDate: 2022-11-11\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2022-11-11.tif.map\nDate: 2025-01-10\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2025-01-10.tif.map\nDate: 2023-12-29\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-29.tif.map\nDate: 2024-03-05\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-05.tif.map\nDate: 2023-12-22\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-22.tif.map\nDate: 2024-08-23\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-23.tif.map\nDate: 2024-12-04\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-12-04.tif.map\nDate: 2023-11-02\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-02.tif.map\nDate: 2024-05-10\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-10.tif.map\nDate: 2024-11-21\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-21.tif.map\nDate: 2024-10-13\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-13.tif.map\nDate: 2024-03-22\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-22.tif.map\nDate: 2024-11-04\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-04.tif.map\nDate: 2023-12-30\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-30.tif.map\nDate: 2023-01-20\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-01-20.tif.map\nDate: 2024-11-09\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-09.tif.map\nDate: 2024-01-21\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-21.tif.map\nDate: 2023-12-01\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-01.tif.map\nDate: 2023-12-07\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-07.tif.map\nDate: 2024-03-03\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-03.tif.map\nDate: 2024-11-24\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-24.tif.map\nDate: 2024-09-09\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-09.tif.map\nDate: 2024-12-22\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-12-22.tif.map\nDate: 2024-07-01\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-01.tif.map\nDate: 2024-01-08\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-08.tif.map\nDate: 2024-08-21\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-21.tif.map\nDate: 2023-11-17\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-17.tif.map\nDate: 2024-10-23\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-23.tif.map\nDate: 2024-04-06\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-06.tif.map\nDate: 2024-07-21\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-21.tif.map\nDate: 2024-03-09\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-09.tif.map\nDate: 2024-09-06\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-06.tif.map\nDate: 2024-07-04\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-04.tif.map\nDate: 2023-05-10\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-05-10.tif.map\nDate: 2024-09-04\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-04.tif.map\nDate: 2024-01-02\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-02.tif.map\nDate: 2024-03-25\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-25.tif.map\nDate: 2024-06-14\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-14.tif.map\nDate: 2024-02-17\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-17.tif.map\nDate: 2024-01-10\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-10.tif.map\nDate: 2023-12-28\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-28.tif.map\nDate: 2024-03-04\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-04.tif.map\nDate: 2023-10-08\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-08.tif.map\nDate: 2023-12-15\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-15.tif.map\nDate: 2024-01-29\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-29.tif.map\nDate: 2024-10-18\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-18.tif.map\nDate: 2024-07-19\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-19.tif.map\nDate: 2024-05-24\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-24.tif.map\nDate: 2024-05-30\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-30.tif.map\nDate: 2024-01-26\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-26.tif.map\nDate: 2024-07-09\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-09.tif.map\nDate: 2024-09-22\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-22.tif.map\nDate: 2024-09-25\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-25.tif.map\nDate: 2024-04-30\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-30.tif.map\nDate: 2024-09-30\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-30.tif.map\nDate: 2023-10-24\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-24.tif.map\nDate: 2024-09-01\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-01.tif.map\nDate: 2024-06-26\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-26.tif.map\nDate: 2024-06-21\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-21.tif.map\nDate: 2024-03-18\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-18.tif.map\nDate: 2024-07-06\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-06.tif.map\nDate: 2024-01-07\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-07.tif.map\nDate: 2023-12-16\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-16.tif.map\nDate: 2024-10-14\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-14.tif.map\nDate: 2024-03-01\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-01.tif.map\nDate: 2022-11-25\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2022-11-25.tif.map\nDate: 2024-10-17\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-17.tif.map\nDate: 2024-05-14\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-14.tif.map\nDate: 2024-06-27\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-27.tif.map\nDate: 2024-06-04\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-04.tif.map\nDate: 2023-06-11\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-06-11.tif.map\nDate: 2024-08-15\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-15.tif.map\nDate: 2024-07-13\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-13.tif.map\nDate: 2024-11-22\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-22.tif.map\nDate: 2024-07-28\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-28.tif.map\nDate: 2024-09-27\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-27.tif.map\nDate: 2022-10-10\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2022-10-10.tif.map\nDate: 2024-08-13\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-13.tif.map\nDate: 2024-08-09\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-09.tif.map\nDate: 2023-10-04\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-04.tif.map\nDate: 2024-08-20\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-20.tif.map\nDate: 2023-10-14\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-14.tif.map\nDate: 2023-10-21\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-21.tif.map\nDate: 2024-03-17\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-17.tif.map\nDate: 2024-02-03\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-03.tif.map\nDate: 2024-07-05\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-05.tif.map\nDate: 2024-04-20\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-20.tif.map\nDate: 2024-05-28\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-28.tif.map\nDate: 2024-05-23\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-23.tif.map\nDate: 2024-10-12\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-12.tif.map\nDate: 2024-03-30\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-30.tif.map\nDate: 2023-12-14\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-14.tif.map\nDate: 2024-05-09\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-09.tif.map\nDate: 2024-04-17\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-17.tif.map\nDate: 2024-04-08\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-08.tif.map\nDate: 2024-08-02\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-02.tif.map\nDate: 2024-05-20\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-20.tif.map\nDate: 2024-03-16\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-16.tif.map\nDate: 2024-01-24\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-24.tif.map\nDate: 2023-11-08\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-08.tif.map\nDate: 2024-09-21\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-21.tif.map\nDate: 2024-07-08\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-08.tif.map\nDate: 2024-05-11\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-11.tif.map\nDate: 2024-04-23\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-23.tif.map\nDate: 2024-03-29\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-29.tif.map\nDate: 2024-07-23\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-23.tif.map\nDate: 2024-12-16\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-12-16.tif.map\nDate: 2024-11-18\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-18.tif.map\nDate: 2023-10-18\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-18.tif.map\nDate: 2024-09-19\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-19.tif.map\nDate: 2024-06-05\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-05.tif.map\nDate: 2024-01-27\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-27.tif.map\nDate: 2023-12-06\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-06.tif.map\nDate: 2024-08-18\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-18.tif.map\nDate: 2024-02-08\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-08.tif.map\nDate: 2024-12-08\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-12-08.tif.map\nDate: 2024-11-25\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-25.tif.map\nDate: 2024-03-10\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-10.tif.map\nDate: 2024-08-08\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-08.tif.map\nDate: 2024-02-12\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-12.tif.map\nDate: 2024-08-05\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-05.tif.map\nDate: 2024-10-11\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-11.tif.map\nDate: 2024-03-23\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-23.tif.map\nDate: 2023-12-25\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-25.tif.map\nDate: 2024-02-09\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-09.tif.map\nDate: 2025-01-11\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2025-01-11.tif.map\nDate: 2024-10-06\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-06.tif.map\nDate: 2024-09-20\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-20.tif.map\nDate: 2023-11-24\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-24.tif.map\nDate: 2024-08-28\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-28.tif.map\nDate: 2024-03-31\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-31.tif.map\nDate: 2024-09-17\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-17.tif.map\nDate: 2024-12-17\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-12-17.tif.map\nDate: 2023-11-21\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-21.tif.map\nDate: 2024-11-11\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-11.tif.map\nDate: 2024-02-28\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-28.tif.map\nDate: 2024-06-02\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-02.tif.map\nDate: 2024-08-31\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-31.tif.map\nDate: 2023-11-14\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-14.tif.map\nDate: 2025-01-13\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2025-01-13.tif.map\nDate: 2023-12-23\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-23.tif.map\nDate: 2024-05-31\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-31.tif.map\nDate: 2024-04-25\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-25.tif.map\nDate: 2022-10-20\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2022-10-20.tif.map\nDate: 2024-07-15\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-15.tif.map\nDate: 2024-02-01\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-01.tif.map\nDate: 2024-08-30\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-30.tif.map\nDate: 2024-02-26\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-26.tif.map\nDate: 2023-12-04\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-04.tif.map\nDate: 2023-12-02\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-02.tif.map\nDate: 2024-05-06\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-06.tif.map\nDate: 2024-07-12\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-12.tif.map\nDate: 2024-03-06\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-06.tif.map\nDate: 2023-11-03\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-03.tif.map\nDate: 2024-08-14\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-14.tif.map\nDate: 2024-11-10\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-10.tif.map\nDate: 2023-11-05\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-05.tif.map\nDate: 2023-11-20\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-20.tif.map\nDate: 2024-04-12\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-12.tif.map\nDate: 2024-04-24\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-24.tif.map\nDate: 2024-02-16\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-16.tif.map\nDate: 2023-10-20\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-20.tif.map\nDate: 2024-02-22\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-22.tif.map\nDate: 2024-03-15\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-15.tif.map\nDate: 2024-03-19\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-19.tif.map\nDate: 2023-12-10\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-10.tif.map\nDate: 2024-11-28\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-28.tif.map\nDate: 2023-05-11\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-05-11.tif.map\nDate: 2024-02-18\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-18.tif.map\nDate: 2024-01-01\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-01.tif.map\nDate: 2023-10-03\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-03.tif.map\nDate: 2024-04-16\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-16.tif.map\nDate: 2023-11-30\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-30.tif.map\nDate: 2024-06-29\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-29.tif.map\nDate: 2024-04-05\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-05.tif.map\nDate: 2024-03-21\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-21.tif.map\nDate: 2024-11-26\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-26.tif.map\nDate: 2023-12-19\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-19.tif.map\nDate: 2024-06-10\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-10.tif.map\nDate: 2023-11-07\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-07.tif.map\nDate: 2024-08-24\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-24.tif.map\nDate: 2024-07-20\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-20.tif.map\nDate: 2024-01-06\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-06.tif.map\nDate: 2024-07-22\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-22.tif.map\nDate: 2024-12-19\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-12-19.tif.map\nDate: 2023-11-28\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-28.tif.map\nDate: 2024-06-03\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-03.tif.map\nDate: 2024-03-13\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-13.tif.map\nDate: 2024-08-12\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-12.tif.map\nDate: 2024-01-28\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-28.tif.map\nDate: 2025-01-15\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2025-01-15.tif.map\nDate: 2024-01-22\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-22.tif.map\nDate: 2024-04-02\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-02.tif.map\nDate: 2024-01-04\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-04.tif.map\nDate: 2024-07-03\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-07-03.tif.map\nDate: 2024-10-19\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-19.tif.map\nDate: 2024-03-26\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-26.tif.map\nDate: 2024-02-20\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-20.tif.map\nDate: 2024-02-14\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-14.tif.map\nDate: 2024-05-02\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-02.tif.map\nDate: 2024-08-16\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-16.tif.map\nDate: 2024-10-31\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-31.tif.map\nDate: 2024-03-07\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-07.tif.map\nDate: 2024-05-17\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-17.tif.map\nDate: 2024-02-27\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-27.tif.map\nDate: 2024-01-03\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-01-03.tif.map\nDate: 2024-10-22\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-22.tif.map\nDate: 2024-05-19\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-19.tif.map\nDate: 2023-10-15\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-15.tif.map\nDate: 2023-12-03\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-03.tif.map\nDate: 2023-11-18\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-18.tif.map\nDate: 2023-10-02\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-02.tif.map\nDate: 2024-04-04\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-04.tif.map\nDate: 2024-09-11\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-11.tif.map\nDate: 2024-02-29\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-29.tif.map\nDate: 2023-11-26\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-26.tif.map\nDate: 2024-05-07\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-07.tif.map\nDate: 2024-04-07\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-07.tif.map\nDate: 2024-04-11\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-04-11.tif.map\nDate: 2023-10-12\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-10-12.tif.map\nDate: 2024-11-29\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-29.tif.map\nDate: 2023-11-27\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-27.tif.map\nDate: 2024-10-01\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-01.tif.map\nDate: 2024-06-12\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-12.tif.map\nDate: 2024-06-23\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-06-23.tif.map\nDate: 2023-12-09\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-09.tif.map\nDate: 2024-03-28\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-03-28.tif.map\nDate: 2024-05-22\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-22.tif.map\nDate: 2024-02-25\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-02-25.tif.map\nDate: 2024-12-21\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-12-21.tif.map\nDate: 2024-10-02\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-02.tif.map\nDate: 2024-10-08\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-08.tif.map\nDate: 2024-09-24\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-24.tif.map\nDate: 2024-05-12\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-12.tif.map\nDate: 2023-11-10\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-10.tif.map\nDate: 2024-05-29\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-05-29.tif.map\nDate: 2024-11-12\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-12.tif.map\nDate: 2025-01-07\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2025-01-07.tif.map\nDate: 2024-08-11\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-08-11.tif.map\nDate: 2025-01-16\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2025-01-16.tif.map\nDate: 2023-12-05\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-12-05.tif.map\nDate: 2024-11-13\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-13.tif.map\nDate: 2024-12-23\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-12-23.tif.map\nDate: 2024-09-14\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-09-14.tif.map\nDate: 2024-11-15\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-11-15.tif.map\nDate: 2024-10-04\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2024-10-04.tif.map\nDate: 2023-11-11\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2023-11-11.tif.map\nDate: 2025-01-12\nMapserver config is created at /var/www/html/swe_forecasting/map/swe_predicted_2025-01-12.tif.map\nFinished creation of all mapserver files.\n/home/chetana/gw-workspace/3n5j7cbdi4a/deploy_images_to_website.py:131: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.\n  df = pd.concat([df, new_row], ignore_index=True)\ndirectly write into the server file which might be used at the time might not be a good idea. \n          date                           predicted_swe_url_prefix\n0   2024-09-12  ../swe_forecasting/output/swe_predicted_2024-0...\n1   2024-06-15  ../swe_forecasting/output/swe_predicted_2024-0...\n2   2024-11-02  ../swe_forecasting/output/swe_predicted_2024-1...\n3   2023-11-15  ../swe_forecasting/output/swe_predicted_2023-1...\n4   2024-09-29  ../swe_forecasting/output/swe_predicted_2024-0...\n..         ...                                                ...\n462 2024-09-14  ../swe_forecasting/output/swe_predicted_2024-0...\n463 2024-11-15  ../swe_forecasting/output/swe_predicted_2024-1...\n464 2024-10-04  ../swe_forecasting/output/swe_predicted_2024-1...\n465 2023-11-11  ../swe_forecasting/output/swe_predicted_2023-1...\n466 2025-01-12  ../swe_forecasting/output/swe_predicted_2025-0...\n[467 rows x 2 columns]\nAll done\n",
  "history_begin_time" : 1737328763350,
  "history_end_time" : 1737328776053,
  "history_notes" : null,
  "history_process" : "i2fynz",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "3bxmhlbhtuo",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097361,
  "history_end_time" : 1737328097361,
  "history_notes" : null,
  "history_process" : "2o6cp8",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "xs7dq3oc4l4",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097363,
  "history_end_time" : 1737328097363,
  "history_notes" : null,
  "history_process" : "0n26v2",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "zryet13r607",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097364,
  "history_end_time" : 1737328097364,
  "history_notes" : null,
  "history_process" : "rvqv35",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "m7f1ll547ka",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097375,
  "history_end_time" : 1737328097375,
  "history_notes" : null,
  "history_process" : "vo8bc9",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "lhglte18v8a",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097378,
  "history_end_time" : 1737328097378,
  "history_notes" : null,
  "history_process" : "6evkh4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "xsv9bu9fzf8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097380,
  "history_end_time" : 1737328097380,
  "history_notes" : null,
  "history_process" : "76ewp5",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "x3fabb4e110",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097383,
  "history_end_time" : 1737328097383,
  "history_notes" : null,
  "history_process" : "5wzgx5",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "2a4z98f0nqb",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097385,
  "history_end_time" : 1737328097385,
  "history_notes" : null,
  "history_process" : "d4zcq6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "u6qt70abzq8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097387,
  "history_end_time" : 1737328097387,
  "history_notes" : null,
  "history_process" : "6x6myw",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ltkg9icbcsx",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097389,
  "history_end_time" : 1737328097389,
  "history_notes" : null,
  "history_process" : "r4knm9",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "o2mwfwzavnl",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097390,
  "history_end_time" : 1737328097390,
  "history_notes" : null,
  "history_process" : "9c573m",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "7mqyd4p6zq5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097391,
  "history_end_time" : 1737328097391,
  "history_notes" : null,
  "history_process" : "ee5ur4",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "8slkk59obxl",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097393,
  "history_end_time" : 1737328097393,
  "history_notes" : null,
  "history_process" : "f03i7p",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "b2yn2sqcf0o",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097413,
  "history_end_time" : 1737328097413,
  "history_notes" : null,
  "history_process" : "83d2yv",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "cockcurhvem",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097418,
  "history_end_time" : 1737328097418,
  "history_notes" : null,
  "history_process" : "j8swco",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "1pj0duforbr",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097420,
  "history_end_time" : 1737328097420,
  "history_notes" : null,
  "history_process" : "pnr64x",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "7h81ssnwv90",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097423,
  "history_end_time" : 1737328097423,
  "history_notes" : null,
  "history_process" : "qg80lj",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "bn7az3olg35",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097426,
  "history_end_time" : 1737328097426,
  "history_notes" : null,
  "history_process" : "ggy7gf",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ok032tmk9wj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097428,
  "history_end_time" : 1737328097428,
  "history_notes" : null,
  "history_process" : "c2qa9u",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "7wjyqgzdq2u",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097429,
  "history_end_time" : 1737328097429,
  "history_notes" : null,
  "history_process" : "lnrsop",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "o3w5o3nras4",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097430,
  "history_end_time" : 1737328097430,
  "history_notes" : null,
  "history_process" : "c8isgf",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "qbzc99221s9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097432,
  "history_end_time" : 1737328097432,
  "history_notes" : null,
  "history_process" : "16qpco",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "gk9hny77dyk",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097433,
  "history_end_time" : 1737328097433,
  "history_notes" : null,
  "history_process" : "1xdwd6",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "9as4zek7j8w",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097435,
  "history_end_time" : 1737328097435,
  "history_notes" : null,
  "history_process" : "uw1w1u",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "7o2jirvqcg8",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097469,
  "history_end_time" : 1737328097469,
  "history_notes" : null,
  "history_process" : "14bhpn",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ezccuof0a1o",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097474,
  "history_end_time" : 1737328097474,
  "history_notes" : null,
  "history_process" : "pyn9xn",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "i8fy76k0v6f",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097478,
  "history_end_time" : 1737328097478,
  "history_notes" : null,
  "history_process" : "h1952i",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "zuk9h8nv7pq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097480,
  "history_end_time" : 1737328097480,
  "history_notes" : null,
  "history_process" : "k1aoz3",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "kkbxhg5kdit",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097482,
  "history_end_time" : 1737328097482,
  "history_notes" : null,
  "history_process" : "i66nk8",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "d8zzdhj000r",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097484,
  "history_end_time" : 1737328097484,
  "history_notes" : null,
  "history_process" : "sacl4k",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "8y6aycvgsgb",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097486,
  "history_end_time" : 1737328097486,
  "history_notes" : null,
  "history_process" : "f86ae7",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "yydqpxiata4",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097488,
  "history_end_time" : 1737328097488,
  "history_notes" : null,
  "history_process" : "7ktwm9",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "eip01g3vwnl",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097489,
  "history_end_time" : 1737328097489,
  "history_notes" : null,
  "history_process" : "04fgyq",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "jest93zv42g",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097491,
  "history_end_time" : 1737328097491,
  "history_notes" : null,
  "history_process" : "dwa3fy",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "qhk9zv74jvd",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1737328097492,
  "history_end_time" : 1737328097492,
  "history_notes" : null,
  "history_process" : "gz5syq",
  "host_id" : "100001",
  "indicator" : "Skipped"
}]
